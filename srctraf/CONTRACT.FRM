VERSION 5.00
Object = "{C932BA88-4374-101B-A56C-00AA003668DC}#1.1#0"; "msmask32.ocx"
Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.2#0"; "comdlg32.ocx"
Object = "{6B7E6392-850A-101B-AFC0-4210102A8DA7}#1.5#0"; "comctl32.ocx"
Object = "{0ECD9B60-23AA-11D0-B351-00A0C9055D8E}#6.0#0"; "MSHFLXGD.OCX"
Begin VB.Form Contract 
   Appearance      =   0  'Flat
   BorderStyle     =   3  'Fixed Dialog
   ClientHeight    =   6045
   ClientLeft      =   240
   ClientTop       =   1650
   ClientWidth     =   9495
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "Arial"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkMode        =   1  'Source
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   6045
   ScaleWidth      =   9495
   Visible         =   0   'False
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   6
      ItemData        =   "CONTRACT.frx":0000
      Left            =   0
      List            =   "CONTRACT.frx":0007
      TabIndex        =   289
      TabStop         =   0   'False
      Top             =   0
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.PictureBox pbcSumType 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BeginProperty Font 
         Name            =   "Arial Narrow"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   225
      Index           =   3
      Left            =   1485
      ScaleHeight     =   195
      ScaleWidth      =   675
      TabIndex        =   186
      TabStop         =   0   'False
      Top             =   720
      Visible         =   0   'False
      Width           =   705
   End
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   5
      ItemData        =   "CONTRACT.frx":0013
      Left            =   1140
      List            =   "CONTRACT.frx":001A
      TabIndex        =   211
      TabStop         =   0   'False
      Top             =   570
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   4
      ItemData        =   "CONTRACT.frx":0026
      Left            =   885
      List            =   "CONTRACT.frx":0028
      TabIndex        =   210
      TabStop         =   0   'False
      Top             =   420
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.ListBox lbcLnProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   3
      ItemData        =   "CONTRACT.frx":002A
      Left            =   915
      List            =   "CONTRACT.frx":002C
      TabIndex        =   103
      TabStop         =   0   'False
      Top             =   555
      Visible         =   0   'False
      Width           =   5415
   End
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   3
      ItemData        =   "CONTRACT.frx":002E
      Left            =   525
      List            =   "CONTRACT.frx":0030
      Sorted          =   -1  'True
      TabIndex        =   209
      TabStop         =   0   'False
      Top             =   315
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.ListBox lbcPkVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      ItemData        =   "CONTRACT.frx":0032
      Left            =   2025
      List            =   "CONTRACT.frx":0034
      TabIndex        =   98
      TabStop         =   0   'False
      Top             =   480
      Visible         =   0   'False
      Width           =   2190
   End
   Begin VB.ListBox lbcPkVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      ItemData        =   "CONTRACT.frx":0036
      Left            =   1710
      List            =   "CONTRACT.frx":0038
      TabIndex        =   97
      TabStop         =   0   'False
      Top             =   330
      Visible         =   0   'False
      Width           =   2190
   End
   Begin VB.ListBox lbcPkProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      ItemData        =   "CONTRACT.frx":003A
      Left            =   1170
      List            =   "CONTRACT.frx":003C
      TabIndex        =   108
      TabStop         =   0   'False
      Top             =   510
      Visible         =   0   'False
      Width           =   3540
   End
   Begin VB.ListBox lbcPkProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      ItemData        =   "CONTRACT.frx":003E
      Left            =   2235
      List            =   "CONTRACT.frx":0040
      TabIndex        =   107
      TabStop         =   0   'False
      Top             =   285
      Visible         =   0   'False
      Width           =   3540
   End
   Begin VB.ListBox lbcLnProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      ItemData        =   "CONTRACT.frx":0042
      Left            =   690
      List            =   "CONTRACT.frx":0044
      TabIndex        =   102
      TabStop         =   0   'False
      Top             =   450
      Visible         =   0   'False
      Width           =   5415
   End
   Begin VB.ListBox lbcLnProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      ItemData        =   "CONTRACT.frx":0046
      Left            =   690
      List            =   "CONTRACT.frx":0048
      TabIndex        =   101
      TabStop         =   0   'False
      Top             =   210
      Visible         =   0   'False
      Width           =   5415
   End
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      ItemData        =   "CONTRACT.frx":004A
      Left            =   870
      List            =   "CONTRACT.frx":004C
      Sorted          =   -1  'True
      TabIndex        =   208
      TabStop         =   0   'False
      Top             =   660
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      ItemData        =   "CONTRACT.frx":004E
      Left            =   600
      List            =   "CONTRACT.frx":0050
      Sorted          =   -1  'True
      TabIndex        =   207
      TabStop         =   0   'False
      Top             =   285
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.ListBox lbcLnVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      ItemData        =   "CONTRACT.frx":0052
      Left            =   210
      List            =   "CONTRACT.frx":0054
      TabIndex        =   95
      TabStop         =   0   'False
      Top             =   2085
      Visible         =   0   'False
      Width           =   2205
   End
   Begin VB.ListBox lbcLnVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      ItemData        =   "CONTRACT.frx":0056
      Left            =   45
      List            =   "CONTRACT.frx":0058
      TabIndex        =   94
      TabStop         =   0   'False
      Top             =   1890
      Visible         =   0   'False
      Width           =   2205
   End
   Begin VB.Timer tmcLnTab 
      Enabled         =   0   'False
      Interval        =   100
      Left            =   9060
      Top             =   5670
   End
   Begin VB.ListBox lbcDWP 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "CONTRACT.frx":005A
      Left            =   7230
      List            =   "CONTRACT.frx":005C
      TabIndex        =   127
      TabStop         =   0   'False
      Top             =   2475
      Visible         =   0   'False
      Width           =   1395
   End
   Begin VB.TextBox edcDGDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1380
      MaxLength       =   20
      TabIndex        =   114
      TabStop         =   0   'False
      Top             =   3480
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.CommandButton cmcDGDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   2430
      Picture         =   "CONTRACT.frx":005E
      TabIndex        =   115
      TabStop         =   0   'False
      Top             =   3495
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.ListBox lbcComment 
      Appearance      =   0  'Flat
      BackColor       =   &H0080FFFF&
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   450
      Index           =   2
      ItemData        =   "CONTRACT.frx":0158
      Left            =   165
      List            =   "CONTRACT.frx":015A
      TabIndex        =   278
      TabStop         =   0   'False
      Top             =   5460
      Visible         =   0   'False
      Width           =   6570
   End
   Begin VB.TextBox edcAct1 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   855
      Left            =   540
      Locked          =   -1  'True
      MultiLine       =   -1  'True
      ScrollBars      =   2  'Vertical
      TabIndex        =   120
      Top             =   5535
      Visible         =   0   'False
      Width           =   7980
   End
   Begin VB.ListBox lbcAcqCost 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6990
      TabIndex        =   123
      TabStop         =   0   'False
      Top             =   5475
      Visible         =   0   'False
      Width           =   1650
   End
   Begin VB.ListBox lbcRegion 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "CONTRACT.frx":015C
      Left            =   855
      List            =   "CONTRACT.frx":015E
      TabIndex        =   110
      TabStop         =   0   'False
      Top             =   4470
      Visible         =   0   'False
      Width           =   1155
   End
   Begin VB.PictureBox pbcLbcVehicle 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      Enabled         =   0   'False
      ForeColor       =   &H80000008&
      Height          =   1155
      Left            =   825
      ScaleHeight     =   1155
      ScaleWidth      =   450
      TabIndex        =   266
      TabStop         =   0   'False
      Top             =   3495
      Visible         =   0   'False
      Width           =   450
   End
   Begin VB.ListBox lbcBBLen 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "CONTRACT.frx":0160
      Left            =   3690
      List            =   "CONTRACT.frx":0162
      TabIndex        =   109
      TabStop         =   0   'False
      Top             =   3570
      Visible         =   0   'False
      Width           =   1155
   End
   Begin VB.PictureBox pbcOVWD 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1065
      Index           =   2
      Left            =   4050
      Picture         =   "CONTRACT.frx":0164
      ScaleHeight     =   1065
      ScaleWidth      =   3360
      TabIndex        =   265
      TabStop         =   0   'False
      Top             =   4800
      Visible         =   0   'False
      Width           =   3360
   End
   Begin VB.PictureBox plcCalendar 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1770
      Left            =   3900
      ScaleHeight     =   1740
      ScaleWidth      =   1965
      TabIndex        =   111
      TabStop         =   0   'False
      Top             =   1365
      Visible         =   0   'False
      Width           =   1995
      Begin VB.CommandButton cmcCalUp 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   8.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   225
         Left            =   1635
         TabIndex        =   116
         TabStop         =   0   'False
         Top             =   45
         Width           =   285
      End
      Begin VB.CommandButton cmcCalDn 
         Appearance      =   0  'Flat
         Caption         =   "s"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   8.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   225
         Left            =   45
         TabIndex        =   112
         TabStop         =   0   'False
         Top             =   45
         Width           =   285
      End
      Begin VB.PictureBox pbcCalendar 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ClipControls    =   0   'False
         ForeColor       =   &H00FF0000&
         Height          =   1440
         Left            =   45
         Picture         =   "CONTRACT.frx":BC06
         ScaleHeight     =   1410
         ScaleWidth      =   1845
         TabIndex        =   117
         TabStop         =   0   'False
         Top             =   255
         Width           =   1875
         Begin VB.Label lacDate 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FF0000&
            BorderStyle     =   1  'Fixed Single
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00FFFFFF&
            Height          =   240
            Left            =   510
            TabIndex        =   122
            Top             =   390
            Visible         =   0   'False
            Width           =   300
         End
      End
      Begin VB.Label lacCalName 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   210
         Left            =   315
         TabIndex        =   113
         Top             =   15
         Width           =   1305
      End
   End
   Begin VB.PictureBox plcTme 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   1410
      Left            =   4065
      ScaleHeight     =   1380
      ScaleWidth      =   1095
      TabIndex        =   62
      TabStop         =   0   'False
      Top             =   3870
      Visible         =   0   'False
      Width           =   1125
      Begin VB.PictureBox pbcTme 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         ForeColor       =   &H00FF0000&
         Height          =   1305
         Left            =   45
         Picture         =   "CONTRACT.frx":EA20
         ScaleHeight     =   1305
         ScaleWidth      =   1020
         TabIndex        =   63
         TabStop         =   0   'False
         Top             =   45
         Width           =   1020
         Begin VB.Image imcTmeInv 
            Appearance      =   0  'Flat
            Enabled         =   0   'False
            Height          =   480
            Left            =   360
            Picture         =   "CONTRACT.frx":F6DE
            Top             =   765
            Visible         =   0   'False
            Width           =   480
         End
         Begin VB.Image imcTmeOutline 
            Appearance      =   0  'Flat
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            Height          =   285
            Left            =   330
            Top             =   270
            Visible         =   0   'False
            Width           =   360
         End
      End
   End
   Begin VB.PictureBox pbcDGPreempt 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   5700
      ScaleHeight     =   210
      ScaleWidth      =   870
      TabIndex        =   119
      TabStop         =   0   'False
      Top             =   3045
      Visible         =   0   'False
      Width           =   870
   End
   Begin VB.PictureBox pbcOv 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   720
      Left            =   3840
      Picture         =   "CONTRACT.frx":F9E8
      ScaleHeight     =   720
      ScaleWidth      =   2775
      TabIndex        =   105
      TabStop         =   0   'False
      Top             =   2085
      Visible         =   0   'False
      Width           =   2775
   End
   Begin VB.PictureBox plcOv 
      Appearance      =   0  'Flat
      BackColor       =   &H0080FF80&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1125
      Left            =   3675
      ScaleHeight     =   1125
      ScaleWidth      =   3045
      TabIndex        =   104
      TabStop         =   0   'False
      Top             =   1980
      Visible         =   0   'False
      Width           =   3045
   End
   Begin VB.PictureBox plcPower 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   2220
      Left            =   3225
      ScaleHeight     =   2160
      ScaleWidth      =   9120
      TabIndex        =   132
      TabStop         =   0   'False
      Top             =   3960
      Visible         =   0   'False
      Width           =   9180
      Begin VB.Frame frcRBBookName 
         Caption         =   "Book Name"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FF0000&
         Height          =   2040
         Left            =   6285
         TabIndex        =   181
         Top             =   450
         Width           =   2280
         Begin VB.ListBox lbcRBBookName 
            Appearance      =   0  'Flat
            Height          =   1080
            ItemData        =   "CONTRACT.frx":1968A
            Left            =   120
            List            =   "CONTRACT.frx":1968C
            TabIndex        =   182
            Top             =   285
            Width           =   2040
         End
      End
      Begin VB.ComboBox cbcRBView 
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   6.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   285
         ItemData        =   "CONTRACT.frx":1968E
         Left            =   885
         List            =   "CONTRACT.frx":19690
         TabIndex        =   126
         TabStop         =   0   'False
         Top             =   255
         Visible         =   0   'False
         Width           =   1920
      End
      Begin VB.Frame frcRBSum 
         Height          =   630
         Left            =   1065
         TabIndex        =   128
         Top             =   1290
         Width           =   1560
         Begin VB.PictureBox pbcRBVeh 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BorderStyle     =   0  'None
            ForeColor       =   &H80000008&
            Height          =   1560
            Index           =   1
            Left            =   90
            Picture         =   "CONTRACT.frx":19692
            ScaleHeight     =   1560
            ScaleWidth      =   7245
            TabIndex        =   129
            Top             =   195
            Width           =   7245
            Begin VB.TextBox edcRB 
               Appearance      =   0  'Flat
               BackColor       =   &H00FFFF00&
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "MS Sans Serif"
                  Size            =   8.25
                  Charset         =   0
                  Weight          =   700
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   210
               Index           =   1
               Left            =   75
               TabIndex        =   130
               Top             =   75
               Visible         =   0   'False
               Width           =   960
            End
         End
         Begin VB.VScrollBar vbcRBVeh 
            Height          =   1635
            Index           =   1
            LargeChange     =   6
            Left            =   675
            TabIndex        =   131
            TabStop         =   0   'False
            Top             =   135
            Width           =   255
         End
      End
      Begin VB.Frame frcPBVeh 
         Caption         =   "Vehicles"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FF0000&
         Height          =   2040
         Left            =   4095
         TabIndex        =   161
         Top             =   -825
         Width           =   2025
         Begin VB.Frame frcRBVehSpots 
            Appearance      =   0  'Flat
            BorderStyle     =   0  'None
            ForeColor       =   &H80000008&
            Height          =   1200
            Left            =   810
            TabIndex        =   170
            Top             =   255
            Visible         =   0   'False
            Width           =   630
            Begin VB.TextBox edcRBDatesSpots 
               Appearance      =   0  'Flat
               BackColor       =   &H00FFFF00&
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "MS Sans Serif"
                  Size            =   8.25
                  Charset         =   0
                  Weight          =   700
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   210
               Index           =   1
               Left            =   165
               MaxLength       =   2
               TabIndex        =   174
               Top             =   330
               Visible         =   0   'False
               Width           =   330
            End
            Begin VB.PictureBox pbcLbcRBDatesSpots 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               BorderStyle     =   0  'None
               Enabled         =   0   'False
               ForeColor       =   &H80000008&
               Height          =   1155
               Index           =   1
               Left            =   15
               ScaleHeight     =   1155
               ScaleWidth      =   450
               TabIndex        =   173
               TabStop         =   0   'False
               Top             =   15
               Width           =   450
            End
            Begin VB.PictureBox pbcRBDatesSpotsTab 
               Appearance      =   0  'Flat
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "MS Sans Serif"
                  Size            =   8.25
                  Charset         =   0
                  Weight          =   700
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   15
               Index           =   1
               Left            =   30
               ScaleHeight     =   15
               ScaleWidth      =   30
               TabIndex        =   175
               Top             =   135
               Width           =   30
            End
            Begin VB.PictureBox pbcRBDatesSpotsSTab 
               Appearance      =   0  'Flat
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "MS Sans Serif"
                  Size            =   8.25
                  Charset         =   0
                  Weight          =   700
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   0
               Index           =   1
               Left            =   0
               ScaleHeight     =   0
               ScaleWidth      =   0
               TabIndex        =   171
               Top             =   0
               Width           =   0
            End
            Begin VB.ListBox lbcRBDatesSpots 
               Appearance      =   0  'Flat
               Height          =   1290
               Index           =   1
               ItemData        =   "CONTRACT.frx":4341C
               Left            =   0
               List            =   "CONTRACT.frx":4341E
               MultiSelect     =   2  'Extended
               TabIndex        =   172
               TabStop         =   0   'False
               Top             =   0
               Width           =   855
            End
         End
         Begin VB.CheckBox ckcRBGridAll 
            Caption         =   "All"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Left            =   1065
            TabIndex        =   162
            TabStop         =   0   'False
            Top             =   105
            Width           =   600
         End
         Begin VB.TextBox edcPBEqualValuePrice 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Left            =   1290
            TabIndex        =   165
            Top             =   600
            Visible         =   0   'False
            Width           =   660
         End
         Begin VB.TextBox edcPBFactor 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Left            =   1230
            MaxLength       =   3
            TabIndex        =   178
            Top             =   1365
            Visible         =   0   'False
            Width           =   540
         End
         Begin VB.TextBox edcPBEqualValueSpots 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Left            =   1065
            MaxLength       =   2
            TabIndex        =   164
            Top             =   480
            Visible         =   0   'False
            Width           =   510
         End
         Begin VB.TextBox edcPBEqualValueCPM 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Left            =   1380
            TabIndex        =   167
            Top             =   135
            Visible         =   0   'False
            Width           =   600
         End
         Begin VB.TextBox edcPBEqualValueCPP 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Left            =   1395
            TabIndex        =   166
            Top             =   300
            Visible         =   0   'False
            Width           =   660
         End
         Begin VB.VScrollBar vbcRBVeh 
            Height          =   1635
            Index           =   0
            LargeChange     =   10
            Left            =   1725
            TabIndex        =   176
            Top             =   285
            Visible         =   0   'False
            Width           =   255
         End
         Begin VB.PictureBox pbcRBVeh 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BorderStyle     =   0  'None
            ForeColor       =   &H80000008&
            Height          =   600
            Index           =   0
            Left            =   120
            Picture         =   "CONTRACT.frx":43420
            ScaleHeight     =   600
            ScaleWidth      =   7245
            TabIndex        =   168
            Top             =   465
            Visible         =   0   'False
            Width           =   7245
            Begin VB.TextBox edcRB 
               Appearance      =   0  'Flat
               BackColor       =   &H00FFFF00&
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "MS Sans Serif"
                  Size            =   8.25
                  Charset         =   0
                  Weight          =   700
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   210
               Index           =   0
               Left            =   90
               TabIndex        =   169
               Top             =   210
               Visible         =   0   'False
               Width           =   960
            End
         End
         Begin VB.Label lacPBFactor 
            Caption         =   "Spot Multipler"
            Height          =   210
            Left            =   75
            TabIndex        =   177
            Top             =   1350
            Width           =   1200
         End
         Begin VB.Label lacPBEqualValue 
            Appearance      =   0  'Flat
            Caption         =   "Set Value:"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   210
            Left            =   -225
            TabIndex        =   163
            Top             =   195
            Visible         =   0   'False
            Width           =   915
         End
      End
      Begin VB.CommandButton cmcGenPkgLine 
         Appearance      =   0  'Flat
         Caption         =   "Gen &Pkg Line"
         Enabled         =   0   'False
         Height          =   285
         Left            =   2610
         TabIndex        =   184
         Top             =   75
         Visible         =   0   'False
         Width           =   1605
      End
      Begin VB.CommandButton cmcPBCancel 
         Appearance      =   0  'Flat
         Caption         =   "&Cancel"
         Height          =   285
         Left            =   2460
         TabIndex        =   185
         Top             =   1830
         Width           =   945
      End
      Begin VB.Frame frcPBDaypart 
         Caption         =   "Dayparts"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FF0000&
         Height          =   2040
         Left            =   5775
         TabIndex        =   179
         Top             =   90
         Width           =   2280
         Begin VB.ListBox lbcDaypart 
            Appearance      =   0  'Flat
            Height          =   1290
            Left            =   120
            MultiSelect     =   2  'Extended
            TabIndex        =   180
            Top             =   285
            Width           =   2040
         End
      End
      Begin VB.Frame frcPBDates 
         Caption         =   "Specifications"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FF0000&
         Height          =   1470
         Left            =   780
         TabIndex        =   133
         Top             =   315
         Width           =   3480
         Begin VB.PictureBox pbclbcRBVehicle 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            BorderStyle     =   0  'None
            Enabled         =   0   'False
            ForeColor       =   &H80000008&
            Height          =   1155
            Left            =   2730
            ScaleHeight     =   1155
            ScaleWidth      =   450
            TabIndex        =   157
            TabStop         =   0   'False
            Top             =   105
            Width           =   450
         End
         Begin VB.CommandButton cmcRBGenGrid 
            Appearance      =   0  'Flat
            Caption         =   "&Generate Grid"
            Height          =   285
            Left            =   690
            TabIndex        =   150
            Top             =   1155
            Width           =   1725
         End
         Begin VB.CheckBox ckcRBAllDP 
            Caption         =   "All"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Left            =   2400
            TabIndex        =   160
            TabStop         =   0   'False
            Top             =   1215
            Width           =   630
         End
         Begin VB.CheckBox ckcRBAllVeh 
            Caption         =   "All"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Left            =   1950
            TabIndex        =   158
            TabStop         =   0   'False
            Top             =   1215
            Width           =   630
         End
         Begin VB.PictureBox pbcRBDatesSpotsSTab 
            Appearance      =   0  'Flat
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   0
            Index           =   0
            Left            =   1845
            ScaleHeight     =   0
            ScaleWidth      =   0
            TabIndex        =   152
            Top             =   165
            Width           =   0
         End
         Begin VB.PictureBox pbcRBDatesSpotsTab 
            Appearance      =   0  'Flat
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   135
            Index           =   0
            Left            =   1875
            ScaleHeight     =   135
            ScaleWidth      =   75
            TabIndex        =   155
            Top             =   120
            Width           =   75
         End
         Begin VB.TextBox edcRBDatesSpots 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   0
            Left            =   2550
            MaxLength       =   2
            TabIndex        =   154
            Top             =   450
            Visible         =   0   'False
            Width           =   330
         End
         Begin VB.PictureBox pbcLbcRBDatesSpots 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            BorderStyle     =   0  'None
            Enabled         =   0   'False
            ForeColor       =   &H80000008&
            Height          =   1155
            Index           =   0
            Left            =   195
            ScaleHeight     =   1155
            ScaleWidth      =   450
            TabIndex        =   153
            TabStop         =   0   'False
            Top             =   270
            Width           =   450
         End
         Begin VB.ListBox lbcRBDatesSpots 
            Appearance      =   0  'Flat
            Height          =   1290
            Index           =   0
            ItemData        =   "CONTRACT.frx":803F2
            Left            =   -435
            List            =   "CONTRACT.frx":803F4
            MultiSelect     =   2  'Extended
            TabIndex        =   151
            Top             =   270
            Width           =   855
         End
         Begin VB.TextBox edcRBWks 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   0
            Left            =   1050
            MaxLength       =   2
            TabIndex        =   145
            Text            =   "1"
            Top             =   1335
            Width           =   375
         End
         Begin VB.TextBox edcRBWks 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   1
            Left            =   2580
            MaxLength       =   2
            TabIndex        =   147
            Text            =   "0"
            Top             =   1350
            Width           =   375
         End
         Begin VB.TextBox edcRBWks 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   3
            Left            =   1230
            MaxLength       =   3
            TabIndex        =   148
            Top             =   1140
            Width           =   540
         End
         Begin VB.ListBox lbcPBLen 
            Appearance      =   0  'Flat
            Height          =   450
            Left            =   3405
            TabIndex        =   142
            Top             =   645
            Width           =   750
         End
         Begin VB.TextBox edcRBWks 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   2
            Left            =   1350
            MaxLength       =   3
            TabIndex        =   138
            Top             =   525
            Width           =   540
         End
         Begin VB.CommandButton cmcPBDate 
            Appearance      =   0  'Flat
            Caption         =   "t"
            BeginProperty Font 
               Name            =   "Monotype Sorts"
               Size            =   5.25
               Charset         =   2
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   1
            Left            =   3135
            Picture         =   "CONTRACT.frx":803F6
            TabIndex        =   141
            TabStop         =   0   'False
            Top             =   540
            Width           =   195
         End
         Begin VB.TextBox edcPBDate 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   1
            Left            =   3105
            MaxLength       =   20
            TabIndex        =   140
            Top             =   1020
            Width           =   870
         End
         Begin VB.CommandButton cmcPBDate 
            Appearance      =   0  'Flat
            Caption         =   "t"
            BeginProperty Font 
               Name            =   "Monotype Sorts"
               Size            =   5.25
               Charset         =   2
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   225
            Index           =   0
            Left            =   990
            Picture         =   "CONTRACT.frx":804F0
            TabIndex        =   136
            TabStop         =   0   'False
            Top             =   540
            Width           =   195
         End
         Begin VB.TextBox edcPBDate 
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFF00&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   210
            Index           =   0
            Left            =   120
            MaxLength       =   20
            TabIndex        =   135
            Top             =   435
            Width           =   870
         End
         Begin VB.ListBox lbcRBVehicle 
            Appearance      =   0  'Flat
            Height          =   1290
            ItemData        =   "CONTRACT.frx":805EA
            Left            =   2700
            List            =   "CONTRACT.frx":805EC
            MultiSelect     =   2  'Extended
            TabIndex        =   156
            Top             =   90
            Width           =   630
         End
         Begin VB.ListBox lbcRBDaypart 
            Appearance      =   0  'Flat
            Height          =   1290
            Left            =   3165
            MultiSelect     =   2  'Extended
            TabIndex        =   159
            Top             =   180
            Width           =   360
         End
         Begin VB.Label lacPBDates 
            Appearance      =   0  'Flat
            Caption         =   " End Date"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   210
            Index           =   2
            Left            =   2175
            TabIndex        =   139
            Top             =   240
            Width           =   885
         End
         Begin VB.Label lacPBDates 
            Appearance      =   0  'Flat
            Caption         =   "# Wk"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   210
            Index           =   1
            Left            =   1410
            TabIndex        =   137
            Top             =   240
            Width           =   555
         End
         Begin VB.Label lacRBWks 
            Appearance      =   0  'Flat
            Caption         =   "Weeks On"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   0
            Left            =   90
            TabIndex        =   144
            Top             =   1365
            Width           =   990
         End
         Begin VB.Label lacRBWks 
            Appearance      =   0  'Flat
            Caption         =   "Weeks Off"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   1
            Left            =   1575
            TabIndex        =   146
            Top             =   1365
            Width           =   990
         End
         Begin VB.Label lacPBSpots 
            Appearance      =   0  'Flat
            Caption         =   "Spots/Week"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   210
            Left            =   90
            TabIndex        =   143
            Top             =   1140
            Width           =   1095
         End
         Begin VB.Label lacPBDates 
            Appearance      =   0  'Flat
            Caption         =   "Start Date"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   210
            Index           =   0
            Left            =   225
            TabIndex        =   134
            Top             =   240
            Width           =   915
         End
      End
      Begin VB.CommandButton cmcGenLineBar 
         Appearance      =   0  'Flat
         Caption         =   "&Gen Lines"
         Enabled         =   0   'False
         Height          =   285
         Left            =   405
         TabIndex        =   183
         Top             =   1830
         Width           =   1605
      End
   End
   Begin VB.PictureBox pbcDBLnDaily 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   3270
      ScaleHeight     =   210
      ScaleWidth      =   360
      TabIndex        =   252
      TabStop         =   0   'False
      Top             =   4155
      Visible         =   0   'False
      Width           =   360
   End
   Begin VB.PictureBox pbcLnDaily 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   4950
      ScaleHeight     =   210
      ScaleWidth      =   360
      TabIndex        =   92
      TabStop         =   0   'False
      Top             =   4020
      Visible         =   0   'False
      Width           =   360
   End
   Begin VB.PictureBox pbcOVWD 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2085
      Index           =   1
      Left            =   660
      Picture         =   "CONTRACT.frx":805EE
      ScaleHeight     =   2085
      ScaleWidth      =   2745
      TabIndex        =   262
      TabStop         =   0   'False
      Top             =   675
      Visible         =   0   'False
      Width           =   2745
   End
   Begin VB.PictureBox pbcOVWD 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1065
      Index           =   0
      Left            =   3450
      Picture         =   "CONTRACT.frx":931E8
      ScaleHeight     =   1065
      ScaleWidth      =   2745
      TabIndex        =   261
      TabStop         =   0   'False
      Top             =   1770
      Visible         =   0   'False
      Width           =   2745
   End
   Begin VB.PictureBox pbcLineArrow 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      ClipControls    =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   180
      Left            =   15
      Picture         =   "CONTRACT.frx":A2C4A
      ScaleHeight     =   180
      ScaleWidth      =   105
      TabIndex        =   125
      TabStop         =   0   'False
      Top             =   2310
      Visible         =   0   'False
      Width           =   105
   End
   Begin VB.ListBox lbcSeg 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5610
      TabIndex        =   15
      TabStop         =   0   'False
      Top             =   5190
      Visible         =   0   'False
      Width           =   2190
   End
   Begin VB.ListBox lbcQtPrice 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   4860
      TabIndex        =   85
      TabStop         =   0   'False
      Top             =   3525
      Visible         =   0   'False
      Width           =   1740
   End
   Begin VB.ListBox lbcResvAdvt 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5415
      TabIndex        =   60
      TabStop         =   0   'False
      Top             =   1245
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcDBDisplay 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1950
      TabIndex        =   259
      TabStop         =   0   'False
      Top             =   4725
      Visible         =   0   'False
      Width           =   1935
   End
   Begin VB.ListBox lbcDBDemo 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   975
      TabIndex        =   239
      TabStop         =   0   'False
      Top             =   1800
      Visible         =   0   'False
      Width           =   1065
   End
   Begin VB.ListBox lbcDBSocEco 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "CONTRACT.frx":A2F54
      Left            =   2565
      List            =   "CONTRACT.frx":A2F56
      TabIndex        =   242
      TabStop         =   0   'False
      Top             =   1725
      Visible         =   0   'False
      Width           =   2610
   End
   Begin VB.ListBox lbcDBBook 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   960
      TabIndex        =   234
      TabStop         =   0   'False
      Top             =   2115
      Visible         =   0   'False
      Width           =   2790
   End
   Begin VB.ListBox lbcShtTitle 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   2730
      TabIndex        =   22
      TabStop         =   0   'False
      Top             =   1455
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.TextBox edcLNDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   4860
      MaxLength       =   20
      TabIndex        =   90
      TabStop         =   0   'False
      Top             =   4095
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.CommandButton cmcLnDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   3600
      Picture         =   "CONTRACT.frx":A2F58
      TabIndex        =   91
      TabStop         =   0   'False
      Top             =   2715
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.ListBox lbcPkVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   5805
      TabIndex        =   96
      TabStop         =   0   'False
      Top             =   5205
      Visible         =   0   'False
      Width           =   2190
   End
   Begin VB.ListBox lbcPkProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   3690
      TabIndex        =   106
      TabStop         =   0   'False
      Top             =   4905
      Visible         =   0   'False
      Width           =   3540
   End
   Begin VB.ListBox lbcRevNo 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6885
      TabIndex        =   18
      TabStop         =   0   'False
      Top             =   315
      Visible         =   0   'False
      Width           =   1155
   End
   Begin VB.TextBox edcDBValue 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1305
      MaxLength       =   20
      TabIndex        =   251
      TabStop         =   0   'False
      Top             =   1815
      Visible         =   0   'False
      Width           =   570
   End
   Begin VB.ListBox lbcBuyer 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5505
      TabIndex        =   49
      TabStop         =   0   'False
      Top             =   1035
      Visible         =   0   'False
      Width           =   2985
   End
   Begin VB.ListBox lbcPriceType 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   6300
      TabIndex        =   121
      TabStop         =   0   'False
      Top             =   855
      Visible         =   0   'False
      Width           =   1650
   End
   Begin VB.ListBox lbcPriceType 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   6405
      TabIndex        =   118
      TabStop         =   0   'False
      Top             =   375
      Visible         =   0   'False
      Width           =   1845
   End
   Begin VB.Timer tmcDelay 
      Enabled         =   0   'False
      Interval        =   4000
      Left            =   5550
      Top             =   5595
   End
   Begin VB.TextBox edcPropVer 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   5760
      MaxLength       =   2
      TabIndex        =   19
      Top             =   1440
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.ListBox lbcBusCat 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   4035
      TabIndex        =   48
      TabStop         =   0   'False
      Top             =   1755
      Visible         =   0   'False
      Width           =   2355
   End
   Begin VB.PictureBox pbcAgyCTrade 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   7755
      ScaleHeight     =   210
      ScaleWidth      =   1485
      TabIndex        =   35
      TabStop         =   0   'False
      Top             =   2055
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.CommandButton cmcShareDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   8775
      Picture         =   "CONTRACT.frx":A3052
      TabIndex        =   37
      TabStop         =   0   'False
      Top             =   1830
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.TextBox edcShareDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   5625
      MaxLength       =   8
      TabIndex        =   36
      Top             =   2070
      Visible         =   0   'False
      Width           =   1770
   End
   Begin VB.ListBox lbcComment 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   6300
      TabIndex        =   99
      TabStop         =   0   'False
      Top             =   4755
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcComment 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   6315
      TabIndex        =   26
      TabStop         =   0   'False
      Top             =   4890
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcShareBudget 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   9030
      TabIndex        =   39
      TabStop         =   0   'False
      Top             =   1950
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcRevSet 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   4
      Left            =   5850
      TabIndex        =   56
      TabStop         =   0   'False
      Top             =   4785
      Visible         =   0   'False
      Width           =   2490
   End
   Begin VB.ListBox lbcRevSet 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   3
      Left            =   5685
      TabIndex        =   55
      TabStop         =   0   'False
      Top             =   4800
      Visible         =   0   'False
      Width           =   2490
   End
   Begin VB.ListBox lbcRevSet 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      Left            =   6105
      TabIndex        =   54
      TabStop         =   0   'False
      Top             =   4905
      Visible         =   0   'False
      Width           =   2490
   End
   Begin VB.ListBox lbcRevSet 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   5760
      TabIndex        =   53
      TabStop         =   0   'False
      Top             =   4860
      Visible         =   0   'False
      Width           =   2490
   End
   Begin VB.ListBox lbcRevSet 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   5700
      TabIndex        =   52
      TabStop         =   0   'False
      Top             =   4875
      Visible         =   0   'False
      Width           =   2490
   End
   Begin VB.PictureBox pbcRevenue 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1755
      Left            =   9375
      Picture         =   "CONTRACT.frx":A314C
      ScaleHeight     =   1755
      ScaleWidth      =   2520
      TabIndex        =   34
      TabStop         =   0   'False
      Top             =   1785
      Visible         =   0   'False
      Width           =   2520
   End
   Begin VB.ListBox lbcShareBudget 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   8835
      TabIndex        =   38
      TabStop         =   0   'False
      Top             =   1905
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.PictureBox pbcShareBudget 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2115
      Left            =   9360
      Picture         =   "CONTRACT.frx":A8126
      ScaleHeight     =   2115
      ScaleWidth      =   3360
      TabIndex        =   33
      TabStop         =   0   'False
      Top             =   1320
      Visible         =   0   'False
      Width           =   3360
   End
   Begin VB.ListBox lbcVehGp6 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5175
      TabIndex        =   51
      TabStop         =   0   'False
      Top             =   4755
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcSPerson 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   5400
      TabIndex        =   50
      TabStop         =   0   'False
      Top             =   4935
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.PictureBox pbcSPerson 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2325
      Left            =   9375
      Picture         =   "CONTRACT.frx":B13C8
      ScaleHeight     =   2325
      ScaleWidth      =   6780
      TabIndex        =   32
      TabStop         =   0   'False
      Top             =   2250
      Visible         =   0   'False
      Width           =   6780
   End
   Begin VB.ListBox lbcResv 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6000
      TabIndex        =   61
      TabStop         =   0   'False
      Top             =   360
      Visible         =   0   'False
      Width           =   1515
   End
   Begin VB.PictureBox pbcNumber 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1410
      Left            =   6345
      Picture         =   "CONTRACT.frx":F5F5A
      ScaleHeight     =   1410
      ScaleWidth      =   3075
      TabIndex        =   31
      TabStop         =   0   'False
      Top             =   1530
      Visible         =   0   'False
      Width           =   3075
   End
   Begin VB.ListBox lbcPot 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   2655
      TabIndex        =   14
      TabStop         =   0   'False
      Top             =   2025
      Visible         =   0   'False
      Width           =   1155
   End
   Begin VB.ListBox lbcStatus 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   780
      TabIndex        =   12
      TabStop         =   0   'False
      Top             =   2160
      Visible         =   0   'False
      Width           =   2310
   End
   Begin VB.ListBox lbcStep 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      Left            =   1920
      TabIndex        =   229
      TabStop         =   0   'False
      Top             =   1215
      Visible         =   0   'False
      Width           =   6180
   End
   Begin VB.ListBox lbcStep 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   4305
      TabIndex        =   228
      TabStop         =   0   'False
      Top             =   750
      Visible         =   0   'False
      Width           =   2805
   End
   Begin VB.ListBox lbcStep 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   2685
      TabIndex        =   227
      TabStop         =   0   'False
      Top             =   840
      Visible         =   0   'False
      Width           =   4395
   End
   Begin VB.TextBox edcStepDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   2325
      MaxLength       =   20
      TabIndex        =   4
      TabStop         =   0   'False
      Top             =   255
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.CommandButton cmcStepDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   3420
      Picture         =   "CONTRACT.frx":104434
      TabIndex        =   5
      TabStop         =   0   'False
      Top             =   285
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.PictureBox pbcSelect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   375
      Left            =   960
      Picture         =   "CONTRACT.frx":10452E
      ScaleHeight     =   375
      ScaleWidth      =   7455
      TabIndex        =   3
      TabStop         =   0   'False
      Top             =   15
      Width           =   7455
   End
   Begin VB.CommandButton cmcHdDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   4245
      Picture         =   "CONTRACT.frx":10DD60
      TabIndex        =   11
      TabStop         =   0   'False
      Top             =   1230
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.PictureBox plcSelect 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   420
      Left            =   945
      ScaleHeight     =   360
      ScaleWidth      =   7440
      TabIndex        =   2
      TabStop         =   0   'False
      Top             =   0
      Width           =   7500
   End
   Begin VB.ListBox lbcProd 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   870
      TabIndex        =   21
      TabStop         =   0   'False
      Top             =   2025
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcDemo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   6660
      TabIndex        =   40
      TabStop         =   0   'False
      Top             =   4965
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.ListBox lbcDemo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   3
      Left            =   6270
      TabIndex        =   43
      TabStop         =   0   'False
      Top             =   4920
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.ListBox lbcDemo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      Left            =   6480
      TabIndex        =   42
      TabStop         =   0   'False
      Top             =   5040
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.ListBox lbcDemo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   6585
      TabIndex        =   41
      TabStop         =   0   'False
      Top             =   5010
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.PictureBox pbcDmShare 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   8250
      ScaleHeight     =   210
      ScaleWidth      =   2850
      TabIndex        =   57
      TabStop         =   0   'False
      Top             =   1710
      Visible         =   0   'False
      Width           =   2850
   End
   Begin VB.PictureBox pbcDm 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1770
      Left            =   9120
      Picture         =   "CONTRACT.frx":10DE5A
      ScaleHeight     =   1770
      ScaleWidth      =   2910
      TabIndex        =   30
      TabStop         =   0   'False
      Top             =   1050
      Visible         =   0   'False
      Width           =   2910
   End
   Begin VB.ListBox lbcExcl 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   5880
      TabIndex        =   46
      TabStop         =   0   'False
      Top             =   4815
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcExcl 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   5895
      TabIndex        =   47
      TabStop         =   0   'False
      Top             =   4980
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcComp 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   5850
      TabIndex        =   45
      TabStop         =   0   'False
      Top             =   5025
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcLen 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   7080
      TabIndex        =   124
      TabStop         =   0   'False
      Top             =   5220
      Visible         =   0   'False
      Width           =   960
   End
   Begin VB.ListBox lbcShowPrice 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5760
      TabIndex        =   59
      TabStop         =   0   'False
      Top             =   4560
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcRateCard 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6735
      TabIndex        =   65
      TabStop         =   0   'False
      Top             =   4770
      Visible         =   0   'False
      Width           =   2220
   End
   Begin VB.ListBox lbcComp 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   4725
      TabIndex        =   44
      TabStop         =   0   'False
      Top             =   210
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcBillCycle 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6150
      TabIndex        =   66
      TabStop         =   0   'False
      Top             =   4680
      Visible         =   0   'False
      Width           =   1290
   End
   Begin VB.ListBox lbcLnProgram 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   2610
      TabIndex        =   100
      TabStop         =   0   'False
      Top             =   5895
      Visible         =   0   'False
      Width           =   5415
   End
   Begin VB.ListBox lbcLnVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   6000
      TabIndex        =   93
      TabStop         =   0   'False
      Top             =   4815
      Visible         =   0   'False
      Width           =   2205
   End
   Begin VB.ListBox lbcDay 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1515
      TabIndex        =   221
      TabStop         =   0   'False
      Top             =   -15
      Visible         =   0   'False
      Width           =   645
   End
   Begin VB.Timer tmcClick 
      Enabled         =   0   'False
      Interval        =   300
      Left            =   5490
      Top             =   5520
   End
   Begin VB.ListBox lbcInvGroup 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   7140
      TabIndex        =   67
      TabStop         =   0   'False
      Top             =   5820
      Visible         =   0   'False
      Width           =   1380
   End
   Begin VB.ListBox lbcAgency 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5670
      TabIndex        =   23
      TabStop         =   0   'False
      Top             =   4665
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcAdvt 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1755
      TabIndex        =   20
      TabStop         =   0   'False
      Top             =   2025
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcType 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   3975
      TabIndex        =   13
      TabStop         =   0   'False
      Top             =   165
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.TextBox edcHdDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   3210
      MaxLength       =   20
      TabIndex        =   10
      TabStop         =   0   'False
      Top             =   1245
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.ListBox lbcPrg 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   930
      Sorted          =   -1  'True
      TabIndex        =   206
      TabStop         =   0   'False
      Top             =   315
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.ListBox lbcLine 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1050
      Sorted          =   -1  'True
      TabIndex        =   212
      TabStop         =   0   'False
      Top             =   300
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.TextBox edcRevNo 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   7200
      TabIndex        =   17
      Top             =   1470
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.TextBox edcCntrNo 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   7515
      MaxLength       =   8
      TabIndex        =   16
      Top             =   1320
      Visible         =   0   'False
      Width           =   1155
   End
   Begin MSMask.MaskEdBox mkcPhone 
      Height          =   210
      Left            =   3255
      TabIndex        =   25
      Tag             =   "The number and extension of the buyer."
      Top             =   1425
      Visible         =   0   'False
      Width           =   2985
      _ExtentX        =   5265
      _ExtentY        =   370
      _Version        =   393216
      BorderStyle     =   0
      BackColor       =   16776960
      ForeColor       =   0
      MaxLength       =   24
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Mask            =   "(AAA) AAA-AAAA Ext(AAAA)"
      PromptChar      =   "_"
   End
   Begin VB.PictureBox pbcCE 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1065
      Left            =   7155
      Picture         =   "CONTRACT.frx":11EEDC
      ScaleHeight     =   1065
      ScaleWidth      =   4755
      TabIndex        =   24
      TabStop         =   0   'False
      Top             =   1155
      Visible         =   0   'False
      Width           =   4755
   End
   Begin VB.PictureBox plcComment 
      Appearance      =   0  'Flat
      BackColor       =   &H0080FF80&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   3705
      Left            =   -5415
      ScaleHeight     =   3705
      ScaleWidth      =   6915
      TabIndex        =   68
      TabStop         =   0   'False
      Top             =   4290
      Visible         =   0   'False
      Width           =   6915
      Begin VB.PictureBox plcShowCommOn 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00000000&
         Height          =   540
         Left            =   3390
         ScaleHeight     =   540
         ScaleWidth      =   3300
         TabIndex        =   73
         TabStop         =   0   'False
         Top             =   1395
         Width           =   3300
         Begin VB.CheckBox ckcCommOn 
            Caption         =   "Insertion"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   4
            Left            =   2160
            TabIndex        =   76
            Top             =   60
            Width           =   1065
         End
         Begin VB.CheckBox ckcCommOn 
            Caption         =   "Proposal"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   0
            Left            =   120
            TabIndex        =   74
            Top             =   45
            Width           =   1080
         End
         Begin VB.CheckBox ckcCommOn 
            Caption         =   "Order"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   1
            Left            =   1260
            TabIndex        =   75
            Top             =   60
            Width           =   840
         End
         Begin VB.CheckBox ckcCommOn 
            Caption         =   "Spots/Copy Screen"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   2
            Left            =   120
            TabIndex        =   77
            Top             =   285
            Width           =   2010
         End
         Begin VB.CheckBox ckcCommOn 
            Caption         =   "Invoices"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   195
            Index           =   3
            Left            =   2160
            TabIndex        =   78
            Top             =   285
            Width           =   1080
         End
      End
      Begin VB.PictureBox pbcDnMove 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         Enabled         =   0   'False
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   135
         Left            =   3015
         Picture         =   "CONTRACT.frx":12FADE
         ScaleHeight     =   135
         ScaleWidth      =   165
         TabIndex        =   72
         TabStop         =   0   'False
         Top             =   1455
         Width           =   165
      End
      Begin VB.CommandButton cmcDnMove 
         Appearance      =   0  'Flat
         Caption         =   "M&ove   "
         Height          =   285
         Left            =   2340
         TabIndex        =   71
         TabStop         =   0   'False
         Top             =   1380
         Width           =   945
      End
      Begin VB.ListBox lbcBPlate 
         Appearance      =   0  'Flat
         Height          =   1290
         Left            =   255
         TabIndex        =   69
         Top             =   285
         Width           =   1935
      End
      Begin VB.TextBox edcComment 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   1620
         Left            =   255
         MaxLength       =   5000
         MultiLine       =   -1  'True
         ScrollBars      =   2  'Vertical
         TabIndex        =   79
         Tag             =   "A typed comment of virtually any length, which will appear on the printed contract"
         Top             =   1980
         Width           =   6450
      End
      Begin VB.Label lacBPlate 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1080
         Left            =   2385
         TabIndex        =   70
         Top             =   285
         Width           =   4335
      End
   End
   Begin VB.Timer tmcDrag 
      Enabled         =   0   'False
      Interval        =   1000
      Left            =   5670
      Top             =   5625
   End
   Begin VB.ListBox lbcAvail 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1515
      Sorted          =   -1  'True
      TabIndex        =   222
      TabStop         =   0   'False
      Top             =   15
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.PictureBox pbcPctTrade 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   720
      Left            =   8805
      Picture         =   "CONTRACT.frx":12FBA8
      ScaleHeight     =   720
      ScaleWidth      =   2385
      TabIndex        =   29
      TabStop         =   0   'False
      Top             =   1155
      Visible         =   0   'False
      Width           =   2385
   End
   Begin VB.TextBox edcLinkDestDoneMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   1485
      TabIndex        =   223
      TabStop         =   0   'False
      Top             =   15
      Visible         =   0   'False
      Width           =   435
   End
   Begin VB.ListBox lbcStep2Code 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   645
      Sorted          =   -1  'True
      TabIndex        =   230
      TabStop         =   0   'False
      Top             =   480
      Visible         =   0   'False
      Width           =   1260
   End
   Begin VB.PictureBox plcShare 
      Appearance      =   0  'Flat
      BackColor       =   &H0080FF80&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   2685
      Left            =   9255
      ScaleHeight     =   2685
      ScaleWidth      =   3825
      TabIndex        =   27
      TabStop         =   0   'False
      Top             =   840
      Visible         =   0   'False
      Width           =   3825
      Begin VB.PictureBox pbcShareTab 
         Appearance      =   0  'Flat
         BackColor       =   &H0080FF80&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   105
         Left            =   -120
         ScaleHeight     =   105
         ScaleWidth      =   75
         TabIndex        =   58
         Top             =   855
         Width           =   75
      End
      Begin VB.PictureBox pbcShareSTab 
         Appearance      =   0  'Flat
         BackColor       =   &H0080FF80&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   90
         Left            =   -120
         ScaleHeight     =   90
         ScaleWidth      =   60
         TabIndex        =   28
         Top             =   480
         Width           =   60
      End
   End
   Begin VB.VScrollBar vbcLines 
      Height          =   2145
      LargeChange     =   8
      Left            =   9105
      TabIndex        =   190
      Top             =   2850
      Width           =   255
   End
   Begin VB.PictureBox pbcLine 
      Appearance      =   0  'Flat
      AutoRedraw      =   -1  'True
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      FillColor       =   &H00FFFFFF&
      FillStyle       =   0  'Solid
      ForeColor       =   &H00000000&
      Height          =   1545
      Left            =   1290
      Picture         =   "CONTRACT.frx":131ADA
      ScaleHeight     =   1545
      ScaleWidth      =   8955
      TabIndex        =   220
      TabStop         =   0   'False
      Top             =   4335
      Width           =   8955
      Begin VB.PictureBox pbcSumType 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         ForeColor       =   &H00FFFFFF&
         Height          =   330
         Index           =   1
         Left            =   7920
         ScaleHeight     =   300
         ScaleWidth      =   660
         TabIndex        =   277
         TabStop         =   0   'False
         Top             =   30
         Width           =   690
      End
      Begin VB.TextBox edcLineNo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FDFFD7&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Index           =   0
         Left            =   0
         TabIndex        =   272
         TabStop         =   0   'False
         Top             =   0
         Width           =   1020
      End
      Begin VB.PictureBox pbcLnWkArrow 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         DrawStyle       =   5  'Transparent
         Enabled         =   0   'False
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   1
         Left            =   4155
         Picture         =   "CONTRACT.frx":1A3B2C
         ScaleHeight     =   225
         ScaleWidth      =   300
         TabIndex        =   268
         Top             =   270
         Width           =   300
      End
      Begin VB.PictureBox pbcLnWkArrow 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         DrawStyle       =   5  'Transparent
         Enabled         =   0   'False
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   0
         Left            =   3690
         Picture         =   "CONTRACT.frx":1A3DDE
         ScaleHeight     =   225
         ScaleWidth      =   300
         TabIndex        =   267
         Top             =   165
         Width           =   300
      End
      Begin VB.PictureBox pbcQTPrice 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   330
         Left            =   8595
         Picture         =   "CONTRACT.frx":1A4090
         ScaleHeight     =   300
         ScaleWidth      =   135
         TabIndex        =   87
         TabStop         =   0   'False
         Top             =   30
         Width           =   165
      End
      Begin VB.Label lacPrice 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   1  'Fixed Single
         Caption         =   "Average Price"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   330
         Index           =   0
         Left            =   7920
         TabIndex        =   86
         Top             =   30
         Visible         =   0   'False
         Width           =   690
      End
      Begin VB.Label laclnFrame 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         BackStyle       =   0  'Transparent
         BorderStyle     =   1  'Fixed Single
         Enabled         =   0   'False
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00000000&
         Height          =   240
         Left            =   15
         TabIndex        =   224
         Top             =   1155
         Visible         =   0   'False
         Width           =   8820
      End
   End
   Begin VB.PictureBox pbcLnTotal 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      FillColor       =   &H00FFFFFF&
      FillStyle       =   0  'Solid
      ForeColor       =   &H00000000&
      Height          =   225
      Left            =   1575
      Picture         =   "CONTRACT.frx":1A4432
      ScaleHeight     =   225
      ScaleWidth      =   8955
      TabIndex        =   231
      TabStop         =   0   'False
      Top             =   4380
      Width           =   8955
      Begin VB.Label lacPrice 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   1  'Fixed Single
         Caption         =   "Unfreeze Calculation"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   225
         Index           =   1
         Left            =   825
         TabIndex        =   273
         Top             =   0
         Width           =   1680
      End
   End
   Begin VB.PictureBox plcLine 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   2280
      Left            =   795
      ScaleHeight     =   2220
      ScaleWidth      =   9300
      TabIndex        =   88
      TabStop         =   0   'False
      Top             =   2865
      Width           =   9360
      Begin VB.CommandButton cmcPackage 
         Appearance      =   0  'Flat
         Caption         =   "&Pkg"
         Height          =   285
         Index           =   0
         Left            =   945
         TabIndex        =   255
         Top             =   60
         Width           =   720
      End
      Begin VB.CommandButton cmcScale 
         Appearance      =   0  'Flat
         Caption         =   "&Scale"
         Height          =   285
         Left            =   7860
         TabIndex        =   213
         TabStop         =   0   'False
         Top             =   90
         Width           =   720
      End
      Begin VB.CommandButton cmcClone 
         Appearance      =   0  'Flat
         Caption         =   "Clo&ne"
         Height          =   285
         Left            =   8595
         TabIndex        =   215
         TabStop         =   0   'False
         Top             =   90
         Width           =   720
      End
      Begin VB.CommandButton cmcFlight 
         Appearance      =   0  'Flat
         Caption         =   "&Flights"
         Height          =   285
         Left            =   3150
         TabIndex        =   214
         TabStop         =   0   'False
         Top             =   60
         Width           =   720
      End
      Begin VB.CommandButton cmcDates 
         Appearance      =   0  'Flat
         Caption         =   "D&ates"
         Height          =   285
         Left            =   2415
         TabIndex        =   257
         TabStop         =   0   'False
         Top             =   60
         Width           =   720
      End
      Begin VB.CommandButton cmcTerminate 
         Appearance      =   0  'Flat
         Caption         =   "&End"
         Height          =   285
         Index           =   0
         Left            =   1680
         TabIndex        =   256
         Top             =   60
         Width           =   720
      End
      Begin VB.ComboBox cbcDifference 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   300
         Left            =   7845
         TabIndex        =   89
         TabStop         =   0   'False
         Top             =   75
         Visible         =   0   'False
         Width           =   1545
      End
      Begin VB.PictureBox pbcLnDates 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         Enabled         =   0   'False
         ForeColor       =   &H80000008&
         Height          =   420
         Left            =   1560
         Picture         =   "CONTRACT.frx":1A6A44
         ScaleHeight     =   420
         ScaleWidth      =   3540
         TabIndex        =   254
         TabStop         =   0   'False
         Top             =   405
         Width           =   3540
      End
      Begin VB.Label lacPrice 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   1  'Fixed Single
         Caption         =   "Std Sort"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   225
         Index           =   2
         Left            =   240
         TabIndex        =   274
         Top             =   165
         Width           =   510
      End
   End
   Begin VB.PictureBox pbcHeader 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2100
      Left            =   6750
      Picture         =   "CONTRACT.frx":1A8606
      ScaleHeight     =   2100
      ScaleWidth      =   9030
      TabIndex        =   9
      TabStop         =   0   'False
      Top             =   1170
      Width           =   9030
      Begin VB.PictureBox pbcLogo 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         ClipControls    =   0   'False
         Enabled         =   0   'False
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   660
         Left            =   30
         ScaleHeight     =   660
         ScaleWidth      =   2925
         TabIndex        =   219
         TabStop         =   0   'False
         Top             =   30
         Width           =   2925
      End
   End
   Begin VB.PictureBox plcHeader 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   2235
      Left            =   8130
      ScaleHeight     =   2175
      ScaleWidth      =   9120
      TabIndex        =   8
      TabStop         =   0   'False
      Top             =   1185
      Width           =   9180
   End
   Begin VB.PictureBox pbcClickFocus 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   75
      Left            =   300
      ScaleHeight     =   75
      ScaleWidth      =   45
      TabIndex        =   216
      TabStop         =   0   'False
      Top             =   4770
      Width           =   45
   End
   Begin VB.PictureBox pbcStepSTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   90
      Left            =   1200
      ScaleHeight     =   90
      ScaleWidth      =   75
      TabIndex        =   1
      Top             =   45
      Width           =   75
   End
   Begin VB.PictureBox pbcStepTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   60
      Left            =   1185
      ScaleHeight     =   60
      ScaleWidth      =   90
      TabIndex        =   6
      Top             =   360
      Width           =   90
   End
   Begin VB.PictureBox pbcEatTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   45
      Index           =   0
      Left            =   1275
      ScaleHeight     =   45
      ScaleWidth      =   60
      TabIndex        =   225
      Top             =   45
      Width           =   60
   End
   Begin VB.PictureBox pbcEatTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   60
      Index           =   1
      Left            =   1215
      ScaleHeight     =   60
      ScaleWidth      =   60
      TabIndex        =   226
      Top             =   285
      Width           =   60
   End
   Begin VB.CommandButton cmcDone 
      Appearance      =   0  'Flat
      Caption         =   "&Done"
      Height          =   285
      Left            =   0
      TabIndex        =   198
      Top             =   5685
      Width           =   1020
   End
   Begin VB.CommandButton cmcHold 
      Appearance      =   0  'Flat
      Caption         =   "&Schedule"
      Height          =   285
      Left            =   0
      TabIndex        =   195
      Top             =   5385
      Width           =   1020
   End
   Begin VB.CommandButton cmcProj 
      Appearance      =   0  'Flat
      Caption         =   "&Projection"
      Height          =   285
      Left            =   0
      TabIndex        =   203
      Top             =   5385
      Width           =   1020
   End
   Begin VB.CommandButton cmcCancel 
      Appearance      =   0  'Flat
      Caption         =   "&Cancel"
      Height          =   285
      Left            =   1050
      TabIndex        =   199
      Top             =   5685
      Width           =   945
   End
   Begin VB.CommandButton cmcAvails 
      Appearance      =   0  'Flat
      Caption         =   "Sell&out"
      Height          =   285
      Left            =   1050
      TabIndex        =   192
      Top             =   5085
      Width           =   945
   End
   Begin VB.CommandButton cmcUndo 
      Appearance      =   0  'Flat
      Caption         =   "U&ndo"
      Height          =   285
      Left            =   2025
      TabIndex        =   196
      Top             =   5385
      Width           =   945
   End
   Begin VB.CommandButton cmcErase 
      Appearance      =   0  'Flat
      Caption         =   "&Erase"
      Height          =   285
      Left            =   2025
      TabIndex        =   197
      Top             =   5085
      Width           =   945
   End
   Begin VB.CommandButton cmcUpdate 
      Appearance      =   0  'Flat
      Caption         =   "&Save-Go"
      Height          =   285
      Left            =   3000
      TabIndex        =   201
      Top             =   5685
      Width           =   945
   End
   Begin VB.CommandButton cmcRates 
      Appearance      =   0  'Flat
      Caption         =   "S&peed Bar"
      Height          =   285
      Left            =   4020
      TabIndex        =   194
      Top             =   5085
      Width           =   1455
   End
   Begin VB.CommandButton cmcDemoBar 
      Appearance      =   0  'Flat
      Caption         =   "Show Dem&o Bar"
      Height          =   285
      Left            =   4020
      TabIndex        =   202
      Top             =   5685
      Width           =   1455
   End
   Begin VB.CommandButton cmcShtTitle 
      Appearance      =   0  'Flat
      Caption         =   "Short &Title"
      Height          =   285
      Left            =   0
      TabIndex        =   191
      Top             =   5085
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.PictureBox pbcSumType 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   6
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   180
      Index           =   0
      Left            =   315
      ScaleHeight     =   150
      ScaleWidth      =   945
      TabIndex        =   249
      TabStop         =   0   'False
      Top             =   2550
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.PictureBox pbcDemoBar 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1560
      Index           =   3
      Left            =   840
      Picture         =   "CONTRACT.frx":1E6C4C
      ScaleHeight     =   1560
      ScaleWidth      =   8790
      TabIndex        =   247
      TabStop         =   0   'False
      Top             =   1605
      Visible         =   0   'False
      Width           =   8790
   End
   Begin VB.PictureBox pbcDemoBar 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1575
      Index           =   2
      Left            =   690
      Picture         =   "CONTRACT.frx":1F5E0A
      ScaleHeight     =   1575
      ScaleWidth      =   8790
      TabIndex        =   246
      TabStop         =   0   'False
      Top             =   1380
      Visible         =   0   'False
      Width           =   8790
   End
   Begin VB.PictureBox pbcDemoBar 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1590
      Index           =   1
      Left            =   135
      Picture         =   "CONTRACT.frx":21C7A4
      ScaleHeight     =   1590
      ScaleWidth      =   9045
      TabIndex        =   248
      TabStop         =   0   'False
      Top             =   1110
      Visible         =   0   'False
      Width           =   9045
      Begin VB.PictureBox pbcLnWkArrow 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         DrawStyle       =   5  'Transparent
         Enabled         =   0   'False
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   3
         Left            =   60
         Picture         =   "CONTRACT.frx":22C4AA
         ScaleHeight     =   225
         ScaleWidth      =   300
         TabIndex        =   276
         Top             =   45
         Width           =   300
      End
      Begin VB.PictureBox pbcLnWkArrow 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         DrawStyle       =   5  'Transparent
         Enabled         =   0   'False
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   2
         Left            =   210
         Picture         =   "CONTRACT.frx":22C75C
         ScaleHeight     =   225
         ScaleWidth      =   300
         TabIndex        =   275
         Top             =   165
         Width           =   300
      End
      Begin VB.PictureBox pbcRatio 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   6.75
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   180
         Left            =   30
         ScaleHeight     =   150
         ScaleWidth      =   945
         TabIndex        =   250
         TabStop         =   0   'False
         Top             =   1005
         Width           =   975
      End
   End
   Begin VB.PictureBox pbcDemoBar 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   390
      Index           =   0
      Left            =   150
      Picture         =   "CONTRACT.frx":22CA0E
      ScaleHeight     =   390
      ScaleWidth      =   9045
      TabIndex        =   245
      TabStop         =   0   'False
      Top             =   780
      Visible         =   0   'False
      Width           =   9045
   End
   Begin VB.PictureBox plcDemoBar 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   2280
      Left            =   120
      ScaleHeight     =   2220
      ScaleWidth      =   9180
      TabIndex        =   232
      TabStop         =   0   'False
      Top             =   555
      Visible         =   0   'False
      Width           =   9240
      Begin VB.TextBox lacDBBookOvly 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   3915
         TabIndex        =   149
         TabStop         =   0   'False
         Top             =   270
         Width           =   1830
      End
      Begin VB.CommandButton cmcDBDisplay 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   2205
         Picture         =   "CONTRACT.frx":230A54
         TabIndex        =   237
         TabStop         =   0   'False
         Top             =   15
         Width           =   195
      End
      Begin VB.TextBox edcDBDisplay 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   1140
         TabIndex        =   236
         TabStop         =   0   'False
         Top             =   15
         Width           =   1080
      End
      Begin VB.VScrollBar vbcSummary 
         Height          =   1920
         LargeChange     =   6
         Left            =   8850
         Min             =   1
         TabIndex        =   258
         Top             =   390
         Value           =   1
         Width           =   255
      End
      Begin VB.PictureBox pbcDBTab 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   30
         Left            =   3030
         ScaleHeight     =   30
         ScaleWidth      =   15
         TabIndex        =   253
         Top             =   165
         Width           =   15
      End
      Begin VB.PictureBox pbcDBSTab 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   15
         Left            =   3030
         ScaleHeight     =   15
         ScaleWidth      =   15
         TabIndex        =   244
         Top             =   165
         Width           =   15
      End
      Begin VB.CommandButton cmcDBSocEco 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   7875
         Picture         =   "CONTRACT.frx":230B4E
         TabIndex        =   243
         TabStop         =   0   'False
         Top             =   15
         Width           =   195
      End
      Begin VB.TextBox edcDBSocEco 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   6045
         TabIndex        =   241
         TabStop         =   0   'False
         Top             =   15
         Width           =   1830
      End
      Begin VB.TextBox edcDBDemo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   2520
         TabIndex        =   238
         TabStop         =   0   'False
         Top             =   15
         Width           =   1080
      End
      Begin VB.CommandButton cmcDBDemo 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   3600
         Picture         =   "CONTRACT.frx":230C48
         TabIndex        =   240
         TabStop         =   0   'False
         Top             =   15
         Width           =   195
      End
      Begin VB.TextBox edcDBBook 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   3915
         TabIndex        =   233
         TabStop         =   0   'False
         Top             =   15
         Width           =   1830
      End
      Begin VB.CommandButton cmcDBBook 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   5745
         Picture         =   "CONTRACT.frx":230D42
         TabIndex        =   235
         TabStop         =   0   'False
         Top             =   15
         Width           =   195
      End
   End
   Begin VB.CommandButton cmcMkt 
      Appearance      =   0  'Flat
      Caption         =   "&Market"
      Height          =   285
      Left            =   3000
      TabIndex        =   193
      Top             =   5385
      Visible         =   0   'False
      Width           =   945
   End
   Begin VB.CommandButton cmcSaveStay 
      Appearance      =   0  'Flat
      Caption         =   "&Save-Stay"
      Height          =   285
      Left            =   2025
      TabIndex        =   200
      Top             =   5685
      Width           =   945
   End
   Begin VB.PictureBox pbcHdImage 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      Enabled         =   0   'False
      ForeColor       =   &H80000008&
      Height          =   2100
      Index           =   0
      Left            =   9360
      Picture         =   "CONTRACT.frx":230E3C
      ScaleHeight     =   2100
      ScaleWidth      =   9030
      TabIndex        =   263
      TabStop         =   0   'False
      Top             =   720
      Visible         =   0   'False
      Width           =   9030
   End
   Begin VB.PictureBox pbcHdImage 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      Enabled         =   0   'False
      ForeColor       =   &H80000008&
      Height          =   2100
      Index           =   1
      Left            =   9360
      Picture         =   "CONTRACT.frx":26F482
      ScaleHeight     =   2100
      ScaleWidth      =   9030
      TabIndex        =   264
      TabStop         =   0   'False
      Top             =   585
      Visible         =   0   'False
      Width           =   9030
   End
   Begin MSComDlg.CommonDialog cdcSetup 
      Left            =   9210
      Top             =   5250
      _ExtentX        =   847
      _ExtentY        =   847
      _Version        =   393216
      DefaultExt      =   ".Txt"
      Filter          =   "*.Txt|*.Txt|*.Doc|*.Doc|*.Asc|*.Asc"
      FilterIndex     =   1
      FontSize        =   0
      MaxFileSize     =   256
   End
   Begin V81Traffic.CBill udcCBill 
      Height          =   1005
      Left            =   165
      TabIndex        =   83
      Top             =   0
      Width           =   1005
      _ExtentX        =   0
      _ExtentY        =   0
   End
   Begin VB.PictureBox pbcLnTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   60
      Left            =   240
      ScaleHeight     =   60
      ScaleWidth      =   90
      TabIndex        =   188
      Top             =   4725
      Width           =   90
   End
   Begin VB.PictureBox pbcLnSTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   165
      Left            =   1245
      ScaleHeight     =   165
      ScaleWidth      =   150
      TabIndex        =   84
      Top             =   270
      Width           =   150
   End
   Begin VB.PictureBox pbcHdSTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   60
      Left            =   1695
      ScaleHeight     =   60
      ScaleWidth      =   60
      TabIndex        =   7
      Top             =   225
      Width           =   60
   End
   Begin VB.PictureBox pbcHdTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   30
      Left            =   1635
      ScaleHeight     =   30
      ScaleWidth      =   15
      TabIndex        =   80
      Top             =   390
      Width           =   15
   End
   Begin V81Traffic.CGameInv udcCGameInv 
      Height          =   930
      Left            =   495
      TabIndex        =   81
      Top             =   3870
      Width           =   990
      _ExtentX        =   1746
      _ExtentY        =   1640
   End
   Begin V81Traffic.CDigital udcCDigital 
      Height          =   645
      Left            =   0
      TabIndex        =   82
      Top             =   2880
      Visible         =   0   'False
      Width           =   630
      _ExtentX        =   1111
      _ExtentY        =   1138
   End
   Begin VB.PictureBox pbcSaveStop 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   105
      Left            =   3750
      ScaleHeight     =   75
      ScaleWidth      =   90
      TabIndex        =   204
      Top             =   5805
      Width           =   120
   End
   Begin VB.TextBox edcLineNo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      BackColor       =   &H8000000F&
      BorderStyle     =   0  'None
      Height          =   195
      Index           =   5
      Left            =   2850
      Locked          =   -1  'True
      TabIndex        =   286
      TabStop         =   0   'False
      Text            =   "Totals: "
      Top             =   4245
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.TextBox edcLineNo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      BackColor       =   &H00C0FFFF&
      Height          =   195
      Index           =   4
      Left            =   2580
      Locked          =   -1  'True
      TabIndex        =   285
      TabStop         =   0   'False
      Top             =   4140
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.TextBox edcLineNo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      BackColor       =   &H00C0FFFF&
      Height          =   195
      Index           =   3
      Left            =   2385
      Locked          =   -1  'True
      TabIndex        =   284
      TabStop         =   0   'False
      Top             =   4020
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.TextBox edcLineNo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      BackColor       =   &H00C0FFFF&
      Height          =   195
      Index           =   2
      Left            =   2220
      Locked          =   -1  'True
      TabIndex        =   283
      TabStop         =   0   'False
      Top             =   3825
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.CommandButton cmcTerminate 
      Appearance      =   0  'Flat
      Caption         =   "&End"
      Height          =   285
      Index           =   1
      Left            =   90
      TabIndex        =   282
      Top             =   2805
      Width           =   720
   End
   Begin VB.TextBox edcLineNo 
      Appearance      =   0  'Flat
      BackColor       =   &H00FDFFD7&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "Arial Narrow"
         Size            =   6.75
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   195
      Index           =   1
      Left            =   1305
      TabIndex        =   281
      TabStop         =   0   'False
      Top             =   3960
      Visible         =   0   'False
      Width           =   1020
   End
   Begin VB.PictureBox pbcSumType 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BeginProperty Font 
         Name            =   "Arial Narrow"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   225
      Index           =   2
      Left            =   180
      ScaleHeight     =   195
      ScaleWidth      =   675
      TabIndex        =   280
      TabStop         =   0   'False
      Top             =   3240
      Visible         =   0   'False
      Width           =   705
   End
   Begin VB.CommandButton cmcPackage 
      Appearance      =   0  'Flat
      Caption         =   "&Pkg"
      Height          =   285
      Index           =   1
      Left            =   120
      TabIndex        =   279
      Top             =   2940
      Width           =   720
   End
   Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdCPMBuy 
      Height          =   585
      Left            =   315
      TabIndex        =   187
      TabStop         =   0   'False
      Top             =   3480
      Visible         =   0   'False
      Width           =   1725
      _ExtentX        =   3043
      _ExtentY        =   1032
      _Version        =   393216
      Cols            =   33
      FixedCols       =   0
      ForeColorFixed  =   -2147483640
      BackColorBkg    =   16777215
      BackColorUnpopulated=   -2147483634
      GridColor       =   -2147483635
      GridColorFixed  =   -2147483635
      GridColorUnpopulated=   -2147483635
      AllowBigSelection=   0   'False
      ScrollTrack     =   -1  'True
      FocusRect       =   0
      HighLight       =   0
      ScrollBars      =   2
      Appearance      =   0
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      _NumberOfBands  =   1
      _Band(0).Cols   =   33
      _Band(0).GridLinesBand=   1
      _Band(0).TextStyleBand=   0
      _Band(0).TextStyleHeader=   0
   End
   Begin ComctlLib.TabStrip tscLine 
      Height          =   2700
      Left            =   135
      TabIndex        =   189
      Top             =   2235
      Width           =   9285
      _ExtentX        =   16378
      _ExtentY        =   4763
      ShowTips        =   0   'False
      _Version        =   327682
      BeginProperty Tabs {0713E432-850A-101B-AFC0-4210102A8DA7} 
         NumTabs         =   10
         BeginProperty Tab1 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Multi-Media"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab2 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "NTR"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab3 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Air Time"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab4 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Podcast CPM"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab5 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Merchandising"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab6 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Promotional"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab7 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Installment"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab8 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Avails"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab9 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Protection"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab10 {0713F341-850A-101B-AFC0-4210102A8DA7} 
            Caption         =   ""
            Key             =   "Research"
            Object.Tag             =   ""
            ImageVarType    =   2
         EndProperty
      EndProperty
   End
   Begin VB.Label lacLnTotals 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   2
      Left            =   8910
      TabIndex        =   271
      Top             =   5085
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacLnTotals 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   1
      Left            =   8805
      TabIndex        =   270
      Top             =   5085
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Image imcShare 
      Appearance      =   0  'Flat
      Enabled         =   0   'False
      Height          =   480
      Index           =   1
      Left            =   9000
      Picture         =   "CONTRACT.frx":2B2FB8
      Top             =   15
      Width           =   480
   End
   Begin VB.Label plcScreen 
      Caption         =   "Order"
      Height          =   225
      Left            =   15
      TabIndex        =   0
      Top             =   15
      Width           =   930
   End
   Begin VB.Image imcShare 
      Appearance      =   0  'Flat
      Height          =   480
      Index           =   0
      Left            =   8475
      Picture         =   "CONTRACT.frx":2B3882
      Top             =   15
      Width           =   480
   End
   Begin VB.Image imcKey 
      Appearance      =   0  'Flat
      Height          =   480
      Left            =   135
      Picture         =   "CONTRACT.frx":2B414C
      Top             =   270
      Width           =   480
   End
   Begin VB.Label lacSchStatus 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H00000000&
      Height          =   240
      Left            =   8805
      TabIndex        =   64
      Top             =   5625
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Image imcTrash 
      Appearance      =   0  'Flat
      Height          =   480
      Left            =   9000
      Picture         =   "CONTRACT.frx":2B4456
      Top             =   5445
      Width           =   480
   End
   Begin VB.Label lacPayInfo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H00000000&
      Height          =   240
      Left            =   8805
      TabIndex        =   218
      Top             =   5445
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacCreditInfo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   240
      Left            =   8805
      TabIndex        =   217
      Top             =   5265
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacLnTotals 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   240
      Index           =   0
      Left            =   8700
      TabIndex        =   205
      Top             =   5085
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacAudTotals 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H00FFFF80&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H00000000&
      Height          =   240
      Left            =   8805
      TabIndex        =   260
      Top             =   5805
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacAdServerCpmInfo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   135
      Left            =   5400
      TabIndex        =   287
      Top             =   1800
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacTotalCpmInfo 
      Alignment       =   1  'Right Justify
      Appearance      =   0  'Flat
      AutoSize        =   -1  'True
      BackColor       =   &H0000FF00&
      BorderStyle     =   1  'Fixed Single
      ForeColor       =   &H80000008&
      Height          =   135
      Left            =   5400
      TabIndex        =   288
      Top             =   1800
      Visible         =   0   'False
      Width           =   75
   End
   Begin VB.Label lacCode 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   6.75
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   150
      Left            =   8460
      TabIndex        =   269
      Top             =   45
      Width           =   1065
   End
End
Attribute VB_Name = "Contract"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False

' Copyright 1993 Counterpoint Software, Inc. All rights reserved.
' Proprietary Software, Do not copy
'
' File Name: Contract.Frm
'
' Release: 1.0
'
' Description:
'   This file contains the Contract input screen code
'Comments:
'   Remove extra local variables from mP--- thru mV---
'
Option Explicit
Option Compare Text


Dim fmAdjFactorW As Single  'Width adjustment factor
Dim fmAdjFactorH As Single  'Width adjustment factor

Dim lmPlcLineHeight As Long
Dim lmPbcLineHeight As Long

Dim bmViewedAvailTab As Boolean
Dim bmViewedProtectionTab As Boolean
Dim bmViewedResearchTab As Boolean

Dim imButton As Integer 'Value 1= Left button; 2=Right button; 4=Middle button
Dim lmButtonRow As Long
Dim imIgnoreRightMove As Integer

Dim imSvCppCpm As Integer
Dim smDemo0 As String

Dim bmLacAudTotals As Boolean
'10389
Public imTscLineIndex As Integer

Dim smVefPrevFilter As String

'Save on variable space
Const STEP1INDEX = 1
Const STEP2INDEX = 2
Const STEP3INDEX = 3

Const STATUSINDEX = 1
Const POTINDEX = 2
Const TYPEINDEX = 3     'Type control/field
Const CNTRNOINDEX = 4   'Contract number control/index
Const PROPVERINDEX = 5
Const REVNOINDEX = 6    'Revision number control/field
Const DATEINDEX = 7     'Date control/field
Const ADVTINDEX = 8     'Advertiser control/index
Const PRODUCTINDEX = 9  'Product control/index
' if SHTTITLEINDEX changed then CShTitle.Frm in mSaveRec must be changed
Const SHTTITLEINDEX = 10    'Short Title control/index
Const AGENCYINDEX = 11   'Agency control/index
Const SPERSONINDEX = 12  'Salesperson control/field
Const COMPINDEX = 13    'Competitive control/field
Const BUYERINDEX = 14   'Buyer control/field
Const PHONEINDEX = 15   'Phone/extension control/field
Const SHAREINDEX = 16    'Share on contract/invoice control/field
Const MERCHINDEX = 17  'Merchandising control/field
Const PROMOINDEX = 18  'Promotion control/field
Const REVSETINDEX = 19   'Revenue sets control/field
Const SEGINDEX = 20   'Segments control/field
Const DEMOINDEX = 21
Const GUARINDEX = 22
Const TRADEINDEX = 23   'Trade control/field
Const RATECARDINDEX = 24    'Rate card control/field
Const GROSSINDEX = 25   'Gross control/field
'10967-show
'Const BILLCYCLEINDEX = 26   'Billing cycle control/field
'Const INVGROUPINDEX = 27    'Invoice grouping control/field
'Const PRODTAGINDEX = 28 'Product/Tag control/field
'Const INTCOMMINDEX = 29 'Comment control/field
'Const CANCLAUSEINDEX = 30
'Const CHGREASONINDEX = 31
'Const OTHERCOMMINDEX = 32
'Const ATTACHMENTINDEX = 33
'moved to be public
'Const VENDORINDEX = 29
Const BILLCYCLEINDEX = 27   'Billing cycle control/field
Const INVGROUPINDEX = 28    'Invoice grouping control/field
Const PRODTAGINDEX = 29 'Product/Tag control/field
Const INTCOMMINDEX = 30
Const CANCLAUSEINDEX = 31
Const CHGREASONINDEX = 32
Const OTHERCOMMINDEX = 33
'Const ATTACHMENTINDEX = 34

Const CECOMPINDEX = 1
Const CEEXCLINDEX = 3
Const CEBUSCATINDEX = 5
Const PTTRADEINDEX = 1
Const PTAGYCOMMINDEX = 2
Const DMCPPCPMINDEX = 1
Const DMHIDEDEMOINDEX = 2
Const DMDEMOINDEX = 3   '5, 7, 8
Const DMVALUEINDEX = 4  '6, 8, 10
Const VEHINDEX = 1      'Vehicle/Daypart control/field
Const DPINDEX = 2
'7/26/15: Swapped Override and Len
Const OV1INDEX = 4  '3       'BB control/field
Const OV2INDEX = 5  '4
Const LENINDEX = 3  '5     'Length control/field
Const WKSPOTSINDEX = 6
Const SPOTSINDEX = 19
Const PRICEINDEX = 20   'Price control/field
Const LINECOMMINDEX = 21
Const NOPROPINDEX = 1
Const NOESTINDEX = 2
Const NORESVADVTINDEX = 3
Const NORESVORDERINDEX = 4
Const NOEDICLIENTCODEINDEX = 5
Const NOEDIPRODUCTCODEINDEX = 6
'Const NOINVPROJCODEINDEX = 5
'Const NOINVSMSNOINDEX = 6
Const NODATEINDEX = 7
Const SBYCOMPANYINDEX = 1
Const SBYPCTINDEX = 2
Const SBCOMPANY1INDEX = 3
Const SBPCT1INDEX = 4
Const SBCOMPANY2INDEX = 5
Const SBPCT2INDEX = 6
Const SBCOMPANY3INDEX = 7
Const SBPCT3INDEX = 8
Const SBCOMPANY4INDEX = 9
Const SBPCT4INDEX = 10
Const SBCOMPANY5INDEX = 11
Const SBPCT5INDEX = 12
Const SBCOMPANY6INDEX = 13
Const SBPCT6INDEX = 14
Const RSREV1INDEX = 1
Const RSREV2INDEX = 2
Const RSREV3INDEX = 3
Const RSREV4INDEX = 4
Const RSREV5INDEX = 5
Const SPNAME1INDEX = 1
'Dim imSPNoCol As Integer  'Number of Columns

Const DGSTARTDATEINDEX = 1
Const DGNOWKSINDEX = 2
Const DGENDDATEINDEX = 3
Const DGRUNINDEX = 4
Const DGDWPINDEX = 5
Const DGSPOTWKINDEX = 6
Const DGDAILYINDEX = 7
Const DGPRICEINDEX = 14
'Const DGPREEMPTINDEX = 15
Const DGOVSTARTINDEX = 15   '16
Const DGOVENDINDEX = 16 '17

'Const OVWDINDEX = 1
'Const OVSPOTTOTALINDEX = 2
'Const OVDAYSINDEX = 3
'Const OVSTARTTIMEINDEX = 10
'Const OVENDTIMEINDEX = 11
''1/2/18: Moved to BB row
''Const OVCOPYINDEX = 12
'Const OVHIGHINDEX = 12  '13
''Const OVPREEMPTINDEX = 10
'Const OVRANKINDEX = 13  '14
'Const OVBBOPENINDEX = 14    '15
'Const OVBBCLOSEINDEX = 15   '16
'Const OVCOPYINDEX = 16
'Const ACT1LINEUPINDEX = 17
'Const ACT1STOREDTIMESINDEX = 18
'Const ACT1STOREDSPOTSINDEX = 19
'Const ACT1STOREDCLEARPCTINDEX = 20
'Const ACT1DAYPARTFILTERINDEX = 21
'
'
'Const OV2DAYSINDEX = 1
'Const OV2STARTTIMEINDEX = 8
'Const OV2ENDTIMEINDEX = 9
'Const OV2SPLITINDEX = 10
'Const OV2ALLOCATIONINDEX = 11
'Const OV2ACQUISITIONINDEX = 12
'Const OV2SOLOINDEX = 13
'Const OV21STINDEX = 14

Const AIRWEEKINDEX = 1
Const WEEKNOINDEX = 2
Const WEEKSTARTDATEINDEX = 3
Const WEEKENDDATEINDEX = 4
Const DWINDEX = 5
Const SPOTPERWKINDEX = 6
Const DAILYSPOTSINDEX = 7
Const WKPRICEINDEX = 14


Private Sub cbcDifference_Change()
    cbcDifferenceSub LINECOMMINDEX, CNTRNOINDEX, MERCHINDEX, PROMOINDEX, INTCOMMINDEX, CANCLAUSEINDEX, CHGREASONINDEX, OTHERCOMMINDEX, STATUSINDEX, REVNOINDEX, PRICEINDEX, DATEINDEX
End Sub

Private Sub cbcDifference_Click()
    cbcDifference_Change
End Sub

Private Sub cbcDifference_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cbcRBView_Change()
    If cbcRBView.ListIndex = 1 Then
        imRBView = 1
    ElseIf cbcRBView.ListIndex = 2 Then
        imRBView = 2
    Else
        imRBView = 0
    End If

    If (imRBView = 1) Or (imRBView = 2) Then
        mRBSum
        imSettingValue = True
        vbcRBVeh(1).Min = LBound(tmRB1DP)
        imSettingValue = True
        If UBound(tmRB1DP) <= vbcRBVeh(1).LargeChange + 1 Then
            vbcRBVeh(1).Max = LBound(tmRB1DP)
        Else
            vbcRBVeh(1).Max = UBound(tmRB1DP) - vbcRBVeh(1).LargeChange - 1
        End If
        imSettingValue = True
        vbcRBVeh(1).Value = vbcRBVeh(1).Min
        imSettingValue = False
        pbcRBVeh(1).Visible = True
        vbcRBVeh(1).Visible = True
        frcRBSum.Visible = True
        frcPBDates.Visible = False
        pbcRBVeh_Paint 1
    Else
        frcPBDates.Visible = True
        frcRBSum.Visible = False
    End If
End Sub

Private Sub cbcRBView_Click()
    cbcRBView_Change
End Sub

Private Sub cbcRBView_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
End Sub

Private Sub ckcCommOn_Click(Index As Integer)
    'Code added because Value removed as parameter
    Dim Value As Integer
    Value = False
    If ckcCommOn(Index).Value = vbChecked Then
        Value = True
    End If
    'End of coded added
    Dim ilIndex As Integer
    If imChgMode Then
        Exit Sub
    End If
    If imHdBoxNo = MERCHINDEX Then
        ilIndex = 0
    ElseIf imHdBoxNo = PROMOINDEX Then
        ilIndex = 1
    ElseIf imHdBoxNo = INTCOMMINDEX Then
        ilIndex = 2
    ElseIf imHdBoxNo = CANCLAUSEINDEX Then
        ilIndex = 3
    ElseIf imHdBoxNo = CHGREASONINDEX Then
        ilIndex = 4
    ElseIf imHdBoxNo = OTHERCOMMINDEX Then
        ilIndex = 5
    ElseIf imLnBoxNo = LINECOMMINDEX Then
        ilIndex = 6
   Else
        Exit Sub
    End If
    If ilIndex <> 6 Then
        If Value Then
            imCommShowOn(ilIndex, Index) = 0
        Else
            imCommShowOn(ilIndex, Index) = 1
        End If
        mSetChg imHdBoxNo
    Else
        If Value Then
            imLnCommShowOn(Index, imLnRowNo) = 0
            If imLnInitCommShowOn(Index, imLnRowNo) <> 0 Then
                imLnChg = True
            End If
        Else
            imLnCommShowOn(Index, imLnRowNo) = 1
            If imLnInitCommShowOn(Index, imLnRowNo) <> 1 Then
                imLnChg = True
            End If
        End If
    End If
    edcComment.SetFocus 'Reset focus to edit box
End Sub

Private Sub ckcRBAllDP_Click()
    Dim Value As Integer
    Dim llRet As Long
    Dim llRg As Long
    Dim ilValue As Integer
    If lbcRBDaypart.ListCount <= 0 Then
        ckcRBAllDP.Value = False
        Exit Sub
    End If
    Value = False
    If ckcRBAllDP.Value = vbChecked Then
        Value = True
    End If
    ilValue = Value
    If imSetAll Then
        imAllClicked = True
        llRg = CLng(lbcRBDaypart.ListCount - 1) * &H10000 Or 0
        llRet = SendMessageByNum(lbcRBDaypart.HWnd, LB_SELITEMRANGE, ilValue, llRg)
        imAllClicked = False
        mPBSetCommands
        If lbcRBDaypart.ListCount > 0 Then
            ckcRBAllDP.Caption = "All (" & lbcRBDaypart.SelCount & " of " & lbcRBDaypart.ListCount & ")"
        Else
            ckcRBAllDP.Caption = "All"
        End If
    End If
End Sub

Private Sub ckcRBAllDP_GotFocus()
    plcCalendar.Visible = False
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub ckcRBAllVeh_Click()
    Dim Value As Integer
    Dim llRet As Long
    Dim llRg As Long
    Dim ilValue As Integer
    If lbcRBVehicle.ListCount <= 0 Then
        ckcRBAllVeh.Value = False
        Exit Sub
    End If
    Value = False
    If ckcRBAllVeh.Value = vbChecked Then
        Value = True
    End If
    ilValue = Value
    If imSetAll Then
        imAllClicked = True
        llRg = CLng(lbcRBVehicle.ListCount - 1) * &H10000 Or 0
        llRet = SendMessageByNum(lbcRBVehicle.HWnd, LB_SELITEMRANGE, ilValue, llRg)
        imAllClicked = False
        mPBSetCommands
    End If
End Sub

Private Sub ckcRBAllVeh_GotFocus()
    plcCalendar.Visible = False
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub ckcRBGridAll_Click()
    Dim Value As Integer
    Dim ilValue As Integer
    Dim ilLoop As Integer

    If UBound(tmPB1DP) <= 0 Then
        ckcRBGridAll.Value = vbUnchecked
        Exit Sub
    End If
    Value = False
    If ckcRBGridAll.Value = vbChecked Then
        Value = True
    End If
    ilValue = Value
    If imSetAll Then
        imAllClicked = True
        For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            tmPB1DP(ilLoop).iChk = ilValue
        Next ilLoop
        imAllClicked = False
        mRBSum
    End If
End Sub

Private Sub ckcRBGridAll_GotFocus()
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub cmcAvails_Click()
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    'If Not gWinRoom(igNoExeWinRes(CAVAILEXE)) Then
    '    Exit Sub
    'End If
    Screen.MousePointer = vbHourglass  'Wait
    If plcDemoBar.Visible Then  'Hide demo bar
        cmcDemoBar_Click
    End If
    igComp1Code = 0
    If lbcComp(0).ListIndex >= 2 Then
        slNameCode = tgCompCode(lbcComp(0).ListIndex - 2).sKey   'Traffic!lbcCompCode.List(lbcComp(0).ListIndex - 2)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            igComp1Code = Val(Trim$(slCode))
        End If
    End If
    igComp2Code = 0
    If lbcComp(1).ListIndex >= 2 Then
        slNameCode = tgCompCode(lbcComp(1).ListIndex - 2).sKey   'Traffic!lbcCompCode.List(lbcComp(1).ListIndex - 2)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            igComp2Code = Val(Trim$(slCode))
        End If
    End If
    Screen.MousePointer = vbHourglass  'Wait
    Screen.MousePointer = vbDefault
    CAvail.Show vbModal
    'Screen.MousePointer = vbDefault    'Default
End Sub

Private Sub cmcAvails_GotFocus()
    If (imLnRowNo - 1 >= LBound(tgClfCntr)) And (imLnRowNo - 1 <= UBound(tgClfCntr)) Then
        igLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
    Else
        igLineNo = 1
    End If
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTAVAILS
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcAvails_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcCalDn_Click()
    imCalMonth = imCalMonth - 1
    If imCalMonth <= 0 Then
        imCalMonth = 12
        imCalYear = imCalYear - 1
    End If
    pbcCalendar_Paint
    If plcPower.Visible Then
        If (imPBDateIndex = 0) Or (imPBDateIndex = 1) Then
            edcPBDate(imPBDateIndex).SelStart = 0
            edcPBDate(imPBDateIndex).SelLength = Len(edcPBDate(imPBDateIndex).Text)
            imBypassFocus = True
            edcPBDate(imPBDateIndex).SetFocus
        End If
    ElseIf grdCPMBuy.Visible Then
        edcLNDropDown.SelStart = 0
        edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
        edcLNDropDown.SetFocus
    Else
        If imNoBoxNo = NODATEINDEX Then
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.SetFocus
        Else
            edcDGDropDown.SelStart = 0
            edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
            edcDGDropDown.SetFocus
        End If
    End If
End Sub

Private Sub cmcCalUp_Click()
    imCalMonth = imCalMonth + 1
    If imCalMonth > 12 Then
        imCalMonth = 1
        imCalYear = imCalYear + 1
    End If
    pbcCalendar_Paint
    If plcPower.Visible Then
        If (imPBDateIndex = 0) Or (imPBDateIndex = 1) Then
            edcPBDate(imPBDateIndex).SelStart = 0
            edcPBDate(imPBDateIndex).SelLength = Len(edcPBDate(imPBDateIndex).Text)
            imBypassFocus = True
            edcPBDate(imPBDateIndex).SetFocus
        End If
    ElseIf grdCPMBuy.Visible Then
        edcLNDropDown.SelStart = 0
        edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
        edcLNDropDown.SetFocus
    Else
        If imNoBoxNo = NODATEINDEX Then
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.SetFocus
        Else
            edcDGDropDown.SelStart = 0
            edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
            edcDGDropDown.SetFocus
        End If
    End If
End Sub

Public Sub cmcCancel_Click()
    Dim ilRet As Integer
    Dim slMess As String

    If imLoadingForm Or imLoadingContract Then
        Exit Sub
    End If
    If plcPower.Visible Then
        Exit Sub
    End If
    If tmcLnTab.Enabled Then
        Exit Sub
    End If

'10/31/19: moved into tmcDelay
'    If cmcUpdate.Enabled = True Then
'        If imStep1Index > 1 Then
'            slMess = "Cancel changes to " & edcCntrNo.Text
'        Else
'            If (sgCntrScreen <> "Orders") Then
'                slMess = "Cancel Creation of Proposal"
'            Else
'                slMess = "Cancel New Order"
'            End If
'        End If
'        ilRet = MsgBox(slMess, vbYesNo + vbQuestion, "Cancel")
'        If ilRet = vbNo Then
'            Exit Sub
'        End If
'    End If
'    'ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
'    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
'    If plcDemoBar.Visible Then  'Hide demo bar
'        cmcDemoBar_Click
'    End If
'    mTerminate
    imDelaySrce = 5
    tmcDelay.Interval = 1000
    tmcDelay.Enabled = True
End Sub

Private Sub cmcCancel_GotFocus()
    If imHdBoxNo = CNTRNOINDEX Then 'Avoid testing of the number
        lbcResvAdvt.Visible = False
        lbcResv.Visible = False
        cmcShareDropDown.Visible = False
        edcCntrNo.Visible = False  'Set visibility
        edcShareDropDown.Visible = False  'Set visibility
        pbcNumber.Visible = False
        plcCalendar.Visible = False
        plcShare.Visible = False
        imHdBoxNo = -1
        imNoBoxNo = -1
    End If
    If cmcUpdate.Enabled = True Then
        bmInCancel = True
        mAllSetShow 0  'leave controls to avoid endless loop
        bmInCancel = False
        'gShowHelpMess tmChfHelp(), CHFBTCANCEL
        gCtrlGotFocus ActiveControl
    End If
End Sub

Private Sub cmcCancel_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcClone_Click()
    Dim ilPaintLnRowNo As Integer
    Dim ilStep1Index As Integer
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Sub
    End If
    igShiftDates = 0
    'If Not gWinRoom(igNoExeWinRes(CCANCELEXE)) Then
    '    Exit Sub
    'End If
    Screen.MousePointer = vbHourglass  'Wait
    mMoveCtrlToRec True
    Screen.MousePointer = vbHourglass  'Wait
    If Not mMoveLnCtrlToRec(False) Then
        If imHdBoxNo > 0 Then
            mEnableBox imHdBoxNo
        Else
            mLnEnableBox imLnBoxNo
        End If
        Screen.MousePointer = vbDefault    'Default
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass  'Wait
    mSetHdDate False, False
    'Screen.MousePointer = vbHourGlass  'Wait
    mAvailPop   'make sure avail list box has latest names
    igTerminateReturn = 0   '0=Canceled
    Screen.MousePointer = vbDefault    'Default
    CClone.Show vbModal
    'Screen.MousePointer = vbDefault    'Default
    If igShiftDates <> 0 Then
        Screen.MousePointer = vbHourglass
        If igShiftDates = 2 Then
            If (Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS Then  'Allocation
                mPopRegion
            End If
            mMoveLnRecToCtrl imTerminate, tmRegionCode()
            mSetLineScroll True, True
        End If
        ilPaintLnRowNo = imPaintLnRowNo
        imPaintLnRowNo = -1
        imLnChg = True
        imComputeReq = True
        pbcLine.Cls
        pbcLnTotal.Cls
        pbcLnDates.Cls
        mSetHdDate False, False  'Init Hot values
        ilStep1Index = imStep1Index
        imStep1Index = 1    'Force to 1 so that mLnTotals called
        mInitLnShow
        imStep1Index = ilStep1Index
        pbcLine_Paint
        If plcDemoBar.Visible Then
            'mSetDemoBarBooks
            'mGetResearchTotals False
            If imDBTotals < 5 Then
                mBuildWkInfo True, True, False
                pbcDemoBar(0).Cls
                pbcDemoBar(1).Cls
                pbcDemoBar_Paint 0
                pbcDemoBar_Paint 1
            Else
                mBuildWkInfo True, True, False
                pbcDemoBar(1).Cls
                pbcDemoBar_Paint 1
            End If
        End If
        mSetCommands
        mCntrTotal
        pbcLine_Paint
        mSetCreditInfo
        mSetCommands
        imPaintLnRowNo = ilPaintLnRowNo
        Screen.MousePointer = vbDefault
    End If
    cmcClone.SetFocus
End Sub

Private Sub cmcClone_GotFocus()
    Dim llDate As Long
    sgCloneDate = ""
    If imLnRowNo >= 1 Then
        igCloneLn = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
        If (tgClfCntr(imLnRowNo - 1).iFirstCff < 0) Or (tgClfCntr(imLnRowNo - 1).iCancel) Then
            sgCloneDate = ""
        Else
            If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12) Then
                llDate = lmHSStartDate + 7 * (imHSCurWkNo + imLnBoxNo - WKSPOTSINDEX - 1)
                sgCloneDate = Format$(llDate, "m/d/yy")
            End If
        End If
    Else
        igCloneLn = -1
    End If
    igCloneRcfCode = tmRcf.iCode
    If imStep1Index <= 1 Then
        sgPassValue = ""
    Else
        sgPassValue = Format$(gNow(), "m/d/yy")
        sgPassValue = gObtainPrevMonday(sgPassValue)
    End If
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDates_Click()
    Dim ilPaintLnRowNo As Integer
    Dim ilClf As Integer
    Dim slStr As String
    Dim ilSvDBTotals As Integer
    
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Sub
    End If
    igShiftDates = False
    'If Not gWinRoom(igNoExeWinRes(CCANCELEXE)) Then
    '    Exit Sub
    'End If
    Screen.MousePointer = vbHourglass  'Wait
    If (sgCntrScreen <> "Orders") Then
        If imStep1Index <= 3 Then   'Scratch; Model; Change Exist Proposal; Create New Version of Proposal
            igShiftDates = True
        End If
    Else
        If imStep1Index <= 1 Then   'Scratch; Model
            igShiftDates = True
        End If
    End If
    'If plcDemoBar.Visible Then  'Hide demo bar
    '    cmcDemoBar_Click
    'End If
    mMoveCtrlToRec True
    Screen.MousePointer = vbHourglass  'Wait
    If Not mMoveLnCtrlToRec(False) Then
        If imHdBoxNo > 0 Then
            mEnableBox imHdBoxNo
        Else
            mLnEnableBox imLnBoxNo
        End If
        Screen.MousePointer = vbDefault    'Default
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass  'Wait
    mSetHdDate False, True
    'Screen.MousePointer = vbHourGlass  'Wait
    mAvailPop   'make sure avail list box has latest names
    igTerminateReturn = 0   '0=Canceled
    Screen.MousePointer = vbDefault    'Default
    CShift.Show vbModal
    'Screen.MousePointer = vbDefault    'Default
    If ((igTerminateReturn = 1) And igShiftDates) Or (igTerminateReturn = 2) Then
        Screen.MousePointer = vbHourglass
        ilPaintLnRowNo = imPaintLnRowNo
        imPaintLnRowNo = -1
        imLnChg = True
        imComputeReq = True
        pbcLine.Cls
        pbcLnTotal.Cls
        pbcLnDates.Cls
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            If (mGetLineType(ilClf + 1) <> "H") Then    'And (tgUrf(0).sUseComputeCMC <> "I") Then
                mLnTotals ilClf + 1, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
                mGetLnPriceInfo ilClf + 1, slStr, imLnTotalType, PRICEINDEX     'Formats Price within Show
            End If
        Next ilClf
        mSetHdDate False, False  'Init Hot values
        mInitLnShow
        '12/5/19
        ilSvDBTotals = imDBTotals
        If Contract.plcDemoBar.Visible = False Then
            imDBTotals = 6  'Weekly summary
        End If
        mSummary
        imDBTotals = ilSvDBTotals
        
        
        pbcLine_Paint
        If plcDemoBar.Visible Then
            'mSetDemoBarBooks
            'mGetResearchTotals False
            If imDBTotals < 5 Then
                mBuildWkInfo True, True, False
                pbcDemoBar(0).Cls
                pbcDemoBar(1).Cls
                pbcDemoBar_Paint 0
                pbcDemoBar_Paint 1
            Else
                mBuildWkInfo True, True, False
                pbcDemoBar(1).Cls
                pbcDemoBar_Paint 1
            End If
        End If
        mSetCommands
        mCntrTotal
        pbcLine_Paint
        mSetCreditInfo
        mSetCommands
        imPaintLnRowNo = ilPaintLnRowNo
        Screen.MousePointer = vbDefault
    Else
        mSetHdDate False, False  'Init Hot values
    End If
    If cmcDates.Enabled Then
        cmcDates.SetFocus
    Else
        cmcCancel.SetFocus
    End If
End Sub

Private Sub cmcDates_GotFocus()
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDates_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcDBAvails_Click()
    Screen.MousePointer = vbHourglass
    mBuildWkInfo False, True, True
    pbcDemoBar(1).Cls
    pbcDemoBar_Paint 1
    Screen.MousePointer = vbDefault
End Sub

Private Sub cmcDBAvails_GotFocus()
    lbcDBBook.Visible = False
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
    lbcDBDisplay.Visible = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDBBook_Click()
    'Load all books into list box
    If imLnRowNo <= 0 Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    mSetDemoBarBooks imLnRowNo, tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode, imCppCpm, 0, imCntrVefCode, imVpfIndex, imTerminate, imChgMode
    lbcDBBook.height = gListBoxHeight(lbcDBBook.ListCount, 10)
    Screen.MousePointer = vbDefault
    lbcDBBook.Visible = Not lbcDBBook.Visible
End Sub

Private Sub cmcDBBook_GotFocus()
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
    lbcDBDisplay.Visible = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDBDemo_Click()
    lbcDBDemo.Visible = Not lbcDBDemo.Visible
End Sub

Private Sub cmcDBDemo_GotFocus()
    lbcDBBook.Visible = False
    lbcDBSocEco.Visible = False
    lbcDBDisplay.Visible = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDBDisplay_Click()
    lbcDBDisplay.Visible = Not lbcDBDisplay.Visible
End Sub

Private Sub cmcDBDisplay_GotFocus()
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
    lbcDBBook.Visible = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDBSocEco_Click()
    lbcDBSocEco.Visible = Not lbcDBSocEco.Visible
End Sub

Private Sub cmcDBSocEco_GotFocus()
    lbcDBDisplay.Visible = False
    lbcDBBook.Visible = False
    lbcDBDemo.Visible = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDemoBar_Click()
    Dim slLineType As String
    Dim ilDnfCode As Integer
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer

    If cmcDemoBar.Caption = "Show Dem&o Bar" Then
        If (imLnRowNo <= 0) Then
            ilRet = MsgBox("A Schedule Line must be selected prior to pressing the Demo Bar button", vbOKOnly + vbExclamation, "Demo Bar")
            Exit Sub
        End If
        Screen.MousePointer = vbHourglass
        lbcDBBook.Visible = False
        'lacDBBookOvly.Caption = edcDBBook.Text
        'Changed lacDBBookOvly to edit control so that it overlays the true control
        lacDBBookOvly.Text = edcDBBook.Text
        edcDBBook.Visible = False
        lacDBBookOvly.Visible = True
        slLineType = mGetLineType(imLnRowNo)
        If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
            'If (imDBTotals <> 1) And (imDBTotals <> 4) Then
            '    imDBTotals = 4
            '    lacDBTotal.Caption = "Package Totals"
            'End If
            imDGChgMode = True
            lbcDBDisplay.Clear
            lbcDBDisplay.AddItem "Line Totals"  '"Package Totals"
            'lbcDBDisplay.AddItem "Contract Totals"
            lbcDBDisplay.AddItem "Line Summary"
            lbcDBDisplay.AddItem "Week Summary"
            lbcDBDisplay.AddItem "Quarter Summary"
            lbcDBDisplay.AddItem "Vehicle Summary"
            lbcDBDisplay.AddItem "Daypart Summary"
            If mDaypartGroupExist() Then
                lbcDBDisplay.AddItem "Daypart Group"
            End If
            If (imStep1Index = 4) And (sgCntrScreen <> "Orders") Then
                lbcDBDisplay.AddItem "Vehicle Difference"
            End If
            lbcDBDisplay.ListIndex = 0
            imDBTotals = 0  '4
            imDGChgMode = False
        Else
            imDGChgMode = True
            lbcDBDisplay.Clear
            lbcDBDisplay.AddItem "Line Totals"
            lbcDBDisplay.AddItem "Line Summary"
            lbcDBDisplay.AddItem "Week Summary"
            lbcDBDisplay.AddItem "Quarter Summary"
            lbcDBDisplay.AddItem "Vehicle Summary"
            lbcDBDisplay.AddItem "Daypart Summary"
            If mDaypartGroupExist() Then
                lbcDBDisplay.AddItem "Daypart Group"
            End If
            If (imStep1Index = 4) And (sgCntrScreen <> "Orders") Then
                lbcDBDisplay.AddItem "Vehicle Difference"
            End If
            lbcDBDisplay.ListIndex = 0
            imDBTotals = 0
            imDGChgMode = False
        End If
        imcShare(0).Picture = IconTraf!imcPrinter.Picture
        'plcPower.Visible = False
        plcHeader.Visible = False
        pbcHeader.Visible = False
        plcDemoBar.Visible = True
        If sgCntrScreen <> "Orders" Then
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            If ilCff >= 0 Then
                If tgCffCntr(ilCff).CffRec.sPriceType = "*" Then
                    mSetFlightPrice "Rate Card", False
                End If
            End If
        End If
        imInBuildWkInfo = True  'Avoid calling mBuildWkInfo multi-times
        mSetDemoBarBooks imLnRowNo, ilDnfCode, imCppCpm, 2, imCntrVefCode, imVpfIndex, imTerminate, imChgMode   ' (mBuildWkInfo sets tgClf to DnfCode)
        imInBuildWkInfo = False
        mBuildWkInfo True, True, False
        'mGetResearchTotals False
        mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
        edcDBBook.Visible = True
        lacDBBookOvly.Visible = False
        'cmcDBAvails.Move plcDemoBar.Width - fgBevelX - cmcDBAvails.Width, 15
        pbcDemoBar(0).Visible = True
        pbcDemoBar(1).Visible = True
        pbcDemoBar_Paint 0
        pbcDemoBar_Paint 1
        If (fmAdjFactorW = 1#) And (vbcLines.LargeChange = 12) Then
            plcLine.Move 105, 2775, pbcLine.Width + vbcLines.Width + fgPanelAdj, 2280
            pbcLine.Move plcLine.Left + fgBevelX, plcLine.Top + 450, pbcLine.Width, 1545 'fgBevelY
            pbcLnTotal.Move pbcLine.Left, pbcLine.Top + pbcLine.height, pbcLine.Width, 225
            'vbcLines.Move pbcLine.Left + pbcLine.Width + 15, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.Height - pbcLine.Top
            vbcLines.Move pbcLine.Left + pbcLine.Width, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.height - pbcLine.Top
            vbcLines.LargeChange = 5
        End If
        imLine = 0
        gSetShow pbcDemoBar(1), "Indx", tmDBCtrls(12)
        'lacLines.Caption = "+ Lines"
        'imcLnArrow.Picture = IconTraf!imcArrowUp.Picture
        cmcDemoBar.Caption = "Hide Dem&o Bar"
        cmcDemoBar.Visible = True
        If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
'            cmcPower.Visible = False
            cmcRates.Visible = False
        End If
        'lacLines.Visible = False
        If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12) Then
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If pbcLineArrow.Visible Then
                    pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
            Else
                If smLineType = "H" Then
                    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                        If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                            'If tgPackLn(ilLoop).iAlter <> True Then
                            If tgPackLn(ilLoop).sAlter <> "Y" Then
                                If pbcLineArrow.Visible Then
                                    pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                                Else
                                    pbcClickFocus.SetFocus
                                End If
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                            Exit For
                        End If
                    Next ilLoop
                End If
                imDBBoxNo = imLnBoxNo - WKSPOTSINDEX + 1
                imDBRowNo = 1
                If imLnSave(8, imLnRowNo) = 0 Then
                    pbcDBLnDaily.Width = tmDBSCCtrls(imDBBoxNo).fBoxW
                    gMoveTableCtrl pbcDemoBar(1), pbcDBLnDaily, tmDBSCCtrls(imDBBoxNo).fBoxX, tmDBSCCtrls(imDBBoxNo).fBoxY
                    pbcDBLnDaily_Paint
                    pbcDBLnDaily.Visible = True  'Set visibility
                    If pbcLnDaily.Visible Then
                        pbcLnDaily.SetFocus
                    Else
                        mLnSetFocus imLnBoxNo
                    End If
                Else
                    edcDBValue.Width = tmDBSCCtrls(imDBBoxNo).fBoxW
                    edcDBValue.MaxLength = 4
                    gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBSCCtrls(imDBBoxNo).fBoxX, tmDBSCCtrls(imDBBoxNo).fBoxY
                    edcDBValue.Text = edcLNDropDown.Text    'slStr'Trim$(smLnSave(6, imLnRowNo))
                    edcDBValue.Visible = True  'Set visibility
                    If edcLNDropDown.Visible Then
                        edcLNDropDown.SelStart = 0
                        edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
                        edcLNDropDown.SetFocus
                    Else
                        mLnSetFocus imLnBoxNo
                    End If
                End If
            End If
        Else
            mLnSetFocus imLnBoxNo
        End If
        bmLacAudTotals = lacAudTotals.Visible
        lacAudTotals.Visible = False
        Screen.MousePointer = vbDefault
    Else
        imcShare(0).Picture = IconTraf!imcPrinter.Picture
        edcDBValue.Visible = False
        pbcDBLnDaily.Visible = False
        lbcDBDisplay.Visible = False
        lbcDBBook.Visible = False
        lbcDBDemo.Visible = False
        lbcDBSocEco.Visible = False
        plcHeader.Visible = True
        pbcHeader.Visible = True
        'lacLines.Visible = True
        cmcDemoBar.Caption = "Show Dem&o Bar"
        plcDemoBar.Visible = False
        pbcDemoBar(0).Visible = False
        pbcDemoBar(1).Visible = False
        pbcDemoBar(2).Visible = False
        pbcDemoBar(3).Visible = False
        pbcSumType(0).Visible = False
        vbcSummary.Visible = False
        If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12) Then
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If pbcLineArrow.Visible Then
                    pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
            Else
                If edcLNDropDown.Visible Then
                    edcLNDropDown.SelStart = 0
                    edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
                    edcLNDropDown.SetFocus
                Else
                    mLnSetFocus imLnBoxNo
                End If
            End If
        Else
            mLnSetFocus imLnBoxNo
        End If
        lacAudTotals.Visible = bmLacAudTotals
    End If
End Sub

Private Sub cmcDemoBar_GotFocus()
    mAllSetShow 3
    'gShowHelpMess tmChfHelp(), CHFBTDONE
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDGDropDown_Click()
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        '11/2/9: moved to CFlight
        'Select Case imDGBoxNo
        '    Case DGSTARTDATEINDEX
        '        plcCalendar.Visible = Not plcCalendar.Visible
        '    Case DGNOWKSINDEX
        '        edcDGEdit.SelStart = 0
        '        edcDGEdit.SelLength = Len(edcDGEdit.Text)
        '        edcDGEdit.SetFocus
        '        Exit Sub
        '    Case DGENDDATEINDEX
        '        plcCalendar.Visible = Not plcCalendar.Visible
        '    Case DGRUNINDEX
        '        lbcDGRun.Visible = Not lbcDGRun.Visible
        '    Case DGDWPINDEX
        '        lbcDWP.Visible = Not lbcDWP.Visible
        '    Case DGSPOTWKINDEX
        '        edcDGEdit.SelStart = 0
        '        edcDGEdit.SelLength = Len(edcDGEdit.Text)
        '        edcDGEdit.SetFocus
        '        Exit Sub
        '    Case DGPRICEINDEX
        '        lbcPriceType(0).Visible = Not lbcPriceType(0).Visible
        '    Case DGOVSTARTINDEX
        '        plcTme.Visible = Not plcTme.Visible
        '    Case DGOVENDINDEX
        '        plcTme.Visible = Not plcTme.Visible
        'End Select
    Else
        If imOVType <> 2 Then
            Select Case imOVBoxNo
                Case OVSTARTTIMEINDEX
                    plcTme.Visible = Not plcTme.Visible
                Case OVENDTIMEINDEX
                    plcTme.Visible = Not plcTme.Visible
                Case OVBBOPENINDEX
                    lbcBBLen.Visible = Not lbcBBLen.Visible
                Case OVBBCLOSEINDEX
                    lbcBBLen.Visible = Not lbcBBLen.Visible
            End Select
        Else
            Select Case imOVBoxNo
                Case OV2STARTTIMEINDEX
                    plcTme.Visible = Not plcTme.Visible
                Case OV2ENDTIMEINDEX
                    plcTme.Visible = Not plcTme.Visible
                Case OV2SPLITINDEX
                    lbcRegion.Visible = Not lbcRegion.Visible
            End Select
        End If
    End If
    edcDGDropDown.SelStart = 0
    edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
    edcDGDropDown.SetFocus
End Sub

Private Sub cmcDGDropDown_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDnMove_Click()
    Dim slStr As String
    slStr = Left$(edcComment.Text, edcComment.SelStart)
    If (lbcBPlate.ListIndex > 0) And (lacBPlate.Caption <> "") Then
        'slStr = slStr & Trim$(Left$(tmCmf.sComment, tmCmf.iStrLen))
        slStr = slStr & gStripChr0(tmCmf.sComment)
    End If
    slStr = slStr & Mid$(edcComment.Text, edcComment.SelStart + edcComment.SelLength + 1)
    edcComment.Text = slStr
    If ckcCommOn(0).Enabled Then
        If tmCmf.sShProp = "Y" Then
            ckcCommOn(0).Value = vbChecked
        Else
            ckcCommOn(0).Value = vbUnchecked
        End If
    End If
    If ckcCommOn(1).Enabled Then
        If tmCmf.sShOrder = "Y" Then
            ckcCommOn(1).Value = vbChecked
        Else
            ckcCommOn(1).Value = vbUnchecked
        End If
    End If
    If ckcCommOn(2).Enabled Then
        If tmCmf.sShSpot = "Y" Then
            ckcCommOn(2).Value = vbChecked
        Else
            ckcCommOn(2).Value = vbUnchecked
        End If
    End If
    If ckcCommOn(3).Enabled Then
        If tmCmf.sShInv = "Y" Then
            ckcCommOn(3).Value = vbChecked
        Else
            ckcCommOn(3).Value = vbUnchecked
        End If
    End If
    ckcCommOn(4).Value = vbUnchecked
    edcComment.SetFocus
    lacBPlate.Caption = ""
    lbcBPlate.ListIndex = -1
End Sub

Private Sub cmcDnMove_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDone_Click()

    If imLoadingForm Or imLoadingContract Then
        Exit Sub
    End If
    If plcPower.Visible Then
        Exit Sub
    End If
    If tmcLnTab.Enabled Then
        Exit Sub
    End If
    If Not imUpdateAllowed Then
        cmcCancel_Click
        Exit Sub
    End If
    tmcDelay.Enabled = False
'Moved into tmcDelay
'    If plcDemoBar.Visible Then  'Hide demo bar
'        cmcDemoBar_Click
'    End If
'    If (imCreditRestr = 1) And ((imStep1Index = 0) Or (imStep1Index = 1)) Then
'        mTerminate
'    Else
'        If mSaveRecChg(True) = False Then
'            If imTerminate Then
'                cmcCancel_Click
'                Exit Sub
'            End If
'            If imHdBoxNo > 0 Then
'                mEnableBox imHdBoxNo
'            Else
'                mLnEnableBox imLnBoxNo
'            End If
'            Exit Sub
'        End If
'        ''ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
'        'ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
'        mTerminate
'    End If
    imDelaySrce = 4
    tmcDelay.Interval = 1000
    tmcDelay.Enabled = True
End Sub

Private Sub cmcDone_GotFocus()
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTDONE
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcDone_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcErase_Click()
    Dim ilRet As Integer
    If ((sgCntrScreen <> "Orders") And (imStep1Index = 2)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4) And ((smOrigStatus = "W") Or (smOrigStatus = "C") Or (smOrigStatus = "I"))) Then 'Erase
        If Contract.plcDemoBar.Visible Then  'Hide demo bar
            cmcDemoBar_Click
        End If
    End If
    gGetSyncDateTime smSyncDate, smSyncTime
    ilRet = mCntrErase(hmCHF, hmClf, hmCff, hmCgf, hmCxf, hmSbf, hmDsf, hmRvf, hmPhf, hmMsf, hmMgf, imStep1Index, imStep3Index, smOrigStatus)
    Screen.MousePointer = vbDefault    'Default
    If Not ilRet Then
        Exit Sub
    End If
    imStepBoxNo = -1
    imChgMode = True
    imStep1Index = -1
    lbcStep(0).ListIndex = -1
    imChgMode = False
    imLnChg = False
    imGameInvChg = False
    imNTRChg = False
    imCPMChg = False
    '10910
    bgContractAttachments_Changed = False
    imComputeReq = False
    mClearCtrlFields
    mPaintStep
    mPaintLnTitle
    mSetCommands
    pbcStepSTab.SetFocus
End Sub

Private Sub cmcErase_GotFocus()
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcErase_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcFlight_Click()
    Dim slStr As String
    Dim ilClf As Integer
    Dim ilMax As Integer
    
    If imLnRowNo < 1 Then
        Exit Sub
    End If
    If mIsLnGame(imLnRowNo) Then
        Exit Sub
    End If
    If imDiffMode Then
        If cbcDifference.ListIndex > 0 Then
            pbcClickFocus.SetFocus
            Exit Sub
        End If
    End If
    Screen.MousePointer = vbHourglass
    slStr = gMulStr(tmFTCtrls(3).sShow, tmFTCtrls(2).sShow)
    If gCompNumberStr(slStr, "21000000") > 0 Then
        gExceedLimitMsg
        Exit Sub
    End If
    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
    imInFlightScreen = True
    cmcDone.Enabled = False
    cmcCancel.Enabled = False
    'cmcPower.Enabled = False
    cmcRates.Enabled = False
    lmSvHSStartDate = lmHSStartDate
    imSvHSStartWkNo = imHSStartWkNo
    imSvHSEndWkNo = imHSEndWkNo
    imSvHSCurWkNo = imHSCurWkNo
    imSvLnRowNo = imLnRowNo
    imSvLnChg = imLnChg
    imSvComputeReq = imComputeReq
    imAirCancel = False
    'mGetFlightStartInfo True, False'Require to call mGetDate as cbcAirLine calls mSetDate
    Screen.MousePointer = vbHourglass
    mDBSetShow imDB0BoxNo
    imDB0BoxNo = -1
    mDBSetShow imDBBoxNo
    imDBBoxNo = -1
    imDBRowNo = -1
    mLnSetShow imLnBoxNo
    imLnBoxNo = -1
    lmHSStartDate = -1
    imHSStartWkNo = 0
    imHSEndWkNo = 0
    imHSCurWkNo = 0
    CFlight.Show vbModal
    'ilMax = UBound(tgClfCntr) - 1
    'If tgClfCntr(UBound(tgClfCntr)).iFirstCff >= 0 Then
    '    ilMax = UBound(tgClfCntr)
    'End If
    'For ilClf = LBound(tgClfCntr) To ilMax Step 1
    '    'required to get all weeks created
    '    tgClfCntr(ilClf).lFirstAvail = -1
    '    mClearAvails ilClf + 1
    '    mClearResearch ilClf + 1, VEHINDEX, DPINDEX
    '    'ClearAvail will call mAvailTab if index = 8 or 9
    '    If (Contract.tscLine.SelectedItem.Index = 10) Then
    '        mAvailTab ilClf + 1
    '    End If
    'Next ilClf
    mResearchForTabs VEHINDEX, DPINDEX
    pbcLine_Paint
    pbcLnTotal_Paint
    pbcLnTab.SetFocus
    Exit Sub
'    mGetFlightStartInfo True, False 'Require to call mGetDate as cbcAirLine calls mSetDate
'    Screen.MousePointer = vbHourglass
'    mPopAirLine 'This will also cause mGetFlightStartInfo to be called
'    'Note: mGetFlightStartInfo False, False called when cbcAirLine_Change which is caused
'    '      in the call below when line selected
'    Screen.MousePointer = vbHourglass
'    'mLnSetShow imLnBoxNo
'    'imLnBoxNo = -1
'    Screen.MousePointer = vbDefault
'    'If line is CBS then flight screen not made visible because line not added to cbcAirLine
'    If Not pbcAir.Visible Then
'        cmcDone.Enabled = True
'        cmcCancel.Enabled = True
'        'cmcPower.Enabled = True
'        cmcRates.Enabled = True
'    End If
'    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
'        cmcAirCancel.SetFocus
'        Exit Sub
'    End If
'    'If mIsLnGame(imLnRowNo) Then
'    '    tgSpf.sAllowDailyBuys = "N"
'    'End If
End Sub

Private Sub cmcFlight_GotFocus()
    mAllSetShow 2
    'If ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) Or (imLnBoxNo = PRICEINDEX) Then
    '    mSetTotalsFrmWks
    'End If
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcGenLineBar_Click()
    Dim ilRet As Integer
    ilRet = mGenLines(0)
    If imTerminate Then
        Exit Sub
    End If
    If ilRet Then
        'mBuildMapLinePaint
        mSetLineScroll True, False
        pbcLine_Paint
    End If
    If Not cmcRates.Visible Then
        cmcCancel.SetFocus
    Else
        cmcRates.SetFocus
    End If
End Sub

Private Sub cmcGenLineBar_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcGenLineBar_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcGenPkgLine_Click()
    Dim ilRet As Integer
    ilRet = mGenLines(1)
    If ilRet Then
        'mBuildMapLinePaint
        mSetLineScroll True, False
        pbcLine_Paint
    End If
    'If ilRet Then
    '    ilRet = mPackage(1)
    'End If
    ReDim igLnMakingPack(0 To 0) As Integer
    If Not cmcRates.Visible Then
        cmcCancel.SetFocus
    Else
        cmcRates.SetFocus
    End If
End Sub

Private Sub cmcGenPkgLine_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcGenPkgLine_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcHdDropDown_Click()
    Select Case imHdBoxNo
        Case STATUSINDEX
            lbcStatus.Visible = Not lbcStatus.Visible
        Case POTINDEX
            lbcPot.Visible = Not lbcPot.Visible
        Case TYPEINDEX
            lbcType.Visible = Not lbcType.Visible
        Case REVNOINDEX
            lbcRevNo.Visible = Not lbcRevNo.Visible
            edcRevNo.SelStart = 0
            edcRevNo.SelLength = Len(edcRevNo.Text)
            edcRevNo.SetFocus
            Exit Sub
        Case ADVTINDEX
            lbcAdvt.Visible = Not lbcAdvt.Visible
        Case PRODUCTINDEX
            lbcProd.Visible = Not lbcProd.Visible
        Case SHTTITLEINDEX
            lbcShtTitle.Visible = Not lbcShtTitle.Visible
        Case AGENCYINDEX
            lbcAgency.Visible = Not lbcAgency.Visible
        Case BUYERINDEX
            lbcBuyer.Visible = Not lbcBuyer.Visible
        Case MERCHINDEX
            lbcComment(0).Visible = Not lbcComment(0).Visible
        Case PROMOINDEX
            lbcComment(0).Visible = Not lbcComment(0).Visible
        'Case REVSETINDEX
        '    lbcRevSet(0).Visible = Not lbcRevSet(0).Visible
        Case SEGINDEX
            lbcSeg.Visible = Not lbcSeg.Visible
        Case RATECARDINDEX
            lbcRateCard.Visible = Not lbcRateCard.Visible
        Case BILLCYCLEINDEX
            lbcBillCycle.Visible = Not lbcBillCycle.Visible
        Case INVGROUPINDEX
            lbcInvGroup.Visible = Not lbcInvGroup.Visible
        Case INTCOMMINDEX
            lbcComment(0).Visible = Not lbcComment(0).Visible
        Case CANCLAUSEINDEX
            lbcComment(0).Visible = Not lbcComment(0).Visible
        Case CHGREASONINDEX
            lbcComment(0).Visible = Not lbcComment(0).Visible
        Case OTHERCOMMINDEX
            lbcComment(0).Visible = Not lbcComment(0).Visible
    End Select
    edcHdDropDown.SelStart = 0
    edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
    edcHdDropDown.SetFocus
End Sub
Private Sub cmcHdDropDown_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcHold_Click()
    Dim ilRet As Integer
    Dim slStr As String
    Dim slStamp As String
    Dim ilSchSelCntr As Integer
    If tmcLnTab.Enabled Then
        Exit Sub
    End If
    If ((imHoldShift And vbShiftMask) = SHIFTMASK) And ((imHoldShift And vbAltMask) = ALTMASK) Then
        If plcDemoBar.Visible Then  'Hide demo bar
            cmcDemoBar_Click
        End If
        UnSchd.Show vbModal
    Else
        If plcDemoBar.Visible Then  'Hide demo bar
            cmcDemoBar_Click
        End If
        Screen.MousePointer = vbHourglass  'Wait
        igChildDone = False 'edcLinkDestDoneMsg.Text = ""
        Traffic!edcLinkSrceHelpMsg.Text = ""
        ilSchSelCntr = False
        If (lbcStatus.Text = "Approved Hold") Or (lbcStatus.Text = "Approved Order") Then
            If (tgChfCntr.sSchStatus <> "M") Then
                If (tmAdf.iCode <> 0) And ((tmAdf.sCrdApp = "R") Or ((tmAdf.sCrdApp = "D"))) Then
                    ilSchSelCntr = False
                ElseIf (tmAgf.iCode <> 0) And (tmAdf.sBillAgyDir <> "D") And ((tmAgf.sCrdApp = "R") Or ((tmAgf.sCrdApp = "D"))) Then
                    ilSchSelCntr = False
                Else
                    ilSchSelCntr = True
                End If
            End If
        End If
        If ilSchSelCntr Then
            If igTestSystem Then
                slStr = "Traffic^Test\" & sgUserName & "\" & "#" & Trim$(str$(tgChfCntr.lCode))
            Else
                slStr = "Traffic^Prod\" & sgUserName & "\" & "#" & Trim$(str$(tgChfCntr.lCode))
            End If
        Else
            If igTestSystem Then
                slStr = "Traffic^Test\" & sgUserName & "\" & "Hold"
            Else
                slStr = "Traffic^Prod\" & sgUserName & "\" & "Hold"
            End If
        End If
        'ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
        ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
        sgCommandStr = slStr
        CntrSch.Show vbModal
        slStr = sgDoneMsg
        slStamp = gFileDateTime(sgDBPath & "Chf.btr")
            imStepBoxNo = 1
            'lbcStep(0).ListIndex = 0
            'mStepSetShow 1
            mStepEnableBox imStepBoxNo
            Screen.MousePointer = vbDefault
    End If
    'Screen.MousePointer = vbDefault    'Default
End Sub

Private Sub cmcHold_GotFocus()
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTSCHHLD
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcHold_KeyDown(KeyCode As Integer, Shift As Integer)
    imHoldShift = Shift
End Sub

Private Sub cmcHold_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcLnDropDown_Click()
    If grdCPMBuy.Visible Then
        gCPMDropdown 1
    Else
        Select Case imLnBoxNo
            Case VEHINDEX
                If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                    lbcLnVehicle(igTabMapIndex).Visible = Not lbcLnVehicle(igTabMapIndex).Visible
                    imINPBCPaint = False
                    If lbcLnVehicle(igTabMapIndex).Visible Then
                        pbcLbcVehicle.Visible = True
                    Else
                        pbcLbcVehicle.Visible = False
                    End If
                Else
                    lbcPkVehicle(igTabMapIndex).Visible = Not lbcPkVehicle(igTabMapIndex).Visible
                    If lbcPkVehicle(igTabMapIndex).Visible Then
                        pbcLbcVehicle.Visible = True
                    Else
                        pbcLbcVehicle.Visible = False
                    End If
                End If
            Case DPINDEX
                If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                    lbcLnProgram(igTabMapIndex).Visible = Not lbcLnProgram(igTabMapIndex).Visible
                Else
                    lbcPkProgram(igTabMapIndex).Visible = Not lbcPkProgram(igTabMapIndex).Visible
                End If
            Case LENINDEX
                lbcLen.Visible = Not lbcLen.Visible
            Case LINECOMMINDEX
                lbcComment(1).Visible = Not lbcComment(1).Visible
                If lbcComment(1).Visible Then
                    edcLNDropDown.Visible = True
                End If
                edcLNDropDown.SelStart = 0
                edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
                Exit Sub
            Case PRICEINDEX
                lbcPriceType(0).Visible = Not lbcPriceType(0).Visible
        End Select
    End If
    edcLNDropDown.SelStart = 0
    edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
    edcLNDropDown.SetFocus
End Sub
Private Sub cmcLnDropDown_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcMkt_Click()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilRet                                                                                 *
'******************************************************************************************

    Dim ilLoop As Integer
    Dim blInitLines As Boolean

    If cmcMkt.Caption = "&Alert" Then
        imReturnToAlerts = True
        'ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
        mTerminate
        Exit Sub
    End If
    'TTP 10937 - Contract Dashboard: new screen to show contract header information
    If cmcMkt.Caption = "&Dash" Then
        imReturnToDashboard = True
        'ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
        mTerminate
        Exit Sub
    End If
    
    If (tgSpf.sMktBase = "Y") And (cmcUpdate.Enabled = False) Then
        LogMkt.Show vbModal
        DoEvents
        If UBound(igMktCode) <= 0 Then
            Exit Sub
        End If
        ReDim igCntrMktCode(0 To UBound(igMktCode)) As Integer
        For ilLoop = 0 To UBound(igMktCode) Step 1
            igCntrMktCode(ilLoop) = igMktCode(ilLoop)
        Next ilLoop
        If ((imStep1Index = 0) Or (imStep1Index = 1)) Then
            blInitLines = False
            If UBound(tgClfCntr) <= LBound(tgClfCntr) Then
                'Set as if lines defined so header is not removed
                blInitLines = True
                ReDim tgClfCntr(0 To 1) As CLFLIST
            End If
            smVehicleCodeTag = ""
            imUndoSelection = -1
            cmcUndo_Click
            If blInitLines Then
                mUndoLines
            End If
        Else
            smVehicleCodeTag = ""
            pbcSelect.Cls
            imSelectDelay = False
            mClearCtrlFields
            pbcSaveStop.Enabled = True
            lbcStep(0).ListIndex = -1
            imStepBoxNo = 1
            mStepEnableBox imStepBoxNo
        End If
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub cmcMkt_GotFocus()
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTUPDATE
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcMkt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcPackage_Click(Index As Integer)
    Dim ilRet As Integer
    ReDim igLnMakingPack(0 To 0) As Integer
    ilRet = mPackage(0)
    'cmcPackage(0).SetFocus
    pbcClickFocus.SetFocus
End Sub

Private Sub cmcPackage_GotFocus(Index As Integer)
    If Not grdCPMBuy.Visible Then
        If imLnRowNo > 0 Then
            igPackLnNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
        Else
            igPackLnNo = -1
        End If
    End If
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcPackage_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Public Sub cmcPBCancel_Click()
    'cmcPower_Click
    plcPower.Visible = False
    plcLine.Visible = True
    pbcLine.Visible = True
    pbcLnTotal.Visible = True
    vbcLines.Visible = True
    'lacLines.Visible = True
    If laclnFrame.Visible Then
        pbcLineArrow.Visible = True
    Else
        pbcLineArrow.Visible = False
    End If
    If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
        cmcRates.Visible = False
    Else
        cmcRates.Visible = True
    End If
    If (UBound(tgClfCntr) = LBound(tgClfCntr)) And (Trim$(smLnSave(1, 1)) = "") Then
        imLnRowNo = 0
        imMoveLnRowNo = 0
        mInitNewLine
        mSetHdDate False, False
        pbcLine_Paint
    End If
    pbcClickFocus.SetFocus
End Sub

Private Sub cmcPBCancel_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcPBDate_Click(Index As Integer)
    tmcDelay.Enabled = False
    plcCalendar.Visible = Not plcCalendar.Visible
    edcPBDate(Index).SelStart = 0
    edcPBDate(Index).SelLength = Len(edcPBDate(Index).Text)
    edcPBDate(Index).SetFocus
    'mPBSetCommands
End Sub

Private Sub cmcPBDate_GotFocus(Index As Integer)
    tmcDelay.Enabled = False
    imDelaySrce = -1
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 6
    If imPBDateIndex <> Index Then
        If plcCalendar.Visible Then
            plcCalendar.Visible = False
        End If
    End If
    plcCalendar.Move plcPower.Left + frcPBDates.Left + edcPBDate(Index).Left, plcPower.Top + frcPBDates.Top + edcPBDate(Index).Top + edcPBDate(Index).height
    imPBDateIndex = Index
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcProj_Click()
    Dim llDate As Long
    Dim llTime As Long
    Dim slNowDate As String
    Dim slNowTime As String
    Dim llNowDate As Long
    Dim llNowTime As Long
    ReDim ilTime(0 To 1) As Integer

    Dim ilShell As Integer
    Dim dlShellRet As Double
    Dim slCommandStr As String
    Dim ilPos As Integer
    Dim slDate As String
    Dim ilLoop As Integer

    If ((tgUrf(0).iSlfCode > 0) Or (tgUrf(0).iRemoteUserID > 0)) Or ((tgUrf(0).sWorkToHold <> "Y") And (tgUrf(0).sWorkToOrder <> "Y") And (tgUrf(0).sCompToHold <> "Y") And (tgUrf(0).sCompToOrder <> "Y") And (tgUrf(0).sIncompToHold <> "Y") And (tgUrf(0).sIncompToOrder <> "Y")) Then
        'Force Read
        sgSpfStamp = "~"
        gSpfRead
        'gSetUsingTraffic
        slNowDate = Format$(gNow(), "m/d/yy")
        slNowTime = Format$(gNow(), "h:mm:ssAM/PM")
        gUnpackDateLong tgSpf.iNROBlockDate(0), tgSpf.iNROBlockDate(1), llDate
        llNowDate = gDateValue(slNowDate)
        If llNowDate > llDate Then
            cmcProj.Enabled = False
            MsgBox "Contract Projections Blocked until Rollover", vbOKOnly + vbExclamation, "Warning"
            cmcCancel.SetFocus
            Exit Sub
        Else
            gUnpackTimeLong tgSpf.iNROBlockTime(0), tgSpf.iNROBlockTime(1), False, llTime
            gPackTime slNowTime, ilTime(0), ilTime(1)
            gUnpackTimeLong ilTime(0), ilTime(1), False, llNowTime
            If (llNowDate = llDate) And (llNowTime >= llTime) Then
                cmcProj.Enabled = False
                MsgBox "Contract Projections Blocked until Rollover", vbOKOnly + vbExclamation, "Warning"
                cmcCancel.SetFocus
                Exit Sub
            End If
        End If
    End If
    'CntrProj.Show vbModal
    
    If igTestSystem Then
        slCommandStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(CALLNONE))
    Else
        slCommandStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(CALLNONE))
    End If
    If ((Len(Trim$(sgSpecialPassword)) = 4) And (Val(sgSpecialPassword) >= 1) And (Val(sgSpecialPassword) < 10000)) Then
        ilPos = InStr(1, slCommandStr, "Guide", vbTextCompare)
        If ilPos > 0 Then
            slCommandStr = Left(slCommandStr, ilPos - 1) & "CSI" & Mid(slCommandStr, ilPos + 5)
        End If
    End If
    'Dan M 9/20/10 problems in v57 reports.exe running GetCsiName
    'slDate = Trim$(gGetCSIName("SYSDate"))
    slDate = gCSIGetName()
    If slDate <> "" Then
        'use slDate when writing to file later
        slDate = " /D:" & slDate
        'slCommandStr = slCommandStr & " /D:" & slDate
        slCommandStr = slCommandStr & slDate
    End If
    slCommandStr = slCommandStr & " /ULF:" & lgUlfCode
    slCommandStr = slCommandStr & "/IniLoc:" & CurDir$ & " /UserInput"
    Screen.MousePointer = vbDefault
    Traffic.WindowState = vbMinimized
    gShellAndWait Traffic, sgExePath & "CntrProj.exe " & slCommandStr, vbNormalFocus, False    'vbFalse
    Traffic.WindowState = vbMaximized
    
    If (tgUrf(0).iSlfCode <= 0) And (tgUrf(0).iRemoteUserID <= 0) Then
        sgSpfStamp = "~"
        gSpfRead
        'gSetUsingTraffic
    End If
End Sub

Private Sub cmcProj_GotFocus()
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcProj_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcRates_Click()
    Dim ilLoop As Integer
    Dim slDemoName As String
    Dim ilFound As Integer

    If cmcDemoBar.Caption = "Hide Dem&o Bar" Then
        cmcDemoBar_Click
        edcRB(0).Visible = False
        edcRB(1).Visible = False
        imRBBox = -1
        imRBRow = -1
    End If
    'If mTestFields(TESTALLCTRLS, ALLMANDEFINED + NOMSG) = NO Then
    If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
        plcPower.Enabled = False
    Else
        plcPower.Enabled = True
    End If
    imPBLenClicked = False
    mMoveCtrlToRec True     'set tgChfCntr.iRcfCode as it is required be mPkDPPop (daypart population
    For ilLoop = 0 To lbcDaypart.ListCount - 1 Step 1
        If lbcDaypart.Selected(ilLoop) Then
            slDemoName = lbcDaypart.List(ilLoop)
            Exit For
        End If
    Next ilLoop
    imRBInLnGridOrSum = -1
    imOVBoxNo = -1
    edcPBEqualValueCPM.Text = ""
    edcPBEqualValueCPP.Text = ""
    edcPBEqualValueSpots.Text = ""
    mSetPowerBar 1, fmAdjFactorW, tmRBCtrls()
    plcPower.Visible = True
    mPaintPowerBar 0
    plcLine.Visible = False
    pbcLine.Visible = False
    pbcLnTotal.Visible = False
    vbcLines.Visible = False
    'lacLines.Visible = False
    pbcLineArrow.Visible = False
    lbcDaypart.Clear
    For ilLoop = 0 To 3 Step 1
        If lbcDemo(ilLoop).ListIndex >= 1 Then
            lbcDaypart.AddItem lbcDemo(ilLoop).List(lbcDemo(ilLoop).ListIndex)
            imDemoMap(lbcDaypart.ListCount - 1) = ilLoop
        End If
    Next ilLoop
    'Show all demos if none selected within header
    If lbcDaypart.ListCount = 0 Then
        For ilLoop = 1 To lbcDemo(0).ListCount - 1 Step 1
            lbcDaypart.AddItem lbcDemo(0).List(ilLoop)
        Next ilLoop
    End If
    'lbcDaypart.ListIndex = 0
    If slDemoName <> "" Then
        For ilLoop = 0 To lbcDaypart.ListCount - 1 Step 1
            ilFound = False
            If slDemoName = lbcDaypart.List(ilLoop) Then
                ilFound = True
                lbcDaypart.Selected(ilLoop) = True
                Exit For
            End If
        Next ilLoop
        If Not ilFound Then
            lbcDaypart.Selected(0) = True
        End If
    Else
        lbcDaypart.Selected(0) = True
        imPBMnfDemo = 0
    End If
    imRBBox = -1
    imRBRow = -1
    If edcRBWks(3).Text = "" Then
        edcPBFactor.Text = "1"
        imPBFactor = 1
        'Set to one- Jim 11/21/02 it was bland and 0
        edcRBWks(3).Text = "1"
        imPBSpots = 1
    End If
    If plcPower.Enabled Then
        If frcPBDates.Visible Then
            edcPBDate(0).SetFocus
        Else
            'edcPBDate(0).SetFocus
        End If
    Else
        pbcClickFocus.SetFocus
    End If
    cmcRates.Visible = False
    mPBSetCommands
End Sub

Private Sub cmcRates_GotFocus()
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcRBGenGrid_Click()
    Dim ilLoop As Integer

    If Trim$(smPowerCaption) = "Rate Bar" Then
        For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            tmPB1DP(ilLoop).iAudSet = False
            If imPBLenClicked Then
                tmPB1DP(ilLoop).lOrigAvgPrice = -1
            End If
        Next ilLoop
    End If
    imPBLenClicked = False
    imDelaySrce = 2
    tmcDelay_Timer
End Sub

Private Sub cmcRBGenGrid_GotFocus()
    plcCalendar.Visible = False
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub cmcSaveStay_Click()
    If Not imUpdateAllowed Then
        Exit Sub
    End If
    imSaveStay = True
    If igFreezeState = 1 Then
        igFreezeState = 0
        mUnfreezeCalc
        igFreezeState = 1
    End If
    cmcUpdate_Click
    imSaveStay = False
End Sub

Private Sub cmcSaveStay_GotFocus()
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTUPDATE
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcSaveStay_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcScale_Click()
    Dim slStr As String
    Dim llRound As Long
    If (imUpdateAllowed) And (sgCntrScreen <> "Orders") And (imStep1Index <= 3) And (Not igRepNetChgAllowed) Then
        igTerminateReturn = 0   '0=Canceled
        igLnSPChg = False
        mCntrTotal
        sgPassValue = smTotalDollars
        CScale.Show vbModal
        If (igTerminateReturn = 1) Then
            If (Len(sgPassValue) = 0) Or (Val(sgPassValue) = 0) Then
                Exit Sub
            End If
            Screen.MousePointer = vbHourglass
            imComputeReq = True
            If tmRcf.iCode <> 0 Then
                llRound = tmRcf.lRound
            Else
                llRound = 1
            End If
            mAdjAllPrices llRound, sgPassValue, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode()
            mCntrTotal
            gUnformatStr smTotalDollars, 0, slStr
            'edcGross.Text = slStr
            edcHdDropDown.Text = slStr
            mSetChg GROSSINDEX
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            gSetShow pbcHeader, slStr, tmHdCtrls(GROSSINDEX)
            mCntrTotal  'Recall to set box at bottom of screen
            pbcHeader.Cls
            pbcHeader_Paint
            pbcLine.Cls
            pbcLnTotal.Cls
            pbcLine_Paint
            pbcLnTotal_Paint
            'Demo bar is made invisible so the code below is not required as imLnRowNo set to -1 in GotFocus and mSetCommands called
            'If tgUrf(0).sUseComputeCMC <> "I" Then
            '    mResetDemoBar True, True
            'End If
            mSetCommands
            'DoEvents
            Screen.MousePointer = vbDefault
        End If
        If cmcScale.Enabled Then
            cmcScale.SetFocus
        Else
            cmcCancel.SetFocus
        End If
    End If
End Sub

Private Sub cmcScale_GotFocus()
    mAllSetShow 2
    mLnSetShow imLnBoxNo    'This call must be before mPrgPop
    If plcDemoBar.Visible Then
        mDBSetShow imDB0BoxNo
        imDB0BoxNo = -1
        mDBSetShow imDBBoxNo
        imDBBoxNo = -1
        imDBRowNo = -1
    End If
    mSetArrowFrame
    pbcLineArrow.Visible = False
    imPaintLnRowNo = -1
    imLnRowNo = -1
    imLnBoxNo = -1
End Sub

Private Sub cmcShareDropDown_Click()
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            Select Case imNoBoxNo
                Case NORESVADVTINDEX
                    lbcResvAdvt.Visible = Not lbcResvAdvt.Visible
                Case NORESVORDERINDEX
                    lbcResv.Visible = Not lbcResv.Visible
                Case NODATEINDEX
                    plcCalendar.Visible = Not plcCalendar.Visible
            End Select
        Case COMPINDEX   'Competitive
            Select Case imCEBoxNo
                Case CECOMPINDEX
                    lbcComp(0).Visible = Not lbcComp(0).Visible
                Case CECOMPINDEX + 1
                    lbcComp(1).Visible = Not lbcComp(1).Visible
                Case CEEXCLINDEX
                    lbcExcl(0).Visible = Not lbcExcl(0).Visible
                Case CEEXCLINDEX + 1
                    lbcExcl(1).Visible = Not lbcExcl(1).Visible
                Case CEBUSCATINDEX
                    lbcBusCat.Visible = Not lbcBusCat.Visible
            End Select
        Case SPERSONINDEX   'Salesperson
            Select Case imSPBoxNo
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                    lbcSPerson(0).Visible = Not lbcSPerson(0).Visible
                Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
                    If tgSpf.sSubCompany = "Y" Then
                        lbcVehGp6.Visible = Not lbcVehGp6.Visible
                    End If
                Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
                Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            End Select
        Case SHAREINDEX '% Budget
            Select Case imSBBoxNo
                Case SBYCOMPANYINDEX
                    lbcShareBudget(0).Visible = Not lbcShareBudget(0).Visible
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                    lbcShareBudget(1).Visible = Not lbcShareBudget(1).Visible
                Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            End Select
        Case REVSETINDEX 'Revenue set
            Select Case imRSBoxNo
                Case RSREV1INDEX
                    lbcRevSet(0).Visible = Not lbcRevSet(0).Visible
                Case RSREV2INDEX
                    lbcRevSet(1).Visible = Not lbcRevSet(1).Visible
                Case RSREV3INDEX
                    lbcRevSet(2).Visible = Not lbcRevSet(2).Visible
                Case RSREV4INDEX
                    lbcRevSet(3).Visible = Not lbcRevSet(3).Visible
                Case RSREV5INDEX
                    lbcRevSet(4).Visible = Not lbcRevSet(4).Visible
            End Select
        Case DEMOINDEX 'Demo Code
            Select Case imDMBoxNo
                Case DMDEMOINDEX
                    lbcDemo(0).Visible = Not lbcDemo(0).Visible
                Case DMDEMOINDEX + 2
                    lbcDemo(1).Visible = Not lbcDemo(1).Visible
                Case DMDEMOINDEX + 4
                    lbcDemo(2).Visible = Not lbcDemo(2).Visible
                Case DMDEMOINDEX + 6
                    lbcDemo(3).Visible = Not lbcDemo(3).Visible
            End Select
        Case TRADEINDEX '% Trade
    End Select
    edcShareDropDown.SelStart = 0
    edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
    edcShareDropDown.SetFocus
End Sub

Private Sub cmcShareDropDown_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcShtTitle_Click()
    'If Not gWinRoom(igNoExeWinRes(CAVAILEXE)) Then
    '    Exit Sub
    'End If
    Screen.MousePointer = vbHourglass  'Wait
    If plcDemoBar.Visible Then  'Hide demo bar
        cmcDemoBar_Click
    End If
    igAdfCode = tmAdf.iCode
    CShTitle.Show vbModal
    'Screen.MousePointer = vbHourGlass  'Wait
    mShtTitlePop tmAdf.iCode
    'Screen.MousePointer = vbDefault
End Sub

Private Sub cmcShtTitle_GotFocus()
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcShtTitle_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcStepDropDown_Click()
    Select Case imStepBoxNo
        Case STEP1INDEX
            lbcStep(0).Visible = Not lbcStep(0).Visible
        Case STEP2INDEX
            lbcStep(1).Visible = Not lbcStep(1).Visible
        Case STEP3INDEX
            lbcStep(2).Visible = Not lbcStep(2).Visible
    End Select
    edcStepDropDown.SelStart = 0
    edcStepDropDown.SelLength = Len(edcStepDropDown.Text)
    edcStepDropDown.SetFocus
End Sub

Private Sub cmcStepDropDown_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcTerminate_Click(Index As Integer)
    Dim ilPaintLnRowNo As Integer
    Dim ilClf As Integer
    Dim slStr As String
    Dim ilIndex As Integer
    'If Not gWinRoom(igNoExeWinRes(CCANCELEXE)) Then
    '    Exit Sub
    'End If
    'If plcDemoBar.Visible Then  'Hide demo bar
    '    cmcDemoBar_Click
    'End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    mMoveCtrlToRec True
    Screen.MousePointer = vbHourglass
    If Not mMoveLnCtrlToRec(False) Then
        If imHdBoxNo > 0 Then
            mEnableBox imHdBoxNo
        Else
            mLnEnableBox imLnBoxNo
        End If
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    mSetHdDate False, True
    'Screen.MousePointer = vbHourGlass  'Wait
    mAvailPop   'make sure avail list box has latest names
    Screen.MousePointer = vbDefault
    igTerminateReturn = 0   '0=Canceled
    CCancel.Show vbModal
    'Screen.MousePointer = vbDefault    'Default
    If igTerminateReturn = 1 Then
        Screen.MousePointer = vbHourglass
        If Contract.grdCPMBuy.Visible Then
            gResetPkgValues -1
            mSetHdDate False, False  'Init Hot values
            mCntrTotal
            mSetSchStatus smOrigStatus
            mSetCreditInfo
            mSetCommands
        Else
            ilPaintLnRowNo = imPaintLnRowNo
            imPaintLnRowNo = -1
            imLnChg = True
            imComputeReq = True
            pbcLine.Cls
            pbcLnTotal.Cls
            pbcLnDates.Cls
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                If (mGetLineType(ilClf + 1) <> "H") Then    'And (tgUrf(0).sUseComputeCMC <> "I") Then
                    mLnTotals ilClf + 1, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
                    mGetLnPriceInfo ilClf + 1, slStr, imLnTotalType, PRICEINDEX     'Formats Price within Show
                End If
            Next ilClf
            mSetHdDate False, False  'Init Hot values
            ilIndex = imStep1Index
            imStep1Index = 1
            mInitLnShow
            imStep1Index = ilIndex
            mSetCommands
            mCntrTotal
            pbcLine_Paint
            mSetSchStatus smOrigStatus
            mSetCreditInfo
            mSetCommands
            imPaintLnRowNo = ilPaintLnRowNo
        End If
        Screen.MousePointer = vbDefault
    Else
        mSetHdDate False, False  'Init Hot values
        mCntrTotal
        mSetSchStatus smOrigStatus
    End If
End Sub

Private Sub cmcTerminate_GotFocus(Index As Integer)
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTTERM
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcTerminate_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Public Sub cmcUndo_Click()
    Dim ilRet As Integer    'Return status
    Dim ilLoop As Integer   'For loop control parameter
    Dim ilIndex As Integer
    Dim ilSbfRet As Integer
    Dim slStr As String
    Dim slMess As String
    Dim ilCntRevNo As Integer
    Dim ilSvFreezeState As Integer

    If imStep1Index > 1 Then
        slMess = "Undo changes to " & edcCntrNo.Text
    Else
        If (sgCntrScreen <> "Orders") Then
            slMess = "Undo Creation of Proposal"
        Else
            slMess = "Undo New Order"
        End If
    End If
    ilRet = MsgBox(slMess, vbYesNo + vbQuestion, "Undo")
    If imUndoSelection <> -1 Then
        imUndoSelection = ilRet
        Exit Sub
    End If
    imUndoSelection = -1
    If ilRet = vbNo Then
        Exit Sub
    End If

    ilSvFreezeState = igFreezeState
    igFreezeState = 0
    If plcDemoBar.Visible Then  'Hide demo bar
        cmcDemoBar_Click
    End If
    If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
        lacAudTotals.ForeColor = BLACK
        lacAudTotals.Caption = "GRP: GrImp: CPP: CPM:"
    Else
        lacAudTotals.ForeColor = BLACK
        lacAudTotals.Caption = "Click to Compute->GRP: GrImp: CPP: CPM:"
    End If
    '12/11/19
    lacAudTotals_Click
    pbcHeader.Cls
    pbcLnTotal.Cls
    pbcLnDates.Cls
    pbcLine.Cls
    mPaintHdTitle
    mPaintLnTitle
    mPaintLnDates
    mPaintLnTotal
    imLnChg = False
    imGameInvChg = False
    imNTRChg = False
    imCPMChg = False
    '10910
    bgContractAttachments_Changed = False
    mClearCPMBuyGrid
    
    imComputeReq = False
    'TODO REMOVE THIS VARIABLE!
    ilIndex = imStep3Index
    ReDim tgDelClf(0 To 0) As CLFLIST
    'TODO what is imstep3index testing? I see set to -2  When I come in here with contract #, it's 0
    If (ilIndex >= 0) And (imStep1Index > 1) Then   'Or ((ilIndex >= 0) And (imStep1Index = 1) And (UBound(tgClfCntr) <= LBound(tgClfCntr))) Then
        Screen.MousePointer = vbHourglass  'Wait
        ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
        If Not mReadRec(ilIndex) Then
            igFreezeState = ilSvFreezeState
            'GoTo cmcUndoErr
            Screen.MousePointer = vbDefault
            'cmcCancel_Click
            imStepBoxNo = -1
            pbcStepSTab.SetFocus
            Exit Sub
        End If
        If Not mReadClfCffRec() Then
            igFreezeState = ilSvFreezeState
            'GoTo cmcUndoErr
            Screen.MousePointer = vbDefault
            'cmcCancel_Click
            imStepBoxNo = -1
            pbcStepSTab.SetFocus
            Exit Sub
        End If
        If imStep1Index = 1 Then    'Model new order
            tgChfCntr.lCntrNo = 0
            tgChfCntr.iCntRevNo = 0
            tgChfCntr.iExtRevNo = 0
            tgChfCntr.iPropVer = 1
            tgChfCntr.lCxfCode = 0
            tgChfCntr.lCxfChgR = 0
            tgChfCntr.lCxfInt = 0
            tgChfCntr.lCxfMerch = 0
            tgChfCntr.iMerchPct = 0
            tgChfCntr.lCxfProm = 0
            tgChfCntr.iPromoPct = 0
            tgChfCntr.lCxfCanc = 0
            tgChfCntr.lSifCode = 0
            '10967 but it doesn't do anything
            tgChfCntr.iAdServDlvyStatus = 0
            tgChfCntr.iAvfCode = 0 'for boostr
            lmChfRecPos = 0
            lmCntrChfCode = 0
            If sgCntrScreen = "Orders" Then
                tgChfCntr.sStatus = "N"
            Else
                tgChfCntr.sStatus = "W"
            End If
        ElseIf (sgCntrScreen = "Orders") And (imStep1Index = 2) Then
            If tgChfCntr.sStatus = "O" Then
                tgChfCntr.sStatus = "N"
            ElseIf tgChfCntr.sStatus = "H" Then
                tgChfCntr.sStatus = "G"
            End If
        ElseIf (sgCntrScreen <> "Orders") And (imStep1Index = 4) Then
            If tgChfCntr.sStatus = "O" Then
                tgChfCntr.sStatus = "W"
            End If
        End If
            'imStep3Index = -1  'Don't set because of undo
        '4/3/07:  Reset status
        If (sgCntrScreen <> "Orders") And ((smOrigStatus = "G") Or (smOrigStatus = "N")) Then
            ilCntRevNo = tgChfCntr.iCntRevNo
            tgChfCntr.sStatus = "C"
            smOrigStatus = tgChfCntr.sStatus    'Save for erase test and mSaveRec
            If tgChfCntr.iCntRevNo <= 0 Then
                tgChfCntr.iCntRevNo = 1
            End If
        End If
        mStatusPop tgChfCntr.sStatus, tgChfCntr.iCntRevNo, imStep1Map()
        mMoveHdRecToCtrl DATEINDEX, tmChf, tmEff, tmAdf, tmAgf, tmVsf, tmRcf, imTerminate
        mMoveLnRecToCtrl imTerminate, tmRegionCode()
        For ilLoop = imLBCTCtrls To UBound(tmHdCtrls) Step 1
            If ilLoop = MERCHINDEX Then
                slStr = smComment(0)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = PROMOINDEX Then
                slStr = smComment(1)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = INTCOMMINDEX Then
                slStr = smComment(2)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = CANCLAUSEINDEX Then
                slStr = smComment(3)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = CHGREASONINDEX Then
                slStr = smComment(4)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = OTHERCOMMINDEX Then
                slStr = smComment(5)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = STATUSINDEX Then
                If (ilRet = 0) And (lbcStatus.ListIndex < 0) And (sgCntrScreen <> "Orders") And ((imStep1Index = 1) Or (imStep1Index = 4)) Then
                    imChgMode = True
                    lbcStatus.ListIndex = 0
                    imChgMode = True
                ElseIf (ilRet = 0) And (lbcStatus.ListIndex < 0) And (sgCntrScreen = "Orders") And ((imStep1Index = 1) Or (imStep1Index = 2)) Then
                    imChgMode = True
                    lbcStatus.ListIndex = 1
                    imChgMode = True
                End If
                'mSetShow ilLoop  'Set show strings
                If smOrigStatus = "" Then
                    mSetShow ilLoop  'Set show strings
                Else
                    If (sgCntrScreen = "Orders") Then
                        If smOrigStatus = "G" Then
                            slStr = "Approved Hold"
                        ElseIf smOrigStatus = "H" Then
                            slStr = "Hold"
                        ElseIf smOrigStatus = "N" Then
                            slStr = "Approved Order"
                        ElseIf smOrigStatus = "W" Then
                            If tgChfCntr.iCntRevNo > 0 Then
                                slStr = "Rev Working"
                            Else
                                slStr = "Working Proposal"
                            End If
                        ElseIf smOrigStatus = "C" Then
                            If tgChfCntr.iCntRevNo > 0 Then
                                slStr = "Rev Completed"
                            Else
                                slStr = "Completed Proposal"
                            End If
                        ElseIf smOrigStatus = "I" Then
                            If tgChfCntr.iCntRevNo > 0 Then
                                slStr = "Rev Unapproved"
                            Else
                                slStr = "Unapproved Proposal"
                            End If
                        Else
                            slStr = "Order"
                        End If
                    Else
                        If smOrigStatus = "G" Then
                            slStr = "Approved Hold"
                        ElseIf smOrigStatus = "H" Then
                            slStr = "Hold"
                        ElseIf smOrigStatus = "N" Then
                            slStr = "Approved Order"
                        ElseIf smOrigStatus = "O" Then
                            slStr = "Order"
                        ElseIf smOrigStatus = "D" Then
                            slStr = "Rejected"
                        ElseIf smOrigStatus = "W" Then
                            If tgChfCntr.iCntRevNo > 0 Then
                                slStr = "Rev Working"
                            Else
                                slStr = "Working Proposal"
                            End If
                        ElseIf smOrigStatus = "C" Then
                            If tgChfCntr.iCntRevNo > 0 Then
                                slStr = "Rev Completed"
                            Else
                                slStr = "Completed Proposal"
                            End If
                        ElseIf smOrigStatus = "I" Then
                            If tgChfCntr.iCntRevNo > 0 Then
                                slStr = "Rev Unapproved"
                            Else
                                slStr = "Unapproved Proposal"
                            End If
                        End If
                    End If
                    '4/3/07
                    If (sgCntrScreen <> "Orders") And ((smOrigStatus = "G") Or (smOrigStatus = "N")) Then
                        slStr = "Rev Completed"
                        tgChfCntr.iCntRevNo = ilCntRevNo
                    End If
                    gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
                End If
            ElseIf ilLoop = REVNOINDEX Then
                slStr = edcRevNo.Text
                If ((sgCntrScreen = "Orders") And (imStep1Index < 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4)) Then
                    slStr = Trim$(str$(tgChfCntr.iCntRevNo)) & "-" & slStr
                End If
                If (slStr = "0") Or (slStr = "0-0") Then
                    slStr = ""
                End If
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = GUARINDEX Then
                slStr = smHdSave(2)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = GROSSINDEX Then
                slStr = smHdSave(1)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            ElseIf ilLoop = PRODTAGINDEX Then
                slStr = smHdSave(3)
                gSetShow pbcHeader, slStr, tmHdCtrls(ilLoop)
            Else
                mSetShow ilLoop  'Set show strings
            End If
        Next ilLoop
        mInitDmShow
        mInitCEShow tmCECtrls()
        mInitSPShow
        mInitSBShow
        mInitRSShow
        mInitPTShow
        mInitNoShow
        mInitLnShow
        pbcHeader_Paint
        pbcLine_Paint
        ilSbfRet = mReadSbfRec(hmSbf, hmRvf, hmPhf, imStep1Index)
        ilSbfRet = mReadMultiMediaRec(hmMsf, hmMgf, hmCxf, imStep1Index)
        udcCBill.Action 4
        udcCBill.Action 2
        udcCGameInv.Action 4
        udcCGameInv.Action 2
        udcCDigital.Action 4
        udcCDigital.Action 2
        mPkgTotal
        mCntrTotal
        mSetSchStatus smOrigStatus
        imLnChg = False 'Ignore setting of demo book for a line (mBuildWkInfo sets flag if demo different)
        imGameInvChg = False
        imNTRChg = False
        imCPMChg = False
        '10910
        bgContractAttachments_Changed = False
        imComputeReq = False
        imChgMode = False
        Screen.MousePointer = vbDefault
        mSetCommands
        imHdBoxNo = -1
        igFreezeState = ilSvFreezeState
        'pbcHdSTab.SetFocus
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    '10833 Add test for tgIBSbf
    'If ((imStep1Index = 0) Or (imStep1Index = 1)) And (UBound(tgClfCntr) > LBound(tgClfCntr)) Then
    If (imStep1Index = 0 Or imStep1Index = 1) And (UBound(tgClfCntr) > LBound(tgClfCntr) Or UBound(tgIBSbf) > LBound(tgIBSbf)) Then
        mUndoLines
        '10833 clear screens
        'header won't paint without this first
        pbcHeader.Cls
        udcCBill.Action 4
        udcCBill.Action 2
        'do not clear header per Jason
'        'clear merch and promo in header
'        smComment(0) = ""
'        smComment(1) = ""
'        gSetShow pbcHeader, "", tmHdCtrls(MERCHINDEX)
'        gSetShow pbcHeader, "", tmHdCtrls(PROMOINDEX)
'        'write the cleared items
        pbcHeader_Paint
        'think I need this to be thorough
        mPkgTotal
        mCntrTotal
        mSetCommands
        '10833 end
        igFreezeState = ilSvFreezeState
        Exit Sub
    End If
    If imStep1Index = 1 Then
        imStep1Index = -1
    End If
    imChgMode = False
    edcPBDate(0).Text = ""
    edcPBDate(1).Text = ""
    edcRBWks(2).Text = ""
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imSelectDelay = False
    If imStep1Index <> -1 Then
        mSelectChange
    Else
        mSetCommands
    End If
        'mSetCommands
    '    lbcStep(2).SetFocus
    'Else
        'mSetCommands
        'cbcFilter.SetFocus
    igFreezeState = ilSvFreezeState
    pbcStepSTab.SetFocus
    'End If
    'mCntrTotal
    'mSetSchStatus
    Exit Sub
End Sub

Private Sub cmcUndo_GotFocus()
    If imHdBoxNo = CNTRNOINDEX Then 'Avoid testing of the number
        lbcResvAdvt.Visible = False
        lbcResv.Visible = False
        cmcShareDropDown.Visible = False
        edcCntrNo.Visible = False  'Set visibility
        edcShareDropDown.Visible = False  'Set visibility
        pbcNumber.Visible = False
        plcCalendar.Visible = False
        plcShare.Visible = False
        imHdBoxNo = -1
        imNoBoxNo = -1
    End If
'    If cmcPower.Caption = "Schedule &Lines" Then
'        cmcPower_Click
'    End If
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTREVERT
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcUndo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcUpdate_Click()
    Dim ilRet As Integer
    Dim slCntrNo As String
    Dim slRevNo As String
    Dim slPropNo As String
    Dim slStatus As String
    Dim ilLoop As Integer
    Dim ilViewMode As Integer
    If Not imUpdateAllowed Then
        Exit Sub
    End If
    If plcDemoBar.Visible Then  'Hide demo bar
        cmcDemoBar_Click
    End If
    If mSaveRecChg(False) = False Then
        If imTerminate Then
            cmcCancel_Click
            Exit Sub
        End If
        If imHdBoxNo > 0 Then
            mEnableBox imHdBoxNo
        Else
            If imLnBoxNo >= imLBCTCtrls And (imLnBoxNo <= UBound(tmLnCtrls)) Then
                mSetRowVisible
                mLnEnableBox imLnBoxNo
            End If
        End If
        Exit Sub
    End If
    'ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
    imHdBoxNo = -1
    ReDim tgDelClf(0 To 0) As CLFLIST
    'Force into change mode
    slCntrNo = Trim$(str$(tgChfCntr.lCntrNo))
    slRevNo = Trim$(str$(tgChfCntr.iCntRevNo))
    slPropNo = Trim$(str$(tgChfCntr.iPropVer))
    slStatus = tgChfCntr.sStatus
    pbcSelect.Cls
    imSelectDelay = False
    mClearCtrlFields
    pbcSaveStop.Enabled = True
    lbcStep(0).ListIndex = -1
    imStepBoxNo = 1
    ilViewMode = False
    'If Not igUsingTimeStamp Then
        'lbcStep(0).ListIndex = 0
        'mStepSetShow 1
    If Not imSaveStay Then
        If cmcMkt.Caption = "&Alert" Then
            imReturnToAlerts = True
            mTerminate
            Exit Sub
        End If
        'TTP 10937 - Contract Dashboard: new screen to show contract header information
        If cmcMkt.Caption = "&Dash" Then
            imReturnToDashboard = True
            mTerminate
            Exit Sub
        End If
        mStepEnableBox imStepBoxNo
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    'End If
    If sgCntrScreen = "Orders" Then
            lbcStep(0).ListIndex = 2
    Else
        If (slStatus = "G") Or (slStatus = "H") Then
            For ilLoop = 0 To lbcStep(0).ListCount - 1 Step 1
                If StrComp(Trim$(lbcStep(0).List(ilLoop)), "View", 1) = 0 Then
                    lbcStep(0).ListIndex = ilLoop
                    ilViewMode = True
                    Exit For
                End If
            Next ilLoop
        ElseIf (slStatus = "N") Or (slStatus = "O") Then
            For ilLoop = 0 To lbcStep(0).ListCount - 1 Step 1
                If StrComp(Trim$(lbcStep(0).List(ilLoop)), "View", 1) = 0 Then
                    lbcStep(0).ListIndex = ilLoop
                    ilViewMode = True
                    Exit For
                End If
            Next ilLoop
        ElseIf (slStatus = "D") Then
            For ilLoop = 0 To lbcStep(0).ListCount - 1 Step 1
                If StrComp(Trim$(lbcStep(0).List(ilLoop)), "View", 1) = 0 Then
                    lbcStep(0).ListIndex = ilLoop
                    ilViewMode = True
                    Exit For
                End If
            Next ilLoop
        ElseIf imStep1Index = 4 Then
            lbcStep(0).ListIndex = 4
        Else
            lbcStep(0).ListIndex = 2
        End If
    End If
    mStepSetShow 1
    imStep2Index = -1
    imStepBoxNo = 2
    mStep2IndexPop
    lbcStep(1).ListIndex = 0    'by number
    mStepSetShow 2
    pbcSelect_Paint
    'Delay to help with timing problem and number staying
    For ilLoop = 1 To 10 Step 1
        DoEvents
    Next ilLoop
    imStepBoxNo = 3
    If sgCntrScreen = "Orders" Then
        smContrNoForSave = slCntrNo '& " R" & slRevNo
    Else
        If lbcStep(0).ListIndex = 4 Then
            smContrNoForSave = slCntrNo '& " V" & slPropNo'& " R" & slRevNo & " V" & slPropNo
        Else
            smContrNoForSave = slCntrNo & " V" & slPropNo '& " R" & slRevNo & " V" & slPropNo
        End If
    End If
    mStepEnableBox imStepBoxNo
    Screen.MousePointer = vbDefault
End Sub

Private Sub cmcUpdate_GotFocus()
    mAllSetShow 0
    'gShowHelpMess tmChfHelp(), CHFBTUPDATE
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcUpdate_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub edcCntrNo_Change()
    mSetChg imHdBoxNo
End Sub

Private Sub edcCntrNo_GotFocus()
    edcCntrNo.Text = Trim$(edcCntrNo.Text)  'Remove any blanks-one inserted by mOKID to avoid number assigning
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcCntrNo_KeyPress(KeyAscii As Integer)
    Dim slStr As String
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
    slStr = edcCntrNo.Text
    slStr = Left$(slStr, edcCntrNo.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcCntrNo.SelStart - edcCntrNo.SelLength)
    If gCompNumberStr(slStr, "999999999") > 0 Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcCntrNo_KeyUp(KeyCode As Integer, Shift As Integer)
    If ((Shift And vbCtrlMask) > 0) And (KeyCode >= KEYLEFT) And (KeyCode <= KeyDown) Then
        imDirProcess = KeyCode 'mDirection 0
        pbcHdTab.SetFocus
        Exit Sub
    End If
End Sub

Private Sub edcComment_Change()
    'Set smComment so second time into pbsHdTab or pbcHdSTab it will be ignored
    Select Case imHdBoxNo
        Case MERCHINDEX  'Merch
            smComment(0) = edcComment.Text
        Case PROMOINDEX
            smComment(1) = edcComment.Text
        Case INTCOMMINDEX
            smComment(2) = edcComment.Text
        Case CANCLAUSEINDEX
            smComment(3) = edcComment.Text
        Case CHGREASONINDEX
            smComment(4) = edcComment.Text
        Case OTHERCOMMINDEX
            smComment(5) = edcComment.Text
    End Select
    mSetChg imHdBoxNo
End Sub

Private Sub edcComment_GotFocus()
'    gCtrlGotFocus ActiveControl    'Don't highlight text area
    'Place Cursor at end
    edcComment.SelStart = Len(edcComment.Text)
End Sub

Private Sub edcComment_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcComment_KeyUp(KeyCode As Integer, Shift As Integer)
    If ((Shift And vbCtrlMask) > 0) And (KeyCode >= KEYLEFT) And (KeyCode <= KeyDown) Then
        imDirProcess = KeyCode 'mDirection 0
        pbcHdTab.SetFocus
        Exit Sub
    End If
End Sub

Private Sub edcDBBook_Change()
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilDnfCode As Integer
    Dim ilOldDnfCode As Integer
    Dim ilClf As Integer
    Dim ilVefCode As Integer
    Dim ilVpfIndex As Integer
    Dim ilTerminate As Integer
    Dim slSvText As String
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slLineType As String
    Dim slCode As String
    Screen.MousePointer = vbHourglass
    imLbcArrowSetting = True
    gMatchLookAhead edcDBBook, lbcDBBook, imBSMode, imComboBoxIndex
    If imInResearch Then
        Exit Sub
    End If
    If imInBuildWkInfo Then
        Exit Sub
    End If
    If imInSummary Then
        Exit Sub
    End If
    If imLnRowNo <= 0 Then
        Exit Sub
    End If
    slSvText = edcDBBook.Text
    ilOldDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode
    If lbcDBBook.ListIndex >= 0 Then
        slNameCode = tgBookNameCode(lbcDBBook.ListIndex).sKey  'Traffic!lbcBookNameCode.List(lbcDBBook.ListIndex)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilDnfCode = Val(slCode)
    Else
        ilDnfCode = -1
    End If
    If (tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode <> ilDnfCode) Then
        tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode = ilDnfCode
        tgClfCntr(imLnRowNo - 1).lPop = 0
        tgClfCntr(imLnRowNo - 1).iResearch = False
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
    End If
    mBuildWkInfo True, True, False
    
    '5/11/06:  Jim- Always ask
    '5/12/06:  Dick- Changed to only ask if other lines reference the book
    imAskBookQ = False
    If (ilOldDnfCode > 0) And (tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode <> ilOldDnfCode) Then
        ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
        If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
            ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
        Else
            ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
        End If
        ilStartRow = ilStartRow - 1
        ilEndRow = ilEndRow - 1
        For ilClf = ilStartRow To ilEndRow Step 1
            If (tgClfCntr(ilClf).ClfRec.iDnfCode = ilOldDnfCode) Then
                slLineType = mGetLineType(ilClf + 1, True)
                If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                    imAskBookQ = True
                End If
                Exit For
            End If
        Next ilClf
    End If
    If imAskBookQ Then
        ilRet = MsgBox("Apply New Book to All Applicable Lines", vbYesNo + vbDefaultButton2 + vbQuestion, "Books")
        If ilRet = vbYes Then
            'ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
            'If smLnSave(1, UBound(smLnSave, 2)) = "" Then
            '    ilEndRow = UBound(smLnSave, 2) - 1
            'Else
            '    ilEndRow = UBound(smLnSave, 2)
            'End If
            'ilStartRow = ilStartRow - 1
            'ilEndRow = ilEndRow - 1
            'For ilClf = ilStartRow To ilEndRow Step 1
            '    If (ilOldDnfCode <> 0) And (tgClfCntr(ilClf).ClfRec.iDnfCode = ilOldDnfCode) Then
            '        mCVehOptIndex ilClf + 1, ilVefCode, ilVpfIndex, ilTerminate
            '        If ilVpfIndex <> -1 Then
            '            tmDrfSrchKey.iDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode
            '            tmDrfSrchKey.sDemoDataType = "D"    'Demo Data
            '            tmDrfSrchKey.iMnfSocEco = 0 'ilMnfSocEco
            '            tmDrfSrchKey.iVefCode = ilVefCode
            '            tmDrfSrchKey.sInfoType = ""        'Daypart
            '            tmDrfSrchKey.iRdfCode = 0
            '            ilRet = btrGetGreaterOrEqual(hmDrf, tmDrf, imDrfRecLen, tmDrfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            '            If (ilRet = BTRV_ERR_NONE) And (tmDrf.iDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode) And (tmDrf.iVefCode = ilVefCode) Then
            '                tgClfCntr(ilClf).ClfRec.iDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode
            '                tgClfCntr(ilClf).lPop = 0
            '                tgClfCntr(ilClf).iResearch = False
            '                imLnChg = True
            '            Else
            '                tmDrfSrchKey.iDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode
            '                tmDrfSrchKey.sDemoDataType = "M"    'Demo Data
            '                tmDrfSrchKey.iMnfSocEco = 0 'ilMnfSocEco
            '                tmDrfSrchKey.iVefCode = ilVefCode
            '                tmDrfSrchKey.sInfoType = ""        'Daypart
            '                tmDrfSrchKey.iRdfCode = 0
            '                ilRet = btrGetGreaterOrEqual(hmDrf, tmDrf, imDrfRecLen, tmDrfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            '                If (ilRet = BTRV_ERR_NONE) And (tmDrf.iDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode) And (tmDrf.iVefCode = ilVefCode) Then
            '                    tgClfCntr(ilClf).ClfRec.iDnfCode = tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode
            '                    tgClfCntr(ilClf).lPop = 0
            '                    tgClfCntr(ilClf).iResearch = False
            '                    imLnChg = True
            '                End If
            '            End If
            '        End If
            '    End If
            'Next ilClf
            mSetDnfCode ilOldDnfCode
        End If
    End If
    If imDBTotals < 5 Then
        pbcDemoBar(0).Cls
        pbcDemoBar(1).Cls
        'tgClfCntr(imLnRowNo - 1).iResearch = False
        'mBuildWkInfo True, True, False
        mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
        pbcDemoBar_Paint 0
        pbcDemoBar_Paint 1
    Else
        'mBuildWkInfo True, True, False
        pbcDemoBar(1).Cls
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
        mSummary
        pbcDemoBar_Paint 1
        If imDBTotals = 5 Then
            pbcDemoBar_Paint 2
        Else
            pbcDemoBar_Paint 3
        End If
    End If
    imInResearch = True
    edcDBBook.Text = slSvText
    imInResearch = False
    mSetCommands
    Screen.MousePointer = vbDefault
End Sub

Private Sub edcDBBook_GotFocus()
    lbcDBDisplay.Visible = False
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
    imComboBoxIndex = lbcDBBook.ListIndex
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcDBBook_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDBBook_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcDBBook.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcDBBook_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        gProcessArrowKey Shift, KeyCode, lbcDBBook, imLbcArrowSetting
        edcDBBook.SelStart = 0
        edcDBBook.SelLength = Len(edcDBBook.Text)
    End If
End Sub

Private Sub edcDBBook_LostFocus()
    imAskBookQ = False
End Sub

Private Sub edcDBDemo_Change()
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilMnfDemo As Integer
    Dim ilClf As Integer

    Screen.MousePointer = vbHourglass
    imLbcArrowSetting = True
    gMatchLookAhead edcDBDemo, lbcDBDemo, imBSMode, imComboBoxIndex
    If imInResearch Then
        Exit Sub
    End If
    If imInSummary Then
        Exit Sub
    End If
    If imLnRowNo <= 0 Then
        Exit Sub
    End If
    '12/11/19
    If plcDemoBar.Visible = False Then
        Exit Sub
    End If
    ilMnfDemo = tgClfCntr(imLnRowNo - 1).ClfRec.iMnfDemo
    mBuildWkInfo True, True, False
    ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
    If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
    Else
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
    End If
    ilStartRow = ilStartRow - 1
    ilEndRow = ilEndRow - 1
    For ilClf = ilStartRow To ilEndRow Step 1
        If (ilMnfDemo <> 0) And (tgClfCntr(ilClf).ClfRec.iMnfDemo = ilMnfDemo) Then
            tgClfCntr(ilClf).ClfRec.iMnfDemo = tgClfCntr(imLnRowNo - 1).ClfRec.iMnfDemo
            tgClfCntr(ilClf).iResearch = False
        End If
    Next ilClf
    If imDBTotals < 5 Then
        pbcDemoBar(0).Cls
        pbcDemoBar(1).Cls
        'tgClfCntr(imLnRowNo - 1).iResearch = False
        'mBuildWkInfo True, False, False
        mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
        pbcDemoBar_Paint 0
        pbcDemoBar_Paint 1
    Else
        'mBuildWkInfo True, False, False
        pbcDemoBar(1).Cls
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
        mSummary
        pbcDemoBar_Paint 1
        If imDBTotals = 5 Then
            pbcDemoBar_Paint 2
        Else
            pbcDemoBar_Paint 3
        End If
    End If
    mSetCommands
    Screen.MousePointer = vbDefault
End Sub

Private Sub edcDBDemo_GotFocus()
    lbcDBDisplay.Visible = False
    lbcDBBook.Visible = False
    lbcDBSocEco.Visible = False
    imComboBoxIndex = lbcDBDemo.ListIndex
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcDBDemo_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDBDemo_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcDBDemo.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcDBDemo_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        gProcessArrowKey Shift, KeyCode, lbcDBDemo, imLbcArrowSetting
        edcDBDemo.SelStart = 0
        edcDBDemo.SelLength = Len(edcDBDemo.Text)
    End If
End Sub

Private Sub edcDBDisplay_Change()
    Dim slStr As String
    Dim ilDBTotals As Integer
    Dim slLineType As String
    Dim ilClf As Integer
    Dim ilFound As Integer
    imLbcArrowSetting = True
    ilDBTotals = imDBTotals
    gMatchLookAhead edcDBDisplay, lbcDBDisplay, imBSMode, imComboBoxIndex
    slStr = edcDBDisplay.Text
    If slStr = "Line Totals" Then
        imDBTotals = 0
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(0).height - 15, pbcDemoBar(1).Width, 1590
        pbcDemoBar(0).Visible = True
        pbcDemoBar(2).Visible = False
        pbcDemoBar(3).Visible = False
        pbcSumType(0).Visible = False
        vbcSummary.Visible = False
    ElseIf slStr = "Line Summary" Then
        imDBTotals = 5
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(2).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(2).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(3).Visible = False
        pbcSumType(0).Visible = True
        vbcSummary.Visible = True
    ElseIf slStr = "Week Summary" Then
        imDBTotals = 6
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(3).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(3).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(2).Visible = False
        pbcSumType(0).Visible = False
        vbcSummary.Visible = True
    ElseIf slStr = "Quarter Summary" Then
        imDBTotals = 7
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(3).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(3).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(2).Visible = False
        pbcSumType(0).Visible = False
        vbcSummary.Visible = True
    ElseIf slStr = "Vehicle Summary" Then
        imDBTotals = 8
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(3).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(3).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(2).Visible = False
        pbcSumType(0).Visible = True
        vbcSummary.Visible = True
    ElseIf slStr = "Daypart Summary" Then
        imDBTotals = 9
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(3).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(3).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(2).Visible = False
        pbcSumType(0).Visible = True
        vbcSummary.Visible = True
    ElseIf slStr = "Vehicle Difference" Then
        imDBTotals = 10
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(3).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(3).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(2).Visible = False
        pbcSumType(0).Visible = True
        vbcSummary.Visible = True
    ElseIf slStr = "Daypart Group" Then
        imDBTotals = 9
        pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(3).height - 15, pbcDemoBar(1).Width, 420
        pbcDemoBar(3).Visible = True
        pbcDemoBar(0).Visible = False
        pbcDemoBar(2).Visible = False
        pbcSumType(0).Visible = True
        vbcSummary.Visible = True
    End If
    If (plcDemoBar.Visible) And (imDBTotals >= 5) And (imDBTotals <= 9) Then  'Hide demo bar
        imcShare(0).Picture = IconTraf!imcSpecPrt.Picture
    Else
        imcShare(0).Picture = IconTraf!imcPrinter.Picture
    End If
    lbcDBDisplay.height = gListBoxHeight(lbcDBDisplay.ListCount, 7)
    If imDBTotals < 5 Then
        vbcSummary.LargeChange = 6
        If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12) Then
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If pbcLineArrow.Visible Then
                    pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
            Else
                imDBBoxNo = imLnBoxNo - WKSPOTSINDEX + 1
                imDBRowNo = 1
                edcDBValue.Width = tmDBSCCtrls(imDBBoxNo).fBoxW
                edcDBValue.MaxLength = 3
                gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBSCCtrls(imDBBoxNo).fBoxX, tmDBSCCtrls(imDBBoxNo).fBoxY
                edcDBValue.Text = edcLNDropDown.Text    'slStr'Trim$(smLnSave(6, imLnRowNo))
                edcDBValue.Visible = True  'Set visibility
                'edcLnDropDown.SelStart = 0
                'edcLnDropDown.SelLength = Len(edcLnDropDown.Text)
                'edcLnDropDown.SetFocus
            End If
        Else
            edcDBValue.Visible = False
            pbcDBLnDaily.Visible = False
        End If
    Else
        vbcSummary.LargeChange = 5
        edcDBValue.Visible = False
        pbcDBLnDaily.Visible = False
    End If
    ilFound = False
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        slLineType = mGetLineType(ilClf + 1)
        If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
            ilFound = True
            Exit For
        End If
    Next ilClf
    If Not ilFound Then
        pbcSumType(0).Visible = False
        imSumType = 0
    End If
    pbcSumType(0).Move pbcDemoBar(3).Left + 15, pbcDemoBar(3).Top + pbcDemoBar(3).height - pbcSumType(0).height ' - 30
    If imDGChgMode Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    If (imDBTotals < 5) And (ilDBTotals < 5) Then
        pbcDemoBar(0).Cls
        'mGetResearchTotals False
        mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
        pbcDemoBar_Paint 0
    ElseIf (imDBTotals >= 5) And (ilDBTotals < 5) Then
        pbcDemoBar(1).Cls
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
        mSummary
        pbcDemoBar_Paint 1
        If imDBTotals = 5 Then
            pbcDemoBar_Paint 2
        Else
            pbcDemoBar_Paint 3
        End If
    ElseIf (imDBTotals < 5) And (ilDBTotals >= 5) Then
        pbcDemoBar(1).Cls
        'mGetResearchTotals False
        mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
        pbcDemoBar_Paint 0
        pbcDemoBar_Paint 1
    Else
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
        mSummary
        'DoEvents
        If imDBTotals = 5 Then
            pbcDemoBar_Paint 2
        Else
            pbcDemoBar_Paint 3
        End If
    End If
    'DoEvents
    Screen.MousePointer = vbDefault
    'pbcClickFocus.SetFocus
End Sub

Private Sub edcDBDisplay_GotFocus()
    lbcDBBook.Visible = False
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
    imComboBoxIndex = lbcDBDisplay.ListIndex
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcDBDisplay_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDBDisplay_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcDBDisplay.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcDBDisplay_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        gProcessArrowKey Shift, KeyCode, lbcDBDisplay, imLbcArrowSetting
        edcDBDisplay.SelStart = 0
        edcDBDisplay.SelLength = Len(edcDBDisplay.Text)
    End If
End Sub

Private Sub edcDBSocEco_Change()
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilClf As Integer
    Screen.MousePointer = vbHourglass
    imLbcArrowSetting = True
    gMatchLookAhead edcDBSocEco, lbcDBSocEco, imBSMode, imComboBoxIndex
    If imInResearch Then
        Exit Sub
    End If
    If imInSummary Then
        Exit Sub
    End If
    ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
    If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
    Else
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
    End If
    ilStartRow = ilStartRow - 1
    ilEndRow = ilEndRow - 1
    For ilClf = ilStartRow To ilEndRow Step 1
        tgClfCntr(ilClf).iResearch = False
    Next ilClf
    If imDBTotals < 5 Then
        pbcDemoBar(0).Cls
        pbcDemoBar(1).Cls
        'tgClfCntr(imLnRowNo - 1).iResearch = False
        mBuildWkInfo True, False, False
        'mGetResearchTotals False
        mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
        pbcDemoBar_Paint 0
        pbcDemoBar_Paint 1
    Else
        mBuildWkInfo True, False, False
        pbcDemoBar(1).Cls
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
        mSummary
        pbcDemoBar_Paint 1
        If imDBTotals = 5 Then
            pbcDemoBar_Paint 2
        Else
            pbcDemoBar_Paint 3
        End If
    End If
    Screen.MousePointer = vbDefault
End Sub

Private Sub edcDBSocEco_GotFocus()
    lbcDBDisplay.Visible = False
    lbcDBBook.Visible = False
    lbcDBDemo.Visible = False
    imComboBoxIndex = lbcDBSocEco.ListIndex
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcDBSocEco_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDBSocEco_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcDBSocEco.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcDBSocEco_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        gProcessArrowKey Shift, KeyCode, lbcDBSocEco, imLbcArrowSetting
        edcDBSocEco.SelStart = 0
        edcDBSocEco.SelLength = Len(edcDBSocEco.Text)
    End If
End Sub

Private Sub edcDBValue_Change()
    Select Case imDBRowNo
        Case 1  'Spot Count
            edcLNDropDown.Text = edcDBValue.Text
        Case 3  'Price
        Case 5  'Ratio
    End Select
End Sub

Private Sub edcDBValue_GotFocus()
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcDBValue_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDBValue_KeyPress(KeyAscii As Integer)
    Dim ilPos As Integer
    Dim slStr As String
    Dim slMaxValue As String
    
    Select Case imDBRowNo
        Case 1  'Spot Count
            If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Or (KeyAscii = Asc("Q")) Or (KeyAscii = Asc("q")) Or (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
                Exit Sub
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcDBValue.Text
            slStr = Left$(slStr, edcDBValue.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDBValue.SelStart - edcDBValue.SelLength)
            slMaxValue = "999"
            If Trim(smLnSave(18, imLnRowNo)) <> "" Then
                If gCompNumberStr(smLnSave(18, imLnRowNo), "0") <> 0 Then
                    slMaxValue = gDivStr(smLnSave(18, imLnRowNo), "999")
                    If gCompNumberStr(slMaxValue, "999") > 0 Then
                        slMaxValue = "999"
                    End If
                End If
            End If
            If gCompNumberStr(slStr, slMaxValue) > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case 3  'Price
            ilPos = InStr(edcDBValue.SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcDBValue.Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcDBValue.Text
            slStr = Left$(slStr, edcDBValue.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDBValue.SelStart - edcDBValue.SelLength)
            slMaxValue = "9999999.99"
            If Trim(smLnSave(23, imLnRowNo)) <> "" Then
                If gCompNumberStr(smLnSave(23, imLnRowNo), "0") <> 0 Then
                    slMaxValue = gDivStr("21000000", smLnSave(23, imLnRowNo))
                    If gCompNumberStr(slMaxValue, "9999999.99") > 0 Then
                        slMaxValue = "9999999.99"
                    End If
                End If
            End If
            If gCompNumberStr(slStr, slMaxValue) > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case 5  'Ratio
            ilPos = InStr(edcDBValue.SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcDBValue.Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcDBValue.Text
            slStr = Left$(slStr, edcDBValue.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDBValue.SelStart - edcDBValue.SelLength)
            If gCompNumberStr(slStr, "99.99") > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
    End Select
End Sub

Private Sub edcDGDropDown_Change()
    Dim slStr As String
    Dim ilRet As Integer
    Dim slDate As String
    Dim llWkEndDate As Long
    Dim ilNoWks As Integer
    If imDGChgMode Then
        Exit Sub
    End If
    imDGChgMode = True
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        '11/2/19: Moved to CFlight
        ''If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (igFreezeState = 1) And (pbcOVWD(0).Visible) Then
        'If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (pbcOVWD(0).Visible) Then
        '    Exit Sub
        'End If
        'Select Case imDGBoxNo
        '    Case DGSTARTDATEINDEX
        '        slStr = edcDGDropDown.Text
        '        If Not gValidDate(slStr) Then
        '            imDGChgMode = False
        '            mDGSetCommands
        '            Exit Sub
        '        End If
        '        smDGSave(10) = slStr
        '        llWkEndDate = gDateValue(smDGSave(10)) + 7 * Val(smDGSave(1)) - 7
        '        If gValidDate(smDGSave(11)) Then
        '            Do Until gWeekDayLong(llWkEndDate) = gWeekDayStr(smDGSave(11))
        '                llWkEndDate = llWkEndDate + 1
        '            Loop
        '        End If
        '        smDGSave(11) = Format$(llWkEndDate, "m/d/yy")
        '        slDate = gAddDayToDate(smDGSave(11))
        '        gSetShow pbcDGen, slDate, tmDGCtrls(DGENDDATEINDEX)
        '        If (gDateValue(smDGSave(10)) >= lmCalStartDate) And (gDateValue(smDGSave(10)) <= lmCalEndDate) Then
        '            pbcDGen_Paint
        '            mBoxCalDate
        '        Else
        '            pbcDGen.Cls
        '            pbcDGen_Paint
        '            gObtainMonthYear imCalType, smDGSave(10), imCalMonth, imCalYear
        '            pbcCalendar_Paint   'mBoxCalDate called within paint
        '        End If
        '    Case DGENDDATEINDEX
        '        slStr = edcDGDropDown.Text
        '        If gValidDate(slStr) Then
        '            If gDateValue(slStr) < gDateValue(smDGSave(10)) Then
        '                imDGChgMode = False
        '                mDGSetCommands
        '                Exit Sub
        '            End If
        '        Else
        '            imDGChgMode = False
        '            mDGSetCommands
        '            Exit Sub
        '        End If
        '        smDGSave(11) = slStr
        '        ilNoWks = (gDateValue(smDGSave(11)) - gDateValue(smDGSave(10)) + 7) \ 7
        '        smDGSave(1) = Trim$(str$(ilNoWks))
        '        slStr = smDGSave(1)
        '        gSetShow pbcDGen, slStr, tmDGCtrls(DGNOWKSINDEX)
        '        If (gDateValue(smDGSave(11)) >= lmCalStartDate) And (gDateValue(smDGSave(11)) <= lmCalEndDate) Then
        '            pbcDGen_Paint
        '            mBoxCalDate
        '        Else
        '            pbcDGen.Cls
        '            pbcDGen_Paint
        '            gObtainMonthYear imCalType, smDGSave(11), imCalMonth, imCalYear
        '            pbcCalendar_Paint   'mBoxCalDate called within paint
        '        End If
        '    Case DGRUNINDEX
        '        imLbcArrowSetting = True
        '        gMatchLookAhead edcDGDropDown, lbcDGRun, imBSMode, imComboBoxIndex
        '        imLbcArrowSetting = False
        '    Case DGDWPINDEX
        '        imLbcArrowSetting = True
        '        gMatchLookAhead edcDGDropDown, lbcDWP, imBSMode, imComboBoxIndex
        '        If tgSpf.sAllowDailyBuys <> "Y" Then
        '            slStr = edcDGDropDown.Text
         '           If InStr(1, slStr, "Daily", 1) > 0 Then
         '               edcDGDropDown.Text = "Weekly"   'Force to weekly
         '               gMatchLookAhead edcDGDropDown, lbcDWP, imBSMode, imComboBoxIndex
         '           End If
         '       End If
         '       imLbcArrowSetting = False
         '   Case DGPRICEINDEX
         '       imLbcArrowSetting = True
         '       ilRet = gOptionalLookAhead(edcDGDropDown, lbcPriceType(0), imBSMode, slStr)
         '       imLbcArrowSetting = False
         '       If (lbcPriceType(0).ListIndex = 0) Then
         '           If Trim$(edcDGDropDown.Text) > "" Then
         '               If (Left$(edcDGDropDown.Text, 1) < "0") Or (Left$(edcDGDropDown.Text, 1) > "9") Then
         '                   If Left$(edcDGDropDown.Text, 1) <> "." Then
         '                       edcDGDropDown.Text = ""
         '                   End If
        '                End If
        '            End If
        '        End If
        '    Case DGOVSTARTINDEX
        '    Case DGOVENDINDEX

        'End Select
        'mDGSetCommands
    Else
        If imOVType <> 2 Then
            Select Case imOVBoxNo
                Case OVWDINDEX
                Case OVSTARTTIMEINDEX
                Case OVENDTIMEINDEX
                Case OVRANKINDEX
                Case OVBBOPENINDEX
                    imLbcArrowSetting = True
                    gMatchLookAhead edcDGDropDown, lbcBBLen, imBSMode, imComboBoxIndex
                    imLbcArrowSetting = False
                Case OVBBCLOSEINDEX
                    imLbcArrowSetting = True
                    gMatchLookAhead edcDGDropDown, lbcBBLen, imBSMode, imComboBoxIndex
                    imLbcArrowSetting = False
                Case ACT1LINEUPINDEX
            End Select
        Else
            Select Case imOVBoxNo
                Case OV2STARTTIMEINDEX
                Case OV2ENDTIMEINDEX
                Case OV2SPLITINDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDGDropDown, lbcRegion, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcRegion.ListIndex = 0
                    End If
                Case OV2ALLOCATIONINDEX
                Case OV2ACQUISITIONINDEX
            End Select
        End If
    End If
    imDGChgMode = False
End Sub

Private Sub edcDGDropDown_DblClick()
    imDoubleClickName = True    'Double click event foolowed by mouse up
End Sub

Private Sub edcDGDropDown_GotFocus()
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        'Select Case imDGBoxNo
        '    Case DGRUNINDEX
        '        If lbcDGRun.ListCount = 1 Then
        '            lbcDGRun.ListIndex = 0
        '            If imTabDirection = -1 Then  'Right To Left
        '                pbcDGSTab.SetFocus
        '            Else
        '                pbcDGTab.SetFocus
        '            End If
        '            Exit Sub
        '        End If
        'End Select
    End If
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcDGDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDGDropDown_KeyPress(KeyAscii As Integer)
    Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim ilPos As Integer
    Dim slStr As String
    Dim slMaxValue As String

    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        'If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (igFreezeState = 1) And (pbcOVWD(0).Visible) Then
        If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (pbcOVWD(0).Visible) Then
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcDGDropDown.Text
            slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
            slMaxValue = "999"
            If Trim(smLnSave(18, imLnRowNo)) <> "" Then
                If gCompNumberStr(smLnSave(18, imLnRowNo), "0") <> 0 Then
                    slMaxValue = gDivStr("21000000", smLnSave(18, imLnRowNo))
                    If gCompNumberStr(slMaxValue, "999") > 0 Then
                        slMaxValue = "999"
                    End If
                End If
            End If
            If gCompNumberStr(slStr, slMaxValue) > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            Exit Sub
        End If
        Select Case imDGBoxNo
            Case DGSTARTDATEINDEX
                'Filter characters (allow only BackSpace, numbers 0 thru 9
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
            Case DGENDDATEINDEX
                'Filter characters (allow only BackSpace, numbers 0 thru 9
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
            Case DGRUNINDEX
            Case DGDWPINDEX
            Case DGPRICEINDEX
                slStr = edcDGDropDown.Text
                slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
                If (Left$(slStr, 1) < "0") And (Left$(slStr, 1) > "9") Then
                    If (KeyAscii = Asc("R")) Or (KeyAscii = Asc("r")) Then
                        lbcPriceType(0).ListIndex = 1
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
                        lbcPriceType(0).ListIndex = 2
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("N")) Or (KeyAscii = Asc("n")) Then
                        lbcPriceType(0).ListIndex = 3
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("M")) Or (KeyAscii = Asc("m")) Then
                        lbcPriceType(0).ListIndex = 4
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("B")) Or (KeyAscii = Asc("b")) Then
                        lbcPriceType(0).ListIndex = 5
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("S")) Or (KeyAscii = Asc("s")) Then
                        lbcPriceType(0).ListIndex = 6
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Then
                        lbcPriceType(0).ListIndex = 7
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("R")) Or (KeyAscii = Asc("r")) Then
                        lbcPriceType(0).ListIndex = 8
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("D")) Or (KeyAscii = Asc("d")) Then
                        lbcPriceType(0).ListIndex = 9
                        KeyAscii = 0
                        Exit Sub
                    End If
                    Exit Sub
                End If
                imChgMode = True
                lbcPriceType(0).ListIndex = 0
                If Trim$(edcDGDropDown.Text) > "" Then
                    If (Left$(edcDGDropDown.Text, 1) < "0") Or (Left$(edcDGDropDown.Text, 1) > "9") Then
                        edcDGDropDown.Text = ""
                    End If
                End If
                imChgMode = False
                ilPos = InStr(edcDGDropDown.SelText, ".")
                If ilPos = 0 Then
                    ilPos = InStr(edcDGDropDown.Text, ".")    'Disallow multi-decimal points
                    If ilPos > 0 Then
                        If KeyAscii = KEYDECPOINT Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                End If
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
                slStr = edcDGDropDown.Text
                slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
                slMaxValue = "9999999.99"
                If Trim(smLnSave(23, imLnRowNo)) <> "" Then
                    If gCompNumberStr(smLnSave(23, imLnRowNo), "0") <> 0 Then
                        slMaxValue = gDivStr("21000000", smLnSave(23, imLnRowNo))
                        If gCompNumberStr(slMaxValue, "9999999.99") > 0 Then
                            slMaxValue = "9999999.99"
                        End If
                    End If
                End If
                If gCompNumberStr(slStr, slMaxValue) > 0 Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
            Case DGOVSTARTINDEX
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                    ilFound = False
                    For ilLoop = LBound(igLegalTime) To UBound(igLegalTime) Step 1
                        If KeyAscii = igLegalTime(ilLoop) Then
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
                gTimeOutLine KeyAscii, imcTmeOutline
            Case DGOVENDINDEX
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                    ilFound = False
                    For ilLoop = LBound(igLegalTime) To UBound(igLegalTime) Step 1
                        If KeyAscii = igLegalTime(ilLoop) Then
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
                gTimeOutLine KeyAscii, imcTmeOutline
        End Select
    Else
        If imOVType <> 2 Then
            Select Case imOVBoxNo
                Case OVWDINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcDGDropDown.Text
                    slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
                    If gCompNumberStr(slStr, "999") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case OVSTARTTIMEINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        ilFound = False
                        For ilLoop = LBound(igLegalTime) To UBound(igLegalTime) Step 1
                            If KeyAscii = igLegalTime(ilLoop) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                    gTimeOutLine KeyAscii, imcTmeOutline
                Case OVENDTIMEINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        ilFound = False
                        For ilLoop = LBound(igLegalTime) To UBound(igLegalTime) Step 1
                            If KeyAscii = igLegalTime(ilLoop) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                    gTimeOutLine KeyAscii, imcTmeOutline
                Case OVRANKINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcDGDropDown.Text
                    slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
                    If gCompNumberStr(slStr, "2000") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case OVBBOPENINDEX
                Case OVBBCLOSEINDEX
                Case ACT1LINEUPINDEX
            End Select
        Else
            Select Case imOVBoxNo
                Case OV2STARTTIMEINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        ilFound = False
                        For ilLoop = LBound(igLegalTime) To UBound(igLegalTime) Step 1
                            If KeyAscii = igLegalTime(ilLoop) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                    gTimeOutLine KeyAscii, imcTmeOutline
                Case OV2ENDTIMEINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        ilFound = False
                        For ilLoop = LBound(igLegalTime) To UBound(igLegalTime) Step 1
                            If KeyAscii = igLegalTime(ilLoop) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                    gTimeOutLine KeyAscii, imcTmeOutline
                Case OV2SPLITINDEX
                Case OV2ALLOCATIONINDEX
                    ilPos = InStr(edcDGDropDown.SelText, ".")
                    If ilPos = 0 Then
                        ilPos = InStr(edcDGDropDown.Text, ".")    'Disallow multi-decimal points
                        If ilPos > 0 Then
                            If KeyAscii = KEYDECPOINT Then
                                Beep
                                KeyAscii = 0
                                Exit Sub
                            End If
                        End If
                    End If
                    'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcDGDropDown.Text
                    slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
                    If gCompNumberStr(slStr, "100.00") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case OV2ACQUISITIONINDEX
                    ilPos = InStr(edcDGDropDown.SelText, ".")
                    If ilPos = 0 Then
                        ilPos = InStr(edcDGDropDown.Text, ".")    'Disallow multi-decimal points
                        If ilPos > 0 Then
                            If KeyAscii = KEYDECPOINT Then
                                Beep
                                KeyAscii = 0
                                Exit Sub
                            End If
                        End If
                    End If
                    'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcDGDropDown.Text
                    slStr = Left$(slStr, edcDGDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDGDropDown.SelStart - edcDGDropDown.SelLength)
                    slMaxValue = "9999999.99"
                    If Trim(smLnSave(23, imLnRowNo)) <> "" Then
                        If gCompNumberStr(smLnSave(23, imLnRowNo), "0") <> 0 Then
                            slMaxValue = gDivStr("21000000", smLnSave(23, imLnRowNo))
                            If gCompNumberStr(slMaxValue, "9999999.99") > 0 Then
                                slMaxValue = "9999999.99"
                            End If
                        End If
                    End If
                    If gCompNumberStr(slStr, slMaxValue) > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
            End Select
        End If
    End If
End Sub

Private Sub edcDGDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        '    'If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (igFreezeState = 1) And (pbcOVWD(0).Visible) Then
        '    If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (pbcOVWD(0).Visible) Then
        '        edcDGDropDown.SelStart = 0
        '        edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
        '        Exit Sub
        '    End If
        '    Select Case imDGBoxNo
        '        Case DGSTARTDATEINDEX
        '            If (Shift And vbAltMask) > 0 Then
        '                plcCalendar.Visible = Not plcCalendar.Visible
        '            Else
        '                If gValidDate(smDGSave(10)) Then
        '                    If KeyCode = KEYUP Then 'Up arrow
        '                        smDGSave(10) = Format$(gDateValue(smDGSave(10)) - 7, "m/d/yy")
        '                    Else
        '                        smDGSave(10) = Format$(gDateValue(smDGSave(10)) + 7, "m/d/yy")
        '                    End If
        '                    gObtainMonthYear imCalType, smDGSave(10), imCalMonth, imCalYear
        '                    edcDGDropDown.Text = smDGSave(10)
        '                End If
        '            End If
        '        Case DGENDDATEINDEX
        '            If (Shift And vbAltMask) > 0 Then
        '                plcCalendar.Visible = Not plcCalendar.Visible
        '            Else
        '                If gValidDate(smDGSave(11)) Then
        '                    If KeyCode = KEYUP Then 'Up arrow
        '                        smDGSave(11) = Format$(gDateValue(smDGSave(11)) - 7, "m/d/yy")
        '                    Else
        '                        smDGSave(11) = Format$(gDateValue(smDGSave(11)) + 7, "m/d/yy")
        '                    End If
        '                    gObtainMonthYear imCalType, smDGSave(11), imCalMonth, imCalYear
        '                    edcDGDropDown.Text = smDGSave(11)
        '                End If
        '            End If
        '        Case DGRUNINDEX
        '            gProcessArrowKey Shift, KeyCode, lbcDGRun, imLbcArrowSetting
        '        Case DGDWPINDEX
        '            If tgSpf.sAllowDailyBuys = "Y" Then
        '                gProcessArrowKey Shift, KeyCode, lbcDWP, imLbcArrowSetting
        '            End If
        '        Case DGPRICEINDEX
        '            gProcessArrowKey Shift, KeyCode, lbcPriceType(0), imLbcArrowSetting
        '        Case DGOVSTARTINDEX
        '            If (Shift And vbAltMask) > 0 Then
        '                plcTme.Visible = Not plcTme.Visible
        '            End If
        '        Case DGOVENDINDEX
        '            If (Shift And vbAltMask) > 0 Then
        '                plcTme.Visible = Not plcTme.Visible
        '            End If
        '    End Select
        Else
            If imOVType <> 2 Then
                Select Case imOVBoxNo
                    Case OVSTARTTIMEINDEX
                        If (Shift And vbAltMask) > 0 Then
                            plcTme.Visible = Not plcTme.Visible
                        End If
                    Case OVENDTIMEINDEX
                        If (Shift And vbAltMask) > 0 Then
                            plcTme.Visible = Not plcTme.Visible
                        End If
                    Case OVBBOPENINDEX
                        gProcessArrowKey Shift, KeyCode, lbcBBLen, imLbcArrowSetting
                    Case OVBBCLOSEINDEX
                        gProcessArrowKey Shift, KeyCode, lbcBBLen, imLbcArrowSetting
                End Select
            Else
            Select Case imOVBoxNo
                Case OV2STARTTIMEINDEX
                    If (Shift And vbAltMask) > 0 Then
                        plcTme.Visible = Not plcTme.Visible
                    End If
                Case OV2ENDTIMEINDEX
                    If (Shift And vbAltMask) > 0 Then
                        plcTme.Visible = Not plcTme.Visible
                    End If
                Case OV2SPLITINDEX
                    gProcessArrowKey Shift, KeyCode, lbcRegion, imLbcArrowSetting
                Case OV2ALLOCATIONINDEX
                Case OV2ACQUISITIONINDEX
            End Select
            End If
        End If
        edcDGDropDown.SelStart = 0
        edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        '    'If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (igFreezeState = 1) And (pbcOVWD(0).Visible) Then
        '    If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) And (imOVType = 3) And (pbcOVWD(0).Visible) Then
        '        edcDGDropDown.SelStart = 0
        '        edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
        '        Exit Sub
        '    End If
        '    Select Case imDGBoxNo
        '        Case DGSTARTDATEINDEX
        '            If (Shift And vbAltMask) > 0 Then
        '            Else
        '                If gValidDate(smDGSave(10)) Then
        '                    If KeyCode = KEYLEFT Then 'Left arrow
        '                        smDGSave(10) = Format$(gDateValue(smDGSave(10)) - 1, "m/d/yy")
        '                    Else
        '                        smDGSave(10) = Format$(gDateValue(smDGSave(10)) + 1, "m/d/yy")
        '                    End If
        '                    gObtainMonthYear imCalType, smDGSave(10), imCalMonth, imCalYear
        '                    edcDGDropDown.Text = smDGSave(10)
        '                End If
        '            End If
        '        Case DGENDDATEINDEX
        '            If (Shift And vbAltMask) > 0 Then
        '            Else
        '                If gValidDate(smDGSave(11)) Then
        '                    If KeyCode = KEYLEFT Then 'Left arrow
        '                        smDGSave(11) = Format$(gDateValue(smDGSave(11)) - 1, "m/d/yy")
        '                    Else
        '                        smDGSave(11) = Format$(gDateValue(smDGSave(11)) + 1, "m/d/yy")
        '                    End If
        '                    gObtainMonthYear imCalType, smDGSave(11), imCalMonth, imCalYear
        '                    edcDGDropDown.Text = smDGSave(11)
        '                End If
        '            End If
        '        Case DGRUNINDEX
        '    End Select
        Else
            Select Case imOVBoxNo
            End Select
        End If
        edcDGDropDown.SelStart = 0
        edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
    End If
End Sub

Private Sub edcDGDropDown_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
        Else
            If imOVType <> 2 Then
            Else
                Select Case imOVBoxNo
                    Case OV2SPLITINDEX
                        If imTabDirection = -1 Then  'Right To Left
                            pbcLnSTab.SetFocus
                        Else
                            pbcLnTab.SetFocus
                        End If
                    Exit Sub
                End Select
            End If
        End If
        imDoubleClickName = False
    End If
End Sub

Private Sub edcHdDropDown_Change()
    Dim slStr As String
    Dim ilRet As Integer
    'Dim ilIndex As Integer
    Select Case imHdBoxNo
        Case STATUSINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcStatus, imBSMode, imComboBoxIndex
        Case POTINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcPot, imBSMode, slStr)
            If ilRet = 1 Then
                lbcPot.ListIndex = 1
            End If
        Case TYPEINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcType, imBSMode, imComboBoxIndex
        Case ADVTINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcAdvt, imBSMode, slStr)
        Case PRODUCTINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcProd, imBSMode, slStr)
            If ilRet = 1 Then   'input was ""
                lbcProd.ListIndex = 0
            End If
            smProduct = edcHdDropDown.Text
        Case SHTTITLEINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcShtTitle, imBSMode, slStr)
            If ilRet = 1 Then   'input was ""
                lbcShtTitle.ListIndex = -1  '0
            End If
            smShtTitle = edcHdDropDown.Text
        Case AGENCYINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcAgency, imBSMode, slStr)
            If ilRet = 1 Then
                If tmAdf.iCode > 0 Then
                    If (Trim$(tmAdf.sBillAgyDir) = "D") And (tmAdf.iAgfCode = 0) Then
                        lbcAgency.ListIndex = 1
                    Else
                        lbcAgency.ListIndex = 0
                    End If
                Else
                    lbcAgency.ListIndex = 0
                End If
            End If
        Case MERCHINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcComment(0), imBSMode, imComboBoxIndex
        Case PROMOINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcComment(0), imBSMode, imComboBoxIndex
        Case BUYERINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcBuyer, imBSMode, slStr)
            If ilRet = 1 Then
                lbcBuyer.ListIndex = 1
            End If
        Case REVSETINDEX
            'imLbcArrowSetting = True
            'ilRet = gOptionalLookAhead(edcHdDropDown, lbcRevSet(0), imBSMode, slStr)
            'If ilRet = 1 Then
            '    lbcRevSet(0).ListIndex = 1
            'End If
        Case SEGINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcHdDropDown, lbcSeg, imBSMode, slStr)
            If ilRet = 1 Then
                lbcSeg.ListIndex = 0
            End If
        Case RATECARDINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcRateCard, imBSMode, imComboBoxIndex
        Case BILLCYCLEINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcBillCycle, imBSMode, imComboBoxIndex
        Case INVGROUPINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcInvGroup, imBSMode, imComboBoxIndex
        Case INTCOMMINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcComment(0), imBSMode, imComboBoxIndex
        Case CANCLAUSEINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcComment(0), imBSMode, imComboBoxIndex
        Case CHGREASONINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcComment(0), imBSMode, imComboBoxIndex
        Case OTHERCOMMINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcHdDropDown, lbcComment(0), imBSMode, imComboBoxIndex
        Case GROSSINDEX
            smHdSave(1) = edcHdDropDown.Text
        Case PRODTAGINDEX
            smHdSave(3) = edcHdDropDown.Text
        Case GUARINDEX
            smHdSave(2) = edcHdDropDown.Text
    End Select
    imLbcArrowSetting = False
    'Don't set change mode if new and on type field
    'If (imSelectedIndex <> 0) Or ((imSelectedIndex = 0) And (imHdBoxNo <> TYPEINDEX)) Then
        mSetChg imHdBoxNo
    'End If
End Sub

Private Sub edcHdDropDown_DblClick()
    imDoubleClickName = True    'Double click event foolowed by mouse up
End Sub

Private Sub edcHdDropDown_GotFocus()
    Select Case imHdBoxNo
        Case STATUSINDEX
            If lbcStatus.ListCount = 1 Then
            End If
        Case POTINDEX
        Case TYPEINDEX
            If lbcType.ListCount = 1 Then
            End If
        Case ADVTINDEX
            If lbcAdvt.ListCount = 1 Then
            End If
        Case PRODUCTINDEX
        Case SHTTITLEINDEX
        Case AGENCYINDEX
            If lbcAgency.ListCount = 1 Then
            End If
        Case MERCHINDEX
        Case PROMOINDEX
        Case BUYERINDEX
        Case REVSETINDEX
        Case SEGINDEX
        Case RATECARDINDEX
            If lbcRateCard.ListCount = 1 Then
            End If
        Case BILLCYCLEINDEX
            If lbcBillCycle.ListCount = 1 Then
            End If
        Case INVGROUPINDEX
            If lbcInvGroup.ListCount = 1 Then
            End If
        Case INTCOMMINDEX
        Case CANCLAUSEINDEX
        Case CHGREASONINDEX
        Case OTHERCOMMINDEX
        Case GROSSINDEX
        Case PRODTAGINDEX
        Case GUARINDEX
    End Select
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcHdDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcHdDropDown_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    Dim ilPos As Integer
    Dim slStr As String
    Select Case imHdBoxNo
        Case GROSSINDEX
            ilPos = InStr(edcHdDropDown.SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcHdDropDown.Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcHdDropDown.Text
            slStr = Left$(slStr, edcHdDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcHdDropDown.SelStart - edcHdDropDown.SelLength)
            If gCompNumberStr(slStr, "21000000.00") > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            Exit Sub
        Case PRODTAGINDEX
            ilPos = InStr(edcHdDropDown.SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcHdDropDown.Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcHdDropDown.Text
            slStr = Left$(slStr, edcHdDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcHdDropDown.SelStart - edcHdDropDown.SelLength)
            If gCompNumberStr(slStr, "100.00") > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            Exit Sub
        Case GUARINDEX
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            If (Asc(tgSpf.sOptionFields) And OFDELGUAR) = OFDELGUAR Then
                slStr = edcHdDropDown.Text
                slStr = Left$(slStr, edcHdDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcHdDropDown.SelStart - edcHdDropDown.SelLength)
                If gCompNumberStr(slStr, "100") > 0 Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
            End If
            Exit Sub
    End Select
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcHdDropDown.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    '2/3/16: Disallow forward slash
    'If Not gCheckKeyAscii(ilKey) Then
    If Not gCheckKeyAsciiIncludeSlash(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcHdDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    If ((Shift And vbCtrlMask) > 0) And (KeyCode >= KEYLEFT) And (KeyCode <= KeyDown) Then
        imDirProcess = KeyCode 'mDirection 0
        pbcHdTab.SetFocus
        Exit Sub
    End If
    If (imHdBoxNo = GROSSINDEX) Or (imHdBoxNo = GUARINDEX) Or (imHdBoxNo = PRODTAGINDEX) Then
        Exit Sub
    End If
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        Select Case imHdBoxNo
            Case STATUSINDEX
                gProcessArrowKey Shift, KeyCode, lbcStatus, imLbcArrowSetting
            Case POTINDEX
                gProcessArrowKey Shift, KeyCode, lbcPot, imLbcArrowSetting
            Case TYPEINDEX
                mTypeProcessArrowKey Shift, KeyCode, lbcType, imLbcArrowSetting
            Case ADVTINDEX
                gProcessArrowKey Shift, KeyCode, lbcAdvt, imLbcArrowSetting
            Case PRODUCTINDEX
                gProcessArrowKey Shift, KeyCode, lbcProd, imLbcArrowSetting
            Case SHTTITLEINDEX
                gProcessArrowKey Shift, KeyCode, lbcShtTitle, imLbcArrowSetting
            Case AGENCYINDEX
                gProcessArrowKey Shift, KeyCode, lbcAgency, imLbcArrowSetting
            Case MERCHINDEX
                gProcessArrowKey Shift, KeyCode, lbcComment(0), imLbcArrowSetting
            Case PROMOINDEX
                gProcessArrowKey Shift, KeyCode, lbcComment(0), imLbcArrowSetting
            Case BUYERINDEX
                gProcessArrowKey Shift, KeyCode, lbcBuyer, imLbcArrowSetting
            Case REVSETINDEX
                'gProcessArrowKey Shift, KeyCode, lbcRevSet(0), imLbcArrowSetting
            Case SEGINDEX
                gProcessArrowKey Shift, KeyCode, lbcSeg, imLbcArrowSetting
            Case RATECARDINDEX
                gProcessArrowKey Shift, KeyCode, lbcRateCard, imLbcArrowSetting
            Case BILLCYCLEINDEX
                gProcessArrowKey Shift, KeyCode, lbcBillCycle, imLbcArrowSetting
            Case INVGROUPINDEX
                gProcessArrowKey Shift, KeyCode, lbcInvGroup, imLbcArrowSetting
            Case INTCOMMINDEX
                gProcessArrowKey Shift, KeyCode, lbcComment(0), imLbcArrowSetting
            Case CANCLAUSEINDEX
                gProcessArrowKey Shift, KeyCode, lbcComment(0), imLbcArrowSetting
            Case CHGREASONINDEX
                gProcessArrowKey Shift, KeyCode, lbcComment(0), imLbcArrowSetting
            Case OTHERCOMMINDEX
                gProcessArrowKey Shift, KeyCode, lbcComment(0), imLbcArrowSetting
        End Select
        edcHdDropDown.SelStart = 0
        edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
    End If
End Sub

Private Sub edcHdDropDown_LostFocus()
    'TTP: 9760 Add test to handle case that the names are pasted into the field instead of typed
    If (imHdBoxNo <> ADVTINDEX) And (imHdBoxNo <> PRODUCTINDEX) And (imHdBoxNo <> SHTTITLEINDEX) And (imHdBoxNo <> AGENCYINDEX) And (imHdBoxNo <> BUYERINDEX) And (imHdBoxNo <> SEGINDEX) And (imHdBoxNo <> POTINDEX) And (imHdBoxNo <> RATECARDINDEX) Then
        If (imHdBoxNo <> MERCHINDEX) And (imHdBoxNo <> PROMOINDEX) And (imHdBoxNo <> INTCOMMINDEX) And (imHdBoxNo <> CANCLAUSEINDEX) And (imHdBoxNo <> CHGREASONINDEX) And (imHdBoxNo <> OTHERCOMMINDEX) Then
            edcHdDropDown.Text = gRemoveIllegalPastedChar(edcHdDropDown.Text)
        End If
    End If
    Select Case imHdBoxNo
        Case PRODUCTINDEX
            smProduct = edcHdDropDown.Text
        Case SHTTITLEINDEX
            smShtTitle = edcHdDropDown.Text
    End Select
End Sub

Private Sub edcHdDropDown_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        Select Case imHdBoxNo
            Case POTINDEX, ADVTINDEX, PRODUCTINDEX, SHTTITLEINDEX, AGENCYINDEX, MERCHINDEX, PROMOINDEX, BUYERINDEX, INTCOMMINDEX, CANCLAUSEINDEX, CHGREASONINDEX, OTHERCOMMINDEX, SEGINDEX
                If imTabDirection = -1 Then  'Right To Left
                    pbcHdSTab.SetFocus
                Else
                    pbcHdTab.SetFocus
                End If
                Exit Sub
        End Select
        imDoubleClickName = False
    End If
End Sub

Public Sub edcLineNo_Change(Index As Integer)
    If Index >= 2 Then
        Exit Sub
    End If
    tmcDelay.Enabled = False
    imDelaySrce = 3
    tmcDelay.Interval = 2000
    tmcDelay.Enabled = True
End Sub

Private Sub edcLineNo_GotFocus(Index As Integer)
    If Index >= 2 Then
        Exit Sub
    End If
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Public Sub edcLnDropDown_Change()
    Dim slStr As String
    Dim ilRet As Integer
    If grdCPMBuy.Visible Then
        gCPMDropdown 2
    Else
        Select Case imLnBoxNo
            Case VEHINDEX
                If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                    imLbcArrowSetting = True
                    gMatchLookAhead edcLNDropDown, lbcLnVehicle(igTabMapIndex), imBSMode, imComboBoxIndex
                Else
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcLNDropDown, lbcPkVehicle(igTabMapIndex), imBSMode, slStr)
                    imLbcArrowSetting = False
                End If
                pbcLbcVehicle_Paint
            Case DPINDEX
                If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                    imLbcArrowSetting = True
                    gMatchLookAhead edcLNDropDown, lbcLnProgram(igTabMapIndex), imBSMode, imComboBoxIndex
                Else
                    'imLbcArrowSetting = True
                    'ilRet = gOptionalLookAhead(edcLnDropDown, lbcPkProgram(igTabMapIndex), imBSMode, slStr)
                    'imLbcArrowSetting = False
                    imLbcArrowSetting = True
                    gMatchLookAhead edcLNDropDown, lbcPkProgram(igTabMapIndex), imBSMode, imComboBoxIndex
                End If
            Case LENINDEX
                imLbcArrowSetting = True
                gMatchLookAhead edcLNDropDown, lbcLen, imBSMode, imComboBoxIndex
            Case LINECOMMINDEX
               '10843 remove dead code
              '  If tgSpf.sCLnStdQt <> "Y" Then
                    imLbcArrowSetting = True
                    gMatchLookAhead edcLNDropDown, lbcComment(1), imBSMode, imComboBoxIndex
              '  End If
            Case WKSPOTSINDEX To WKSPOTSINDEX + 12
                'If plcDemoBar.Visible Then
                    edcDBValue.Text = edcLNDropDown.Text
                    If Val(edcLNDropDown.Text) > 0 Then
                        If Not mIsLnGame(imLnRowNo) Then
                            If (tgUrf(0).sActFlightButton = "I") And ((Asc(tgSaf(0).sFeatures5) And SHOWDAYDROPDOWN) = SHOWDAYDROPDOWN) Then
                                pbcOVWD(0).Visible = True
                            End If
                        End If
                    Else
                        pbcOVWD(0).Visible = False
                    End If
                'End If
            Case PRICEINDEX
                imLbcArrowSetting = True
                ilRet = gOptionalLookAhead(edcLNDropDown, lbcPriceType(0), imBSMode, slStr)
                imLbcArrowSetting = False
                If (lbcPriceType(0).ListIndex = 0) Then
                    If Trim$(edcLNDropDown.Text) > "" Then
                        If (Left$(edcLNDropDown.Text, 1) < "0") Or (Left$(edcLNDropDown.Text, 1) > "9") Then
                            If Left$(edcLNDropDown.Text, 1) <> "." Then
                                edcLNDropDown.Text = ""
                            End If
                        End If
                    End If
                End If
        End Select
    End If
    imLbcArrowSetting = False
End Sub

Private Sub edcLNDropDown_DblClick()
    imDoubleClickName = True    'Double click event foolowed by mouse up
End Sub

Private Sub edcLNDropDown_GotFocus()
    If (Not imUpdateAllowed) Then
        If plcComment.Visible = True Then
            '12'278/18: Removed to retain comment
            'pbcClickFocus.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    Select Case imLnBoxNo
        Case VEHINDEX
        Case DPINDEX
        Case LENINDEX
            If lbcLen.ListCount = 1 Then
            End If
        Case LINECOMMINDEX
        Case PRICEINDEX
    End Select
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcLNDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcLNDropDown_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    Dim slStr As String
    Dim ilPos As Integer
    Dim slMaxValue As String

    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcLNDropDown.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    If grdCPMBuy.Visible Then
        gCPMDropdown 3, KeyAscii
    Else
        Select Case imLnBoxNo
            Case VEHINDEX
                ilKey = KeyAscii
                If Not gCheckKeyAscii(ilKey) Then
                    KeyAscii = 0
                    Exit Sub
                End If
            Case DPINDEX
                ilKey = KeyAscii
                If Not gCheckKeyAscii(ilKey) Then
                    KeyAscii = 0
                    Exit Sub
                End If
            Case LENINDEX
                ilKey = KeyAscii
                If Not gCheckKeyAscii(ilKey) Then
                    KeyAscii = 0
                    Exit Sub
                End If
            Case LINECOMMINDEX
                ilKey = KeyAscii
                If Not gCheckKeyAscii(ilKey) Then
                    KeyAscii = 0
                    Exit Sub
                End If
            Case WKSPOTSINDEX To WKSPOTSINDEX + 12
                If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Or (KeyAscii = Asc("Q")) Or (KeyAscii = Asc("q")) Or (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
                    Exit Sub
                End If
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
                slStr = edcLNDropDown.Text
                slStr = Left$(slStr, edcLNDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcLNDropDown.SelStart - edcLNDropDown.SelLength)
                slMaxValue = "999"
                'L.Bianchi 05/10/2022 begin
                If Trim(smLnSave(18, imLnRowNo)) <> "" Then
                    If gCompNumberStr(smLnSave(18, imLnRowNo), "0") <> 0 Then
                        If smLnShow(20, imLnRowNo) <> "" Then
                            If gCompNumberStr(Replace(smLnShow(20, imLnRowNo), ",", ""), "0") <> 0 Then
                                slMaxValue = gDivStr(gSubStr("21000000", smLnSave(18, imLnRowNo)), Replace(smLnShow(20, imLnRowNo), ",", ""))
                                If gCompNumberStr(slMaxValue, "999") > 0 Then
                                    slMaxValue = "999"
                                End If
                            End If
                        End If
                    End If
                End If
                'L.Bianchi 05/10/2022 End
                If gCompNumberStr(slStr, slMaxValue) > 0 Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
            Case PRICEINDEX
                slStr = edcLNDropDown.Text
                slStr = Left$(slStr, edcLNDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcLNDropDown.SelStart - edcLNDropDown.SelLength)
                If (Left$(slStr, 1) < "0") Or (Left$(slStr, 1) > "9") Then
                    If (KeyAscii = Asc("R")) Or (KeyAscii = Asc("r")) Then
                        lbcPriceType(0).ListIndex = 1
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
                        lbcPriceType(0).ListIndex = 2
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("N")) Or (KeyAscii = Asc("n")) Then
                        lbcPriceType(0).ListIndex = 3
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("M")) Or (KeyAscii = Asc("m")) Then
                        lbcPriceType(0).ListIndex = 4
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("B")) Or (KeyAscii = Asc("b")) Then
                        lbcPriceType(0).ListIndex = 5
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("S")) Or (KeyAscii = Asc("s")) Then
                        lbcPriceType(0).ListIndex = 6
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Then
                        lbcPriceType(0).ListIndex = 7
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("R")) Or (KeyAscii = Asc("r")) Then
                        lbcPriceType(0).ListIndex = 8
                        KeyAscii = 0
                        Exit Sub
                    End If
                    If (KeyAscii = Asc("D")) Or (KeyAscii = Asc("d")) Then
                        lbcPriceType(0).ListIndex = 9
                        KeyAscii = 0
                        Exit Sub
                    End If
                    Exit Sub
                End If
                imChgMode = True
                lbcPriceType(0).ListIndex = 0
                If Trim$(edcLNDropDown.Text) > "" Then
                    If (Left$(edcLNDropDown.Text, 1) < "0") Or (Left$(edcLNDropDown.Text, 1) > "9") Then
                        edcLNDropDown.Text = ""
                    End If
                End If
                imChgMode = False
                ilPos = InStr(edcLNDropDown.SelText, ".")
                If ilPos = 0 Then
                    ilPos = InStr(edcLNDropDown.Text, ".")    'Disallow multi-decimal points
                    If ilPos > 0 Then
                        If KeyAscii = KEYDECPOINT Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                End If
                If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
                slStr = edcLNDropDown.Text
                slStr = Left$(slStr, edcLNDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcLNDropDown.SelStart - edcLNDropDown.SelLength)
                slMaxValue = "9999999.99"
                If Trim(smLnSave(23, imLnRowNo)) <> "" Then
                    If gCompNumberStr(smLnSave(23, imLnRowNo), "0") <> 0 Then
                        slMaxValue = gDivStr("21000000", smLnSave(23, imLnRowNo))
                        If gCompNumberStr(slMaxValue, "9999999.99") > 0 Then
                            slMaxValue = "9999999.99"
                        End If
                    End If
                End If
                If gCompNumberStr(slStr, slMaxValue) > 0 Then
                    Beep
                    KeyAscii = 0
                    Exit Sub
                End If
        End Select
    End If
End Sub

Private Sub edcLNDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    If ((Shift And vbCtrlMask) > 0) And (KeyCode >= KEYLEFT) And (KeyCode <= KeyDown) Then
        imDirProcess = KeyCode 'mDirection 0
        pbcLnTab.SetFocus
        Exit Sub
    End If
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If grdCPMBuy.Visible Then
            igCPMShift = Shift
            igCPMKeyCode = KeyCode
            gCPMDropdown 4
        Else
            Select Case imLnBoxNo
                Case VEHINDEX
                    If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                        gProcessArrowKey Shift, KeyCode, lbcLnVehicle(igTabMapIndex), imLbcArrowSetting
                    Else
                        gProcessArrowKey Shift, KeyCode, lbcPkVehicle(igTabMapIndex), imLbcArrowSetting
                    End If
                Case DPINDEX
                    If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                        gProcessArrowKey Shift, KeyCode, lbcLnProgram(igTabMapIndex), imLbcArrowSetting
                    Else
                        gProcessArrowKey Shift, KeyCode, lbcPkProgram(igTabMapIndex), imLbcArrowSetting
                    End If
                Case LENINDEX
                    gProcessArrowKey Shift, KeyCode, lbcLen, imLbcArrowSetting
                Case LINECOMMINDEX
                   '10843 remove dead code
                 '   If tgSpf.sCLnStdQt <> "Y" Then
                        gProcessArrowKey Shift, KeyCode, lbcComment(1), imLbcArrowSetting
                  '  End If
                Case PRICEINDEX
                    gProcessArrowKey Shift, KeyCode, lbcPriceType(0), imLbcArrowSetting
            End Select
        End If
        edcLNDropDown.SelStart = 0
        edcLNDropDown.SelLength = Len(edcLNDropDown.Text)
    End If
End Sub

Private Sub edcLNDropDown_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        If grdCPMBuy.Visible Then
            igCPMShift = Shift
            gCPMDropdown 5
            If imTabDirection = -1 Then  'Right To Left
                pbcLnSTab.SetFocus
            Else
                pbcLnTab.SetFocus
            End If
            Exit Sub
        End If
        Select Case imHdBoxNo
            Case LINECOMMINDEX
               '10843 remove dead code
               ' If tgSpf.sCLnStdQt <> "Y" Then
                    If imTabDirection = -1 Then  'Right To Left
                        pbcLnSTab.SetFocus
                    Else
                        pbcLnTab.SetFocus
                    End If
                    Exit Sub
           '     End If
        End Select
        imDoubleClickName = False
    End If
    '6/19/18
    Select Case imLnBoxNo
        Case WKSPOTSINDEX To WKSPOTSINDEX + 12
            If Val(edcLNDropDown.Text) > 0 Then
                If Not mIsLnGame(imLnRowNo) Then
                    If (tgUrf(0).sActFlightButton = "I") And ((Asc(tgSaf(0).sFeatures5) And SHOWDAYDROPDOWN) = SHOWDAYDROPDOWN) Then
                        '6/19/18: Toggle image
                        'pbcOVWD(0).Visible = true
                        If pbcOVWD(0).Visible And (imOVType = 3) Then
                            mOvSetShow imOVBoxNo
                        End If
                        pbcOVWD(0).Visible = Not pbcOVWD(0).Visible
                    End If
                End If
            Else
                pbcOVWD(0).Visible = False
            End If
    End Select
End Sub

Private Sub edcPBDate_Change(Index As Integer)
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slNoWks As String
    Dim llWkEndDate As Long
    Dim ilNoWks As Integer
    tmcDelay.Enabled = False
    If imPBChgMode Then
        Exit Sub
    End If
    imPBChgMode = True
    If Index = 0 Then   'Start Date
        slStartDate = edcPBDate(Index).Text
        slNoWks = edcRBWks(2).Text
        slEndDate = edcPBDate(1).Text
        If Not gValidDate(slStartDate) Then
            imPBChgMode = False
            'mPBSetCommands
            Exit Sub
        End If
        If slNoWks = "" Then
            slNoWks = "1"
            edcRBWks(2).Text = slNoWks
            If slEndDate = "" Then
                slEndDate = gObtainNextSunday(slStartDate)
                llWkEndDate = gDateValue(slEndDate)
            End If
        Else
            If (slEndDate = "") Or (Not gValidDate(slEndDate)) Then
                llWkEndDate = gDateValue(slStartDate) + 7 * Val(slNoWks) - 1
            Else
                llWkEndDate = gDateValue(slStartDate) + 7 * Val(slNoWks) - 7
                Do Until gWeekDayLong(llWkEndDate) = gWeekDayStr(slEndDate)
                    llWkEndDate = llWkEndDate + 1
                Loop
            End If
        End If
        edcPBDate(1).Text = Format$(llWkEndDate, "m/d/yy")
        If (gDateValue(slStartDate) >= lmCalStartDate) And (gDateValue(slStartDate) <= lmCalEndDate) Then
            mBoxCalDate
        Else
            gObtainMonthYear imCalType, slStartDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        End If
    Else                'End Date
        'If Trim$(edcPBDate(0).Text) = "" Then
        '    edcPBDate(0).SetFocus
        '    Exit Sub
        'End If
        slEndDate = edcPBDate(Index).Text
        slStartDate = edcPBDate(0).Text
        If Not gValidDate(slStartDate) Then
            imPBChgMode = False
            'mPBSetCommands
            Exit Sub
        End If
        If gValidDate(slEndDate) Then
            If gDateValue(slEndDate) < gDateValue(slStartDate) Then
                imPBChgMode = False
                'mPBSetCommands
                Exit Sub
            End If
        Else
            imPBChgMode = False
            'mPBSetCommands
            Exit Sub
        End If
        ilNoWks = (gDateValue(slEndDate) - gDateValue(slStartDate) + 7) \ 7
        edcRBWks(2).Text = Trim$(str$(ilNoWks))
        If (gDateValue(slEndDate) >= lmCalStartDate) And (gDateValue(slEndDate) <= lmCalEndDate) Then
            mBoxCalDate
        Else
            gObtainMonthYear imCalType, slEndDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        End If
    End If
    imPBChgMode = False
    mPBSetCommands
End Sub

Private Sub edcPBDate_GotFocus(Index As Integer)
    Dim slStr As String
    'tmcDelay.Enabled = False
    'imDelaySrce = -1
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 6
    If imPBDateIndex <> Index Then
        plcCalendar.Visible = False
    End If
    plcCalendar.Move plcPower.Left + frcPBDates.Left + edcPBDate(Index).Left, plcPower.Top + frcPBDates.Top + edcPBDate(Index).Top + edcPBDate(Index).height
    imPBDateIndex = Index
    If Not imBypassFocus Then
        slStr = edcPBDate(Index).Text
        If gValidDate(slStr) Then
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
        Else
            slStr = Format$(gNow(), "m/d/yy")
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
        End If
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
    mPBSetCommands
End Sub

Private Sub edcPBDate_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcPBDate_KeyPress(Index As Integer, KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    Select Case Index
        Case 0
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case 1
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
    End Select
End Sub

Private Sub edcPBDate_KeyUp(Index As Integer, KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If (Shift And vbAltMask) > 0 Then
            plcCalendar.Visible = Not plcCalendar.Visible
        Else
            slDate = edcPBDate(Index).Text
            If gValidDate(slDate) Then
                If KeyCode = KEYUP Then 'Up arrow
                    slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                Else
                    slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                End If
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                edcPBDate(Index).Text = slDate
            End If
        End If
        edcPBDate(Index).SelStart = 0
        edcPBDate(Index).SelLength = Len(edcPBDate(Index).Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If (Shift And vbAltMask) > 0 Then
        Else
            slDate = edcPBDate(Index)
            If gValidDate(slDate) Then
                If KeyCode = KEYLEFT Then 'Left arrow
                    slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                Else
                    slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                End If
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                edcPBDate(Index).Text = slDate
            End If
        End If
        edcPBDate(Index).SelStart = 0
        edcPBDate(Index).SelLength = Len(edcPBDate(Index).Text)
    End If
End Sub

Private Sub edcPBDate_LostFocus(Index As Integer)
    'mPBSetCommands
End Sub

Private Sub edcPBEqualValueCPM_Change()
    If imInEqualValueChgMode Then
        Exit Sub
    End If
    imInEqualValueChgMode = True
    edcPBEqualValueCPP.Text = ""
    'edcPBEqualValueSpots.Text = ""
    edcPBEqualValuePrice.Text = ""
    imInEqualValueChgMode = False
End Sub

Private Sub edcPBEqualValueCPM_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
    smEqualValueCPM = edcPBEqualValueCPM.Text
End Sub

Private Sub edcPBEqualValueCPM_KeyPress(KeyAscii As Integer)
    Dim ilPos As Integer

    ilPos = InStr(edcPBEqualValueCPM.SelText, ".")
    If ilPos = 0 Then
        ilPos = InStr(edcPBEqualValueCPM.Text, ".")    'Disallow multi-decimal points
        If ilPos > 0 Then
            If KeyAscii = KEYDECPOINT Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        End If
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcPBEqualValueCPM_LostFocus()
    Dim ilRow As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    If UBound(tmPB1DP) = LBound(tmPB1DP) Then
        Exit Sub
    End If
    If edcPBEqualValueCPM.Text <> smEqualValueCPM Then
        Screen.MousePointer = vbHourglass
        ilStartRow = LBound(tmPB1DP) 'Top location
        ilEndRow = UBound(tmPB1DP) - 1 '+ 1
        imRBBox = 9
        For ilRow = ilStartRow To ilEndRow Step 1
            tmPB1DP(ilRow).iAudSet = False
            imRBRow = ilRow + 1
            imRBInLnGridOrSum = 0
            edcRB(0).Text = edcPBEqualValueCPM.Text
            mRBSetShow False
        Next ilRow
        imRBBox = -1
        imRBRow = -1
        'Compute Totals
        mSetRBEquals 4
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub edcPBEqualValueCPP_Change()
    If imInEqualValueChgMode Then
        Exit Sub
    End If
    imInEqualValueChgMode = True
    edcPBEqualValueCPM.Text = ""
    'edcPBEqualValueSpots.Text = ""
    edcPBEqualValuePrice.Text = ""
    imInEqualValueChgMode = False
End Sub

Private Sub edcPBEqualValueCPP_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
    smEqualValueCPP = edcPBEqualValueCPP.Text
End Sub

Private Sub edcPBEqualValueCPP_KeyPress(KeyAscii As Integer)
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcPBEqualValueCPP_LostFocus()
    Dim ilRow As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    If UBound(tmPB1DP) = LBound(tmPB1DP) Then
        Exit Sub
    End If
    If edcPBEqualValueCPP.Text <> smEqualValueCPP Then
        Screen.MousePointer = vbHourglass
        ilStartRow = LBound(tmPB1DP) 'Top location
        ilEndRow = UBound(tmPB1DP) - 1 '+ 1
        imRBBox = 8
        For ilRow = ilStartRow To ilEndRow Step 1
            tmPB1DP(ilRow).iAudSet = False
            imRBRow = ilRow + 1
            imRBInLnGridOrSum = 0
            edcRB(0).Text = edcPBEqualValueCPP.Text
            mRBSetShow False
        Next ilRow
        imRBBox = -1
        imRBRow = -1
        'Compute Totals
        mSetRBEquals 4
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub edcPBEqualValuePrice_Change()
    If imInEqualValueChgMode Then
        Exit Sub
    End If
    imInEqualValueChgMode = True
    'edcPBEqualValueSpots.Text = ""
    edcPBEqualValueCPM.Text = ""
    edcPBEqualValueCPP.Text = ""
    imInEqualValueChgMode = False
End Sub

Private Sub edcPBEqualValuePrice_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
    smEqualValuePrice = edcPBEqualValuePrice.Text
End Sub

Private Sub edcPBEqualValuePrice_KeyPress(KeyAscii As Integer)
    Dim ilPos As Integer
    Dim slStr As String

    ilPos = InStr(edcPBEqualValuePrice.SelText, ".")
    If ilPos = 0 Then
        ilPos = InStr(edcPBEqualValuePrice.Text, ".")    'Disallow multi-decimal points
        If ilPos > 0 Then
            If KeyAscii = KEYDECPOINT Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        End If
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
    slStr = edcPBEqualValuePrice.Text
    slStr = Left$(slStr, edcPBEqualValuePrice.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcPBEqualValuePrice.SelStart - edcPBEqualValuePrice.SelLength)
    If gCompNumberStr(slStr, "9999999.99") > 0 Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcPBEqualValuePrice_LostFocus()
    Dim ilRow As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    If UBound(tmPB1DP) = LBound(tmPB1DP) Then
        Exit Sub
    End If
    If edcPBEqualValuePrice.Text <> smEqualValuePrice Then
        Screen.MousePointer = vbHourglass
        ilStartRow = LBound(tmPB1DP) 'Top location
        ilEndRow = UBound(tmPB1DP) - 1 '+ 1
        imRBBox = 5
        For ilRow = ilStartRow To ilEndRow Step 1
            tmPB1DP(ilRow).iAudSet = False
            imRBRow = ilRow + 1
            imRBInLnGridOrSum = 0
            edcRB(0).Text = edcPBEqualValuePrice.Text
            mRBSetShow False
        Next ilRow
        imRBBox = -1
        imRBRow = -1
        'Compute Totals
        mSetRBEquals 4
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub edcPBEqualValueSpots_Change()
    If imInEqualValueChgMode Then
        Exit Sub
    End If
    imInEqualValueChgMode = True
    imInEqualValueChgMode = False
End Sub

Private Sub edcPBEqualValueSpots_GotFocus()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
    smEqualValueSpots = edcPBEqualValueSpots.Text
End Sub

Private Sub edcPBEqualValueSpots_KeyPress(KeyAscii As Integer)
    Dim slStr As String
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
    slStr = edcPBEqualValueSpots.Text
    slStr = Left$(slStr, edcPBEqualValueSpots.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcPBEqualValueSpots.SelStart - edcPBEqualValueSpots.SelLength)
    If gCompNumberStr(slStr, "999") > 0 Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcPBEqualValueSpots_LostFocus()
    Dim ilRow As Integer
    If UBound(tmPB1DP) = LBound(tmPB1DP) Then
        Exit Sub
    End If
    If edcPBEqualValueSpots.Text <> smEqualValueSpots Then
'        'Compute Totals
        For ilRow = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            tmPB1DP(ilRow).iAudSet = False
        Next ilRow
        Screen.MousePointer = vbHourglass
        edcRBWks(3).Text = edcPBEqualValueSpots.Text
        edcRBWks_LostFocus 3
        mSetRBEquals 4
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub edcPBFactor_GotFocus()
    plcCalendar.Visible = False
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 6
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcPBFactor_KeyPress(KeyAscii As Integer)
    Dim slStr As String
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
    slStr = edcPBFactor.Text
    slStr = Left$(slStr, edcPBFactor.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcPBFactor.SelStart - edcPBFactor.SelLength)
    If gCompNumberStr(slStr, "10") > 0 Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcPBFactor_LostFocus()
    Dim slStr As String
    Dim ilRow As Integer
    Dim slNewFactor As String
    Dim slOldFactor As String
    Dim slDate As String
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim slDateSpot As String
    Dim slMixIn As String
    Dim slMixOut As String
    Dim ilIndex As Integer
    Dim slvalue As String

    slNewFactor = edcPBFactor.Text
    If (tmcDelay.Enabled = False) And (Val(slNewFactor) <> imPBFactor) Then
        If (Trim$(smPowerCaption) = "Rate Bar") Then
            Screen.MousePointer = vbHourglass
            For ilRow = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                tmPB1DP(ilRow).iAudSet = False
            Next ilRow
            If imPBFactor > 0 Then
                slOldFactor = Trim$(str$(imPBFactor))
            Else
                slOldFactor = "1"
            End If
            slStr = edcRBWks(3).Text
            slStr = gMulStr(slStr, slNewFactor)
            slStr = gDivStr(slStr, slOldFactor)
            If edcRBWks(3).Text <> slStr Then
                edcRBWks(3).Text = slStr
            Else
                For ilLoop = 0 To lbcRBDatesSpots(0).ListCount - 1 Step 1
                    slDateSpot = lbcRBDatesSpots(0).List(ilLoop)
                    ilRet = gParseItem(slDateSpot, 1, "|", slDate)
                    ilRet = gParseItem(slDateSpot, 2, "|", slStr)
                    slStr = gMulStr(slStr, slNewFactor)
                    slStr = gDivStr(slStr, slOldFactor)
                    lbcRBDatesSpots(0).List(ilLoop) = slDate & "|" & slStr
                Next ilLoop
            End If
            For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
                If tmPB1DP(ilLoop).lMixStartDate > 0 Then
                    slMixIn = smRBMixDatesSpots(tmPB1DP(ilLoop).iMixSpotIndex)
                    slMixOut = ""
                    ilIndex = 1
                    Do
                        ilRet = gParseItem(slMixIn, ilIndex, "|", slvalue)
                        If ilRet <> CP_MSG_NONE Then
                            smRBMixDatesSpots(tmPB1DP(ilLoop).iMixSpotIndex) = slMixOut
                            Exit Do
                        End If
                        If Left$(slvalue, 1) = "-" Then
                            slvalue = Mid$(slvalue, 2)
                            slvalue = gMulStr(slvalue, slNewFactor)
                            slvalue = gDivStr(slvalue, slOldFactor)
                            slvalue = "-" & slvalue
                        Else
                            slvalue = gMulStr(slvalue, slNewFactor)
                            slvalue = gDivStr(slvalue, slOldFactor)
                        End If
                        slMixOut = slMixOut & slvalue & "|"
                        ilIndex = ilIndex + 1
                    Loop
                End If
            Next ilLoop
'            mSetRBEquals 2
            mSetRBEquals 4
            pbcLbcRBDatesSpots(0).Cls
            pbclbcRBDatesSpots_Paint 0
            imPBFactor = Val(edcPBFactor.Text)
            Screen.MousePointer = vbDefault
        End If
    End If
End Sub



Private Sub edcRB_GotFocus(Index As Integer)
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcRB_KeyPress(Index As Integer, KeyAscii As Integer)
    Dim ilPos As Integer
    Dim slStr As String
    Dim slMaxValue As String

    Select Case imRBBox
        Case 4
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcRB(Index).Text
            slStr = Left$(slStr, edcRB(Index).SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcRB(Index).SelStart - edcRB(Index).SelLength)
            slMaxValue = "999"
            'If tmPB1DP(imRBRow - 1).lTCost > 0 Then
            If tmPB1DP(imRBRow - 1).dTCost > 0 Then 'TTP 10439 - Rerate 21,000,000
                'slMaxValue = gDivStr("21000000", str$(tmPB1DP(imRBRow - 1).lTCost))
                slMaxValue = gDivStr("21000000", str$(tmPB1DP(imRBRow - 1).dTCost)) 'TTP 10439 - Rerate 21,000,000
                If gCompNumberStr(slMaxValue, "999") > 0 Then
                    slMaxValue = "999"
                End If
            End If
            If gCompNumberStr(slStr, slMaxValue) > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case 5  'Price
            ilPos = InStr(edcRB(Index).SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcRB(Index).Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcRB(Index).Text
            slStr = Left$(slStr, edcRB(Index).SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcRB(Index).SelStart - edcRB(Index).SelLength)
            slMaxValue = "9999999.99"
            If tmPB1DP(imRBRow - 1).lNoSpots > 0 Then
                slMaxValue = gDivStr("21000000", str$(tmPB1DP(imRBRow - 1).lNoSpots))
                If gCompNumberStr(slMaxValue, "9999999.99") > 0 Then
                    slMaxValue = "9999999.99"
                End If
            End If
            If gCompNumberStr(slStr, slMaxValue) > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case 8  'CPP
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case 9  'CPM
            ilPos = InStr(edcRB(Index).SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcRB(Index).Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
    End Select
End Sub

Private Sub edcRB_LostFocus(Index As Integer)
    mRBSetShow True
End Sub

Private Sub edcRBDatesSpots_Change(Index As Integer)
    Dim ilRet As Integer
    Dim slStr As String
    Dim slDate As String
    Dim slvalue As String
    Dim slTest As String

    slStr = lbcRBDatesSpots(Index).List(imRBDatesSpotsRow)
    ilRet = gParseItem(slStr, 1, "|", slDate)
    ilRet = gParseItem(slStr, 2, "|", slTest)
    slvalue = edcRBDatesSpots(Index).Text
    lbcRBDatesSpots(Index).List(imRBDatesSpotsRow) = slDate & "|" & slvalue
    If Index = 0 Then
        mSetMixedSpotFlag
    Else
        'If Val(slValue) <> Val(slTest) Then
            tmPB1DP(imRBRow - 1).iAudSet = False
            mSetMixDatesSpots
            tmPB1DP(imRBRow - 1).iSpotChg = True
        'End If
    End If
End Sub

Private Sub edcRBDatesSpots_GotFocus(Index As Integer)
    plcCalendar.Visible = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcRBDatesSpots_LostFocus(Index As Integer)
    edcRBDatesSpots(Index).Visible = False
End Sub

Private Sub edcRBWks_Change(Index As Integer)
    Dim slStr As String
    Dim llWkEndDate As Long
    Dim slDate As String
    Dim slEnd As String
    Dim slStartDate As String
    Dim ilLoop As Integer
    Dim slDateSpot As String
    Dim ilRet As Integer
    
    If Index = 0 Then
        slStr = edcRBWks(Index).Text
        If slStr = "" Then
            slStr = "0"
        End If
        If imRBOnWks <> Val(slStr) Then
            lbcRBDatesSpots(0).Clear
        End If
    ElseIf Index = 1 Then
        slStr = edcRBWks(Index).Text
        If slStr = "" Then
            slStr = "0"
        End If
        If imRBOffWks <> Val(slStr) Then
            lbcRBDatesSpots(0).Clear
        End If
    ElseIf Index = 2 Then
        tmcDelay.Enabled = False
        If imPBChgMode Then
            Exit Sub
        End If
        imPBChgMode = True
        If (Trim$(edcRBWks(2).Text) = "") Or (edcRBWks(2).Text = "0") Then
            edcRBWks(2).Text = "1"
        End If
        slDate = edcPBDate(0).Text
        If slDate = "" Then
            'mPBSetCommands
            imPBChgMode = False
            Exit Sub
        End If
        slStartDate = slDate
        If Not gValidDate(slDate) Then
            'mPBSetCommands
            imPBChgMode = False
            Exit Sub
        End If
        slDate = edcPBDate(1).Text
        If (slDate = "") Or Not gValidDate(slDate) Then
            llWkEndDate = gDateValue(slStartDate) + 7 * Val(edcRBWks(2).Text) - 1
        Else
            slEnd = gAdjYear(slDate)
            llWkEndDate = gDateValue(slStartDate) + 7 * Val(edcRBWks(2).Text) - 7
            Do Until gWeekDayLong(llWkEndDate) = gWeekDayStr(slEnd)
                llWkEndDate = llWkEndDate + 1
            Loop
        End If
        edcPBDate(1).Text = Format$(llWkEndDate, "m/d/yy")
        imPBChgMode = False
    ElseIf Index = 3 Then
        If (Trim$(smPowerCaption) = "Rate Bar") Then
            slStr = Trim$(edcRBWks(3).Text)
            For ilLoop = 0 To lbcRBDatesSpots(0).ListCount - 1 Step 1
                slDateSpot = lbcRBDatesSpots(0).List(ilLoop)
                ilRet = gParseItem(slDateSpot, 1, "|", slDate)
                lbcRBDatesSpots(0).List(ilLoop) = slDate & "|" & slStr
            Next ilLoop
            pbcLbcRBDatesSpots(0).Cls
            pbclbcRBDatesSpots_Paint 0
        End If
        mPBSetCommands
    End If
    mPBSetCommands
End Sub

Private Sub edcRBWks_GotFocus(Index As Integer)
    Dim slStr As String

    If Index = 0 Then
        imRBInLnGridOrSum = 0
        mRBSetShow True
        plcCalendar.Visible = False
        mAllSetShow 0
        gCtrlGotFocus ActiveControl
        slStr = edcRBWks(Index).Text
        If slStr = "" Then
            slStr = "0"
        End If
        imRBOnWks = Val(slStr)
    ElseIf Index = 1 Then
        imRBInLnGridOrSum = 0
        mRBSetShow True
        plcCalendar.Visible = False
        mAllSetShow 0
        gCtrlGotFocus ActiveControl
        slStr = edcRBWks(Index).Text
        If slStr = "" Then
            slStr = "0"
        End If
        imRBOffWks = Val(slStr)
    ElseIf Index = 2 Then
        plcCalendar.Visible = False
        mRBSetShow True
        mAllSetShow 7
        If Trim$(edcPBDate(0).Text) = "" Then
            edcPBDate(0).SetFocus
            Exit Sub
        End If
        If Not imBypassFocus Then
            gCtrlGotFocus ActiveControl
        End If
        imBypassFocus = False
    ElseIf Index = 3 Then
        plcCalendar.Visible = False
        mRBSetShow True
        mAllSetShow 7
        If Not imBypassFocus Then
            gCtrlGotFocus ActiveControl
        End If
        imBypassFocus = False
    End If
End Sub

Private Sub edcRBWks_KeyPress(Index As Integer, KeyAscii As Integer)
    Dim slStr As String
    If Index = 0 Then
    ElseIf Index = 1 Then
    ElseIf Index = 2 Then
        'Filter characters (allow only BackSpace, numbers 0 thru 9
        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
        slStr = edcRBWks(2).Text
        If (Trim$(slStr) = "") And (KeyAscii = KEY0) Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
        slStr = Left$(slStr, edcRBWks(2).SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcRBWks(2).SelStart - edcRBWks(2).SelLength)
        If gCompNumberStr(slStr, "0") = 0 Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
        If gCompNumberStr(slStr, "60") > 0 Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
    ElseIf Index = 3 Then
        'Filter characters (allow only BackSpace, numbers 0 thru 9
        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
        slStr = edcRBWks(3).Text
        slStr = Left$(slStr, edcRBWks(3).SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcRBWks(3).SelStart - edcRBWks(3).SelLength)
        If gCompNumberStr(slStr, "50") > 0 Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
    End If
End Sub

Private Sub edcRBWks_LostFocus(Index As Integer)
    Dim slOnStr As String
    Dim slOffStr As String
    Dim slStr As String
    
    If (Index = 0) Or (Index = 1) Then
        slOnStr = edcRBWks(0).Text
        slOffStr = edcRBWks(1).Text
        If (tmcDelay.Enabled = False) And ((Val(slOnStr) <> imRBOnWks) Or (Val(slOffStr) <> imRBOffWks)) Then
            If (Trim$(smPowerCaption) = "Rate Bar") Then
                'mPBSetCommands
                imRBOnWks = Val(slOnStr)
                imRBOffWks = Val(slOffStr)
            End If
        End If
    ElseIf Index = 2 Then
        mPBSetCommands
    ElseIf Index = 3 Then
        slStr = edcRBWks(3).Text
        If (tmcDelay.Enabled = False) And (Val(slStr) <> imPBSpots) Then
            If (Trim$(smPowerCaption) = "Rate Bar") Then
                imPBSpots = Val(slStr)
            End If
        End If
    End If
End Sub

Private Sub edcRevNo_Change()
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
        imLbcArrowSetting = True
        gMatchLookAhead edcRevNo, lbcRevNo, imBSMode, imComboBoxIndex
        Exit Sub
    End If
    mSetChg imHdBoxNo
End Sub

Private Sub edcRevNo_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcRevNo_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcRevNo_KeyPress(KeyAscii As Integer)
    Dim slStr As String
    Dim ilKey As Integer
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
        If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
            If edcRevNo.SelLength <> 0 Then    'avoid deleting two characters
                imBSMode = True 'Force deletion of character prior to selected text
            End If
        End If
        ilKey = KeyAscii
        If Not gCheckKeyAscii(ilKey) Then
            KeyAscii = 0
            Exit Sub
        End If
        Exit Sub
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And (KeyAscii <> KEYNEG) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index < 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4)) Then
        slStr = edcRevNo.Text
        slStr = Left$(slStr, edcRevNo.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcRevNo.SelStart - edcRevNo.SelLength)
        If gCompNumberStr(slStr, "999") > 0 Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
    End If
End Sub

Private Sub edcRevNo_KeyUp(KeyCode As Integer, Shift As Integer)
    If ((Shift And vbCtrlMask) > 0) And (KeyCode >= KEYLEFT) And (KeyCode <= KeyDown) Then
        imDirProcess = KeyCode 'mDirection 0
        pbcHdTab.SetFocus
        Exit Sub
    End If
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
        If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
            gProcessArrowKey Shift, KeyCode, lbcRevNo, imLbcArrowSetting
            edcRevNo.SelStart = 0
            edcRevNo.SelLength = Len(edcRevNo.Text)
        End If
        Exit Sub
    End If
End Sub

Private Sub edcShareDropDown_Change()
    Dim slStr As String
    Dim ilRet As Integer
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            Select Case imNoBoxNo
                Case NOPROPINDEX
                Case NOESTINDEX
                Case NORESVADVTINDEX
                    imLbcArrowSetting = True
                    gMatchLookAhead edcShareDropDown, lbcResvAdvt, imBSMode, imComboBoxIndex
                Case NORESVORDERINDEX
                    imLbcArrowSetting = True
                    gMatchLookAhead edcShareDropDown, lbcResv, imBSMode, imComboBoxIndex
                Case NODATEINDEX
                    slStr = edcShareDropDown.Text
                    If Not gValidDate(slStr) Then
                        mSetCommands
                        Exit Sub
                    End If
                    smDtNeeded = slStr
                    gObtainMonthYear imCalType, smDtNeeded, imCalMonth, imCalYear
                    pbcCalendar_Paint   'mBoxCalDate called within paint
            End Select
            imLbcArrowSetting = False
            mNoSetChg imNoBoxNo
        Case COMPINDEX   'Competitive
            Select Case imCEBoxNo
                Case CECOMPINDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcComp(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcComp(0).ListIndex = 1
                    End If
                Case CECOMPINDEX + 1
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcComp(1), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcComp(1).ListIndex = 1
                    End If
                Case CEEXCLINDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcExcl(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcComp(0).ListIndex = 1
                    End If
                Case CEEXCLINDEX + 1
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcExcl(1), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcExcl(1).ListIndex = 1
                    End If
                Case CEBUSCATINDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcBusCat, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcBusCat.ListIndex = 1
                    End If
            End Select
            imLbcArrowSetting = False
            mCESetChg imCEBoxNo
        Case SPERSONINDEX   'Salesperson
            Select Case imSPBoxNo
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcSPerson(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        If imSPBoxNo = SPNAME1INDEX Then
                            lbcSPerson(0).ListIndex = 0     'New
                        Else
                            lbcSPerson(0).ListIndex = 1     'None
                        End If
                    End If
                Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
                    If tgSpf.sSubCompany = "Y" Then
                        imLbcArrowSetting = True
                        gMatchLookAhead edcShareDropDown, lbcVehGp6, imBSMode, imComboBoxIndex
                    End If
                Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
                Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            End Select
            imLbcArrowSetting = False
            mSPSetChg imSPBoxNo
        Case SHAREINDEX '% Budget
            Select Case imSBBoxNo
                Case SBYCOMPANYINDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcShareBudget(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcShareBudget(0).ListIndex = 0     'New
                    End If
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcShareBudget(1), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcShareBudget(1).ListIndex = 1
                    End If
                Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            End Select
            imLbcArrowSetting = False
            mSBSetChg imSBBoxNo
        Case REVSETINDEX 'Revenue set
            Select Case imRSBoxNo
                Case RSREV1INDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcRevSet(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcRevSet(0).ListIndex = 1
                    End If
                Case RSREV2INDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcRevSet(1), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcRevSet(1).ListIndex = 1
                    End If
                Case RSREV3INDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcRevSet(2), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcRevSet(2).ListIndex = 1
                    End If
                Case RSREV4INDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcRevSet(3), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcRevSet(3).ListIndex = 1
                    End If
                Case RSREV5INDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcRevSet(4), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcRevSet(4).ListIndex = 1
                    End If
            End Select
            imLbcArrowSetting = False
            mRSSetChg imRSBoxNo
        Case DEMOINDEX 'Demo Code
            Select Case imDMBoxNo
                Case DMDEMOINDEX
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcDemo(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcDemo(0).ListIndex = 0
                    End If
                Case DMDEMOINDEX + 2
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcDemo(1), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcDemo(1).ListIndex = 0
                    End If
                Case DMDEMOINDEX + 4
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcDemo(2), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcDemo(2).ListIndex = 0
                    End If
                Case DMDEMOINDEX + 6
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcShareDropDown, lbcDemo(3), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcDemo(3).ListIndex = 0
                    End If
            End Select
            imLbcArrowSetting = False
            mDmSetChg imDMBoxNo
        Case TRADEINDEX '% Trade
            mPTSetChg imPTBoxNo
    End Select
End Sub

Private Sub edcShareDropDown_DblClick()
    imDoubleClickName = True    'Double click event foolowed by mouse up
End Sub

Private Sub edcShareDropDown_GotFocus()
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            Select Case imNoBoxNo
                Case NOPROPINDEX
                    edcShareDropDown.Text = Trim$(edcShareDropDown.Text)
                Case NORESVADVTINDEX
                    If lbcResvAdvt.ListCount = 1 Then
                    End If
                Case NORESVORDERINDEX
                    If lbcResv.ListCount = 1 Then
                    End If
            End Select
        Case COMPINDEX   'Competitive
            Select Case imCEBoxNo
                Case CECOMPINDEX
                    If lbcComp(0).ListCount = 1 Then
                    End If
                Case CECOMPINDEX + 1
                    If lbcComp(1).ListCount = 1 Then
                    End If
                Case CEEXCLINDEX
                    If lbcExcl(0).ListCount = 1 Then
                    End If
                Case CEEXCLINDEX + 1
                    If lbcExcl(1).ListCount = 1 Then
                    End If
                Case CEBUSCATINDEX
            End Select
        Case SPERSONINDEX   'Salesperson
            Select Case imSPBoxNo
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
                Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
                Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            End Select
        Case SHAREINDEX '% Budget
            Select Case imSBBoxNo
                Case SBYCOMPANYINDEX
                    If lbcShareBudget(0).ListCount = 3 Then
                    End If
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            End Select
        Case REVSETINDEX 'Revenue set
            Select Case imRSBoxNo
                Case RSREV1INDEX
                Case RSREV2INDEX
                Case RSREV3INDEX
                Case RSREV4INDEX
                Case RSREV5INDEX
            End Select
        Case DEMOINDEX 'Demo Code
            Select Case imDMBoxNo
                Case DMDEMOINDEX
                    If lbcDemo(0).ListCount = 1 Then
                    End If
                Case DMDEMOINDEX + 2
                    If lbcDemo(1).ListCount = 1 Then
                    End If
                Case DMDEMOINDEX
                    If lbcDemo(2).ListCount = 1 Then
                    End If
                Case DMDEMOINDEX + 6
                    If lbcDemo(3).ListCount = 1 Then
                    End If
            End Select
        Case TRADEINDEX '% Trade
    End Select
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcShareDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcShareDropDown_KeyPress(KeyAscii As Integer)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilRowNo                       ilColNo                       flY                       *
'*  flX                                                                                   *
'******************************************************************************************

    Dim ilKey As Integer
    Dim ilPos As Integer
    Dim slStr As String

    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcShareDropDown.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            Select Case imNoBoxNo
                Case NOPROPINDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcShareDropDown.Text
                    slStr = Left$(slStr, edcShareDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcShareDropDown.SelStart - edcShareDropDown.SelLength)
                    If gCompNumberStr(slStr, "999999999") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case NOESTINDEX
                Case NODATEINDEX
                    'Filter characters (allow only BackSpace, numbers 0 thru 9
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
            End Select
        Case COMPINDEX   'Competitive
        Case SPERSONINDEX   'Salesperson
            Select Case imSPBoxNo
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                Case Else
                    If imTestNum Then
                        ilPos = InStr(edcShareDropDown.SelText, ".")
                        If ilPos = 0 Then
                            ilPos = InStr(edcShareDropDown.Text, ".")    'Disallow multi-decimal points
                            If ilPos > 0 Then
                                If KeyAscii = KEYDECPOINT Then
                                    Beep
                                    KeyAscii = 0
                                    Exit Sub
                                End If
                            End If
                        End If
                        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                        slStr = edcShareDropDown.Text
                        slStr = Left$(slStr, edcShareDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcShareDropDown.SelStart - edcShareDropDown.SelLength)
                        If gCompNumberStr(slStr, "100.0000") > 0 Then
                            Beep
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
            End Select
        Case SHAREINDEX '% Budget
            Select Case imSBBoxNo
                Case SBYCOMPANYINDEX
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcShareDropDown.Text
                    slStr = Left$(slStr, edcShareDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcShareDropDown.SelStart - edcShareDropDown.SelLength)
                    If gCompNumberStr(slStr, "100") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
            End Select
        Case REVSETINDEX 'Revenue set
        Case DEMOINDEX 'Demo Code
            If (imDMBoxNo = DMVALUEINDEX) Or (imDMBoxNo = DMVALUEINDEX + 2) Or (imDMBoxNo = DMVALUEINDEX + 4) Or (imDMBoxNo = DMVALUEINDEX + 6) Then
                If imCppCpm = 2 Then 'CPP- without decimal point
                    'Filter characters (allow only BackSpace, numbers 0 thru 9
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcShareDropDown.Text
                    slStr = Left$(slStr, edcShareDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcShareDropDown.SelStart - edcShareDropDown.SelLength)
                    If gCompNumberStr(slStr, "99999") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Else
                    ilPos = InStr(edcShareDropDown.SelText, ".")
                    If ilPos = 0 Then
                        ilPos = InStr(edcShareDropDown.Text, ".")    'Disallow multi-decimal points
                        If ilPos > 0 Then
                            If KeyAscii = KEYDECPOINT Then
                                Beep
                                KeyAscii = 0
                                Exit Sub
                            End If
                        End If
                    End If
                    'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                    slStr = edcShareDropDown.Text
                    slStr = Left$(slStr, edcShareDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcShareDropDown.SelStart - edcShareDropDown.SelLength)
                    If gCompNumberStr(slStr, "999.99") > 0 Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
        Case TRADEINDEX '% Trade
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcShareDropDown.Text
            slStr = Left$(slStr, edcShareDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcShareDropDown.SelStart - edcShareDropDown.SelLength)
            If gCompNumberStr(slStr, "100") > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            
             'L.Bianchi 06/16/2021 TTP 10185
            If gCompNumberStr(slStr, "0") <> 0 And gCompNumberStr(smPctTrade, "0") <> 1 Then
                imAgyComm = -1
            End If
    End Select
End Sub

Private Sub edcShareDropDown_KeyUp(KeyCode As Integer, Shift As Integer)

    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imNoBoxNo
                    Case NODATEINDEX
                        If (Shift And vbAltMask) > 0 Then
                            plcCalendar.Visible = Not plcCalendar.Visible
                        Else
                            If gValidDate(smDtNeeded) Then
                                If KeyCode = KEYUP Then 'Up arrow
                                    smDtNeeded = Format$(gDateValue(smDtNeeded) - 7, "m/d/yy")
                                Else
                                    smDtNeeded = Format$(gDateValue(smDtNeeded) + 7, "m/d/yy")
                                End If
                                gObtainMonthYear imCalType, smDtNeeded, imCalMonth, imCalYear
                                edcShareDropDown.Text = smDtNeeded
                            End If
                        End If
                    Case NORESVADVTINDEX
                        gProcessArrowKey Shift, KeyCode, lbcResvAdvt, imLbcArrowSetting
                    Case NORESVORDERINDEX
                        gProcessArrowKey Shift, KeyCode, lbcResv, imLbcArrowSetting
                End Select
                edcShareDropDown.SelStart = 0
                edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            End If
            If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
                Select Case imNoBoxNo
                    Case NODATEINDEX
                        If (Shift And vbAltMask) > 0 Then
                        Else
                            If gValidDate(smDtNeeded) Then
                                If KeyCode = KEYLEFT Then 'Left arrow
                                    smDtNeeded = Format$(gDateValue(smDtNeeded) - 1, "m/d/yy")
                                Else
                                    smDtNeeded = Format$(gDateValue(smDtNeeded) + 1, "m/d/yy")
                                End If
                                gObtainMonthYear imCalType, smDtNeeded, imCalMonth, imCalYear
                                edcShareDropDown.Text = smDtNeeded
                            End If
                        End If
                End Select
                edcShareDropDown.SelStart = 0
                edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            End If
        Case COMPINDEX   'Competitive
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imCEBoxNo
                    Case CECOMPINDEX
                        gProcessArrowKey Shift, KeyCode, lbcComp(0), imLbcArrowSetting
                    Case CECOMPINDEX + 1
                        gProcessArrowKey Shift, KeyCode, lbcComp(1), imLbcArrowSetting
                    Case CEEXCLINDEX
                        gProcessArrowKey Shift, KeyCode, lbcExcl(0), imLbcArrowSetting
                    Case CEEXCLINDEX + 1
                        gProcessArrowKey Shift, KeyCode, lbcExcl(1), imLbcArrowSetting
                    Case CEBUSCATINDEX
                        gProcessArrowKey Shift, KeyCode, lbcBusCat, imLbcArrowSetting
                End Select
                edcShareDropDown.SelStart = 0
                edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            End If
       Case SPERSONINDEX   'Salesperson
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imSPBoxNo
                    'Case SPNAME1INDEX, SPNAME2INDEX, SPNAME3INDEX, SPNAME4INDEX, SPNAME5INDEX, SPNAME6INDEX, SPNAME7INDEX, SPNAME8INDEX 'Name
                    Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                        gProcessArrowKey Shift, KeyCode, lbcSPerson(0), imLbcArrowSetting
                        edcShareDropDown.SelStart = 0
                        edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
                    Case Else
                        If imTestNum Then
                        Else
                            gProcessArrowKey Shift, KeyCode, lbcVehGp6, imLbcArrowSetting
                        End If
                End Select
            End If
        Case SHAREINDEX '% Budget
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imSBBoxNo
                    Case SBYCOMPANYINDEX
                        gProcessArrowKey Shift, KeyCode, lbcShareBudget(0), imLbcArrowSetting
                        edcShareDropDown.SelStart = 0
                        edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
                    Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                        gProcessArrowKey Shift, KeyCode, lbcShareBudget(1), imLbcArrowSetting
                        edcShareDropDown.SelStart = 0
                        edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
                    Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
                End Select
            End If
        Case REVSETINDEX 'Revenue set
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imRSBoxNo
                    Case RSREV1INDEX
                        gProcessArrowKey Shift, KeyCode, lbcRevSet(0), imLbcArrowSetting
                    Case RSREV2INDEX
                        gProcessArrowKey Shift, KeyCode, lbcRevSet(1), imLbcArrowSetting
                    Case RSREV3INDEX
                        gProcessArrowKey Shift, KeyCode, lbcRevSet(2), imLbcArrowSetting
                    Case RSREV4INDEX
                        gProcessArrowKey Shift, KeyCode, lbcRevSet(3), imLbcArrowSetting
                    Case RSREV5INDEX
                        gProcessArrowKey Shift, KeyCode, lbcRevSet(4), imLbcArrowSetting
                End Select
                edcShareDropDown.SelStart = 0
                edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            End If
        Case COMPINDEX   'Competitive
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imCEBoxNo
                    Case CECOMPINDEX
                        gProcessArrowKey Shift, KeyCode, lbcComp(0), imLbcArrowSetting
                    Case CECOMPINDEX + 1
                        gProcessArrowKey Shift, KeyCode, lbcComp(1), imLbcArrowSetting
                    Case CEEXCLINDEX
                        gProcessArrowKey Shift, KeyCode, lbcExcl(0), imLbcArrowSetting
                    Case CEEXCLINDEX + 1
                        gProcessArrowKey Shift, KeyCode, lbcExcl(1), imLbcArrowSetting
                    Case CEBUSCATINDEX
                        gProcessArrowKey Shift, KeyCode, lbcBusCat, imLbcArrowSetting
                End Select
                edcShareDropDown.SelStart = 0
                edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            End If
        Case DEMOINDEX 'Demo Code
            If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
                Select Case imDMBoxNo
                    Case DMDEMOINDEX
                        gProcessArrowKey Shift, KeyCode, lbcDemo(0), imLbcArrowSetting
                    Case DMDEMOINDEX + 2
                        gProcessArrowKey Shift, KeyCode, lbcDemo(1), imLbcArrowSetting
                    Case DMDEMOINDEX + 4
                        gProcessArrowKey Shift, KeyCode, lbcDemo(2), imLbcArrowSetting
                    Case DMDEMOINDEX + 6
                        gProcessArrowKey Shift, KeyCode, lbcDemo(3), imLbcArrowSetting
                End Select
                edcShareDropDown.SelStart = 0
                edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            End If
        Case TRADEINDEX '% Trade
    End Select
End Sub

Private Sub edcShareDropDown_LostFocus()

    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            Select Case imNoBoxNo
                Case NOPROPINDEX
            End Select
        Case COMPINDEX   'Competitive
        Case SPERSONINDEX   'Salesperson
        Case SHAREINDEX '% Budget
        Case REVSETINDEX 'Revenue set
        Case DEMOINDEX 'Demo Code
        Case TRADEINDEX '% Trade
    End Select
End Sub

Private Sub edcShareDropDown_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
        Case COMPINDEX   'Competitive
            If imDoubleClickName Then
                Select Case imCEBoxNo
                    Case CECOMPINDEX, CECOMPINDEX + 1, CEEXCLINDEX, CEEXCLINDEX + 1, CEBUSCATINDEX
                        If imTabDirection = -1 Then  'Right To Left
                            pbcShareSTab.SetFocus
                        Else
                            pbcShareTab.SetFocus
                        End If
                        Exit Sub
                End Select
                imDoubleClickName = False
            End If
        Case SPERSONINDEX   'Salesperson
            If imDoubleClickName Then
                Select Case imSPBoxNo
                    'Case SPNAME1INDEX, SPNAME2INDEX, SPNAME3INDEX, SPNAME4INDEX, SPNAME5INDEX, SPNAME6INDEX, SPNAME7INDEX, SPNAME8INDEX, SPPNAMEINDEX, SPMNAMEINDEX 'Name
                    Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                        If imTabDirection = -1 Then  'Right To Left
                            pbcShareSTab.SetFocus
                        Else
                            pbcShareTab.SetFocus
                        End If
                        Exit Sub
                    Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
                        If tgSpf.sSubCompany = "Y" Then
                            If imTabDirection = -1 Then  'Right To Left
                                pbcShareSTab.SetFocus
                            Else
                                pbcShareTab.SetFocus
                            End If
                            Exit Sub
                        End If
                End Select
                imDoubleClickName = False
            End If
        Case SHAREINDEX '% Budget
            If imDoubleClickName Then
                Select Case imSBBoxNo
                    Case SBYCOMPANYINDEX, SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                        If imTabDirection = -1 Then  'Right To Left
                            pbcShareSTab.SetFocus
                        Else
                            pbcShareTab.SetFocus
                        End If
                        Exit Sub
                End Select
                imDoubleClickName = False
            End If
        Case REVSETINDEX 'Revenue set
            If imDoubleClickName Then
                Select Case imRSBoxNo
                    Case RSREV1INDEX, RSREV2INDEX, RSREV3INDEX, RSREV4INDEX, RSREV5INDEX
                        If imTabDirection = -1 Then  'Right To Left
                            pbcShareSTab.SetFocus
                        Else
                            pbcShareTab.SetFocus
                        End If
                        Exit Sub
                End Select
                imDoubleClickName = False
            End If
        Case DEMOINDEX 'Demo Code
        Case TRADEINDEX '% Trade
    End Select
End Sub

Private Sub edcStepDropDown_Change()
    Select Case imStepBoxNo
        Case STEP1INDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcStepDropDown, lbcStep(0), imBSMode, imComboBoxIndex
            imStep1Index = lbcStep(0).ListIndex
            If imStep1Index >= 0 Then
                imStep1Index = imStep1Map(imStep1Index)
            End If
            gSetShow pbcSelect, "", tmStepCtrls(STEP2INDEX)
            gSetShow pbcSelect, "", tmStepCtrls(STEP3INDEX)
            pbcSelect.Cls
            pbcHeader.Cls
            pbcLnTotal.Cls
            pbcLnDates.Cls
            pbcLine.Cls
            cbcDifference.Visible = False
            If sgCntrScreen <> "Orders" Then
                If igFreezeState = 0 Then
                    cmcScale.Enabled = True
                Else
                    cmcScale.Enabled = False
                End If
            End If
            cbcDifference.Clear
            imDiffMode = False
            mPaintHdTitle
            mPaintLnTitle
            mPaintLnDates
            mPaintLnTotal
            mPaintStep
            lbcStep(1).Clear
            lbcStep(2).Clear
            lbcStep2Code.Clear
            ReDim tmStep3Code(0 To 0) As SORTCODE    'lbcStep3Code.Clear
            lbcStep2Code.Tag = ""
            smStep3CodeTag = "" 'lbcStep3Code.Tag = ""
            imStep2Index = -1
            imStep3Index = -2
            mClearCtrlFields 'If coming from [New], select_change will not be generated
            lacLnTotals(0).Visible = False    'Same call as in mCntrTotals and mInit
            lacLnTotals(1).Visible = False    'Same call as in mCntrTotals and mInit
            lacLnTotals(2).Visible = False    'Same call as in mCntrTotals and mInit
            lacCreditInfo.Visible = False
            lacPayInfo.Visible = False
            lacSchStatus.Visible = False
            lacAudTotals.Visible = False
            lacAdServerCpmInfo.Visible = False
            lacTotalCpmInfo.Visible = False
            If sgCntrScreen = "Orders" Then
                If (imStep1Index >= 0) And (imStep1Index <= 3) Then
                    If (igWinStatus(CONTRACTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
                        imUpdateAllowed = False
                    Else
                        imUpdateAllowed = True
                    End If
                Else
                    imUpdateAllowed = False
                End If
            Else
                If (imStep1Index >= 0) And (imStep1Index <= 5) Then
                    If (igWinStatus(PROPOSALSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
                        imUpdateAllowed = False
                    Else
                        imUpdateAllowed = True
                    End If
                Else
                    imUpdateAllowed = False
                End If
            End If
            If Not imUpdateAllowed Then
'                plcPower.Visible = False
'                plcLine.Visible = True
'                pbcLine.Visible = True
'                pbcLnTotal.Visible = True
'                vbcLines.Visible = True
'                'lacLines.Visible = True
'                If laclnFrame.Visible Then
'                    pbcLineArrow.Visible = True
'                Else
'                    pbcLineArrow.Visible = False
'                End If
'                'cmcPower.Visible = False
'                'cmcPower.Caption = "&Power Bar"
'                cmcRates.Visible = False

            Else
            End If

            mSetCommands
        Case STEP2INDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcStepDropDown, lbcStep(1), imBSMode, imComboBoxIndex
            imStep2Index = lbcStep(1).ListIndex
            gSetShow pbcSelect, "", tmStepCtrls(STEP3INDEX)
            pbcSelect.Cls
            pbcHeader.Cls
            pbcLnTotal.Cls
            pbcLnDates.Cls
            pbcLine.Cls
            mPaintHdTitle
            mPaintLnTitle
            mPaintLnDates
            mPaintLnTotal
            mPaintStep
            lbcStep(2).Clear
            ReDim tmStep3Code(0 To 0) As SORTCODE   'lbcStep3Code.Clear
            smStep3CodeTag = "" 'lbcStep3Code.Tag = ""
            imStep3Index = -2
            cbcDifference.Visible = False
            If sgCntrScreen <> "Orders" Then
                If igFreezeState = 0 Then
                    cmcScale.Enabled = True
                Else
                    cmcScale.Enabled = False
                End If
            End If
            cbcDifference.Clear
            imDiffMode = False
            mClearCtrlFields 'If coming from [New], select_change will not be generated
            lacLnTotals(0).Visible = False    'Same call as in mCntrTotals and mInit
            lacLnTotals(1).Visible = False    'Same call as in mCntrTotals and mInit
            lacLnTotals(2).Visible = False
            lacCreditInfo.Visible = False
            lacPayInfo.Visible = False
            lacSchStatus.Visible = False
            lacAudTotals.Visible = False
            lacAdServerCpmInfo.Visible = False
            lacTotalCpmInfo.Visible = False
            pbcSelect_Paint
            mSetCommands
        Case STEP3INDEX
            'imLbcArrowSetting = True
            'ilRet = gOptionalLookAhead(edcStepDropDown, lbcStep(2), imBSMode, slStr)
            pbcHeader.Cls
            pbcLnTotal.Cls
            pbcLnDates.Cls
            pbcLine.Cls
            mPaintHdTitle
            mPaintLnTitle
            mPaintLnDates
            mPaintLnTotal
            mPaintStep
            cbcDifference.Visible = False
            If sgCntrScreen <> "Orders" Then
                If igFreezeState = 0 Then
                    cmcScale.Enabled = True
                Else
                    cmcScale.Enabled = False
                End If
            End If
            cbcDifference.Clear
            imDiffMode = False
            mClearCtrlFields 'If coming from [New], select_change will not be generated
            lacLnTotals(0).Visible = False    'Same call as in mCntrTotals and mInit
            lacLnTotals(1).Visible = False    'Same call as in mCntrTotals and mInit
            lacLnTotals(2).Visible = False
            lacCreditInfo.Visible = False
            lacPayInfo.Visible = False
            lacSchStatus.Visible = False
            lacAudTotals.Visible = False
            lacAdServerCpmInfo.Visible = False
            lacTotalCpmInfo.Visible = False
            
            'If ilRet = 1 Then
            '    lbcStep(2).ListIndex = 0
            'End If
            tmcClick.Enabled = False
            If edcStepDropDown.Text <> "" Then
                If imInSelect = False Then
                    imSelectDelay = True
                    tmcClick.Interval = 2000    '2 seconds
                    tmcClick.Enabled = True
                End If
            End If
    End Select
End Sub

Private Sub edcStepDropDown_GotFocus()
    Select Case imStepBoxNo
        Case STEP1INDEX
            If lbcStep(0).ListCount = 1 Then
            End If
        Case STEP2INDEX
            If imStep1Index = 0 Then    'Create from scratch
                imStep2Index = -1
                If imTabDirection = -1 Then  'Right To Left
                    pbcStepSTab.SetFocus
                Else
                    pbcStepTab.SetFocus
                End If
                Exit Sub
            End If
            If lbcStep(1).ListCount = 1 Then
            End If
        Case STEP3INDEX
            If imStep1Index = 0 Then    'Create from scratch
                If imTabDirection = -1 Then  'Right To Left
                    pbcStepSTab.SetFocus
                Else
                    pbcStepTab.SetFocus
                End If
                Exit Sub
            End If
            If lbcStep(2).ListCount = 1 Then
                lbcStep(2).ListIndex = 0
            End If
    End Select
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub

Private Sub edcStepDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcStepDropDown_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer

    If KeyAscii <> 13 Then
        tmcClick.Enabled = False
        imSelectDelay = False
    End If
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcStepDropDown.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcStepDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        Select Case imStepBoxNo
            Case STEP1INDEX
                gProcessArrowKey Shift, KeyCode, lbcStep(0), imLbcArrowSetting
            Case STEP2INDEX
                gProcessArrowKey Shift, KeyCode, lbcStep(1), imLbcArrowSetting
            Case STEP3INDEX
                If imStep2Index > 0 Then
                    gProcessArrowKey Shift, KeyCode, lbcStep(2), imLbcArrowSetting
                End If
        End Select
        edcStepDropDown.SelStart = 0
        edcStepDropDown.SelLength = Len(edcStepDropDown.Text)
    End If
End Sub

Private Sub edcStepDropDown_LostFocus()
    If imSelectDelay Then
        tmcClick.Enabled = False
        pbcEatTab(1).Enabled = False
        pbcEatTab(0).Enabled = False
        imSelectDelay = False
        mSelectChange
    End If
End Sub

Private Sub Form_Activate()
    If Not imFirstActivate Then
        DoEvents    'Process events so pending keys are not sent to this
                    'form when keypreview turn on
        gShowBranner imUpdateAllowed
        Contract.KeyPreview = True  'To get Alt J and Alt L keys
        imLoadingForm = False
        Exit Sub
    End If
    imFirstActivate = False
    If sgCntrScreen = "Orders" Then
        If (igWinStatus(CONTRACTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
            imUpdateAllowed = False
        Else
            imUpdateAllowed = True
        End If
       '10843 remove dead code
'        If tgSpf.sCLnStdQt = "Y" Then
'            pbcQTPrice.Visible = True
'            ''pbcQTPrice.Move 8595, 30, 165, 330
'            'pbcQTPrice.Move tmLnCtrls(PRICEINDEX).fBoxX + 675, 30, tmLnCtrls(PRICEINDEX).fBoxW - 675, tmLnCtrls(PRICEINDEX).fBoxY - 30
'            'lbcQtPrice.Move pbcLine.Left + pbcQTPrice.Left + pbcQTPrice.Width - lbcQtPrice.Width, pbcLine.Top + pbcQTPrice.Top - lbcQtPrice.Height
'            ''lacPrice(0).Move 7920, 30, 690, 330
'            'lacPrice(0).Move tmLnCtrls(PRICEINDEX).fBoxX, 30, tmLnCtrls(PRICEINDEX).fBoxW - 165, tmLnCtrls(PRICEINDEX).fBoxY - 30
'            imLnTotalType = 2
'            lacPrice(0).Caption = lbcQtPrice.List(imLnTotalType)
'        Else
            pbcQTPrice.Visible = False
   '     End If
        cmcScale.Visible = False
    Else
        If (igWinStatus(PROPOSALSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
            imUpdateAllowed = False
        Else
            imUpdateAllowed = True
        End If
        'lacPrice(0).Move 7920, 30, 840, 165
        'lacPrice(0).Move 7920, 30, 840, 330
       '10843 remove dead code
'        If tgSpf.sCLnStdQt = "Y" Then
'            pbcQTPrice.Visible = True
'            ''pbcQTPrice.Move 8595, 30, 165, 330
'            'pbcQTPrice.Move tmLnCtrls(PRICEINDEX).fBoxX + 675, 30, tmLnCtrls(PRICEINDEX).fBoxW - 675, tmLnCtrls(PRICEINDEX).fBoxY - 30
'            'lbcQtPrice.Move pbcLine.Left + pbcQTPrice.Left + pbcQTPrice.Width - lbcQtPrice.Width, pbcLine.Top + pbcQTPrice.Top - lbcQtPrice.Height
'            'lacPrice(0).Move 7920, 30, 690, 330
'            'lacPrice(0).Move tmLnCtrls(PRICEINDEX).fBoxX, 30, tmLnCtrls(PRICEINDEX).fBoxW, tmLnCtrls(PRICEINDEX).fBoxY - 30
'            imLnTotalType = 2
'            lacPrice(0).Caption = lbcQtPrice.List(imLnTotalType)
'        Else
            pbcQTPrice.Visible = False
            'lacPrice(0).Move 7920, 30, 840, 330
            lacPrice(0).Move tmLnCtrls(PRICEINDEX).fBoxX, 30, tmLnCtrls(PRICEINDEX).fBoxW, tmLnCtrls(PRICEINDEX).fBoxY - 30
            lacPrice(1).Move tmLnCtrls(WKSPOTSINDEX).fBoxX - lacPrice(1).Width - 30, 0
      '  End If
        If igFreezeState = 0 Then
            cmcScale.Enabled = True
        Else
            cmcScale.Enabled = False
        End If
    End If
   '10843 remove dead code
'    If tgSpf.sCLnStdQt = "Y" Then
'        pbcSumType(1).Visible = False
'        lacPrice(0).Visible = True
'    Else
        lacPrice(0).Visible = False
        pbcSumType(1).Visible = True
  '  End If
    igUpdateAllowed = imUpdateAllowed
    mInitActive
    gShowBranner imUpdateAllowed
    mSetCommands
    DoEvents    'Process events so pending keys are not sent to this
                'form when keypreview turn on
    Contract.KeyPreview = True  'To get Alt J and Alt L keys
    Me.ZOrder 0 'Send to front
    Contract.Refresh
    imLoadingForm = False
    'JW 9/16/21 - TTP 10305 - Proposals/Orders: when pressing the Proposal or Order Jobs button, focus no longer goes to task 1 (in the upper left corner)
    If lgAlertCntrNo = 0 Then
        'Only Focus 1st control when no Contract is being loaded
        imStepBoxNo = STEP1INDEX
        mStepEnableBox STEP1INDEX '2021/8/29 Luigi: commenting this line to fix ttp# 10254
    End If
    
End Sub

Public Sub mCreateEmailButton()
    If sgCntrScreen <> "Orders" Then
        Load imcShare(2)
        With imcShare(2)
            .Visible = True
            .Picture = IconTraf!imcEmail.Picture
            .Left = imcShare(0).Left - .Width - 50
            .Top = 50
        End With
    End If
End Sub

Private Sub Form_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub Form_Deactivate()
    imDeactivated = True
    Contract.KeyPreview = False
End Sub

Private Sub Form_Initialize()
        imLoadingForm = True
End Sub

Private Sub Form_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYF1) Or (KeyCode = KEYF4) Or (KeyCode = KEYF5) Then
        plcCalendar.Visible = False
        plcTme.Visible = False
        gFunctionKeyBranch KeyCode
        If imDBBoxNo > 0 Then
            mDBEnableBox imDBBoxNo
        'ElseIf imDGBoxNo > 0 Then
        '    mDGEnableBox imDGBoxNo
        'ElseIf imAirBoxNo > 0 Then
        '    mAirEnableBox imAirBoxNo
        ElseIf imDMBoxNo > 0 Then
            mDmEnableBox imDMBoxNo
        ElseIf imCEBoxNo > 0 Then
            mCEEnableBox imCEBoxNo
        ElseIf imPTBoxNo > 0 Then
            mPTEnableBox imPTBoxNo
        ElseIf imNoBoxNo > 0 Then
            mNoEnableBox imNoBoxNo
        ElseIf imSBBoxNo > 0 Then
            mSBEnableBox imSBBoxNo
        ElseIf imSPBoxNo > 0 Then
            mSPEnableBox imSPBoxNo
        ElseIf imRSBoxNo > 0 Then
            mRSEnableBox imRSBoxNo
        ElseIf imOVBoxNo > 0 Then
            mOvEnableBox imOVBoxNo
        ElseIf imLnBoxNo > 0 Then
            mLnEnableBox imLnBoxNo
        ElseIf imHdBoxNo > 0 Then
            mEnableBox imHdBoxNo
        End If
    End If
End Sub

Private Sub Form_Load()
    '4/28/07:  Adjust for varibale screen size
    imLoadingForm = True
    '10256
    gSetAct1ToBlank
    If Screen.Width * 15 = 640 Then
        fmAdjFactorW = 1#
        fmAdjFactorH = 1#
    Else
        fmAdjFactorW = ((lgPercentAdjW * ((Screen.Width) / (640 * 15 / Me.Width))) / 100) / Me.Width
        Me.Width = (lgPercentAdjW * ((Screen.Width) / (640 * 15 / Me.Width))) / 100
        fmAdjFactorH = ((lgPercentAdjH * ((Screen.height) / (480 * 15 / Me.height))) / 100) / Me.height
        Me.height = (lgPercentAdjH * ((Screen.height) / (480 * 15 / Me.height))) / 100
    End If
    mInitLoad  'Moved to active as contract.caption is not set until then
    If sgCntrScreen = "Orders" Then
        If (igWinStatus(CONTRACTSJOB) = 0) Then
            imTerminate = True
        End If
    Else
        If tgSpf.sGUsePropSys = "Y" Then
            If igWinStatus(PROPOSALSJOB) = 0 Then
                imTerminate = True
            End If
        Else
            imTerminate = True
        End If
    End If
    If imTerminate Then
        imLoadingForm = False
        cmcCancel_Click
    End If
End Sub

Private Sub Form_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub Form_Unload(Cancel As Integer)
    Dim ilRet As Integer

    On Error Resume Next
    
    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
    
    If Not igTerminateAndUnload Then
        If Not igManUnload Then
            '8/27/19: Added this setting to avoid error message with proposal starting up will closing down
            bmInCancel = True
            mAllSetShow 0
            bmInCancel = False
            
            If mSaveRecChg(True) = False Then
                If imTerminate Then
                    Exit Sub
                End If
                '11/2/19
                'If imAirBoxNo <> -1 Then
                '    mAirEnableBox imAirBoxNo
                'ElseIf imDGBoxNo <> -1 Then
                '    mDGEnableBox imDGBoxNo
                'lseIf imLnBoxNo <> -1 Then
                If imLnBoxNo <> -1 Then
                    mSetRowVisible
                    mLnEnableBox imLnBoxNo
                Else
                    mEnableBox imHdBoxNo
                End If
                Cancel = 1
                igStopCancel = True
                Exit Sub
            End If
        End If
        ''2/19/10: Clear array and lock if user is exiting Traffic without first exiting Contracts
        'ilRet = 0
        'On Error GoTo UnloadErr
        'If UBound(tgClfCntr) >= 0 Then
        '    If ilRet = 0 Then
        '        mTerminate
        '    End If
        'End If
    Else
        'mTerminate
        igTerminateAndUnload = False
    End If
    tmcClick.Enabled = False
    tmcDrag.Enabled = False
    
    mClearCtrlFields

    udcCBill.Action 3
    udcCBill.Visible = False
    udcCGameInv.Action 3
    udcCGameInv.Visible = False
    udcCDigital.Action 3
    udcCDigital.Visible = False
'    ilRet = btrClose(hmVbf)
'    btrDestroy hmVbf
'    If tgUrf(0).iRemoteUserID <= 0 Then
'        ilRet = btrClose(hmSsf)
'        btrDestroy hmSsf
'    Else
'        ilRet = btrClose(hmAsf)
'        btrDestroy hmAsf
'    End If
'    ilRet = btrClose(hmVsf)
'    btrDestroy hmVsf
'    If tgUrf(0).iRemoteUserID <= 0 Then
'        ilRet = btrClose(hmPhf)
'        btrDestroy hmPhf
'        ilRet = btrClose(hmRvf)
'        btrDestroy hmRvf
'    End If
'    If tgUrf(0).iRemoteUserID <= 0 Then
'        ilRet = btrClose(hmLcf)
'        btrDestroy hmLcf
'    End If
'    If tgUrf(0).iRemoteUserID <= 0 Then
'        ilRet = btrClose(hmSdf)
'        btrDestroy hmSdf
'        ilRet = btrClose(hmPsf)
'        btrDestroy hmPsf
'        ilRet = btrClose(hmSmf)
'        btrDestroy hmSmf
'    End If
'
'    ilRet = btrClose(hmRlf)
'    btrDestroy hmRlf
'
'    If ((Asc(tgSpf.sAutoType2) And RN_REP) = RN_REP) Or ((Asc(tgSpf.sAutoType2) And RN_NET) = RN_NET) Then
'        btrDestroy hmGif
'    End If
'    btrDestroy hmPvf
'    ilRet = btrClose(hmPnf)
'    btrDestroy hmPnf
'    ilRet = btrClose(hmDrf)
'    btrDestroy hmDrf
'    ilRet = btrClose(hmDpf)
'    btrDestroy hmDpf
'    ilRet = btrClose(hmRaf)
'    btrDestroy hmRaf
'    ilRet = btrClose(hmDef)
'    btrDestroy hmDef
'    ilRet = btrClose(hmMnf)
'    btrDestroy hmMnf
'    ilRet = btrClose(hmPrf)
'    btrDestroy hmPrf
'    ilRet = btrClose(hmSif)
'    btrDestroy hmSif
'    ilRet = btrClose(hmAgf)
'    btrDestroy hmAgf
'    ilRet = btrClose(hmAdf)
'    btrDestroy hmAdf
''    ilRet = btrClose(hmDsf)
''    btrDestroy hmDsf
'    ilRet = btrClose(hmCef)
'    btrDestroy hmCef
'    ilRet = btrClose(hmVLF)
'    btrDestroy hmVLF
'    ilRet = btrClose(hmCxf)
'    btrDestroy hmCxf
'    ilRet = btrClose(hmCmf)
'    btrDestroy hmCmf
'    ilRet = btrClose(hmMsf)
'    btrDestroy hmMsf
'    ilRet = btrClose(hmMgf)
'    btrDestroy hmMgf
'    ilRet = btrClose(hmGhf)
'    btrDestroy hmGhf
'    ilRet = btrClose(hmGsf)
'    btrDestroy hmGsf
'    ilRet = btrClose(hmCgf)
'    btrDestroy hmCgf
'    ilRet = btrClose(hmEff)
'    btrDestroy hmEff
'    ilRet = btrClose(hmCff)
'    btrDestroy hmCff
'    ilRet = btrClose(hmClf)
'    btrDestroy hmClf
'    ilRet = btrClose(hmSbf)
'    btrDestroy hmSbf
'    ilRet = btrClose(hmCHF)
'    btrDestroy hmCHF
    '6/1/19: Moved to
    mUnloadSub
    
    Erase igSplitLnVefCode

    Erase tmRBBookname
    Erase tmRegionCode
    Erase tmProdCode
    Erase imRBVehType
    Erase tmSPCtrls
    Erase tmVehGp6Code
    Erase tmFlWkInfo
    Erase tmVehGp5Code
    Erase tmRatedGp
    Erase lmPvfCode
    Erase imPvfSpotAdj
    Erase smLnSave
    Erase imLnSave
    Erase smLnShow
    Erase smLnSumShow
    Erase smWkSumShow
    Erase smQSumShow
    Erase smVSumShow
    Erase smDPSumShow
    Erase smVDSumShow
    Erase smOVDSumValue
    Erase smTSumShow
    Erase smTOVDSumValue
    Erase imAirSave
    Erase smAirShow
    Erase tmChfHelp
    Erase tmClfHelp
    'Erase tmChfAdvtExt
    Erase tmRCSort
    Erase tmRatedGp
    Erase imPBRdfCode
    Erase smRBMixDatesSpots
    Erase tmPB1DP
    Erase tmRB1DP
    Erase tmPBDPGen
    Erase tmSvChk
    Erase tmLnPBDPGen
    Erase smLnComment
    Erase smLnInitComment
    Erase imLnCommShowOn
    Erase imLnInitCommShowOn
    Erase tmStep3Code
    Erase tmVehicleCode
    Erase tmCommentCode0
    Erase tmCommentCode1
    Erase tmCommentCode2
    Erase tmCommentCode3
    Erase tmCommentCode4
    Erase tmCommentCode5
    Erase tmCommentCode6
    Erase tmCommentCode7
    Erase tmShareBudgetCode0
    Erase tmShareBudgetCode1
    Erase tmRevSetCode0
    Erase tmRevSetCode1
    Erase tmRevSetCode2
    Erase tmRevSetCode3
    Erase tmRevSetCode4
    Erase tmWkInfo
    Erase tmPkWkInfo
    Erase lmDiffCntrCode
    Erase lmRevNoCode
    Erase lmPjfRecPos
    Erase tmRvfMPRec
    Erase lgWkSpotCount
    Erase lgWkActPrice
    Erase lgWkRCPrice
    Erase lgWkAvgAud
    Erase lgWkPopEst
    Erase igWkRating
    Erase lgWkGRImp
    Erase lgWkGRP
    Erase lgLnCost 'TTP 10439 - Rerate 21,000,000
    Erase igLnAvgRating
    Erase lgLnGrImp
    Erase lgLnGRP
    Erase lgRCLnCost
    Erase igRCLnAvgRating
    Erase lgRCLnGrImp
    Erase lgRCLnGRP
    Erase tgWkAud
    Erase tgWkSum
    Erase igLnDupl
    Erase tgPackVeh
    Erase sgTmpLnSave
    Erase igTmpLnSave
    Erase sgTmpLnShow
    Erase sgTmpLnComment
    Erase sgTmpLnInitComment
    Erase igTmpLnCommShowOn
    Erase igTmpLnInitCommShowOn
    Erase tgPackDP
    Erase tgPackLn
    Erase igLnMakingPack
    Erase tgCShtTitle
    Erase imTrashLnNo
    Erase igVer0LineNo
    Erase tgClfCntr
    Erase tgCffCntr
    Erase tgCgfCntr
    Erase tgMsfCntr
    Erase tgMgfCntr
    Erase sgMsfCntrCxf
    Erase tgDelClf
    Erase tmDiffClf
    Erase tmDiffCff
    Erase tmDiffCgf
    
    Erase tmSvCntSalesperson
    '8032
    mStartStopMarketronOrder False
    mStartStopStationErrorLog False
    If tgUrf(0).iRemoteUserID > 0 Then
        Traffic!mnuRemoteUser.Enabled = True
    End If
    'ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
    igJobShowing(CONTRACTSJOB) = False
    If igSportsSystem = 1 Then
        'Traffic!pbcClickFocus.SetFocus
    Else
        On Error Resume Next
        Traffic!pbcMsgArea.SetFocus
    End If
    Set Contract = Nothing   'Remove data segment
    '8723
    If ogContractCreator.CreationUser = Filemaker Then
        Basic10!tmcFilemaker.Enabled = True
    End If
    mnf_rst.Close
    avf_rst.Close
    Exit Sub
UnloadErr:
    ilRet = 1
    Resume Next
End Sub

Private Sub frcPBDates_Click()
    plcCalendar.Visible = False
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub frcPBVeh_Click()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
End Sub

Private Sub frcRBSum_Click()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
End Sub

Public Sub mExportAsFile(blIgnoreMove As Boolean, Optional slExportTypeChosenByUser As String = "")
    '9459 added  slExportTypeChosenByUser
    'Dan M 11/28/11
    Dim slExportType As String
    Dim slFile As String
    'not from save
    If Not blIgnoreMove Then
        mMoveCtrlToRec False
        If sgCntrScreen <> "Orders" Then
            igStationXmlChoice = AGENCYXML
        End If
    End If
    '9459 if
    If slExportTypeChosenByUser <> "" Then
        slExportType = slExportTypeChosenByUser
    Else
        slExportType = Trim$(tmAgf.sCntrExptForm)
    End If
    'Dan 8364
    mLoadExportFacts
    slFile = mExportProposal(slExportType, True, blIgnoreMove)
    If Len(slFile) > 0 Then
        '8032
       ' MsgBox "File exported to " & slFile
       '8120
       'MsgBox slFile
       MsgBox "File exported: " & slFile
    End If
End Sub

Private Sub grdCPMBuy_EnterCell()
    'If lmCPMEnableCol <> CPMPRICETYPE Then
        mSetBGColorGray grdCPMBuy.MouseRow
        mCPMSetShow
    'End If
End Sub

Private Sub grdCPMBuy_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lmCPMTopRow = grdCPMBuy.TopRow
    grdCPMBuy.Redraw = False
End Sub

Private Sub grdCPMBuy_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilCol As Integer
    Dim ilRow As Integer
    Dim ilVef As Integer

    pbcLineArrow.Visible = False
    imCPMIgnoreScroll = False
    If Y < grdCPMBuy.rowHeight(0) Then
        'grdCPMBuy.Redraw = False
        'gSetMousePointer grdCPMBuy, grdCPMBuy, vbHourglass
        'grdCPMBuy.Col = grdCPMBuy.MouseCol
        'If grdCPMBuy.TextMatrix(0, CPMID) = "ID-Std" Then
        '    grdCPMBuy.TextMatrix(0, CPMID) = "ID-#"
        '    gCPMSort True
        'Else
        '    grdCPMBuy.TextMatrix(0, CPMID) = "ID-Std"
        '    gCPMSort False
        'End If
        'gSetMousePointer grdCPMBuy, grdCPMBuy, vbDefault
        'grdCPMBuy.Redraw = True
        'Set focus to edit ID number
        edcLineNo(1).SetFocus
        Exit Sub
    End If
    ilCol = grdCPMBuy.MouseCol
    ilRow = grdCPMBuy.MouseRow
    If ilCol < grdCPMBuy.FixedCols Then
        mSetBGColorWhite True
        grdCPMBuy.Redraw = True
        Exit Sub
    End If
    If ilCol > CPMCOMMENT Then
        mSetBGColorWhite True
        grdCPMBuy.Redraw = True
        Exit Sub
    End If
    If ilRow < grdCPMBuy.FixedRows Then
        mSetBGColorWhite True
        grdCPMBuy.Redraw = True
        Exit Sub
    End If
    If Not imAllAnsw Then
        mAllSetShow 3
        If mTestFields(TESTALLCTRLS, ALLMANDEFINED + SHOWMSG) = NO Then
            mEnableBox imHdBoxNo
            Exit Sub
        End If
    End If
    imAllAnsw = True
    If (ilCol = CPMCPMVALUE) And (Trim$(grdCPMBuy.TextMatrix(ilRow, CPMPRICETYPE)) = "Flat Rate") Then
        grdCPMBuy.Redraw = True
        Exit Sub
    ElseIf (ilCol = CPMCPMVALUE) Then
        If ((grdCPMBuy.TextMatrix(ilRow, CPMLNTYPE) = "P") Or (grdCPMBuy.TextMatrix(ilRow, CPMLNTYPE) = "H")) Then
            grdCPMBuy.Redraw = True
            Exit Sub
        Else
            ilVef = gBinarySearchVef(Val(grdCPMBuy.TextMatrix(ilRow, CPMVEFCODE)))
            If ilVef <> -1 Then
                If (tgMVef(ilVef).sType = "P") Then
                    grdCPMBuy.Redraw = True
                    Exit Sub
                End If
            End If
        End If
    End If
    If (ilCol = CPMPRICETYPE) And ((grdCPMBuy.TextMatrix(ilRow, CPMLNTYPE) = "P") Or (grdCPMBuy.TextMatrix(ilRow, CPMLNTYPE) = "H")) Then
        grdCPMBuy.Redraw = True
        Exit Sub
    ElseIf (ilCol = CPMPRICETYPE) Then
        ilVef = gBinarySearchVef(Val(grdCPMBuy.TextMatrix(ilRow, CPMVEFCODE)))
        If ilVef <> -1 Then
            If (tgMVef(ilVef).sType = "P") Then
                grdCPMBuy.Redraw = True
                Exit Sub
            End If
        End If
    End If
    If (ilCol = CPMPOSITION) Or (ilCol = CPMPRIORITY) Then
        If (grdCPMBuy.TextMatrix(ilRow, CPMLNTYPE) = "P") Then
            grdCPMBuy.Redraw = True
            Exit Sub
        Else
            ilVef = gBinarySearchVef(Val(grdCPMBuy.TextMatrix(ilRow, CPMVEFCODE)))
            If ilVef <> -1 Then
                If (tgMVef(ilVef).sType = "P") Then
                    grdCPMBuy.Redraw = True
                    Exit Sub
                End If
            End If
        End If
    End If
    '10738 add imp goal
    If Contract.grdCPMBuy.TextMatrix(ilRow, CPMBILLED) = "Y" And ilCol <> CPMENDDATE And ilCol <> CPMIMPRESSIONS Then
        grdCPMBuy.Redraw = True
        Exit Sub
    End If
    If grdCPMBuy.TextMatrix(ilRow, CPMVEHICLE) = "" Then
        grdCPMBuy.Redraw = False
        Do
            ilRow = ilRow - 1
        Loop While grdCPMBuy.TextMatrix(ilRow, CPMVEHICLE) = ""
        If grdCPMBuy.TextMatrix(ilRow, CPMIMPRESSIONS) <> "" Then
            grdCPMBuy.Row = ilRow + 1
            grdCPMBuy.Col = CPMVEHICLE
            'grdCPMBuy.Redraw = True
        Else
            grdCPMBuy.Row = ilRow
            grdCPMBuy.Col = ilCol
            'grdCPMBuy.Redraw = True
        End If
    Else
        If grdCPMBuy.TextMatrix(ilRow, CPMIMPRESSIONS) <> "" Then
            grdCPMBuy.Row = ilRow
            grdCPMBuy.Col = ilCol
        Else
            grdCPMBuy.Col = ilCol
            grdCPMBuy.Row = ilRow
        End If
    End If
    imLnRowNo = grdCPMBuy.Row
    grdCPMBuy.Redraw = True
    lmCPMTopRow = grdCPMBuy.TopRow

    mCPMEnableBox
End Sub

Private Sub grdCPMBuy_Scroll()
    If imCPMIgnoreScroll Then  'Or igGridIgnoreScroll Then
        imCPMIgnoreScroll = False
        Exit Sub
    End If
    If grdCPMBuy.Redraw = False Then
        grdCPMBuy.Redraw = True
        If lmCPMTopRow < grdCPMBuy.FixedRows Then
            grdCPMBuy.TopRow = grdCPMBuy.FixedRows
        Else
            grdCPMBuy.TopRow = lmCPMTopRow
        End If
        grdCPMBuy.Refresh
        grdCPMBuy.Redraw = False
    End If
    If (imCPMCtrlVisible) And (grdCPMBuy.Row >= grdCPMBuy.FixedRows) And (grdCPMBuy.Col >= 0) And (grdCPMBuy.Col < grdCPMBuy.cols - 1) Then
        If grdCPMBuy.RowIsVisible(grdCPMBuy.Row) Then
            mCPMSetFocus
        Else
            imCPMFromArrow = False
            pbcLineArrow.Visible = False
            Contract.pbcClickFocus.SetFocus
        End If
    Else
        imCPMFromArrow = False
        pbcLineArrow.Visible = False
        Contract.pbcClickFocus.SetFocus
    End If
End Sub

Private Sub imcKey_Click()
    lbcComment(2).Visible = Not lbcComment(2).Visible
End Sub

Private Sub imcPrt_Click()
    Dim ilClf As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilTest As Integer
    Dim slStr As String
    Dim llDate As Long
    Dim llSNTRDate As Long
    Dim llENTRDate As Long
    Dim llSInstallDate As Long
    Dim llEInstallDate As Long
    ReDim ilEntryDate(0 To 1) As Integer
    ReDim ilEntryTime(0 To 1) As Integer
    Dim olWshShell As Object
    If imDiffMode Then
        '7/30/19: Contract difference from order/proposal screen
        lgCurrChfCode = tgChfCntr.lCode
        lgPrevChfCode = tmDiffChf.lCode
        igAdvtCallSource = CALLSOURCECONTRACT
        imShowDiff = 1
        smSnapshot = "D"
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & Trim$(str$(imShowDiff)) & "\" & smSnapshot
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & Trim$(str$(imShowDiff)) & "\" & smSnapshot
        End If
        sgCommandStr = slStr
        sgReportListName = "Contract Difference"
        BrSnap.Show vbModal
        Exit Sub
    End If

    On Error GoTo imcPrtErr:
    If (UBound(tgClfCntr) <= 0) And (UBound(tgIBSbf) <= LBound(tgIBSbf)) And (UBound(tgFBSbf) <= LBound(tgFBSbf)) And ((Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) = "") Or (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) = "")) Then
        Exit Sub
    End If

    If udcCBill.Visible = True Then
        If Not udcCBill.Verify() Then
            Exit Sub
        End If
        udcCBill.Action 5
    End If
    If udcCGameInv.Visible = True Then
        udcCGameInv.Action 5
    End If
    If udcCDigital.Visible = True Then
        udcCDigital.Action 5
    End If

    mAllSetShow 2
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    mDBSetShow imDB0BoxNo
    imDB0BoxNo = -1
    mDBSetShow imDBBoxNo
    imDBBoxNo = -1
    imDBRowNo = -1
    mLnSetShow imLnBoxNo    'Line
    'If imLnRowNo >= 0 Then
    If imLnRowNo > 0 Then
        pbcLineArrow.Visible = True
    End If
    If (plcDemoBar.Visible) And (imDBTotals >= 5) And (imDBTotals <= 9) Then  'Hide demo bar
        mMoveCtrlToRec False
        imShowDiff = 2
        sgReportListName = "Demo Bar Snapshot"
        CSnapPrt.Show vbModal
    Else
        Screen.MousePointer = vbHourglass
        If plcDemoBar.Visible Then
            'plcDemoBar.Visible = False
            cmcDemoBar_Click
        End If
        If Not mMoveLnCtrlToRec(True) Then
            Screen.MousePointer = vbDefault
            Exit Sub
        End If

        mMoveCtrlToRec False
        'Set line types
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            'If tgClfCntr(ilClf).iSPChg And (tgUrf(0).sUseComputeCMC = "I") Then
            '    mLnTotals ilClf + 1, imLnTotalType, PRICEINDEX, hmDrf, hmMnf
            '    mGetLnPriceInfo ilClf + 1, slStr, imLnTotalType, PRICEINDEX     'Formats Price within Show
            'End If
            If (sgCntrScreen <> "Orders") Or (tgSpf.sGUsePropSys = "Y") Then    'Not setting for new lines'And (imStep1Index <> 4) Then
                imInResearch = True 'Only set Books
                mInitBookDemoForLn ilClf + 1, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode
                imInResearch = False
            End If
            tgClfCntr(ilClf).ClfRec.sType = "S"
            tgClfCntr(ilClf).ClfRec.iPkLineNo = 0
            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilLoop).iLineNo Then
                    tgClfCntr(ilClf).ClfRec.sType = tgPackLn(ilLoop).sType
                    If (tgPackLn(ilLoop).sType <> "O") And (tgPackLn(ilLoop).sType <> "A") And (tgPackLn(ilLoop).sType <> "E") Then
                        For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                            If (tgPackLn(ilTest).sType = "A") Or (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "E") Then
                                ilIndex = tgPackLn(ilTest).iIndex
                                Do While ilIndex >= 0
                                    If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                        tgClfCntr(ilClf).ClfRec.iPkLineNo = tgPackLn(ilTest).iLineNo
                                        Exit For
                                    End If
                                    ilIndex = tgPackLn(ilIndex).iIndex
                                Loop
                            End If
                        Next ilTest
                    End If
                    Exit For
                End If
            Next ilLoop
        Next ilClf
        'NTR Billing
        If smOrigNTRDefined = "Y" Then
            tgChfCntr.sNTRDefined = smOrigNTRDefined
        Else
            tgChfCntr.sNTRDefined = "N"
        End If
        mGetNTRDateRange llSNTRDate, llENTRDate
        mGetInstallmentDateRange llSInstallDate, llEInstallDate
        If llSInstallDate <= 0 Then
            tgChfCntr.sInstallDefined = "N"
        Else
            tgChfCntr.sInstallDefined = "Y"
        End If
        mSetHdDate False, True
        If tgChfCntr.sNTRDefined = "Y" Then
            gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llDate
            If ((llSNTRDate > 0) And (llSNTRDate < llDate)) Or ((llSNTRDate > 0) And (llDate = 0)) Then
                gPackDateLong llSNTRDate, tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1)
            End If
            gUnpackDateLong tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1), llDate
            If ((llENTRDate > 0) And (llENTRDate > llDate)) Or ((llENTRDate > 0) And (llDate = 0)) Then
                gPackDateLong llENTRDate, tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1)
            End If
        End If
        If llSInstallDate > 0 Then
            gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llDate
            If ((llSInstallDate > 0) And (llSInstallDate < llDate)) Or ((llSInstallDate > 0) And (llDate = 0)) Then
                gPackDateLong llSInstallDate, tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1)
            End If
            gUnpackDateLong tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1), llDate
            If ((llEInstallDate > 0) And (llEInstallDate > llDate)) Or ((llEInstallDate > 0) And (llDate = 0)) Then
                gPackDateLong llEInstallDate, tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1)
            End If
        End If
        slStr = Format$(gNow(), "m/d/yy")
        gPackDate slStr, ilEntryDate(0), ilEntryDate(1)
        slStr = Format$(gNow(), "h:m:s AM/PM")
        gPackTime slStr, ilEntryTime(0), ilEntryTime(1)
        If sgCntrScreen <> "Orders" Then          'proposal task
            If imStep1Index <= 4 Then
                tgChfCntr.iPropDate(0) = ilEntryDate(0)
                tgChfCntr.iPropDate(1) = ilEntryDate(1)
                tgChfCntr.iPropTime(0) = ilEntryTime(0)
                tgChfCntr.iPropTime(1) = ilEntryTime(1)
                tgChfCntr.iOHDDate(0) = ilEntryDate(0)
                tgChfCntr.iOHDDate(1) = ilEntryDate(1)
                tgChfCntr.iOHDTime(0) = ilEntryTime(0)
                tgChfCntr.iOHDTime(1) = ilEntryTime(1)
            End If
        Else
            If imStep1Index <= 2 Then                   'Orders task
                tgChfCntr.iOHDDate(0) = ilEntryDate(0)
                tgChfCntr.iOHDDate(1) = ilEntryDate(1)
                tgChfCntr.iOHDTime(0) = ilEntryTime(0)
                tgChfCntr.iOHDTime(1) = ilEntryTime(1)
            End If
        End If
        mCntrTotal
        If (imStep1Index = 4) And (sgCntrScreen <> "Orders") Then
            imShowDiff = 1  'True
        Else
            imShowDiff = 0  'False
        End If
        'set flag to indicate that this is a snapshot and whether its saved, current, or previous
        smSnapshot = " "
        If cmcUpdate.Enabled Or imStep1Index <= 1 Then                        'user has changed something, and has not saved  (or new/model)
            smSnapshot = "S"                            'not saved (new)
        End If
        hmCtrPrtChf = hmCHF
        hmCtrPrtClf = hmClf
        hmCtrPrtCff = hmCff
        tgChf = tgChfCntr
        ReDim tgClf(LBound(tgClfCntr) To UBound(tgClfCntr)) As CLFLIST
        ReDim tgCff(LBound(tgCffCntr) To UBound(tgCffCntr)) As CFFLIST
        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
            tgClf(ilLoop) = tgClfCntr(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgCffCntr) To UBound(tgCffCntr) Step 1
            tgCff(ilLoop) = tgCffCntr(ilLoop)
        Next ilLoop

        'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
        igAdvtCallSource = CALLSOURCECONTRACT
        'Traffic!edcLinkSrceHelpMsg.Text = ""
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & Trim$(str$(imShowDiff)) & "\" & smSnapshot
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & Trim$(str$(imShowDiff)) & "\" & smSnapshot
        End If
        sgCommandStr = slStr
        sgReportListName = "Contract Snapshot"
        'TTP 10549 - Learfield Cloud printing 911, Crystal Crashes, Use Adobe
        sgReportFilename = "BR-" & Contract.edcCntrNo.Text
        If sgReportTempFolder = "" Then
            Set olWshShell = CreateObject("Wscript.Shell")
            sgReportTempFolder = olWshShell.ExpandEnvironmentStrings("%localappdata%\Temp")
            If right(sgReportTempFolder, 1) <> "\" Then sgReportTempFolder = sgReportTempFolder & "\"
        End If
        BrSnap.Show vbModal
        mSetHdDate False, False  'Init Hot values
    End If
    If plcLine.Visible Then
        If imLnRowNo > 0 Then
            If imLnBoxNo <= 0 Then
                If pbcLineArrow.Visible Then
                    pbcLineArrow.SetFocus
                Else
                    pbcLnTab.SetFocus
                End If
            Else
                mLnEnableBox imLnBoxNo
            End If
        End If
    End If
    mCntrTotal
    On Error Resume Next
    pbcClickFocus.SetFocus
    Exit Sub
imcPrtErr:
    Exit Sub
End Sub

Private Sub imcShare_Click(Index As Integer)
    Dim ilResponse As Integer
    Dim slExportType As String
    Dim ilDefaultButtonChoice As Integer

    
    '7599
    If tgChfCntr.lCntrNo > 0 Then
        'Dan added 10/22/14
        mAllSetShow 0
        Select Case Index
            Case 0
                imcPrt_Click
            Case 1
                '9459
                 If sgCntrScreen = "Orders" Then
                    mExportAsFile False
                 Else
                    slExportType = Trim$(tmAgf.sCntrExptForm)
                    Select Case slExportType
                        '9864  these are not correct
                        Case "X"
                            ilDefaultButtonChoice = 0
                        Case "O"
                            ilDefaultButtonChoice = 2 '3
                        Case Else
                            ilDefaultButtonChoice = 3  '2
                    End Select
                    ilResponse = gShowGenMsgWithRadioButtons("Export File Output", ilDefaultButtonChoice, "Use XML Format", "Use CSI Format, including Hidden Lines", "Use OMD Format", "Use CSI Format, excluding Hidden Lines")
                    'Response shows user choice.
                    Select Case ilResponse
                        Case 0
                            slExportType = "X"
                        Case 1
                            slExportType = "Z"
                        Case 2
                            slExportType = "O"
                        Case 3
                            slExportType = "C"
                        Case Else
                            Exit Sub
                    End Select
                    mExportAsFile False, slExportType
                End If
             '   mExportAsFile False
            Case 2
                If isReadyToEmail() Then
                    igStationXmlChoice = AGENCYXML
                    'Dan 8364
                    mLoadExportFacts
                    'Dan 8364 note that the call will be 'false' from save, so add below out of mExportProposal
                    mAllSetShow 0
                    If Not mMoveLnCtrlToRec(True) Then
                        gMsgBox "Could not export at this time.  Please try again."
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    mEmailProposal Trim$(str$(tgChfCntr.lCntrNo)), lbcAdvt.List(lbcAdvt.ListIndex), hmPnf, tmAgf
                End If
        End Select
    Else
        '7958
        '         MsgBox "You must save this proposal before exporting.", vbOkOnly + vbExclamation, "Save Proposal"
        If sgCntrScreen = "Orders" Then
         MsgBox "You must save this order before exporting.", vbOKOnly + vbExclamation, "Save Order"
        Else
         MsgBox "You must save this proposal before exporting.", vbOKOnly + vbExclamation, "Save Proposal"
        End If
    End If
End Sub

Public Function isReadyToEmail() As Boolean
    Dim ilRet As Integer
    
    isReadyToEmail = True
    mMoveCtrlToRec False
    '6189 continue even if no agency
    If tgChfCntr.iAgfCode <= 0 Then
        Screen.MousePointer = vbDefault
       ' MsgBox "An agency must be identified with the contract in order to email an export file", vbOKOnly + vbExclamation, "No Agency"
        Exit Function
    End If
    tmAgfSrchKey.iCode = tgChfCntr.iAgfCode
    ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
'    If ilRet <> BTRV_ERR_NONE Then
'        Screen.MousePointer = vbDefault
'        MsgBox "Could not find information for this agency. Emailing halted.", vbOKOnly + vbExclamation, "No Agency"
'        Exit Function
'    End If
    If tgChfCntr.lCntrNo <= 0 Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("You must save this proposal before emailing an export file", vbOKOnly + vbExclamation, "Message")
        isReadyToEmail = False
        Exit Function
    End If
    'isReadyToEmail = True
End Function

Private Sub imcTrash_Click()
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilUpperBound As Integer
    Dim ilRowNo As Integer
    Dim slStr As String
    Dim ilLineNo As Integer
    Dim ilPackLn As Integer
    Dim ilFound As Integer
    Dim ilVef As Integer
    Dim ilPrev As Integer
    Dim ilRet As Integer
    Dim slLineType As String
    Dim ilAnySpots As Integer   'Any spots defined within the flights
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim ilCff As Integer
    Dim ilTrash As Integer
    Dim ilClf As Integer
    Dim ilTest As Integer
    Dim ilPkRowNo As Integer
    Dim ilRemove As Integer
    Dim ilSvLnRowNo As Integer
    Dim llSvCPMEnableRow As Long
    Dim llSvCPMEnableCol As Long
    
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Sub
    End If
    If grdCPMBuy.Visible Then
        llSvCPMEnableRow = lmCPMEnableRow
        llSvCPMEnableCol = lmCPMEnableCol
        mCPMSetShow
        lmCPMEnableRow = llSvCPMEnableRow
        lmCPMEnableCol = llSvCPMEnableCol
        gTrashCPMRow
        gResetPkgValues -1
        lmCPMEnableRow = -1
        lmCPMEnableCol = -1
        imCPMCtrlVisible = False
        mSetHdDate False, False
        mCntrTotal
        mSetSchStatus smOrigStatus
        mSetCreditInfo
        mSetCommands
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imLnRowNo < 1) Then
        Exit Sub
    End If

    Screen.MousePointer = vbHourglass
    
    '1/11/15: Add Hide/Show Hidden Lines
    imLnRowNo = mRemapRowNo(imLnRowNo)
    
    slLineType = mGetLineType(imLnRowNo)
    If slLineType = "H" Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                If tgPackLn(ilLoop).sAlter <> "Y" Then
                    Screen.MousePointer = vbDefault
                    Beep
                    MsgBox "Can't Alter Hidden Line", vbOKOnly + vbExclamation, "Warning"
                    Exit Sub
                End If
                Exit For
            End If
        Next ilLoop
    End If
    
    ilLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
    ilAnySpots = mFlightHaveSpots(imLnRowNo)
    ilRemove = 0
    If ((imDragBoxNo >= WKSPOTSINDEX) And (imDragBoxNo <= WKSPOTSINDEX + 12)) Then
        If (tgClfCntr(imLnRowNo - 1).iCancel) Or (tgClfCntr(imLnRowNo - 1).iFirstCff < 0) Or (Not ilAnySpots) Then
            Screen.MousePointer = vbDefault
            imcTrash.Picture = IconTraf!imcTrashClosed.Picture
            MsgBox "No Weeks Defined to be Removed", vbOKOnly + vbExclamation, "Warning"
            Exit Sub
        End If
        If (imStep1Index <> 2) Or (sgCntrScreen = "Orders") Then
            If (tgClfCntr(imLnRowNo - 1).iStatus > 0) Then
                Screen.MousePointer = vbDefault
                imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                MsgBox "Remove Flight Weeks", vbOKOnly + vbExclamation, "Warning"
                Exit Sub
            End If
        End If
        If (imStep1Index = 2) And (sgCntrScreen <> "Orders") Then
            'Make CBS
            tgClfCntr(imLnRowNo - 1).iCancel = True
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate
            llFlEndDate = llFlStartDate - 1
            gPackDateLong llFlEndDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)
            gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), tgCffCntr(ilCff).lStartDate    'Week Start date
            gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), tgCffCntr(ilCff).lEndDate    'Week Start date
            smLnSave(14, imLnRowNo) = Format$(tgCffCntr(ilCff).lStartDate, "m/d/yy") 'slStartDate
            smLnSave(15, imLnRowNo) = Format$(tgCffCntr(ilCff).lEndDate, "m/d/yy") 'slEndDate
            If tgCffCntr(ilCff).iStatus = -1 Then
                tgCffCntr(ilCff).iStatus = 0    'Reset to new
            ElseIf tgCffCntr(ilCff).iStatus = 2 Then
                tgCffCntr(ilCff).iStatus = 1    'Reset old
            End If
            Do While tgCffCntr(ilCff).iNextCff <> -1
                ilCff = tgCffCntr(ilCff).iNextCff
                If tgCffCntr(ilCff).iStatus = 0 Then
                    tgCffCntr(ilCff).iStatus = -1   'New to not used
                ElseIf tgCffCntr(ilCff).iStatus = 1 Then
                    tgCffCntr(ilCff).iStatus = 2    'Old to delete
                End If
            Loop
            'imLnSave(11, imLnRowNo) = 0
            smLnSave(23, imLnRowNo) = "0"
        Else
            'Clear Flights
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = -1) Then
                    tgCffCntr(ilCff).iStatus = -1   'New to not used
                Else
                    tgCffCntr(ilCff).iStatus = 2    'Old to delete
                End If
                ilPrev = ilCff
                ilCff = tgCffCntr(ilCff).iNextCff
                tgCffCntr(ilPrev).iNextCff = -1
            Loop
            tgClfCntr(imLnRowNo - 1).iFirstCff = -1
            tgClfCntr(imLnRowNo - 1).iFirstCgf = -1
            tgClfCntr(imLnRowNo - 1).lFirstAvail = -1
        End If
        imComputeReq = True
        tgClfCntr(imLnRowNo - 1).iSPChg = True
        igLnSPChg = True
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
         imcTrash.Picture = IconTraf!imcTrashClosed.Picture
        'mBuildWkInfo True, True
    Else
        If slLineType = "H" Then
            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                If tgPackLn(ilLoop).iLineNo = ilLineNo Then
                    ilFound = False
                    For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                        If (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "A") Then
                            ilFound = False
                            ilClf = 0
                            ilIndex = tgPackLn(ilTest).iIndex
                            Do While ilIndex >= 0
                                If ilLineNo = tgPackLn(ilIndex).iLineNo Then
                                    ilFound = True
                                End If
                                ilClf = ilClf + 1
                                ilIndex = tgPackLn(ilIndex).iIndex
                            Loop
                            If ilFound Then
                                Exit For
                            End If
                        End If
                    Next ilTest
                    If (ilFound) And (ilClf <= 1) Then
                        imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                        Screen.MousePointer = vbDefault
                        MsgBox "Drag package line to trash instead of hidden line as only one line is left", vbOKOnly + vbExclamation, "Warning"
                        Exit Sub
                    End If
                    Exit For
                End If
            Next ilLoop
        End If
        If (imStep1Index <> 0) And (imStep1Index <> 1) And ((imStep1Index <> 3) Or (sgCntrScreen = "Orders")) Then      '0=Create New; 1=Modeling
            If (tgClfCntr(imLnRowNo - 1).iStatus <> 0) And (imLnRowNo <> UBound(tgClfCntr) + 1) Then  '0=New line
                If ((tgClfCntr(imLnRowNo - 1).iCancel) Or (tgClfCntr(imLnRowNo - 1).iFirstCff < 0) Or (Not ilAnySpots)) And (tgClfCntr(imLnRowNo - 1).ClfRec.sSchStatus <> "F") And ((imStep1Index <> 2) Or (sgCntrScreen = "Orders")) Then
                    imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                    Screen.MousePointer = vbDefault
                    MsgBox "Line can't be deleted as it is not scheduled", vbOKOnly + vbExclamation, "Warning"
                    Exit Sub
                ElseIf ((tgClfCntr(imLnRowNo - 1).iCancel) Or (tgClfCntr(imLnRowNo - 1).iFirstCff < 0) Or (Not ilAnySpots)) And (tgClfCntr(imLnRowNo - 1).ClfRec.sSchStatus = "F") Then
                    'Test if spots exist
                    ilFound = False
                    If tgUrf(0).iRemoteUserID <= 0 Then
                        For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                            If (tgMVef(ilVef).sType <> "P") Then
                                tmSdfSrchKey0.iVefCode = tgMVef(ilVef).iCode
                                tmSdfSrchKey0.lChfCode = tgChfCntr.lCode
                                tmSdfSrchKey0.iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
                                tmSdfSrchKey0.lFsfCode = 0
                                tmSdfSrchKey0.iDate(0) = 0
                                tmSdfSrchKey0.iDate(1) = 0
                                tmSdfSrchKey0.sSchStatus = ""
                                tmSdfSrchKey0.iTime(0) = 0
                                tmSdfSrchKey0.iTime(1) = 0
                                ilRet = btrGetGreaterOrEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                                If (ilRet = BTRV_ERR_NONE) And (tmSdf.iVefCode = tgMVef(ilVef).iCode) And (tmSdf.lChfCode = tgChfCntr.lCode) And (tmSdf.iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine) Then
                                    ilFound = True
                                    Exit For
                                End If
                            Else
                                tmSdfSrchKey0.iVefCode = tgMVef(ilVef).iCode
                                tmSdfSrchKey0.lChfCode = tgChfCntr.lCode
                                tmSdfSrchKey0.iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
                                tmSdfSrchKey0.iDate(0) = 0
                                tmSdfSrchKey0.lFsfCode = 0
                                tmSdfSrchKey0.iDate(1) = 0
                                tmSdfSrchKey0.sSchStatus = ""
                                tmSdfSrchKey0.iTime(0) = 0
                                tmSdfSrchKey0.iTime(1) = 0
                                ilRet = btrGetGreaterOrEqual(hmPsf, tmSdf, imSdfRecLen, tmSdfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                                If (ilRet = BTRV_ERR_NONE) And (tmSdf.iVefCode = tgMVef(ilVef).iCode) And (tmSdf.lChfCode = tgChfCntr.lCode) And (tmSdf.iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine) Then
                                    ilFound = True
                                    Exit For
                                End If
                            End If
                        Next ilVef
                    End If
                    If ilFound Then
                        imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                        Screen.MousePointer = vbDefault
                        If tgUrf(0).iRemoteUserID <= 0 Then
                            MsgBox "Line can't be deleted as spots exist for the line", vbOKOnly + vbExclamation, "Warning"
                        Else
                            MsgBox "Line can only be deleted on Central System", vbOKOnly + vbExclamation, "Warning"
                        End If
                        Exit Sub
                    End If
                    'If (tgClfCntr(imLnRowNo - 1).iStatus <> 0) Then
                    '    tgDelClf(UBound(tgDelClf)) = tgClfCntr(imLnRowNo - 1)
                    '    ReDim Preserve tgDelClf(0 To UBound(tgDelClf) + 1) As CLFLIST
                    'End If
                    imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                    tgClfCntr(imLnRowNo - 1).ClfRec.sHideCBS = "Y"
                    tgClfCntr(imLnRowNo - 1).iCancel = True
                    imLnChg = True
                    imPaintLnRowNo = -1
                    pbcLine.Cls
                    pbcLine_Paint
                    mSetCommands
                    Screen.MousePointer = vbDefault
                    Exit Sub
                Else
                    If imLnRowNo <> UBound(tgClfCntr) + 1 Then
                        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                            If (tgClfCntr(imLnRowNo - 1).iStatus <> 0) And ((tgClfCntr(imLnRowNo - 1).ClfRec.sSchStatus = "F") Or (tgClfCntr(imLnRowNo - 1).ClfRec.sSchStatus = "I") Or (tgClfCntr(imLnRowNo - 1).ClfRec.sSchStatus = "M")) Then
                                imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                                Screen.MousePointer = vbDefault
                                MsgBox "Line can't be deleted as it is scheduled", vbOKOnly + vbExclamation, "Warning"
                                Exit Sub
                            Else
                                'Test if same line exist for a different revision (new line)
                                tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
                                tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
                                tmChfSrchKey1.iPropVer = tgChfCntr.iPropVer
                                ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                                Do While (ilRet = BTRV_ERR_NONE) And (tmDiffChf.lCntrNo = tgChfCntr.lCntrNo) And (tmDiffChf.sSchStatus <> "F")
                                    ilRet = btrGetNext(hmCHF, tmDiffChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                                Loop
                                If (ilRet = BTRV_ERR_NONE) And (tmDiffChf.lCntrNo = tgChfCntr.lCntrNo) Then
                                    'Find Line
                                    tmClfSrchKey.lChfCode = tmDiffChf.lCode
                                    tmClfSrchKey.iLine = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
                                    tmClfSrchKey.iCntRevNo = tmDiffChf.iCntRevNo ' 0 show latest version
                                    tmClfSrchKey.iPropVer = tmDiffChf.iPropVer ' 0 show latest version
                                    ilRet = btrGetGreaterOrEqual(hmClf, tmClf, imClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                                    If (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = tmDiffChf.lCode) And (tmClf.iLine = tgClfCntr(imLnRowNo - 1).ClfRec.iLine) Then
                                        'Later test if this is a restore back to original line
                                        'move line to tgDelClf, Insert tmClf into tgClf, read flights (cff), redraw screens
                                        imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                                        Screen.MousePointer = vbDefault
                                        MsgBox "Line can't be deleted as previous version exist", vbOKOnly + vbExclamation, "Warning"
                                        Exit Sub
                                    End If
                                End If
                            End If
                        Else
                            ilRemove = -1
                            ilFound = False
                            For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                If (tgClfCntr(ilLoop).ClfRec.iPkLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine) Then
                                    If (tgClfCntr(ilLoop).iStatus = 1) And ((tgClfCntr(ilLoop).ClfRec.sSchStatus = "F") Or (tgClfCntr(ilLoop).ClfRec.sSchStatus = "I") Or (tgClfCntr(ilLoop).ClfRec.sSchStatus = "M")) Then
                                        ilRemove = 0
                                        llFlStartDate = mLnDate(ilLoop + 1, slStr, 0)
                                        gUnpackDateLong tgClfCntr(ilLoop).ClfRec.iStartDate(0), tgClfCntr(ilLoop).ClfRec.iStartDate(1), llFlEndDate
                                        If llFlEndDate <= llFlStartDate Then
                                            ilFound = True
                                            Exit For
                                        End If
                                    End If
                                End If
                            Next ilLoop
                            If ilFound Then
                                imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                                Screen.MousePointer = vbDefault
                                MsgBox "Line can't be deleted as in past", vbOKOnly + vbExclamation, "Warning"
                                Exit Sub
                            End If
                            'Dan 11/10/15 Dick changed and Dan put back in
                            'Test if same line exist for a different revision (new line)
                            tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
                            tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
                            tmChfSrchKey1.iPropVer = tgChfCntr.iPropVer
                            ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                            Do While (ilRet = BTRV_ERR_NONE) And (tmDiffChf.lCntrNo = tgChfCntr.lCntrNo) And (tmDiffChf.sSchStatus <> "F")
                                ilRet = btrGetNext(hmCHF, tmDiffChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                            Loop
                            If (ilRet = BTRV_ERR_NONE) And (tmDiffChf.lCntrNo = tgChfCntr.lCntrNo) Then
                                'Find Line
                                tmClfSrchKey.lChfCode = tmDiffChf.lCode
                                tmClfSrchKey.iLine = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
                                tmClfSrchKey.iCntRevNo = tmDiffChf.iCntRevNo ' 0 show latest version
                                tmClfSrchKey.iPropVer = tmDiffChf.iPropVer ' 0 show latest version
                                ilRet = btrGetGreaterOrEqual(hmClf, tmClf, imClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                                If (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = tmDiffChf.lCode) And (tmClf.iLine = tgClfCntr(imLnRowNo - 1).ClfRec.iLine) Then
                                    'Later test if this is a restore back to original line
                                    'move line to tgDelClf, Insert tmClf into tgClf, read flights (cff), redraw screens
                                    imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                                    Screen.MousePointer = vbDefault
                                    MsgBox "Line can't be deleted as previous version exist", vbOKOnly + vbExclamation, "Warning"
                                    Exit Sub
                                End If
                            End If
                            'end Dan change 11/10/15
                        End If
                        '8/24/10:  Move after asking about hidden lines
                        If ((slLineType = "O") Or (slLineType = "A") Or (slLineType = "E")) And (ilRemove = -1) Then
                            Screen.MousePointer = vbDefault
                            ilSvLnRowNo = imLnRowNo
                            sgGenMsg = "Remove Package Line or Package and Hidden Lines"
                            sgCMCTitle(0) = "Pkg Only"
                            sgCMCTitle(1) = "Pkg+Hidden"
                            sgCMCTitle(2) = "Cancel"
                            sgCMCTitle(3) = ""
                            igDefCMC = 1
                            igEditBox = 0
                            GenMsg.Show vbModal
                            '8/24/10:  ReDim moved here
                            If (igAnsCMC = 0) Or (igAnsCMC = 1) Then
                                If (tgClfCntr(imLnRowNo - 1).iStatus <> 0) Then
                                    tgDelClf(UBound(tgDelClf)) = tgClfCntr(imLnRowNo - 1)
                                    ReDim Preserve tgDelClf(0 To UBound(tgDelClf) + 1) As CLFLIST
                                End If
                            End If
                            If igAnsCMC = 0 Then
                                ilRemove = 0
                            ElseIf igAnsCMC = 1 Then
                                ilRemove = 1
                            Else
                                imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                                Exit Sub
                            End If
                            imLnRowNo = ilSvLnRowNo
                            Screen.MousePointer = vbHourglass
                            If ilRemove = 1 Then
                                For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                                    If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                                        ilIndex = tgPackLn(ilLoop).iIndex
                                        Do While ilIndex >= 0
                                            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                                If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                                    If tgClfCntr(ilClf).iStatus <> 0 Then
                                                        tgDelClf(UBound(tgDelClf)) = tgClfCntr(ilClf)
                                                        ReDim Preserve tgDelClf(0 To UBound(tgDelClf) + 1) As CLFLIST
                                                    End If
                                                    Exit For
                                                End If
                                            Next ilClf
                                            ilIndex = tgPackLn(ilIndex).iIndex
                                        Loop
                                        Exit For
                                    End If
                                Next ilLoop
                            End If
                        Else
                            '8/24/10:  ReDim moved here
                            If (tgClfCntr(imLnRowNo - 1).iStatus <> 0) Then
                                tgDelClf(UBound(tgDelClf)) = tgClfCntr(imLnRowNo - 1)
                                ReDim Preserve tgDelClf(0 To UBound(tgDelClf) + 1) As CLFLIST
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                Screen.MousePointer = vbDefault
                sgGenMsg = "Remove Package Line Only or Package and Hidden Lines"
                sgCMCTitle(0) = "Pkg Only"
                sgCMCTitle(1) = "Pkg+Hidden"
                sgCMCTitle(2) = "Cancel"
                sgCMCTitle(3) = ""
                igDefCMC = 1
                igEditBox = 0
                GenMsg.Show vbModal
                If igAnsCMC = 0 Then
                    ilRemove = 0
                ElseIf igAnsCMC = 1 Then
                    ilRemove = 1
                Else
                    imcTrash.Picture = IconTraf!imcTrashClosed.Picture
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
            End If
        End If
        Screen.MousePointer = vbHourglass
        ilRowNo = imLnRowNo
        mAllSetShow 0
        gCtrlGotFocus ActiveControl
        imPaintLnRowNo = -1
        ilUpperBound = UBound(smLnSave, LINEBOUNDINDEX)
        If ilRowNo = ilUpperBound Then
            mClearLastLine
        Else
            ilPackLn = False
            ReDim imTrashLnNo(0 To 0) As Integer
            If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                    If tgPackLn(ilLoop).iLineNo = ilLineNo Then
                        imTrashLnNo(0) = ilLineNo
                        ReDim Preserve imTrashLnNo(0 To 1) As Integer
                        ilPackLn = True
                        tgPackLn(ilLoop).iLineNo = 0
                        tgPackLn(ilLoop).sType = ""
                        ilIndex = tgPackLn(ilLoop).iIndex
                        Do While ilIndex >= 0
                            'If (tgPackLn(ilLoop).iStdPkg) Or (slLineType = "E") Then
                            If ilRemove = 1 Then
                                imTrashLnNo(UBound(imTrashLnNo)) = tgPackLn(ilIndex).iLineNo
                                ReDim Preserve imTrashLnNo(0 To UBound(imTrashLnNo) + 1) As Integer
                            ElseIf ilRemove = 0 Then
                                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                    If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                        If ((Asc(tgSpf.sUsingFeatures) And HIDDENOVERRIDE) = HIDDENOVERRIDE) And (tgPackLn(ilIndex).sType = "H") Then
                                            tgClfCntr(ilClf).iResearch = False
                                        End If
                                        tgClfCntr(ilClf).ClfRec.sType = "S"
                                        tgClfCntr(ilClf).bShowLine = True
                                        tgClfCntr(ilClf).bPkExpanded = True
                                        Exit For
                                    End If
                                Next ilClf
                            End If
                            'End If
                            tgPackLn(ilIndex).iLineNo = 0
                            tgPackLn(ilIndex).sType = ""
                            ilIndex = tgPackLn(ilIndex).iIndex
                        Loop
                        'Sort highest to lowest
                        ReDim ilTrashLnNo(0 To UBound(imTrashLnNo)) As Integer
                        For ilTrash = 0 To UBound(imTrashLnNo) Step 1
                            ilTrashLnNo(ilTrash) = imTrashLnNo(ilTrash)
                        Next ilTrash
                        ilIndex = 0
                        'For ilTrash = 1 To UBound(imTrashLnNo) - 1 Step 1
                        For ilTrash = 0 To UBound(imTrashLnNo) - 1 Step 1
                            If imTrashLnNo(ilTrash) > ilIndex Then
                                ilIndex = imTrashLnNo(ilTrash)
                            End If
                        Next ilTrash
                        'ilCff = 1
                        'For ilTrash = ilIndex To 1 Step -1
                        '    For ilClf = 1 To UBound(ilTrashLnNo) - 1 Step 1
                        ilCff = 0
                        For ilTrash = ilIndex To 0 Step -1
                            For ilClf = 0 To UBound(ilTrashLnNo) - 1 Step 1
                                If ilTrashLnNo(ilClf) = ilTrash Then
                                    imTrashLnNo(ilCff) = ilTrash
                                    ilCff = ilCff + 1
                                    Exit For
                                End If
                            Next ilClf
                        Next ilTrash
                        Erase ilTrashLnNo
                        Exit For
                    End If
                Next ilLoop
            ElseIf (slLineType = "H") Then
                imTrashLnNo(0) = tgClfCntr(ilRowNo - 1).ClfRec.iLine
                ReDim Preserve imTrashLnNo(0 To 1) As Integer
                For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                    If (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "E") Then
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilLoop).iLineNo Then
                                ilPkRowNo = ilClf + 1
                                Exit For
                            End If
                        Next ilClf
                        ilIndex = tgPackLn(ilLoop).iIndex
                        ilPrev = ilLoop
                        Do While ilIndex >= 0
                            If tgPackLn(ilIndex).iLineNo = ilLineNo Then
                                tgPackLn(ilPrev).iIndex = tgPackLn(ilIndex).iIndex
                                tgPackLn(ilIndex).iLineNo = 0
                                Exit For
                            End If
                            ilPrev = ilIndex
                            ilIndex = tgPackLn(ilIndex).iIndex
                        Loop
                    End If
                Next ilLoop
            Else
                imTrashLnNo(0) = tgClfCntr(ilRowNo - 1).ClfRec.iLine
                ReDim Preserve imTrashLnNo(0 To 1) As Integer
            End If
            'For ilTrash = 1 To UBound(imTrashLnNo) - 1 Step 1
            For ilTrash = 0 To UBound(imTrashLnNo) - 1 Step 1
                ilLineNo = imTrashLnNo(ilTrash)
                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                    If tgClfCntr(ilClf).ClfRec.iLine = ilLineNo Then
                        ilRowNo = ilClf + 1
                        For ilLoop = ilRowNo To UBound(smLnSave, LINEBOUNDINDEX) - 1 Step 1
                            For ilIndex = 1 To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
                                smLnSave(ilIndex, ilLoop) = smLnSave(ilIndex, ilLoop + 1)
                            Next ilIndex
                            For ilIndex = 1 To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
                                imLnSave(ilIndex, ilLoop) = imLnSave(ilIndex, ilLoop + 1)
                            Next ilIndex
                            For ilIndex = 1 To UBound(smLnShow, FIELDBOUNDINDEX) Step 1
                                smLnShow(ilIndex, ilLoop) = smLnShow(ilIndex, ilLoop + 1)
                            Next ilIndex
                        Next ilLoop
                        For ilLoop = ilRowNo To UBound(smLnSave, LINEBOUNDINDEX) - 1 Step 1
                            smLnComment(ilLoop) = smLnComment(ilLoop + 1)
                            smLnInitComment(ilLoop) = smLnInitComment(ilLoop + 1)
                            For ilIndex = LBound(imLnCommShowOn, FIELDBOUNDINDEX) To UBound(imLnCommShowOn, FIELDBOUNDINDEX) Step 1
                                imLnCommShowOn(ilIndex, ilLoop) = imLnCommShowOn(ilIndex, ilLoop + 1)
                                imLnInitCommShowOn(ilIndex, ilLoop) = imLnInitCommShowOn(ilIndex, ilLoop + 1)
                            Next ilIndex
                        Next ilLoop
                        For ilLoop = ilRowNo To UBound(smLnSave, LINEBOUNDINDEX) - 1 Step 1
                            tgClfCntr(ilLoop - 1) = tgClfCntr(ilLoop)
                        Next ilLoop
                        ilUpperBound = UBound(smLnSave, LINEBOUNDINDEX)
                        ReDim Preserve smLnSave(0 To 29, 0 To ilUpperBound - 1) As String
                        ReDim Preserve imLnSave(0 To 35, 0 To ilUpperBound - 1) As Integer
                        ReDim Preserve smLnShow(0 To LINECOMMINDEX, 0 To ilUpperBound - 1) As String
                        ReDim Preserve smLnComment(0 To ilUpperBound - 1) As String
                        ReDim Preserve smLnInitComment(0 To ilUpperBound - 1) As String
                        ReDim Preserve imLnCommShowOn(0 To 4, 0 To ilUpperBound - 1) As Integer
                        ReDim Preserve imLnInitCommShowOn(0 To 4, 0 To ilUpperBound - 1) As Integer
                        ReDim Preserve tgClfCntr(0 To ilUpperBound - 2) As CLFLIST
                        If (imStep1Index = 0) Or (imStep1Index = 1) Then   'Renumber lines
                            For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
                                If tgClfCntr(ilLoop).ClfRec.iLine > ilLineNo Then
                                    tgClfCntr(ilLoop).ClfRec.iLine = tgClfCntr(ilLoop).ClfRec.iLine - 1
                                End If
                                If tgClfCntr(ilLoop).ClfRec.iPkLineNo > ilLineNo Then
                                    tgClfCntr(ilLoop).ClfRec.iPkLineNo = tgClfCntr(ilLoop).ClfRec.iPkLineNo - 1
                                End If
                            Next ilLoop
                            For ilLoop = LBound(tgCffCntr) To UBound(tgCffCntr) Step 1
                                If tgCffCntr(ilLoop).CffRec.iClfLine > ilLineNo Then
                                    tgCffCntr(ilLoop).CffRec.iClfLine = tgCffCntr(ilLoop).CffRec.iClfLine - 1
                                End If
                            Next ilLoop
                            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) Step 1
                                If tgPackLn(ilLoop).iLineNo > ilLineNo Then
                                    tgPackLn(ilLoop).iLineNo = tgPackLn(ilLoop).iLineNo - 1
                                End If
                            Next ilLoop
                        End If
                        Exit For
                    End If
                Next ilClf
            Next ilTrash
            'Leave tgCff as it is since it is a link list and leaving the extra images
            'will do no harm
            If ilPackLn Then
                mResortLines hmMnf
                Screen.MousePointer = vbHourglass
            End If
            If (slLineType = "H") Then
                mLnTotals ilPkRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
            End If
        End If
        imLnChg = True
        imComputeReq = True
        laclnFrame.DragIcon = IconTraf!imcIconStd.DragIcon
        imcTrash.Picture = IconTraf!imcTrashClosed.Picture
    End If
    '9/14/15: Moved here to aviod a subscript error.
    mSetHideParameters
    'mBuildMapLinePaint
    mSetLineScroll True, False
    mSetHdDate False, False
    mResetDemoBar False
    imDragBoxNo = -1
    pbcLnTotal.Cls
    pbcLnDates.Cls
    pbcLine.Cls
    pbcLine_Paint
    mPkgTotal
    mCntrTotal
    mSetSchStatus smOrigStatus
    mSetCreditInfo
    'mSetPriDemoResearch hmDrf, hmMnf, imStep1Index
    mSetCommands
    Screen.MousePointer = vbDefault
End Sub

Private Sub imcTrash_DragDrop(Source As Control, X As Single, Y As Single)
'    lacLnFrame.DragIcon = IconTraf!imcIconStd.DragIcon
    imcTrash_Click
End Sub

Private Sub imcTrash_DragOver(Source As Control, X As Single, Y As Single, State As Integer)
    If State = vbEnter Then    'Enter drag over
        laclnFrame.DragIcon = IconTraf!imcIconDwnArrow.DragIcon
        imcTrash.Picture = IconTraf!imcTrashOpened.Picture
    ElseIf State = vbLeave Then
        laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        imcTrash.Picture = IconTraf!imcTrashClosed.Picture
    End If
End Sub

Private Sub imcTrash_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Public Sub lacAudTotals_Click()
    '12/5/19
    Dim ilSvDBTotals As Integer
    Dim ilDBTotals As Integer
    
    'Note: removed all calls to mSetPriDemoResearch except
    '      here and in mSelectChange.
    'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (tgSpf.sGUsePropSys = "Y") Then   ' And (imLnTotalType = 2) Then
    If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (tgSpf.sGUsePropSys = "Y") Then   ' And (imLnTotalType = 2) Then
        ilSvDBTotals = imDBTotals
        If Contract.plcDemoBar.Visible = False Then
            imDBTotals = 6  'Weekly summary
        End If
        '10383 moved from below
        mSetPriDemoResearch hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imStep1Index, lmCPriDemoGRP, lmCPriDemoGrImp, lmCPriDemoCPP, lmCPriDemoCPM, imCPriDemoRating
        mSummary
        imDBTotals = ilSvDBTotals
        Contract.mCntrTotal
        '12/11/19
        '10383 moved to above
'        mSetPriDemoResearch hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imStep1Index, lmCPriDemoGRP, lmCPriDemoGrImp, lmCPriDemoCPP, lmCPriDemoCPM, imCPriDemoRating
        pbcLine_Paint
        pbcLnTotal_Paint
        bmLnChgRegenResearch = False
    End If
    mSetPriDemoResearch hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imStep1Index, lmCPriDemoGRP, lmCPriDemoGrImp, lmCPriDemoCPP, lmCPriDemoCPM, imCPriDemoRating
End Sub

Private Sub lacAudTotals_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    mAllSetShow 0
End Sub

Private Sub lacCreditInfo_Click()
    pbcClickFocus.SetFocus
    'gShowHelpMess tmChfHelp(), CHFCREDITR + imCreditColor
End Sub

Private Sub lacCreditInfo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub lacLnTotals_Click(Index As Integer)
    pbcClickFocus.SetFocus
    'gShowHelpMess tmChfHelp(), CHFTOTSR + imTotColor
End Sub

Private Sub lacPayInfo_Click()
    pbcClickFocus.SetFocus
    'gShowHelpMess tmChfHelp(), CHFSTATSR + imStatsColor
End Sub

Private Sub lacPayInfo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Public Sub lacPrice_Click(Index As Integer)
    Dim ilRowNo As Integer
    Dim ilSvLnRowNo As Integer
    Dim ilSvLnBoxNo As Integer
    Dim slStr As String
    Dim ilMax As Integer


    If Index = 1 Then
        If igFreezeState = 1 Then
            igFreezeState = 0
            lacPrice(Index).Caption = "Unfreeze Calculation"
            mAllSetShow 0
            mUnfreezeCalc
        Else
            mAllSetShow 0
            igFreezeState = 1
            lacPrice(Index).Caption = "Freeze Calculation"
        End If
        Exit Sub
    End If
    If Index = 2 Then
        bgSortByLineNo = Not bgSortByLineNo
        If bgSortByLineNo Then
            lacPrice(Index).Caption = "# Sort"
        Else
            lacPrice(Index).Caption = "Std Sort"
        End If
        mResortLines hmMnf
        If edcLineNo(0).Text = "" Then
            imBypassLnPaint = False
            pbcLine_Paint
        Else
            imDelaySrce = 3
            tmcDelay.Interval = 100
            tmcDelay.Enabled = True
        End If
        Exit Sub
    End If
    'If ((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 8)) Then
    If imDiffMode Then
        If cbcDifference.ListIndex > 0 Then
            Exit Sub
        End If
    End If
    pbcSumType_MouseUp 1, 0, 0, 0, 0
    Exit Sub
'    Screen.MousePointer = vbHourglass
'    'If ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) Or (imLnBoxNo = PRICEINDEX) Then
'    '    mSetTotalsFrmWks
'    'End If
'    ilSvLnBoxNo = imLnBoxNo
'    If tgSpf.sCLnStdQt = "Y" Then
'        mAllSetShow 8
'        'If imLnBoxNo = PRICEINDEX Then
'            mLnSetShow imLnBoxNo
'        '    imLnBoxNo = -1
'        'End If
'        If imLnTotalType < 0 Then
'            imLnTotalType = 0
'        Else
'            imLnTotalType = imLnTotalType + 1
'            If imLnTotalType >= lbcQtPrice.ListCount Then
'                imLnTotalType = 0
'            End If
'        End If
'        lacPrice(Index).Caption = lbcQtPrice.List(imLnTotalType)
'        If imLnTotalType > 1 Then
'            'pbcLine_MouseUp 0, 0, CSng(lmLnHotSpot(3, 1)), CSng(lmLnHotSpot(3, 2))
'            imHSCurWkNo = 13 * (imLnTotalType - 2) + 1
'        End If
'        imInQtPrice = True
'        lbcQtPrice.ListIndex = imLnTotalType
'        imInQtPrice = False
'    Else
'        'If imLnBoxNo = PRICEINDEX Then
'            mLnSetShow imLnBoxNo
'        '    imLnBoxNo = -1
'        'End If
'        If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (tgSpf.sGUsePropSys = "Y") Then
'            If imLnTotalType = 0 Then
'                imLnTotalType = 1
'                lacPrice(Index).Caption = "Total Price"    ' & sgLF & sgCR & "Price"
'            ElseIf imLnTotalType = 1 Then
'                imLnTotalType = 2
'                lacPrice(Index).Caption = "Research"    ' & sgLF & sgCR & "Price"
'            Else
'                imLnTotalType = 0
'                lacPrice(Index).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
'            End If
'            If imLnTotalType <> 2 Then
'                lacPrice(Index).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'            Else
'                lacPrice(Index).Height = tmLnCtrls(SPOTSINDEX).fBoxY / 2 + 15
'                mResearchSubTitles
'            End If
'        Else
'            lacPrice(Index).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'            If imLnTotalType = 0 Then
'                imLnTotalType = 1
'                lacPrice(Index).Caption = "Total Price"    ' & sgLF & sgCR & "Price"
'            Else
'                imLnTotalType = 0
'                lacPrice(Index).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
'            End If
'        End If
'    End If
'    pbcLine.Cls
'    ilSvLnRowNo = imLnRowNo
'    ilMax = UBound(tgClfCntr) - 1
'    If tgClfCntr(UBound(tgClfCntr)).iFirstCff >= 0 Then
'        ilMax = UBound(tgClfCntr)
'    End If
'    For ilRowNo = LBound(tgClfCntr) + 1 To ilMax + 1 Step 1
'        imLnRowNo = ilRowNo
'        'mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf
'        'If (tgClfCntr(imLnRowNo - 1).iSPChg = False) Or (tgUrf(0).sUseComputeCMC <> "I") Then
'            mGetLnPriceInfo imLnRowNo, slStr, imLnTotalType, PRICEINDEX
'        'End If
'    Next ilRowNo
'    If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (tgSpf.sGUsePropSys = "Y") And (imLnTotalType = 2) Then
'        mSummary
'        lacAudTotals_Click
'        pbcLnTotal_Paint
'    End If
'    mCntrTotal
'    imLnRowNo = ilSvLnRowNo
'    If tgSpf.sCLnStdQt = "Y" Then
'        pbcLnTotal.Cls
'        pbcLnDates.Cls
'        pbcLine.Cls
'        pbcLine_Paint
'        pbcLnTotal_Paint
'        pbcLnDates_Paint
'        If plcDemoBar.Visible Then
'            mBuildWkInfo True, False, False
'            pbcDemoBar(1).Cls
'            pbcDemoBar_Paint 1
'        End If
'    Else
'        pbcLine_Paint
'    End If
'    If ((imLnBoxNo >= imLBCTCtrls) And (imLnBoxNo <= UBound(tmLnCtrls))) And (ilSvLnBoxNo <> PRICEINDEX) Then
'        imLnBoxNo = ilSvLnBoxNo
'        mLnEnableBox imLnBoxNo
'    ElseIf (ilSvLnBoxNo = PRICEINDEX) And (imLnTotalType >= 2) And (tgSpf.sCLnStdQt = "Y") Then
'        imLnBoxNo = ilSvLnBoxNo
'        mLnEnableBox imLnBoxNo
'    ElseIf (ilSvLnBoxNo = PRICEINDEX) And (tgSpf.sCLnStdQt <> "Y") Then
'        imLnBoxNo = ilSvLnBoxNo
'        mLnEnableBox imLnBoxNo
'    'ElseIf imStepBoxNo >= LBound(tmStepCtrls) And imStepBoxNo <= UBound(tmStepCtrls) Then
'    ElseIf imStepBoxNo >= imLBCTCtrls And imStepBoxNo <= UBound(tmStepCtrls) Then
'        mStepSetFocus imStepBoxNo
'    Else
'        If (tgSpf.sCLnStdQt = "Y") Then
'            If (pbcQTPrice.Enabled) And (pbcQTPrice.Visible) Then
'                pbcQTPrice.SetFocus
'            Else
'                cmcCancel.SetFocus
'            End If
'        Else
'            cmcCancel.SetFocus
'        End If
'    End If
'    mSetCommands    'incase demo bar shown it it shouldn't be shown
'    Screen.MousePointer = vbDefault
End Sub

Private Sub lacSchStatus_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub lbcAcqCost_Click()
    Dim slStr As String
    Dim ilPos As Integer

    If lbcAcqCost.ListIndex >= 0 Then
        slStr = lbcAcqCost.List(lbcAcqCost.ListIndex)
        ilPos = InStr(1, slStr, ": ", vbTextCompare)
        If ilPos > 0 Then
            edcDGDropDown.Text = Mid$(slStr, ilPos + 2)
            smLnSave(16, imLnRowNo) = Left$(slStr, ilPos - 2)
        End If
    End If
End Sub

Private Sub lbcAdvt_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcAdvt, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcAdvt_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcAdvt_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcAdvt_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    
    
    If (X < 0) Or (X > lbcAdvt.Width) Then
        lbcAdvt.ToolTipText = ""
        imButtonIndex = -1
        Exit Sub
    End If
    If imButtonIndex <> (Y \ fgListHtArial825) + lbcAdvt.TopIndex Then
        imButtonIndex = Y \ fgListHtArial825 + lbcAdvt.TopIndex
        If (imButtonIndex > 0) And (imButtonIndex <= lbcAdvt.ListCount - 1) Then
            slNameCode = tmCntAdvertiser(imButtonIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilRet = gBinarySearchAdf(Val(slCode))
            If ilRet <> -1 Then
                If (tgCommAdf(ilRet).sBillAgyDir = "D") Then
                    lbcAdvt.ToolTipText = Trim$(tgCommAdf(ilRet).sFirstCntrAddr)
                Else
                    lbcAdvt.ToolTipText = ""
                End If
            End If
        Else
            imButtonIndex = -1
            lbcAdvt.ToolTipText = ""
        End If
    End If
End Sub

Private Sub lbcAdvt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcAdvt, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
    imButtonIndex = -1
    lbcAdvt.ToolTipText = ""
End Sub

Private Sub lbcAgency_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'delay in case double click event
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcAgency, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcAgency_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcAgency_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcAgency_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcAgency, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcBBLen_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcBBLen, edcDGDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcBBLen_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcBillCycle_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcBillCycle, edcHdDropDown, imChgMode, imLbcArrowSetting
    If lbcBillCycle.ListIndex < 0 Then
        'gShowHelpMess tmChfHelp(), -1
    Else
        'gShowHelpMess tmChfHelp(), lbcBillCycle.ListIndex + CHFBILLCYCLE
    End If
    imLbcMouseDown = False
End Sub

Private Sub lbcBillCycle_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcBPlate_Click()
    Dim ilIndex As Integer
    If lbcBPlate.ListIndex > 0 Then
        ilIndex = lbcBPlate.ListIndex
        If mBPlateReadRec(ilIndex) Then
            'If tmCmf.iStrLen > 0 Then
            '    lacBPlate.Caption = Trim$(Left$(tmCmf.sComment, tmCmf.iStrLen))
            'Else
            '    lacBPlate.Caption = ""
            'End If
            lacBPlate.Caption = gStripChr0(tmCmf.sComment)
        Else
            lacBPlate.Caption = ""
        End If
        cmcDnMove.SetFocus
    End If
End Sub

Private Sub lbcBPlate_DblClick()
    Dim slStr As String
    'Dim ilNoForms As Integer
    'Dim ilUsage As Integer
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    'Unload IconTraf
    'If Not gWinRoom(igNoLJWinRes(BOILERPLATESLIST)) Then
    '    Exit Sub
    'End If
    If tgUrf(0).iRemoteUserID > 0 Then
        Exit Sub
    End If
    If (igWinStatus(BOILERPLATESLIST) <> 2) Then
        Exit Sub
    End If
    'Screen.MousePointer = vbHourglass
    If lbcBPlate.ListIndex <= 0 Then
        sgCmmTitle = ""
    Else
        sgCmmTitle = lbcBPlate.List(lbcBPlate.ListIndex)
    End If
    igCmmCallSource = CALLSOURCECONTRACT
    ilUpdateAllowed = imUpdateAllowed
    'igChildDone = False
    'Traffic.edcLinkSrceHelpMsg.Text = ""
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igCmmCallSource)) & "\" & sgCmmTitle
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igCmmCallSource)) & "\" & sgCmmTitle
    End If
    sgCommandStr = slStr
    BPlate.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgCmmTitle)
    igCmmCallSource = Val(sgCmmTitle)
    ilParse = gParseItem(slStr, 2, "\", sgCmmTitle)
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    If igCmmCallSource = CALLDONE Then
        igCmmCallSource = CALLNONE
        mCommentPop False
        lacBPlate.Caption = ""
        lbcBPlate.Clear
        mBPlatePop
        gFindMatch sgCmmTitle, 1, lbcBPlate
        If gLastFound(lbcBPlate) > 0 Then
            lbcBPlate.ListIndex = gLastFound(lbcBPlate)
        Else
            lbcBPlate.ListIndex = -1
        End If
        sgCmmTitle = ""
    ElseIf igCmmCallSource = CALLCANCELLED Then
        igCmmCallSource = CALLNONE
        sgCmmTitle = ""
        lbcBPlate.ListIndex = -1
    ElseIf igCmmCallSource = CALLTERMINATED Then
        igCmmCallSource = CALLNONE
        sgCmmTitle = ""
        lbcBPlate.ListIndex = -1
    End If
End Sub

Private Sub lbcBusCat_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'delay click event encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcBusCat, edcShareDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcBusCat_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcBusCat_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcBusCat_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcBusCat, edcShareDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcShareSTab.SetFocus
        Else
            pbcShareTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcBuyer_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcBuyer, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcBuyer_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcBuyer_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcBuyer_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcBuyer, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcComment_Click(Index As Integer)
    If Index = 0 Then
        If imLbcMouseDown Then
            tmcClick.Interval = 300
            tmcClick.Enabled = True
            pbcEatTab(1).Enabled = True
            pbcEatTab(0).Enabled = True
            pbcEatTab(0).SetFocus
            imLbcMouseDown = False
        Else
            gProcessLbcClick lbcComment(Index), edcHdDropDown, imChgMode, imLbcArrowSetting
        End If
    Else
        If imLbcMouseDown Then
            tmcClick.Interval = 300
            tmcClick.Enabled = True
            'pbcEatTab(1).Enabled = True
            'pbcEatTab(0).Enabled = True
            'pbcEatTab(0).SetFocus
            imLbcMouseDown = False
        Else
            If Not edcLNDropDown.Visible Then
                edcLNDropDown.Visible = True
            End If
            gProcessLbcClick lbcComment(Index), edcLNDropDown, imChgMode, imLbcArrowSetting
        End If
    End If
End Sub

Private Sub lbcComment_DblClick(Index As Integer)
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcComment_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcComment_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        If Index = 0 Then
            imLbcArrowSetting = False
            gProcessLbcClick lbcComment(Index), edcHdDropDown, imChgMode, imLbcArrowSetting
            If imTabDirection = -1 Then  'Right To Left
                pbcHdSTab.SetFocus
            Else
                pbcHdTab.SetFocus
            End If
        Else
            imLbcArrowSetting = False
            gProcessLbcClick lbcComment(Index), edcLNDropDown, imChgMode, imLbcArrowSetting
            If imTabDirection = -1 Then  'Right To Left
                pbcLnSTab.SetFocus
            Else
                pbcLnTab.SetFocus
            End If
        End If
    End If
End Sub

Private Sub lbcComp_Click(Index As Integer)
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'delay click event encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcComp(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcComp_DblClick(Index As Integer)
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcComp_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcComp_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcComp(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcShareSTab.SetFocus
        Else
            pbcShareTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcDaypart_Click()
    Dim ilMnfDemo As Integer
    Dim ilIndex As Integer
    Dim slNameCode As String
    Dim ilRet As Integer
    Dim slCode As String
    Dim ilRow As Integer
    If (Trim$(smPowerCaption) = "Rate Bar") Then
        ilMnfDemo = 0
        If lbcDaypart.ListIndex >= 0 Then
            'Find matching name
            If (lbcDemo(0).ListIndex >= 1) Or (lbcDemo(1).ListIndex >= 1) Or (lbcDemo(2).ListIndex >= 1) Or (lbcDemo(3).ListIndex >= 1) Then
                'ilIndex = lbcDemo(lbcDaypart.ListIndex).ListIndex
                ilIndex = lbcDemo(imDemoMap(lbcDaypart.ListIndex)).ListIndex
                slNameCode = tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            Else
                ilIndex = lbcDaypart.ListIndex
                slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            End If
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilMnfDemo = Val(slCode)
        Else
            If lbcDemo(0).ListIndex >= 1 Then
                lbcDaypart.ListIndex = 0
                If (lbcDemo(0).ListIndex >= 1) Or (lbcDemo(1).ListIndex >= 1) Or (lbcDemo(2).ListIndex >= 1) Or (lbcDemo(3).ListIndex >= 1) Then
                    slNameCode = tgDemoCode(lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(lbcDemo(0).ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilMnfDemo = Val(slCode)
                Else
                    slNameCode = tgDemoCode(lbcDaypart.ListIndex).sKey 'Traffic!lbcDemoCode.List(lbcDemo(0).ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilMnfDemo = Val(slCode)
                End If
            End If
        End If
        If (tmcDelay.Enabled = False) And (ilMnfDemo <> imPBMnfDemo) Then
            If (Trim$(smPowerCaption) = "Rate Bar") Then
                For ilRow = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                    tmPB1DP(ilRow).iAudSet = False
                Next ilRow
                mSetRBEquals 3
                imPBMnfDemo = ilMnfDemo
            End If
        End If
    End If
    mPBSetCommands
End Sub

Private Sub lbcDaypart_GotFocus()
    'tmcDelay.Enabled = False
    'imDelaySrce = -1
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
    If (Trim$(smPowerCaption) = "Rate Bar") Then
    Else
    End If
End Sub

Private Sub lbcDBBook_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    If lbcDBBook.Visible Then
        imAskBookQ = True
    End If
    gProcessLbcClick lbcDBBook, edcDBBook, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcDBBook_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcDBDemo_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcDBDemo, edcDBDemo, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcDBDemo_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcDBDisplay_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    lbcDBDisplay.Visible = False
    gProcessLbcClick lbcDBDisplay, edcDBDisplay, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub
Private Sub lbcDBDisplay_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcDBSocEco_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcDBSocEco, edcDBSocEco, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcDBSocEco_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcDemo_Click(Index As Integer)
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcDemo(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcDemo_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcDWP_Click()
    Dim slStr As String

    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcDWP, edcDGDropDown, imChgMode, imLbcArrowSetting
    If tgSpf.sAllowDailyBuys <> "Y" Then
        slStr = edcDGDropDown.Text
        If InStr(1, slStr, "Daily", 1) > 0 Then
            lbcDWP.ListIndex = lbcDWP.ListIndex + 1   'Force to weekly
            gProcessLbcClick lbcDWP, edcDGDropDown, imChgMode, imLbcArrowSetting
        End If
    End If
    'mDGSetCommands
    imLbcMouseDown = False
End Sub

Private Sub lbcDWP_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcExcl_Click(Index As Integer)
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcExcl(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcExcl_DblClick(Index As Integer)
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcExcl_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcExcl_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcExcl(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcShareSTab.SetFocus
        Else
            pbcShareTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcInvGroup_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcInvGroup, edcHdDropDown, imChgMode, imLbcArrowSetting
    If lbcInvGroup.ListIndex < 0 Then
        'gShowHelpMess tmChfHelp(), -1
    Else
        'gShowHelpMess tmChfHelp(), lbcInvGroup.ListIndex + CHFINVGROUP
    End If
    imLbcMouseDown = False
End Sub

Private Sub lbcInvGroup_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcLen_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcLen, edcLNDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcLen_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcLnProgram_Click(Index As Integer)
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcLnProgram(Index), edcLNDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcLnProgram_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcLnVehicle_Click(Index As Integer)
    'If Index = 0 Then
        If imLbcMouseDown Then
            imLbcArrowSetting = False
        Else
            imLbcArrowSetting = True
        End If
        gProcessLbcClick lbcLnVehicle(igTabMapIndex), edcLNDropDown, imChgMode, imLbcArrowSetting
        If Not lbcLnVehicle(igTabMapIndex).Visible Then
            pbcLbcVehicle.Visible = False
        Else
            pbcLbcVehicle_Paint
        End If
        imLbcMouseDown = False
    'End If
End Sub

Private Sub lbcLnVehicle_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If Index = 0 Then
        imLbcMouseDown = True
    End If
End Sub

Private Sub lbcLnVehicle_Scroll(Index As Integer)
    'If Index = 0 Then
        pbcLbcVehicle_Paint
    'End If
End Sub

Private Sub lbcPBLen_Click()
    imPBLenClicked = True
    mPBSetCommands
End Sub

Private Sub lbcPBLen_GotFocus()
    plcCalendar.Visible = False
    tmcDelay.Enabled = False
    imDelaySrce = -1
    mAllSetShow 0
End Sub

Private Sub lbcPkProgram_Click(Index As Integer)
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcPkProgram(igTabMapIndex), edcLNDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcPkProgram_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcPkVehicle_Click(Index As Integer)
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcPkVehicle(igTabMapIndex), edcLNDropDown, imChgMode, imLbcArrowSetting
    If Not lbcPkVehicle(igTabMapIndex).Visible Then
        pbcLbcVehicle.Visible = False
    Else
        pbcLbcVehicle_Paint
    End If
    imLbcMouseDown = False
End Sub

Private Sub lbcPkVehicle_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcPkVehicle_Scroll(Index As Integer)
    pbcLbcVehicle_Paint
End Sub

Private Sub lbcPot_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcPot, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcPot_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcPot_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcPot_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcPot, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcPrg_Click(Index As Integer)
    If (Index = 2) Or (Index = 3) Then  '2=CPM Copy Type (Not used); 3= Podcast Target
        If imLbcMouseDown Then
            tmcClick.Interval = 300
            tmcClick.Enabled = True
            pbcEatTab(1).Enabled = True
            pbcEatTab(0).Enabled = True
            pbcEatTab(0).SetFocus
            imLbcMouseDown = False
        Else
            If (Not edcLNDropDown.Visible) And Contract.grdCPMBuy.Visible And lmCPMEnableRow >= 0 Then
                edcLNDropDown.Visible = True
            End If
            gProcessLbcClick lbcPrg(Index), edcLNDropDown, imChgMode, imLbcArrowSetting
        End If
    End If
    '10879
    If (Index = 4) Or (Index = 5) Or Index = 6 Then   '4=CPM Position; 5=CPM Priority 6=CPM Length
        If (Not edcLNDropDown.Visible) And Contract.grdCPMBuy.Visible And lmCPMEnableRow >= 0 Then
            edcLNDropDown.Visible = True
        End If
        gProcessLbcClick lbcPrg(Index), edcLNDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcPrg_DblClick(Index As Integer)
    If (Index = 2) Or (Index = 3) Then
        tmcClick.Enabled = False
        pbcEatTab(1).Enabled = False
        pbcEatTab(0).Enabled = False
        imDoubleClickName = True    'Double click event is followed by a mouse up event
                                    'Process the double click event in the mouse up event
                                    'to avoid the mouse up event being in next form
    End If
End Sub

Private Sub lbcPrg_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (Index = 2) Or (Index = 3) Then
        imLbcMouseDown = True
    End If
End Sub

Private Sub lbcPrg_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (Index = 2) Or (Index = 3) Then
        If imDoubleClickName Then
            gCPMDropdown 5
            If imTabDirection = -1 Then  'Right To Left
                pbcLnSTab.SetFocus
            Else
                pbcLnTab.SetFocus
            End If
        End If
    End If
End Sub

Private Sub lbcPriceType_Click(Index As Integer)
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    If Index = 0 Then
        If imLnBoxNo = PRICEINDEX Then
            gProcessLbcClick lbcPriceType(Index), edcLNDropDown, imChgMode, imLbcArrowSetting
        Else
            gProcessLbcClick lbcPriceType(Index), edcDGDropDown, imChgMode, imLbcArrowSetting
        End If
    Else
        'gProcessLbcClick lbcPriceType(Index), edcAirDropDown, imChgMode, imLbcArrowSetting
    End If
    imLbcMouseDown = False
End Sub

Private Sub lbcPriceType_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcProd_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcProd, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcProd_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcProd_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcProd_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcProd, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcQTPrice_Click()
    If imDiffMode Then
        If cbcDifference.ListIndex > 0 Then
            Exit Sub
        End If
    End If
    If imInQtPrice Then
        Exit Sub
    End If
    imLnTotalType = lbcQtPrice.ListIndex - 1
    lacPrice_Click 0
End Sub

Private Sub lbcRateCard_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcRateCard, edcHdDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcRateCard_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcRBBookName_Click()
    Dim ilRow As Integer
    
    If (UBound(imRBDnfCode) = LBound(imRBDnfCode)) And (lbcRBBookName.ListIndex < 0) Then
        Exit Sub
    End If
    If lbcRBBookName.ListIndex >= 0 Then
        If UBound(imRBDnfCode) > LBound(imRBDnfCode) Then
            If lbcRBBookName.ItemData(lbcRBBookName.ListIndex) = imRBDnfCode(UBound(imRBDnfCode) - 1) Then
                lbcRBBookName.ListIndex = -1
                Exit Sub
            End If
        End If
        imRBDnfCode(UBound(imRBDnfCode)) = lbcRBBookName.ItemData(lbcRBBookName.ListIndex)
        ReDim Preserve imRBDnfCode(0 To UBound(imRBDnfCode) + 1) As Integer
    Else
        ReDim imRBDnfCode(0 To 0) As Integer
    End If
    For ilRow = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
        tmPB1DP(ilRow).iAudSet = False
    Next ilRow
    mSetRBEquals 3
End Sub

Private Sub lbcRBBookName_GotFocus()
    plcCalendar.Visible = False
End Sub

Private Sub lbcRBBookName_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRow As Integer
    
    lbcRBBookName.ToolTipText = ""
    ilRow = (Y - 15) \ fgListHtArial825
    ilRow = ilRow + lbcRBBookName.TopIndex
    If ilRow < lbcRBBookName.ListCount Then
        lbcRBBookName.ToolTipText = lbcRBBookName.List(ilRow)
    End If
End Sub

Private Sub lbcRBDatesSpots_Click(Index As Integer)
    Dim ilLoop As Integer
    Dim ilTopIndex As Integer
    If imResetSelection = 2 Then
        Exit Sub
    End If
    ilTopIndex = lbcRBDatesSpots(Index).TopIndex
    If imResetSelection = 1 Then
        imResetSelection = 2
        For ilLoop = 0 To lbcRBDatesSpots(Index).ListCount - 1 Step 1
            If lbcRBDatesSpots(Index).ItemData(ilLoop) = 1 Then
                lbcRBDatesSpots(Index).Selected(ilLoop) = True
            Else
                lbcRBDatesSpots(Index).Selected(ilLoop) = False
            End If
        Next ilLoop
    Else
        For ilLoop = 0 To lbcRBDatesSpots(Index).ListCount - 1 Step 1
            If lbcRBDatesSpots(Index).Selected(ilLoop) Then
                lbcRBDatesSpots(Index).ItemData(ilLoop) = 1
            Else
                lbcRBDatesSpots(Index).ItemData(ilLoop) = 0
            End If
        Next ilLoop
        mSetMixDatesSpots
    End If
    lbcRBDatesSpots(Index).TopIndex = ilTopIndex
    imResetSelection = 0
    pbclbcRBDatesSpots_Paint Index
End Sub

Private Sub lbcRBDatesSpots_GotFocus(Index As Integer)
    plcCalendar.Visible = False
    If Index = 0 Then
        imRBInLnGridOrSum = 0
        mRBSetShow True
    End If
    mAllSetShow 0
End Sub

Private Sub lbcRBDatesSpots_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If X >= imListField(2) Then
        imResetSelection = 1
    Else
        imResetSelection = 0
    End If
End Sub

Private Sub lbcRBDatesSpots_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRow As Integer
    Dim slStr As String
    Dim slvalue As String
    Dim ilRet As Integer

    If X >= imListField(2) Then
        'Determine row
        ilRow = (Y - 15) \ fgListHtArial825
        imRBDatesSpotsRow = ilRow + lbcRBDatesSpots(Index).TopIndex
        If imRBDatesSpotsRow >= lbcRBDatesSpots(Index).ListCount Then
            imRBDatesSpotsRow = -1
            Exit Sub
        End If
        slStr = lbcRBDatesSpots(Index).List(imRBDatesSpotsRow)
        ilRet = gParseItem(slStr, 2, "|", slvalue)
        edcRBDatesSpots(Index).Text = slvalue
        edcRBDatesSpots(Index).Move lbcRBDatesSpots(Index).Left + imListField(2), lbcRBDatesSpots(Index).Top + ilRow * fgListHtArial825 + 15
        edcRBDatesSpots(Index).Visible = True
        If Not lbcRBDatesSpots(Index).Selected(imRBDatesSpotsRow) Then
            lbcRBDatesSpots(Index).Selected(imRBDatesSpotsRow) = True
        End If
        edcRBDatesSpots(Index).SetFocus
    End If
End Sub

Private Sub lbcRBDatesSpots_Scroll(Index As Integer)
    edcRBDatesSpots(Index).Visible = False
    pbclbcRBDatesSpots_Paint Index
End Sub

Private Sub lbcRBDaypart_Click()
    If Not imAllClicked Then
        imSetAll = False
        ckcRBAllDP.Value = vbUnchecked
        imSetAll = True
    End If
    If lbcRBDaypart.ListCount > 0 Then
        ckcRBAllDP.Caption = "All (" & lbcRBDaypart.SelCount & " of " & lbcRBDaypart.ListCount & ")"
    Else
        ckcRBAllDP.Caption = "All"
    End If
    mPBSetCommands
End Sub

Private Sub lbcRBDaypart_GotFocus()
    plcCalendar.Visible = False
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub lbcRBVehicle_Click()
    If Not imAllClicked Then
        imSetAll = False
        ckcRBAllVeh.Value = vbUnchecked
        imSetAll = True
    End If
    pbclbcRBVehicle_Paint
    If lbcRBVehicle.ListCount > 0 Then
        ckcRBAllVeh.Caption = "All (" & lbcRBVehicle.SelCount & " of " & lbcRBVehicle.ListCount & ")"
    Else
        ckcRBAllVeh.Caption = "All"
    End If
    mPBSetCommands
End Sub

Private Sub lbcRBVehicle_GotFocus()
    plcCalendar.Visible = False
    imDelaySrce = -1
    tmcDelay.Enabled = False
    imRBInLnGridOrSum = 0
    mRBSetShow True
    mAllSetShow 0
    'If (Trim$(smPowerCaption) <> "Rate Bar") Then
        mPopPBVehicle
    'End If
End Sub

Private Sub lbcRBVehicle_Scroll()
    If (Trim$(smPowerCaption) = "Rate Bar") Then
        If (tmcDelay.Enabled) And (imDelaySrce = 0) Then
            tmcDelay.Enabled = False
            tmcDelay.Enabled = True
        Else
            tmcDelay.Enabled = False
        End If
        pbclbcRBVehicle_Paint
    End If
End Sub

Private Sub lbcRegion_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300
        tmcClick.Enabled = True
        imLbcMouseDown = False
    Else
        If Not edcDGDropDown.Visible Then
            edcDGDropDown.Visible = True
        End If
        gProcessLbcClick lbcRegion, edcDGDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcRegion_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcRegion_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcRegion_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcRegion, edcDGDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcLnSTab.SetFocus
        Else
            pbcLnTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcResv_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcResv, edcShareDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcResv_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcResvAdvt_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcResvAdvt, edcShareDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcResvAdvt_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcRevNo_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcRevNo, edcRevNo, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcRevNo_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcRevSet_Click(Index As Integer)
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcRevSet(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcRevSet_DblClick(Index As Integer)
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcRevSet_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcRevSet_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcRevSet(Index), edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcSeg_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcSeg, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcSeg_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcSeg_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcSeg_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcSeg, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcShareBudget_Click(Index As Integer)
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcShareBudget(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcShowPrice_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcShowPrice, edcHdDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcShowPrice_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcShtTitle_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcShtTitle, edcHdDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcShtTitle_DblClick()
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcShtTitle_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcShtTitle_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcShtTitle, edcHdDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcHdSTab.SetFocus
        Else
            pbcHdTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcSPerson_Click(Index As Integer)
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        pbcEatTab(1).Enabled = True
        pbcEatTab(0).Enabled = True
        pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        gProcessLbcClick lbcSPerson(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcSPerson_DblClick(Index As Integer)
    tmcClick.Enabled = False
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub

Private Sub lbcSPerson_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcSPerson_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcSPerson(Index), edcShareDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcShareSTab.SetFocus
        Else
            pbcShareTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcStatus_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcStatus, edcHdDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcStatus_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcStep_Click(Index As Integer)
    '8723
    If Index = 0 And ogContractCreator.isFilemakerActive Then
        If imChgMode Then
            If lbcStep(0).List(2) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 2
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
        ElseIf InStr(lbcStep(0).Text, "New Order ") > 0 Then
            MsgBox "Filemaker order users can't create a new Order from the Order screen ", vbExclamation, "Filemaker Orders"
            If lbcStep(0).List(2) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 2
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
            Exit Sub
        End If
    End If
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcStep(Index), edcStepDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcStep_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcType_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcType, edcHdDropDown, imChgMode, imLbcArrowSetting
    If lbcType.ListIndex < 0 Then
        'gShowHelpMess tmChfHelp(), -1
    Else
        If sgCntrScreen = "Orders" Then
            'gShowHelpMess tmChfHelp(), lbcType.ListIndex + CHFTYPE + 3
        Else
            'gShowHelpMess tmChfHelp(), lbcType.ListIndex + CHFTYPE
        End If
    End If
    imLbcMouseDown = False
End Sub

Private Sub lbcType_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcVehGp6_Click()
    If imLbcMouseDown Then
        imLbcArrowSetting = False
    Else
        imLbcArrowSetting = True
    End If
    gProcessLbcClick lbcVehGp6, edcShareDropDown, imChgMode, imLbcArrowSetting
    imLbcMouseDown = False
End Sub

Private Sub lbcVehGp6_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Function mAdvtBranch() As Integer
'
'   ilRet = mAdvtBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    'Dim ilNoForms As Integer
    'Dim ilUsage As Integer
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mAdvtBranch = False
        Exit Function
    End If
    slStr = Trim$(edcHdDropDown.Text)
    If slStr = "" Then
        imDoubleClickName = False
        mAdvtBranch = False
        Exit Function
    End If
    ilRet = gOptionalLookAhead(edcHdDropDown, lbcAdvt, imBSMode, slStr)
    If (ilRet = 0) And (Not imDoubleClickName) Then
        imDoubleClickName = False
        mAdvtBranch = False
        Exit Function
    End If
    If igWinStatus(ADVERTISERSLIST) <> 2 Then
        Beep
        imDoubleClickName = False
        mAdvtBranch = True
        mSetFocus imHdBoxNo
        Exit Function
    End If
    Screen.MousePointer = vbHourglass  'Wait
    igAdvtCallSource = CALLSOURCECONTRACT
    If edcHdDropDown.Text = "[New]" Then
        sgAdvtName = ""
    Else
        sgAdvtName = slStr
    End If
    ilUpdateAllowed = imUpdateAllowed
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & sgAdvtName
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & sgAdvtName
    End If
    sgCommandStr = slStr
    Advt.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgAdvtName)
    igAdvtCallSource = Val(sgAdvtName)
    ilParse = gParseItem(slStr, 2, "\", sgAdvtName)
    imDoubleClickName = False
    mAdvtBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    If igAdvtCallSource = CALLDONE Then  'Done
        igAdvtCallSource = CALLNONE
        lbcAdvt.Clear
        smCntAdvertiserTag = ""    'Traffic!lbcAdvertiser.Tag = ""
        mAdvtPop
        If imTerminate Then
            mAdvtBranch = False
            Exit Function
        End If
        gFindMatch sgAdvtName, 1, lbcAdvt
        If gLastFound(lbcAdvt) > 0 Then
            imChgMode = True
            lbcAdvt.ListIndex = gLastFound(lbcAdvt)
            edcHdDropDown.Text = lbcAdvt.List(lbcAdvt.ListIndex)
            imChgMode = False
            mAdvtBranch = False
            mSetChg ADVTINDEX
        Else
            imChgMode = True
            lbcAdvt.ListIndex = 1
            edcHdDropDown.Text = lbcAdvt.List(lbcAdvt.ListIndex)
            imChgMode = False
            mSetChg ADVTINDEX
            edcHdDropDown.SetFocus
            sgAdvtName = ""
            Exit Function
        End If
        sgAdvtName = ""
    End If
    If igAdvtCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igAdvtCallSource = CALLNONE
        sgAdvtName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    If igAdvtCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igAdvtCallSource = CALLNONE
        sgAdvtName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

Private Function mAgencyBranch() As Integer
'
'   ilRet = mAgencyBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mAgencyBranch = False
        Exit Function
    End If
    ilRet = gOptionalLookAhead(edcHdDropDown, lbcAgency, imBSMode, slStr)
    If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcHdDropDown.Text = "[Direct Advertiser]") Then
        imDoubleClickName = False
        mAgencyBranch = False
        Exit Function
    End If
    If igWinStatus(AGENCIESLIST) <> 2 Then
        Beep
        imDoubleClickName = False
        mAgencyBranch = True
        mSetFocus imHdBoxNo
        Exit Function
    End If
    igAgyCallSource = CALLSOURCECONTRACT
    If edcHdDropDown.Text = "[New]" Then
        sgAgyName = ""
    Else
        sgAgyName = slStr
    End If
    ilUpdateAllowed = imUpdateAllowed
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igAgyCallSource)) & "\" & sgAgyName
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igAgyCallSource)) & "\" & sgAgyName
    End If
    sgCommandStr = slStr
    Agency.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgAgyName)
    igAgyCallSource = Val(sgAgyName)
    ilParse = gParseItem(slStr, 2, "\", sgAgyName)
    imDoubleClickName = False
    mAgencyBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    If igAgyCallSource = CALLDONE Then  'Done
        igAgyCallSource = CALLNONE
'        gSetMenuState True
        lbcAgency.Clear 'Force list box to be populated
        smCntAgencyTag = ""    'Traffic!lbcAgency.Tag = ""
        mAgencyPop
        If imTerminate Then
            mAgencyBranch = False
            Exit Function
        End If
        gFindMatch sgAgyName, 1, lbcAgency
        If gLastFound(lbcAgency) > 0 Then
            imChgMode = True
            lbcAgency.ListIndex = gLastFound(lbcAgency)
            edcHdDropDown.Text = lbcAgency.List(lbcAgency.ListIndex)
            imChgMode = False
            mAgencyBranch = False
            mSetChg AGENCYINDEX
        Else
            imChgMode = True
            lbcAgency.ListIndex = 1
            edcHdDropDown.Text = lbcAgency.List(1)
            imChgMode = False
            mSetChg AGENCYINDEX
            edcHdDropDown.SetFocus
            sgAgyName = ""
            Exit Function
        End If
        sgAgyName = ""
    End If
    If igAgyCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igAgyCallSource = CALLNONE
        sgAgyName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    If igAgyCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igAgyCallSource = CALLNONE
        sgAgyName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mAllSetShow                     *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: SetShow for all                *
'*                                                     *
'*******************************************************
Public Sub mAllSetShow(ilClear As Integer)
'
'   where
'       ilClear- 0=All; 1=All lines Only, 2=Clear All Except imLnBoxNo; 3=All header only ;
'                4=Clear all except imHdBoxNo; 5= All except Step;
'                6=All except plcCalendar (powerbar);  7=All except plcNum (powerbar)
'                8=Like 2 and 5
    If imLoadingForm = True Then
        Exit Sub
    End If
    If edcAct1.Visible Then
        edcAct1.Visible = False
    End If
    '11/2/19
    'If pbcAir.Visible Then
    '    'cmcAirCancel.SetFocus
    '    Exit Sub
    'End If
    If plcPower.Visible Then
        'cmcPBCancel.SetFocus
        Exit Sub
    End If
    If udcCBill.Visible Then
        udcCBill.Action 1
    End If
    If udcCGameInv.Visible Then
        udcCGameInv.Action 1
    End If
    If udcCDigital.Visible Then
        udcCDigital.Action 1
    End If
    If (ilClear = 0) Then
        If Contract.grdCPMBuy.Visible Then
            If grdCPMBuy.Col = CPMPRICETYPE Then
                pbcLnTab.SetFocus
                Exit Sub
            End If
            mSetBGColorWhite True
            mCPMSetShow
            grdCPMBuy.Row = 0
            grdCPMBuy.Col = CPMCOLOR
        End If
    End If
    If (ilClear = 0) Or (ilClear = 2) Or (ilClear = 3) Or (ilClear = 4) Or (ilClear = 5) Or (ilClear = 6) Or (ilClear = 7) Or (ilClear = 8) Then
        mCESetShow imCEBoxNo    'Header- Product Protection
        imCEBoxNo = -1
        mDmSetShow imDMBoxNo    'Header- Demo
        imDMBoxNo = -1
        mNoSetShow imNoBoxNo    'Header- Numbers
        imNoBoxNo = -1
        mSPSetShow imSPBoxNo    'Header- Salesperson
        imSPBoxNo = -1
        mSBSetShow imSBBoxNo    'Header- Share of Budget
        imSBBoxNo = -1
        mPTSetShow imPTBoxNo    'Header- Trade
        imPTBoxNo = -1
        mRSSetShow imRSBoxNo    'Header- Revenue Set
        imRSBoxNo = -1
        If (imOVBoxNo > 0) And (imOVType = 3) And (ilClear <> 2) Then
            mOvSetShow imOVBoxNo
            imOVBoxNo = -1
            mLnSetShow imLnBoxNo
        End If
        If ilClear <> 4 Then
            mSetShow imHdBoxNo  'Header
            imHdBoxNo = -1
        End If
    End If
    If (ilClear = 0) Or (ilClear = 1) Or (ilClear = 2) Or (ilClear = 4) Or (ilClear = 5) Or (ilClear = 6) Or (ilClear = 7) Or (ilClear = 8) Then
'11/2/19: Created CFlight form
'        If (imDGBoxNo > 0) Or (imAirBoxNo > 0) Or (pbcAir.Visible) Then
'            mDGSetShow imDGBoxNo    'Line Week Spec
'            imDGBoxNo = -1
'            mAirSetShow imAirBoxNo  'Line air week
'            imAirBoxNo = -1
'            imAirRowNo = -1
'            If (imSvLnRowNo <> imLnRowNo) And (imSvLnRowNo > 0) Then
'                imLnRowNo = imSvLnRowNo
'                smLineType = mGetLineType(imLnRowNo)
'                mGetDate True
'                imSvLnRowNo = -1
'            End If
'            imAirCancel = True
'            mFlightReturn
'            imLnChg = imSvLnChg
'            imComputeReq = imSvComputeReq
'        End If
        If (ilClear <> 2) And (ilClear <> 8) Then
            mOvSetShow imOVBoxNo
            imOVBoxNo = -1
            mDBSetShow imDB0BoxNo
            imDB0BoxNo = -1
            mDBSetShow imDBBoxNo
            imDBBoxNo = -1
            imDBRowNo = -1
            mLnSetShow imLnBoxNo    'Line
            imLnBoxNo = -1
            imLnRowNo = -1
            pbcLineArrow.Visible = False
            laclnFrame.Visible = False
            'For ilLoop = LBound(tmLnDCtrls) To UBound(tmLnDCtrls) Step 1
                tmLnDCtrls(2).sShow = ""
            'Next ilLoop
            pbcLnDates.Cls
            pbcLnDates_Paint
            Screen.MousePointer = vbDefault
        End If
    End If
    If (ilClear <> 5) And (ilClear <> 8) Then
        mStepSetShow imStepBoxNo
        imStepBoxNo = -1
    End If
    If ilClear <> 6 Then
        plcCalendar.Visible = False
    End If
    lbcDBDisplay.Visible = False
    lbcDBBook.Visible = False
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
    lbcQtPrice.Visible = False
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mBoxCalDate                     *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Place box around calendar date *
'*                                                     *
'*******************************************************
Private Sub mBoxCalDate()
    Dim slStr As String
    Dim ilRowNo As Integer
    Dim llInputDate As Long
    Dim ilWkDay As Integer
    Dim slDay As String
    Dim llDate As Long
    If imNoBoxNo = NODATEINDEX Then
        slStr = edcShareDropDown.Text
    ElseIf (imDGBoxNo = DGSTARTDATEINDEX) Or (imDGBoxNo = DGENDDATEINDEX) Then
        slStr = edcDGDropDown.Text
    Else
        If plcPower.Visible Then
            If (imPBDateIndex = 0) Or (imPBDateIndex = 1) Then
                slStr = edcPBDate(imPBDateIndex).Text
            End If
        ElseIf grdCPMBuy.Visible Then
            slStr = edcLNDropDown.Text
        End If
    End If
    If gValidDate(slStr) Then
        llInputDate = gDateValue(slStr)
        If (llInputDate >= lmCalStartDate) And (llInputDate <= lmCalEndDate) Then
            ilRowNo = 0
            llDate = lmCalStartDate
            Do
                ilWkDay = gWeekDayLong(llDate)
                slDay = Trim$(str$(Day(llDate)))
                If llDate = llInputDate Then
                    lacDate.Caption = slDay
                    lacDate.Move tmCDCtrls(ilWkDay + 1).fBoxX - 30, tmCDCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15) - 30
                    lacDate.Visible = True
                    Exit Sub
                End If
                If ilWkDay = 6 Then
                    ilRowNo = ilRowNo + 1
                End If
                llDate = llDate + 1
            Loop Until llDate > lmCalEndDate
            lacDate.Visible = False
        Else
            lacDate.Visible = False
        End If
    Else
        lacDate.Visible = False
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mBPlatePop                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Boilerplate list      *
'*                      box if required                *
'*                                                     *
'*******************************************************
Public Sub mBPlatePop()
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim slName As String
    Dim ilRet As Integer
    lacBPlate.Caption = ""
    lbcBPlate.Clear
    If Contract.grdCPMBuy.Visible Then
        For ilLoop = 0 To UBound(tmCommentCode7) - 1 Step 1
            slNameCode = tmCommentCode7(ilLoop).sKey
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            lbcBPlate.AddItem Trim$(slName)
        Next ilLoop
    Else
        If imHdBoxNo = MERCHINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode0) - 1 Step 1
                slNameCode = tmCommentCode0(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        ElseIf imHdBoxNo = PROMOINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode1) - 1 Step 1
                slNameCode = tmCommentCode1(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        ElseIf imHdBoxNo = INTCOMMINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode2) - 1 Step 1
                slNameCode = tmCommentCode2(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        ElseIf imHdBoxNo = CANCLAUSEINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode3) - 1 Step 1
                slNameCode = tmCommentCode3(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        ElseIf imHdBoxNo = CHGREASONINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode4) - 1 Step 1
                slNameCode = tmCommentCode4(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        ElseIf imHdBoxNo = OTHERCOMMINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode5) - 1 Step 1
                slNameCode = tmCommentCode5(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        ElseIf imLnBoxNo = LINECOMMINDEX Then
            For ilLoop = 0 To UBound(tmCommentCode6) - 1 Step 1
                slNameCode = tmCommentCode6(ilLoop).sKey
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                lbcBPlate.AddItem Trim$(slName)
            Next ilLoop
        Else
            Exit Sub
        End If
    End If
    lbcBPlate.AddItem "[New]", 0
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mBPlateReadRec                  *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read a record                  *
'*                                                     *
'*******************************************************
Private Function mBPlateReadRec(ilSelectIndex As Integer) As Integer
'
'   iRet = mBPlateReadRec(ilSelectIndex)
'   Where:
'       ilSelectIndex (I) - list box index
'       iRet (O)- True if record read,
'                 False if not read
'
    Dim slTitleCode As String  'Code and Code strings from Traffic!lbcLockBox or Traffic!lbcAgencyDP
    Dim slCode As String    'Code number- so record can be found
    Dim ilRet As Integer    'Return status
    If Contract.grdCPMBuy.Visible Then
        slTitleCode = tmCommentCode7(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(7).List(ilSelectIndex - 1)
    Else
        If imHdBoxNo = MERCHINDEX Then
            slTitleCode = tmCommentCode0(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(0).List(ilSelectIndex - 1)
        ElseIf imHdBoxNo = PROMOINDEX Then
            slTitleCode = tmCommentCode1(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(1).List(ilSelectIndex - 1)
        ElseIf imHdBoxNo = INTCOMMINDEX Then
            slTitleCode = tmCommentCode2(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(2).List(ilSelectIndex - 1)
        ElseIf imHdBoxNo = CANCLAUSEINDEX Then
            slTitleCode = tmCommentCode3(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(3).List(ilSelectIndex - 1)
        ElseIf imHdBoxNo = CHGREASONINDEX Then
            slTitleCode = tmCommentCode4(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(4).List(ilSelectIndex - 1)
        ElseIf imHdBoxNo = OTHERCOMMINDEX Then
            slTitleCode = tmCommentCode5(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(5).List(ilSelectIndex - 1)
        ElseIf imLnBoxNo = LINECOMMINDEX Then
            slTitleCode = tmCommentCode6(ilSelectIndex - 1).sKey 'Traffic!lbcCommentCode(6).List(ilSelectIndex - 1)
        Else
            mBPlateReadRec = False
            Exit Function
        End If
    End If
    ilRet = gParseItem(slTitleCode, 2, "\", slCode)
    On Error GoTo mBPlateReadRecErr
    gCPErrorMsg ilRet, "mBPlateReadRec (gParseItem field 2)", Contract
    On Error GoTo 0
    slCode = Trim$(slCode)
    tmCmfSrchKey.lCode = CLng(slCode)
    imCmfRecLen = Len(tmCmf) '5027
    ilRet = btrGetEqual(hmCmf, tmCmf, imCmfRecLen, tmCmfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    On Error GoTo mBPlateReadRecErr
    gBtrvErrorMsg ilRet, "mBPlateReadRec (btrGetEqual)", Contract
    On Error GoTo 0
    mBPlateReadRec = True
    Exit Function
mBPlateReadRecErr:
    On Error GoTo 0
    mBPlateReadRec = False
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mBuildWkInfo                    *
'*                                                     *
'*             Created:8/03/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build Week Information area    *
'*                      for a line                     *
'*                                                     *
'*******************************************************
Public Sub mBuildWkInfo(ilGetData As Integer, ilSetLnDates As Integer, ilGetAvails As Integer)
    mBuildWkInfoSub ilGetData, ilSetLnDates, ilGetAvails
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCEEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mCEEnableBox(ilBoxNo As Integer)
'
'   mCEEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slRecCode As String
    Dim slNameCode As String
    Dim ilFound As Integer
    Dim ilRet As Integer
    Dim slCode As String
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmCECtrls)) Then
        Exit Sub
    End If
    If Not imUpdateAllowed Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case CECOMPINDEX   'Competitive
            mMnfPop 2
            If imTerminate Then
                Exit Sub
            End If
            imChgMode = True
            If (lbcComp(0).ListIndex < 0) And (imComp0FirstTime) Then
                smComp0 = ""
                If tmAdf.iCode > 0 Then
                    slRecCode = Trim$(str$(tmAdf.iMnfComp(0)))
                    ilFound = False
                    For ilLoop = 0 To UBound(tgCompCode) - 1 Step 1 'Traffic!lbcCompCode.ListCount - 1 Step 1
                        slNameCode = tgCompCode(ilLoop).sKey    'Traffic!lbcCompCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mCEEnableBoxErr
                        gCPErrorMsg ilRet, "mCEEnableBox (gParseItem field 2: Competitive)", Contract
                        On Error GoTo 0
                        If slRecCode = slCode Then
                            lbcComp(0).ListIndex = ilLoop + 2
                            smDefSave(4) = slCode
                            imDefSource(4) = 0 'Advt
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        lbcComp(0).ListIndex = 1 '  "[None]"
                        smDefSave(4) = "0"
                        imDefSource(4) = 0 'Advt
                    End If
                Else
                    lbcComp(0).ListIndex = 1 '  "[None]"
                End If
            Else
                smComp0 = lbcComp(0).Text
            End If
            imComp0FirstTime = False
            If (lbcComp(1).ListIndex < 0) And (imComp1FirstTime) Then
                smComp1 = ""
                If tmAdf.iCode > 0 Then
                    slRecCode = Trim$(str$(tmAdf.iMnfComp(1)))
                    ilFound = False
                    For ilLoop = 0 To UBound(tgCompCode) - 1 Step 1 'Traffic!lbcCompCode.ListCount - 1 Step 1
                        slNameCode = tgCompCode(ilLoop).sKey    'Traffic!lbcCompCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mCEEnableBoxErr
                        gCPErrorMsg ilRet, "mCEEnableBox (gParseItem field 2: Competitive)", Contract
                        On Error GoTo 0
                        If slRecCode = slCode Then
                            lbcComp(1).ListIndex = ilLoop + 2
                            smDefSave(5) = slCode
                            imDefSource(5) = 0 'Advt
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        lbcComp(1).ListIndex = 1 '  "[None]"
                        smDefSave(5) = "0"
                        imDefSource(5) = 0 'Advt
                    End If
                Else
                    lbcComp(1).ListIndex = 1 '  "[None]"
                End If
            Else
                smComp1 = lbcComp(1).Text
            End If
            imComp1FirstTime = False
            mMnfPop 3
            If imTerminate Then
                Exit Sub
            End If
            If (lbcExcl(0).ListIndex < 0) And (imExcl0FirstTime) Then
                If tmAdf.iCode > 0 Then
                    slRecCode = Trim$(str$(tmAdf.iMnfExcl(0)))
                    ilFound = False
                    For ilLoop = 0 To UBound(tgExclCode) - 1 Step 1 'Traffic!lbcExclCode.ListCount - 1 Step 1
                        slNameCode = tgExclCode(ilLoop).sKey    'Traffic!lbcExclCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mCEEnableBoxErr
                        gCPErrorMsg ilRet, "mCEEnableBox (gParseItem field 2: Exclusions)", Contract
                        On Error GoTo 0
                        If slRecCode = slCode Then
                            lbcExcl(0).ListIndex = ilLoop + 2
                            smDefSave(17) = slCode
                            imDefSource(17) = 0 'Advt
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        lbcExcl(0).ListIndex = 1 '  "[None]"
                        smDefSave(17) = "0"
                        imDefSource(17) = 0 'Advt
                    End If
                Else
                    lbcExcl(0).ListIndex = 1 '  "[None]"
                End If
            End If
            imExcl0FirstTime = False
            If (lbcExcl(1).ListIndex < 0) And (imExcl1FirstTime) Then
                If tmAdf.iCode > 0 Then
                    slRecCode = Trim$(str$(tmAdf.iMnfExcl(1)))
                    ilFound = False
                    For ilLoop = 0 To UBound(tgExclCode) - 1 Step 1 'Traffic!lbcExclCode.ListCount - 1 Step 1
                        slNameCode = tgExclCode(ilLoop).sKey    'Traffic!lbcExclCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mCEEnableBoxErr
                        gCPErrorMsg ilRet, "mCEEnableBox (gParseItem field 2: Exclusions)", Contract
                        On Error GoTo 0
                        If slRecCode = slCode Then
                            lbcExcl(1).ListIndex = ilLoop + 2
                            smDefSave(18) = slCode
                            imDefSource(18) = 0 'Advt
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        lbcExcl(1).ListIndex = 1 '  "[None]"
                        smDefSave(18) = "0"
                        imDefSource(18) = 0 'Advt
                    End If
                Else
                    lbcExcl(1).ListIndex = 1 '  "[None]"
                End If
            End If
            'For ilLoop = LBound(tmCECtrls) To UBound(tmCECtrls) Step 1
            '    mCESetShow ilLoop  'Set show strings
            'Next ilLoop
            imExcl1FirstTime = False
            mMnfPop 1
            If imTerminate Then
                Exit Sub
            End If
            If (lbcBusCat.ListIndex < 0) And (imBusFirstTime) Then
                If tmAdf.iCode > 0 Then
                    slRecCode = Trim$(str$(tmAdf.iMnfBus))
                    ilFound = False
                    For ilLoop = 0 To UBound(tgBusCatCode) - 1 Step 1 'Traffic!lbcExclCode.ListCount - 1 Step 1
                        slNameCode = tgBusCatCode(ilLoop).sKey    'Traffic!lbcExclCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mCEEnableBoxErr
                        gCPErrorMsg ilRet, "mCEEnableBox (gParseItem field 2: Business Category)", Contract
                        On Error GoTo 0
                        If slRecCode = slCode Then
                            lbcBusCat.ListIndex = ilLoop + 2
                            smDefSave(19) = slCode
                            imDefSource(19) = 0 'Advt
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        lbcBusCat.ListIndex = 1 '  "[None]"
                        smDefSave(19) = "0"
                        imDefSource(19) = 0 'Advt
                    End If
                Else
                    lbcBusCat.ListIndex = 1 '  "[None]"
                End If
            End If
            imBusFirstTime = False
            imChgMode = False
            lbcComp(0).height = gListBoxHeight(lbcComp(0).ListCount, 7)
            edcShareDropDown.Width = tmCECtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcCE, edcShareDropDown, tmCECtrls(ilBoxNo).fBoxX, tmCECtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcComp(0).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcComp(0).ListIndex < 0 Then
                lbcComp(0).ListIndex = 1   '[None]
            End If
            If lbcComp(0).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcComp(0).List(lbcComp(0).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CECOMPINDEX + 1 'Competitive
            mMnfPop 2
            If imTerminate Then
                Exit Sub
            End If
            lbcComp(1).height = gListBoxHeight(lbcComp(1).ListCount, 7)
            edcShareDropDown.Width = tmCECtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcCE, edcShareDropDown, tmCECtrls(ilBoxNo).fBoxX, tmCECtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcComp(1).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcComp(1).ListIndex < 0 Then
                lbcComp(1).ListIndex = 1   '[None]
            End If
            If lbcComp(1).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcComp(1).List(lbcComp(1).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CEEXCLINDEX   'Program exclusion
            If (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            mMnfPop 3
            If imTerminate Then
                Exit Sub
            End If
            lbcExcl(0).height = gListBoxHeight(lbcExcl(0).ListCount, 11)
            edcShareDropDown.Width = tmCECtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcCE, edcShareDropDown, tmCECtrls(ilBoxNo).fBoxX, tmCECtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcExcl(0).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcExcl(0).ListIndex < 0 Then
                lbcExcl(0).ListIndex = 1   '[None]
            End If
            If lbcExcl(0).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcExcl(0).List(lbcExcl(0).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CEEXCLINDEX + 1 'Program exclusion
            If (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            mMnfPop 3
            If imTerminate Then
                Exit Sub
            End If
            lbcExcl(1).height = gListBoxHeight(lbcExcl(1).ListCount, 11)
            edcShareDropDown.Width = tmCECtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcCE, edcShareDropDown, tmCECtrls(ilBoxNo).fBoxX, tmCECtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcExcl(1).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcExcl(1).ListIndex < 0 Then
                lbcExcl(1).ListIndex = 1   '[None]
            End If
            If lbcExcl(1).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcExcl(1).List(lbcExcl(1).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CEBUSCATINDEX  'Business Category
            '2/13/09:  Allow business category to be set
            'If (igRepNetChgAllowed) Then
            '    pbcClickFocus.SetFocus
            '    Exit Sub
            'End If
            mMnfPop 1
            If imTerminate Then
                Exit Sub
            End If
            lbcBusCat.height = gListBoxHeight(lbcBusCat.ListCount, 7)
            edcShareDropDown.Width = tmCECtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcCE, edcShareDropDown, tmCECtrls(ilBoxNo).fBoxX, tmCECtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcBusCat.Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcBusCat.ListIndex < 0 Then
                lbcBusCat.ListIndex = 1   '[None]
            End If
            If lbcBusCat.ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcBusCat.List(lbcBusCat.ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
    End Select
    mCESetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
    Exit Sub
mCEEnableBoxErr:
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCESetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mCESetChg(ilBoxNo As Integer)
'
'   mCESetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmCECtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case CECOMPINDEX 'Competitive
            gSetChgFlag smComp(0), lbcComp(0), tmCECtrls(CECOMPINDEX)
        Case CECOMPINDEX + 1 'Competitive
            gSetChgFlag smComp(1), lbcComp(1), tmCECtrls(CECOMPINDEX + 1)
        Case CEEXCLINDEX 'Program exclusion
            gSetChgFlag smExcl(0), lbcExcl(0), tmCECtrls(CEEXCLINDEX)
        Case CEEXCLINDEX + 1 'Program exclusion
            gSetChgFlag smExcl(1), lbcExcl(1), tmCECtrls(CEEXCLINDEX + 1)
        Case CEBUSCATINDEX  'Business Category
            gSetChgFlag smBusCat, lbcBusCat, tmCECtrls(CEBUSCATINDEX)
    End Select
    tmHdCtrls(COMPINDEX).iChg = False
    For ilLoop = imLBCTCtrls To UBound(tmCECtrls) Step 1
        If tmCECtrls(ilLoop).iChg Then
            tmHdCtrls(COMPINDEX).iChg = True
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCESetFocus                     *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mCESetFocus(ilBoxNo As Integer)
'
'   mCESetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmCECtrls) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case CECOMPINDEX   'Competitive
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CECOMPINDEX + 1 'Competitive
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CEEXCLINDEX   'Program exclusion
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CEEXCLINDEX + 1 'Program exclusion
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case CEBUSCATINDEX   'Business Category
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCESetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mCESetShow(ilBoxNo As Integer)
'
'   mCESetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmCECtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case CECOMPINDEX   'Competitive
            lbcComp(0).Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcComp(0).ListIndex > 0 Then
                slStr = lbcComp(0).Text
            Else
                slStr = ""
            End If
            gSetShow pbcCE, slStr, tmCECtrls(ilBoxNo)
        Case CECOMPINDEX + 1 'Competitive
            lbcComp(1).Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcComp(1).ListIndex > 0 Then
                slStr = lbcComp(1).Text
            Else
                slStr = ""
            End If
            gSetShow pbcCE, slStr, tmCECtrls(ilBoxNo)
        Case CEEXCLINDEX   'Program exclusion
            lbcExcl(0).Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcExcl(0).ListIndex > 0 Then
                slStr = lbcExcl(0).Text
            Else
                slStr = ""
            End If
            gSetShow pbcCE, slStr, tmCECtrls(ilBoxNo)
        Case CEEXCLINDEX + 1 'Program exclusion
            lbcExcl(1).Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcExcl(1).ListIndex > 0 Then
                slStr = lbcExcl(1).Text
            Else
                slStr = ""
            End If
            gSetShow pbcCE, slStr, tmCECtrls(ilBoxNo)
        Case CEBUSCATINDEX   'Business Category
            lbcBusCat.Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcBusCat.ListIndex > 0 Then
                slStr = lbcBusCat.Text
            Else
                slStr = ""
            End If
            gSetShow pbcCE, slStr, tmCECtrls(ilBoxNo)
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mTestFields                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test fields for mandatory and   *
'*                     blanks                          *
'*                                                     *
'*******************************************************
Private Function mCETestFields(ilCtrlNo As Integer, ilState As Integer) As Integer
'
'   iState = ALLBLANK+NOMSG   'Blank
'   iTest = TESTALLCTRLS
'   iRet = mTestFields(iTest, iState)
'   Where:
'       iTest (I)- Test all controls or control number specified
'       iState (I)- Test one of the following:
'                  ALLBLANK=All fields blank
'                  ALLMANBLANK=All mandatory
'                    field blank
'                  ALLMANDEFINED=All mandatory
'                    fields have data
'                  Plus
'                  NOMSG=No error message shown
'                  SHOWMSG=show error message
'       iRet (O)- True if all mandatory fields blank, False if not all blank
'
'
    'Dim slMess As String    'Message string
    'Dim ilRes As Integer    'Result of MsgBox
    'Dim ilLoop As Integer
    Dim slStr As String

    If (ilCtrlNo = CECOMPINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        slStr = lbcComp(0).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Product Protection must be specified", tmCECtrls(CECOMPINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imCEBoxNo = CECOMPINDEX
            End If
            mCETestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = CECOMPINDEX + 1) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcComp(1), "", "Product Protection must be specified", tmCECtrls(CECOMPINDEX + 1).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imCEBoxNo = CECOMPINDEX + 1
            End If
            mCETestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = CEEXCLINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcExcl(0), "", "Program Exclusion must be specified", tmCECtrls(CEEXCLINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imCEBoxNo = CEEXCLINDEX
            End If
            mCETestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = CEEXCLINDEX + 1) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcExcl(1), "", "Program Exclusion must be specified", tmCECtrls(CEEXCLINDEX + 1).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imCEBoxNo = CEEXCLINDEX + 1
            End If
            mCETestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = CEBUSCATINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        'If gFieldDefinedCtrl(lbcBusCat, "", "Business Category must be specified (Click in Product Protect Area)", tmCECtrls(CEBUSCATINDEX).iReq, ilState) = NO Then
        slStr = lbcBusCat.Text
        If (slStr = "[None]") Or (slStr = "[New]") Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Business Category must be specified (Click in Product Protect Area)", tmCECtrls(CEBUSCATINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imCEBoxNo = CEBUSCATINDEX
            End If
            mCETestFields = NO
            Exit Function
        End If
    End If
    mCETestFields = YES
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mChkForStdPkg                   *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Check if Standard Package      *
'*                                                     *
'*******************************************************
Public Function mChkForStdPkg(ilLnRowNo As Integer) As Boolean
    
    If mChkForStdPkgSub(ilLnRowNo, LINECOMMINDEX, VEHINDEX, DPINDEX, LENINDEX, PRICEINDEX, OV1INDEX) = False Then
        ''MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
        'gExceedLimitMsg
        MsgBox "Contract Price or Contract Spots or Combination of Price, Spots and Audience Exceeded 21,000,000, Exiting Contracts as Package can't be created", vbOKOnly + vbExclamation, "Warning"
        mChkForStdPkg = False
    Else
        mChkForStdPkg = True
    End If
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mClearCtrlFields                *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Clear each control on the      *
'*                      screen                         *
'*                                                     *
'*******************************************************
Public Sub mClearCtrlFields()
'
'   mClearCtrlFields
'   Where:
'       ilOnlyAddr (I)- Clear only fields after address
'
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilRet As Integer
    Dim llSlf As Long
    Dim slNameCode As String
    Dim slName As String
    Dim llLen As Long

    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
    imExpandingPkg = False
    igRepNetChgAllowed = False
    lbcType.ListIndex = -1
    imPastMsgAsked = 0
    imInFlightScreen = False
    lmHSStartDate = -1
    imHSStartWkNo = 0
    imHSEndWkNo = 0
    imHSCurWkNo = 0
    imInHotSpot = False
    imSumType = 0
    smOrigTotalDollars = "0.00"
    smOrigPctTrade = "0"
    smOrigStatusSaved = ""
    smOrigSchdStatusSaved = ""
    smOrigNTRDefined = ""
    smOrigStatus = ""
    smOrigType = ""
    mStatusPop "", -1, imStep1Map()
    lbcStatus.ListIndex = -1
    lbcPot.ListIndex = -1
    smPot = ""
    lbcSeg.ListIndex = -1
    smSeg = ""
    edcCntrNo.Text = ""
    smEstNo = ""
    smPropNo = ""
    smEDIClientCode = ""
    smEDIProductCode = ""
    'smInvProjCode = ""
    'smInvSMSNo = ""
    imFromExtRevNo = 0
    imToExtRevNo = 0
    lmOrigCntrNo = -1
    imOVDGenerated = False
    smDtNeeded = ""
    smInitDtNeed = ""
    lbcResvAdvt.ListIndex = -1
    lbcResv.ListIndex = -1
    smInitResvNo = ""
    edcRevNo.Text = ""
    edcPropVer.Text = ""
    lbcAdvt.ListIndex = -1
    smAdvertiser = ""
    lbcProd.ListIndex = -1
    smProduct = ""
    lbcShtTitle.ListIndex = -1
    smShtTitle = ""
    smInitShtTitle = ""
    lbcAgency.ListIndex = -1
    smAgency = ""
    bmCheckSlfDormant = True
    bmViewedAvailTab = False
    bmViewedProtectionTab = False
    bmViewedResearchTab = False
    smVefPrevFilter = ""

    For ilLoop = 0 To 9 Step 1
        imSlspIndex(ilLoop) = -1
        smSlspName(ilLoop) = ""
        smInitSlspName(ilLoop) = ""
        'smSlspComm(ilLoop) = ""
        'smInitSlspComm(ilLoop) = ""
        smSlspField2(ilLoop) = ""
        smInitSlspField2(ilLoop) = ""
        smSlspField3(ilLoop) = ""
        smInitSlspField3(ilLoop) = ""
        smSlspField4(ilLoop) = ""
        smInitSlspField4(ilLoop) = ""
    Next ilLoop
    'lbcSPerson.ListIndex = -1
    'smSPerson = ""
    
    '5/18/12: Only include dormant salesperson if referenced in contract
    If UBound(tmSvCntSalesperson) <> UBound(tmCntSalesperson) Then
        'Restore salesperson with any dormant salesperson
        lbcSPerson(0).Clear
        ReDim tmCntSalesperson(LBound(tmSvCntSalesperson) To UBound(tmSvCntSalesperson)) As SORTCODE
        For llSlf = LBound(tmCntSalesperson) To UBound(tmCntSalesperson) Step 1
            tmCntSalesperson(llSlf) = tmSvCntSalesperson(llSlf)
        Next llSlf
        llLen = 0
        For llSlf = 0 To UBound(tmCntSalesperson) - 1 Step 1
            slNameCode = tmCntSalesperson(llSlf).sKey    'lbcMster.List(llLoop)
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            If ilRet <> CP_MSG_NONE Then
                Exit For
            End If
            slName = Trim$(slName)
            If Not gOkAddStrToListBox(slName, llLen, True) Then
                Exit For
            End If
            lbcSPerson(0).AddItem slName  'Add ID to list box
        Next llSlf
        lbcSPerson(0).AddItem "[None]", 0  'Force as first item on list
        lbcSPerson(0).AddItem "[New]", 0  'Force as first item on list
    End If

    lbcComp(0).ListIndex = -1
    smComp(0) = ""
    lbcComp(1).ListIndex = -1
    smComp(1) = ""
    lbcExcl(0).ListIndex = -1
    smExcl(0) = ""
    lbcExcl(1).ListIndex = -1
    smExcl(1) = ""
    lbcBusCat.ListIndex = -1
    smBusCat = ""
    smBuyer = ""
    smOrigBuyer = ""
    lbcBuyer.ListIndex = -1
    edcHdDropDown.Text = ""
    mkcPhone.Text = smPhoneImage
    lbcShowPrice.ListIndex = -1
    For ilLoop = 0 To 6 Step 1
        imShareBudgetIndex(ilLoop) = -1
        smShareBudget(ilLoop) = ""
        smInitShareBudget(ilLoop) = ""
        smShareBudgetPct(ilLoop) = ""
        smInitShareBudgetPct(ilLoop) = ""
    Next ilLoop
    For ilLoop = 0 To 4 Step 1
        lbcRevSet(ilLoop).ListIndex = -1
        smRevSet(ilLoop) = ""
    Next ilLoop
    imCppCpm = -1
    imHideDemo = -1
    lbcDemo(0).ListIndex = -1
    lbcDemo(1).ListIndex = -1
    lbcDemo(2).ListIndex = -1
    lbcDemo(3).ListIndex = -1
    lbcDBDemo.Clear
    edcDBDemo.Text = ""
    smTarget(0) = ""
    smTarget(1) = ""
    smTarget(2) = ""
    smTarget(3) = ""
    smSvDemo(0) = ""
    smSvDemo(1) = ""
    smSvDemo(2) = ""
    smSvDemo(3) = ""
    smSvTarget(0) = ""
    smSvTarget(1) = ""
    smSvTarget(2) = ""
    smSvTarget(3) = ""
    smHdSave(2) = ""
    smPctTrade = ""
    imAllowCashTradeChgs = True
    smRvfTypeI_Adj = "0.00"
    smRvfTypeA_Adj = "0.00"
    imAgyComm = -1
    If imExtraRcfAdded Then
        smCntRateCardTag = ""  'Force rate card read incase a extra Rate Card added because of a previous order
        'mRateCardPop
    End If
    lbcRateCard.ListIndex = -1
    smRateCard = ""
    smCurRC = ""
    'edcGross.Text = ""
    smHdSave(1) = ""
    lbcBillCycle.ListIndex = -1
    lbcInvGroup.ListIndex = -1
    'edcProdTag.Text = ""
    smHdSave(3) = ""
    For ilLoop = 0 To 5 Step 1
        smComment(ilLoop) = ""
        smInitComment(ilLoop) = ""
        lmCxfRecPos(ilLoop) = 0
    Next ilLoop
    edcComment.Text = ""
    For ilLoop = 0 To 5
        smComment(ilLoop) = ""
        smInitComment(ilLoop) = ""
        imCommShowOn(ilLoop, 0) = 1 'Proposal No
        imCommShowOn(ilLoop, 1) = 1 'Order- No
        imCommShowOn(ilLoop, 2) = 1 'Spots- No
        imCommShowOn(ilLoop, 3) = 1 'Invoices- No
        imCommShowOn(ilLoop, 4) = 1 'Insertion- No
        imInitCommShowOn(ilLoop, 0) = 1 'Proposal No
        imInitCommShowOn(ilLoop, 1) = 1 'Order- No
        imInitCommShowOn(ilLoop, 2) = 1 'Spots- No
        imInitCommShowOn(ilLoop, 3) = 1 'Invoices- No
        imInitCommShowOn(ilLoop, 4) = 1 'Insertion- No
    Next ilLoop
    ReDim smLnComment(0 To 1) As String
    ReDim smLnInitComment(0 To 1) As String
    ReDim imLnCommShowOn(0 To 4, 0 To 1) As Integer
    ReDim imLnInitCommShowOn(0 To 4, 0 To 1) As Integer
    ReDim tmWkInfo(0 To 1) As WKINFO
    ReDim tmRvfMPRec(0 To 0) As RVFMPREC
    ReDim smLnSumShow(0 To 12, 0 To 1) As String
    ReDim tgWkAud(0 To 0) As WKAUD
    ReDim tgWkSum(0 To 0) As WKSUM
    ReDim smWkSumShow(0 To 9, 0 To 1) As String
    ReDim smQSumShow(0 To 9, 0 To 1) As String
    ReDim smVSumShow(0 To 12, 0 To 1) As String
    ReDim smDPSumShow(0 To 12, 0 To 1) As String
    ReDim smVDSumShow(0 To 11, 0 To 1) As String
    ReDim smTSumShow(0 To 8) As String
    ReDim lgNewRafCntr(0 To 0) As Long
    smFBITotal = "0"    'Fixed Price amount
    smIBCTotal = "0"    'Item contracted amount
    sgFBBTotal = "0"
    sgIBPTotal = "0"
    sgIBBTotal = "0"
    sgMBBTotal = "0"
    sgPBBTotal = "0"
    ReDim tgFBSbf(0 To 0) As SBFLIST
    tgFBSbf(0).iStatus = -1 'Not Used
    tgFBSbf(0).lRecPos = 0
    ReDim tgIBSbf(0 To 0) As SBFLIST
    tgIBSbf(0).iStatus = -1 'Not Used
    tgIBSbf(0).lRecPos = 0
    ReDim tgMBSbf(0 To 0) As SBFLIST
    tgMBSbf(0).iStatus = -1 'Not Used
    tgMBSbf(0).lRecPos = 0
    ReDim tgPBSbf(0 To 0) As SBFLIST
    tgPBSbf(0).iStatus = -1 'Not Used
    tgPBSbf(0).lRecPos = 0
    ReDim tgPackVeh(0 To 0) As PACKVEH
    ReDim tgPackDP(0 To 0) As PACKDP
    ReDim tgPackLn(0 To 0) As PACKLN
    ReDim tgCShtTitle(0 To 0) As CSHTTITLE
    For ilLoop = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        tmHdCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmCECtrls) Step 1
        tmCECtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmDmCtrls) Step 1
        tmDmCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmNoCtrls) Step 1
        tmNoCtrls(ilLoop).sShow = ""
    Next ilLoop
    'For ilLoop = LBound(tmSPCtrls) To UBound(tmSPCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmSPCtrls) Step 1
        tmSPCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmSBCtrls) Step 1
        tmSBCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmRSCtrls) Step 1
        tmRSCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmPTCtrls) Step 1
        tmPTCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmLnTCtrls) Step 1
        tmLnTCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmLnDCtrls) Step 1
        tmLnDCtrls(ilLoop).sShow = ""
    Next ilLoop
    mMoveCtrlToRec False
    For ilLoop = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        tmHdCtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmCECtrls) Step 1
        tmCECtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmDmCtrls) Step 1
        tmDmCtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmNoCtrls) Step 1
        tmNoCtrls(ilLoop).iChg = False
    Next ilLoop
    'For ilLoop = LBound(tmSPCtrls) To UBound(tmSPCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmSPCtrls) Step 1
        tmSPCtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmSBCtrls) Step 1
        tmSBCtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmRSCtrls) Step 1
        tmRSCtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmPTCtrls) Step 1
        tmPTCtrls(ilLoop).iChg = False
    Next ilLoop
    For ilLoop = LBound(smDefSave) To UBound(smDefSave) Step 1
        smDefSave(ilLoop) = ""
        imDefSource(ilLoop) = -1
    Next ilLoop
    ReDim imRBDnfCode(0 To 0) As Integer
    lbcRBBookName.ListIndex = -1
    tgChfCntr.lCode = 0
    tgChfCntr.sRepDBID = ""
    'If tgSpf.sCPkOrdered = "Y" Then
    '    tgChfCntr.iPkageGenMeth = tgSpf.iPkageGenMeth   '0=Week; 1=Line
    'Else
    'tgChfCntr.iPkageGenMeth = -1
    'End If
    gPackDate "", tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1)
    gPackDate "", tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1)
    smChfStartDate = ""
    smChfEndDate = ""
    tgChfCntr.iMerchPct = 0
    tgChfCntr.iPromoPct = 0
    '10702
    tgChfCntr.lExtCntrNo = 0
    '10967
    tgChfCntr.iAvfCode = 0 ' should've been with 10702?
    tgChfCntr.iAdServDlvyStatus = DeliveryStatus_NA
    '8/16/12: Handle case where contract was set as Calendar but is not allowed at this time
    tgChfCntr.sBillCycle = "S"
    ReDim tgClfCntr(0 To 0) As CLFLIST
    ReDim tgDelClf(0 To 0) As CLFLIST
    tgClfCntr(0).iFirstCff = -1
    tgClfCntr(0).iFirstCgf = -1
    tgClfCntr(0).iStatus = -1
    tgClfCntr(0).lFirstAvail = -1
    ReDim tgCffCntr(0 To 0) As CFFLIST
    tgCffCntr(0).iStatus = -1 'Not Used
    tgCffCntr(0).lRecPos = 0
    tgCffCntr(0).iNextCff = -1
    imLastCffUsed = 0
    ReDim tgCgfCntr(0 To 0) As CGFLIST
    tgCgfCntr(0).iStatus = -1 'Not Used
    tgCgfCntr(0).iNextCgf = -1
    ReDim tgMsfCntr(0 To 0) As MSFLIST
    tgMsfCntr(0).iStatus = -1 'Not Used
    tgMsfCntr(0).iFirstMgf = -1
    tgMsfCntr(0).iCxfIndex = -1
    ReDim tgMgfCntr(0 To 0) As MGFLIST
    tgMgfCntr(0).iStatus = -1 'Not Used
    ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
    tgLnAvailInfo(0).lNextIndex = -1
    ReDim sgMsfCntrCxf(0 To 0) As String
    ReDim smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
    ReDim imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim smLnShow(0 To LINECOMMINDEX, 0 To UBound(tgClfCntr) + 1) As String
    ReDim smAirShow(0 To 14, 0 To 1) As String
    ReDim smAirSave(0 To 13, 0 To 1) As String
    ReDim imAirSave(0 To 2, 0 To 1) As Integer
    For ilIndex = 1 To UBound(tgClfCntr) + 1 Step 1
        For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            imLnSave(ilLoop, ilIndex) = -1
        Next ilLoop
        smLnSave(19, ilIndex) = "1.00"
    Next ilIndex
    ReDim tmWkInfo(0 To 1) As WKINFO
    tmWkInfo(1).iNextIndex = -1
    ReDim tmRegionCode(0 To 0) As SORTCODE
    ReDim lgDeletedPcfCode(0 To 0) As Long
    '10910
    ReDim tgContractDocuments(0 To 0) As ACFList
    smRegionCodeTag = ""
    mClearPB
    mClearDB
    lmChfRecPos = 0    'Indicator of [New] contract
    lmCmfRecPos = 0
    imSPersonFirstTime = True   'First time at field-set default if required
    imProdFirstTime = True   'First time at field-set default if required
    imAgyFirstTime = True   'First time at field-set default if required
    imComp0FirstTime = True   'First time at field-set default if required
    imComp1FirstTime = True   'First time at field-set default if required
    imExcl0FirstTime = True   'First time at field-set default if required
    imExcl1FirstTime = True   'First time at field-set default if required
    imBusFirstTime = True
    imGuarFirstTime = True
    imBuyerFirstTime = True   'First time at field-set default if required
    imPhoneFirstTime = True   'First time at field-set default if required
    imDemoFirstTime = True   'First time at field-set default if required
    imHdBoxNo = -1 'Initialize current Box to N/A
    imLnBoxNo = -1
    imAirBoxNo = -1
    imDGBoxNo = -1
    imCEBoxNo = -1
    imDMBoxNo = -1
    imDirProcess = -1
    imTabDirection = 0  'Left to right movement
    imLbcMouseDown = False
    imChgMode = False
    imDGChgMode = False
    imBSMode = False
    imAirCancel = False
    imLnChg = False
    imGameInvChg = False
    imNTRChg = False
    imCPMChg = False
    '10910
    bgContractAttachments_Changed = False
    imComputeReq = False
    imAllAnsw = False
    imAnyFixedBilled = False
    imAnyLnSchd = False
    imCreditRestr = -1  'No restrictions
    imSvLnRowNo = -1
    imBypassFocus = False
    igLnSPChg = False
    imButtonIndex = -1
    tmAdf.iCode = 0
    smAdfStamp = ""
    tmAgf.iCode = 0
    smAgfStamp = ""
    imVpfIndex = -1
    imCntrVefCode = 0
    lmLastWkDateAdded = -1
    imLastLnDateAdded = -1
    '8/16/12: Handle case where contract was set as Calendar but is not allowed at this time
    mPopBillCycle False, False
    If Not imSaveStay Then
        imMultiMediaVefCode = -1
        smMultiMediaTypeItem = ""
    End If
    'lacAudTotals.Caption = "GRP: GrImp: CPP: CPM:"
    If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
        lacAudTotals.ForeColor = BLACK
        lacAudTotals.Caption = "GRP: GrImp: CPP: CPM:"
    Else
        lacAudTotals.ForeColor = BLACK
        lacAudTotals.Caption = "Click to Compute->GRP: GrImp: CPP: CPM:"
    End If
    ReDim igVer0LineNo(0 To 0) As Integer
    mSetBackgroundColor imStep1Index
    vbcLines.Min = LBound(tgClfCntr)
    'If UBound(tgClfCntr) <= vbcLines.LargeChange Then
    '    vbcLines.Max = LBound(tgClfCntr)
    'Else
    '    vbcLines.Max = UBound(tgClfCntr) - vbcLines.LargeChange
    'End If
    'vbcLines.Value = vbcLines.Min
    mSetLineScroll True, True
    'If bgSortByLineNo Then
    '    edcLineNo(0).Text = "S"
    'Else
    '    edcLineNo(0).Text = ""
    'End If
    tmcDelay.Enabled = False
    udcCBill.Action 4   'clear NTR, Installment
    udcCGameInv.Action 4
    udcCDigital.Action 4
    ReDim tgMapLinePaint(0 To 0) As MAPLINEPAINT
    'mBuildMapLinePaint
    lacCode.Caption = ""
    'Set tscLine.SelectedItem = tscLine.Tabs.Item(4)
    mClearCPMBuyGrid
    '10636
    edcLineNo(0).Text = ""
    edcLineNo(1).Text = ""
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mClearLastLine                  *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Clear Last Line                *
'*                                                     *
'*******************************************************
Private Sub mClearLastLine()
    Dim ilRowNo As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilCff As Integer
    Dim ilPrev As Integer
    ilRowNo = UBound(tgClfCntr) + 1
    For ilLoop = VEHINDEX To LINECOMMINDEX Step 1   'PRICEINDEX Step 1
        slStr = ""
        gSetShow pbcLine, slStr, tmLnCtrls(ilLoop)
        smLnShow(ilLoop, ilRowNo) = tmLnCtrls(ilLoop).sShow
    Next ilLoop
    tgClfCntr(ilRowNo - 1).ClfRec.iLine = 0
    tgClfCntr(ilRowNo - 1).iStatus = -1
    For ilLoop = LBound(smLnSave, FIELDBOUNDINDEX) To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
        smLnSave(ilLoop, ilRowNo) = ""
    Next ilLoop
    For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
        imLnSave(ilLoop, ilRowNo) = -1
    Next ilLoop
    smLnComment(ilRowNo) = ""
    'Clear Flights
    ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = -1) Then
            tgCffCntr(ilCff).iStatus = -1   'New to not used
        Else
            tgCffCntr(ilCff).iStatus = 2    'Old to delete
        End If
        ilPrev = ilCff
        ilCff = tgCffCntr(ilCff).iNextCff
        tgCffCntr(ilPrev).iNextCff = -1
    Loop
    tgClfCntr(ilRowNo - 1).iFirstCff = -1
    tgClfCntr(ilRowNo - 1).iFirstCgf = -1
    tgClfCntr(ilRowNo - 1).lFirstAvail = -1
    tgClfCntr(ilRowNo - 1).bLnPriceSet = False
    pbcLine_Paint
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mClearPB                        *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Clear Power bar information    *
'*                                                     *
'*******************************************************
Public Sub mClearPB()
    imPBChgMode = True
    imOVBoxNo = -1
    imRBInLnGridOrSum = -1
    edcPBDate(0).Text = ""
    edcPBDate(1).Text = ""
    edcRBWks(2).Text = ""
    edcRBWks(0).Text = "1"
    edcRBWks(1).Text = "0"
    edcRBWks(3).Text = "1"
    edcPBFactor.Text = "1"
    'rbcPBPreempt(0).Value = True    'Preemptible (later might want site question default preempt- default also set in mGetDtae)
    'lacVehTotal.Caption = ""
    lbcDaypart.Clear
    lbcPBLen.Clear
    lbcRBDaypart.Clear
    lbcRBVehicle.Clear
    lbcRBDatesSpots(0).Clear
    ReDim tmPB1DP(0 To 0) As PBDPGEN
    ReDim tmRB1DP(0 To 0) As PBDPGEN
    ReDim smRBMixDatesSpots(0 To 0) As String
    pbcRBVeh(0).Cls
    smPBDPStamp = ""
    smChkPBVehStamp = ""
    smChkPBDPStamp = ""
    smChkRBLenStamp = ""
    imINRBPBCPaint = False
    imPBChgMode = False
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCntrTotal                       *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Used to interface to           *
'*                      mCntrTotals                    *
'*                                                     *
'*******************************************************
Public Sub mCntrTotal()
    If (igFreezeState = 1) Then
        Exit Sub
    End If
    If mCntrTotals(imTotColor, smTotalDollars, smTotalSpots, imLnTotalType, smTotalNA, smFBITotal, smIBCTotal) = False Then
        mClearCtrlFields
        mTerminate
        Exit Sub
    End If
    pbcLnTotal_Paint
    pbcLnDates_Paint
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCommentPop                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Comment list          *
'*                      box if required                *
'*                                                     *
'*******************************************************
Public Sub mCommentPop(ilClearList As Integer)
'
'   mCommentPop
'   Where:
'
    Dim ilRet As Integer
    ReDim tmCommentCode0(0 To 0) As SORTCODE
    ReDim tmCommentCode1(0 To 0) As SORTCODE
    ReDim tmCommentCode2(0 To 0) As SORTCODE
    ReDim tmCommentCode3(0 To 0) As SORTCODE
    ReDim tmCommentCode4(0 To 0) As SORTCODE
    ReDim tmCommentCode5(0 To 0) As SORTCODE
    ReDim tmCommentCode6(0 To 0) As SORTCODE
    ReDim tmCommentCode7(0 To 0) As SORTCODE
    imCmfRecLen = Len(tmCmf)
    ilRet = btrGetFirst(hmCmf, tmCmf, imCmfRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
    Do While ilRet = BTRV_ERR_NONE
        Select Case tmCmf.sComType
            Case "O"  'Other
                'Traffic!lbcCommentCode(5).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode5(UBound(tmCommentCode5)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode5(0 To UBound(tmCommentCode5) + 1) As SORTCODE
            Case "C"  'Cancellation
                'Traffic!lbcCommentCode(3).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode3(UBound(tmCommentCode3)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode3(0 To UBound(tmCommentCode3) + 1) As SORTCODE
            Case "R"  'Change Reason
                'Traffic!lbcCommentCode(4).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode4(UBound(tmCommentCode4)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode4(0 To UBound(tmCommentCode4) + 1) As SORTCODE
            Case "M"  'Merchandising
                'Traffic!lbcCommentCode(0).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode0(UBound(tmCommentCode0)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode0(0 To UBound(tmCommentCode0) + 1) As SORTCODE
            Case "P"  'Promomtion
                'Traffic!lbcCommentCode(1).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode1(UBound(tmCommentCode1)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode1(0 To UBound(tmCommentCode1) + 1) As SORTCODE
            Case "I"  'Internal
                'Traffic!lbcCommentCode(2).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode2(UBound(tmCommentCode2)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode2(0 To UBound(tmCommentCode2) + 1) As SORTCODE
            Case "L"  'Line
                'Traffic!lbcCommentCode(6).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode6(UBound(tmCommentCode6)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode6(0 To UBound(tmCommentCode6) + 1) As SORTCODE
            Case "B"  'Podcast CPM Buy
                'Traffic!lbcCommentCode(6).AddItem tmCmf.sTitle & "\" & Trim$(Str$(tmCmf.lCode))
                tmCommentCode7(UBound(tmCommentCode7)).sKey = tmCmf.sTitle & "\" & Trim$(str$(tmCmf.lCode))
                ReDim Preserve tmCommentCode7(0 To UBound(tmCommentCode7) + 1) As SORTCODE
        End Select
        imCmfRecLen = Len(tmCmf)
        ilRet = btrGetNext(hmCmf, tmCmf, imCmfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    If UBound(tmCommentCode0) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode0(), 0), UBound(tmCommentCode0), 0, LenB(tmCommentCode0(0)), 0, LenB(tmCommentCode0(0).sKey), 0
    End If
    If UBound(tmCommentCode1) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode1(), 0), UBound(tmCommentCode1), 0, LenB(tmCommentCode1(0)), 0, LenB(tmCommentCode1(0).sKey), 0
    End If
    If UBound(tmCommentCode2) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode2(), 0), UBound(tmCommentCode2), 0, LenB(tmCommentCode2(0)), 0, LenB(tmCommentCode2(0).sKey), 0
    End If
    If UBound(tmCommentCode3) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode3(), 0), UBound(tmCommentCode3), 0, LenB(tmCommentCode3(0)), 0, LenB(tmCommentCode3(0).sKey), 0
    End If
    If UBound(tmCommentCode4) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode4(), 0), UBound(tmCommentCode4), 0, LenB(tmCommentCode4(0)), 0, LenB(tmCommentCode4(0).sKey), 0
    End If
    If UBound(tmCommentCode5) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode5(), 0), UBound(tmCommentCode5), 0, LenB(tmCommentCode5(0)), 0, LenB(tmCommentCode5(0).sKey), 0
    End If
    If UBound(tmCommentCode6) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode6(), 0), UBound(tmCommentCode6), 0, LenB(tmCommentCode6(0)), 0, LenB(tmCommentCode6(0).sKey), 0
    End If
    If UBound(tmCommentCode7) - 1 > 0 Then
        ArraySortTyp fnAV(tmCommentCode7(), 0), UBound(tmCommentCode7), 0, LenB(tmCommentCode7(0)), 0, LenB(tmCommentCode7(0).sKey), 0
    End If
    If ilClearList Then
        lbcComment(0).Clear
        'lbcComment(0).AddItem "[Comment]", 0
        'lbcComment(0).AddItem "[None]", 0
        lbcComment(1).Clear
        'lbcComment(1).AddItem "[Comment]", 0
        'lbcComment(1).AddItem "[None]", 0
    End If
    Exit Sub

    On Error GoTo 0
    imTerminate = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mCreateDate                     *
'*                                                     *
'*             Created:8/09/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Create flights (first time line*
'*                      flights defined)               *
'*                                                     *
'*******************************************************
Sub mCreateDate(ilPaint As Integer)
'
'   mCreateDate ilPaint
'   Where:
'       ilPaint (I)- True=Paint week after creating
'                    False=Don't paint
'
    Dim ilUpperLimit As Integer
    Dim ilWkNo As Integer
    Dim llStartDate As Long
    Dim llSplitStart As Long
    Dim llSplitEnd As Long
    Dim llEndDate As Long
    Dim llDate As Long
    Dim slStr As String
    Dim ilDay As Integer
    Dim ilMonth As Integer
    Dim llDateAdj As Long
    Dim ilNoSpots As Integer
    Dim ilNoAirDays As Integer
    Dim ilNoDays As Integer
    Dim ilLoop As Integer
    Dim ilStartDay As Integer
    Dim ilEndDay As Integer
    Dim ilSplitSpotFirstLast As Integer
    Dim ilFirstWkNoSpots As Integer
    Dim ilLastWkNoSpots As Integer
    ReDim smAirShow(0 To 14, 0 To 1) As String
    ReDim smAirSave(0 To 13, 0 To 1) As String
    ReDim imAirSave(0 To 2, 0 To 1) As Integer
    ilUpperLimit = UBound(smAirShow, 2)
    ilWkNo = 1
    llStartDate = gDateValue(smDGSave(10))
    llEndDate = gDateValue(smDGSave(11))
    'Set days if user pressed GenAll prior to selecting days
    If imGenReq Then
        If (imDGSave(2) = 0) Or (imDGSave(2) = 2) Then    'Daily Or % Daily
            For ilLoop = 0 To 6 Step 1
                If imAllowedDays(ilLoop + LBound(imAllowedDays)) Then
                    If smDGSave(3 + ilLoop) = "" Then
                        smDGSave(3 + ilLoop) = "0"
                    End If
                End If
            Next ilLoop
        Else    'Weekly or % weekly
            For ilLoop = 0 To 6 Step 1
                If imAllowedDays(ilLoop + LBound(imAllowedDays)) Then
                    If smDGSave(3 + ilLoop) = "" Then
                        smDGSave(3 + ilLoop) = "Y"
                    End If
                End If
            Next ilLoop
        End If
    End If
    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate  'Get imCntrVefCode
    imGenReq = False
    ilSplitSpotFirstLast = False
    If (imDGSave(2) = 1) Or (imDGSave(2) = 3) Then 'Weekly or % weekly
        ilStartDay = gWeekDayLong(llStartDate)
        ilEndDay = gWeekDayLong(llEndDate)
        If ilEndDay < ilStartDay Then
            ilSplitSpotFirstLast = True
            For ilDay = ilStartDay To 6 Step 1
                If smDGSave(3 + ilDay) = "Y" Then
                    ilNoAirDays = ilNoAirDays + 1
                    ilNoDays = ilNoDays + 1
                End If
            Next ilDay
            For ilDay = 0 To ilEndDay Step 1
                If smDGSave(3 + ilDay) = "Y" Then
                    ilNoDays = ilNoDays + 1
                End If
            Next ilDay
            If ilNoDays <> 0 Then
                ilFirstWkNoSpots = (Val(smDGSave(2)) * ilNoAirDays) / ilNoDays
            Else
                ilFirstWkNoSpots = Val(smDGSave(2))
            End If
            ilLastWkNoSpots = Val(smDGSave(2)) - ilFirstWkNoSpots
        End If
    End If
    llDate = llStartDate
    Do While llDate <= llEndDate
        Select Case imDGSave(1)
            Case 0  'Every Week
                imAirSave(1, ilUpperLimit) = 0
                slStr = "Yes"
                'gSetShow pbcAirWk, slStr, tmAirCtrls(AIRWEEKINDEX)
                'smAirShow(AIRWEEKINDEX, ilUpperLimit) = tmAirCtrls(AIRWEEKINDEX).sShow
            Case 1 To 3
                If (ilWkNo Mod (imDGSave(1) + 1)) = 1 Then
                    imAirSave(1, ilUpperLimit) = 0
                    slStr = "Yes"
                Else
                    imAirSave(1, ilUpperLimit) = 1
                    slStr = "No"
                End If
        End Select
        'gSetShow pbcAirWk, slStr, tmAirCtrls(AIRWEEKINDEX)
        'smAirShow(AIRWEEKINDEX, ilUpperLimit) = tmAirCtrls(AIRWEEKINDEX).sShow
        slStr = Trim$(str$(ilWkNo))
        'gSetShow pbcAirWk, slStr, tmAirCtrls(WEEKNOINDEX)
        'smAirShow(WEEKNOINDEX, ilUpperLimit) = tmAirCtrls(WEEKNOINDEX).sShow
        slStr = Format$(llDate, "m/d/yy")
        smAirSave(1, ilUpperLimit) = slStr
        ilStartDay = gWeekDayLong(llDate)
        If llDate + 6 - ilStartDay <= llEndDate Then
            slStr = Format$(llDate + 6 - ilStartDay, "m/d/yy")
            ilEndDay = gWeekDayLong(llDate + 6 - ilStartDay)
        Else
            slStr = Format$(llEndDate, "m/d/yy")
            ilEndDay = gWeekDayLong(llEndDate)
        End If
        smAirSave(2, ilUpperLimit) = slStr
        If imAirSave(1, ilUpperLimit) = 0 Then  '0=Air week
            slStr = smDGSave(2)
        Else
            slStr = ""
        End If
        'If (ilUpperLimit = LBound(smAirShow, 2)) And (ilSplitSpotFirstLast) Then
        If (ilUpperLimit = imLB1Or2) And (ilSplitSpotFirstLast) Then
            slStr = Trim$(str$(ilFirstWkNoSpots))
        End If
        If (gDateValue(smAirSave(2, ilUpperLimit)) = llEndDate) And (ilSplitSpotFirstLast) Then
            slStr = Trim$(str$(ilLastWkNoSpots))
        End If
        smAirSave(3, ilUpperLimit) = slStr
        'gSetShow pbcAirWk, slStr, tmAirCtrls(SPOTPERWKINDEX)
        'smAirShow(SPOTPERWKINDEX, ilUpperLimit) = tmAirCtrls(SPOTPERWKINDEX).sShow
        For ilDay = 0 To 6 Step 1   'Initialize days
            slStr = ""
            smAirSave(4 + ilDay, ilUpperLimit) = slStr
            'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
            'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
        Next ilDay
        If (((imDGSave(2) = 0) Or (imDGSave(2) = 2)) And (Not tgClfCntr(imLnRowNo - 1).iGame)) Or (imAirSave(1, ilUpperLimit) = 1) Then
            For ilDay = ilStartDay To ilEndDay Step 1
                If imAirSave(1, ilUpperLimit) = 0 Then
                    slStr = smDGSave(3 + ilDay)
                Else
                    slStr = ""
                End If
                smAirSave(4 + ilDay, ilUpperLimit) = slStr
                'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
            Next ilDay
        Else
            For ilDay = ilStartDay To ilEndDay Step 1
                If smDGSave(3 + ilDay) = "Y" Then
                    smAirSave(4 + ilDay, ilUpperLimit) = "Y"
                    slStr = "4"
                Else
                    smAirSave(4 + ilDay, ilUpperLimit) = "N"
                    slStr = " "
                End If
                'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
            Next ilDay
        End If
        smAirSave(13, ilUpperLimit) = "N"

        ilWkNo = ilWkNo + 1
        ilUpperLimit = ilUpperLimit + 1
        ReDim Preserve smAirShow(0 To 14, 0 To ilUpperLimit) As String
        ReDim Preserve smAirSave(0 To 13, 0 To ilUpperLimit) As String
        ReDim Preserve imAirSave(0 To 2, 0 To ilUpperLimit) As Integer
        Do
            llDate = llDate + 1
        Loop Until gWeekDayLong(llDate) = 0  '0=Monday
    Loop
    'Set Rate Card Prices and Compute average price
    'If smDGSave(12) = lbcPriceType(0).List(2) Then  'Average- Compute value
'    mSetFlightPrice smDGSave(12), True
    'For ilLoop = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
    For ilLoop = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
        mAdjDates ilLoop
'        If smAirSave(3, ilLoop) = "" Then
        If (imDGSave(2) = 0) Or (imDGSave(2) = 2) Then    'Daily Or % Daily
            imAirSave(2, ilLoop) = 0
            If imDGSave(2) > 1 Then
                slStr = "Daily by %"
            Else
                slStr = "Daily"
            End If
        Else
            imAirSave(2, ilLoop) = 1
            If imDGSave(2) > 1 Then
                slStr = "Weekly by %"
            Else
                slStr = "Weekly"
            End If
        End If
        'gSetShow pbcAirWk, slStr, tmAirCtrls(DWINDEX)
        'smAirShow(DWINDEX, ilLoop) = tmAirCtrls(DWINDEX).sShow
    Next ilLoop
    mSetFlightPrice smDGSave(12), True
    'vbcAirWk.Min = imLB1Or2 'LBound(smAirShow, 2)
    'If UBound(smAirShow, 2) - 2 <= vbcAirWk.LargeChange Then
    '    vbcAirWk.Max = imLB1Or2 'LBound(smAirShow, 2)
    'Else
    '    vbcAirWk.Max = UBound(smAirShow, 2) - 1 - vbcAirWk.LargeChange
    'End If
    'vbcAirWk.Value = vbcAirWk.Min
    smLnSave(14, imLnRowNo) = smDGSave(10)
    smLnSave(15, imLnRowNo) = smDGSave(11)
    '11/2/19: In contract paint is false
    If ilPaint Then
        'mFlightTotals
        'mGetDemoFlightTotals
        'imAirRowNo = 1
        'pbcAirWk.Cls
        'pbcAirWk_Paint
    End If
    tgClfCntr(imLnRowNo - 1).iResearch = False
    tgClfCntr(imLnRowNo - 1).iCancel = False
    tgClfCntr(imLnRowNo - 1).ClfRec.sHideCBS = "N"
    imLnChg = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDBEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mDBEnableBox(ilBoxNo As Integer)
'
'   mDBEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim ilIndex As Integer
    Dim slStr As String
    Dim llDate As Long
    Dim llLnStartDate As Long
    Dim ilWkIndex As Integer
    Dim llActPrice As Long
    Dim llRCPrice As Long
    Dim slWDFlag As String
    ReDim ilDailySpots(0 To 6) As Integer

    If imDBTotals < 5 Then
        If imDBRowNo = 1 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBSCCtrls)) Then
                Exit Sub
            End If
        ElseIf imDBRowNo = 3 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBAPCtrls)) Then
                Exit Sub
            End If
        ElseIf imDBRowNo = 5 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBRCtrls)) Then
                Exit Sub
            End If
        ElseIf imDBRowNo = -1 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBCtrls)) Then
                Exit Sub
            End If
        End If
    Else
        If imDBRowNo = 3 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBSCCtrls)) Then
                Exit Sub
            End If
        Else
            Exit Sub
        End If
    End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imMoveLnRowNo < vbcLines.Value + 1) Or (imMoveLnRowNo >= vbcLines.Value + vbcLines.LargeChange + 2) Then
        mLnSetShow ilBoxNo
        pbcLineArrow.Visible = False
        laclnFrame.Visible = False
        Exit Sub
    End If
    'laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
    ''lacLnFrame.Visible = True
    'pbcLineArrow.Move pbcLineArrow.Left, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
    'pbcLineArrow.Visible = True
    mSetArrowFrame
    If mGetLineType(imLnRowNo) = "H" Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                'If tgPackLn(ilLoop).iAlter <> True Then
                If tgPackLn(ilLoop).sAlter <> "Y" Then
                    If pbcLineArrow.Visible Then
                        pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                End If
                Exit For
            End If
        Next ilLoop
    End If
    Select Case imDBRowNo
        Case 1  'Spot Count
            Select Case ilBoxNo 'Branch on box type (control)
                Case 1 To 13
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    imLnBoxNo = ilBoxNo + WKSPOTSINDEX - 1
                    If imLnSave(8, imLnRowNo) = 0 Then
                        pbcLnDaily.Width = tmLnCtrls(imLnBoxNo).fBoxW
                        gMoveTableCtrl pbcLine, pbcLnDaily, tmLnCtrls(imLnBoxNo).fBoxX, tmLnCtrls(imLnBoxNo).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15)
                        pbcDBLnDaily.Width = tmDBSCCtrls(ilBoxNo).fBoxW
                        gMoveTableCtrl pbcDemoBar(1), pbcDBLnDaily, tmDBSCCtrls(ilBoxNo).fBoxX, tmDBSCCtrls(ilBoxNo).fBoxY
                    Else
                        edcLNDropDown.Width = tmLnCtrls(imLnBoxNo).fBoxW
                        edcLNDropDown.MaxLength = 4
                        gMoveTableCtrl pbcLine, edcLNDropDown, tmLnCtrls(imLnBoxNo).fBoxX, tmLnCtrls(imLnBoxNo).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15)
                        edcDBValue.Width = tmDBSCCtrls(ilBoxNo).fBoxW
                        edcDBValue.MaxLength = 4
                        gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBSCCtrls(ilBoxNo).fBoxX, tmDBSCCtrls(ilBoxNo).fBoxY
                    End If
                    llDate = lmHSStartDate + 7 * (imHSCurWkNo + imLnBoxNo - WKSPOTSINDEX - 1)
                    imWkCff = mGetFlightSpotsDays(imLnRowNo, llDate, imOvDays(), lmWkSpots, imWkDays(), slWDFlag, ilDailySpots())
                    If imLnSave(8, imLnRowNo) = 0 Then
                        edcLNDropDown.Text = ""
                        edcDBValue.Text = edcLNDropDown.Text
                        If lmWkSpots = 0 Then
                            imLnDaily = 1
                        Else
                            imLnDaily = 0
                        End If
                        pbcLnDaily_Paint
                        pbcLnDaily.Visible = True  'Set visibility
                        pbcDBLnDaily_Paint
                        pbcDBLnDaily.Visible = True  'Set visibility
                        pbcDBLnDaily.SetFocus
                    Else
                        If lmWkSpots > 0 Then
                            edcLNDropDown.Text = Trim$(str$(lmWkSpots)) 'slStr'Trim$(smLnSave(6, imLnRowNo))
                        Else
                            edcLNDropDown.Text = ""
                        End If
                        'edcLnDropDown.SelStart = 0
                        'edcLnDropDown.SelLength = Len(edcLnDropDown.Text)
                        edcLNDropDown.Visible = True  'Set visibility
                        'edcLnDropDown.SetFocus
                        edcDBValue.Text = edcLNDropDown.Text    'slStr'Trim$(smLnSave(6, imLnRowNo))
                        edcDBValue.SelStart = 0
                        edcDBValue.SelLength = Len(edcDBValue.Text)
                        edcDBValue.Visible = True  'Set visibility
                        edcDBValue.SetFocus
                    End If
            End Select
        Case 3  'Price
            Select Case ilBoxNo 'Branch on box type (control)
                Case 1 To 13
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    imLnBoxNo = ilBoxNo + WKSPOTSINDEX - 1
                    edcDBValue.Width = tmDBAPCtrls(ilBoxNo).fBoxW
                    edcDBValue.MaxLength = 10
                    If imDBTotals < 5 Then
                        gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBAPCtrls(ilBoxNo).fBoxX, tmDBAPCtrls(ilBoxNo).fBoxY
                    Else
                        gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBSCCtrls(ilBoxNo).fBoxX, tmDBSCCtrls(ilBoxNo).fBoxY
                    End If
                    llDate = lmHSStartDate + 7 * (imHSCurWkNo + imLnBoxNo - WKSPOTSINDEX - 1)
                    llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
                    ilWkIndex = (llDate - lmHSStartDate) \ 7 + 1
                    slStr = ""
                    If ilWkIndex > 0 Then
                        ilIndex = imLnSave(10, imLnRowNo)
                        Do While ilIndex > 0
                            If ilWkIndex <= UBound(tmWkInfo(ilIndex).lActPrice) Then
                                If tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) > 0 Then
                                    'Note -10=Not assigned price; -1=N/C; -2=Makegood; -3=Bonus; -4=Spinoff
                                    '-5=Package ; -6=Recapturable; -7=ADU
                                    llActPrice = tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1)
                                    slStr = gLongToStrDec(llActPrice, 2)
                                Else
                                    Select Case tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1)
                                        Case -1
                                            slStr = lbcPriceType(1).List(1)
                                        Case -2
                                            slStr = lbcPriceType(1).List(2)
                                        Case -3
                                            slStr = lbcPriceType(1).List(3)
                                        Case -4
                                            slStr = lbcPriceType(1).List(4)
                                        Case -5
                                            slStr = lbcPriceType(1).List(5)
                                        Case -6
                                            slStr = lbcPriceType(1).List(6)
                                        Case -7
                                            slStr = lbcPriceType(1).List(7)
                                        Case Else
                                            slStr = ""
                                    End Select
                                End If
                                Exit Do
                            Else
                                ilWkIndex = ilWkIndex - UBound(tmWkInfo(ilIndex).lActPrice)
                                If ilWkIndex <= 0 Then
                                    Exit Do
                                End If
                            End If
                            ilIndex = tmWkInfo(ilIndex).iNextIndex
                        Loop
                    End If
                    imLnBoxNo = -1
                    edcDBValue.Text = slStr 'Trim$(smLnSave(6, imLnRowNo))
                    edcDBValue.SelStart = 0
                    edcDBValue.SelLength = Len(edcDBValue.Text)
                    edcDBValue.Visible = True  'Set visibility
                    edcDBValue.SetFocus
            End Select
        Case 5  'Ratio
            Select Case ilBoxNo 'Branch on box type (control)
                Case 1 To 13
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    imLnBoxNo = ilBoxNo + WKSPOTSINDEX - 1
                    edcDBValue.Width = tmDBRCtrls(ilBoxNo).fBoxW
                    edcDBValue.MaxLength = 5
                    gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBRCtrls(ilBoxNo).fBoxX, tmDBRCtrls(ilBoxNo).fBoxY
                    llDate = lmHSStartDate + 7 * (imHSCurWkNo + imLnBoxNo - WKSPOTSINDEX - 1)
                    llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
                    ilWkIndex = (llDate - lmHSStartDate) \ 7 + 1
                    slStr = ""
                    If ilWkIndex > 0 Then
                        ilIndex = imLnSave(10, imLnRowNo)
                        Do While ilIndex > 0
                            If ilWkIndex <= UBound(tmWkInfo(ilIndex).lActPrice) Then
                                llActPrice = tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1)
                                If imDBRatio = 0 Then
                                    llRCPrice = tmWkInfo(ilIndex).lRCPrice(ilWkIndex - 1)
                                    'Actual/Rate Card
                                    If (llRCPrice > 0) And (llActPrice >= 0) Then
                                        slStr = gLongToStrDec(llActPrice / llRCPrice, 2) '100 * llActPrice / llRCPrice, 2)
                                    End If
                                Else
                                    'New Actual/Actual
                                End If
                                Exit Do
                            Else
                                ilWkIndex = ilWkIndex - UBound(tmWkInfo(ilIndex).lActPrice)
                                If ilWkIndex <= 0 Then
                                    Exit Do
                                End If
                            End If
                            ilIndex = tmWkInfo(ilIndex).iNextIndex
                        Loop
                    End If
                    imLnBoxNo = -1
                    edcDBValue.Text = slStr 'Trim$(smLnSave(6, imLnRowNo))
                    edcDBValue.SelStart = 0
                    edcDBValue.SelLength = Len(edcDBValue.Text)
                    edcDBValue.Visible = True  'Set visibility
                    edcDBValue.SetFocus
            End Select
        Case -2
            Select Case ilBoxNo
                Case 1  'Line:CPP or CPM
                Case 2  'Line:GRP or GrImp
                Case 3  'Line:%GRP or %GrImp
                Case 4  'Line:Total $
                Case 5  'Vehicle:CPP or CPM
                Case 6  'Vehicle:GRP or GrImp
                Case 7  'Vehicle:%GRP or %GrImp
                Case 8  'Vehicle:Total $
                Case 9  'Total:CPP or CPM
                Case 10 'Total:GRP or GrImp
                Case 11 'Total:Total $
                Case 12 'Index
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    edcDBValue.Width = tmDBCtrls(ilBoxNo).fBoxW
                    edcDBValue.MaxLength = 5
                    gMoveTableCtrl pbcDemoBar(1), edcDBValue, tmDBCtrls(ilBoxNo).fBoxX, tmDBCtrls(ilBoxNo).fBoxY
                    edcDBValue.Text = ""
                    edcDBValue.SelStart = 0
                    edcDBValue.SelLength = Len(edcDBValue.Text)
                    edcDBValue.Visible = True  'Set visibility
                    edcDBValue.SetFocus
            End Select
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDBSetShow                      *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mDBSetShow(ilBoxNo As Integer)
'
'   mDBSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim ilIndex As Integer
    Dim ilRet As Integer
    Dim llDate As Long
    Dim ilWkIndex As Integer
    Dim llActPrice As Long
    Dim llRatio As Long
    Dim slStr As String
    Dim slRatio As String
    Dim slRound As String
    Dim llOldPrice As Long
    Dim ilCff As Integer
    If imDBTotals < 5 Then
        If (imDBRowNo = 1) Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBSCCtrls)) Then
                Exit Sub
            End If
        ElseIf imDBRowNo = 3 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBAPCtrls)) Then
                Exit Sub
            End If
        ElseIf imDBRowNo = 5 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBRCtrls)) Then
                Exit Sub
            End If
        ElseIf imDBRowNo = -1 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBCtrls)) Then
                Exit Sub
            End If
        End If
    Else
        If imDBRowNo = 3 Then
            If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDBSCCtrls)) Then
                Exit Sub
            End If
        Else
            Exit Sub
        End If
    End If
    If mGetLineType(imLnRowNo) = "H" Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                'If tgPackLn(ilLoop).iAlter <> True Then
                If tgPackLn(ilLoop).sAlter <> "Y" Then
                    'laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
                    ''lacLnFrame.Visible = True
                    'pbcLineArrow.Move pbcLineArrow.Left, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
                    'pbcLineArrow.Visible = True
                    mSetArrowFrame
                    If pbcLineArrow.Visible Then
                        pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                End If
                Exit For
            End If
        Next ilLoop
    End If
    Select Case imDBRowNo
        Case 1  'Spot Count
            Select Case ilBoxNo 'Branch on box type (control)
                Case 1 To 13
                    imLnBoxNo = ilBoxNo + WKSPOTSINDEX - 1
                    mLnSetShow imLnBoxNo
                    pbcLine_Paint
            End Select
        Case 3  'Price
            Select Case ilBoxNo 'Branch on box type (control)
                Case 1 To 13
                    edcDBValue.Visible = False
                    pbcDBLnDaily.Visible = False
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    Screen.MousePointer = vbHourglass
                    'pbcDemoBar(0).Cls
                    'pbcDemoBar(1).Cls
                    imLnBoxNo = ilBoxNo + WKSPOTSINDEX - 1
                    slStr = edcDBValue.Text
                    llActPrice = gStrDecToLong(slStr, 2)
                    llDate = lmHSStartDate + 7 * (imHSCurWkNo + imLnBoxNo - WKSPOTSINDEX - 1)

                    'llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
                    ilWkIndex = (llDate - lmHSStartDate) \ 7 + 1
                    If ilWkIndex > 0 Then
                        ilIndex = imLnSave(10, imLnRowNo)
                        Do While ilIndex > 0
                            If ilWkIndex - 1 <= UBound(tmWkInfo(ilIndex).lActPrice) Then
                                If tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) <> llActPrice Then
                                    llOldPrice = tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1)
                                    If tgClfCntr(imLnRowNo - 1).iOrigAnySpots < 0 Then
                                        tgClfCntr(imLnRowNo - 1).iOrigAnySpots = 0
                                    End If
                                    tgClfCntr(imLnRowNo - 1).iResearch = False
                                    tgClfCntr(imLnRowNo - 1).iSPChg = True
                                    tgClfCntr(imLnRowNo - 1).sLineChgd = "Y"
                                    imComputeReq = True
                                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                        imLnChg = True
                                    End If
                                    tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) = llActPrice
                                    slStr = gLongToStrDec(llActPrice, 2)
                                    'If (smLineType = "O") And (tgSpf.sVirtPkgCompute = "H") And (llOldPrice > 0) Then
                                    If ((smLineType = "O") Or (smLineType = "A")) And (tgSpf.sVirtPkgCompute = "H") And (llOldPrice > 0) Then
                                        ilRet = mAdjStdPkPrice(imLnRowNo, llDate, llDate + 6, llActPrice, llOldPrice, imLastCffUsed, tmRcf, imDGSave(), imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode())
                                    Else
                                        mSetFlightPriceForWk imLnRowNo, llDate, slStr, imOvDays(), tmRcf, imCntrVefCode, imDGSave(), imLnTotalType
                                    End If
                                    tgClfCntr(imLnRowNo - 1).sCurrentPrice = ""
                                    ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
                                    Do While ilCff <> -1
                                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                            If (llDate >= tgCffCntr(ilCff).lStartDate) And (llDate <= tgCffCntr(ilCff).lEndDate) Then
                                                If tmWkInfo(ilIndex).lRCPrice(ilWkIndex - 1) > 0 Then
                                                    tgCffCntr(ilCff).CffRec.lPropPrice = tmWkInfo(ilIndex).lRCPrice(ilWkIndex - 1)
                                                End If
                                                Exit Do
                                            End If
                                        End If
                                        ilCff = tgCffCntr(ilCff).iNextCff
                                    Loop
                                    mResetDemoBar False
                                    mCntrTotal
                                    pbcLine_Paint
                                    pbcLnTotal.Cls
                                    pbcLnTotal_Paint
                                End If
                                Exit Do
                            Else
                                ilWkIndex = ilWkIndex - UBound(tmWkInfo(ilIndex).lActPrice) - 1
                                If ilWkIndex <= 0 Then
                                    Exit Do
                                End If
                            End If
                            ilIndex = tmWkInfo(ilIndex).iNextIndex
                        Loop
                    End If
                    imLnBoxNo = -1
                    Screen.MousePointer = vbDefault
            End Select
        Case 5  'Ratio
            Select Case ilBoxNo 'Branch on box type (control)
                Case 1 To 13
                    edcDBValue.Visible = False
                    pbcDBLnDaily.Visible = False
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    Screen.MousePointer = vbHourglass
                    'pbcDemoBar(0).Cls
                    'pbcDemoBar(1).Cls
                    imLnBoxNo = ilBoxNo + WKSPOTSINDEX - 1
                    slStr = edcDBValue.Text
                    If Len(slStr) <> 0 Then
                        llRatio = gStrDecToLong(slStr, 2)
                        llDate = lmHSStartDate + 7 * (imHSCurWkNo + imLnBoxNo - WKSPOTSINDEX - 1)
                        'llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
                        ilWkIndex = (llDate - lmHSStartDate) \ 7 + 1
                        If ilWkIndex > 0 Then
                            ilIndex = imLnSave(10, imLnRowNo)
                            Do While ilIndex > 0
                                If ilWkIndex - 1 <= UBound(tmWkInfo(ilIndex).lActPrice) Then
                                    'llActPrice = llRatio * tmWkInfo(ilIndex).lRCPrice(ilWkIndex - 1)
                                    If imDBRatio = 0 Then
                                        'slStr = gLongToStrDec(tmWkInfo(ilIndex).lRCPrice(ilWkIndex), 0)
                                        llActPrice = llRatio * tmWkInfo(ilIndex).lRCPrice(ilWkIndex - 1)
                                    Else
                                        'slStr = gLongToStrDec(tmWkInfo(ilIndex).lActPrice(ilWkIndex), 2)
                                        llActPrice = llRatio * tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) / 100
                                    End If
                                    If tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) <> llActPrice Then
                                        If (tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) <> -10) Or (llActPrice <> 0) Then
                                            tgClfCntr(imLnRowNo - 1).iResearch = False
                                            tgClfCntr(imLnRowNo - 1).iSPChg = True
                                            tgClfCntr(imLnRowNo - 1).sLineChgd = "Y"
                                            imComputeReq = True
                                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                                imLnChg = True
                                            End If
                                            tmWkInfo(ilIndex).lActPrice(ilWkIndex - 1) = llActPrice
                                            slStr = gLongToStrDec(llActPrice, 2)
                                            mSetFlightPriceForWk imLnRowNo, llDate, slStr, imOvDays(), tmRcf, imCntrVefCode, imDGSave(), imLnTotalType
                                            mResetDemoBar False
                                            'If tgUrf(0).sUseComputeCMC <> "I" Then
                                            '    mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf
                                            '    mGetLnPriceInfo imLnRowNo, slStr, imLnTotalType, PRICEINDEX         'Formats Price within Show
                                            '    mResetDemoBar True, True
                                            'End If
                                            mCntrTotal
                                            pbcLine_Paint
                                            pbcLnTotal.Cls
                                            pbcLnTotal_Paint
                                        End If
                                    End If
                                    Exit Do
                                Else
                                    ilWkIndex = ilWkIndex - UBound(tmWkInfo(ilIndex).lActPrice) - 1
                                    If ilWkIndex <= 0 Then
                                        Exit Do
                                    End If
                                End If
                                ilIndex = tmWkInfo(ilIndex).iNextIndex
                            Loop
                        End If
                        If imDBRatio <> 0 Then
                            pbcRatio.Cls
                            pbcRatio.CurrentX = -15
                            pbcRatio.CurrentY = 0
                            pbcRatio.Print "Actual/Rate Card"
                            imDBRatio = 0
                        End If
                    End If
                    imLnBoxNo = -1
                    Screen.MousePointer = vbDefault
            End Select
        Case -2
            Select Case ilBoxNo
                Case 1  'Line:CPP or CPM
                Case 2  'Line:GRP or GrImp
                Case 3  'Line:%GRP or %GrImp
                Case 4  'Line:Total $
                Case 5  'Vehicle:CPP or CPM
                Case 6  'Vehicle:GRP or GrImp
                Case 7  'Vehicle:%GRP or %GrImp
                Case 8  'Vehicle:Total $
                Case 9  'Total:CPP or CPM
                Case 10 'Total:GRP or GrImp
                Case 11 'Total:Total $
                Case 12 'Index
                    edcDBValue.Visible = False
                    pbcDBLnDaily.Visible = False
                    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    slRatio = edcDBValue.Text
                    gSetShow pbcDemoBar(1), "Indx", tmDBCtrls(12)
                    If (Len(slRatio) = 0) Or (Val(slRatio) = 0) Then
                        smLnSave(19, imLnRowNo) = "1.00"
                        Exit Sub
                    End If
                    Screen.MousePointer = vbHourglass
                    pbcDemoBar(0).Cls
                    pbcDemoBar(1).Cls
                    smLnSave(19, imLnRowNo) = slRatio
                    slRound = gLongToStrDec(tmRcf.lRound, 2)
                    llDate = lmHSStartDate
                    ilIndex = imLnSave(10, imLnRowNo)
                    Do While ilIndex > 0
                        For ilWkIndex = LBound(tmWkInfo(ilIndex).lSpotCount) To UBound(tmWkInfo(ilIndex).lSpotCount) Step 1
                            If tmWkInfo(ilIndex).lSpotCount(ilWkIndex) > 0 Then
                                If imDBRatio = 0 Then
                                    slStr = gLongToStrDec(tmWkInfo(ilIndex).lRCPrice(ilWkIndex), 0)
                                Else
                                    slStr = gLongToStrDec(tmWkInfo(ilIndex).lActPrice(ilWkIndex), 2)
                                End If
                                slStr = gMulStr(slRatio, slStr)
                                slStr = gRoundStr(slStr, slRound, 2)
                                llActPrice = gStrDecToLong(slStr, 2)
                                If tmWkInfo(ilIndex).lActPrice(ilWkIndex) <> llActPrice Then
                                    tgClfCntr(imLnRowNo - 1).iResearch = False
                                    tgClfCntr(imLnRowNo - 1).iSPChg = True
                                    tgClfCntr(imLnRowNo - 1).sLineChgd = "Y"
                                    imComputeReq = True
                                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                        imLnChg = True
                                    End If
                                    tmWkInfo(ilIndex).lActPrice(ilWkIndex) = llActPrice
                                    slStr = gLongToStrDec(llActPrice, 2)
                                    mSetFlightPriceForWk imLnRowNo, llDate, slStr, imOvDays(), tmRcf, imCntrVefCode, imDGSave(), imLnTotalType
                                    mSetAcqOrSpotPrice "A", imLnRowNo, slStr, PRICEINDEX
                                End If
                            End If
                            llDate = llDate + 7
                        Next ilWkIndex
                        ilIndex = tmWkInfo(ilIndex).iNextIndex
                    Loop
                    If imDBRatio <> 0 Then
                        pbcRatio.Cls
                        pbcRatio.CurrentX = -15
                        pbcRatio.CurrentY = 0
                        pbcRatio.Print "Actual/Rate Card"
                        imDBRatio = 0
                    End If
                    tgClfCntr(imLnRowNo - 1).iResearch = False
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    mResetDemoBar False
                    mCntrTotal
                    pbcLine_Paint
                    pbcLnTotal.Cls
                    pbcLnTotal_Paint
                    Screen.MousePointer = vbDefault
            End Select
    End Select
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDmEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mDmEnableBox(ilBoxNo As Integer)
'
'   mDmEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim ilIndex As Integer
    Dim slStr As String
    Dim slRecCode As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    If ilBoxNo < imLBCTCtrls Or (ilBoxNo > UBound(tmDmCtrls)) Then
        Exit Sub
    End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case DMCPPCPMINDEX
            If (imCppCpm < 0) And (imDemoFirstTime) Then
                imChgMode = True
                If tmAdf.iCode <> 0 Then
                    Select Case tmAdf.sCppCpm
                        Case "N"
                            imCppCpm = 0
                            For ilLoop = 0 To 3 Step 1
                                lbcDemo(ilLoop).ListIndex = -1
                                smSvDemo(ilLoop) = ""
                                smSvTarget(ilLoop) = ""
                                smTarget(ilLoop) = ""
                            Next ilLoop
                            imDefSource(8) = 0
                            smDefSave(8) = tmAdf.sCppCpm
                            imDefSource(9) = 0
                            smDefSave(9) = ""
                            imDefSource(10) = 0
                            smDefSave(10) = "0"
                            imDefSource(11) = 0
                            smDefSave(11) = ""
                            imDefSource(12) = 0
                            smDefSave(12) = "0"
                        Case "M"
                            imCppCpm = 1
                            For ilLoop = 0 To 3 Step 1
                                lbcDemo(ilLoop).ListIndex = -1
                                smSvDemo(ilLoop) = ""
                                smSvTarget(ilLoop) = ""
                                smTarget(ilLoop) = ""
                                slRecCode = Trim$(str$(tmAdf.iMnfDemo(ilLoop)))
                                For ilIndex = 0 To UBound(tgDemoCode) - 1 Step 1 'Traffic!lbcDemoCode.ListCount - 1 Step 1
                                    slNameCode = tgDemoCode(ilIndex).sKey   'Traffic!lbcDemoCode.List(ilIndex)
                                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                    If slRecCode = slCode Then
                                        lbcDemo(ilLoop).ListIndex = ilIndex + 1
                                        smSvDemo(ilLoop) = lbcDemo(ilLoop).List(ilIndex + 1)
                                        slStr = gLongToStrDec(tmAdf.lTarget(ilLoop), 2)
                                        smSvTarget(ilLoop) = slStr
                                        smTarget(ilLoop) = slStr
                                        Exit For
                                    End If
                                Next ilIndex
                            Next ilLoop
                            imDefSource(8) = 0
                            smDefSave(8) = tmAdf.sCppCpm
                            imDefSource(9) = 0
                            smDefSave(9) = lbcDemo(0).Text
                            imDefSource(10) = 0
                            smDefSave(10) = Trim$(str$(Val(smTarget(0))))
                            imDefSource(11) = 0
                            smDefSave(11) = lbcDemo(1).Text
                            imDefSource(12) = 0
                            smDefSave(12) = Trim$(str$(Val(smTarget(1))))
                            imDefSource(13) = 0
                            smDefSave(13) = lbcDemo(2).Text
                            imDefSource(14) = 0
                            smDefSave(14) = Trim$(str$(Val(smTarget(2))))
                            imDefSource(15) = 0
                            smDefSave(15) = lbcDemo(3).Text
                            imDefSource(16) = 0
                            smDefSave(16) = Trim$(str$(Val(smTarget(3))))
                        Case "P"
                            imCppCpm = 2
                            For ilLoop = 0 To 3 Step 1
                                lbcDemo(ilLoop).ListIndex = -1
                                smSvDemo(ilLoop) = ""
                                smSvTarget(ilLoop) = ""
                                smTarget(ilLoop) = ""
                                slRecCode = Trim$(str$(tmAdf.iMnfDemo(ilLoop)))
                                For ilIndex = 0 To UBound(tgDemoCode) - 1 Step 1 'Traffic!lbcDemoCode.ListCount - 1 Step 1
                                    slNameCode = tgDemoCode(ilIndex).sKey   'Traffic!lbcDemoCode.List(ilIndex)
                                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                    If slRecCode = slCode Then
                                        lbcDemo(ilLoop).ListIndex = ilIndex + 1
                                        smSvDemo(ilLoop) = lbcDemo(ilLoop).List(ilIndex + 1)
                                        slStr = gLongToStrDec(tmAdf.lTarget(ilLoop), 2)
                                        slStr = Left$(slStr, Len(slStr) - 3) 'Remove decimal point
                                        smSvTarget(ilLoop) = slStr
                                        smTarget(ilLoop) = slStr
                                        Exit For
                                    End If
                                Next ilIndex
                            Next ilLoop
                            imDefSource(8) = 0
                            smDefSave(8) = tmAdf.sCppCpm
                            imDefSource(9) = 0
                            smDefSave(9) = lbcDemo(0).Text
                            imDefSource(10) = 0
                            smDefSave(10) = Trim$(str$(Val(smTarget(0))))
                            imDefSource(11) = 0
                            smDefSave(11) = lbcDemo(1).Text
                            imDefSource(12) = 0
                            smDefSave(12) = Trim$(str$(Val(smTarget(1))))
                            imDefSource(13) = 0
                            smDefSave(13) = lbcDemo(2).Text
                            imDefSource(14) = 0
                            smDefSave(14) = Trim$(str$(Val(smTarget(2))))
                            imDefSource(15) = 0
                            smDefSave(15) = lbcDemo(3).Text
                            imDefSource(16) = 0
                            smDefSave(16) = Trim$(str$(Val(smTarget(3))))
                        Case Else
                            imCppCpm = -1 'cbcPriceType.ListIndex = 0
                            For ilLoop = 0 To 3 Step 1
                                lbcDemo(ilLoop).ListIndex = -1
                                smSvDemo(ilLoop) = ""
                                smSvTarget(ilLoop) = ""
                                smTarget(ilLoop) = ""
                            Next ilLoop
                    End Select
                Else
                    imCppCpm = 0
                    For ilLoop = 0 To 3 Step 1
                        lbcDemo(ilLoop).ListIndex = -1
                        smSvDemo(ilLoop) = ""
                        smSvTarget(ilLoop) = ""
                        smTarget(ilLoop) = ""
                    Next ilLoop
                End If
                imChgMode = False
                tmHdCtrls(DEMOINDEX).iChg = True
                tmDmCtrls(DMCPPCPMINDEX).iChg = True
                mSetCommands
            End If
            imDemoFirstTime = False
            imSvCppCpm = imCppCpm
            'For ilLoop = LBound(tmDmCtrls) To UBound(tmDmCtrls) Step 1
            '    mInitDmShow ilLoop  'Set show strings
            'Next ilLoop
            pbcDmShare.Width = tmDmCtrls(ilBoxNo).fBoxW
            gMoveFormCtrl pbcDm, pbcDmShare, tmDmCtrls(ilBoxNo).fBoxX, tmDmCtrls(ilBoxNo).fBoxY
            pbcDmShare_Paint
            pbcDmShare.Visible = True
            pbcDmShare.SetFocus
        Case DMHIDEDEMOINDEX
            If imHideDemo = -1 Then
                imHideDemo = 0
                tmHdCtrls(DEMOINDEX).iChg = True
                tmDmCtrls(DMHIDEDEMOINDEX).iChg = True
                mSetCommands
            End If
            imSvHideDemo = imHideDemo
            pbcDmShare.Width = tmDmCtrls(ilBoxNo).fBoxW
            gMoveFormCtrl pbcDm, pbcDmShare, tmDmCtrls(ilBoxNo).fBoxX, tmDmCtrls(ilBoxNo).fBoxY
            pbcDmShare_Paint
            pbcDmShare.Visible = True
            pbcDmShare.SetFocus
        Case DMDEMOINDEX, DMDEMOINDEX + 2, DMDEMOINDEX + 4, DMDEMOINDEX + 6
            ilIndex = (ilBoxNo - DMDEMOINDEX) \ 2
            lbcDemo(ilIndex).height = gListBoxHeight(lbcDemo(ilIndex).ListCount, 6)
            edcShareDropDown.Width = tmDmCtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 6
            gMoveFormCtrl pbcDm, edcShareDropDown, tmDmCtrls(ilBoxNo).fBoxX, tmDmCtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcDemo(ilIndex).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcDemo(ilIndex).ListIndex < 0 Then
                lbcDemo(ilIndex).ListIndex = 0   'First one within list
            End If
            If lbcDemo(ilIndex).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcDemo(ilIndex).List(lbcDemo(ilIndex).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case DMVALUEINDEX, DMVALUEINDEX + 2, DMVALUEINDEX + 4, DMVALUEINDEX + 6
            ilIndex = (ilBoxNo - DMVALUEINDEX) \ 2
            edcShareDropDown.Width = tmDmCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 8
            gMoveFormCtrl pbcDm, edcShareDropDown, tmDmCtrls(ilBoxNo).fBoxX, tmDmCtrls(ilBoxNo).fBoxY
            edcShareDropDown.Text = smTarget(ilIndex)
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
    End Select
    mDmSetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDmSetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mDmSetChg(ilBoxNo As Integer)
'
'   mDmSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim ilIndex As Integer
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmDmCtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case DMCPPCPMINDEX
        Case DMHIDEDEMOINDEX
        Case DMDEMOINDEX, DMDEMOINDEX + 2, DMDEMOINDEX + 4, DMDEMOINDEX + 6
            ilIndex = (ilBoxNo - DMDEMOINDEX) \ 2
            'gSetChgFlag tgChfCntr.sDemo(ilIndex), lbcDemo(ilIndex), tmHdCtrls(DEMOINDEX)
            gSetChgFlag smSvDemo(ilIndex), lbcDemo(ilIndex), tmDmCtrls(ilBoxNo)
        Case DMVALUEINDEX, DMVALUEINDEX + 2, DMVALUEINDEX + 4, DMVALUEINDEX + 6
            ilIndex = (ilBoxNo - DMVALUEINDEX) \ 2
            gSetChgFlag smSvTarget(ilIndex), edcShareDropDown, tmDmCtrls(ilBoxNo)
    End Select
    tmHdCtrls(DEMOINDEX).iChg = False
    For ilLoop = imLBCTCtrls To UBound(tmDmCtrls) Step 1
        If tmDmCtrls(ilLoop).iChg Then
            tmHdCtrls(DEMOINDEX).iChg = True
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDmSetFocus                     *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mDmSetFocus(ilBoxNo As Integer)
'
'   mDmSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If ilBoxNo < imLBCTCtrls Or (ilBoxNo > UBound(tmDmCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case DMCPPCPMINDEX
            pbcDmShare.Visible = True
            pbcDmShare.SetFocus
        Case DMHIDEDEMOINDEX
            pbcDmShare.Visible = True
            pbcDmShare.SetFocus
        Case DMDEMOINDEX, DMDEMOINDEX + 2, DMDEMOINDEX + 4, DMDEMOINDEX + 6
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case DMVALUEINDEX, DMVALUEINDEX + 2, DMVALUEINDEX + 4, DMVALUEINDEX + 6
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDmSetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mDmSetShow(ilBoxNo As Integer)
'
'   mDmSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim ilIndex As Integer
    Dim slStr As String
    Dim ilLoop As Integer
    If ilBoxNo < imLBCTCtrls Or (ilBoxNo > UBound(tmDmCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case DMCPPCPMINDEX
            pbcDmShare.Visible = False  'Set visibility
            If imCppCpm = 0 Then
                slStr = "N/A"
            ElseIf imCppCpm = 1 Then
                slStr = "CPM"
                imToggleCPPCPM = 1
            ElseIf imCppCpm = 2 Then
                slStr = "CPP"
                imToggleCPPCPM = 0
            Else
                slStr = ""
            End If
            gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
            If imCppCpm = 0 Then
                mSetSource 8, "N"
            ElseIf imCppCpm = 1 Then
                mSetSource 8, "M"
            ElseIf imCppCpm = 2 Then
                mSetSource 8, "P"
            End If
            If imSvCppCpm <> imCppCpm Then  'Remove values
                For ilLoop = 0 To 3 Step 1
                    smTarget(ilLoop) = ""
                Next ilLoop
            End If
        Case DMHIDEDEMOINDEX
            pbcDmShare.Visible = False  'Set visibility
            If imHideDemo = 0 Then
                slStr = "No"
            ElseIf imHideDemo = 1 Then
                slStr = "Yes"
            Else
                slStr = ""
            End If
            gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
        Case DMDEMOINDEX, DMDEMOINDEX + 2, DMDEMOINDEX + 4, DMDEMOINDEX + 6
            ilIndex = (ilBoxNo - DMDEMOINDEX) \ 2
            lbcDemo(ilIndex).Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcDemo(ilIndex).ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcDemo(ilIndex).List(lbcDemo(ilIndex).ListIndex)
            End If
            If (slStr <> Trim$(tmDmCtrls(ilBoxNo).sShow)) Then
                lbcDBDemo.Clear
            End If
            gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
            mSetSource 9 + 2 * ilIndex, slStr
            If imDefSource(9 + 2 * ilIndex) > imDefSource(8) Then
                imDefSource(8) = imDefSource(9 + 2 * ilIndex)
            End If
        Case DMVALUEINDEX, DMVALUEINDEX + 2, DMVALUEINDEX + 4, DMVALUEINDEX + 6
            ilIndex = (ilBoxNo - DMVALUEINDEX) \ 2
            edcShareDropDown.Visible = False  'Set visibility
            smTarget(ilIndex) = edcShareDropDown.Text
            If imCppCpm = 2 Then
                gFormatStr smTarget(ilIndex), FMTLEAVEBLANK + FMTCOMMA, 0, slStr
            Else
                gFormatStr smTarget(ilIndex), FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            End If
            gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
            slStr = smTarget(ilIndex)
            slStr = Trim$(str$(Val(slStr)))
            mSetSource 10 + 2 * ilIndex, slStr
            If imDefSource(10 + 2 * ilIndex) > imDefSource(8) Then
                imDefSource(8) = imDefSource(10 + 2 * ilIndex)
            End If
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mTestFields                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test fields for mandatory and   *
'*                     blanks                          *
'*                                                     *
'*******************************************************
Private Function mDmTestFields(ilCtrlNo As Integer, ilState As Integer) As Integer
'
'   iState = ALLBLANK+NOMSG   'Blank
'   iTest = TESTALLCTRLS
'   iRet = mTestFields(iTest, iState)
'   Where:
'       iTest (I)- Test all controls or control number specified
'       iState (I)- Test one of the following:
'                  ALLBLANK=All fields blank
'                  ALLMANBLANK=All mandatory
'                    field blank
'                  ALLMANDEFINED=All mandatory
'                    fields have data
'                  Plus
'                  NOMSG=No error message shown
'                  SHOWMSG=show error message
'       iRet (O)- True if all mandatory fields blank, False if not all blank
'
'
    Dim slStr As String

    If (ilCtrlNo = DMCPPCPMINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If imCppCpm = 0 Then
            slStr = "N/A"
        ElseIf imCppCpm = 1 Then
            slStr = "CPM"
        ElseIf imCppCpm = 2 Then
            slStr = "CPP"
        Else
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Price type must be specified", tmDmCtrls(DMCPPCPMINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMCPPCPMINDEX
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMHIDEDEMOINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If imHideDemo = 0 Then
            slStr = "No"
        ElseIf imHideDemo = 1 Then
            slStr = "Yes"
        Else
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Impression must be specified", tmDmCtrls(DMHIDEDEMOINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMHIDEDEMOINDEX
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMDEMOINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcDemo(0), "", "Demo must be specified", tmDmCtrls(DMDEMOINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMDEMOINDEX
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMVALUEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smTarget(0), "", "CPM or CPP must be specified", tmDmCtrls(DMVALUEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMVALUEINDEX
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMDEMOINDEX + 2) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcDemo(1), "", "Demo must be specified", tmDmCtrls(DMDEMOINDEX + 2).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMDEMOINDEX + 2
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMVALUEINDEX + 2) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smTarget(1), "", "CPM or CPP must be specified", tmDmCtrls(DMVALUEINDEX + 2).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMVALUEINDEX + 2
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMDEMOINDEX + 4) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcDemo(2), "", "Demo must be specified", tmDmCtrls(DMDEMOINDEX + 4).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMDEMOINDEX + 4
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMVALUEINDEX + 4) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smTarget(2), "", "CPM or CPP must be specified", tmDmCtrls(DMVALUEINDEX + 4).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMVALUEINDEX + 4
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMDEMOINDEX + 6) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcDemo(3), "", "Demo must be specified", tmDmCtrls(DMDEMOINDEX + 6).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMDEMOINDEX + 6
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DMVALUEINDEX + 6) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smTarget(3), "", "CPM or CPP must be specified", tmDmCtrls(DMVALUEINDEX + 6).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imDMBoxNo = DMVALUEINDEX + 6
            End If
            mDmTestFields = NO
            Exit Function
        End If
    End If
    mDmTestFields = YES
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mEnableBox                      *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mEnableBox(ilBoxNo As Integer)
'
'   mEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim ilFound As Integer
    Dim ilRet As Integer
    Dim slRecCode As String
    Dim slNameCode As String
    Dim slCode As String
    Dim slName As String
    Dim slFind As String
    Dim ilAdvtAgyCode As Integer
    Dim ilRetrieve As Integer
    Dim slStr1 As String
    Dim slStr2 As String
    Dim ilForceAgy As Integer

    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmHdCtrls)) Then
        Exit Sub
    End If
    If Contract.grdCPMBuy.Visible Then
        mSetBGColorWhite True
        '10738
'        mCPMSetShow
        If mCPMSetShow() = False Then
            Exit Sub
        End If
    End If
    imAllAnsw = False
    
    'L.Bianchi 04/16/2021
    If (lbcAdvt.ListIndex > 0) Then
        slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilRet = gBinarySearchAdf(Val(slCode))
    End If
    
    If smPctTrade <> "" Then 'L.Bianchi 04/16/2021
            If CInt(smPctTrade) > 0 And imAgyComm < 0 Then
                If ilRet > -1 And tgCommAdf(ilRet).sBillAgyDir = "A" Then
                    ilBoxNo = TRADEINDEX
                    imHdBoxNo = ilBoxNo
                    ilForceAgy = True
                End If
            End If
    End If
   
    Select Case ilBoxNo 'Branch on box type (control)
        Case STATUSINDEX
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            lbcStatus.height = gListBoxHeight(lbcStatus.ListCount, 6)
            edcHdDropDown.Width = tmHdCtrls(STATUSINDEX).fBoxW '- cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(STATUSINDEX).fBoxX, tmHdCtrls(STATUSINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcStatus.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcStatus.ListIndex < 0 Then
                If sgCntrScreen = "Orders" Then
                    lbcStatus.ListIndex = 1 'Order
                Else
                    lbcStatus.ListIndex = 0 'Working proposal
                End If
            Else
            End If
            imComboBoxIndex = lbcStatus.ListIndex
            If lbcStatus.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcStatus.List(lbcStatus.ListIndex)
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
            'edcHdDropDown.SetFocus
        Case POTINDEX
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            lbcPot.height = gListBoxHeight(lbcPot.ListCount, 6)
            edcHdDropDown.Width = 2 * tmHdCtrls(POTINDEX).fBoxW '- cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(POTINDEX).fBoxX, tmHdCtrls(POTINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcPot.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcPot.ListIndex < 0 Then
                lbcPot.ListIndex = 1 '[None]
            End If
            'imComboBoxIndex = lbcPot.ListIndex
            If lbcPot.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcPot.List(lbcPot.ListIndex)
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case TYPEINDEX 'Type
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            lbcType.height = gListBoxHeight(lbcType.ListCount, 12)
            edcHdDropDown.Width = tmHdCtrls(TYPEINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(TYPEINDEX).fBoxX, tmHdCtrls(TYPEINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcType.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcType.ListIndex < 0 Then
                lbcType.ListIndex = 0   'Standard
            End If
            imComboBoxIndex = lbcType.ListIndex
            If lbcType.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcType.List(lbcType.ListIndex)
            End If
            imChgMode = False
            If lbcType.ListIndex < 0 Then
                'gShowHelpMess tmChfHelp(), -1
            Else
                If sgCntrScreen = "Orders" Then
                    'gShowHelpMess tmChfHelp(), lbcType.ListIndex + CHFTYPE + 3
                Else
                    'gShowHelpMess tmChfHelp(), lbcType.ListIndex + CHFTYPE
                End If
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case CNTRNOINDEX 'Contract number
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            If sgCntrScreen = "Orders" Then
                smShareCaption = "Order Number"
                plcShare.CurrentX = 0
                plcShare.CurrentY = 0
                plcShare.Print smShareCaption
                pbcNumber.height = 1080 '720  '375
                plcShare.Move plcShare.Left, plcShare.Top, pbcNumber.Width + 450, pbcNumber.height + 510
                gMoveCtrl pbcHeader, plcShare, tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(CNTRNOINDEX).fBoxY
                pbcNumber.Move plcShare.Left + 225, plcShare.Top + 255

                plcShare.Visible = True
                pbcNumber.Visible = True
                imNoBoxNo = -1
                '10423
                mHandleSetFocusPicBox pbcShareSTab
                'pbcShareSTab.SetFocus
            Else
                smShareCaption = "Proposal Number"
                plcShare.CurrentX = 0
                plcShare.CurrentY = 0
                plcShare.Print smShareCaption
                pbcNumber.height = 1410 '1080
                plcShare.Move plcShare.Left, plcShare.Top, pbcNumber.Width + 450, pbcNumber.height + 510
                gMoveCtrl pbcHeader, plcShare, tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(CNTRNOINDEX).fBoxY
                pbcNumber.Move plcShare.Left + 225, plcShare.Top + 255

                plcShare.Visible = True
                pbcNumber.Visible = True
                imNoBoxNo = -1
                '10423
                mHandleSetFocusPicBox pbcShareSTab
                'pbcShareSTab.SetFocus
            End If
        Case REVNOINDEX 'Revision number
            'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
            If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
                pbcHdSTab.Enabled = True
                pbcHdTab.Enabled = True
                lbcRevNo.height = gListBoxHeight(lbcRevNo.ListCount, 6)
                edcRevNo.Width = tmHdCtrls(ilBoxNo).fBoxW
                edcRevNo.MaxLength = 7
                gMoveFormCtrl pbcHeader, edcRevNo, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
                cmcHdDropDown.Move edcRevNo.Left + edcRevNo.Width, edcRevNo.Top
                lbcRevNo.Move edcRevNo.Left, edcRevNo.Top + edcRevNo.height
                imComboBoxIndex = lbcRevNo.ListIndex
                If lbcRevNo.ListIndex < 0 Then
                    edcRevNo.Text = ""
                Else
                    edcRevNo.Text = lbcRevNo.List(lbcRevNo.ListIndex)
                End If
                edcRevNo.SelStart = 0
                edcRevNo.SelLength = Len(edcRevNo.Text)
                edcRevNo.Visible = True  'Set visibility
                cmcHdDropDown.Visible = True
                '10423
                mHandleSetFocusTextBox edcRevNo
                'edcRevNo.SetFocus
            Else
                If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                    'pbcClickFocus.SetFocus
                    Exit Sub
                End If
                If ((sgCntrScreen = "Orders") And (imStep1Index = 2)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4)) Then
                    edcRevNo.Width = tmHdCtrls(ilBoxNo).fBoxW
                    edcRevNo.MaxLength = 3
                    gMoveFormCtrl pbcHeader, edcRevNo, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
                    edcRevNo.Visible = True  'Set visibility
                    '10423
                    mHandleSetFocusTextBox edcRevNo
                    'edcRevNo.SetFocus
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                    'pbcClickFocus.SetFocus
                End If
            End If
        Case DATEINDEX 'Date
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFDATE
        Case ADVTINDEX   'Advertiser
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFADVT
            mAdvtPop
            If imTerminate Then
                Exit Sub
            End If
            lbcAdvt.height = gListBoxHeight(lbcAdvt.ListCount, 15)
            edcHdDropDown.Width = tmHdCtrls(ADVTINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 50
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ADVTINDEX).fBoxX, tmHdCtrls(ADVTINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcAdvt.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            lbcAdvt.Width = pbcLine.TextWidth("0NNNNNNNN1NNNNNNNNN2NNNNNNNNN3NNNNNNNNN4NNNNNNNNN")
            imChgMode = True
            If lbcAdvt.ListIndex < 0 Then
                If imStep2Index >= 1 Then
                    slFind = lbcStep(1).List(imStep2Index)
                    If StrComp(slFind, "[by Alerts]", vbTextCompare) <> 0 Then
                        gFindMatch slFind, 1, lbcAdvt
                        If gLastFound(lbcAdvt) > 0 Then
                            lbcAdvt.ListIndex = gLastFound(lbcAdvt)
                        Else
                            'If lbcAdvt.ListCount > 1 Then
                            '    lbcAdvt.ListIndex = 1 '  Fiirst Advt
                            'Else
                            '    lbcAdvt.ListIndex = 0
                            'End If
                            lbcAdvt.ListIndex = -1
                        End If
                    Else
                        lbcAdvt.ListIndex = -1
                    End If
                Else
                    'If lbcAdvt.ListCount > 1 Then
                    '    lbcAdvt.ListIndex = 1   'First advt
                    'Else
                    '    lbcAdvt.ListIndex = 0
                    'End If
                    lbcAdvt.ListIndex = -1  'No default
                End If
            End If
            If lbcAdvt.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcAdvt.List(lbcAdvt.ListIndex)
            End If
            imChgMode = False
            cmcHdDropDown.Visible = True
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
          '  edcHdDropDown.SetFocus
        Case PRODUCTINDEX   'Product
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            mProdPop tmAdf.iCode, tmProdCode(), smProdCodeTag
            If imTerminate Then
                Exit Sub
            End If
            lbcProd.height = gListBoxHeight(lbcProd.ListCount, 14)
            edcHdDropDown.Width = tmHdCtrls(ilBoxNo).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 35    'tgSpf.iAProd
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcProd.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            gFindMatch smProduct, 1, lbcProd
            If gLastFound(lbcProd) >= 1 Then
                lbcProd.ListIndex = gLastFound(lbcProd)
                edcHdDropDown.Text = lbcProd.List(lbcProd.ListIndex)
            Else
                If smProduct <> "" Then
                    lbcProd.ListIndex = -1
                    edcHdDropDown.Text = smProduct
                Else
                    If imProdFirstTime Then
                        gFindMatch tmAdf.sProduct, 1, lbcProd
                        If gLastFound(lbcProd) >= 1 Then
                            lbcProd.ListIndex = gLastFound(lbcProd)
                            smDefSave(1) = Trim$(tmAdf.sProduct)
                            imDefSource(1) = 0  'Advertiser
                        Else
                            lbcProd.ListIndex = 0
                        End If
                    Else
                        lbcProd.ListIndex = 0
                    End If
                    edcHdDropDown.Text = lbcProd.List(lbcProd.ListIndex)
                End If
            End If
            imChgMode = False
            imProdFirstTime = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
            'edcHdDropDown.SetFocus
        Case SHTTITLEINDEX   'Short Title
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            mShtTitlePop tmAdf.iCode
            If imTerminate Then
                Exit Sub
            End If
            lbcShtTitle.height = gListBoxHeight(lbcShtTitle.ListCount, 14)
            edcHdDropDown.Width = tmHdCtrls(ilBoxNo).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 15    'tgSpf.iAProd
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcShtTitle.Move cmcHdDropDown.Left + cmcHdDropDown.Width - lbcShtTitle.Width, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            gFindMatch smShtTitle, 0, lbcShtTitle
            If gLastFound(lbcShtTitle) >= 0 Then
                lbcShtTitle.ListIndex = gLastFound(lbcShtTitle)
                edcHdDropDown.Text = lbcShtTitle.List(lbcShtTitle.ListIndex)
            Else
                If smShtTitle <> "" Then
                    lbcShtTitle.ListIndex = -1
                    edcHdDropDown.Text = smShtTitle
                Else
                    lbcShtTitle.ListIndex = -1  '0
                    edcHdDropDown.Text = "" 'lbcShtTitle.List(lbcShtTitle.ListIndex)
                End If
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
            'edcHdDropDown.SetFocus
        Case AGENCYINDEX   'Agency
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFAGENCY
            mAgencyPop
            If imTerminate Then
                Exit Sub
            End If
            lbcAgency.height = gListBoxHeight(lbcAgency.ListCount, 15)
            edcHdDropDown.Width = tmHdCtrls(AGENCYINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 50
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(AGENCYINDEX).fBoxX, tmHdCtrls(AGENCYINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcAgency.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            lbcAgency.Width = pbcLine.TextWidth("0NNNNNNNN1NNNNNNNNN2NNNNNNNNN3NNNNNNNNN4NNNNNNNNN")
            imChgMode = True
            If (lbcAgency.ListIndex = -1) And (imAgyFirstTime) Then
                If tmAdf.iCode > 0 Then
                    If (Trim$(tmAdf.sBillAgyDir) = "D") And (tmAdf.iAgfCode = 0) Then
                        lbcAgency.ListIndex = 1
                        imDefSource(2) = 0  'Advt
                        smDefSave(2) = "0"
                    Else
                        slRecCode = Trim$(str$(tmAdf.iAgfCode))
                        ilFound = False
                        For ilLoop = 0 To UBound(tmCntAgency) - 1 Step 1 'Traffic!lbcAgency.ListCount - 1 Step 1
                            slNameCode = tmCntAgency(ilLoop).sKey  'Traffic!lbcAgency.List(ilLoop)
                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                            On Error GoTo mEnableBoxErr
                            gCPErrorMsg ilRet, "mEnableBox (gParseItem field 2: Agency)", Contract
                            On Error GoTo 0
                            If slRecCode = slCode Then
                                lbcAgency.ListIndex = ilLoop + 2
                                imDefSource(2) = 0  'Advt
                                smDefSave(2) = slCode
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            If lbcAgency.ListCount > 2 Then
                                lbcAgency.ListIndex = 2 '  First agency
                            Else
                                lbcAgency.ListIndex = 0 '[New]
                            End If
                        End If
                    End If
                Else
                    If lbcAgency.ListCount > 2 Then
                        lbcAgency.ListIndex = 2 'First name
                    Else
                        lbcAgency.ListIndex = 0 '[New]
                    End If
                End If
            End If
            imAgyFirstTime = False
            If lbcAgency.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcAgency.List(lbcAgency.ListIndex)
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case SPERSONINDEX   'Salesperson

            smShareCaption = "Salespersons"
            plcShare.CurrentX = 0
            plcShare.CurrentY = 0
            plcShare.Print smShareCaption
            plcShare.Move plcShare.Left, plcShare.Top, pbcSPerson.Width + 450, pbcSPerson.height + 510
            gMoveCtrl pbcHeader, plcShare, tmHdCtrls(SPERSONINDEX).fBoxX, tmHdCtrls(SPERSONINDEX).fBoxY
            pbcSPerson.Move plcShare.Left + 225, plcShare.Top + 255

            plcShare.Visible = True
            pbcSPerson.Visible = True
            imSPBoxNo = -1
            '10423
            mHandleSetFocusPicBox pbcShareSTab
           ' pbcShareSTab.SetFocus
        Case COMPINDEX   'Competitive
            smShareCaption = "Product Protection/Program Exclusions"
            plcShare.CurrentX = 0
            plcShare.CurrentY = 0
            plcShare.Print smShareCaption
            plcShare.Move plcShare.Left, plcShare.Top, pbcCE.Width + 450, pbcCE.height + 510
            gMoveCtrl pbcHeader, plcShare, tmHdCtrls(COMPINDEX).fBoxX, tmHdCtrls(COMPINDEX).fBoxY
            pbcCE.Move plcShare.Left + 225, plcShare.Top + 255

            plcShare.Visible = True
            pbcCE.Visible = True
            imCEBoxNo = -1
            '10423
            mHandleSetFocusPicBox pbcShareSTab
           ' pbcShareSTab.SetFocus
        Case BUYERINDEX 'Buyer
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            If tmAgf.iCode > 0 Then
                ilAdvtAgyCode = tmAgf.iCode
                ilRetrieve = 1
            Else
                If tmAdf.iCode > 0 Then
                    ilAdvtAgyCode = tmAdf.iCode
                    ilRetrieve = 0
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                   ' pbcClickFocus.SetFocus
                    Exit Sub
                End If
            End If
            mBuyerPop ilRetrieve, ilAdvtAgyCode
            If imTerminate Then
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFBUYER
            lbcBuyer.height = gListBoxHeight(lbcBuyer.ListCount, 14)
            edcHdDropDown.Width = tmHdCtrls(ilBoxNo).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcBuyer.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If (lbcBuyer.ListIndex = -1) And (imBuyerFirstTime) Then
                If tmPnf.iCode > 0 Then
                    ilFound = False
                    For ilLoop = 0 To UBound(tmCntBuyerCode) - 1 Step 1 'Traffic!lbcBuyerCode.ListCount - 1 Step 1
                        slNameCode = tmCntBuyerCode(ilLoop).sKey   'Traffic!lbcBuyerCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 1, "\", slName)
                        On Error GoTo mEnableBoxErr
                        gCPErrorMsg ilRet, "mEnableBox (gParseItem field 1: Personnel)", Contract
                        On Error GoTo 0
                        If Trim$(tmPnf.sName) = Trim$(slName) Then
                            lbcBuyer.ListIndex = ilLoop + 2
                            If tmAdf.sBillAgyDir = "D" Then
                                imDefSource(6) = 0
                            Else
                                imDefSource(6) = 1
                            End If
                            smDefSave(6) = Trim$(slName)
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        lbcBuyer.ListIndex = 1  'None
                    End If
                Else
                    lbcBuyer.ListIndex = 1  'None
                End If
            End If
            imBuyerFirstTime = False
            If lbcBuyer.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcBuyer.List(lbcBuyer.ListIndex)
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case PHONEINDEX 'Phone and extension
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFBUYERPH
            gMoveFormCtrl pbcHeader, mkcPhone, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            mkcPhone.Visible = True  'Set visibility
            mkcPhone.SetFocus
        Case SHAREINDEX '% Budget

            smShareCaption = "Share of Budget"
            plcShare.CurrentX = 0
            plcShare.CurrentY = 0
            plcShare.Print smShareCaption
            plcShare.Move plcShare.Left, plcShare.Top, pbcShareBudget.Width + 450, pbcShareBudget.height + 510
            gMoveCtrl pbcHeader, plcShare, tmHdCtrls(SHAREINDEX).fBoxX, tmHdCtrls(SHAREINDEX).fBoxY
            pbcShareBudget.Move plcShare.Left + 225, plcShare.Top + 255

            plcShare.Visible = True
            pbcShareBudget.Visible = True
            imSBBoxNo = -1
            '10423
            mHandleSetFocusPicBox pbcShareSTab
            'pbcShareSTab.SetFocus
        Case MERCHINDEX
            lbcComment(0).height = gListBoxHeight(lbcComment(0).ListCount, 2)
            edcHdDropDown.Width = tmHdCtrls(MERCHINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(MERCHINDEX).fBoxX, tmHdCtrls(MERCHINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcComment(0).Move edcHdDropDown.Left + edcHdDropDown.Width + cmcHdDropDown.Width - lbcComment(0).Width, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If smComment(0) <> "" Then
                lbcComment(0).Clear
                lbcComment(0).AddItem Trim$(Left$(smComment(0), 20)), 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 1 '[Custom]
                edcHdDropDown.Text = lbcComment(0).List(1)
            Else
                lbcComment(0).Clear
                lbcComment(0).AddItem "[Comment]", 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 0 '[None]
                edcHdDropDown.Text = lbcComment(0).List(0)
            End If
            edcComment.Text = smComment(0)
            imComboBoxIndex = lbcComment(0).ListIndex
            For ilLoop = 0 To 3 Step 1
                If imCommShowOn(0, ilLoop) = 0 Then
                    ckcCommOn(ilLoop).Value = vbChecked
                Else
                    ckcCommOn(ilLoop).Value = vbUnchecked
                End If
            Next ilLoop
            ckcCommOn(2).Value = vbUnchecked
            ckcCommOn(2).Enabled = False
            ckcCommOn(4).Value = vbUnchecked
            ckcCommOn(4).Enabled = False
            imChgMode = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If smComment(0) <> "" Then
                    imDoubleClickName = True
                    ilRet = mHdCommentBranch(0, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment())
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                   ' pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
            'edcHdDropDown.SetFocus
        Case PROMOINDEX
            lbcComment(0).height = gListBoxHeight(lbcComment(0).ListCount, 2)
            edcHdDropDown.Width = tmHdCtrls(PROMOINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(PROMOINDEX).fBoxX, tmHdCtrls(PROMOINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcComment(0).Move edcHdDropDown.Left + edcHdDropDown.Width + cmcHdDropDown.Width - lbcComment(0).Width, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If smComment(1) <> "" Then
                lbcComment(0).Clear
                lbcComment(0).AddItem Trim$(Left$(smComment(1), 20)), 0
                lbcComment(0).AddItem "[None]", 0
                edcHdDropDown.Text = lbcComment(0).List(1)
            Else
                lbcComment(0).Clear
                lbcComment(0).AddItem "[Comment]", 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 0 '[None]
                edcHdDropDown.Text = lbcComment(0).List(0)
            End If
            edcComment.Text = smComment(1)
            imComboBoxIndex = lbcComment(0).ListIndex
            For ilLoop = 0 To 3 Step 1
                If imCommShowOn(1, ilLoop) = 0 Then
                    ckcCommOn(ilLoop).Value = vbChecked
                Else
                    ckcCommOn(ilLoop).Value = vbUnchecked
                End If
            Next ilLoop
            ckcCommOn(2).Value = vbUnchecked
            ckcCommOn(2).Enabled = False
            ckcCommOn(4).Value = vbUnchecked
            ckcCommOn(4).Enabled = False
            imChgMode = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If smComment(1) <> "" Then
                    imDoubleClickName = True
                    ilRet = mHdCommentBranch(1, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment())
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                   ' pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case REVSETINDEX 'Revenue set
            smShareCaption = "Revenue Sets"
            plcShare.CurrentX = 0
            plcShare.CurrentY = 0
            plcShare.Print smShareCaption
            plcShare.Move plcShare.Left, plcShare.Top, pbcRevenue.Width + 450, pbcRevenue.height + 510
            gMoveCtrl pbcHeader, plcShare, tmHdCtrls(REVSETINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY
            pbcRevenue.Move plcShare.Left + 225, plcShare.Top + 255

            plcShare.Visible = True  'Set visibility
            pbcRevenue.Visible = True
            imRSBoxNo = -1
            '10423
            mHandleSetFocusPicBox pbcShareSTab
           ' pbcShareSTab.SetFocus

        Case SEGINDEX
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            lbcSeg.height = gListBoxHeight(lbcSeg.ListCount, 6)
            edcHdDropDown.Width = tmHdCtrls(SEGINDEX).fBoxW '- cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(SEGINDEX).fBoxX, tmHdCtrls(SEGINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcSeg.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcSeg.ListIndex < 0 Then
                lbcSeg.ListIndex = 0 '[New]
            End If
            'imComboBoxIndex = lbcPot.ListIndex
            If lbcSeg.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcSeg.List(lbcSeg.ListIndex)
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case DEMOINDEX 'Demo Code
            imSvCppCpm = imCppCpm
            smDemo0 = lbcDemo(0).Text
            smShareCaption = "Demos"
            plcShare.CurrentX = 0
            plcShare.CurrentY = 0
            plcShare.Print smShareCaption
            plcShare.Move plcShare.Left, plcShare.Top, pbcDm.Width + 450, pbcDm.height + 510
            gMoveCtrl pbcHeader, plcShare, tmHdCtrls(DEMOINDEX).fBoxX - 150, tmHdCtrls(DEMOINDEX).fBoxY
            pbcDm.Move plcShare.Left + 225, plcShare.Top + 255
            plcShare.Visible = True  'Set visibility
            pbcDm.Visible = True
            imDMBoxNo = -1
            '10423
            mHandleSetFocusPicBox pbcShareSTab
           ' pbcShareSTab.SetFocus
        Case GUARINDEX   '% Guar
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            edcHdDropDown.Width = tmHdCtrls(ilBoxNo).fBoxW '- cmcHdDropDown.Width
            If (Asc(tgSpf.sOptionFields) And OFDELGUAR) = OFDELGUAR Then
                edcHdDropDown.MaxLength = 3
            Else
                edcHdDropDown.MaxLength = 0
            End If
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            edcHdDropDown.Text = smHdSave(2)
            If (Trim$(edcHdDropDown.Text) = "") And (imGuarFirstTime) Then
                If (Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) = GUARBYGRIMP Then  'Using Delivery Guarantee
                    edcHdDropDown.Text = Trim$(str$(tmAdf.lGuar))
                    imGuarFirstTime = False
                    smDefSave(1) = Trim$(str$(tmAdf.lGuar))
                Else

                    If (tmAdf.lGuar >= 0) And (tmAdf.lGuar <= 100) Then
                        edcHdDropDown.Text = Trim$(str$(tmAdf.lGuar))
                        imGuarFirstTime = False
                        smDefSave(1) = Trim$(str$(tmAdf.lGuar))
                    Else
                        edcHdDropDown.Text = "0"
                        imGuarFirstTime = False
                        smDefSave(1) = "0"
                    End If
                End If
                imDefSource(1) = 0  'Advertiser
            End If
            edcHdDropDown.Visible = True  'Set visibility
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case TRADEINDEX '% Trade
            smShareCaption = "% Trade"
            plcShare.CurrentX = 0
            plcShare.CurrentY = 0
            plcShare.Print smShareCaption
            plcShare.Move plcShare.Left, plcShare.Top, pbcPctTrade.Width + 450, pbcPctTrade.height + 510
            gMoveCtrl pbcHeader, plcShare, tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY
            pbcPctTrade.Move plcShare.Left + 225, plcShare.Top + 255

            plcShare.Visible = True  'Set visibility
            pbcPctTrade.Visible = True
            imPTBoxNo = -1
            If ilForceAgy Then
                imPTBoxNo = 3
            End If
            '10423
            mHandleSetFocusPicBox pbcShareSTab
            'pbcShareSTab.SetFocus
        Case RATECARDINDEX 'Rate Card
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFRATECARD
            mRateCardPop
            If imTerminate Then
                Exit Sub
            End If
            lbcRateCard.height = gListBoxHeight(lbcRateCard.ListCount, 8)
            edcHdDropDown.Width = tmHdCtrls(RATECARDINDEX).fBoxW
            edcHdDropDown.MaxLength = 0
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(RATECARDINDEX).fBoxX, tmHdCtrls(RATECARDINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcRateCard.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcRateCard.ListIndex < 0 Then
                lbcRateCard.ListIndex = 0 '  select newest
                smCurRC = ""
            Else
                smCurRC = lbcRateCard.List(lbcRateCard.ListIndex)
            End If
            imComboBoxIndex = lbcRateCard.ListIndex
            If lbcRateCard.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcRateCard.List(lbcRateCard.ListIndex)
            End If
            imChgMode = False
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
            'edcHdDropDown.SetFocus
        Case GROSSINDEX 'Total Gross
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFTOTGROSS
            edcHdDropDown.Width = tmHdCtrls(ilBoxNo).fBoxW
            edcHdDropDown.MaxLength = 12
            '2/13/10:  Reset price if not in balance to computed price
            'edcHdDropDown.Text = smHdSave(1)
            If imTotColor <> 2 Then
                '5/7/12
                'If lbcBillCycle.ListIndex < 2 Then
                    gUnformatStr smTotalDollars, 0, slStr1
                    gUnformatStr smIBCTotal, 0, slStr2
                    edcHdDropDown.Text = gAddStr(slStr1, slStr2)
                'Else
                '    gUnformatStr smFBITotal, 0, slStr2
                '    edcHdDropDown.Text = slStr2
                'End If
            Else
                edcHdDropDown.Text = smHdSave(1)
            End If
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            edcHdDropDown.Visible = True  'Set visibility
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case BILLCYCLEINDEX 'Billing cycle
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            lbcBillCycle.height = gListBoxHeight(lbcBillCycle.ListCount, 8)
            edcHdDropDown.Width = tmHdCtrls(BILLCYCLEINDEX).fBoxW
            edcHdDropDown.MaxLength = 10
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(BILLCYCLEINDEX).fBoxX, tmHdCtrls(BILLCYCLEINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcBillCycle.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcBillCycle.ListCount <= 1 Then
                lbcBillCycle.ListIndex = 0
            Else
                If lbcBillCycle.ListIndex < 0 Then
                    lbcBillCycle.ListIndex = mBillingCycle() 'Determine initial billing cycle
                End If
            End If
            imComboBoxIndex = lbcBillCycle.ListIndex
            If lbcBillCycle.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcBillCycle.List(lbcBillCycle.ListIndex)
            End If
            imChgMode = False
            If lbcBillCycle.ListIndex < 0 Then
                'gShowHelpMess tmChfHelp(), -1
            Else
                'gShowHelpMess tmChfHelp(), lbcBillCycle.ListIndex + CHFBILLCYCLE
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case INVGROUPINDEX 'Invoice grouping
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
                'pbcClickFocus.SetFocus
                Exit Sub
            End If
            lbcInvGroup.height = gListBoxHeight(lbcInvGroup.ListCount, 8)
            edcHdDropDown.Width = tmHdCtrls(INVGROUPINDEX).fBoxW
            edcHdDropDown.MaxLength = 13
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(INVGROUPINDEX).fBoxX, tmHdCtrls(INVGROUPINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcInvGroup.Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If lbcInvGroup.ListIndex < 0 Then
                lbcInvGroup.ListIndex = 0 '  select newest
            End If
            imComboBoxIndex = lbcInvGroup.ListIndex
            If lbcInvGroup.ListIndex < 0 Then
                edcHdDropDown.Text = ""
            Else
                edcHdDropDown.Text = lbcInvGroup.List(lbcInvGroup.ListIndex)
            End If
            imChgMode = False
            If lbcInvGroup.ListIndex < 0 Then
                'gShowHelpMess tmChfHelp(), -1
            Else
                'gShowHelpMess tmChfHelp(), lbcInvGroup.ListIndex + CHFINVGROUP
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
          '  edcHdDropDown.SetFocus
        Case PRODTAGINDEX   'Product/Tag %
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                '10423
                mHandleSetFocusPicBox pbcClickFocus
               ' pbcClickFocus.SetFocus
                Exit Sub
            End If
            'gShowHelpMess tmChfHelp(), CHFPRODTAG
            edcHdDropDown.Width = tmHdCtrls(ilBoxNo).fBoxW
            edcHdDropDown.MaxLength = 6
            edcHdDropDown.Text = smHdSave(3)
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(ilBoxNo).fBoxX, tmHdCtrls(ilBoxNo).fBoxY
            edcHdDropDown.Visible = True  'Set visibility
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case INTCOMMINDEX
            lbcComment(0).height = gListBoxHeight(lbcComment(0).ListCount, 2)
            edcHdDropDown.Width = tmHdCtrls(INTCOMMINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(INTCOMMINDEX).fBoxX, tmHdCtrls(INTCOMMINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcComment(0).Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If smComment(2) <> "" Then
                lbcComment(0).Clear
                lbcComment(0).AddItem Trim$(Left$(smComment(2), 20)), 0
                lbcComment(0).AddItem "[None]", 0
                edcHdDropDown.Text = lbcComment(0).List(1)
            Else
                lbcComment(0).Clear
                lbcComment(0).AddItem "[Comment]", 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 0 '[None]
                edcHdDropDown.Text = lbcComment(0).List(0)
            End If
            edcComment.Text = smComment(2)
            imComboBoxIndex = lbcComment(0).ListIndex
            For ilLoop = 0 To 3 Step 1
                If ilLoop = 2 Then
                    ckcCommOn(ilLoop).Enabled = True
                    If imCommShowOn(2, ilLoop) = 0 Then
                        ckcCommOn(ilLoop).Value = vbChecked
                    Else
                        ckcCommOn(ilLoop).Value = vbUnchecked
                    End If
                Else
                    ckcCommOn(ilLoop).Enabled = False
                End If
            Next ilLoop
            ckcCommOn(4).Value = vbUnchecked
            ckcCommOn(4).Enabled = False
            imChgMode = False
            '2/13/09:  Allow comments to be defined and/or altered
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                If smComment(2) <> "" Then
                    imDoubleClickName = True
                    ilRet = mHdCommentBranch(2, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment())
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                   ' pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
            'edcHdDropDown.SetFocus
        Case CANCLAUSEINDEX
            lbcComment(0).height = gListBoxHeight(lbcComment(0).ListCount, 2)
            edcHdDropDown.Width = tmHdCtrls(CANCLAUSEINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(CANCLAUSEINDEX).fBoxX, tmHdCtrls(CANCLAUSEINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcComment(0).Move edcHdDropDown.Left, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If smComment(3) <> "" Then
                lbcComment(0).Clear
                lbcComment(0).AddItem Trim$(Left$(smComment(3), 20)), 0
                lbcComment(0).AddItem "[None]", 0
                edcHdDropDown.Text = lbcComment(0).List(1)
            Else
                lbcComment(0).Clear
                lbcComment(0).AddItem "[Comment]", 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 0 '[None]
                edcHdDropDown.Text = lbcComment(0).List(0)
            End If
            edcComment.Text = smComment(3)
            imComboBoxIndex = lbcComment(0).ListIndex
            For ilLoop = 0 To 3 Step 1
                If imCommShowOn(3, ilLoop) = 0 Then
                    ckcCommOn(ilLoop).Value = vbChecked
                Else
                    ckcCommOn(ilLoop).Value = vbUnchecked
                End If
            Next ilLoop
            ckcCommOn(2).Value = vbUnchecked
            ckcCommOn(2).Enabled = False
            ckcCommOn(4).Value = vbUnchecked
            ckcCommOn(4).Enabled = False
            imChgMode = False
            '2/13/09:  Allow comments to be defined and/or altered
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                If smComment(3) <> "" Then
                    imDoubleClickName = True
                    ilRet = mHdCommentBranch(3, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment())
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                    'pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case CHGREASONINDEX
            lbcComment(0).height = gListBoxHeight(lbcComment(0).ListCount, 2)
            edcHdDropDown.Width = tmHdCtrls(CHGREASONINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(CHGREASONINDEX).fBoxX, tmHdCtrls(CHGREASONINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcComment(0).Move edcHdDropDown.Left + edcHdDropDown.Width + cmcHdDropDown.Width - lbcComment(0).Width, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If smComment(4) <> "" Then
                lbcComment(0).Clear
                lbcComment(0).AddItem Trim$(Left$(smComment(4), 20)), 0
                lbcComment(0).AddItem "[None]", 0
                edcHdDropDown.Text = lbcComment(0).List(1)
            Else
                lbcComment(0).Clear
                lbcComment(0).AddItem "[Comment]", 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 0 '[None]
                edcHdDropDown.Text = lbcComment(0).List(0)
            End If
            edcComment.Text = smComment(4)
            imComboBoxIndex = lbcComment(0).ListIndex
            For ilLoop = 0 To 3 Step 1
                If imCommShowOn(4, ilLoop) = 0 Then
                    ckcCommOn(ilLoop).Value = vbChecked
                Else
                    ckcCommOn(ilLoop).Value = vbUnchecked
                End If
            Next ilLoop
            ckcCommOn(2).Value = vbUnchecked
            ckcCommOn(2).Enabled = False
            ckcCommOn(4).Value = vbUnchecked
            ckcCommOn(4).Enabled = False
            imChgMode = False
            '2/13/09:  Allow comments to be defined and/or altered
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                If smComment(4) <> "" Then
                    imDoubleClickName = True
                    ilRet = mHdCommentBranch(4, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment())
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                    'pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
        Case OTHERCOMMINDEX
            lbcComment(0).height = gListBoxHeight(lbcComment(0).ListCount, 2)
            edcHdDropDown.Width = tmHdCtrls(OTHERCOMMINDEX).fBoxW - cmcHdDropDown.Width
            edcHdDropDown.MaxLength = 20
            gMoveFormCtrl pbcHeader, edcHdDropDown, tmHdCtrls(OTHERCOMMINDEX).fBoxX, tmHdCtrls(OTHERCOMMINDEX).fBoxY
            cmcHdDropDown.Move edcHdDropDown.Left + edcHdDropDown.Width, edcHdDropDown.Top
            lbcComment(0).Move edcHdDropDown.Left + edcHdDropDown.Width + cmcHdDropDown.Width - lbcComment(0).Width, edcHdDropDown.Top + edcHdDropDown.height
            imChgMode = True
            If smComment(5) <> "" Then
                lbcComment(0).Clear
                lbcComment(0).AddItem Trim$(Left$(smComment(5), 20)), 0
                lbcComment(0).AddItem "[None]", 0
                edcHdDropDown.Text = lbcComment(0).List(1)
            Else
                lbcComment(0).Clear
                lbcComment(0).AddItem "[Comment]", 0
                lbcComment(0).AddItem "[None]", 0
                lbcComment(0).ListIndex = 0 '[None]
                edcHdDropDown.Text = lbcComment(0).List(0)
            End If
            edcComment.Text = smComment(5)
            imComboBoxIndex = lbcComment(0).ListIndex
            For ilLoop = 0 To 4 Step 1
                If imCommShowOn(5, ilLoop) = 0 Then
                    ckcCommOn(ilLoop).Value = vbChecked
                Else
                    ckcCommOn(ilLoop).Value = vbUnchecked
                End If
            Next ilLoop
            If Trim$(smComment(5)) = "" Then
                ckcCommOn(2).Value = vbChecked
            End If
            ckcCommOn(2).Enabled = True
            ckcCommOn(4).Enabled = True
            imChgMode = False
            '2/13/09:  Allow comments to be defined and/or altered
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                If smComment(5) <> "" Then
                    imDoubleClickName = True
                    ilRet = mHdCommentBranch(5, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment())
                Else
                    '10423
                    mHandleSetFocusPicBox pbcClickFocus
                   ' pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            edcHdDropDown.SelStart = 0
            edcHdDropDown.SelLength = Len(edcHdDropDown.Text)
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            '10423
            mHandleSetFocusTextBox edcHdDropDown
           ' edcHdDropDown.SetFocus
    End Select
    'Don't set change mode if new and on type field
    'If (imSelectedIndex <> 0) Or ((imSelectedIndex = 0) And (ilBoxNo <> TYPEINDEX)) Then
        mSetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
    'End If
    mSetCommands
    Exit Sub
mEnableBoxErr:
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mGenLines                       *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Generate lines from Power bar  *
'*                      and Rate Bar                   *
'*                                                     *
'*******************************************************
Private Function mGenLines(ilInSource As Integer) As Integer
'
'   ilSource(I)- 0=From package button in line area; 1= From Rate Bar
'
    Dim slStr As String
    Dim ilLoop As Integer
    Dim ilSelected As Integer
    Dim ilVeh As Integer
    Dim ilDP As Integer
    Dim ilLen As Integer
    'Dim ilLineNo As Integer
    'Dim ilBox As Integer
    Dim ilSvRowNo As Integer
    Dim ilSvBoxNo As Integer
    Dim ilDay As Integer
    Dim ilFound As Integer
    Dim ilRcfCode As Integer
    Dim ilRdf As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilVpfIndex As Integer
    Dim ilVehLen As Integer
    Dim ilFdLen As Integer
    Dim ilStartNoLn As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llDate As Long
    Dim ilSpotCount As Integer
    ReDim slLen(0 To 0) As String
    ReDim ilDays(0 To 6) As Integer
    ReDim ilDGSave(0 To 3) As Integer
    Dim slPrice As String
    Dim llWkPrice As Long
    Dim slDate As String
    Dim ilRCPrice As Integer
    Dim ilIndex As Integer
    Dim ilRB As Integer
    Dim ilSource As Integer
    Dim slPackageBy As String
    Dim slvalue As String
    Dim ilTest As Integer
    Dim slCreateComment As String
    Dim ilRBDnfCode As Integer
    Dim ilFreezeState As Integer

    mGenLines = True
    ilSource = ilInSource
    ilFreezeState = igFreezeState
    igFreezeState = 0
    If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
        ReDim igLnMakingPack(0 To 0) As Integer
        ilStartNoLn = UBound(tgClfCntr)
        slStr = edcPBDate(0).Text
        If Not gValidDate(slStr) Then
            igFreezeState = ilFreezeState
            Beep
            edcPBDate(0).SetFocus
            mGenLines = False
            Exit Function
        End If
        slStr = edcPBDate(1).Text
        If Not gValidDate(slStr) Then
            igFreezeState = ilFreezeState
            Beep
            edcPBDate(1).SetFocus
            mGenLines = False
            Exit Function
        End If
        ilSelected = False
        If (Trim$(smPowerCaption) = "Rate Bar") Then
            'For ilLoop = 0 To lbcAllVehicle.ListCount - 1 Step 1
            '    If lbcAllVehicle.Selected(ilLoop) Then
            For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                If tmPB1DP(ilLoop).iChk Then
                    ilSelected = True
                    Exit For
                End If
            Next ilLoop
            If Not ilSelected Then
                igFreezeState = ilFreezeState
                Beep
                'lbcAllVehicle.SetFocus
                mGenLines = False
                Exit Function
            End If
        Else
        End If
        ilSvRowNo = imLnRowNo
        ilSvBoxNo = imLnBoxNo
        slNameCode = tmCntRateCard(lbcRateCard.ListIndex).sKey 'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 3, "\", slCode)
        slCode = Trim$(slCode)
        ilRcfCode = CInt(slCode)
        ReDim tmPBDPGen(0 To 0) As PBDPGEN
        If (Trim$(smPowerCaption) = "Rate Bar") Then
            If ilInSource = 1 Then
                CRBPkg.Show vbModal
                If igTerminateReturn = 0 Then
                    igFreezeState = ilFreezeState
                    mGenLines = False
                    Exit Function
                End If
                ilRet = gParseItem(sgPassValue, 1, "|", smRBPackageValues(1))   'Package Type (Real or Virtual)
                ilRet = gParseItem(sgPassValue, 2, "|", slCreateComment)   'Create Comment (Yes or No)
                ilRet = gParseItem(sgPassValue, 3, "|", smRBPackageValues(2))   'Package By (Daypart; Vehicle; One)
                ilRet = gParseItem(sgPassValue, 4, "|", smRBPackageValues(3))   'Vehicle Name
                ilRet = gParseItem(sgPassValue, 5, "|", smRBPackageValues(4))   'Daypart Name
                ilRet = gParseItem(sgPassValue, 6, "|", smRBPackageValues(5))   'Number of virtual spots
                If slCreateComment = "0" Then
                    If Trim$(smComment(5)) <> "" Then
                        smComment(5) = smComment(5) & sgCR & sgLF
                        imCommShowOn(5, 0) = 0
                        imCommShowOn(5, 1) = 0
                    Else
                        imCommShowOn(5, 0) = 0
                        imCommShowOn(5, 1) = 0
                        imCommShowOn(5, 2) = 1
                        imCommShowOn(5, 3) = 1
                        imCommShowOn(5, 4) = 1
                    End If
                    smComment(5) = smComment(5) & "Following Vehicles Are Included:" & sgCR & sgLF
                End If
            End If
            Screen.MousePointer = vbHourglass
            If ilInSource = 1 Then
                slPackageBy = smRBPackageValues(2)
            Else
                slPackageBy = ""
            End If
            If slPackageBy = "0" Then  'Create package for each unique daypart
                ReDim ilRdfCode(0 To 0) As Integer
                For ilRB = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                    If tmPB1DP(ilRB).iChk Then
                        ilFound = False
                        For ilDP = 0 To UBound(ilRdfCode) - 1 Step 1
                            If ilRdfCode(ilDP) = tmPB1DP(ilRB).iRdfCode Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilDP
                        If Not ilFound Then
                            ilRdfCode(UBound(ilRdfCode)) = tmPB1DP(ilRB).iRdfCode
                            ReDim Preserve ilRdfCode(0 To UBound(ilRdfCode) + 1) As Integer
                        End If
                    End If
                Next ilRB
                ReDim ilCommentVefCode(0 To 0) As Integer
                For ilDP = 0 To UBound(ilRdfCode) - 1 Step 1
                    smRBPackageValues(4) = ""
                    ReDim slLen(0 To 0) As String
                    ReDim igLnMakingPack(0 To 0) As Integer
                    ReDim tmPBDPGen(0 To 0) As PBDPGEN
                    For ilRB = 0 To UBound(tmPB1DP) - 1 Step 1
                        If tmPB1DP(ilRB).iChk Then
                            If tmPB1DP(ilRB).iRdfCode = ilRdfCode(ilDP) Then
                                tmPBDPGen(UBound(tmPBDPGen)).iRdfCode = tmPB1DP(ilRB).iRdfCode
                                ilRet = gParseItem(tmPB1DP(ilRB).sVehName, 3, "|", slStr)
                                tmPBDPGen(UBound(tmPBDPGen)).sVehName = slStr
                                If slCreateComment = "0" Then
                                    ilFound = False
                                    For ilTest = 0 To UBound(ilCommentVefCode) - 1 Step 1
                                        If ilCommentVefCode(ilTest) = tmPB1DP(ilRB).iVefCode Then
                                            ilFound = True
                                            Exit For
                                        End If
                                    Next ilTest
                                    If Not ilFound Then
                                        smComment(5) = smComment(5) & slStr & sgCR & sgLF
                                        ilCommentVefCode(UBound(ilCommentVefCode)) = tmPB1DP(ilRB).iVefCode
                                        ReDim Preserve ilCommentVefCode(0 To UBound(ilCommentVefCode) + 1) As Integer
                                    End If
                                End If
                                tmPBDPGen(UBound(tmPBDPGen)).sDPName = tmPB1DP(ilRB).sDPName
                                smRBPackageValues(4) = tmPB1DP(ilRB).sDPName
                                tmPBDPGen(UBound(tmPBDPGen)).iVefCode = tmPB1DP(ilRB).iVefCode
                                tmPBDPGen(UBound(tmPBDPGen)).lAvgPrice = tmPB1DP(ilRB).lAvgPrice
                                tmPBDPGen(UBound(tmPBDPGen)).lNoSpots = tmPB1DP(ilRB).lNoSpots
                                tmPBDPGen(UBound(tmPBDPGen)).iSpotChg = tmPB1DP(ilRB).iSpotChg
                                tmPBDPGen(UBound(tmPBDPGen)).lMixStartDate = tmPB1DP(ilRB).lMixStartDate
                                tmPBDPGen(UBound(tmPBDPGen)).iMixSpotIndex = tmPB1DP(ilRB).iMixSpotIndex
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(0) = tmPB1DP(ilRB).iOvDays(0)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(1) = tmPB1DP(ilRB).iOvDays(1)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(2) = tmPB1DP(ilRB).iOvDays(2)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(3) = tmPB1DP(ilRB).iOvDays(3)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(4) = tmPB1DP(ilRB).iOvDays(4)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(5) = tmPB1DP(ilRB).iOvDays(5)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(6) = tmPB1DP(ilRB).iOvDays(6)
                                tmPBDPGen(UBound(tmPBDPGen)).sOvStartTime = tmPB1DP(ilRB).sOvStartTime
                                tmPBDPGen(UBound(tmPBDPGen)).sOvEndTime = tmPB1DP(ilRB).sOvEndTime
                                ReDim Preserve tmPBDPGen(0 To UBound(tmPBDPGen) + 1) As PBDPGEN
                            End If
                        End If
                    Next ilRB
                    slLen(UBound(slLen)) = lbcPBLen.List(lbcPBLen.ListIndex)
                    ReDim Preserve slLen(0 To UBound(slLen) + 1) As String
                    '6/7/16: Replaced GoSub
                    'GoSub mCreateLines
                    mCreateLines ilSource, ilDays(), slLen(), ilDGSave()
                    If imTerminate Then
                        mGenLines = False
                        Exit Function
                    End If
                    imLnBoxNo = -1
                    mSetHdDate False, True
                    mCntrTotal
                    If ilInSource = 1 Then
                        ilRet = mPackage(2)
                    End If
                Next ilDP
                Erase ilCommentVefCode
            ElseIf slPackageBy = "1" Then  'Each package for each unique vehicle
                ReDim ilVehCode(0 To 0) As Integer
                For ilRB = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                    If tmPB1DP(ilRB).iChk Then
                        ilFound = False
                        For ilVeh = 0 To UBound(ilVehCode) - 1 Step 1
                            If ilVehCode(ilVeh) = tmPB1DP(ilRB).iVefCode Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilVeh
                        If Not ilFound Then
                            ilVehCode(UBound(ilVehCode)) = tmPB1DP(ilRB).iVefCode
                            ReDim Preserve ilVehCode(0 To UBound(ilVehCode) + 1) As Integer
                        End If
                    End If
                Next ilRB
                For ilVeh = 0 To UBound(ilVehCode) - 1 Step 1
                    smRBPackageValues(3) = ""
                    ReDim slLen(0 To 0) As String
                    ReDim igLnMakingPack(0 To 0) As Integer
                    ReDim tmPBDPGen(0 To 0) As PBDPGEN
                    For ilRB = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                        If tmPB1DP(ilRB).iChk Then
                            If tmPB1DP(ilRB).iVefCode = ilVehCode(ilVeh) Then
                                tmPBDPGen(UBound(tmPBDPGen)).iRdfCode = tmPB1DP(ilRB).iRdfCode
                                ilRet = gParseItem(tmPB1DP(ilRB).sVehName, 3, "|", slStr)
                                tmPBDPGen(UBound(tmPBDPGen)).sVehName = slStr
                                smRBPackageValues(3) = slStr
                                tmPBDPGen(UBound(tmPBDPGen)).sDPName = tmPB1DP(ilRB).sDPName
                                tmPBDPGen(UBound(tmPBDPGen)).iVefCode = tmPB1DP(ilRB).iVefCode
                                tmPBDPGen(UBound(tmPBDPGen)).lAvgPrice = tmPB1DP(ilRB).lAvgPrice
                                tmPBDPGen(UBound(tmPBDPGen)).lNoSpots = tmPB1DP(ilRB).lNoSpots
                                tmPBDPGen(UBound(tmPBDPGen)).iSpotChg = tmPB1DP(ilRB).iSpotChg
                                tmPBDPGen(UBound(tmPBDPGen)).lMixStartDate = tmPB1DP(ilRB).lMixStartDate
                                tmPBDPGen(UBound(tmPBDPGen)).iMixSpotIndex = tmPB1DP(ilRB).iMixSpotIndex
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(0) = tmPB1DP(ilRB).iOvDays(0)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(1) = tmPB1DP(ilRB).iOvDays(1)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(2) = tmPB1DP(ilRB).iOvDays(2)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(3) = tmPB1DP(ilRB).iOvDays(3)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(4) = tmPB1DP(ilRB).iOvDays(4)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(5) = tmPB1DP(ilRB).iOvDays(5)
                                tmPBDPGen(UBound(tmPBDPGen)).iOvDays(6) = tmPB1DP(ilRB).iOvDays(6)
                                tmPBDPGen(UBound(tmPBDPGen)).sOvStartTime = tmPB1DP(ilRB).sOvStartTime
                                tmPBDPGen(UBound(tmPBDPGen)).sOvEndTime = tmPB1DP(ilRB).sOvEndTime
                                ReDim Preserve tmPBDPGen(0 To UBound(tmPBDPGen) + 1) As PBDPGEN
                            End If
                        End If
                    Next ilRB
                    slLen(UBound(slLen)) = lbcPBLen.List(lbcPBLen.ListIndex)
                    ReDim Preserve slLen(0 To UBound(slLen) + 1) As String
                    '6/7/16: Replaced GoSub
                    'GoSub mCreateLines
                    mCreateLines ilSource, ilDays(), slLen(), ilDGSave()
                    If imTerminate Then
                        mGenLines = False
                        Exit Function
                    End If
                    imLnBoxNo = -1
                    mSetHdDate False, True
                    mCntrTotal
                    If ilInSource = 1 Then
                        ilRet = mPackage(2)
                    End If
                Next ilVeh
            Else
                ReDim slLen(0 To 0) As String
                ReDim igLnMakingPack(0 To 0) As Integer
                ReDim tmPBDPGen(0 To 0) As PBDPGEN
                For ilVeh = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                    If tmPB1DP(ilVeh).iChk Then
                        tmPBDPGen(UBound(tmPBDPGen)).iRdfCode = tmPB1DP(ilVeh).iRdfCode
                        ilRet = gParseItem(tmPB1DP(ilVeh).sVehName, 3, "|", slStr)
                        tmPBDPGen(UBound(tmPBDPGen)).sVehName = slStr
                        tmPBDPGen(UBound(tmPBDPGen)).sDPName = tmPB1DP(ilVeh).sDPName
                        tmPBDPGen(UBound(tmPBDPGen)).iVefCode = tmPB1DP(ilVeh).iVefCode
                        tmPBDPGen(UBound(tmPBDPGen)).lAvgPrice = tmPB1DP(ilVeh).lAvgPrice
                        tmPBDPGen(UBound(tmPBDPGen)).lNoSpots = tmPB1DP(ilVeh).lNoSpots
                        tmPBDPGen(UBound(tmPBDPGen)).iSpotChg = tmPB1DP(ilVeh).iSpotChg
                        tmPBDPGen(UBound(tmPBDPGen)).lMixStartDate = tmPB1DP(ilVeh).lMixStartDate
                        tmPBDPGen(UBound(tmPBDPGen)).iMixSpotIndex = tmPB1DP(ilVeh).iMixSpotIndex
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(0) = tmPB1DP(ilVeh).iOvDays(0)
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(1) = tmPB1DP(ilVeh).iOvDays(1)
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(2) = tmPB1DP(ilVeh).iOvDays(2)
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(3) = tmPB1DP(ilVeh).iOvDays(3)
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(4) = tmPB1DP(ilVeh).iOvDays(4)
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(5) = tmPB1DP(ilVeh).iOvDays(5)
                        tmPBDPGen(UBound(tmPBDPGen)).iOvDays(6) = tmPB1DP(ilVeh).iOvDays(6)
                        tmPBDPGen(UBound(tmPBDPGen)).sOvStartTime = tmPB1DP(ilVeh).sOvStartTime
                        tmPBDPGen(UBound(tmPBDPGen)).sOvEndTime = tmPB1DP(ilVeh).sOvEndTime
                        ReDim Preserve tmPBDPGen(0 To UBound(tmPBDPGen) + 1) As PBDPGEN
                    End If
                Next ilVeh
                slLen(UBound(slLen)) = lbcPBLen.List(lbcPBLen.ListIndex)
                ReDim Preserve slLen(0 To UBound(slLen) + 1) As String
                '6/7/16: Replaced GoSub
                'GoSub mCreateLines
                mCreateLines ilSource, ilDays(), slLen(), ilDGSave()
                If imTerminate Then
                    mGenLines = False
                    Exit Function
                End If
                imLnBoxNo = -1
                mSetHdDate False, True
                mCntrTotal
                If ilInSource = 1 Then
                    ilRet = mPackage(2)
                End If
            End If
        Else

        End If
        mSetSchStatus smOrigStatus
        'mSetPriDemoResearch hmDrf, hmMnf, imStep1Index
        If (sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH) Then
            lacAudTotals.Visible = False
        Else
            If (tgSpf.sGUsePropSys = "Y") Then
                lacAudTotals.Visible = True
            Else
                lacAudTotals.Visible = False
            End If
        End If
        'Sort if no lines defined previously
        If (ilStartNoLn <= 0) And (UBound(tmLnPBDPGen) > LBound(tmLnPBDPGen)) Then
            mResortLines hmMnf
        End If
        'If UBound(tgClfCntr) <= vbcLines.LargeChange Then 'was <=
        '    vbcLines.Max = LBound(tgClfCntr)
        'Else
        '    vbcLines.Max = UBound(tgClfCntr) - vbcLines.LargeChange ' - 1
        'End If
        mSetLineScroll True, False
        imLnRowNo = ilSvRowNo
        imLnBoxNo = ilSvBoxNo
        Screen.MousePointer = vbDefault
    End If
    '6/8/05-removed
    'pbcClickFocus.SetFocus
    'Clear all instead of setfocus
    mAllSetShow 0
    plcPower.Visible = False
    plcLine.Visible = True
    pbcLine.Visible = True
    pbcLnTotal.Visible = True
    If laclnFrame.Visible Then
        pbcLineArrow.Visible = True
    Else
        pbcLineArrow.Visible = False
    End If
    vbcLines.Visible = True
    If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
        'If sgCntrScreen <> "Orders" Then
            If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
                cmcRates.Visible = False
            Else
                cmcRates.Visible = True
            End If
        'Else
        '    cmcRates.Visible = False
        'End If
    Else
        'cmcPower.Caption = "&Power Bar"
        'cmcPower.Visible = False
        cmcRates.Visible = False
    End If
    igFreezeState = ilFreezeState
    mGenLines = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mGetDate                        *
'*                                                     *
'*             Created:8/03/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move values from record to     *
'*                      working area                   *
'*                                                     *
'*******************************************************
Public Sub mGetDate(ilRetainZeroWks As Integer)
    Dim ilCff As Integer
    Dim ilPCff As Integer
    Dim ilPrev As Integer
    Dim ilUpperLimit As Integer
    Dim ilWkNo As Integer
    'Dim slStartDate As String
    Dim llStartDate As Long
    Dim llSplitStart As Long
    Dim llSplitEnd As Long
    'Dim slEndDate As String
    Dim llEndDate As Long
    Dim llDate As Long
    Dim llPrevEndDate As Long
    Dim slStr As String
    Dim ilDay As Integer
    Dim ilMonth As Integer
    Dim ilLoop As Integer
    Dim llDateAdj As Long
    Dim ilNoSpots As Integer
    Dim ilNoAirDays As Integer
    Dim ilNoDays As Integer
    Dim ilStartDay As Integer
    Dim ilEndDay As Integer
    Dim ilNoCff As Integer
    Dim ilDyWk As Integer
    Dim llWkPrice As Long
    Dim ilVefCode As Integer
    Dim ilVpfIndex As Integer
    Dim ilRetainWkWithoutSpots As Integer
    Dim ilRetainWk As Integer
    Dim ilPrevCff As Integer
    Dim slLastPriceType As String
    Dim slLastPrice As String
    Dim slLineType As String
    Dim llSpots As Long
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilDays(0 To 6) As Integer
    ReDim smAirShow(0 To 14, 0 To 1) As String
    ReDim smAirSave(0 To 13, 0 To 1) As String
    ReDim imAirSave(0 To 2, 0 To 1) As Integer
    
    If bmInCancel Then
        Exit Sub
    End If
    If imLnRowNo <= 0 Then
        Exit Sub
    End If
    slLineType = mGetLineType(imLnRowNo)
    imDGSave(2) = imLnSave(8, imLnRowNo)    'check each week setting ilDyWk
    ilDyWk = -1
    imDGSave(7) = imLnSave(31, imLnRowNo)
    imDGSave(3) = imLnSave(6, imLnRowNo)
    If imLnSave(4, imLnRowNo) = 1 Then  'Time override
        smDGSave(13) = smLnSave(2, imLnRowNo)
        smDGSave(14) = smLnSave(3, imLnRowNo)
        llOvStartTime = gTimeToLong(smDGSave(13), False)
        llOvEndTime = gTimeToLong(smDGSave(14), True)
    Else
        smDGSave(13) = ""
        smDGSave(14) = ""
        llOvStartTime = 0
        llOvEndTime = 0
    End If
    If Not ilRetainZeroWks Then
        ilRetainWkWithoutSpots = True
        ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    For ilLoop = 0 To 6 Step 1
                        If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                            ilRetainWkWithoutSpots = False
                            Exit Do
                        End If
                    Next ilLoop
                Else
                    If (tgCffCntr(ilCff).CffRec.iSpotsWk > 0) Or (tgCffCntr(ilCff).CffRec.iXSpotsWk > 0) Then
                        ilRetainWkWithoutSpots = False
                        Exit Do
                    End If
                End If

            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
        If Not ilRetainWkWithoutSpots Then
            'ilPrevCff = -1
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            ilPrevCff = ilCff
            Do While ilCff <> -1
                ilRetainWk = False
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        For ilLoop = 0 To 6 Step 1
                            If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                                ilRetainWk = True
                                Exit For
                            End If
                        Next ilLoop
                    Else
                        If (tgCffCntr(ilCff).CffRec.iSpotsWk > 0) Or (tgCffCntr(ilCff).CffRec.iXSpotsWk > 0) Then
                            ilRetainWk = True
                        End If
                    End If
                End If
                If ilRetainWk Then
                    ilPrevCff = ilCff
                    ilCff = tgCffCntr(ilCff).iNextCff
                Else
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = -1) Then
                        'If ilPrevCff = tgClfCntr(imLnRowNo - 1).iFirstCff Then
                        If ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff Then
                            tgClfCntr(imLnRowNo - 1).iFirstCff = tgCffCntr(ilCff).iNextCff
                            ilPrevCff = tgCffCntr(ilCff).iNextCff
                        Else
                            tgCffCntr(ilPrevCff).iNextCff = tgCffCntr(ilCff).iNextCff
                        End If
                        ilPrev = ilCff
                        tgCffCntr(ilCff).iStatus = -1   'New to not used
                        ilCff = tgCffCntr(ilCff).iNextCff
                        tgCffCntr(ilPrev).iNextCff = -1
                    Else
                        ilPrevCff = ilCff
                        tgCffCntr(ilCff).iStatus = 2    'Old to delete
                        ilCff = tgCffCntr(ilCff).iNextCff
                    End If

                End If
            Loop
        End If
    End If
    imMatchPattern = YES
    imDollarMatch = YES
    imAllWeeks = True
    ilUpperLimit = UBound(smAirShow, 2)
    ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
    ilWkNo = 1
    slLastPriceType = ""
    slLastPrice = ""
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate    'Week Start date
            'gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate    'Week Start date
            llStartDate = tgCffCntr(ilCff).lStartDate   'gDateValue(slStartDate)
            llEndDate = tgCffCntr(ilCff).lEndDate   'gDateValue(slEndDate)
            If ilWkNo > 1 Then
                Do While gWeekDayLong(llPrevEndDate) <> 6   '6=sunday
                    llPrevEndDate = llPrevEndDate + 1
                Loop
                'Generate Non-Air Weeks
                For llDate = llPrevEndDate + 7 To llStartDate Step 7    'Show non-air weeks
                    imAirSave(1, ilUpperLimit) = 1
                    slStr = "No"
                    'gSetShow pbcAirWk, slStr, tmAirCtrls(AIRWEEKINDEX)
                    'smAirShow(AIRWEEKINDEX, ilUpperLimit) = tmAirCtrls(AIRWEEKINDEX).sShow
                    slStr = Trim$(str$(ilWkNo))
                    'gSetShow pbcAirWk, slStr, tmAirCtrls(WEEKNOINDEX)
                    'smAirShow(WEEKNOINDEX, ilUpperLimit) = tmAirCtrls(WEEKNOINDEX).sShow
                    slStr = Format$(llDate - 6, "m/d/yy")
                    smAirSave(1, ilUpperLimit) = slStr
                    slStr = Format$(llDate, "m/d/yy")
                    smAirSave(2, ilUpperLimit) = slStr
                    slStr = ""
                    smAirSave(3, ilUpperLimit) = slStr
                    'gSetShow pbcAirWk, slStr, tmAirCtrls(SPOTPERWKINDEX)
                    'smAirShow(SPOTPERWKINDEX, ilUpperLimit) = tmAirCtrls(SPOTPERWKINDEX).sShow
                    For ilDay = 0 To 6 Step 1
                        slStr = ""
                        smAirSave(4 + ilDay, ilUpperLimit) = slStr
                        'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                        'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
                    Next ilDay
                    smAirSave(13, ilUpperLimit) = "N"
                    ilWkNo = ilWkNo + 1
                    ilUpperLimit = ilUpperLimit + 1
                    ReDim Preserve smAirShow(0 To 14, 0 To ilUpperLimit) As String
                    ReDim Preserve smAirSave(0 To 13, 0 To ilUpperLimit) As String
                    ReDim Preserve imAirSave(0 To 2, 0 To ilUpperLimit) As Integer
                Next llDate
            End If
            For llDate = llStartDate To llEndDate Step 7
                imAirSave(1, ilUpperLimit) = 0
                slStr = "Yes"
                'gSetShow pbcAirWk, slStr, tmAirCtrls(AIRWEEKINDEX)
                'smAirShow(AIRWEEKINDEX, ilUpperLimit) = tmAirCtrls(AIRWEEKINDEX).sShow
                slStr = Trim$(str$(ilWkNo))
                'gSetShow pbcAirWk, slStr, tmAirCtrls(WEEKNOINDEX)
                'smAirShow(WEEKNOINDEX, ilUpperLimit) = tmAirCtrls(WEEKNOINDEX).sShow
                slStr = Format$(llDate, "m/d/yy")
                smAirSave(1, ilUpperLimit) = slStr
                ilStartDay = gWeekDayStr(smAirSave(1, ilUpperLimit))
                If llDate + 6 - ilStartDay <= llEndDate Then
                    slStr = Format$(llDate + 6 - ilStartDay, "m/d/yy")
                Else
                    slStr = Format$(llEndDate, "m/d/yy")
                End If
                smAirSave(2, ilUpperLimit) = slStr
                ilEndDay = gWeekDayStr(smAirSave(2, ilUpperLimit))
                'Adjust start and end days to bracket defined days
                For ilDay = ilStartDay To ilEndDay Step 1
                    If tgCffCntr(ilCff).CffRec.iDay(ilDay) <> 0 Then
                        Exit For
                    End If
                    ilStartDay = ilStartDay + 1
                Next ilDay
                For ilDay = ilEndDay To ilStartDay Step -1
                    If tgCffCntr(ilCff).CffRec.iDay(ilDay) <> 0 Then
                        Exit For
                    End If
                    ilEndDay = ilEndDay - 1
                Next ilDay
                For ilDay = 0 To 6 Step 1   'Initialize days
                    slStr = ""
                    smAirSave(4 + ilDay, ilUpperLimit) = slStr
                    'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                    'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
                Next ilDay
                If (tgCffCntr(ilCff).CffRec.iSpotsWk > 0) Or (tgCffCntr(ilCff).CffRec.iXSpotsWk > 0) Or (tgCffCntr(ilCff).CffRec.sDyWk = "W") Or (tgClfCntr(imLnRowNo - 1).iGame) Then
                    If tgClfCntr(imLnRowNo - 1).iGame Then
                        slStr = ""
                    Else
                        slStr = Trim$(str$(tgCffCntr(ilCff).CffRec.iSpotsWk))
                        imAirSave(2, ilUpperLimit) = 1
                    End If
                    smAirSave(3, ilUpperLimit) = slStr
                    'gSetShow pbcAirWk, slStr, tmAirCtrls(SPOTPERWKINDEX)
                    'smAirShow(SPOTPERWKINDEX, ilUpperLimit) = tmAirCtrls(SPOTPERWKINDEX).sShow
                    For ilDay = ilStartDay To ilEndDay Step 1
                        If tgCffCntr(ilCff).CffRec.iDay(ilDay) <> 0 Then
                            smAirSave(4 + ilDay, ilUpperLimit) = "Y"
                            slStr = "4"
                            'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                            'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
                        Else
                            smAirSave(4 + ilDay, ilUpperLimit) = "N"
                            slStr = "  "
                            'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                            'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
                        End If
                    Next ilDay
                Else
                    slStr = ""
                    smAirSave(3, ilUpperLimit) = slStr
                    imAirSave(2, ilUpperLimit) = 0
                    'gSetShow pbcAirWk, slStr, tmAirCtrls(SPOTPERWKINDEX)
                    'smAirShow(SPOTPERWKINDEX, ilUpperLimit) = tmAirCtrls(SPOTPERWKINDEX).sShow
                    For ilDay = ilStartDay To ilEndDay Step 1
                        slStr = Trim$(str$(tgCffCntr(ilCff).CffRec.iDay(ilDay)))
                        smAirSave(4 + ilDay, ilUpperLimit) = slStr
                        'gSetShow pbcAirWk, slStr, tmAirCtrls(DAILYSPOTSINDEX + ilDay)
                        'smAirShow(DAILYSPOTSINDEX + ilDay, ilUpperLimit) = tmAirCtrls(DAILYSPOTSINDEX + ilDay).sShow
                    Next ilDay
                End If
                smAirSave(13, ilUpperLimit) = "N"
                'Test if same pattern is in all week- used later to set pattern on flight screen
                If (ilUpperLimit > 1) And (imMatchPattern = YES) Then
                    If smAirSave(3, 1) <> smAirSave(3, ilUpperLimit) Then
                        imMatchPattern = NO
                    Else
                        For ilDay = 0 To 6 Step 1
                            If smAirSave(4 + ilDay, 1) <> smAirSave(4 + ilDay, ilUpperLimit) Then
                                imMatchPattern = NO
                                Exit For
                            End If
                        Next ilDay
                    End If
                End If
                If ilDyWk = -1 Then
                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        ilDyWk = 1
                    Else
                        ilDyWk = 2
                    End If
                Else
                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        If ilDyWk <> 1 Then
                            ilDyWk = 3
                        End If
                    Else
                        If ilDyWk <> 2 Then
                            ilDyWk = 3
                        End If
                    End If
                End If
                'Get Price
                'Get proposal price here incase of * as price as smAirSave(12,..) will be set
                smAirSave(12, ilUpperLimit) = gLongToStrDec(tgCffCntr(ilCff).CffRec.lPropPrice, 0)  '2)
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "T"    'True
                        'gPDNToStr tgCffCntr(ilCff).CffRec.sActPrice, 2, smLnSave(17, ilLoop + 1)
                        'smAirSave(11, ilUpperLimit) = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                        If slLineType <> "E" Then
                            smAirSave(11, ilUpperLimit) = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                        Else
                            smAirSave(11, ilUpperLimit) = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                        End If
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "N"    'No Charge
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(1)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "M"    'MG Line
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(2)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "B"    'Bonus
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(3)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "S"    'Spinoff
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(4)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "P"    'Package
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(5)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "R"    'Recapturable
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(6)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "A"    'ADU
                        smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(7)
                        slLastPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                        slLastPrice = smAirSave(11, ilUpperLimit)
                    Case "*"    'Compute price from rate card- set in duplicate flights (CDupl) and mAddWeek
                        'tgCffCntr(ilCff).CffRec.sPriceType = "T"   'Set at end of flight area
                        If (sgCntrScreen = "Orders") Then
                            'Find line with a price and use it
                            If slLastPriceType <> "" Then
                                smAirSave(11, ilUpperLimit) = slLastPrice
                            Else
                                'Price not found in past weeks, look into future weeks
                                smAirSave(11, ilUpperLimit) = ""
                                ilPCff = tgCffCntr(ilCff).iNextCff
                                Do While ilPCff <> -1
                                    Select Case tgCffCntr(ilPCff).CffRec.sPriceType
                                        Case "T"    'True
                                            'gPDNToStr tgCffCntr(ilCff).CffRec.sActPrice, 2, smLnSave(17, ilLoop + 1)
                                            If slLineType <> "E" Then
                                                smAirSave(11, ilUpperLimit) = gLongToStrDec(tgCffCntr(ilPCff).CffRec.lActPrice, 2)
                                            Else
                                                smAirSave(11, ilUpperLimit) = gLongToStrDec(tgCffCntr(ilPCff).CffRec.lActPrice, 2)
                                            End If
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "N"    'No Charge
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(1)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "M"    'MG Line
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(2)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "B"    'Bonus
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(3)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "S"    'Spinoff
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(4)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "P"    'Package
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(5)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "R"    'Recapturable
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(6)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                        Case "A"    'ADU
                                            smAirSave(11, ilUpperLimit) = lbcPriceType(1).List(7)
                                            slLastPriceType = tgCffCntr(ilPCff).CffRec.sPriceType
                                            slLastPrice = smAirSave(11, ilUpperLimit)
                                            Exit Do
                                    End Select
                                    ilPCff = tgCffCntr(ilPCff).iNextCff
                                Loop
                            End If
                            If slLastPriceType = "" Then
                                smAirSave(11, ilUpperLimit) = ".00"
                            End If
                            smAirSave(12, ilUpperLimit) = ""
                        Else
                            mCVehOptIndex imLnRowNo, ilVefCode, ilVpfIndex, imTerminate
                            llWkPrice = mComputeRCWkPrice(tmRcf.iCode, imLnSave(1, imLnRowNo), smAirSave(1, ilUpperLimit), ilVefCode, imLnRowNo)
                            If llWkPrice > 0 Then
                                If imAirSave(2, ilUpperLimit) = 0 Then
                                    llSpots = 0
                                    For ilDay = 4 To 10 Step 1
                                        llSpots = llSpots + Val(smAirSave(ilDay, ilUpperLimit))
                                        If Val(smAirSave(ilDay, ilUpperLimit)) > 0 Then
                                            ilDays(ilDay - 4) = True
                                        Else
                                            ilDays(ilDay - 4) = False
                                        End If
                                    Next ilDay
                                Else
                                    llSpots = Val(smAirSave(3, ilUpperLimit))
                                    For ilDay = 4 To 10 Step 1
                                        If smAirSave(ilDay, ilUpperLimit) = "Y" Then
                                            ilDays(ilDay - 4) = True
                                        Else
                                            ilDays(ilDay - 4) = False
                                        End If
                                    Next ilDay
                                End If
                                If smDGSave(13) <> "" Then
                                    llOvStartTime = gTimeToLong(smDGSave(13), False)
                                    llOvEndTime = gTimeToLong(smDGSave(14), True)
                                Else
                                    llOvStartTime = 0
                                    llOvEndTime = 0
                                End If
                                slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, imLnRowNo, imDGSave(), llOvStartTime, llOvEndTime, Val(smLnSave(16, imLnRowNo)), llSpots, ilDays(), imLnSave(1, imLnRowNo))
                                smAirSave(11, ilUpperLimit) = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                            Else
                                smAirSave(11, ilUpperLimit) = ""
                            End If
                            smAirSave(12, ilUpperLimit) = gRoundStr(smAirSave(11, ilUpperLimit), "1.00", 0) 'smAirSave(11, ilUpperLimit)
                        End If
                    Case Else
                        smAirSave(11, ilUpperLimit) = ""
                End Select
                If smAirSave(11, ilUpperLimit) <> "" Then
                    If (Left$(smAirSave(11, ilUpperLimit), 1) < "0") Or (Left$(smAirSave(11, ilUpperLimit), 1) > "9") Then
                        'gSetShow pbcAirWk, smAirSave(11, ilUpperLimit), tmAirCtrls(WKPRICEINDEX)
                        'smAirShow(WKPRICEINDEX, ilUpperLimit) = tmAirCtrls(WKPRICEINDEX).sShow
                    Else
                        gFormatStr smAirSave(11, ilUpperLimit), FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                        'gSetShow pbcAirWk, slStr, tmAirCtrls(WKPRICEINDEX)
                        'smAirShow(WKPRICEINDEX, ilUpperLimit) = tmAirCtrls(WKPRICEINDEX).sShow
                    End If
                Else
                    'gSetShow pbcAirWk, "", tmAirCtrls(WKPRICEINDEX)
                    'smAirShow(WKPRICEINDEX, ilUpperLimit) = tmAirCtrls(WKPRICEINDEX).sShow
                End If
                If (ilUpperLimit > 1) And (imDollarMatch = YES) Then
                    If smAirSave(11, 1) <> smAirSave(11, ilUpperLimit) Then
                        imDollarMatch = False
                    End If
                End If

                ilWkNo = ilWkNo + 1
                ilUpperLimit = ilUpperLimit + 1
                ReDim Preserve smAirShow(0 To 14, 0 To ilUpperLimit) As String
                ReDim Preserve smAirSave(0 To 13, 0 To ilUpperLimit) As String
                ReDim Preserve imAirSave(0 To 2, 0 To ilUpperLimit) As Integer
            Next llDate
            llPrevEndDate = llEndDate
        End If
        If tgCffCntr(ilCff).CffRec.sPriceType = "*" Then
            tgCffCntr(ilCff).CffRec.sPriceType = "T"
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
    ilNoCff = 0
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            ilNoCff = ilNoCff + 1
            If ilNoCff = 1 Then
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "T"
                        imLnSave(7, imLnRowNo) = 0
                        smLnSave(17, imLnRowNo) = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                    Case "N"
                        imLnSave(7, imLnRowNo) = 1
                        smLnSave(17, imLnRowNo) = "N/C"
                    Case "M"
                        imLnSave(7, imLnRowNo) = 2
                        smLnSave(17, imLnRowNo) = "MG"
                    Case "B"
                        imLnSave(7, imLnRowNo) = 3
                        smLnSave(17, imLnRowNo) = "Bonus"
                    Case "S"
                        imLnSave(7, imLnRowNo) = 4
                        smLnSave(17, imLnRowNo) = "Spinoff"
                    Case "P"
                        imLnSave(7, imLnRowNo) = 5
                        smLnSave(17, imLnRowNo) = "Package"
                    Case "R"
                        imLnSave(7, imLnRowNo) = 6
                        smLnSave(17, imLnRowNo) = "Recapturable"
                    Case "A"
                        imLnSave(7, imLnRowNo) = 7
                        smLnSave(17, imLnRowNo) = "ADU"
                End Select
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    If ilNoCff <= 1 Then
        imLnSave(9, imLnRowNo) = True
    Else
        imLnSave(9, imLnRowNo) = False
    End If
    If ilDyWk = 1 Then
        imDGSave(2) = 0
    ElseIf ilDyWk = 2 Then
        imDGSave(2) = 1
    End If
    'Determine if spots on first week must be split with last week
    'Adjust dates
    'For ilLoop = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
    For ilLoop = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
        mAdjDates ilLoop
        If imAirSave(1, ilLoop) = 0 Then    'Air Week
            'If smAirSave(3, ilLoop) = "" Then
            If imAirSave(2, ilLoop) = 0 Then
                'imAirSave(2, ilLoop) = 0
                If imDGSave(2) > 1 Then
                    slStr = "Daily by %"
                Else
                    slStr = "Daily"
                End If
            Else
                'imAirSave(2, ilLoop) = 1
                If imDGSave(2) > 1 Then
                    slStr = "Weekly by %"
                Else
                    slStr = "Weekly"
                End If
            End If
        Else
            'Note: First and last week must be airing weeks- therefore set Mon-Sun
            'Non-Air Week: Initialize values
            imAirSave(2, ilLoop) = imDGSave(2)
            If (imDGSave(2) = 0) Or (imDGSave(2) = 2) Then
                smAirSave(3, ilLoop) = ""
                For ilDay = 0 To 6 Step 1
                    smAirSave(4 + ilDay, ilLoop) = smDGSave(3 + ilDay)
                Next ilDay
            ElseIf (imDGSave(2) = 1) Or (imDGSave(2) = 3) Then
                smAirSave(3, ilLoop) = smDGSave(2)
                For ilDay = 0 To 6 Step 1
                    If smDGSave(3 + ilDay) = "Y" Then
                        smAirSave(4 + ilDay, ilLoop) = "Y"
                    Else
                        smAirSave(4 + ilDay, ilLoop) = "N"
                    End If
                Next ilDay
            Else
                smAirSave(3, ilLoop) = ""
            End If
            slStr = ""
        End If
        'gSetShow pbcAirWk, slStr, tmAirCtrls(DWINDEX)
        'smAirShow(DWINDEX, ilLoop) = tmAirCtrls(DWINDEX).sShow
    Next ilLoop
    'mFlightTotals
    'vbcAirWk.Min = imLB1Or2 'LBound(smAirShow, 2)
    'If UBound(smAirShow, 2) - 2 <= vbcAirWk.LargeChange Then
    '    vbcAirWk.Max = imLB1Or2 'LBound(smAirShow, 2)
    'Else
    '    vbcAirWk.Max = UBound(smAirShow, 2) - 1 - vbcAirWk.LargeChange
    'End If
    'vbcAirWk.Value = vbcAirWk.Min
    If ilUpperLimit > 1 Then
        smLnSave(14, imLnRowNo) = smAirSave(1, 1)
        smLnSave(15, imLnRowNo) = smAirSave(2, ilUpperLimit - 1)
    Else
        smLnSave(14, imLnRowNo) = ""
        smLnSave(15, imLnRowNo) = ""
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mDirection                      *
'*                                                     *
'*             Created:9/10/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move to box indicated by       *
'*                      user direction                 *
'*                                                     *
'*******************************************************
Private Sub mHdDirection(ilMoveDir As Integer)
'
'   mHdDirection ilMove
'   Where:
'       ilMove (I)- 0=Up; 1= down; 2= left; 3= right
'
    Dim flPosX As Single
    Dim flPosY As Single
    Dim ilFound As Integer
    Dim ilBox As Integer
    Dim flSmallW As Single
    ilFound = -1
    mSetShow imHdBoxNo
    flSmallW = -1
    'For ilBox = LBound(tmHdCtrls) To UBound(tmHdCtrls) Step 1
    For ilBox = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        If flSmallW < 0 Then
            flSmallW = tmHdCtrls(ilBox).fBoxW
        Else
            If tmHdCtrls(ilBox).fBoxW < flSmallW Then
                flSmallW = tmHdCtrls(ilBox).fBoxW
            End If
        End If
    Next ilBox
    flPosX = tmHdCtrls(imHdBoxNo).fBoxX + flSmallW / 8
    flPosY = tmHdCtrls(imHdBoxNo).fBoxY + fgBoxStH / 8
    Do
        Select Case ilMoveDir
            Case KEYUP  'Up
                flPosY = flPosY - fgBoxStH
                If flPosY < tmHdCtrls(TYPEINDEX).fBoxY Then
                    flPosY = tmHdCtrls(BILLCYCLEINDEX).fBoxY + fgBoxStH / 8
                End If
            Case KeyDown  'Down
                flPosY = flPosY + fgBoxStH
                If flPosY > tmHdCtrls(BILLCYCLEINDEX).fBoxY + fgBoxStH Then
                    flPosY = tmHdCtrls(TYPEINDEX).fBoxY + fgBoxStH / 8
                End If
            Case KEYLEFT  'Left
                flPosX = flPosX - flSmallW
                If flPosX < tmHdCtrls(BILLCYCLEINDEX).fBoxX Then
                    'flPosX = tmHdCtrls(SHAREINDEX).fBoxX + flSmallW / 8
                End If
            Case KEYRIGHT  'Right
                flPosX = flPosX + flSmallW
                If flPosX > tmHdCtrls(PRODUCTINDEX).fBoxX + tmHdCtrls(PRODUCTINDEX).fBoxW Then
                    flPosX = tmHdCtrls(BILLCYCLEINDEX).fBoxX + flSmallW / 8
                End If
        End Select
        'For ilBox = LBound(tmHdCtrls) To UBound(tmHdCtrls) Step 1
        For ilBox = imLBCTCtrls To UBound(tmHdCtrls) Step 1
            If (flPosX >= tmHdCtrls(ilBox).fBoxX) And (flPosX <= tmHdCtrls(ilBox).fBoxX + tmHdCtrls(ilBox).fBoxW) Then
                If (flPosY >= tmHdCtrls(ilBox).fBoxY) And (flPosY <= tmHdCtrls(ilBox).fBoxY + tmHdCtrls(ilBox).fBoxH) Then
                    If ilBox <> imHdBoxNo Then
                        ilFound = ilBox
                    End If
                    Exit For
                End If
            End If
        Next ilBox
        If ilFound Then
            If (ilBox = DATEINDEX) Or (ilBox = REVNOINDEX) Then
                ilBox = CNTRNOINDEX
            End If
            If (ilBox = PRODTAGINDEX) And (lbcInvGroup.ListIndex <= 0) Then
                Select Case ilMoveDir
                    Case KEYUP  'Up
                        ilBox = INVGROUPINDEX
                    Case KeyDown  'Down
                        ilBox = INVGROUPINDEX
                    Case KEYLEFT  'Left
                        ilBox = INVGROUPINDEX
                    Case KEYRIGHT  'Right
                        'ilBox = COMMENTINDEX
                End Select
            End If
        End If
    Loop Until ilFound >= 0
    imHdBoxNo = ilBox
    mEnableBox imHdBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitActive                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize modular             *
'*                                                     *
'*******************************************************
Private Sub mInitActive()
'
'   mInit
'   Where:
'
    Dim llDate As Long
    Dim llTime As Long
    Dim slNowDate As String
    Dim slNowTime As String
    Dim llNowDate As Long
    Dim llNowTime As Long
    ReDim ilTime(0 To 1) As Integer
    Dim ilLoop As Integer
    Dim blResearchHidden As Boolean
    Dim blProtectionHidden As Boolean
    Dim blAvailHidden As Boolean
    
    Screen.MousePointer = vbHourglass
    smSpfUsingFeatures6 = Chr(Asc(tgSpf.sUsingFeatures6) And (&H7F))    'Remove INVEXPORTPARAMETERS
    If sgCntrScreen = "Orders" Then
        'Set task to be done
        If imUpdateAllowed Then
        '10959 added if statement
            If tgUrf(0).sContractCreation <> "N" Then
                '8723 counts on 'Create a New Order..." to block building new.  It also sets to list #2 if 'new chosen'
                lbcStep(0).AddItem "Create New Order from Scratch"
                imStep1Map(lbcStep(0).ListCount - 1) = 0
                lbcStep(0).AddItem "Create a New Order by Modeling"
                imStep1Map(lbcStep(0).ListCount - 1) = 1
            End If
            If tgUrf(0).sReviseCntr <> "N" Then
                lbcStep(0).AddItem "Revise an Existing Hold or Order"
                imStep1Map(lbcStep(0).ListCount - 1) = 2
            End If
            If tgUrf(0).sHoldToOrder = "Y" Then
                lbcStep(0).AddItem "Change Hold to Order"
                imStep1Map(lbcStep(0).ListCount - 1) = 3
            End If
        End If
        lbcStep(0).AddItem "View"
        imStep1Map(lbcStep(0).ListCount - 1) = 4
            plcLine.Visible = True
            pbcLine.Visible = True
            pbcLnTotal.Visible = True
            vbcLines.Visible = True
            plcPower.Visible = False
        cmcProj.Visible = False
        cmcRates.Visible = False
        cmcHold.Enabled = False
        cmcDemoBar.Visible = False
    Else
        'Set task to be done
        If imUpdateAllowed Then
        '10959 added if statement
            If tgUrf(0).sContractCreation <> "N" Then
                lbcStep(0).AddItem "Create Proposal from Scratch"
                imStep1Map(lbcStep(0).ListCount - 1) = 0
                lbcStep(0).AddItem "Create a Proposal by Modeling"
                imStep1Map(lbcStep(0).ListCount - 1) = 1
            End If
            lbcStep(0).AddItem "Change an Existing Proposal"
            imStep1Map(lbcStep(0).ListCount - 1) = 2
                lbcStep(0).AddItem "Create New Version of Existing Proposal"
                imStep1Map(lbcStep(0).ListCount - 1) = 3
            If tgUrf(0).sReviseCntr <> "N" Then
                lbcStep(0).AddItem "Revise an Existing Hold or Order"
                imStep1Map(lbcStep(0).ListCount - 1) = 4 '5
            End If
            If tgUrf(0).sHoldToOrder = "Y" Then
                lbcStep(0).AddItem "Change Hold to Order"
                imStep1Map(lbcStep(0).ListCount - 1) = 5 '7
            End If
        End If
        lbcStep(0).AddItem "View"
        imStep1Map(lbcStep(0).ListCount - 1) = 6 '8
            plcPower.Visible = False
            'cmcPower.Visible = False
            cmcRates.Visible = False
            plcLine.Visible = True
            pbcLine.Visible = True
            pbcLnTotal.Visible = True
            vbcLines.Visible = True
        cmcHold.Visible = False
        If (Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH Then
            cmcDemoBar.Visible = False
        Else
            cmcDemoBar.Visible = True
            cmcDemoBar.Enabled = False
        End If
        'If (tgUrf(0).iSlfCode > 0) Or (tgUrf(0).iRemoteUserID > 0) Then
        If (Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION Then
            cmcProj.Enabled = False
        Else
            If ((tgUrf(0).iSlfCode > 0) Or (tgUrf(0).iRemoteUserID > 0)) Or ((tgUrf(0).sWorkToHold <> "Y") And (tgUrf(0).sWorkToOrder <> "Y") And (tgUrf(0).sCompToHold <> "Y") And (tgUrf(0).sCompToOrder <> "Y") And (tgUrf(0).sIncompToHold <> "Y") And (tgUrf(0).sIncompToOrder <> "Y")) Then
                slNowDate = Format$(gNow(), "m/d/yy")
                slNowTime = Format$(gNow(), "h:mm:ssAM/PM")
                gUnpackDateLong tgSpf.iNROBlockDate(0), tgSpf.iNROBlockDate(1), llDate
                llNowDate = gDateValue(slNowDate)
                If llNowDate > llDate Then
                    cmcProj.Enabled = False
                Else
                    gUnpackTimeLong tgSpf.iNROBlockTime(0), tgSpf.iNROBlockTime(1), False, llTime
                    gPackTime slNowTime, ilTime(0), ilTime(1)
                    gUnpackTimeLong ilTime(0), ilTime(1), False, llNowTime
                    If (llNowDate = llDate) And (llNowTime >= llTime) Then
                        cmcProj.Enabled = False
                    End If
                End If
            End If
        End If
    End If
    'If gAnyOrderedCntr() Then
    '    imcOrder.Visible = True
    'Else
    '    imcOrder.Visible = False
    'End If
    
    ''If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
    'If ((Asc(tgSaf(0).sFeatures6) And ADVANCEAVAILS) = ADVANCEAVAILS) And (tgUrf(0).sAdvanceAvails = "I") Then
    blResearchHidden = False
    blProtectionHidden = False
    blAvailHidden = False
    If (tgSaf(0).sAdvanceAvail = "Y") And (tgUrf(0).sAdvanceAvails = "I") Then
       '10843 remove dead code
'        If tgSpf.sCLnStdQt = "Y" Then
'            tscLine.Tabs.Remove TABRESEARCH  '10
'            tscLine.Tabs.Remove TABPROTECTION  '9
'            tscLine.Tabs.Remove TABAVAIL   '8
'            blResearchHidden = True
'            blProtectionHidden = True
'            blAvailHidden = True
'        Else
            If sgCntrScreen = "Orders" Then
                tscLine.Tabs.Remove TABRESEARCH  '10
                blResearchHidden = True
            End If
     '   End If
    Else
        tscLine.Tabs.Remove TABRESEARCH  '10
        tscLine.Tabs.Remove TABPROTECTION  '9
        tscLine.Tabs.Remove TABAVAIL  '8
        blResearchHidden = True
        blProtectionHidden = True
        blAvailHidden = True
    End If
    If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
        For ilLoop = 0 To UBound(imTabMap) - 1 Step 1
            imTabMap(ilLoop + 1) = ilLoop + 1
        Next ilLoop
        If blAvailHidden Then
            imTabMap(TABAVAIL) = -1
        End If
        If blProtectionHidden Then
            imTabMap(TABPROTECTION) = -1
        End If
        If blResearchHidden Then
            imTabMap(TABRESEARCH) = -1
        End If
   Else
        'Test site to see if Podcast is set on
        'If so, then test if medium code defined for the different podcast types
        'For now, turn off Podcast by Count and CPM
        imTabMap(TABMULTIMEDIA) = 1
        imTabMap(TABNTR) = 2
        imTabMap(TABAIRTIME) = 3
        'tscLine.Tabs.Remove TABPODCASTCPM
        'imTabMap(TABPODCASTCPM) = -1
        imTabMap(TABPODCASTCPM) = 4
        imTabMap(TABMERCH) = 5  '4  '5
        imTabMap(TABPROMO) = 6  '5  '6
        imTabMap(TABINSTALL) = 7    '6    '7
        If blAvailHidden Then
            imTabMap(TABAVAIL) = -1
        Else
            imTabMap(TABAVAIL) = 8  '7  '8
        End If
        If blProtectionHidden Then
            imTabMap(TABPROTECTION) = -1
        Else
            imTabMap(TABPROTECTION) = 9 '8 '9
        End If
        If blResearchHidden Then
            imTabMap(TABRESEARCH) = -1
        Else
            imTabMap(TABRESEARCH) = 10  '9   '10
        End If
    End If
    mSetTabColors True
    If (tgSpf.sCPkOrdered <> "Y") And (tgSpf.sCPkAired <> "Y") And (tgSpf.sCPkEqual <> "Y") Then
        cmcPackage(0).Enabled = False
    End If
    If tgSpf.sUseProdSptScr = "P" Then  'Short Title
        cmcShtTitle.Visible = True
    Else
        cmcShtTitle.Visible = False
    End If
    'If (sgCntrScreen <> "Orders") And ((igAlertCntrStatus = 1) Or (igAlertCntrStatus = 2) Or (igAlertCntrStatus = 3)) Then
    'TTP 10937 - Contract Dashboard: new screen to show contract header information
    If cmcMkt.Caption = "&Alert" Or cmcMkt.Caption = "&Dash" Then
        If igAlertCntrStatus = 1 Then   'Revise proposal
            lbcStep(0).ListIndex = 2
        ElseIf igAlertCntrStatus = 2 Then   'Revise Hold or Order
            If lbcStep(0).List(4) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 4
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
        ElseIf igAlertCntrStatus = 3 Then   'View
            lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
        ElseIf (igAlertCntrStatus = 4) Or (igAlertCntrStatus = 6) Then   'Revise Not Scheduled
            If lbcStep(0).List(2) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 2
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
        ElseIf (igAlertCntrStatus = 5) Or (igAlertCntrStatus = 7) Then   'View
            lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
        End If
        'TTP 10937 - Contract Dashboard: new screen to show contract header information
        If igDashboardCntrStatus = 1 Then   'Revise proposal
            lbcStep(0).ListIndex = 2
        ElseIf igDashboardCntrStatus = 2 Then   'Revise Hold or Order
            If lbcStep(0).List(4) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 4
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
        ElseIf igDashboardCntrStatus = 3 Then   'View
            lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
        ElseIf (igDashboardCntrStatus = 4) Or (igDashboardCntrStatus = 6) Then   'Revise Not Scheduled
            If lbcStep(0).List(2) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 2
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
        ElseIf (igDashboardCntrStatus = 5) Or (igDashboardCntrStatus = 7) Then   'View
            lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
        End If
        
        imStepBoxNo = STEP1INDEX
        edcStepDropDown_Change
        mStepSetShow imStepBoxNo
        DoEvents
        imStepBoxNo = STEP2INDEX
        mStep2IndexPop
        lbcStep(1).ListIndex = 0    'by number
        edcStepDropDown_Change
        mStepSetShow imStepBoxNo
        DoEvents
        imStepBoxNo = STEP3INDEX
        edcStepDropDown.Text = lgAlertCntrNo
        mStepSetShow imStepBoxNo
        pbcSelect_Paint
        '6 and 7 from spot screen
        If (igAlertCntrStatus <> 6) And (igAlertCntrStatus <> 7) Then
            imReturnToAlerts = True
        End If
        'TTP 10937 - Contract Dashboard: new screen to show contract header information
        If igDashboardCntrStatus > 0 Then
            imReturnToAlerts = False
            imReturnToDashboard = True
        End If
    End If
    
    If (tgUrf(0).sSportPropOnly = "Y") Or (igSportsSystem = 1) Then
        'Multi-Media
        'Set tscLine.SelectedItem = tscLine.Tabs.Item(imTabMap(1))
        Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABMULTIMEDIA))
    Else
        mActiveLnTab True
    End If
    '8723
    mInitFileMaker
    Screen.MousePointer = vbDefault
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitBox                        *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set mouse and control locations*
'*                                                     *
'*******************************************************
Public Sub mInitBox()
'
'   mInitBox
'   Where:
'
    Dim flTextHeight As Single  'Standard text height
    Dim ilLoop As Integer
    Dim llMax As Long
    Dim llAdjTop As Long
    Dim ilAdj As Integer
    Dim llRow As Long

    flTextHeight = pbcHeader.TextHeight("1") - 35
    'Position panel and picture areas with panel
    plcSelect.Move 885, 30, pbcSelect.Width + fgPanelAdj, pbcSelect.height + fgPanelAdj
    pbcSelect.Move plcSelect.Left + fgBevelX, plcSelect.Top + fgBevelY
    imcShare(0).Move 8475, 15
    imcShare(1).Move 8985, 45
    If sgCntrScreen = "Orders" Then
        '7958
        'imcShare(1).Visible = False
        imcShare(1).Enabled = True
        'end test
        plcScreen.BackColor = LIGHTGREEN
        BackColor = LIGHTGREEN
        pbcLineArrow.BackColor = LIGHTGREEN
        pbcLineArrow.Picture = IconTraf!imcArrow.Picture
    Else
        imcShare(1).Enabled = True
        plcScreen.BackColor = CYAN
        BackColor = CYAN
        pbcLineArrow.BackColor = CYAN
        pbcLineArrow.Picture = IconTraf!imcArrow.Picture
    End If
    'Task to be Done
    gSetCtrl tmStepCtrls(STEP1INDEX), 30, 30, 3735, fgBoxStH
    'Advertiser
    gSetCtrl tmStepCtrls(STEP2INDEX), 3780, tmStepCtrls(STEP1INDEX).fBoxY, 2160, fgBoxStH
    tmStepCtrls(STEP2INDEX).iReq = False
    'Number
    gSetCtrl tmStepCtrls(STEP3INDEX), 5955, tmStepCtrls(STEP1INDEX).fBoxY, 1485, fgBoxStH
    tmStepCtrls(STEP3INDEX).iReq = False

    'Position panel and picture areas with panel
    plcHeader.Move 135, 510, pbcHeader.Width + fgPanelAdj, pbcHeader.height + fgPanelAdj
    pbcHeader.Move plcHeader.Left + fgBevelX, plcHeader.Top + fgBevelY
    'pbcKey.Move plcHeader.Left, plcHeader.Top
    lbcComment(2).Move plcHeader.Left, plcHeader.Top
    'Status
    gSetCtrl tmHdCtrls(STATUSINDEX), 3030, 30, 1365, fgBoxStH
    'Potential
    gSetCtrl tmHdCtrls(POTINDEX), 4410, tmHdCtrls(STATUSINDEX).fBoxY, 345, fgBoxStH
    tmHdCtrls(POTINDEX).iReq = False
    'Type
    gSetCtrl tmHdCtrls(TYPEINDEX), 4770, tmHdCtrls(STATUSINDEX).fBoxY, 1245, fgBoxStH
    'Number
    gSetCtrl tmHdCtrls(CNTRNOINDEX), 6030, tmHdCtrls(STATUSINDEX).fBoxY, 1110, fgBoxStH
    tmHdCtrls(CNTRNOINDEX).iReq = False 'Set at save
        'gMoveCtrl pbcHeader, plcNumber, tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(CNTRNOINDEX).fBoxY
        'pbcNumber.Move plcNumber.Left + 255, plcNumber.Top + 285
        gSetCtrl tmNoCtrls(NOPROPINDEX), 30, 30, 1500, fgBoxStH
        tmNoCtrls(NOPROPINDEX).iReq = False 'Set at save
        gSetCtrl tmNoCtrls(NOESTINDEX), 1545, tmNoCtrls(NOPROPINDEX).fBoxY, 1500, fgBoxStH
        tmNoCtrls(NOESTINDEX).iReq = False
        gSetCtrl tmNoCtrls(NORESVADVTINDEX), 30, tmNoCtrls(NOPROPINDEX).fBoxY + fgStDeltaY, 1500, fgBoxStH
        tmNoCtrls(NORESVADVTINDEX).iReq = False  'If changed to True, test tgSpf.sAEDIC and if not using leave as false
        gSetCtrl tmNoCtrls(NORESVORDERINDEX), 1545, tmNoCtrls(NORESVADVTINDEX).fBoxY, 1500, fgBoxStH
        tmNoCtrls(NORESVORDERINDEX).iReq = False  'If changed to True, test tgSpf.sAEDII and if not using leave as false
        gSetCtrl tmNoCtrls(NOEDICLIENTCODEINDEX), 30, tmNoCtrls(NORESVADVTINDEX).fBoxY + fgStDeltaY, 1500, fgBoxStH
        tmNoCtrls(NOEDICLIENTCODEINDEX).iReq = False  'If changed to True, test tgSpf.sAEDIC and if not using leave as false
        gSetCtrl tmNoCtrls(NOEDIPRODUCTCODEINDEX), 1545, tmNoCtrls(NOEDICLIENTCODEINDEX).fBoxY, 1500, fgBoxStH
        tmNoCtrls(NOEDIPRODUCTCODEINDEX).iReq = False  'If changed to True, test tgSpf.sAEDII and if not using leave as false
        'gSetCtrl tmNoCtrls(NOINVPROJCODEINDEX), 30, tmNoCtrls(NORESVADVTINDEX).fBoxY + fgStDeltaY, 1500, fgBoxStH
        'tmNoCtrls(NOINVPROJCODEINDEX).iReq = False  'If changed to True, test tgSpf.sAEDIC and if not using leave as false
        'gSetCtrl tmNoCtrls(NOINVSMSNOINDEX), 1545, tmNoCtrls(NOINVPROJCODEINDEX).fBoxY, 1500, fgBoxStH
        'tmNoCtrls(NOINVSMSNOINDEX).iReq = False  'If changed to True, test tgSpf.sAEDII and if not using leave as false
        gSetCtrl tmNoCtrls(NODATEINDEX), 30, tmNoCtrls(NOEDICLIENTCODEINDEX).fBoxY + fgStDeltaY, 1500, fgBoxStH
        'gSetCtrl tmNoCtrls(NODATEINDEX), 30, tmNoCtrls(NOINVPROJCODEINDEX).fBoxY + fgStDeltaY, 1500, fgBoxStH
        tmNoCtrls(NODATEINDEX).iReq = False  'If changed to True, test tgSpf.sAEDII and if not using leave as false
    'Version number
    gSetCtrl tmHdCtrls(PROPVERINDEX), 7155, tmHdCtrls(STATUSINDEX).fBoxY, 405, fgBoxStH
    'Revision number
    gSetCtrl tmHdCtrls(REVNOINDEX), 7575, tmHdCtrls(STATUSINDEX).fBoxY, 630, fgBoxStH
    'Date
    gSetCtrl tmHdCtrls(DATEINDEX), 8220, tmHdCtrls(STATUSINDEX).fBoxY, 795, fgBoxStH
    'Advertiser
    gSetCtrl tmHdCtrls(ADVTINDEX), tmHdCtrls(STATUSINDEX).fBoxX, tmHdCtrls(STATUSINDEX).fBoxY + fgStDeltaY, 2985, fgBoxStH
    If tgSpf.sUseProdSptScr = "P" Then  'Short Title
        'Product
        gSetCtrl tmHdCtrls(PRODUCTINDEX), tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(ADVTINDEX).fBoxY, 1770, fgBoxStH
        tmHdCtrls(PRODUCTINDEX).iReq = False
        gSetCtrl tmHdCtrls(SHTTITLEINDEX), 7815, tmHdCtrls(ADVTINDEX).fBoxY, 1200, fgBoxStH
        tmHdCtrls(SHTTITLEINDEX).iReq = False
    Else
        'Product
        gSetCtrl tmHdCtrls(PRODUCTINDEX), tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(ADVTINDEX).fBoxY, 2985, fgBoxStH
        tmHdCtrls(PRODUCTINDEX).iReq = False
        gSetCtrl tmHdCtrls(SHTTITLEINDEX), -100, -100, 0, 0
        tmHdCtrls(SHTTITLEINDEX).iReq = False
    End If
    'Agency
    gSetCtrl tmHdCtrls(AGENCYINDEX), 30, tmHdCtrls(ADVTINDEX).fBoxY + fgStDeltaY, 2985, fgBoxStH
    'Salesperson
    gSetCtrl tmHdCtrls(SPERSONINDEX), tmHdCtrls(STATUSINDEX).fBoxX, tmHdCtrls(AGENCYINDEX).fBoxY, 2985, fgBoxStH
        If tgSpf.sSubCompany = "Y" Then
            For ilLoop = 0 To 9 Step 1
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX), 360, 375 + ilLoop * (fgBoxGridH + 15), 2475, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).iReq = False
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 1), 2850, tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).fBoxY, 960, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 1).iReq = False
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 2), 3825, tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).fBoxY, 960, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 2).iReq = False
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 3), 4800, tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).fBoxY, 960, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 3).iReq = False
            Next ilLoop
        ElseIf tgSpf.sCommByCntr = "Y" Then
            For ilLoop = 0 To 9 Step 1
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX), 360, 375 + ilLoop * (fgBoxGridH + 15), 2475, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).iReq = False
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 1), 2850, tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).fBoxY, 960, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 1).iReq = False
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 2), 3825, tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).fBoxY, 960, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 2).iReq = False
            Next ilLoop
        Else
            For ilLoop = 0 To 9 Step 1
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX), 360, 375 + ilLoop * (fgBoxGridH + 15), 2475, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).iReq = False
                gSetCtrl tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 1), 2850, tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX).fBoxY, 960, fgBoxGridH
                tmSPCtrls(imSPNoCol * ilLoop + SPNAME1INDEX + 1).iReq = False
            Next ilLoop
        End If
        tmSPCtrls(SPNAME1INDEX).iReq = True
    'Product Protection
    gSetCtrl tmHdCtrls(COMPINDEX), tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(AGENCYINDEX).fBoxY, 2985, fgBoxStH
        gSetCtrl tmCECtrls(CECOMPINDEX), 30, 30, 2340, fgBoxStH
        If tgSaf(0).sProdProtMan = "Y" Then
            tmCECtrls(CECOMPINDEX).iReq = True
        Else
            tmCECtrls(CECOMPINDEX).iReq = False
        End If
        gSetCtrl tmCECtrls(CECOMPINDEX + 1), 2385, tmCECtrls(CECOMPINDEX).fBoxY, 2340, fgBoxStH
        tmCECtrls(CECOMPINDEX + 1).iReq = False
        gSetCtrl tmCECtrls(CEEXCLINDEX), 30, tmCECtrls(CECOMPINDEX).fBoxY + fgStDeltaY, 2340, fgBoxStH
        tmCECtrls(CEEXCLINDEX).iReq = False  'If changed to True, test tgSpf.sAEDIC and if not using leave as false
        gSetCtrl tmCECtrls(CEEXCLINDEX + 1), 2385, tmCECtrls(CEEXCLINDEX).fBoxY, 2340, fgBoxStH
        tmCECtrls(CEEXCLINDEX + 1).iReq = False  'If changed to True, test tgSpf.sAEDII and if not using leave as false
        gSetCtrl tmCECtrls(CEBUSCATINDEX), 30, tmCECtrls(CEEXCLINDEX).fBoxY + fgStDeltaY, 2340, fgBoxStH
        If (Asc(tgSpf.sUsingFeatures10) And VCREATIVEEXPORT) <> VCREATIVEEXPORT Then
            tmCECtrls(CEBUSCATINDEX).iReq = False  'If changed to True, test tgSpf.sAEDIC and if not using leave as false
        End If
    'Buyer
    gSetCtrl tmHdCtrls(BUYERINDEX), tmHdCtrls(AGENCYINDEX).fBoxX, tmHdCtrls(AGENCYINDEX).fBoxY + fgStDeltaY, 2985, fgBoxStH
    tmHdCtrls(BUYERINDEX).iReq = False
    'Phone
    gSetCtrl tmHdCtrls(PHONEINDEX), tmHdCtrls(STATUSINDEX).fBoxX, tmHdCtrls(BUYERINDEX).fBoxY, 2985, fgBoxStH
    tmHdCtrls(PHONEINDEX).iReq = False
    'Share of Budget
    gSetCtrl tmHdCtrls(SHAREINDEX), tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(BUYERINDEX).fBoxY, 660, fgBoxStH
    tmHdCtrls(SHAREINDEX).iReq = False
        For ilLoop = 0 To 6 Step 1
            gSetCtrl tmSBCtrls(2 * ilLoop + SBYCOMPANYINDEX), 30, 30 + ilLoop * fgStDeltaY, 2475, fgBoxStH
            tmSBCtrls(2 * ilLoop + SBYCOMPANYINDEX).iReq = False
            gSetCtrl tmSBCtrls(2 * ilLoop + SBYPCTINDEX), 2520, tmSBCtrls(2 * ilLoop + SBYCOMPANYINDEX).fBoxY, 825, fgBoxStH
            tmSBCtrls(2 * ilLoop + SBYPCTINDEX).iReq = False
        Next ilLoop
    'Merchandising
    gSetCtrl tmHdCtrls(MERCHINDEX), 6705, tmHdCtrls(BUYERINDEX).fBoxY, 1095, fgBoxStH
    tmHdCtrls(MERCHINDEX).iReq = False
    'Promotion
    gSetCtrl tmHdCtrls(PROMOINDEX), 7815, tmHdCtrls(BUYERINDEX).fBoxY, 1200, fgBoxStH
    tmHdCtrls(PROMOINDEX).iReq = False
    If tgSpf.sCUseSegments <> "Y" Then  'Using Segments
        'Revenue Sets
        gSetCtrl tmHdCtrls(REVSETINDEX), tmHdCtrls(AGENCYINDEX).fBoxX, tmHdCtrls(BUYERINDEX).fBoxY + fgStDeltaY, 2985, fgBoxStH  'Was 2985
        tmHdCtrls(REVSETINDEX).iReq = False
            For ilLoop = 0 To 4 Step 1
                gSetCtrl tmRSCtrls(ilLoop + RSREV1INDEX), 30, 30 + ilLoop * fgStDeltaY, 2475, fgBoxStH
                tmRSCtrls(ilLoop + RSREV1INDEX).iReq = False
            Next ilLoop
        gSetCtrl tmHdCtrls(SEGINDEX), -100, -100, 0, 0
        tmHdCtrls(SEGINDEX).iReq = False
    Else
        'Revenue Sets
        gSetCtrl tmHdCtrls(REVSETINDEX), tmHdCtrls(AGENCYINDEX).fBoxX, tmHdCtrls(BUYERINDEX).fBoxY + fgStDeltaY, 1770, fgBoxStH  'Was 2985
        tmHdCtrls(REVSETINDEX).iReq = False
            For ilLoop = 0 To 4 Step 1
                gSetCtrl tmRSCtrls(ilLoop + RSREV1INDEX), 30, 30 + ilLoop * fgStDeltaY, 2475, fgBoxStH
                tmRSCtrls(ilLoop + RSREV1INDEX).iReq = False
            Next ilLoop
        gSetCtrl tmHdCtrls(SEGINDEX), tmHdCtrls(AGENCYINDEX).fBoxX + 1800, tmHdCtrls(REVSETINDEX).fBoxY, 1200, fgBoxStH
        tmHdCtrls(SEGINDEX).iReq = False
    End If
    'Demo
    gSetCtrl tmHdCtrls(DEMOINDEX), tmHdCtrls(STATUSINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY, 1485, fgBoxStH
    tmHdCtrls(DEMOINDEX).iReq = False
        'Price type/Demo/Target
        gSetCtrl tmDmCtrls(DMCPPCPMINDEX), 30, 30, 1410, fgBoxStH
        tmDmCtrls(DMCPPCPMINDEX).iReq = False
        gSetCtrl tmDmCtrls(DMHIDEDEMOINDEX), 1455, tmDmCtrls(DMCPPCPMINDEX).fBoxY, 1410, fgBoxStH
        tmDmCtrls(DMHIDEDEMOINDEX).iReq = False
        gSetCtrl tmDmCtrls(DMDEMOINDEX), 30, tmDmCtrls(DMCPPCPMINDEX).fBoxY + fgStDeltaY, 1410, fgBoxStH
        tmDmCtrls(DMDEMOINDEX).iReq = False
        gSetCtrl tmDmCtrls(DMVALUEINDEX), 1455, tmDmCtrls(DMDEMOINDEX).fBoxY, 1410, fgBoxStH
        tmDmCtrls(DMVALUEINDEX).iReq = False
        gSetCtrl tmDmCtrls(DMDEMOINDEX + 2), 30, tmDmCtrls(DMDEMOINDEX).fBoxY + fgStDeltaY, 1410, fgBoxStH
        tmDmCtrls(DMDEMOINDEX + 2).iReq = False
        gSetCtrl tmDmCtrls(DMVALUEINDEX + 2), 1455, tmDmCtrls(DMDEMOINDEX + 2).fBoxY, 1410, fgBoxStH
        tmDmCtrls(DMVALUEINDEX + 2).iReq = False
        gSetCtrl tmDmCtrls(DMDEMOINDEX + 4), 30, tmDmCtrls(DMDEMOINDEX + 2).fBoxY + fgStDeltaY, 1410, fgBoxStH
        tmDmCtrls(DMDEMOINDEX + 4).iReq = False
        gSetCtrl tmDmCtrls(DMVALUEINDEX + 4), 1455, tmDmCtrls(DMDEMOINDEX + 4).fBoxY, 1410, fgBoxStH
        tmDmCtrls(DMVALUEINDEX + 4).iReq = False
        gSetCtrl tmDmCtrls(DMDEMOINDEX + 6), 30, tmDmCtrls(DMDEMOINDEX + 4).fBoxY + fgStDeltaY, 1410, fgBoxStH
        tmDmCtrls(DMDEMOINDEX + 6).iReq = False
        gSetCtrl tmDmCtrls(DMVALUEINDEX + 6), 1455, tmDmCtrls(DMDEMOINDEX + 6).fBoxY, 1410, fgBoxStH
        tmDmCtrls(DMVALUEINDEX + 6).iReq = False
    'Guarantee
    gSetCtrl tmHdCtrls(GUARINDEX), 4530, tmHdCtrls(REVSETINDEX).fBoxY, 1485, fgBoxStH
    tmHdCtrls(GUARINDEX).iReq = False
    '% Trade
    gSetCtrl tmHdCtrls(TRADEINDEX), tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY, 660, fgBoxStH
        'gMoveCtrl pbcHeader, plcPctTrade, tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY
        'pbcPctTrade.Move plcPctTrade.Left + 150, plcPctTrade.Top + 285
        gSetCtrl tmPTCtrls(PTTRADEINDEX), 30, 30, 2325, fgBoxStH
        gSetCtrl tmPTCtrls(PTAGYCOMMINDEX), 30, tmPTCtrls(PTTRADEINDEX).fBoxY + fgStDeltaY, 2325, fgBoxStH
        tmPTCtrls(PTAGYCOMMINDEX).iReq = False
    'Rate Card
    gSetCtrl tmHdCtrls(RATECARDINDEX), 6705, tmHdCtrls(REVSETINDEX).fBoxY, 1095, fgBoxStH
    'Total Gross
    gSetCtrl tmHdCtrls(GROSSINDEX), 7815, tmHdCtrls(REVSETINDEX).fBoxY, 1200, fgBoxStH
    tmHdCtrls(GROSSINDEX).iReq = False  'Only mandatory when update pressed
     '10967-show Vendor Sent            Left = Agency box            Top = billing cycle row
    gSetCtrl tmHdCtrls(VENDORINDEX), tmHdCtrls(AGENCYINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY + fgStDeltaY, 500, fgBoxStH
    tmHdCtrls(VENDORINDEX).iReq = False
    'Billing cycle
    '10967-show
'    gSetCtrl tmHdCtrls(BILLCYCLEINDEX), tmHdCtrls(AGENCYINDEX).fBoxX, tmHdCtrls(REVSETINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
    gSetCtrl tmHdCtrls(BILLCYCLEINDEX), tmHdCtrls(VENDORINDEX).fBoxX + tmHdCtrls(VENDORINDEX).fBoxW + 15, tmHdCtrls(VENDORINDEX).fBoxY, 770, fgBoxStH
    'Invoice Group
'    gSetCtrl tmHdCtrls(INVGROUPINDEX), 915, tmHdCtrls(BILLCYCLEINDEX).fBoxY, 1170, fgBoxStH
    gSetCtrl tmHdCtrls(INVGROUPINDEX), tmHdCtrls(BILLCYCLEINDEX).fBoxX + tmHdCtrls(BILLCYCLEINDEX).fBoxW + 15, tmHdCtrls(VENDORINDEX).fBoxY, 970, fgBoxStH
    tmHdCtrls(INVGROUPINDEX).iReq = False
    'Product/Tag %
'    gSetCtrl tmHdCtrls(PRODTAGINDEX), 2100, tmHdCtrls(BILLCYCLEINDEX).fBoxY, 915, fgBoxStH
    gSetCtrl tmHdCtrls(PRODTAGINDEX), tmHdCtrls(INVGROUPINDEX).fBoxX + tmHdCtrls(INVGROUPINDEX).fBoxW + 15, tmHdCtrls(VENDORINDEX).fBoxY, 715, fgBoxStH
    tmHdCtrls(PRODTAGINDEX).iReq = False
    'Internal Comment
    '10967 changed from BILLCYCLEINDEX to CHANGE ALL BELOW Y = VENDORINDEX to attachments
    gSetCtrl tmHdCtrls(INTCOMMINDEX), tmHdCtrls(STATUSINDEX).fBoxX, tmHdCtrls(VENDORINDEX).fBoxY, 1485, fgBoxStH
    tmHdCtrls(INTCOMMINDEX).iReq = False
    'Cancel Clause
    gSetCtrl tmHdCtrls(CANCLAUSEINDEX), 4530, tmHdCtrls(VENDORINDEX).fBoxY, 1485, fgBoxStH
    If ((Asc(tgSaf(0).sFeatures2) And CANCELCLAUSEMANDATORY) = CANCELCLAUSEMANDATORY) Then
        tmHdCtrls(CANCLAUSEINDEX).iReq = True
    Else
        tmHdCtrls(CANCLAUSEINDEX).iReq = False
    End If
    'Change Reason
    gSetCtrl tmHdCtrls(CHGREASONINDEX), tmHdCtrls(CNTRNOINDEX).fBoxX, tmHdCtrls(VENDORINDEX).fBoxY, 1485, fgBoxStH
    tmHdCtrls(CHGREASONINDEX).iReq = False
    'Cancel Clause
    '10910-show
'    gSetCtrl tmHdCtrls(OTHERCOMMINDEX), 7530, tmHdCtrls(BILLCYCLEINDEX).fBoxY, 1485, fgBoxStH
    gSetCtrl tmHdCtrls(OTHERCOMMINDEX), 7530, tmHdCtrls(VENDORINDEX).fBoxY, 1185, fgBoxStH
    tmHdCtrls(OTHERCOMMINDEX).iReq = False
    '10910-show
    gSetCtrl tmHdCtrls(ATTACHMENTINDEX), 8715, tmHdCtrls(VENDORINDEX).fBoxY, 300, fgBoxStH
    ' true or false?
    tmHdCtrls(ATTACHMENTINDEX).iReq = False
    If (tgSpf.sRUseMerch <> "Y") Then
        tmHdCtrls(MERCHINDEX).iReq = False
    End If
    If (tgSpf.sRUsePromo <> "Y") Then
        tmHdCtrls(PROMOINDEX).iReq = False
    End If
    If (tgSpf.sUseProdSptScr <> "P") Then  'Short Title
        tmHdCtrls(SHTTITLEINDEX).iReq = False
    End If
    If ((Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION) Then
        tmHdCtrls(POTINDEX).iReq = False
    End If
    If ((Asc(tgSpf.sOptionFields) And OFSHARE) <> OFSHARE) Then
        tmHdCtrls(SHAREINDEX).iReq = False
    End If
    If ((Asc(tgSpf.sOptionFields) And OFREVSET) <> OFREVSET) Then
        tmHdCtrls(REVSETINDEX).iReq = False
    End If
    If ((Asc(tgSpf.sOptionFields) And OFDELGUAR) <> OFDELGUAR) And ((Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) <> GUARBYGRIMP) Then
        tmHdCtrls(GUARINDEX).iReq = False
    End If
    If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
        tmHdCtrls(BILLCYCLEINDEX).iReq = False
    End If
    If ((Asc(tgSpf.sOptionFields) And OFCOOPBILL) <> OFCOOPBILL) Then
        tmHdCtrls(INVGROUPINDEX).iReq = False
        tmHdCtrls(PRODTAGINDEX).iReq = False
    End If


'    gMoveCtrl pbcHeader, edcComment, tmHdCtrls(COMMENTINDEX).fBoxX, tmHdCtrls(COMMENTINDEX).fBoxY
    plcComment.Move plcHeader.Left + (plcHeader.Width - plcComment.Width) / 2, plcHeader.Top + 100
    lbcBPlate.Top = 285
    lbcBPlate.Left = 255
    lacBPlate.Top = lbcBPlate.Top
    lacBPlate.Left = 2385
    plcComment.ZOrder vbBringToFront
    'tmHdCtrls(COMMENTINDEX).iReq = False
    'Position panel and picture areas with panel
    imLine = 0
    'lacLines.Caption = "+ Lines"
    'imcLnArrow.Picture = IconTraf!imcArrowUp.Picture
    plcLine.Move 105, 2775, pbcLine.Width + vbcLines.Width + fgPanelAdj, 2280
    pbcLine.Move plcLine.Left + fgBevelX, plcLine.Top + 450, pbcLine.Width, 1545 'fgBevelY
    pbcLnTotal.Move pbcLine.Left, pbcLine.Top + pbcLine.height, pbcLine.Width, 225
    ''vbcLines.Move pbcLine.Left + pbcLine.Width + 15, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.Height - pbcLine.Top
    'vbcLines.Move pbcLine.Left + pbcLine.Width, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.Height - pbcLine.Top
    'vbcLines.LargeChange = 5
    pbcLineArrow.Move plcLine.Left - pbcLineArrow.Width '- 15    'set arrow    'Vehicle
    'plcPower.Move plcLine.Left, plcLine.Top, plcLine.Width, plcLine.Height
    mClearPB
    cbcRBView.AddItem "Specifications", 0
    cbcRBView.AddItem "Vehicle Summary", 1
    cbcRBView.AddItem "Daypart Summary", 2
    'mSetPowerBar 0
    pbcLnDates.Move 3870, 45
    'Vehicle
    gSetCtrl tmLnCtrls(VEHINDEX), 285, 375, 1635, fgBoxGridH
    'Daypart
    gSetCtrl tmLnCtrls(DPINDEX), 1935, tmLnCtrls(VEHINDEX).fBoxY, 1455, fgBoxGridH
    'Override
    gSetCtrl tmLnCtrls(OV1INDEX), 3645, tmLnCtrls(VEHINDEX).fBoxY, 150, fgBoxGridH
    tmLnCtrls(OV1INDEX).iReq = False
    gSetCtrl tmLnCtrls(OV2INDEX), 3795, tmLnCtrls(VEHINDEX).fBoxY, 150, fgBoxGridH
    tmLnCtrls(OV2INDEX).iReq = False

    mSetTmOVCtrl
    mSetTmOV2Ctrl
    'Length
    '7/26/15: Swapped Override and Len
    'gSetCtrl tmLnCtrls(LENINDEX), 3645, tmLnCtrls(VEHINDEX).fBoxY, 300, fgBoxGridH
    gSetCtrl tmLnCtrls(LENINDEX), 3405, tmLnCtrls(VEHINDEX).fBoxY, 240, fgBoxGridH
    'Week 1-13
    For ilLoop = 0 To 12 Step 1
        gSetCtrl tmLnCtrls(WKSPOTSINDEX + ilLoop), 3960 + 270 * (ilLoop), tmLnCtrls(VEHINDEX).fBoxY, 255, fgBoxGridH
    Next ilLoop
    'Spots
    gSetCtrl tmLnCtrls(SPOTSINDEX), 7470, tmLnCtrls(VEHINDEX).fBoxY, 435, fgBoxGridH
    tmLnCtrls(SPOTSINDEX).iReq = False
    'Price
    gSetCtrl tmLnCtrls(PRICEINDEX), 7920, tmLnCtrls(VEHINDEX).fBoxY, 840, fgBoxGridH
    tmLnCtrls(PRICEINDEX).iReq = False
    'Comment
    gSetCtrl tmLnCtrls(LINECOMMINDEX), 8775, tmLnCtrls(VEHINDEX).fBoxY, 165, fgBoxGridH
    tmLnCtrls(LINECOMMINDEX).iReq = False
    'Line Totals
    'Week 1-13
    For ilLoop = 1 To 13 Step 1
        gSetCtrl tmLnTCtrls(ilLoop), 3960 + 270 * (ilLoop - 1), 30, 255, fgBoxGridH
    Next ilLoop
    'Spots
    gSetCtrl tmLnTCtrls(14), 7470, 30, 435, fgBoxGridH
    'Price
    gSetCtrl tmLnTCtrls(15), 7920, 30, 840, fgBoxGridH
    'Line Dates
    gSetCtrl tmLnDCtrls(1), 30, 225, 1620, fgBoxGridH
    gSetCtrl tmLnDCtrls(2), 1665, 225, 1860, fgBoxGridH
    cmcPackage(0).Move 1050, 60
    cmcTerminate(0).Move cmcPackage(0).Left + cmcPackage(0).Width + 15, cmcPackage(0).Top
    cmcDates.Move cmcTerminate(0).Left + cmcTerminate(0).Width + 15, cmcPackage(0).Top
    cmcFlight.Move cmcDates.Left + cmcDates.Width + 15, cmcPackage(0).Top
    If (tgUrf(0).sActFlightButton <> "I") Then
       cmcFlight.Visible = False
    Else
       cmcFlight.Visible = True
    End If
    pbcLnDates.Move cmcFlight.Left + cmcFlight.Width + 15, cmcPackage(0).Top
    cbcDifference.Move plcLine.Width - fgBevelX - cbcDifference.Width - 15, 60
    cmcClone.Move plcLine.Width - fgBevelX - cmcClone.Width - 15, 60
    cmcScale.Move cmcClone.Left - cmcScale.Width - 135, cmcClone.Top
    'Start Date
    gSetCtrl tmDGCtrls(DGSTARTDATEINDEX), 30, 375, 1020, fgBoxGridH
    'Number of Weeks
    gSetCtrl tmDGCtrls(DGNOWKSINDEX), 1065, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 330, fgBoxGridH
    tmDGCtrls(DGNOWKSINDEX).iReq = False
    'End Day
'    gSetCtrl tmDGCtrls(DGENDDAYINDEX), 1995, tmDGCtrls(DGSTARTDAYINDEX).fBoxY, 660, fgBoxGridH
    'End Date
    gSetCtrl tmDGCtrls(DGENDDATEINDEX), 1410, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 1020, fgBoxGridH
    'Run
    gSetCtrl tmDGCtrls(DGRUNINDEX), 2445, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 600, fgBoxGridH
    'Daily/Weekly/%
    gSetCtrl tmDGCtrls(DGDWPINDEX), 3060, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 750, fgBoxGridH
    'Spots/Week
    gSetCtrl tmDGCtrls(DGSPOTWKINDEX), 3825, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 510, fgBoxGridH
    tmDGCtrls(DGSPOTWKINDEX).iReq = False
    'Days of the week
    For ilLoop = 0 To 6 Step 1
        gSetCtrl tmDGCtrls(DGDAILYINDEX + ilLoop), 4350 + 255 * (ilLoop), tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 240, fgBoxGridH
'        gSetCtrl tmDGCtrls(DGDAILYINDEX + ilLoop), 3390 + 240 * (ilLoop), tmDGCtrls(DGSTARTDAYINDEX).fBoxY, 240, fgBoxGridH
        tmDGCtrls(DGDAILYINDEX + ilLoop).iReq = False
    Next ilLoop
    'Price
    gSetCtrl tmDGCtrls(DGPRICEINDEX), 6135, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 840, fgBoxGridH
    ''Preempt
    gSetCtrl tmDGCtrls(DGOVSTARTINDEX), 7020, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 915, fgBoxGridH
    tmDGCtrls(DGOVSTARTINDEX).iReq = False
    'Override End Time
    gSetCtrl tmDGCtrls(DGOVENDINDEX), 7935, tmDGCtrls(DGSTARTDATEINDEX).fBoxY, 915, fgBoxGridH
    tmDGCtrls(DGOVENDINDEX).iReq = False
    'Air week
    gSetCtrl tmAirCtrls(AIRWEEKINDEX), 30, 375, 435, fgBoxGridH
    'Week #
    gSetCtrl tmAirCtrls(WEEKNOINDEX), 480, tmAirCtrls(AIRWEEKINDEX).fBoxY, 435, fgBoxGridH
    'Start Date
    gSetCtrl tmAirCtrls(WEEKSTARTDATEINDEX), 930, tmAirCtrls(AIRWEEKINDEX).fBoxY, 1095, fgBoxGridH
    'End Date
    gSetCtrl tmAirCtrls(WEEKENDDATEINDEX), 2040, tmAirCtrls(AIRWEEKINDEX).fBoxY, 1095, fgBoxGridH
    'Daily/Weekly
    gSetCtrl tmAirCtrls(DWINDEX), 3150, tmAirCtrls(AIRWEEKINDEX).fBoxY, 750, fgBoxGridH
    'Spots per week
    gSetCtrl tmAirCtrls(SPOTPERWKINDEX), 3915, tmAirCtrls(AIRWEEKINDEX).fBoxY, 510, fgBoxGridH
    'Days of the week
    For ilLoop = 0 To 6 Step 1
        gSetCtrl tmAirCtrls(DAILYSPOTSINDEX + ilLoop), 4440 + 255 * (ilLoop), tmAirCtrls(AIRWEEKINDEX).fBoxY, 240, fgBoxGridH
    Next ilLoop
    'Price
    gSetCtrl tmAirCtrls(WKPRICEINDEX), 6225, tmAirCtrls(AIRWEEKINDEX).fBoxY, 840, fgBoxGridH

    'Flight Totals
    gSetCtrl tmFTCtrls(1), 480, 1965, 660, fgBoxGridH
    gSetCtrl tmFTCtrls(2), 5670, tmFTCtrls(1).fBoxY, 510, fgBoxGridH
    gSetCtrl tmFTCtrls(3), 6225, tmFTCtrls(1).fBoxY, 840, fgBoxGridH

    'Demo flight totals
    gSetCtrl tmDFTCtrls(1), 30, 375, 510, fgBoxGridH
    gSetCtrl tmDFTCtrls(2), 570, tmDFTCtrls(1).fBoxY, 525, fgBoxGridH
    gSetCtrl tmDFTCtrls(3), 1110, tmDFTCtrls(1).fBoxY, 525, fgBoxGridH
    gSetCtrl tmDFTCtrls(4), 1650, tmDFTCtrls(1).fBoxY, 705, fgBoxGridH
    gSetCtrl tmDFTCtrls(5), 2370, tmDFTCtrls(1).fBoxY, 510, fgBoxGridH
    gSetCtrl tmDFTCtrls(6), 2910, tmDFTCtrls(1).fBoxY, 525, fgBoxGridH
    gSetCtrl tmDFTCtrls(7), 3450, tmDFTCtrls(1).fBoxY, 525, fgBoxGridH
    gSetCtrl tmDFTCtrls(8), 3990, tmDFTCtrls(1).fBoxY, 705, fgBoxGridH
    gSetCtrl tmDFTCtrls(9), 4710, tmDFTCtrls(1).fBoxY, 510, fgBoxGridH
    gSetCtrl tmDFTCtrls(10), 5250, tmDFTCtrls(1).fBoxY, 525, fgBoxGridH
    gSetCtrl tmDFTCtrls(11), 5790, tmDFTCtrls(1).fBoxY, 705, fgBoxGridH
    'Summary
    'gSetCtrl tmSumCtrls(1), 15, 195, 405, fgBoxGridH                        'Line
    gSetCtrl tmSumCtrls(1), 15, 195, 390, fgBoxGridH                        'Line
    gSetCtrl tmSumCtrls(2), 420, tmSumCtrls(1).fBoxY, 1590, fgBoxGridH      'Vehicle
    gSetCtrl tmSumCtrls(3), 2025, tmSumCtrls(1).fBoxY, 1590, fgBoxGridH     'Daypart
    gSetCtrl tmSumCtrls(4), 3630, tmSumCtrls(1).fBoxY, 495, fgBoxGridH      'GRP
    gSetCtrl tmSumCtrls(5), 4140, tmSumCtrls(1).fBoxY, 480, fgBoxGridH      '%GRP
    gSetCtrl tmSumCtrls(6), 4635, tmSumCtrls(1).fBoxY, 660, fgBoxGridH      'GrImp
    gSetCtrl tmSumCtrls(7), 5310, tmSumCtrls(1).fBoxY, 480, fgBoxGridH      '%GrImp
    gSetCtrl tmSumCtrls(8), 5805, tmSumCtrls(1).fBoxY, 540, fgBoxGridH      'CPM
    gSetCtrl tmSumCtrls(9), 6360, tmSumCtrls(1).fBoxY, 690, fgBoxGridH      'CPP
    gSetCtrl tmSumCtrls(10), 7065, tmSumCtrls(1).fBoxY, 840, fgBoxGridH     'Avg Price
    gSetCtrl tmSumCtrls(11), 7920, tmSumCtrls(1).fBoxY, 840, fgBoxGridH     'Total Price
    'Index Box
    gSetCtrl tmICtrls(1), 8295, 210, 465, 150
    tmICtrls(1).sShow = "1.00"

    'Calendar
    For ilLoop = 1 To 7 Step 1
        gSetCtrl tmCDCtrls(ilLoop), 30 + 255 * (ilLoop - 1), 225, 240, fgBoxGridH
    Next ilLoop
    'Rate Bar
    'gSetCtrl tmRBCtrls(1), 30, 195, 195, fgBoxGridH
    gSetCtrl tmRBCtrls(1), 30, fgBoxGridH + 45, 195, fgBoxGridH
    gSetCtrl tmRBCtrls(2), 240, tmRBCtrls(1).fBoxY, 1590, fgBoxGridH
    gSetCtrl tmRBCtrls(3), 1845, tmRBCtrls(1).fBoxY, 1590, fgBoxGridH
    gSetCtrl tmRBCtrls(4), 3450, tmRBCtrls(1).fBoxY, 435, fgBoxGridH
    gSetCtrl tmRBCtrls(5), 3900, tmRBCtrls(1).fBoxY, 840, fgBoxGridH
    gSetCtrl tmRBCtrls(6), 4755, tmRBCtrls(1).fBoxY, 525, fgBoxGridH
    gSetCtrl tmRBCtrls(7), 5295, tmRBCtrls(1).fBoxY, 615, fgBoxGridH
    gSetCtrl tmRBCtrls(8), 5925, tmRBCtrls(1).fBoxY, 705, fgBoxGridH
    gSetCtrl tmRBCtrls(9), 6645, tmRBCtrls(1).fBoxY, 585, fgBoxGridH
    'Demo Bar
    plcDemoBar.Move plcHeader.Left, plcHeader.Top, plcHeader.Width, pbcDemoBar(0).height + pbcDemoBar(1).height + edcDBDisplay.height + 2 * fgBevelY - 45
    pbcDemoBar(0).Move plcDemoBar.Left + fgBevelX, plcDemoBar.Top + fgBevelY + edcDBDisplay.height - 15
    pbcDemoBar(1).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top + pbcDemoBar(0).height - 15, pbcDemoBar(1).Width, 1605
    pbcDemoBar(2).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top
    pbcDemoBar(3).Move plcDemoBar.Left + fgBevelX, pbcDemoBar(0).Top
    vbcSummary.Move plcDemoBar.Width - vbcSummary.Width - fgBevelX, pbcDemoBar(2).Top - plcDemoBar.Top - 15, vbcSummary.Width, pbcDemoBar(2).height
    gSetCtrl tmDBCtrls(1), 360, 195, 600, fgBoxGridH
    gSetCtrl tmDBCtrls(2), 975, tmDBCtrls(1).fBoxY, 645, fgBoxGridH
    gSetCtrl tmDBCtrls(3), 1635, tmDBCtrls(1).fBoxY, 345, fgBoxGridH
    gSetCtrl tmDBCtrls(4), 1995, tmDBCtrls(1).fBoxY, 1005, fgBoxGridH
    gSetCtrl tmDBCtrls(5), 3525, tmDBCtrls(1).fBoxY, 600, fgBoxGridH
    gSetCtrl tmDBCtrls(6), 4140, tmDBCtrls(1).fBoxY, 720, fgBoxGridH
    gSetCtrl tmDBCtrls(7), 4875, tmDBCtrls(1).fBoxY, 345, fgBoxGridH
    gSetCtrl tmDBCtrls(8), 5235, tmDBCtrls(1).fBoxY, 1005, fgBoxGridH
    gSetCtrl tmDBCtrls(9), 6630, tmDBCtrls(1).fBoxY, 600, fgBoxGridH
    gSetCtrl tmDBCtrls(10), 7245, tmDBCtrls(1).fBoxY, 720, fgBoxGridH
    'gSetCtrl tmDBCtrls(11), 7980, tmDBCtrls(1).fBoxY, 1005, fgBoxGridH
    gSetCtrl tmDBCtrls(11), 7980, tmDBCtrls(1).fBoxY, 1050, fgBoxGridH
    'This is Ratio field that is in pbcDemoBar(1)
    gSetCtrl tmDBCtrls(12), 1020, 1005, 405, fgBoxGridH
    'Week 1-13
    For ilLoop = 1 To 13 Step 1
        gSetCtrl tmDBSCCtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 225, 570, fgBoxGridH
        gSetCtrl tmDBAvCtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 420, 570, fgBoxGridH
        gSetCtrl tmDBAPCtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 615, 570, fgBoxGridH
        gSetCtrl tmDBRCPCtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 810, 570, fgBoxGridH
        gSetCtrl tmDBRCtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 1005, 570, fgBoxGridH
        gSetCtrl tmDBGRPCtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 1200, 570, fgBoxGridH
        gSetCtrl tmDBGICtrls(ilLoop), 1440 + 585 * (ilLoop - 1), 1395, 570, fgBoxGridH
    Next ilLoop
    gSetCtrl tmDBAvgCtrls(1), 30, 1200, 975, fgBoxGridH
    gSetCtrl tmDBAvgCtrls(2), 30, 1395, 975, fgBoxGridH
    lbcDBSocEco.height = gListBoxHeight(lbcDBSocEco.ListCount, 10)
    lbcDBDisplay.Move plcDemoBar.Left + edcDBDisplay.Left, plcDemoBar.Top + edcDBDisplay.Top + edcDBDisplay.height
    lacDBBookOvly.Move edcDBBook.Left, edcDBBook.Top, edcDBBook.Width, edcDBBook.height
    lacDBBookOvly.ZOrder vbBringToFront   'Get it on top of edcDBBook as making edcDBBook invisble causes a problem in mGetResearchTotal and NO research values exist
    lbcDBBook.Move plcDemoBar.Left + edcDBBook.Left, plcDemoBar.Top + edcDBBook.Top + edcDBBook.height
    lbcDBDemo.Move plcDemoBar.Left + edcDBDemo.Left, plcDemoBar.Top + edcDBDemo.Top + edcDBDemo.height
    lbcDBSocEco.Move plcDemoBar.Left + edcDBSocEco.Left, plcDemoBar.Top + edcDBSocEco.Top + edcDBSocEco.height

    '1/2/18: Audio Type moved to BB line
    'Set override box, moved to mLnEnableBox
    'If tgSpf.sUsingBBs = "Y" Then
    '    pbcOVWD(0).Height = 1065
    '    pbcOVWD(1).Height = 1410
    'Else
    '    pbcOVWD(0).Height = 720
    '    pbcOVWD(1).Height = 1065
    'End If
    '10256
    imACT1CodesDefined = False
    If (Asc(tgSaf(0).sFeatures4) And ACT1CODES) = ACT1CODES Then
        imACT1CodesDefined = True
        pbcOVWD(0).height = 1740    '1410
        pbcOVWD(1).height = 2085    '2120
    Else
       ' imACT1CodesDefined = False
        pbcOVWD(0).height = 1050    '1065
        pbcOVWD(1).height = 1395    '1425
    End If
    If tgSpf.sAllowDailyBuys = "Y" Then
        pbcOv.height = pbcOVWD(1).height
        pbcOv.Width = pbcOVWD(1).Width
        pbcOv.Picture = pbcOVWD(1).Picture
    Else
        pbcOv.height = pbcOVWD(0).height
        pbcOv.Width = pbcOVWD(0).Width
        pbcOv.Picture = pbcOVWD(0).Picture
    End If
    plcOv.height = pbcOv.height + 60    '345
    plcOv.Width = pbcOv.Width + 60

    '4/28/07:  Adjust for variable screen size
    'llMax = 0
    'For ilLoop = LBound(tmHdCtrls) To UBound(tmHdCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        If tmHdCtrls(ilLoop).fBoxX >= 0 Then
            tmHdCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmHdCtrls(ilLoop).fBoxW)
            Do While (tmHdCtrls(ilLoop).fBoxW Mod 15) <> 0
                tmHdCtrls(ilLoop).fBoxW = tmHdCtrls(ilLoop).fBoxW + 1
            Loop
            tmHdCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmHdCtrls(ilLoop).fBoxX)
            Do While (tmHdCtrls(ilLoop).fBoxX Mod 15) <> 0
                tmHdCtrls(ilLoop).fBoxX = tmHdCtrls(ilLoop).fBoxX + 1
            Loop
            If ilLoop > 1 Then
                If tmHdCtrls(ilLoop).fBoxX > 90 Then
                    For ilAdj = 0 To 1 Step 1
                        If tmHdCtrls(ilLoop - 1).fBoxX + tmHdCtrls(ilLoop - 1).fBoxW + 15 < tmHdCtrls(ilLoop).fBoxX Then
                            tmHdCtrls(ilLoop - 1).fBoxW = tmHdCtrls(ilLoop - 1).fBoxW + 15
                        ElseIf tmHdCtrls(ilLoop - 1).fBoxX + tmHdCtrls(ilLoop - 1).fBoxW + 15 > tmHdCtrls(ilLoop).fBoxX Then
                            tmHdCtrls(ilLoop - 1).fBoxW = tmHdCtrls(ilLoop - 1).fBoxW - 15
                        Else
                            Exit For
                        End If
                    Next ilAdj
                End If
            End If
        End If
        'If tmHdCtrls(ilLoop).fBoxX + tmHdCtrls(ilLoop).fBoxW + 15 > llMax Then
        '    llMax = tmHdCtrls(ilLoop).fBoxX + tmHdCtrls(ilLoop).fBoxW + 15
        'End If
    Next ilLoop
    If tgSpf.sCUseSegments <> "Y" Then  'Using Segments
        tmHdCtrls(REVSETINDEX).fBoxX = tmHdCtrls(AGENCYINDEX).fBoxX
        tmHdCtrls(REVSETINDEX).fBoxW = tmHdCtrls(AGENCYINDEX).fBoxW
    End If
    llMax = 0
    For ilLoop = imLBCTCtrls To UBound(tmLnCtrls) Step 1
        tmLnCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmLnCtrls(ilLoop).fBoxW)
        Do While (tmLnCtrls(ilLoop).fBoxW Mod 15) <> 0
            tmLnCtrls(ilLoop).fBoxW = tmLnCtrls(ilLoop).fBoxW + 1
        Loop
        tmLnCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmLnCtrls(ilLoop).fBoxX)
        Do While (tmLnCtrls(ilLoop).fBoxX Mod 15) <> 0
            tmLnCtrls(ilLoop).fBoxX = tmLnCtrls(ilLoop).fBoxX + 1
        Loop
        If ilLoop > 1 Then
            If tmLnCtrls(ilLoop).fBoxX > 90 Then
                For ilAdj = 0 To 1 Step 1
                    If tmLnCtrls(ilLoop - 1).fBoxX + tmLnCtrls(ilLoop - 1).fBoxW + 15 < tmLnCtrls(ilLoop).fBoxX Then
                        tmLnCtrls(ilLoop - 1).fBoxW = tmLnCtrls(ilLoop - 1).fBoxW + 15
                    ElseIf tmLnCtrls(ilLoop - 1).fBoxX + tmLnCtrls(ilLoop - 1).fBoxW + 15 > tmLnCtrls(ilLoop).fBoxX Then
                        tmLnCtrls(ilLoop - 1).fBoxW = tmLnCtrls(ilLoop - 1).fBoxW - 15
                    Else
                        Exit For
                    End If
                Next ilAdj
            End If
        End If
        If tmLnCtrls(ilLoop).fBoxX + tmLnCtrls(ilLoop).fBoxW + 15 > llMax Then
            llMax = tmLnCtrls(ilLoop).fBoxX + tmLnCtrls(ilLoop).fBoxW + 15
        End If
    Next ilLoop
    If fmAdjFactorW = 1# Then
        llMax = llMax - 120
        For ilLoop = imLBCTCtrls To UBound(tmLnCtrls) Step 1
            If ilLoop = imLBCTCtrls Then
                tmLnCtrls(ilLoop).fBoxW = tmLnCtrls(ilLoop).fBoxW - 120
            Else
                tmLnCtrls(ilLoop).fBoxX = tmLnCtrls(ilLoop).fBoxX - 120
            End If
        Next ilLoop
    Else
        'imcLnArrow.Visible = False
    End If
    pbcLine.Picture = LoadPicture("")
    'For ilLoop = LBound(tmHdCtrls) To UBound(tmHdCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        If tmHdCtrls(ilLoop).fBoxX >= 0 Then
            If tmHdCtrls(ilLoop).fBoxX + tmHdCtrls(ilLoop).fBoxW + 15 < llMax + vbcLines.Width Then
                If tmHdCtrls(ilLoop).fBoxX + tmHdCtrls(ilLoop).fBoxW + 15 + 300 > llMax Then
                    Do While tmHdCtrls(ilLoop).fBoxX + tmHdCtrls(ilLoop).fBoxW + 15 < llMax + vbcLines.Width
                        tmHdCtrls(ilLoop).fBoxW = tmHdCtrls(ilLoop).fBoxW + 15
                    Loop
                End If
            End If
        End If
    Next ilLoop
    plcHeader.Move 135, 510, llMax + fgPanelAdj + vbcLines.Width, pbcHeader.height + fgPanelAdj
    pbcHeader.Move plcHeader.Left + fgBevelX, plcHeader.Top + fgBevelY, llMax + vbcLines.Width
    llAdjTop = Contract.height - cmcDone.Top - cmcDone.height - 105
    If llAdjTop < 0 Then
        llAdjTop = 0
    End If
    Do While (llAdjTop Mod 15) <> 0
        llAdjTop = llAdjTop + 1
    Loop
    Do While ((llAdjTop Mod (CInt(fgBoxGridH) + 15))) <> 0
        llAdjTop = llAdjTop - 1
    Loop
    pbcLine.height = pbcLine.height + llAdjTop - 2 * (CInt(fgBoxGridH) + 15)
    'plcLine.Move plcHeader.Left, plcHeader.Top + plcHeader.height + 30, llMax + vbcLines.Width + fgPanelAdj, pbcLine.height + pbcLnDates.height + pbcLnTotal.height + fgPanelAdj
    plcLine.Move plcHeader.Left + fgBevelX, plcHeader.Top + plcHeader.height + 30, llMax + vbcLines.Width + fgPanelAdj, pbcLine.height + pbcLnDates.height + pbcLnTotal.height + fgPanelAdj
    pbcLine.Move plcLine.Left + fgBevelX, plcLine.Top + cmcFlight.Top + cmcFlight.height + 120 + fgBevelY, llMax
    If plcLine.Width > plcHeader.Width Then
        For ilLoop = imLBCTCtrls To UBound(tmLnCtrls) Step 1
            If ilLoop = imLBCTCtrls Then
                tmLnCtrls(ilLoop).fBoxW = tmLnCtrls(ilLoop).fBoxW - (plcLine.Width - plcHeader.Width)
            Else
                tmLnCtrls(ilLoop).fBoxX = tmLnCtrls(ilLoop).fBoxX - (plcLine.Width - plcHeader.Width)
            End If
        Next ilLoop
        llMax = llMax - (plcLine.Width - plcHeader.Width)
        plcLine.Move plcHeader.Left + fgBevelX, plcHeader.Top + plcHeader.height + 60, llMax + vbcLines.Width + fgPanelAdj, pbcLine.height + pbcLnDates.height + pbcLnTotal.height + fgPanelAdj
        pbcLine.Move plcLine.Left + fgBevelX, plcLine.Top + cmcFlight.Top + cmcFlight.height + 120 + fgBevelY, llMax
    End If
    lacPrice(0).Move tmLnCtrls(PRICEINDEX).fBoxX, 30, tmLnCtrls(PRICEINDEX).fBoxW, tmLnCtrls(PRICEINDEX).fBoxY - 30
    pbcSumType(1).Move tmLnCtrls(PRICEINDEX).fBoxX, 30, tmLnCtrls(PRICEINDEX).fBoxW, tmLnCtrls(PRICEINDEX).fBoxY - 30
    lacPrice(1).Move tmLnCtrls(WKSPOTSINDEX).fBoxX - lacPrice(1).Width - 30, 0
    'tscLine.Move plcLine.Left - 60, plcLine.Top, plcLine.Width + 180, plcLine.height + 2 * (CInt(fgBoxGridH) + 15)
    tscLine.Move plcLine.Left - fgBevelX, plcLine.Top, plcLine.Width + 2 * fgBevelX, plcLine.height + 2 * (CInt(fgBoxGridH) + 15)
    'tscLine.Tabs.Item(4).Selected = True
    If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
        lacAudTotals.ForeColor = BLACK
        lacAudTotals.Caption = "GRP: GrImp: CPP: CPM:"
    Else
        lacAudTotals.ForeColor = BLACK
        lacAudTotals.Caption = "Click to Compute->GRP: GrImp: CPP: CPM:"
    End If
    'If (tgUrf(0).sSportPropOnly = "Y") Or (igSportsSystem = 1) Then
    '    'Multi-Media
    '    Set tscLine.SelectedItem = tscLine.Tabs.Item(1)
    'Else
    '    mActiveLnTab True
    'End If
    plcLine.height = plcLine.height ' - 420
    plcLine.Top = plcLine.Top + 360
    plcLine.BorderStyle = 0
    pbcLine.height = pbcLine.height ' - 420
    pbcLine.Top = pbcLine.Top + 360
    lmPlcLineHeight = plcLine.height
    lmPbcLineHeight = pbcLine.height
    edcLineNo(0).Top = fgBoxInsetY + 30
    edcLineNo(0).Left = fgBoxInsetX
    edcLineNo(0).Width = tmLnCtrls(VEHINDEX).fBoxX - 45
    udcCBill.Move plcLine.Left, plcLine.Top, plcLine.Width, plcLine.height
    udcCGameInv.Move plcLine.Left, plcLine.Top, plcLine.Width, plcLine.height
    udcCDigital.Move plcLine.Left, plcLine.Top, plcLine.Width, plcLine.height
    tmLnDCtrls(1).fBoxW = CLng((tmLnCtrls(SPOTSINDEX).fBoxX - tmLnCtrls(WKSPOTSINDEX).fBoxX) / 2)
    Do While (tmLnDCtrls(1).fBoxX Mod 15) <> 0
        tmLnDCtrls(1).fBoxX = tmLnDCtrls(1).fBoxX + 1
    Loop
    tmLnDCtrls(2).fBoxW = tmLnDCtrls(1).fBoxW - 15
    tmLnDCtrls(2).fBoxX = tmLnDCtrls(1).fBoxW + 30
    tmLnDCtrls(1).fBoxW = tmLnDCtrls(1).fBoxW - 15
    pbcLnDates.Picture = LoadPicture("")
    pbcLnDates.Left = tmLnCtrls(WKSPOTSINDEX).fBoxX - 15
    pbcLnDates.Width = tmLnCtrls(SPOTSINDEX).fBoxX - tmLnCtrls(WKSPOTSINDEX).fBoxX + 45

    For ilLoop = WKSPOTSINDEX To PRICEINDEX Step 1
        tmLnTCtrls(ilLoop - WKSPOTSINDEX + 1).fBoxX = tmLnCtrls(ilLoop).fBoxX
        tmLnTCtrls(ilLoop - WKSPOTSINDEX + 1).fBoxW = tmLnCtrls(ilLoop).fBoxW
    Next ilLoop
    pbcLnTotal.Picture = LoadPicture("")
    pbcLnTotal.Left = pbcLine.Left
    'Hide top line
    pbcLnTotal.Top = pbcLine.Top + pbcLine.height - 30
    pbcLnTotal.Width = pbcLine.Width
    vbcLines.Move pbcLine.Left + pbcLine.Width, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.height - pbcLine.Top

    cmcPackage(0).Move 1050, 60
    cmcTerminate(0).Move cmcPackage(0).Left + cmcPackage(0).Width + 15, cmcPackage(0).Top
    cmcDates.Move cmcTerminate(0).Left + cmcTerminate(0).Width + 15, cmcPackage(0).Top
    cmcFlight.Move cmcDates.Left + cmcDates.Width + 15, cmcPackage(0).Top
    If (tgUrf(0).sActFlightButton <> "I") Then
       cmcFlight.Visible = False
    Else
       cmcFlight.Visible = True
    End If
    If cmcFlight.Left + cmcFlight.Width > pbcLnDates.Left Then
        cmcPackage(0).Left = cmcPackage(0).Left - (cmcFlight.Left + cmcFlight.Width - pbcLnDates.Left)
        cmcTerminate(0).Left = cmcTerminate(0).Left - (cmcFlight.Left + cmcFlight.Width - pbcLnDates.Left)
        cmcDates.Left = cmcDates.Left - (cmcFlight.Left + cmcFlight.Width - pbcLnDates.Left)
        cmcFlight.Left = cmcFlight.Left - (cmcFlight.Left + cmcFlight.Width - pbcLnDates.Left)
    End If
    cbcDifference.Move plcLine.Width - fgBevelX - cbcDifference.Width - 15, 60
    cmcClone.Move plcLine.Width - fgBevelX - cmcClone.Width - 15, 60
    cmcScale.Move cmcClone.Left - cmcScale.Width - 135, cmcClone.Top

    llAdjTop = Contract.height - cmcDone.Top - cmcDone.height - 105
    If llAdjTop < 0 Then
        llAdjTop = 0
    End If
    Do While (llAdjTop Mod 15) <> 0
        llAdjTop = llAdjTop + 1
    Loop

    imcTrash.Move plcLine.Left + plcLine.Width - imcTrash.Width, imcTrash.Top + llAdjTop
    '2/13/10: Change font size and move SctStatus to the right of CreditInfo
    lacLnTotals(2).Move imcTrash.Left - lacLnTotals(2).Width - 30, lacLnTotals(2).Top + llAdjTop - 30
    lacLnTotals(1).Move lacLnTotals(2).Left - lacLnTotals(1).Width, lacLnTotals(2).Top    'lacLnTotals.Top + llAdjTop
    lacLnTotals(0).Move lacLnTotals(1).Left - lacLnTotals(0).Width, lacLnTotals(2).Top    'lacLnTotals.Top + llAdjTop
    lacSchStatus.Move lacLnTotals(2).Left - lacSchStatus.Width, lacLnTotals(2).Top + lacLnTotals(2).height + 15 'lacSchStatus.Top + llAdjTop '- 30
    lacCreditInfo.Move lacSchStatus.Left - lacSchStatus.Width - lacCreditInfo.Width, lacSchStatus.Top  'lacCreditInfo.Top + llAdjTop '- 30
    lacPayInfo.Move lacLnTotals(2).Left - lacPayInfo.Width, lacSchStatus.Top + lacSchStatus.height + 15 'lacPayInfo.Top + llAdjTop '- 30
    lacAudTotals.Move lacLnTotals(2).Left - lacAudTotals.Width, lacPayInfo.Top + lacPayInfo.height + 15 'lacAudTotals.Top + llAdjTop '- 30


    cmcShtTitle.Top = cmcShtTitle.Top + llAdjTop
    cmcAvails.Top = cmcAvails.Top + llAdjTop
    cmcErase.Top = cmcErase.Top + llAdjTop
    'cmcMkt.Top = cmcMkt.Top + llAdjTop
    cmcRates.Top = cmcRates.Top + llAdjTop
    cmcHold.Top = cmcHold.Top + llAdjTop
    'cmcBills.Top = cmcBills.Top + llAdjTop
    cmcUndo.Top = cmcUndo.Top + llAdjTop
    'cmcErase.Top = cmcErase.Top + llAdjTop
    cmcMkt.Top = cmcMkt.Top + llAdjTop
    cmcDone.Top = cmcDone.Top + llAdjTop
    cmcCancel.Top = cmcCancel.Top + llAdjTop
    cmcSaveStay.Top = cmcSaveStay.Top + llAdjTop
    cmcUpdate.Top = cmcUpdate.Top + llAdjTop
    cmcDemoBar.Top = cmcDemoBar.Top + llAdjTop
    cmcProj.Top = cmcProj.Top + llAdjTop

    imcShare(1).Left = Contract.Width - imcShare(1).Width - 90 ' plcLine.Left + plcLine.Width - imcPrt.Width
    imcShare(0).Left = imcShare(1).Left - imcShare(0).Width
   '10843 remove dead code
'    If tgSpf.sCLnStdQt = "Y" Then
'        pbcQTPrice.Left = lacPrice(0).Left + lacPrice(0).Width - pbcQTPrice.Width
'        lbcQtPrice.Move pbcLine.Left + pbcQTPrice.Left + pbcQTPrice.Width - lbcQtPrice.Width, pbcLine.Top + pbcQTPrice.Top - lbcQtPrice.height
'    End If

    pbcSelect.Picture = LoadPicture("")
    plcSelect.Width = imcShare(0).Left - plcSelect.Left - 90
    pbcSelect.Move plcSelect.Left + fgBevelX, plcSelect.Top + fgBevelY, plcSelect.Width - 2 * fgBevelX
    tmStepCtrls(3).fBoxW = pbcSelect.Width - tmStepCtrls(1).fBoxW - tmStepCtrls(2).fBoxW - 60
    If tmStepCtrls(3).fBoxW > tmStepCtrls(1).fBoxW Then
        tmStepCtrls(3).fBoxW = tmStepCtrls(1).fBoxW
    End If
    pbcSelect.Width = tmStepCtrls(3).fBoxX + tmStepCtrls(3).fBoxW + 15
    plcSelect.Width = pbcSelect.Width + 2 * fgBevelX
    mPaintStep

    pbcRBVeh(0).Picture = LoadPicture("")
    pbcRBVeh(1).Picture = LoadPicture("")
    llMax = 0
    'For ilLoop = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmRBCtrls) Step 1
        tmRBCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmRBCtrls(ilLoop).fBoxW)
        Do While (tmRBCtrls(ilLoop).fBoxW Mod 15) <> 0
            tmRBCtrls(ilLoop).fBoxW = tmRBCtrls(ilLoop).fBoxW + 1
        Loop
        tmRBCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmRBCtrls(ilLoop).fBoxX)
        Do While (tmRBCtrls(ilLoop).fBoxX Mod 15) <> 0
            tmRBCtrls(ilLoop).fBoxX = tmRBCtrls(ilLoop).fBoxX + 1
        Loop
        If ilLoop > 1 Then
            'If tmRBCtrls(ilLoop).fBoxX > 90 Then
                If tmRBCtrls(ilLoop - 1).fBoxX + tmRBCtrls(ilLoop - 1).fBoxW + 15 < tmRBCtrls(ilLoop).fBoxX Then
                    tmRBCtrls(ilLoop - 1).fBoxW = tmRBCtrls(ilLoop - 1).fBoxW + 15
                ElseIf tmRBCtrls(ilLoop - 1).fBoxX + tmRBCtrls(ilLoop - 1).fBoxW + 15 > tmRBCtrls(ilLoop).fBoxX Then
                    tmRBCtrls(ilLoop - 1).fBoxW = tmRBCtrls(ilLoop - 1).fBoxW - 15
                End If
            'End If
        End If
        If tmRBCtrls(ilLoop).fBoxX + tmRBCtrls(ilLoop).fBoxW + 15 > llMax Then
            llMax = tmRBCtrls(ilLoop).fBoxX + tmRBCtrls(ilLoop).fBoxW + 15
        End If
    Next ilLoop
    pbcRBVeh(0).Width = llMax
    pbcRBVeh(1).Width = llMax
    
    pbcDemoBar(0).BackColor = WHITE
    pbcDemoBar(1).BackColor = WHITE
    pbcDemoBar(2).BackColor = WHITE
    pbcDemoBar(3).BackColor = WHITE
    pbcLnTotal.BackColor = WHITE
    pbcLine.BackColor = WHITE
    pbcHeader.BackColor = WHITE
    
    
    'gSetPictureBoxFontSize Contract
    'pbcAirSTab.Left = -200
    'pbcAirTab.Left = -200
    pbcClickFocus.Left = -200
    pbcDBSTab.Left = -200
    pbcDBTab.Left = -200
    pbcDBSTab.Left = -200
    pbcDBTab.Left = -200
    pbcEatTab(0).Left = -200
    pbcEatTab(1).Left = -200
    pbcHdSTab.Left = -200
    pbcHdTab.Left = -200
    pbcLnSTab.Left = -200
    pbcLnTab.Left = -200
    pbcSaveStop.Left = -200
    pbcShareSTab.Left = -200
    pbcShareTab.Left = -200
    pbcStepSTab.Left = -200
    pbcStepTab.Left = -200
    lacCode.Move plcSelect.Left + plcSelect.Width, plcSelect.Top
    lacPrice(2).Move pbcLine.Left - plcLine.Left + 30, pbcLine.Top - plcLine.Top - lacPrice(2).height - 60, edcLineNo(0).Width
    'grdCPMBuy.Width = (2 * pbcLine.Width) / 3
    grdCPMBuy.Width = (8 * pbcLine.Width) / 9
    grdCPMBuy.Move pbcLine.Left + (pbcLine.Width - grdCPMBuy.Width) / 2, pbcLine.Top, grdCPMBuy.Width, pbcLine.height
    pbcSumType(2).Move grdCPMBuy.Left, grdCPMBuy.Top - cmcPackage(1).height - 60
    pbcSumType(2).Visible = False
    cmcPackage(1).Move pbcSumType(2).Left + pbcSumType(2).Width + 60, grdCPMBuy.Top - cmcPackage(1).height - 60
    cmcPackage(1).Visible = False
    cmcTerminate(1).Move cmcPackage(1).Left + cmcPackage(1).Width + 15, cmcPackage(1).Top
    cmcTerminate(1).Visible = False
    mGridCPMBuyColumns
    mGridCPMBuyTitles
    'Made part of Ad Server as function of As Server
    'mPopCPMPosition
    'mPopCPMPriority
    
    'mPopCPMCopyType
    'mPopPodTarget
    gGrid_IntegralHeight grdCPMBuy, fgBoxGridH + 15
    gGrid_FillWithRows grdCPMBuy, fgBoxGridH + 15
    For llRow = Contract.grdCPMBuy.FixedRows To Contract.grdCPMBuy.rows - 1 Step 1
        Contract.grdCPMBuy.Row = llRow
        Contract.grdCPMBuy.Col = CPMID
        Contract.grdCPMBuy.CellBackColor = LIGHTYELLOW
    Next llRow
    
    edcLineNo(1).FontName = "Arial"
    edcLineNo(1).FontSize = 6.75
    edcLineNo(1).Move grdCPMBuy.Left + grdCPMBuy.ColPos(CPMID) + 3 * pbcHeader.TextWidth("#") + 15, grdCPMBuy.Top + 15, grdCPMBuy.ColWidth(CPMID) - 3 * pbcHeader.TextWidth("#") - 15, fgBoxGridH - 120

    edcLineNo(2).FontName = "Arial"
    edcLineNo(2).FontSize = 6.75
    edcLineNo(3).FontName = "Arial"
    edcLineNo(3).FontSize = 6.75
    edcLineNo(4).FontName = "Arial"
    edcLineNo(4).FontSize = 6.75
    edcLineNo(5).FontName = "Arial"
    edcLineNo(5).FontSize = 6.75

    edcLineNo(2).Move grdCPMBuy.Left + grdCPMBuy.ColPos(CPMIMPRESSIONS), grdCPMBuy.Top + grdCPMBuy.height + 30, grdCPMBuy.ColWidth(CPMIMPRESSIONS) + 15, fgBoxGridH + 15
    edcLineNo(2).Visible = False
    edcLineNo(3).Move grdCPMBuy.Left + grdCPMBuy.ColPos(CPMCPMVALUE), grdCPMBuy.Top + grdCPMBuy.height + 30, grdCPMBuy.ColWidth(CPMCPMVALUE) + 15, fgBoxGridH + 15
    edcLineNo(3).Visible = False
    edcLineNo(4).Move grdCPMBuy.Left + grdCPMBuy.ColPos(CPMCOST), grdCPMBuy.Top + grdCPMBuy.height + 30, grdCPMBuy.ColWidth(CPMCOST), fgBoxGridH + 15
    edcLineNo(4).Visible = False
    edcLineNo(5).Move grdCPMBuy.Left + grdCPMBuy.ColPos(CPMIMPRESSIONS) - grdCPMBuy.ColWidth(CPMCOST) - 60, grdCPMBuy.Top + grdCPMBuy.height + 60, grdCPMBuy.ColWidth(CPMCOST), fgBoxGridH + 15
    edcLineNo(5).Visible = False

    'For llRow = grdSelect.FixedRows To grdSelect.Rows - 1 Step 1
    '    grdCPMBuy.RowHeight(llRow) = fgBoxGridH + 15
    'Next llRow
    mClearCPMBuyGrid
    
    mResizeDemoBar
    'If (tgUrf(0).sSportPropOnly = "Y") Or (igSportsSystem = 1) Then
    '    'Multi-Media
    '    Set tscLine.SelectedItem = tscLine.Tabs.Item(1)
    'Else
    '    mActiveLnTab True
    'End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitDmShow                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mInitDmShow()
'
'   mInitDmShow ilBoxNo
'   Where:
'
    Dim ilIndex As Integer
    Dim slStr As String
    Dim ilBoxNo As Integer
    For ilBoxNo = imLBCTCtrls To UBound(tmDmCtrls) Step 1
        Select Case ilBoxNo 'Branch on box type (control)
            Case DMCPPCPMINDEX
                If imCppCpm = 0 Then
                    slStr = "N/A"
                ElseIf imCppCpm = 1 Then
                    slStr = "CPM"
                ElseIf imCppCpm = 2 Then
                    slStr = "CPP"
                Else
                    slStr = ""
                End If
                gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
            Case DMHIDEDEMOINDEX
                If imHideDemo = 0 Then
                    slStr = "No"
                ElseIf imHideDemo = 1 Then
                    slStr = "Yes"
                Else
                    slStr = ""
                End If
                gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
            Case DMDEMOINDEX, DMDEMOINDEX + 2, DMDEMOINDEX + 4, DMDEMOINDEX + 6
                ilIndex = (ilBoxNo - DMDEMOINDEX) \ 2
                If lbcDemo(ilIndex).ListIndex < 0 Then
                    slStr = ""
                Else
                    slStr = lbcDemo(ilIndex).List(lbcDemo(ilIndex).ListIndex)
                End If
                gSetShow pbcDm, slStr, tmDmCtrls(ilBoxNo)
            Case DMVALUEINDEX, DMVALUEINDEX + 2, DMVALUEINDEX + 4, DMVALUEINDEX + 6
                ilIndex = (ilBoxNo - DMVALUEINDEX) \ 2
                If imCppCpm = 2 Then
                    gFormatStr smTarget(ilIndex), FMTLEAVEBLANK + FMTCOMMA, 0, slStr
                Else
                    gFormatStr smTarget(ilIndex), FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                End If
                gSetShow pbcDm, smTarget(ilIndex), tmDmCtrls(ilBoxNo)
        End Select
    Next ilBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitLnShow                     *
'*                                                     *
'*             Created:8/03/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize show values         *
'*                                                     *
'*******************************************************
Public Sub mInitLnShow()
    Dim ilRowNo As Integer
    Dim ilBoxNo As Integer
    Dim slStr As String
    Dim ilSvLnRowNo
    Dim ilAcqCostSpotRate As Integer
    Dim slLineType As String
    ReDim ilFlDays(0 To 6) As Integer
    ilSvLnRowNo = imLnRowNo
    For ilRowNo = LBound(tgClfCntr) + 1 To UBound(tgClfCntr) Step 1
        slLineType = mGetLineType(ilRowNo)
        For ilBoxNo = VEHINDEX To LINECOMMINDEX Step 1
            Select Case ilBoxNo 'Branch on box type (control)
                Case VEHINDEX 'Vehicle
                    slStr = smLnSave(1, ilRowNo)
                    gSetShow pbcLine, slStr, tmLnCtrls(ilBoxNo)
                    smLnShow(VEHINDEX, ilRowNo) = tmLnCtrls(ilBoxNo).sShow
                Case DPINDEX 'Daypart
                    '4/11/19: this call is not required
                    'mPrgPop ilRowNo
                    'If imTerminate Then
                    '    Exit Sub
                    'End If
                    mObtainLineFlags ilRowNo, True, hmCHF, hmClf, hmSdf, hmPsf, hmSmf, imCntrVefCode, imVpfIndex, imTerminate

                    mGetFlightDays ilRowNo, ilFlDays()
                    slStr = mSetDPShowName(ilRowNo, ilBoxNo, ilFlDays())
                Case OV1INDEX
                    slStr = ""
                    '10256
                    bmAct1PackageEnable = mIsPackageForActOne(slLineType, ilRowNo)
                    If Trim$(smLnSave(29, ilRowNo)) <> "" And bmAct1PackageEnable Then
                        slStr = "A"
                    Else
                        If imLnSave(8, ilRowNo) = 0 Then
                            slStr = "D"
                        Else
                            If Left$(tmLnCtrls(DPINDEX).sShow, 1) = "*" Then
                                slStr = "*"
                            ElseIf (imLnSave(20, ilRowNo) > 0) Or (imLnSave(21, ilRowNo) > 0) Then
                                slStr = "*"
                            End If
                        End If
                    End If
                    gSetShow pbcLine, slStr, tmLnCtrls(ilBoxNo)
                    smLnShow(OV1INDEX, ilRowNo) = tmLnCtrls(ilBoxNo).sShow
                Case OV2INDEX
                    slStr = mOV2Defined(ilRowNo)
                    gSetShow pbcLine, slStr, tmLnCtrls(ilBoxNo)
                    smLnShow(OV2INDEX, ilRowNo) = tmLnCtrls(ilBoxNo).sShow
                Case LENINDEX
                    slStr = smLnSave(16, ilRowNo)
                    gSetShow pbcLine, slStr, tmLnCtrls(ilBoxNo)
                    smLnShow(LENINDEX, ilRowNo) = tmLnCtrls(ilBoxNo).sShow
                Case PRICEINDEX 'Price
                    'Handle case where the acq not equal tospot and it should hove been equal
                    ilAcqCostSpotRate = tgClfCntr(ilRowNo - 1).iAcqCostSpotRate
                    tgClfCntr(ilRowNo - 1).iAcqCostSpotRate = 0
                    imLnRowNo = ilRowNo
                    If imStep1Index <> 1 Then    'Model new order =1
                        mInitLnTotals ilRowNo, imLnTotalType, PRICEINDEX
                    Else
                        'use mLnTotals instead of mInitLnTotals to compute package values
                        mLnTotals ilRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
                        ''mGetDate True    'To obtain pattern flag
                        mGetLnPriceInfo imLnRowNo, slStr, imLnTotalType, PRICEINDEX
                    End If
                    tgClfCntr(ilRowNo - 1).iAcqCostSpotRate = ilAcqCostSpotRate
                Case LINECOMMINDEX
                    slStr = smLnComment(ilRowNo)
                    gSetShow pbcLine, slStr, tmLnCtrls(ilBoxNo)
                    smLnShow(LINECOMMINDEX, ilRowNo) = tmLnCtrls(ilBoxNo).sShow
            End Select
        Next ilBoxNo
        imLnRowNo = ilRowNo
        If (plcDemoBar.Visible) And (ilSvLnRowNo = ilRowNo) Then
            mBuildWkInfo False, True, False
        End If
    Next ilRowNo
    imLnRowNo = ilSvLnRowNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitLoad                       *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize modular             *
'*                                                     *
'*******************************************************
Private Sub mInitLoad()
    lmPlcLineHeight = -1
    lmPbcLineHeight = -1
    bmViewedAvailTab = False
    bmViewedProtectionTab = False
    bmViewedResearchTab = False
    imCPMFromArrow = False
    imCPMSortMethod = 0
    imPriorityAvfCode = -1
    imPositionAvfCode = -1
    mInitLoadSub LINECOMMINDEX, OV1INDEX, SPOTSINDEX
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitNewLine                    *
'*                                                     *
'*             Created:8/16/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize line                *
'*                                                     *
'*******************************************************
Public Sub mInitNewLine()
    Dim ilLoop As Integer
    Dim ilLineNo As Integer

    ilLineNo = 0
    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If (tgClfCntr(ilLoop).ClfRec.iLine > ilLineNo) And (tgClfCntr(ilLoop).iStatus >= 0) Then
            ilLineNo = tgClfCntr(ilLoop).ClfRec.iLine
        End If
    Next ilLoop
    For ilLoop = LBound(tgDelClf) To UBound(tgDelClf) - 1 Step 1
        If (tgDelClf(ilLoop).ClfRec.iLine > ilLineNo) And (tgDelClf(ilLoop).iStatus >= 0) Then
            ilLineNo = tgDelClf(ilLoop).ClfRec.iLine
        End If
    Next ilLoop
    tgClfCntr(imLnRowNo).ClfRec.iLine = ilLineNo + 1
    'If imLnRowNo <= LBound(tgClfCntr) Then
    '    tgClfCntr(imLnRowNo).ClfRec.iLine = imLnRowNo + 1
    'Else
    '    tgClfCntr(imLnRowNo).ClfRec.iLine = tgClfCntr(imLnRowNo - 1).ClfRec.iLine + 1
    'End If
    tgClfCntr(imLnRowNo).iStatus = -1
    tgClfCntr(imLnRowNo).lRecPos = 0
    tgClfCntr(imLnRowNo).iFirstCff = -1
    tgClfCntr(imLnRowNo).iFirstCgf = -1
    tgClfCntr(imLnRowNo).lFirstAvail = -1
    tgClfCntr(imLnRowNo).iCancel = False
    tgClfCntr(imLnRowNo).iOverride = False
    tgClfCntr(imLnRowNo).iGame = False
    tgClfCntr(imLnRowNo).iLibBuy = False
    tgClfCntr(imLnRowNo).iInPast = False
    tgClfCntr(imLnRowNo).lUnbilledDate = 0
    tgClfCntr(imLnRowNo).lEndBilledDate = 0
    tgClfCntr(imLnRowNo).iChgBilledPrice = False
    tgClfCntr(imLnRowNo).iResearch = False
    tgClfCntr(imLnRowNo).iPriceSet = 1
    tgClfCntr(imLnRowNo).iSPChg = False
    tgClfCntr(imLnRowNo).ClfRec.iNoGames = 0
    tgClfCntr(imLnRowNo).ClfRec.iSpotsOrdered = 0
    tgClfCntr(imLnRowNo).ClfRec.sSchStatus = " "
    tgClfCntr(imLnRowNo).ClfRec.iPriority = -1
    tgClfCntr(imLnRowNo).ClfRec.sDelete = "N"
    tgClfCntr(imLnRowNo).ClfRec.sPreempt = "P"
    tgClfCntr(imLnRowNo).ClfRec.iSpotsWrite = 0
    tgClfCntr(imLnRowNo).ClfRec.iSpotsBooked = 0
    tgClfCntr(imLnRowNo).ClfRec.iDnfCode = 0
    tgClfCntr(imLnRowNo).ClfRec.iMnfDemo = 0
    tgClfCntr(imLnRowNo).ClfRec.lCPP = 0
    tgClfCntr(imLnRowNo).ClfRec.lCPM = 0
    tgClfCntr(imLnRowNo).ClfRec.lGrImp = 0
    tgClfCntr(imLnRowNo).ClfRec.sHideCBS = "N"
    tgClfCntr(imLnRowNo).ClfRec.iVefCode = 0
    tgClfCntr(imLnRowNo).ClfRec.iBBOpenLen = 0
    tgClfCntr(imLnRowNo).ClfRec.iBBCloseLen = 0
    tgClfCntr(imLnRowNo).ClfRec.sOV2DefinedBits = Chr(&H0)
    tgClfCntr(imLnRowNo).iOrigAnySpots = 0  '-1
    tgClfCntr(imLnRowNo).sCurrentPrice = ""
    tgClfCntr(imLnRowNo).iLineSchd = False
    tgClfCntr(imLnRowNo).iMonThruToDaysSpots = 0
    '12/16/14: Add Hide/Show Hidden Lines
    tgClfCntr(imLnRowNo).bShowLine = True
    '4/16/15
    tgClfCntr(imLnRowNo).bPkExpanded = True 'False
    '10/6/15
    tgClfCntr(imLnRowNo).sLineChgd = "Y"
    tgClfCntr(imLnRowNo).bLnPriceSet = False
    For ilLoop = imLB1Or2 To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
        smLnSave(ilLoop, imLnRowNo + 1) = ""
    Next ilLoop
    For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
        imLnSave(ilLoop, imLnRowNo + 1) = -1
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmDBCtrls) - 1 Step 1
        tmDBCtrls(ilLoop).sShow = ""
    Next ilLoop
    smLnSave(19, imLnRowNo + 1) = "1.00"
    smLnComment(imLnRowNo + 1) = ""
    smLnInitComment(imLnRowNo + 1) = ""
    imLnSave(22, imLnRowNo + 1) = 1     '1st position, No
    imLnSave(23, imLnRowNo + 1) = 1     'Island, No
    '4/15/19: Obtain default from vehicle
    'If tmOV1Ctrls(OVCOPYINDEX).iReq = True Then
    '    imLnSave(31, imLnRowNo + 1) = -1     'Live Copy flag not set to force user to answer question
    'Else
    '    imLnSave(31, imLnRowNo + 1) = 1     'Live Copy flag, set to Recorded
    'End If
    imLnSave(31, imLnRowNo + 1) = -1
    
    smLnSave(29, imLnRowNo + 1) = ""  'ACT1 lineup
    imLnSave(32, imLnRowNo + 1) = -1    'ACT1 Stored Time
    imLnSave(33, imLnRowNo + 1) = -1    'ACT1 Stored spots
    imLnSave(34, imLnRowNo + 1) = -1    'ACT1 stored clear %
    imLnSave(35, imLnRowNo + 1) = -1    'ACT1 Daypart Filter
    
    imLnCommShowOn(0, imLnRowNo + 1) = -1
    imLnCommShowOn(1, imLnRowNo + 1) = -1
    imLnCommShowOn(2, imLnRowNo + 1) = -1
    imLnCommShowOn(3, imLnRowNo + 1) = -1
    imLnCommShowOn(4, imLnRowNo + 1) = -1
    imLnInitCommShowOn(0, imLnRowNo + 1) = -1
    imLnInitCommShowOn(1, imLnRowNo + 1) = -1
    imLnInitCommShowOn(2, imLnRowNo + 1) = -1
    imLnInitCommShowOn(3, imLnRowNo + 1) = -1
    imLnInitCommShowOn(4, imLnRowNo + 1) = -1
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitNoShow                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mInitNoShow()
'
'   mInitNoShow
'   Where:
'
    Dim slStr As String
    Dim ilBoxNo As Integer
    For ilBoxNo = imLBCTCtrls To UBound(tmNoCtrls) Step 1
        Select Case ilBoxNo 'Branch on box type (control)
            Case NOPROPINDEX   'Proposal Number
                slStr = smPropNo
                gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            Case NOESTINDEX 'Estimate Number
                slStr = smEstNo
                gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            Case NORESVADVTINDEX   'Reservation Advertiser
                slStr = smResvAdvt
                gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            Case NORESVORDERINDEX   'Reservation Order #
                slStr = smInitResvNo
                gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            Case NOEDICLIENTCODEINDEX 'EDI Client Code (Field 25 in Record 31)
                slStr = smEDIClientCode
                gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            Case NOEDIPRODUCTCODEINDEX 'EDI Product Code (Field 27 in Record 31)
                slStr = smEDIProductCode
                gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            'Case NOINVPROJCODEINDEX 'EDI Client Code (Field 25 in Record 31)
            '    slStr = smInvProjCode
            '    gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            'Case NOINVSMSNOINDEX 'EDI Product Code (Field 27 in Record 31)
            '    slStr = smInvSMSNo
            '    gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
            Case NODATEINDEX 'Date Needed
                slStr = smDtNeeded
                gSetShow pbcNumber, slStr, tmNoCtrls(NODATEINDEX)
        End Select
    Next ilBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitPTShow                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mInitPTShow()
'
'   mInitDmShow ilBoxNo
'   Where:
'
    Dim slStr As String
    Dim ilBoxNo As Integer

    For ilBoxNo = imLBCTCtrls To UBound(tmPTCtrls) Step 1
        Select Case ilBoxNo 'Branch on box type (control)
            Case PTTRADEINDEX
                slStr = smPctTrade
                gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
                gSetShow pbcPctTrade, slStr, tmPTCtrls(ilBoxNo)
            Case PTAGYCOMMINDEX
                If imAgyComm = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcPctTrade, slStr, tmPTCtrls(ilBoxNo)
        End Select
    Next ilBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitRSShow                     *
'*                                                     *
'*             Created:8/03/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize show values         *
'*                                                     *
'*******************************************************
Public Sub mInitRSShow()
'
'   mInitRSShow
'   Where:
'
    Dim slStr As String
    Dim ilBoxNo As Integer

    For ilBoxNo = imLBCTCtrls To UBound(tmRSCtrls) Step 1
        Select Case ilBoxNo 'Branch on box type (control)
            Case RSREV1INDEX   'Competitive
                If (lbcRevSet(0).ListIndex > 1) Or ((lbcRevSet(0).ListIndex = 1) And (smRevSetName(0) <> "")) Then
                    slStr = lbcRevSet(0).List(lbcRevSet(0).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow pbcRevenue, slStr, tmRSCtrls(ilBoxNo)
            Case RSREV2INDEX   'Competitive
                If (lbcRevSet(1).ListIndex > 1) Or ((lbcRevSet(1).ListIndex = 1) And (smRevSetName(1) <> "")) Then
                    slStr = lbcRevSet(1).List(lbcRevSet(1).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow pbcRevenue, slStr, tmRSCtrls(ilBoxNo)
            Case RSREV3INDEX   'Competitive
                If (lbcRevSet(2).ListIndex > 1) Or ((lbcRevSet(2).ListIndex = 1) And (smRevSetName(2) <> "")) Then
                    slStr = lbcRevSet(2).List(lbcRevSet(2).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow pbcRevenue, slStr, tmRSCtrls(ilBoxNo)
            Case RSREV4INDEX   'Competitive
                If (lbcRevSet(3).ListIndex > 1) Or ((lbcRevSet(3).ListIndex = 1) And (smRevSetName(3) <> "")) Then
                    slStr = lbcRevSet(3).List(lbcRevSet(3).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow pbcRevenue, slStr, tmRSCtrls(ilBoxNo)
            Case RSREV5INDEX   'Competitive
                If (lbcRevSet(4).ListIndex > 1) Or ((lbcRevSet(4).ListIndex = 1) And (smRevSetName(4) <> "")) Then
                    slStr = lbcRevSet(4).List(lbcRevSet(4).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow pbcRevenue, slStr, tmRSCtrls(ilBoxNo)
        End Select
     Next ilBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitSBShow                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mInitSBShow()
'
'   mInitSBShow ilBoxNo
'   Where:
'
    Dim ilIndex As Integer
    Dim slStr As String
    Dim ilBoxNo As Integer

    For ilBoxNo = imLBCTCtrls To UBound(tmSBCtrls) Step 1
        Select Case ilBoxNo
            Case SBYCOMPANYINDEX, SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                ilIndex = ilBoxNo \ 2
                If ilBoxNo = SBYCOMPANYINDEX Then
                    If imShareBudgetIndex(ilIndex) < 2 Then
                        slStr = ""
                    Else
                        slStr = lbcShareBudget(0).List(imShareBudgetIndex(ilIndex))
                    End If
                Else
                    If imShareBudgetIndex(ilIndex) < 2 Then
                        slStr = ""
                    Else
                        slStr = lbcShareBudget(1).List(imShareBudgetIndex(ilIndex))
                    End If
                End If
                gSetShow pbcSPerson, slStr, tmSBCtrls(ilBoxNo)
            Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
                ilIndex = (ilBoxNo - 1) \ 2
                If imShareBudgetIndex(ilIndex) > 1 Then
                    slStr = smShareBudgetPct(ilIndex)
                    gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
                Else
                    slStr = ""
                End If
                gSetShow pbcShareBudget, slStr, tmSBCtrls(ilBoxNo)
        End Select
    Next ilBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mInitSPShow                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mInitSPShow()
'
'   mInitSPShow ilBoxNo
'   Where:
'
    Dim ilIndex As Integer
    Dim slStr As String
    Dim ilBoxNo As Integer
    Dim ilPos As Integer
    Dim slFirst As String
    Dim slLast As String

    'For ilBoxNo = LBound(tmSPCtrls) To UBound(tmSPCtrls) Step 1
    For ilBoxNo = imLBCTCtrls To UBound(tmSPCtrls) Step 1
        Select Case ilBoxNo
            'Case SPNAME1INDEX, SPNAME2INDEX, SPNAME3INDEX, SPNAME4INDEX, SPNAME5INDEX, SPNAME6INDEX, SPNAME7INDEX, SPNAME8INDEX, SPPNAMEINDEX, SPMNAMEINDEX 'Name
            Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                'ilIndex = ilBoxNo \ 2
                ilIndex = (ilBoxNo - 1) \ imSPNoCol
                    If imSlspIndex(ilIndex) < 2 Then
                        slStr = ""
                    Else
                        slStr = lbcSPerson(0).List(imSlspIndex(ilIndex))
                    End If
                If (Not igSlfFirstNameFirst) Then
                    ilPos = InStr(slStr, ",")
                    If ilPos > 0 Then
                        slLast = Left$(slStr, ilPos - 1)
                        slFirst = right$(slStr, Len(slStr) - ilPos - 1)
                        slStr = slFirst & " " & slLast
                    End If
                End If
                gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
                ilIndex = (ilBoxNo - 1) \ imSPNoCol
                If imSlspIndex(ilIndex) > 1 Then
                    slStr = smSlspField2(ilIndex)
                    If tgSpf.sSubCompany <> "Y" Then
                        If tgSpf.sCommByCntr = "Y" Then
                            gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 2, slStr
                        Else
                            gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 4, slStr
                        End If
                    End If
                Else
                    slStr = ""
                End If
                gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
                ilIndex = (ilBoxNo - 1) \ imSPNoCol
                If imSlspIndex(ilIndex) > 1 Then
                    slStr = smSlspField3(ilIndex)
                    gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 4, slStr
                Else
                    slStr = ""
                End If
                gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
                ilIndex = (ilBoxNo - 1) \ imSPNoCol
                If imSlspIndex(ilIndex) > 1 Then
                    slStr = smSlspField4(ilIndex)
                    gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 2, slStr
                Else
                    slStr = ""
                End If
                gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
        End Select
    Next ilBoxNo
End Sub

Private Sub mkcPhone_Change()
    mSetChg imHdBoxNo
End Sub

Private Sub mkcPhone_GotFocus()
    'Buyer and phone set at same time
    imPhoneFirstTime = False
    gCtrlGotFocus ActiveControl
End Sub

Private Sub mkcPhone_KeyUp(KeyCode As Integer, Shift As Integer)
    If ((Shift And vbCtrlMask) > 0) And (KeyCode >= KEYLEFT) And (KeyCode <= KeyDown) Then
        imDirProcess = KeyCode 'mDirection 0
        pbcHdTab.SetFocus
        Exit Sub
    End If
End Sub

Private Sub mkcPhone_LostFocus()
    Dim slStr As String
    slStr = mkcPhone.Text
    mSetSource 7, slStr
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mLenPop                         *
'*                                                     *
'*             Created:7/21/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection length  *
'*                      box                            *
'*                                                     *
'*******************************************************
Public Sub mLenPop()
    'Dim ilRet As Integer
    Dim ilVpfIndex As Integer
    Dim ilVefCode As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilLen As Integer
    Dim ilFound As Integer

    If smLnSave(1, imLnRowNo) = "" Then
        Exit Sub
    End If
    ilVefCode = imCntrVefCode
    ilVpfIndex = imVpfIndex
    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
    If imTerminate Then
        Exit Sub
    End If
    ilFound = False
    lbcLen.Clear
    lbcBBLen.Clear
    If imVpfIndex >= 0 Then
        ilIndex = LBound(tgVpf(imVpfIndex).iSLen)
        For ilLoop = LBound(tgVpf(imVpfIndex).iSLen) To UBound(tgVpf(imVpfIndex).iSLen) Step 1
            If tgVpf(imVpfIndex).iSLen(ilLoop) <> 0 Then
                ilFound = True
                ilIndex = ilIndex + 1
                lbcLen.AddItem Trim$(str$(tgVpf(imVpfIndex).iSLen(ilLoop)))
                If tgVpf(imVpfIndex).iSLen(ilLoop) < 30 Then
                    lbcBBLen.AddItem Trim$(str$(tgVpf(imVpfIndex).iSLen(ilLoop)))
                End If
            End If
        Next ilLoop
    Else
        For ilLoop = LBound(tgVpf) To UBound(tgVpf) Step 1
            For ilLen = LBound(tgVpf(ilLoop).iSLen) To UBound(tgVpf(ilLoop).iSLen) Step 1
                If tgVpf(ilLoop).iSLen(ilLen) <> 0 Then
                    gFindMatch Trim$(str$(tgVpf(ilLoop).iSLen(ilLen))), 0, lbcLen
                    If gLastFound(lbcLen) < 0 Then
                        lbcLen.AddItem Trim$(str$(tgVpf(ilLoop).iSLen(ilLen)))
                        If tgVpf(ilLoop).iSLen(ilLen) < 30 Then
                            lbcBBLen.AddItem Trim$(str$(tgVpf(ilLoop).iSLen(ilLen)))
                        End If
                    End If
                End If
            Next ilLen
        Next ilLoop
    End If
    lbcBBLen.AddItem "[None]", 0
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mLnCommentBranch                *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if comment pop-up    *
'*                      should be shown                *
'*                                                     *
'*******************************************************
Public Function mLnCommentBranch() As Integer
    Dim slStr As String
    Dim ilIndex As Integer
    If imInCommentBranch Then
        imInCommentBranch = False
        imDoubleClickName = False
        mLnCommentBranch = False
        Exit Function
    End If
   '10843 remove dead code
'    If tgSpf.sCLnStdQt = "Y" Then
'        If UCase$(edcLNDropDown.Text) <> "C" Then
'            slStr = Trim$(edcLNDropDown.Text)
'            If slStr <> "" Then
'                ilIndex = Val(slStr)
'                If (ilIndex >= 1) And (ilIndex <= 8) Then
'                    gSetShow pbcLine, slStr, tmLnCtrls(LINECOMMINDEX)
'                    smLnShow(LINECOMMINDEX, imLnRowNo) = tmLnCtrls(LINECOMMINDEX).sShow
'                    edcLNDropDown.Visible = False
'                    imLnTotalType = ilIndex
'                    lacPrice_Click 0
'                    imLnBoxNo = WKSPOTSINDEX
'                    mLnEnableBox imLnBoxNo
'                    mLnCommentBranch = True
'                    Exit Function
'                End If
'            End If
'            imDoubleClickName = False
'            mLnCommentBranch = False
'            Exit Function
'        End If
'    Else
        If Contract.grdCPMBuy.Visible Then
            gMatchLookAhead edcLNDropDown, lbcComment(1), imBSMode, imComboBoxIndex
            If (lbcComment(1).ListIndex <= 0) Then
                edcComment.Text = ""
                Contract.grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMCOMMENT) = ""
                imDoubleClickName = False
                mLnCommentBranch = False
                Exit Function
            End If
            If (Not imDoubleClickName) And (Contract.grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMCOMMENT) <> "") Then
                imDoubleClickName = False
                mLnCommentBranch = False
                Exit Function
            End If
        Else
            gMatchLookAhead edcLNDropDown, lbcComment(1), imBSMode, imComboBoxIndex
            If (lbcComment(1).ListIndex <= 0) Then
                edcComment.Text = ""
                smLnComment(imLnRowNo) = ""
                imDoubleClickName = False
                mLnCommentBranch = False
                Exit Function
            End If
            If (Not imDoubleClickName) And (smLnComment(imLnRowNo) <> "") Then
                imDoubleClickName = False
                mLnCommentBranch = False
                Exit Function
            End If
        End If
    'End If
    imDoubleClickName = False
    mBPlatePop
    imInCommentBranch = True
    plcComment.Visible = True
    On Error Resume Next
    If Not imUpdateAllowed Then
        plcComment.Enabled = False
    Else
        plcComment.Enabled = True
        edcComment.SetFocus
    End If
    '2/7/09: Added to handle case where focus can't be set
    On Error GoTo 0
    mLnCommentBranch = True
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mLnDirection                    *
'*                                                     *
'*             Created:9/10/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move to box indicated by       *
'*                      user direction                 *
'*                                                     *
'*******************************************************
Public Sub mLnDirection(ilMoveDir As Integer)
'
'   mLnDirection ilMove
'   Where:
'       ilMove (I)- 0=Up; 1= down; 2= left; 3= right
'
    Dim ilLnMax As Integer
    mLnSetShow imLnBoxNo
    If (smLnSave(1, UBound(tgClfCntr) + 1) <> "") And (tgClfCntr(UBound(tgClfCntr)).iFirstCff <> -1) Then
        ilLnMax = UBound(tgClfCntr)
    Else
        ilLnMax = UBound(tgClfCntr) - 1
    End If
    Select Case ilMoveDir
        Case KEYUP  'Up
            If imLnRowNo > 1 Then
                imLnRowNo = imLnRowNo - 1
                If imLnRowNo < vbcLines.Value + 1 Then
                    imSettingValue = True
                    vbcLines.Value = vbcLines.Value - 1
                End If
            Else
                imLnRowNo = ilLnMax + 1 'UBound(tgClfCntr) + 1
                imSettingValue = True
                If imLnRowNo <= vbcLines.LargeChange + 1 Then
                    vbcLines.Value = 0
                Else
                    vbcLines.Value = imLnRowNo - vbcLines.LargeChange - 1
                End If
            End If
        Case KeyDown  'Down
            If imLnRowNo <= ilLnMax Then 'UBound(tgClfCntr) + 1 Then
                imLnRowNo = imLnRowNo + 1
                If imLnRowNo > vbcLines.Value + vbcLines.LargeChange + 1 Then
                    imSettingValue = True
                    vbcLines.Value = vbcLines.Value + 1
                End If
            Else
                imLnRowNo = 1
                imSettingValue = True
                vbcLines.Value = 0
            End If
        Case KEYLEFT  'Left
            If imLnBoxNo > VEHINDEX Then
                imLnBoxNo = imLnBoxNo - 1
            Else
                imLnBoxNo = PRICEINDEX
            End If
        Case KEYRIGHT  'Right
            If imLnBoxNo < PRICEINDEX Then
                imLnBoxNo = imLnBoxNo + 1
            Else
                imLnBoxNo = VEHINDEX
            End If
    End Select
    imSettingValue = False
    mLnEnableBox imLnBoxNo
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mLnEnableBox                    *
'*                                                     *
'*             Created:6/28/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Public Sub mLnEnableBox(ilBoxNo As Integer)
    mLnEnableBoxSub ilBoxNo, LINECOMMINDEX, PRICEINDEX, OV1INDEX, LENINDEX, OV2INDEX, VEHINDEX, DPINDEX, WKSPOTSINDEX
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mLnSetFocus                     *
'*                                                     *
'*             Created:6/28/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mLnSetFocus(ilBoxNo As Integer)
'
'   mLnSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmLnCtrls) Then
        Exit Sub
    End If

    If (imMoveLnRowNo < vbcLines.Value + 1) Or (imMoveLnRowNo >= vbcLines.Value + vbcLines.LargeChange + 2) Then
        mLnSetShow ilBoxNo
        pbcLineArrow.Visible = False
        laclnFrame.Visible = False
        Exit Sub
    End If
    
    mSetArrowFrame
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        If pbcLineArrow.Visible Then
            pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    If smLineType = "H" Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                'If tgPackLn(ilLoop).iAlter <> True Then
                '10347 Never hit here!
                If (tgPackLn(ilLoop).sAlter <> "C") Or (ilBoxNo <> LINECOMMINDEX) Then
                    If tgPackLn(ilLoop).sAlter <> "Y" Then
                        If pbcLineArrow.Visible Then
                            pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                        Else
                            pbcClickFocus.SetFocus
                        End If
                        Exit Sub
                    End If
                End If
                Exit For
            End If
        Next ilLoop
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        'Case LINEINDEX
        Case VEHINDEX 'Vehicle
            edcLNDropDown.Visible = True
            cmcLnDropDown.Visible = True
            edcLNDropDown.SetFocus
        Case DPINDEX 'Program index
            edcLNDropDown.Visible = True
            cmcLnDropDown.Visible = True
            edcLNDropDown.SetFocus
        Case OV1INDEX 'BB index
        Case LENINDEX 'Length index
            edcLNDropDown.Visible = True
            cmcLnDropDown.Visible = True
            edcLNDropDown.SetFocus
        Case WKSPOTSINDEX To WKSPOTSINDEX + 12
            edcLNDropDown.Visible = True
            edcLNDropDown.SetFocus
        Case PRICEINDEX
            edcLNDropDown.Visible = True
            cmcLnDropDown.Visible = True
            edcLNDropDown.SetFocus
        Case LINECOMMINDEX
           '10843 remove dead code
'            If tgSpf.sCLnStdQt = "Y" Then
'                edcLNDropDown.Visible = True
'                edcLNDropDown.SetFocus
'            Else
                cmcLnDropDown.Visible = True
                cmcLnDropDown.SetFocus
          '  End If
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetShow                        *
'*                                                     *
'*             Created:8/02/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mLnSetShow(ilBoxNo As Integer, Optional blFromExpandPkg As Boolean = False)
    If Not blFromExpandPkg Then
        bmLnChgRegenResearch = False
        mLnSetShowSub ilBoxNo, LINECOMMINDEX, PRICEINDEX, OV1INDEX, LENINDEX, OV2INDEX, VEHINDEX, DPINDEX, WKSPOTSINDEX
        If imExpandingPkg Then
            Exit Sub
        End If
    Else
        bmLnChgRegenResearch = True
    End If
    If bmLnChgRegenResearch Then
        If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
            'If (lacAudTotals.Visible = True) Or ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (tgSpf.sGUsePropSys = "Y") Then   ' And (imLnTotalType = 2) The
            If (lacAudTotals.Visible = True) Or ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (tgSpf.sGUsePropSys = "Y") Then   ' And (imLnTotalType = 2) The
                mSummary
                lacAudTotals_Click
                pbcLnTotal_Paint
                bmLnChgRegenResearch = False
            End If
        Else
            
            If InStr(1, Contract!lacAudTotals.Caption, "Click") <= 0 Then
                Contract.lacAudTotals.Caption = "Click to Compute->" & Contract.lacAudTotals.Caption
            End If
            If Trim$(smLnSave(18, imLnRowNo)) <> "" Then
                Contract.lacAudTotals.ForeColor = Red
                mSetCpmInfo True
            Else
                Contract.lacAudTotals.ForeColor = BLACK
            End If
        End If
    End If
End Sub

''*******************************************************
''*                                                     *
''*      Procedure Name:mLnTestFields                   *
''*                                                     *
''*             Created:8/10/93       By:D. LeVine      *
''*            Modified:              By:               *
''*                                                     *
''*            Comments:Test fields for mandatory and   *
''*                     blanks                          *
''*                                                     *
''*******************************************************
Public Function mLnTestFields() As Integer
    mLnTestFields = mLnTestFieldsFunction(VEHINDEX, PRICEINDEX, DPINDEX, OV2INDEX, WKSPOTSINDEX, LENINDEX)
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mLnTestSaveFields               *
'*                                                     *
'*             Created:8/10/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test fields for mandatory and   *
'*                     blanks                          *
'*                                                     *
'*******************************************************
Public Function mLnTestSaveFields(ilBypassFlightTest As Integer) As Integer

'
'   iRet = mLnTestSaveFields()
'   Where:
'       iRet (O)- True if all mandatory fields answered
'
'
    Dim ilRes As Integer    'Result of MsgBox
    Dim ilLoop As Integer
    'Dim ilIndex As Integer
    'Dim ilOneYes As Integer
    Dim ilDayDefined As Integer
    Dim ilLegalDays As Integer
    Dim ilCff As Integer

    If smLnSave(1, imLnRowNo) = "" Then
        ilRes = MsgBox("Vehicle Name must be specified", vbOKOnly + vbExclamation, "Incomplete")
        imLnBoxNo = VEHINDEX
        mLnTestSaveFields = NO
        Exit Function
    End If
    smLineType = mGetLineType(imLnRowNo)
    If (smLineType = "O") Or (smLineType = "A") Or (smLineType = "E") Then
        For ilLoop = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            If StrComp(Trim$(tgMVef(ilLoop).sName), smLnSave(1, imLnRowNo), vbTextCompare) = 0 Then
                If tgMVef(ilLoop).sType = "G" Then
                    ilRes = MsgBox("Vehicle Name must not be a Sport Vehicle Name", vbOKOnly + vbExclamation, "Incomplete")
                    imLnBoxNo = VEHINDEX
                    mLnTestSaveFields = NO
                    Exit Function
                End If
                Exit For
            End If
        Next ilLoop
    End If
    If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
        If imLnSave(1, imLnRowNo) < 0 Then
            ilRes = MsgBox("Daypart must be specified", vbOKOnly + vbExclamation, "Incomplete")
            imLnBoxNo = DPINDEX
            mLnTestSaveFields = NO
            Exit Function
        End If
    Else
        If smLnSave(20, imLnRowNo) = "" Then
            ilRes = MsgBox("Daypart must be specified", vbOKOnly + vbExclamation, "Incomplete")
            imLnBoxNo = DPINDEX
            mLnTestSaveFields = NO
            Exit Function
        End If
    End If
    Select Case imLnSave(4, imLnRowNo)
        Case -1
        Case 0
        Case 1    'Time
            If Trim$(smLnSave(2, imLnRowNo)) = "" Then
                ilRes = MsgBox("Start time must be specified", vbOKOnly + vbExclamation, "Incomplete")
                If (smLineType = "O") Or (smLineType = "A") Then
                    imLnBoxNo = WKSPOTSINDEX
                Else
                    imLnBoxNo = PRICEINDEX
                End If
                mLnTestSaveFields = NO
                Exit Function
            Else
                If Not gValidTime(smLnSave(2, imLnRowNo)) Then
                    ilRes = MsgBox("Invalid Start time", vbOKOnly + vbExclamation, "Incomplete")
                    If (smLineType = "O") Or (smLineType = "A") Then
                        imLnBoxNo = WKSPOTSINDEX
                    Else
                        imLnBoxNo = PRICEINDEX
                    End If
                    mLnTestSaveFields = NO
                    Exit Function
                End If
            End If
            If Trim$(smLnSave(3, imLnRowNo)) = "" Then
                ilRes = MsgBox("End Time must be specified", vbOKOnly + vbExclamation, "Incomplete")
                If (smLineType = "O") Or (smLineType = "A") Then
                    imLnBoxNo = WKSPOTSINDEX
                Else
                    imLnBoxNo = PRICEINDEX
                End If
                mLnTestSaveFields = NO
                Exit Function
            Else
                If Not gValidTime(smLnSave(3, imLnRowNo)) Then
                    ilRes = MsgBox("Invalid End time", vbOKOnly + vbExclamation, "Incomplete")
                    If (smLineType = "O") Or (smLineType = "A") Then
                        imLnBoxNo = WKSPOTSINDEX
                    Else
                        imLnBoxNo = PRICEINDEX
                    End If
                    mLnTestSaveFields = NO
                    Exit Function
                End If
            End If
        Case 2    'Break
        Case 3    'Break and position
        Case Else
            ilRes = MsgBox("Override must be specified", vbOKOnly + vbExclamation, "Incomplete")
            If (smLineType = "O") Or (smLineType = "A") Then
                imLnBoxNo = WKSPOTSINDEX
            Else
                imLnBoxNo = PRICEINDEX
            End If
            mLnTestSaveFields = NO
            Exit Function
    End Select
    If tmOV1Ctrls(OVCOPYINDEX).iReq = True Then
        If imLnSave(31, imLnRowNo) < 0 Then
            ilRes = MsgBox("Copy Override must be specified", vbOKOnly + vbExclamation, "Incomplete")
            If (smLineType = "O") Or (smLineType = "A") Then
                imLnBoxNo = WKSPOTSINDEX
            Else
                imLnBoxNo = PRICEINDEX
            End If
            mLnTestSaveFields = NO
            Exit Function
        End If
    End If
    If (Not ilBypassFlightTest) Then
        If Not tgClfCntr(imLnRowNo - 1).iCancel Then
            If tgClfCntr(imLnRowNo - 1).iFirstCff < 0 Then
                ilRes = MsgBox("Dates must be specified", vbOKOnly + vbExclamation, "Incomplete")
                If (smLineType = "O") Or (smLineType = "A") Then
                    imLnBoxNo = WKSPOTSINDEX
                Else
                    imLnBoxNo = PRICEINDEX
                End If
                mLnTestSaveFields = NO
                Exit Function
            End If
            ilDayDefined = False
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    ilDayDefined = False
                    For ilLoop = 0 To 6 Step 1
                        If (tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "1") Then
                            ilDayDefined = True
                            Exit For
                        End If
                    Next ilLoop
                    If tgCffCntr(ilCff).CffRec.iSpotsWk <> 0 Then
                        Exit Do
                    Else
                        ilDayDefined = True
                    End If
                End If
                'If ilDayDefined Then
                '    Exit Do
                'End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If Not ilDayDefined Then
                ilRes = MsgBox("Days must be specified", vbOKOnly + vbExclamation, "Incomplete")
                If (smLineType = "O") Or (smLineType = "A") Then
                    imLnBoxNo = WKSPOTSINDEX
                Else
                    imLnBoxNo = PRICEINDEX
                End If
                mLnTestSaveFields = NO
                Exit Function
            End If
            ilLegalDays = True
            mDPAllowedDays imLnSave(1, imLnRowNo), imAllowedDays()
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    For ilLoop = 0 To 6 Step 1
                        If (tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "1") Then
                            If Not imAllowedDays(ilLoop + LBound(imAllowedDays)) Then
                                ilLegalDays = False
                                Exit For
                            End If
                        End If
                    Next ilLoop
                End If
                If Not ilLegalDays Then
                    Exit Do
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If Not ilLegalDays Then
                ilRes = MsgBox("Invalid Day specified", vbOKOnly + vbExclamation, "Incomplete")
                If (smLineType = "O") Or (smLineType = "A") Then
                    imLnBoxNo = WKSPOTSINDEX
                Else
                    imLnBoxNo = PRICEINDEX
                End If
                mLnTestSaveFields = NO
                Exit Function
            End If
        End If
    End If
    If Val(smLnSave(16, imLnRowNo)) <= 0 Then
        ilRes = MsgBox("Length must be specified", vbOKOnly + vbExclamation, "Incomplete")
        imLnBoxNo = LENINDEX
        mLnTestSaveFields = NO
        Exit Function
    End If
    '0=True; 6=Recapture; 7=ADU
    'lbcType.ListIndex = 3 => Reservation (price not required)
    If Not ilBypassFlightTest Then
        If Not tgClfCntr(imLnRowNo - 1).iCancel Then
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    If Trim$(tgCffCntr(ilCff).CffRec.sPriceType) = "" Then
                        ilRes = MsgBox("Spot Price Type must be specified", vbOKOnly + vbExclamation, "Incomplete")
                        If (smLineType = "O") Or (smLineType = "A") Then
                            imLnBoxNo = WKSPOTSINDEX
                        Else
                            imLnBoxNo = PRICEINDEX
                        End If
                        mLnTestSaveFields = NO
                        Exit Function
                    End If
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
        End If
    End If
    mLnTestSaveFields = YES
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mMnfBranch                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      potential and process          *
'*                      communication back from        *
'*                      potential                      *
'*                                                     *
'*******************************************************
Private Function mMnfBranch(ilType As Integer, ilIndex As Integer) As Integer
'
'   ilRet = mMnfBranch(ilType)
'
'   Where:
'
'       ilType(I)- 1=Business
'                  4=Potential
'                  5=Segment
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    If (igRepNetChgAllowed) And (ilType <> 2) Then
        imDoubleClickName = False
        mMnfBranch = False
        Exit Function
    End If
    If ilType = 1 Then
        ilRet = gOptionalLookAhead(edcShareDropDown, lbcBusCat, imBSMode, slStr)
        If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcShareDropDown.Text = "[None]") Then
            imDoubleClickName = False
            mMnfBranch = False
            Exit Function
        End If
        If igWinStatus(BUSCATEGORIESLIST) <> 2 Then
            Beep
            imDoubleClickName = False
            mMnfBranch = True
            mCESetFocus imCEBoxNo
            Exit Function
        End If
        sgMnfCallType = "B"
        igMNmCallSource = CALLSOURCECONTRACT
        If edcShareDropDown.Text = "[New]" Then
            sgMNmName = ""
        Else
            sgMNmName = slStr
        End If
        ilUpdateAllowed = imUpdateAllowed
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        End If
        sgCommandStr = slStr
        MultiNm.Show vbModal
        slStr = sgDoneMsg
        ilParse = gParseItem(slStr, 1, "\", sgMNmName)
        igMNmCallSource = Val(sgMNmName)
        ilParse = gParseItem(slStr, 2, "\", sgMNmName)
        imDoubleClickName = False
        mMnfBranch = True
        imUpdateAllowed = ilUpdateAllowed
        gShowBranner imUpdateAllowed
        If igMNmCallSource = CALLDONE Then  'Done
            igMNmCallSource = CALLNONE
    '        gSetMenuState True
            lbcBusCat.Clear
            sgBusCatCodeTag = ""    'Traffic!lbcBusCatCode.Tag = ""
            sgBusCatMnfStamp = ""
            mMnfPop 1
            If imTerminate Then
                mMnfBranch = False
                Exit Function
            End If
            gFindMatch sgMNmName, 1, lbcBusCat
            If gLastFound(lbcBusCat) > 0 Then
                imChgMode = True
                lbcBusCat.ListIndex = gLastFound(lbcBusCat)
                edcShareDropDown.Text = lbcBusCat.List(lbcBusCat.ListIndex)
                imChgMode = False
                mMnfBranch = False
                mCESetChg imCEBoxNo
            Else
                imChgMode = True
                lbcBusCat.ListIndex = 1
                edcShareDropDown.Text = lbcBusCat.List(1)
                imChgMode = False
                mCESetChg imCEBoxNo
                edcShareDropDown.SetFocus
                sgMNmName = ""
                Exit Function
            End If
            sgMNmName = ""
        End If
        If igMNmCallSource = CALLCANCELLED Then  'Cancelled
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mCEEnableBox imCEBoxNo
            Exit Function
        End If
        If igMNmCallSource = CALLTERMINATED Then
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mCEEnableBox imCEBoxNo
            Exit Function
        End If
    ElseIf ilType = 2 Then
        ilRet = gOptionalLookAhead(edcShareDropDown, lbcComp(ilIndex), imBSMode, slStr)
        If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcShareDropDown.Text = "[None]") Then
            imDoubleClickName = False
            mMnfBranch = False
            Exit Function
        End If
        If igWinStatus(COMPETITIVESLIST) <> 2 Then
            Beep
            imDoubleClickName = False
            mMnfBranch = True
            mCESetFocus imCEBoxNo
            Exit Function
        End If
        sgMnfCallType = "C"
        igMNmCallSource = CALLSOURCECONTRACT
        If edcShareDropDown.Text = "[New]" Then
            sgMNmName = ""
        Else
            sgMNmName = slStr
        End If
        ilUpdateAllowed = imUpdateAllowed
        'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
        'Traffic!edcLinkSrceHelpMsg.Text = ""
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        End If
        sgCommandStr = slStr
        MultiNm.Show vbModal
        slStr = sgDoneMsg
        ilParse = gParseItem(slStr, 1, "\", sgMNmName)
        igMNmCallSource = Val(sgMNmName)
        ilParse = gParseItem(slStr, 2, "\", sgMNmName)
        imDoubleClickName = False
        mMnfBranch = True
        imUpdateAllowed = ilUpdateAllowed
        gShowBranner imUpdateAllowed
        If igMNmCallSource = CALLDONE Then  'Done
            igMNmCallSource = CALLNONE
    '        gSetMenuState True
            lbcComp(ilIndex).Clear
            'Traffic!lbcCompCode.Tag = ""
            sgCompCodeTag = ""
            sgCompMnfStamp = "~"
            mMnfPop 2
            If imTerminate Then
                mMnfBranch = False
                Exit Function
            End If
            gFindMatch sgMNmName, 1, lbcComp(ilIndex)
            If gLastFound(lbcComp(ilIndex)) > 0 Then
                imChgMode = True
                lbcComp(ilIndex).ListIndex = gLastFound(lbcComp(ilIndex))
                edcShareDropDown.Text = lbcComp(ilIndex).List(lbcComp(ilIndex).ListIndex)
                imChgMode = False
                mMnfBranch = False
                mCESetChg imCEBoxNo
            Else
                imChgMode = True
                lbcComp(ilIndex).ListIndex = 1
                edcShareDropDown.Text = lbcComp(ilIndex).List(1)
                imChgMode = False
                mCESetChg imCEBoxNo
                edcShareDropDown.SetFocus
                sgMNmName = ""
                Exit Function
            End If
            sgMNmName = ""
        End If
        If igMNmCallSource = CALLCANCELLED Then  'Cancelled
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mCEEnableBox imCEBoxNo
            Exit Function
        End If
        If igMNmCallSource = CALLTERMINATED Then
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mCEEnableBox imCEBoxNo
            Exit Function
        End If
    ElseIf ilType = 3 Then
        ilRet = gOptionalLookAhead(edcShareDropDown, lbcExcl(ilIndex), imBSMode, slStr)
        If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcShareDropDown.Text = "[None]") Then
            imDoubleClickName = False
            mMnfBranch = False
            Exit Function
        End If
        If igWinStatus(EXCLUSIONSLIST) <> 2 Then
            Beep
            imDoubleClickName = False
            mMnfBranch = True
            mCESetFocus imCEBoxNo
            Exit Function
        End If
        sgMnfCallType = "X"
        igMNmCallSource = CALLSOURCECONTRACT
        If edcShareDropDown.Text = "[New]" Then
            sgMNmName = ""
        Else
            sgMNmName = slStr
        End If
        ilUpdateAllowed = imUpdateAllowed
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        End If
        sgCommandStr = slStr
        MultiNm.Show vbModal
        slStr = sgDoneMsg
        ilParse = gParseItem(slStr, 1, "\", sgMNmName)
        igMNmCallSource = Val(sgMNmName)
        ilParse = gParseItem(slStr, 2, "\", sgMNmName)
        ''Screen.MousePointer = vbDefault    'Default
        imDoubleClickName = False
        mMnfBranch = True
        imUpdateAllowed = ilUpdateAllowed
        gShowBranner imUpdateAllowed
        If igMNmCallSource = CALLDONE Then  'Done
            igMNmCallSource = CALLNONE
    '        gSetMenuState True
            lbcExcl(ilIndex).Clear
            'Traffic!lbcExclCode.Tag = ""
            sgExclCodeTag = ""
            sgExclMnfStamp = ""
            mMnfPop 3
            If imTerminate Then
                mMnfBranch = False
                Exit Function
            End If
            gFindMatch sgMNmName, 1, lbcExcl(ilIndex)
            If gLastFound(lbcExcl(ilIndex)) > 0 Then
                imChgMode = True
                lbcExcl(ilIndex).ListIndex = gLastFound(lbcExcl(ilIndex))
                edcShareDropDown.Text = lbcExcl(ilIndex).List(lbcExcl(ilIndex).ListIndex)
                imChgMode = False
                mMnfBranch = False
                mCESetChg imCEBoxNo
            Else
                imChgMode = True
                lbcExcl(ilIndex).ListIndex = 1
                edcShareDropDown.Text = lbcExcl(ilIndex).List(1)
                imChgMode = False
                mCESetChg imCEBoxNo
                edcShareDropDown.SetFocus
                sgMNmName = ""
                Exit Function
            End If
            sgMNmName = ""
        End If
        If igMNmCallSource = CALLCANCELLED Then  'Cancelled
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mCEEnableBox imCEBoxNo
            Exit Function
        End If
        If igMNmCallSource = CALLTERMINATED Then
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mCEEnableBox imCEBoxNo
            Exit Function
        End If
    ElseIf ilType = 4 Then
        ilRet = gOptionalLookAhead(edcHdDropDown, lbcPot, imBSMode, slStr)
        If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcHdDropDown.Text = "[None]") Then
            imDoubleClickName = False
            mMnfBranch = False
            Exit Function
        End If
        If igWinStatus(POTENTIALCODESLIST) <> 2 Then
            Beep
            imDoubleClickName = False
            mMnfBranch = True
            mSetFocus imHdBoxNo
            Exit Function
        End If
        sgMnfCallType = "P"
        igMNmCallSource = CALLSOURCECONTRACT
        If edcHdDropDown.Text = "[New]" Then
            sgMNmName = ""
        Else
            sgMNmName = slStr
        End If
        ilUpdateAllowed = imUpdateAllowed
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        End If
        sgCommandStr = slStr
        MultiNm.Show vbModal
        slStr = sgDoneMsg
        ilParse = gParseItem(slStr, 1, "\", sgMNmName)
        igMNmCallSource = Val(sgMNmName)
        ilParse = gParseItem(slStr, 2, "\", sgMNmName)
        imDoubleClickName = False
        mMnfBranch = True
        imUpdateAllowed = ilUpdateAllowed
        gShowBranner imUpdateAllowed
        If igMNmCallSource = CALLDONE Then  'Done
            igMNmCallSource = CALLNONE
    '        gSetMenuState True
            lbcPot.Clear
            'Traffic!lbcPotCode.Tag = ""
            sgPotCodeTag = ""
            sgPotMnfStamp = ""
            mMnfPop 4
            If imTerminate Then
                mMnfBranch = False
                Exit Function
            End If
            gFindMatch sgMNmName, 1, lbcPot
            If gLastFound(lbcPot) > 0 Then
                imChgMode = True
                lbcPot.ListIndex = gLastFound(lbcPot)
                edcHdDropDown.Text = lbcPot.List(lbcPot.ListIndex)
                imChgMode = False
                mMnfBranch = False
                mSetChg imHdBoxNo
            Else
                imChgMode = True
                lbcPot.ListIndex = 1
                edcHdDropDown.Text = lbcPot.List(1)
                imChgMode = False
                mSetChg imHdBoxNo
                edcHdDropDown.SetFocus
                sgMNmName = ""
                Exit Function
            End If
            sgMNmName = ""
        End If
        If igMNmCallSource = CALLCANCELLED Then  'Cancelled
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mEnableBox imHdBoxNo
            Exit Function
        End If
        If igMNmCallSource = CALLTERMINATED Then
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mEnableBox imHdBoxNo
            Exit Function
        End If
    Else
        ilRet = gOptionalLookAhead(edcHdDropDown, lbcSeg, imBSMode, slStr)
        If (ilRet = 0) And (Not imDoubleClickName) Then
            imDoubleClickName = False
            mMnfBranch = False
            Exit Function
        End If
        If tgSpf.sCUseSegments <> "Y" Then
            Beep
            imDoubleClickName = False
            mMnfBranch = True
            mSetFocus imHdBoxNo
            Exit Function
        End If
        sgMnfCallType = "K"
        igMNmCallSource = CALLSOURCECONTRACT
        If edcHdDropDown.Text = "[New]" Then
            sgMNmName = ""
        Else
            sgMNmName = slStr
        End If
        ilUpdateAllowed = imUpdateAllowed
        If igTestSystem Then
            slStr = "Traffic^Test\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        Else
            slStr = "Traffic^Prod\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        End If
        sgCommandStr = slStr
        MultiNm.Show vbModal
        slStr = sgDoneMsg
        ilParse = gParseItem(slStr, 1, "\", sgMNmName)
        igMNmCallSource = Val(sgMNmName)
        ilParse = gParseItem(slStr, 2, "\", sgMNmName)
        imDoubleClickName = False
        mMnfBranch = True
        imUpdateAllowed = ilUpdateAllowed
        gShowBranner imUpdateAllowed
        If igMNmCallSource = CALLDONE Then  'Done
            igMNmCallSource = CALLNONE
    '        gSetMenuState True
            lbcSeg.Clear
            'Traffic!lbcPotCode.Tag = ""
            sgSegCodeTag = ""
            mMnfPop 5
            If imTerminate Then
                mMnfBranch = False
                Exit Function
            End If
            gFindMatch sgMNmName, 1, lbcSeg
            If gLastFound(lbcSeg) > 0 Then
                imChgMode = True
                lbcSeg.ListIndex = gLastFound(lbcSeg)
                edcHdDropDown.Text = lbcSeg.List(lbcSeg.ListIndex)
                imChgMode = False
                mMnfBranch = False
                mSetChg imHdBoxNo
            Else
                imChgMode = True
                If lbcSeg.ListCount > 0 Then
                    lbcSeg.ListIndex = 1
                    edcHdDropDown.Text = lbcSeg.List(1)
                End If
                imChgMode = False
                mSetChg imHdBoxNo
                edcHdDropDown.SetFocus
                sgMNmName = ""
                Exit Function
            End If
            sgMNmName = ""
        End If
        If igMNmCallSource = CALLCANCELLED Then  'Cancelled
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mEnableBox imHdBoxNo
            Exit Function
        End If
        If igMNmCallSource = CALLTERMINATED Then
    '        gSetMenuState True
            igMNmCallSource = CALLNONE
            sgMNmName = ""
            mEnableBox imHdBoxNo
            Exit Function
        End If
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mMoveCtrlToRec                  *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move control values to record  *
'*                                                     *
'*******************************************************
Public Sub mMoveCtrlToRec(ilTestChg As Integer)
'
'   mMoveCtrlToRec iTest
'   Where:
'       iTest (I)- True = only move if field changed
'                  False = move regardless of change state
'
    Dim ilLoop As Integer
    Dim slNameCode As String  'Name and code
    Dim ilRet As Integer    'Return call status
    Dim slCode As String    'Code number
    Dim slStr As String
    Dim ilIndex As Integer
    Dim ilSlsp As Integer
    'Setting MGMiss is in SaveRec for new header

    'Retain previous value
    'tgChfCntr.iHdChg = 0
    'If Not ilTestChg Or tmHdCtrls(STATUSINDEX).iChg Or (imSelectedIndex = 0) Then
    If Not ilTestChg Or tmHdCtrls(STATUSINDEX).iChg Or ((sgCntrScreen <> "Orders") And ((imStep1Index = 1) Or (imStep1Index = 4))) Or ((sgCntrScreen = "Orders") And ((imStep1Index = 1) Or (imStep1Index = 2))) Then
        ilIndex = lbcStatus.ListIndex
        If ilIndex < 0 Then
            If (sgCntrScreen <> "Orders") And (imStep1Index = 1) Then
                slStr = "Working Proposal"
            ElseIf (sgCntrScreen <> "Orders") And (imStep1Index = 4) Then
                slStr = "Rev Working"
            ElseIf (sgCntrScreen = "Orders") And (imStep1Index = 1) Then
                slStr = "Approved Order"
            ElseIf (sgCntrScreen = "Orders") And (imStep1Index = 2) Then
                slStr = "Approved Order"
            Else
                slStr = ""  'Don't set as Undo will not come on
            End If
        Else
            slStr = lbcStatus.List(ilIndex)
        End If
        If (slStr = "Working Proposal") Or (slStr = "Rev Working") Then
            tgChfCntr.sStatus = "W"
        ElseIf slStr = "Rejected" Then
            tgChfCntr.sStatus = "D"
        ElseIf (slStr = "Completed Proposal") Or (slStr = "Rev Completed") Then
            tgChfCntr.sStatus = "C"
        ElseIf (slStr = "Unapproved Proposal") Or (slStr = "Rev Unapproved") Then
            tgChfCntr.sStatus = "I"
        ElseIf slStr = "Approved Hold" Then
            tgChfCntr.sStatus = "G"
        ElseIf slStr = "Hold" Then
            tgChfCntr.sStatus = "H"
        ElseIf slStr = "Approved Order" Then
            tgChfCntr.sStatus = "N"
        ElseIf slStr = "Order" Then
            tgChfCntr.sStatus = "O"
        Else
            tgChfCntr.sStatus = ""
        End If
    End If
    'Potential
    If Not ilTestChg Or tmHdCtrls(POTINDEX).iChg Then
        If lbcPot.ListIndex >= 2 Then
            slNameCode = tgPotCode(lbcPot.ListIndex - 2).sKey  'Traffic!lbcPotCode.List(lbcPot.ListIndex - 2)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            tgChfCntr.iMnfPotnType = CInt(slCode)
        Else
            tgChfCntr.iMnfPotnType = 0
        End If
    End If
    'Type
    'If Not ilTestChg Or tmHdCtrls(TYPEINDEX).iChg Or (imSelectedIndex = 0) Then
    If Not ilTestChg Or tmHdCtrls(TYPEINDEX).iChg Then
        ilIndex = lbcType.ListIndex
        If ilIndex < 0 Then
            'slStr = lbcType.List(0) 'Standard
            slStr = ""  'Don't set as undo will not come on
        Else
            slStr = lbcType.List(ilIndex)
        End If
        If slStr = "Standard" Then
            tgChfCntr.sType = "C"
        ElseIf slStr = "Reservation" Then
            tgChfCntr.sType = "V"
        ElseIf slStr = "Remnant" Then
            tgChfCntr.sType = "T"
        ElseIf slStr = "Direct Response" Then
            tgChfCntr.sType = "R"
        ElseIf slStr = "Per Inquiry" Then
            tgChfCntr.sType = "Q"
        ElseIf slStr = "PSA" Then
            tgChfCntr.sType = "S"
        ElseIf slStr = "Promo" Then
            tgChfCntr.sType = "M"
        Else
            tgChfCntr.sType = ""
        End If
    End If
    'If Not ilTestChg Or tmHdCtrls(ESTNOINDEX).iChg Then
    '    tgChfCntr.lAgyEstNo = Val(edcEstNo.Text)
    'End If
    If Not ilTestChg Or tmNoCtrls(NOPROPINDEX).iChg Then
        tgChfCntr.lCntrNo = Val(smPropNo)
    End If
    If Not ilTestChg Or tmNoCtrls(NOESTINDEX).iChg Then
        tgChfCntr.sAgyEstNo = Left$(smEstNo, 10)
        If Len(smEstNo) > 10 Then
            tgChfCntr.sTitle = Mid$(smEstNo, 11)
        Else
            tgChfCntr.sTitle = ""
        End If
    End If
    If Not ilTestChg Or tmNoCtrls(NORESVORDERINDEX).iChg Then
        If lbcResv.ListIndex >= 1 Then
            slNameCode = tgResvCode(lbcResv.ListIndex - 1).sKey    'Traffic!lbcResvCode.List(lbcResv.ListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            tgChfCntr.lChfCode = CInt(slCode)
            tgChfCntr.sResvNew = "R"
        Else
            tgChfCntr.lChfCode = 0
            tgChfCntr.sResvNew = "N"
        End If
    End If
    If Not ilTestChg Or tmNoCtrls(NOEDICLIENTCODEINDEX).iChg Then

    End If
    If Not ilTestChg Or tmNoCtrls(NOEDIPRODUCTCODEINDEX).iChg Then

    End If
    'If Not ilTestChg Or tmNoCtrls(NOINVPROJCODEINDEX).iChg Then

    'End If
    'If Not ilTestChg Or tmNoCtrls(NOINVSMSNOINDEX).iChg Then

    'End If
    If sgCntrScreen = "Orders" Then
        'If Not ilTestChg Or tmHdCtrls(CNTRNOINDEX).iChg Then
        '    tgChfCntr.lCntrNo = Val(edcCntrNo.Text)
        'End If
    Else
        If Not ilTestChg Or tmNoCtrls(NODATEINDEX).iChg Then
            gPackDate smDtNeeded, tgChfCntr.iDtNeed(0), tgChfCntr.iDtNeed(1)
        End If
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index < 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4)) Then
        If Not ilTestChg Or tmHdCtrls(REVNOINDEX).iChg Then
            tgChfCntr.iExtRevNo = Val(edcRevNo.Text)
            'tgChfCntr.iPropVer = 0
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(ADVTINDEX).iChg Then
        If lbcAdvt.ListIndex >= 1 Then
            slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            If tgChfCntr.iAdfCode <> CInt(slCode) Then
                tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDADVTCHG
            End If
            tgChfCntr.iAdfCode = CInt(slCode)
        Else
            If tgChfCntr.iAdfCode <> 0 Then
                tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDADVTCHG
            End If
            tgChfCntr.iAdfCode = 0
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(PRODUCTINDEX).iChg Then
        If smProduct = "[None]" Then
            tgChfCntr.sProduct = ""
        Else
            tgChfCntr.sProduct = smProduct
        End If
    End If
    If tgSpf.sUseProdSptScr = "P" Then
        If Not ilTestChg Or tmHdCtrls(SHTTITLEINDEX).iChg Then
            If smShtTitle = "[None]" Then
                smShtTitle = ""
            End If
        End If
    Else
        smShtTitle = ""
    End If
    If Not ilTestChg Or tmHdCtrls(AGENCYINDEX).iChg Then
        If lbcAgency.ListIndex >= 2 Then
            slNameCode = tmCntAgency(lbcAgency.ListIndex - 2).sKey    'Traffic!lbcAgency.List(lbcAgency.ListIndex - 2)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            tgChfCntr.iAgfCode = CInt(slCode)
        Else
            tgChfCntr.iAgfCode = 0
            tgChfCntr.sAgyCTrade = "N"
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(SPERSONINDEX).iChg Then
        For ilSlsp = 0 To 9 Step 1
            tgChfCntr.iSlfCode(ilSlsp) = 0
            tgChfCntr.lComm(ilSlsp) = 0
            tgChfCntr.iSlspCommPct(ilSlsp) = 0
            tgChfCntr.iMnfSubCmpy(ilSlsp) = 0
        Next ilSlsp
        ilIndex = 0
        For ilSlsp = 0 To 9 Step 1
            'slStr = ""
            'gStrToPDN slStr, 4, 4, tgChfCntr.sComm(ilLoop)
            If imSlspIndex(ilSlsp) >= 2 Then
                    slNameCode = tmCntSalesperson(imSlspIndex(ilSlsp) - 2).sKey   'Traffic!lbcSalesperson.List(imSlspIndex(ilSlsp) - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveCtrlToRecErr
                gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                tgChfCntr.iSlfCode(ilIndex) = CInt(slCode)
                'tgChfCntr.lComm(ilIndex) = gStrDecToLong(smSlspComm(ilSlsp), 4)
                If tgSpf.sCommByCntr = "Y" Then
                    tgChfCntr.iSlspCommPct(ilIndex) = gStrDecToInt(smSlspField2(ilSlsp), 2)
                    tgChfCntr.lComm(ilIndex) = gStrDecToLong(smSlspField3(ilSlsp), 4)
                    tgChfCntr.iMnfSubCmpy(ilIndex) = 0
                ElseIf tgSpf.sSubCompany = "Y" Then
                    tgChfCntr.lComm(ilIndex) = gStrDecToLong(smSlspField3(ilSlsp), 4)
                    gFindMatch Trim$(smSlspField2(ilSlsp)), 1, lbcVehGp6
                    If gLastFound(lbcVehGp6) > 0 Then
                        slNameCode = tmVehGp6Code(gLastFound(lbcVehGp6) - 1).sKey   'Traffic!lbcSalesperson.List(imSlspIndex(ilSlsp) - 2)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mMoveCtrlToRecErr
                        gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                        On Error GoTo 0
                        slCode = Trim$(slCode)
                        tgChfCntr.iMnfSubCmpy(ilIndex) = CInt(slCode)
                        tgChfCntr.iSlspCommPct(ilIndex) = gStrDecToInt(smSlspField4(ilSlsp), 2)
                    Else
                        tgChfCntr.iMnfSubCmpy(ilIndex) = 0
                        tgChfCntr.iSlspCommPct(ilIndex) = gStrDecToInt(smSlspField4(ilSlsp), 2)
                    End If
                Else
                    tgChfCntr.lComm(ilIndex) = gStrDecToLong(smSlspField2(ilSlsp), 4)
                    tgChfCntr.iMnfSubCmpy(ilIndex) = 0
                    tgChfCntr.iSlspCommPct(ilIndex) = tgChfCntr.lComm(ilIndex) \ 100
                End If
                ilIndex = ilIndex + 1
            End If
        Next ilSlsp
    End If
    For ilLoop = 0 To 1 Step 1
        If Not ilTestChg Or tmCECtrls(CECOMPINDEX + ilLoop).iChg Then
            If lbcComp(ilLoop).ListIndex >= 2 Then
                slNameCode = tgCompCode(lbcComp(ilLoop).ListIndex - 2).sKey    'Traffic!lbcCompCode.List(lbcComp(ilLoop).ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveCtrlToRecErr
                gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                If tgChfCntr.iMnfComp(ilLoop) <> CInt(slCode) Then
                    If ilLoop = 0 Then
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDCOMP1CHG
                    Else
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDCOMP2CHG
                    End If
                End If
                tgChfCntr.iMnfComp(ilLoop) = CInt(slCode)
            Else
                If tgChfCntr.iMnfComp(ilLoop) <> 0 Then
                    If ilLoop = 0 Then
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDCOMP1CHG
                    Else
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDCOMP2CHG
                    End If
                End If
                tgChfCntr.iMnfComp(ilLoop) = 0
            End If
        End If
    Next ilLoop
    For ilLoop = 0 To 1 Step 1
        If Not ilTestChg Or tmCECtrls(CEEXCLINDEX + ilLoop).iChg Then
            If lbcExcl(ilLoop).ListIndex >= 2 Then
                slNameCode = tgExclCode(lbcExcl(ilLoop).ListIndex - 2).sKey    'Traffic!lbcExclCode.List(lbcExcl(ilLoop).ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveCtrlToRecErr
                gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                If tgChfCntr.iMnfExcl(ilLoop) <> CInt(slCode) Then
                    If ilLoop = 0 Then
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDEXCL1CHG
                    Else
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDEXCL2CHG
                    End If
                End If
                tgChfCntr.iMnfExcl(ilLoop) = CInt(slCode)
            Else
                If tgChfCntr.iMnfExcl(ilLoop) <> 0 Then
                    If ilLoop = 0 Then
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDEXCL1CHG
                    Else
                        tgChfCntr.iHdChg = tgChfCntr.iHdChg Or HDEXCL2CHG
                    End If
                End If
                tgChfCntr.iMnfExcl(ilLoop) = 0
            End If
        End If
    Next ilLoop
    If Not ilTestChg Or tmCECtrls(CEBUSCATINDEX).iChg Then
        If lbcBusCat.ListIndex >= 2 Then
            slNameCode = tgBusCatCode(lbcBusCat.ListIndex - 2).sKey    'Traffic!lbcBusCatCode.List(lbcBusCat.ListIndex - 2)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            tgChfCntr.iMnfBus = CInt(slCode)
        Else
            tgChfCntr.iMnfBus = 0
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(BUYERINDEX).iChg Then
        tgChfCntr.sBuyer = smBuyer
        If lbcBuyer.ListIndex >= 2 Then
            slNameCode = tmCntBuyerCode(lbcBuyer.ListIndex - 2).sKey    'Traffic!lbcAgency.List(lbcAgency.ListIndex - 2)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            tgChfCntr.iPnfBuyer = CInt(slCode)
        Else
            tgChfCntr.iPnfBuyer = 0
            tgChfCntr.sBuyer = ""
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(PHONEINDEX).iChg Then
        gGetPhoneNo mkcPhone, tgChfCntr.sPhone
    End If
    If Not ilTestChg Or tmHdCtrls(SHAREINDEX).iChg Then
        For ilLoop = 0 To 6 Step 1
            tgChfCntr.iMnfCmpy(ilLoop) = 0
            tgChfCntr.iCmpyPct(ilLoop) = 0
        Next ilLoop
        ilIndex = 0
        For ilLoop = 0 To 6 Step 1
            If imShareBudgetIndex(ilLoop) >= 2 Then
                If ilLoop = 0 Then
                    slNameCode = tmShareBudgetCode0(imShareBudgetIndex(ilLoop) - 2).sKey 'Traffic!lbcShareBudgetCode(0).List(imShareBudgetIndex(ilLoop) - 2)
                Else
                    slNameCode = tmShareBudgetCode1(imShareBudgetIndex(ilLoop) - 2).sKey  'Traffic!lbcShareBudgetCode(1).List(imShareBudgetIndex(ilLoop) - 2)
                End If
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveCtrlToRecErr
                gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                tgChfCntr.iMnfCmpy(ilIndex) = CInt(slCode)
                tgChfCntr.iCmpyPct(ilIndex) = gStrDecToInt(smShareBudgetPct(ilLoop), 0)
                ilIndex = ilIndex + 1
            End If
        Next ilLoop
    End If
    If Not ilTestChg Or tmHdCtrls(REVSETINDEX).iChg Then
        For ilLoop = 0 To 4 Step 1
            If lbcRevSet(ilLoop).ListIndex >= 2 Then
                'slNameCode = Traffic!lbcRevSetCode(ilLoop).List(lbcRevSet(ilLoop).ListIndex - 2)
                Select Case ilLoop
                    Case 0
                        slNameCode = tmRevSetCode0(lbcRevSet(ilLoop).ListIndex - 2).sKey
                    Case 1
                        slNameCode = tmRevSetCode1(lbcRevSet(ilLoop).ListIndex - 2).sKey
                    Case 2
                        slNameCode = tmRevSetCode2(lbcRevSet(ilLoop).ListIndex - 2).sKey
                    Case 3
                        slNameCode = tmRevSetCode3(lbcRevSet(ilLoop).ListIndex - 2).sKey
                    Case 4
                        slNameCode = tmRevSetCode4(lbcRevSet(ilLoop).ListIndex - 2).sKey
                End Select
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveCtrlToRecErr
                gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                tgChfCntr.iMnfRevSet(ilLoop) = CInt(slCode)
            Else
                tgChfCntr.iMnfRevSet(ilLoop) = 0
            End If
        Next ilLoop
    End If
    'Segment
    If tgSpf.sCUseSegments = "Y" Then
        If Not ilTestChg Or tmHdCtrls(SEGINDEX).iChg Then
            If lbcSeg.ListIndex > 0 Then
                slNameCode = tgSegCode(lbcSeg.ListIndex - 1).sKey  'Traffic!lbcPotCode.List(lbcPot.ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveCtrlToRecErr
                gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                tgChfCntr.imnfSeg = CInt(slCode)
            Else
                tgChfCntr.imnfSeg = 0
            End If
        End If
    Else
        tgChfCntr.imnfSeg = 0
    End If
    If (tgSpf.sGUsePropSys <> "Y") Then
        tgChfCntr.sCppCpm = "N"
        For ilLoop = 0 To 3 Step 1
            tgChfCntr.iMnfDemo(ilLoop) = 0
            tgChfCntr.lTarget(ilLoop) = 0
        Next ilLoop
    Else
        If Not ilTestChg Or tmHdCtrls(DEMOINDEX).iChg Then
            Select Case imCppCpm 'cbcPriceType.ListIndex
                Case 1  'CPM
                    tgChfCntr.sCppCpm = "M"
                    For ilLoop = 0 To 3 Step 1
                        If lbcDemo(ilLoop).ListIndex >= 1 Then
                            'tgChfCntr.sDemo(ilLoop) = lbcDemo(ilLoop).Text
                            slNameCode = tgDemoCode(lbcDemo(ilLoop).ListIndex - 1).sKey  'Traffic!lbcDemoCode.List(lbcDemo(ilLoop).ListIndex - 1)
                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                            On Error GoTo mMoveCtrlToRecErr
                            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                            On Error GoTo 0
                            slCode = Trim$(slCode)
                            tgChfCntr.iMnfDemo(ilLoop) = CInt(slCode)
                            'gStrToPDN smTarget(ilLoop), 2, 4, tgChfCntr.sTarget(ilLoop)
                            tgChfCntr.lTarget(ilLoop) = gStrDecToLong(smTarget(ilLoop), 2)
                        Else
                            'tgChfCntr.sDemo(ilLoop) = ""
                            tgChfCntr.iMnfDemo(ilLoop) = 0
                            'slStr = ""
                            'gStrToPDN slStr, 2, 4, tgChfCntr.sTarget(ilLoop)
                            tgChfCntr.lTarget(ilLoop) = 0
                        End If
                    Next ilLoop
                Case 2  'CPP
                    tgChfCntr.sCppCpm = "P"
                    For ilLoop = 0 To 3 Step 1
                        If lbcDemo(ilLoop).ListIndex >= 1 Then
                            'tgChfCntr.sDemo(ilLoop) = lbcDemo(ilLoop).Text
                            slNameCode = tgDemoCode(lbcDemo(ilLoop).ListIndex - 1).sKey   'Traffic!lbcDemoCode.List(lbcDemo(ilLoop).ListIndex - 1)
                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                            On Error GoTo mMoveCtrlToRecErr
                            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
                            On Error GoTo 0
                            slCode = Trim$(slCode)
                            tgChfCntr.iMnfDemo(ilLoop) = CInt(slCode)
                            'gStrToPDN smTarget(ilLoop), 2, 4, tgChfCntr.sTarget(ilLoop)
                            tgChfCntr.lTarget(ilLoop) = gStrDecToLong(smTarget(ilLoop), 2)  'Add the two places back in
                        Else
                            'tgChfCntr.sDemo(ilLoop) = ""
                            tgChfCntr.iMnfDemo(ilLoop) = 0
                            'slStr = ""
                            'gStrToPDN slStr, 2, 4, tgChfCntr.sTarget(ilLoop)
                            tgChfCntr.lTarget(ilLoop) = 0
                        End If
                    Next ilLoop
                Case Else   'N/A
                    tgChfCntr.sCppCpm = "N"
                    For ilLoop = 0 To 3 Step 1
                        'tgChfCntr.sDemo(ilLoop) = ""
                        tgChfCntr.iMnfDemo(ilLoop) = 0
                        'slStr = ""
                        'gStrToPDN slStr, 2, 4, tgChfCntr.sTarget(ilLoop)
                        tgChfCntr.lTarget(ilLoop) = 0
                    Next ilLoop
            End Select
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(DEMOINDEX).iChg Then
        Select Case imHideDemo
            Case 0  'No
                tgChfCntr.sHideDemo = "N"
            Case 1  'Yes
                tgChfCntr.sHideDemo = "Y"
            Case Else   'N/A
                tgChfCntr.sHideDemo = "N"
        End Select
    End If
    If Not ilTestChg Or tmHdCtrls(GUARINDEX).iChg Then
        'slStr = edcGuar.Text
        slStr = smHdSave(2)
        'gStrToPDN slStr, 0, 2, tgChfCntr.sPctTrade
        tgChfCntr.lGuar = gStrDecToLong(slStr, 0)
    End If
    If Not ilTestChg Or tmHdCtrls(TRADEINDEX).iChg Then
        slStr = smPctTrade
        'gStrToPDN slStr, 0, 2, tgChfCntr.sPctTrade
        tgChfCntr.iPctTrade = gStrDecToInt(slStr, 0)
        If Len(slStr) > 0 Then
            If Val(slStr) = 0 Then
                tgChfCntr.sAgyCTrade = "N"
            Else
                If imAgyComm = 0 Then
                    tgChfCntr.sAgyCTrade = "Y"
                Else
                    tgChfCntr.sAgyCTrade = "N"
                End If
            End If
        Else
            tgChfCntr.sAgyCTrade = "N"
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(RATECARDINDEX).iChg Then
        If lbcRateCard.ListIndex >= 0 Then
            slNameCode = tmCntRateCard(lbcRateCard.ListIndex).sKey   'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
            ilRet = gParseItem(slNameCode, 3, "\", slCode)
            On Error GoTo mMoveCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveCtrlToRec (gParseItem field 2)", Contract
            On Error GoTo 0
            slCode = Trim$(slCode)
            tgChfCntr.iRcfCode = CInt(slCode)
        Else
            tgChfCntr.iRcfCode = -1
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(GROSSINDEX).iChg Then
        'slStr = edcGross.Text
        slStr = smHdSave(1)
        'gStrToPDN slStr, 2, 6, tgChfCntr.sInputGross
        tgChfCntr.lInputGross = gStrDecToLong(slStr, 2)
    End If
    If Not ilTestChg Or tmHdCtrls(BILLCYCLEINDEX).iChg Then
        'Select Case lbcBillCycle.ListIndex
        '    Case 0  'Standard
        '        tgChfCntr.sBillCycle = "S"
        '    Case 1  'Calendar
        '        If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
        '            tgChfCntr.sBillCycle = "C"
        '        Else
        '            tgChfCntr.sBillCycle = "W"
        '        End If
        '    Case 2
        '        tgChfCntr.sBillCycle = "W"
        '    Case Else
        '        'If (Asc(tgSpf.sOptionFields) And &H20) <> &H20 Then
        '        If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
        '            tgChfCntr.sBillCycle = "S"
        '        Else
        '            tgChfCntr.sBillCycle = ""
        '        End If
        'End Select
        If lbcBillCycle.ListIndex >= 0 Then
            tgChfCntr.sBillCycle = Left(lbcBillCycle.List(lbcBillCycle.ListIndex), 1)
        Else
            If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
                tgChfCntr.sBillCycle = "S"
            Else
                tgChfCntr.sBillCycle = ""
            End If
        End If
    End If
    If Not ilTestChg Or tmHdCtrls(INVGROUPINDEX).iChg Then
        Select Case lbcInvGroup.ListIndex
            Case 0  'Only one-all Spots
                tgChfCntr.sInvGp = "A"
            Case 1  '1 per Product
                tgChfCntr.sInvGp = "P"
            Case 2  '1 per Tag
                tgChfCntr.sInvGp = "T"
            Case Else
                If (Asc(tgSpf.sOptionFields) And OFCOOPBILL) <> OFCOOPBILL Then
                    tgChfCntr.sInvGp = "A"
                Else
                    tgChfCntr.sInvGp = ""
                End If
        End Select
    End If
    '10043 iPctTag removed
'    If Not ilTestChg Or tmHdCtrls(PRODTAGINDEX).iChg Then
'        'slStr = edcProdTag.Text
'        slStr = smHdSave(3)
'        'gStrToPDN slStr, 2, 3, tgChfCntr.sPctTag
'        tgChfCntr.iPctTag = gStrDecToInt(slStr, 2)
'    End If
    Exit Sub
mMoveCtrlToRecErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mMoveLnCtrlToRec                *
'*                                                     *
'*             Created:8/09/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move controls values to record *
'*                                                     *
'*******************************************************
Public Function mMoveLnCtrlToRec(ilMakeShrinkTest As Integer) As Integer
'
'   mMoveLnCtrlToRec
'   Where:
'
    Dim ilLoop As Integer
    'Dim ilTest As Integer
    'Dim slStr As String
    'Dim slRecCode As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilDay As Integer
    Dim ilCff As Integer
    Dim ilRes As Integer
    'Dim ilFound As Integer
    Dim ilSvRowNo As Integer
    Dim ilClf As Integer
    Dim ilShrink As Integer
    Dim ilFlt As Integer
    Dim ilVeh As Integer
    Dim ilDP As Integer
    Dim slLineType As String
    Dim ilSvInSave As Integer
    Dim ilFound As Integer
    Dim ilTest As Integer

    mMoveLnCtrlToRec = True
    ilSvRowNo = imLnRowNo
    ilSvInSave = imInSave
    imInSave = True
    For ilLoop = 0 To UBound(tgClfCntr) - 1 Step 1
        imLnRowNo = ilLoop + 1
        smLineType = mGetLineType(imLnRowNo)
        mGetDate True
        ilShrink = False
        'If spots defined remove undenied weeks
        If ilMakeShrinkTest Then
            'For ilFlt = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
            For ilFlt = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
                If imAirSave(1, ilFlt) = 0 Then    'Air week
                    If imAirSave(2, ilFlt) = 0 Then    'Daily
                        For ilDay = 4 To 10 Step 1
                            If Val(smAirSave(ilDay, ilFlt)) > 0 Then
                                ilShrink = True
                                Exit For
                            End If
                        Next ilDay
                        If ilShrink Then
                            Exit For
                        End If
                    Else
                        If Val(smAirSave(3, ilFlt)) > 0 Then
                            ilShrink = True
                            Exit For
                        End If
                    End If
                End If
            Next ilFlt
        End If
        mSetDate ilShrink  'True   'Remove undefined weeks
        'Reset line dates
        smLnSave(14, imLnRowNo) = ""
        smLnSave(15, imLnRowNo) = ""
        ilCff = tgClfCntr(ilLoop).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                If smLnSave(14, imLnRowNo) = "" Then
                    gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), smLnSave(14, imLnRowNo)    'Week Start date
                End If
                gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), smLnSave(15, imLnRowNo)    'Week Start date
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
        slLineType = mGetLineType(imLnRowNo)
        mVehPop False
        mPrgPop imLnRowNo, "L"
        '4/6/12: Add test that vehicle name is defined.  Missing vehicle names for package were not discovered
        If Trim$(smLnSave(1, ilLoop + 1)) = "" Then
            imInSave = ilSvInSave
            '6469
           ' ilRes = MsgBox("Vehicle must be specified", vbOKOnly + vbExclamation, "Incomplete")
            ilRes = MsgBox("Airtime vehicle must be specified", vbOKOnly + vbExclamation, "Incomplete")
            imLnRowNo = ilLoop + 1
            imLnBoxNo = VEHINDEX
            mMoveLnCtrlToRec = False
            Exit Function
        End If
        If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
            'gFindMatch smLnSave(1, ilLoop + 1), 0, lbcLnVehicle(igTabMapIndex)
            gFindMatch smLnSave(1, ilLoop + 1), 0, lbcLnVehicle(0)
            'If gLastFound(lbcLnVehicle(igTabMapIndex)) < 0 Then
            If gLastFound(lbcLnVehicle(0)) < 0 Then
                imInSave = ilSvInSave
                '6469
               ' ilRes = MsgBox("Vehicle must be specified", vbOKOnly + vbExclamation, "Incomplete")
                ilRes = MsgBox("Airtime vehicle must be specified", vbOKOnly + vbExclamation, "Incomplete")
                imLnRowNo = ilLoop + 1
                imLnBoxNo = VEHINDEX
                mMoveLnCtrlToRec = False
                Exit Function
            End If
            'slNameCode = tmVehicleCode(gLastFound(lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
            slNameCode = tmVehicleCode(gLastFound(lbcLnVehicle(0))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mMoveLnCtrlToRecErr
            gCPErrorMsg ilRet, "mMoveLnCtrlToRec (gParseItem field 2)", Contract
            tgClfCntr(ilLoop).ClfRec.iVefCode = CInt(slCode)
        Else
            'Test if real vehicle
            'In case of duplicate names, check on code first
            ilFound = False
            If (tgClfCntr(ilLoop).ClfRec.iVefCode > 0) And (tgClfCntr(ilLoop).iStatus > 0) Then
                For ilVeh = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                    If tgMVef(ilVeh).sType = "P" Then
                        If tgClfCntr(ilLoop).ClfRec.iVefCode = tgMVef(ilVeh).iCode Then
                            If StrComp(Trim$(smLnSave(1, ilLoop + 1)), Trim$(tgMVef(ilVeh).sName), 1) = 0 Then
                                ilFound = True
                            End If
                            Exit For
                        End If
                    End If
                Next ilVeh
            End If
            If Not ilFound Then
                'Check if any previous line used same package name and if so use its code
                For ilTest = 0 To ilLoop - 1 Step 1
                    If StrComp(Trim$(smLnSave(1, ilLoop + 1)), Trim$(smLnSave(1, ilTest + 1)), 1) = 0 Then
                        For ilVeh = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                            If tgMVef(ilVeh).sType = "P" Then
                                If tgClfCntr(ilTest).ClfRec.iVefCode = tgMVef(ilVeh).iCode Then
                                    tgClfCntr(ilLoop).ClfRec.iVefCode = tgMVef(ilVeh).iCode
                                    ilFound = True
                                    Exit For
                                End If
                            End If
                        Next ilVeh
                        If ilFound Then
                            Exit For
                        End If
                    End If
                Next ilTest
                If Not ilFound Then
                    tgClfCntr(ilLoop).ClfRec.iVefCode = 0
                    For ilVeh = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                        If StrComp(Trim$(smLnSave(1, ilLoop + 1)), Trim$(tgPackVeh(ilVeh).sName), 1) = 0 Then
                            If tgPackVeh(ilVeh).iCode <> 0 Then
                                tgClfCntr(ilLoop).ClfRec.iVefCode = tgPackVeh(ilVeh).iCode
                                Exit For
                            End If
                        End If
                    Next ilVeh
                End If
            End If
            For ilVeh = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                If (tgClfCntr(ilLoop).ClfRec.iVefCode = tgMVef(ilVeh).iCode) Or (StrComp(Trim$(tgMVef(ilVeh).sName), Trim$(smLnSave(1, ilLoop + 1)), vbTextCompare) = 0) Then
                    If tgMVef(ilVeh).sType = "G" Then
                        imInSave = ilSvInSave
                        ilRes = MsgBox("Package Vehicle name must not be a Sports Vehicle name", vbOKOnly + vbExclamation, "Incomplete")
                        imLnRowNo = ilLoop + 1
                        imLnBoxNo = VEHINDEX
                        mMoveLnCtrlToRec = False
                        Exit Function
                    End If
                    Exit For
                End If
            Next ilVeh
        End If
        If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
            tgClfCntr(ilLoop).ClfRec.iRdfCode = imLnSave(1, ilLoop + 1)
        Else
            tgClfCntr(ilLoop).ClfRec.iRdfCode = 0
            For ilDP = LBound(tgPackDP) To UBound(tgPackDP) - 1 Step 1
                If StrComp(Trim$(smLnSave(20, ilLoop + 1)), Trim$(tgPackDP(ilDP).sName), 1) = 0 Then
                    If tgPackDP(ilDP).iCode <> 0 Then
                        tgClfCntr(ilLoop).ClfRec.iRdfCode = tgPackDP(ilDP).iCode
                        Exit For
                    End If
                End If
            Next ilDP
        End If
        tgClfCntr(ilLoop).ClfRec.sBB = ""
        'If sgCntrScreen = "Orders" Then
            imLnSave(3, ilLoop + 1) = 0 'BB's
            imLnSave(5, ilLoop + 1) = 0 'Extra (Commercial promo; Donuts; Bookends;..)
        'End If
        Select Case imLnSave(3, ilLoop + 1)
            Case 0    'N/A
                tgClfCntr(ilLoop).ClfRec.sBB = "N"
            Case 1    'Open
                tgClfCntr(ilLoop).ClfRec.sBB = "O"
            Case 2    'Close
                tgClfCntr(ilLoop).ClfRec.sBB = "C"
            Case 3    'Open & Close
                tgClfCntr(ilLoop).ClfRec.sBB = "B"
            Case 4  'Any
                tgClfCntr(ilLoop).ClfRec.sBB = "E"
            Case 5    '1 Open/Week
                tgClfCntr(ilLoop).ClfRec.sBB = "1"
            Case 6    '1 Close/Week
                tgClfCntr(ilLoop).ClfRec.sBB = "2"
            Case 7    '1 Open & Close/Week
                tgClfCntr(ilLoop).ClfRec.sBB = "4"
            Case 8   '1 Any/Week
                tgClfCntr(ilLoop).ClfRec.sBB = "5"
        End Select
        tgClfCntr(ilLoop).ClfRec.sExtra = ""
        Select Case imLnSave(5, ilLoop + 1)
            Case 0    'N/A
                tgClfCntr(ilLoop).ClfRec.sExtra = "N"
            Case 1    'Commercial Promo
                tgClfCntr(ilLoop).ClfRec.sExtra = "C"
            Case 2    'Donut
                tgClfCntr(ilLoop).ClfRec.sExtra = "D"
            Case 3    'Bookend
                tgClfCntr(ilLoop).ClfRec.sExtra = "B"
            Case 4    'Billboards without spots
                tgClfCntr(ilLoop).ClfRec.sExtra = "S"
        End Select
        tgClfCntr(ilLoop).ClfRec.sPgmTime = ""
        If Not tgClfCntr(ilLoop).iGame Then
            Select Case imLnSave(2, ilLoop + 1)
                Case 0    'Program
                    tgClfCntr(ilLoop).ClfRec.sPgmTime = "P"
                Case 1    'Time
                    tgClfCntr(ilLoop).ClfRec.sPgmTime = "T"
            End Select
        End If
        gPackTime "", tgClfCntr(ilLoop).ClfRec.iStartTime(0), tgClfCntr(ilLoop).ClfRec.iStartTime(1)
        gPackTime "", tgClfCntr(ilLoop).ClfRec.iEndTime(0), tgClfCntr(ilLoop).ClfRec.iEndTime(1)
        tgClfCntr(ilLoop).ClfRec.iBreak = 0
        tgClfCntr(ilLoop).ClfRec.iPosition = 0
        Select Case imLnSave(4, ilLoop + 1)
            Case -1   'Not Set- assume N/A
            Case 0    'N/A
            Case 1    'Time override
                If smLnSave(2, ilLoop + 1) <> "" Then
                    gPackTime smLnSave(2, ilLoop + 1), tgClfCntr(ilLoop).ClfRec.iStartTime(0), tgClfCntr(ilLoop).ClfRec.iStartTime(1)
                    gPackTime smLnSave(3, ilLoop + 1), tgClfCntr(ilLoop).ClfRec.iEndTime(0), tgClfCntr(ilLoop).ClfRec.iEndTime(1)
                End If
            Case 2    'Break #
                tgClfCntr(ilLoop).ClfRec.iBreak = Val(smLnSave(4, ilLoop + 1))
            Case 3    'Break # & Position #
                tgClfCntr(ilLoop).ClfRec.iBreak = Val(smLnSave(4, ilLoop + 1))
                tgClfCntr(ilLoop).ClfRec.iPosition = Val(smLnSave(5, ilLoop + 1))
        End Select
        If tgClfCntr(ilLoop).iGame Then
            tgClfCntr(ilLoop).ClfRec.iNoGames = Val(smLnSave(2, ilLoop + 1))
            tgClfCntr(ilLoop).ClfRec.iSpotsOrdered = Val(smLnSave(3, ilLoop + 1))
            gPackTime "", tgClfCntr(ilLoop).ClfRec.iStartTime(0), tgClfCntr(ilLoop).ClfRec.iStartTime(1)
            gPackTime "", tgClfCntr(ilLoop).ClfRec.iEndTime(0), tgClfCntr(ilLoop).ClfRec.iEndTime(1)
            tgClfCntr(ilLoop).ClfRec.sPgmTime = ""
        Else
            tgClfCntr(ilLoop).ClfRec.iNoGames = 0
            tgClfCntr(ilLoop).ClfRec.iSpotsOrdered = 0
        End If
        If imLnSave(8, ilLoop + 1) < 0 Then
            tgClfCntr(ilLoop).ClfRec.sCntPct = "1"  'Set to weekly
        Else
            tgClfCntr(ilLoop).ClfRec.sCntPct = Trim$(str$(imLnSave(8, ilLoop + 1)))
        End If
        tgClfCntr(ilLoop).ClfRec.iLen = Val(smLnSave(16, ilLoop + 1))
        tgClfCntr(ilLoop).ClfRec.sLiveCopy = ""
        If ((Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY) Or ((Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY) Then 'Using Live Copy
            Select Case imLnSave(31, ilLoop + 1)
                Case 1
                    tgClfCntr(ilLoop).ClfRec.sLiveCopy = "R"    'Recorded Cmml
                Case 0
                    tgClfCntr(ilLoop).ClfRec.sLiveCopy = "L"    'Live Cmml
                Case 2
                    tgClfCntr(ilLoop).ClfRec.sLiveCopy = "M"    'Live Promo
                Case 3
                    tgClfCntr(ilLoop).ClfRec.sLiveCopy = "S"    'Recorded promo
                Case 4
                    tgClfCntr(ilLoop).ClfRec.sLiveCopy = "P"    'Pre-recorded cmml
                Case 5
                    tgClfCntr(ilLoop).ClfRec.sLiveCopy = "Q"    'Pre-recorded promo
            End Select
        Else
            tgClfCntr(ilLoop).ClfRec.sLiveCopy = "R"    'Recorded Cmml
        End If
        tgClfCntr(ilLoop).ClfRec.sPreempt = "P"
        Select Case imLnSave(6, ilLoop + 1)
            'Case 1  'Low Priority
            '    tgClfCntr(ilLoop).ClfRec.sPreempt = "P"
            Case 0  'Hign-Priority
                tgClfCntr(ilLoop).ClfRec.sPreempt = "N"
        End Select
        gPackDate smLnSave(14, ilLoop + 1), tgClfCntr(ilLoop).ClfRec.iStartDate(0), tgClfCntr(ilLoop).ClfRec.iStartDate(1)
        gPackDate smLnSave(15, ilLoop + 1), tgClfCntr(ilLoop).ClfRec.iEndDate(0), tgClfCntr(ilLoop).ClfRec.iEndDate(1)
        tgClfCntr(ilLoop).ClfRec.iPriority = -1
        If imLnSave(19, ilLoop + 1) > 0 Then
            tgClfCntr(ilLoop).ClfRec.iPriority = imLnSave(19, ilLoop + 1)
        End If
        tgClfCntr(ilLoop).ClfRec.iBBOpenLen = 0
        If imLnSave(20, ilLoop + 1) > 0 Then
            tgClfCntr(ilLoop).ClfRec.iBBOpenLen = imLnSave(20, ilLoop + 1)
        End If
        tgClfCntr(ilLoop).ClfRec.iBBCloseLen = 0
        If ((Asc(tgSpf.sUsingFeatures6) And BBCLOSEST) <> BBCLOSEST) Then
            If imLnSave(21, ilLoop + 1) > 0 Then
                tgClfCntr(ilLoop).ClfRec.iBBCloseLen = imLnSave(21, ilLoop + 1)
            End If
        End If
        tgClfCntr(ilLoop).ClfRec.iAdvtSepFlag = 0
        If Not mIsLnGame(ilLoop + 1) Then
            tgClfCntr(ilLoop).ClfRec.lghfcode = 0
            tgClfCntr(ilLoop).ClfRec.sGameLayout = ""
        Else
            tgClfCntr(ilLoop).ClfRec.sGameLayout = tgClfCntr(ilLoop).sGameLayout
        End If
        tgClfCntr(ilLoop).ClfRec.sLineChgd = tgClfCntr(ilLoop).sLineChgd
        'ACT1
        tgClfCntr(ilLoop).ClfRec.sACT1LineupCode = ""
        tgClfCntr(ilLoop).ClfRec.sACT1StoredTime = ""
        tgClfCntr(ilLoop).ClfRec.sACT1StoredSpots = ""
        tgClfCntr(ilLoop).ClfRec.sACT1StoreClearPct = ""
        tgClfCntr(ilLoop).ClfRec.sACT1DaypartFilter = ""
        '10256
        mActOneSetClf ilLoop
'        If imACT1CodesDefined Then
'            tgClfCntr(ilLoop).ClfRec.sACT1LineupCode = smLnSave(29, ilLoop + 1)
'            If imLnSave(32, ilLoop + 1) = 0 Then
'                tgClfCntr(ilLoop).ClfRec.sACT1StoredTime = "T"
'            End If
'            If imLnSave(33, ilLoop + 1) = 0 Then
'                tgClfCntr(ilLoop).ClfRec.sACT1StoredSpots = "S"
'            End If
'            If imLnSave(34, ilLoop + 1) = 0 Then
'                tgClfCntr(ilLoop).ClfRec.sACT1StoreClearPct = "C"
'            End If
'            If imLnSave(35, ilLoop + 1) = 0 Then
'                tgClfCntr(ilLoop).ClfRec.sACT1DaypartFilter = "F"
'            End If
'        End If
    Next ilLoop
    For ilLoop = 0 To UBound(tgClfCntr) - 1 Step 1
        imLnRowNo = ilLoop + 1
        smLineType = mGetLineType(imLnRowNo)
        If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
            For ilClf = 0 To UBound(tgClfCntr) - 1 Step 1
                If ilLoop <> ilClf Then
                    slLineType = mGetLineType(ilClf + 1)
                    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                        If tgClfCntr(ilLoop).ClfRec.iVefCode = tgClfCntr(ilClf).ClfRec.iVefCode Then
                            If tgClfCntr(ilLoop).ClfRec.iRdfCode = tgClfCntr(ilClf).ClfRec.iRdfCode Then
                                tgClfCntr(ilLoop).ClfRec.iAdvtSepFlag = -1
                                'Later to speed up separation, add code to check if spots match each week and that
                                'same airing weeks
                                Exit For
                            End If
                        End If
                    End If
                End If
            Next ilClf
        End If
    Next ilLoop
    For ilLoop = 0 To UBound(tgClfCntr) - 1 Step 1
        imLnRowNo = ilLoop + 1
        smLineType = mGetLineType(imLnRowNo)
        If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
            mOV2MoveCtrlToRec imLnRowNo, tgClfCntr(ilLoop).ClfRec
        Else
            slCode = tgSpf.sOverrideOptions
            tgSpf.sOverrideOptions = Chr$(0)
            mOV2MoveCtrlToRec imLnRowNo, tgClfCntr(ilLoop).ClfRec
            tgSpf.sOverrideOptions = slCode
        End If
    Next ilLoop
    imInSave = ilSvInSave
    imLnRowNo = ilSvRowNo
    smLineType = mGetLineType(imLnRowNo)
    Exit Function
mMoveLnCtrlToRecErr:
    imInSave = ilSvInSave
    On Error GoTo 0
    imTerminate = True
    mMoveLnCtrlToRec = False
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mNoEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mNoEnableBox(ilBoxNo As Integer)
'
'   mNoEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    'Dim ilLoop As Integer   'For loop control parameter
    'Dim slRecCode As String
    'Dim slNameCode As String
    'Dim ilFound As Integer
    'Dim ilRet As Integer
    'Dim slCode As String
    Dim slStr As String
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmNoCtrls)) Then
        Exit Sub
    End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case NOPROPINDEX   'Proposal #
            'gShowHelpMess tmChfHelp(), CHFCNTRNO
            edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 9
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
            edcShareDropDown.Text = smPropNo
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
        Case NOESTINDEX     'Estimate #
            'gShowHelpMess tmChfHelp(), CHFCNTRNO
            edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
            edcShareDropDown.Text = smEstNo
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
        Case NORESVADVTINDEX
            mAdvtPop
            If imTerminate Then
                Exit Sub
            End If
            lbcResvAdvt.height = gListBoxHeight(lbcResvAdvt.ListCount, 15)
            edcShareDropDown.Width = tmNoCtrls(NORESVADVTINDEX).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 40
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(NORESVADVTINDEX).fBoxX, tmNoCtrls(NORESVADVTINDEX).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcResvAdvt.Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcResvAdvt.ListIndex < 0 Then
                lbcResvAdvt.ListIndex = 0
            End If
            imComboBoxIndex = lbcResvAdvt.ListIndex
            If lbcResvAdvt.ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcResvAdvt.List(lbcResvAdvt.ListIndex)
            End If
            imChgMode = False
            cmcShareDropDown.Visible = True
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case NORESVORDERINDEX    'Reservation #
            mResvPop
            If imTerminate Then
                Exit Sub
            End If
            lbcResv.height = gListBoxHeight(lbcResv.ListCount, 10)
            edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 9
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcResv.Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            imChgMode = True
            If lbcResv.ListIndex < 0 Then
                lbcResv.ListIndex = 0   '[None]
            End If
            imComboBoxIndex = lbcResv.ListIndex
            If lbcResv.ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcResv.List(lbcResv.ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case NOEDICLIENTCODEINDEX     'EDI Client Code (Field 25 in Record 31)
            edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 8  '10
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
            edcShareDropDown.Text = smEDIClientCode
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
        Case NOEDIPRODUCTCODEINDEX     'EDI Product Code (Field 27 in Record 31)
            'gShowHelpMess tmChfHelp(), CHFCNTRNO
            edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 8  '10
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
            edcShareDropDown.Text = smEDIProductCode
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
        'Case NOINVPROJCODEINDEX     'EDI Client Code (Field 25 in Record 31)
        '    edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW
        '    edcShareDropDown.MaxLength = 10
        '    gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
        '    edcShareDropDown.Text = smInvProjCode
        '    edcShareDropDown.Visible = True  'Set visibility
        '    edcShareDropDown.SetFocus
        'Case NOINVSMSNOINDEX     'EDI Product Code (Field 27 in Record 31)
        '    'gShowHelpMess tmChfHelp(), CHFCNTRNO
        '    edcShareDropDown.Width = tmNoCtrls(ilBoxNo).fBoxW
        '    edcShareDropDown.MaxLength = 10
        '    gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(ilBoxNo).fBoxX, tmNoCtrls(ilBoxNo).fBoxY
        '    edcShareDropDown.Text = smInvSMSNo
        '    edcShareDropDown.Visible = True  'Set visibility
        '    edcShareDropDown.SetFocus
        Case NODATEINDEX    'Date Needed
            'gShowHelpMess tmClfHelp(), CLFSTARTDATE
            edcShareDropDown.Width = tmNoCtrls(NODATEINDEX).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 10
            gMoveFormCtrl pbcNumber, edcShareDropDown, tmNoCtrls(NODATEINDEX).fBoxX, tmNoCtrls(NODATEINDEX).fBoxY
            edcShareDropDown.Text = smDtNeeded
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            plcCalendar.Move edcShareDropDown.Left + edcShareDropDown.Width + cmcShareDropDown.Width - plcCalendar.Width, edcShareDropDown.Top + edcShareDropDown.height
            If smDtNeeded = "" Then
                slStr = Format$(gNow(), "m/d/yy")
                slStr = gObtainNextMonday(slStr)
                gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
                lacDate.Visible = False
            Else
                gObtainMonthYear imCalType, smDtNeeded, imCalMonth, imCalYear
            End If
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            plcCalendar.Visible = False 'True
            edcShareDropDown.SetFocus
    End Select
    mNoSetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
    Exit Sub

    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mNoSetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mNoSetChg(ilBoxNo As Integer)
'
'   mNoSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmNoCtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case NOPROPINDEX 'Proposal Number
            slStr = Trim$(str$(tgChfCntr.lCntrNo))
            gSetChgFlag slStr, edcShareDropDown, tmNoCtrls(ilBoxNo)
        Case NOESTINDEX 'Estimate number
            slStr = Trim$(tgChfCntr.sAgyEstNo) & Trim$(tgChfCntr.sTitle)
            gSetChgFlag slStr, edcShareDropDown, tmNoCtrls(ilBoxNo)
        Case NORESVADVTINDEX 'Reservation
            gSetChgFlag smResvAdvt, edcShareDropDown, tmNoCtrls(ilBoxNo)
        Case NORESVORDERINDEX 'Reservation
            gSetChgFlag smInitResvNo, edcShareDropDown, tmNoCtrls(ilBoxNo)
        Case NOEDICLIENTCODEINDEX 'EDI Client Code (Field 25 in Record 31)
            gSetChgFlag smEDIClientCode, edcShareDropDown, tmNoCtrls(ilBoxNo)
        Case NOEDIPRODUCTCODEINDEX 'EDI Product Code (Field 27 in Record 31)
            gSetChgFlag smEDIProductCode, edcShareDropDown, tmNoCtrls(ilBoxNo)
        'Case NOINVPROJCODEINDEX 'EDI Client Code (Field 25 in Record 31)
        '    gSetChgFlag smInvProjCode, edcShareDropDown, tmNoCtrls(ilBoxNo)
        'Case NOINVSMSNOINDEX 'EDI Product Code (Field 27 in Record 31)
        '    gSetChgFlag smInvSMSNo, edcShareDropDown, tmNoCtrls(ilBoxNo)
        Case NODATEINDEX 'Date Needed
            gSetChgFlag smInitDtNeed, edcShareDropDown, tmNoCtrls(ilBoxNo)
    End Select
    tmHdCtrls(CNTRNOINDEX).iChg = False
    For ilLoop = imLBCTCtrls To UBound(tmNoCtrls) Step 1
        If tmNoCtrls(ilLoop).iChg Then
            tmHdCtrls(CNTRNOINDEX).iChg = True
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mNoSetFocus                     *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mNoSetFocus(ilBoxNo As Integer)
'
'   mNoSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    'Dim ilLoop As Integer   'For loop control parameter
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmNoCtrls) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case NOPROPINDEX   'Proposal #
            edcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case NOESTINDEX 'Estimate #
            edcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case NORESVADVTINDEX   'Reservation
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case NORESVORDERINDEX   'Reservation
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case NODATEINDEX 'Date Needed
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mNoSetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mNoSetShow(ilBoxNo As Integer)
'
'   mNoSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilRet As Integer
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmNoCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case NOPROPINDEX   'Proposal Number
            edcShareDropDown.Visible = False  'Set visibility
            edcCntrNo.Text = edcShareDropDown.Text
            If imStep1Index > 1 Then
                ilRet = mGetNextCntrNo(hmCHF, lmChfRecPos, lmCntrChfCode)
            End If
            slStr = edcCntrNo.Text
            smPropNo = slStr
            gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        Case NOESTINDEX 'Estimate Number
            edcShareDropDown.Visible = False  'Set visibility
            slStr = edcShareDropDown.Text
            smEstNo = slStr
            gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        Case NORESVADVTINDEX   'Reservation
            lbcResvAdvt.Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcResvAdvt.ListIndex > 0 Then
                slStr = lbcResvAdvt.Text
            Else
                slStr = ""
                mResvPop
                lbcResv.ListIndex = 0
                gSetShow pbcNumber, slStr, tmNoCtrls(NORESVORDERINDEX)
            End If
            gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        Case NORESVORDERINDEX   'Reservation
            lbcResv.Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If lbcResv.ListIndex > 0 Then
                slStr = lbcResv.Text
            Else
                slStr = ""
            End If
            gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        Case NOEDICLIENTCODEINDEX 'EDI Client Code (Field 25 in Record 31)
            edcShareDropDown.Visible = False  'Set visibility
            slStr = edcShareDropDown.Text
            smEDIClientCode = slStr
            gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        Case NOEDIPRODUCTCODEINDEX 'EDI Product Code (Field 27 in Record 31)
            edcShareDropDown.Visible = False  'Set visibility
            slStr = edcShareDropDown.Text
            smEDIProductCode = slStr
            gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        'Case NOINVPROJCODEINDEX 'EDI Client Code (Field 25 in Record 31)
        '    edcShareDropDown.Visible = False  'Set visibility
        '    slStr = edcShareDropDown.Text
        '    smInvProjCode = slStr
        '    gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        'Case NOINVSMSNOINDEX 'EDI Product Code (Field 27 in Record 31)
        '    edcShareDropDown.Visible = False  'Set visibility
        '    slStr = edcShareDropDown.Text
        '    smInvSMSNo = slStr
        '    gSetShow pbcNumber, slStr, tmNoCtrls(ilBoxNo)
        Case NODATEINDEX 'Date Needed
            plcCalendar.Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            slStr = edcShareDropDown.Text
            If gValidDate(slStr) Then   'Check that date is valid (press cancel with invalid date showing)
                smDtNeeded = edcShareDropDown.Text
            Else
                smDtNeeded = ""
                slStr = ""
            End If
            gSetShow pbcNumber, slStr, tmNoCtrls(NODATEINDEX)
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mNoTestFields                   *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test fields for mandatory and   *
'*                     blanks                          *
'*                                                     *
'*******************************************************
Private Function mNoTestFields(ilCtrlNo As Integer, ilState As Integer) As Integer
'
'   iState = ALLBLANK+NOMSG   'Blank
'   iTest = TESTALLCTRLS
'   iRet = mTestFields(iTest, iState)
'   Where:
'       iTest (I)- Test all controls or control number specified
'       iState (I)- Test one of the following:
'                  ALLBLANK=All fields blank
'                  ALLMANBLANK=All mandatory
'                    field blank
'                  ALLMANDEFINED=All mandatory
'                    fields have data
'                  Plus
'                  NOMSG=No error message shown
'                  SHOWMSG=show error message
'       iRet (O)- True if all mandatory fields blank, False if not all blank
'
'
    'Dim slMess As String    'Message string
    'Dim ilRes As Integer    'Result of MsgBox
    'Dim ilLoop As Integer
    'Dim slStr As String

    If (ilCtrlNo = NOPROPINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(edcShareDropDown, "", "Proposal # must be specified", tmNoCtrls(NOPROPINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imNoBoxNo = NOPROPINDEX
            End If
            mNoTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = NOESTINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(edcShareDropDown, "", "Estimate # must be specified", tmNoCtrls(NOESTINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imNoBoxNo = NOESTINDEX
            End If
            mNoTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = NORESVADVTINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcResvAdvt, "", "Reservation Advertiser must be specified", tmNoCtrls(NORESVADVTINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imNoBoxNo = NORESVADVTINDEX
            End If
            mNoTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = NORESVORDERINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcResv, "", "Reservation Order # must be specified", tmNoCtrls(NORESVORDERINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imNoBoxNo = NORESVORDERINDEX
            End If
            mNoTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = NODATEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(edcShareDropDown, "", "Date Needed must be specified", tmNoCtrls(NODATEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imNoBoxNo = NODATEINDEX
            End If
            mNoTestFields = NO
            Exit Function
        End If
    End If
    mNoTestFields = YES
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mOKID                           *
'*                                                     *
'*             Created:8/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test that ID is unique          *
'*                                                     *
'*******************************************************
Public Function mOKID(slCode As String) As Integer
    Dim ilRet As Integer
    Dim ilNotFound As Integer
    Dim ilCheckNo As Integer
    Dim llChfRecPos As Long
    'Dim tlHdSrchKey As CHFKEY1  'CHF key record image

    ilCheckNo = False
    If sgCntrScreen = "Orders" Then
        If (imStep1Index <= 3) Then
            ilCheckNo = True
        End If
    Else
        If (imStep1Index <= 5) Then
            ilCheckNo = True
        End If
    End If
    If ilCheckNo Then
        If Trim$(slCode) <> "" Then    'Test name
            ilNotFound = False
            tmChfSrchKey1.lCntrNo = Val(slCode)
            tmChfSrchKey1.iCntRevNo = 32000
            tmChfSrchKey1.iPropVer = 32000
            ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            Do While (ilRet = BTRV_ERR_NONE) And (tmDiffChf.lCntrNo = Val(slCode))
                ilRet = btrGetPosition(hmCHF, llChfRecPos)
                'If llChfRecPos = lmChfRecPos Then
                If lmCntrChfCode = tmDiffChf.lCode Then
                    'ilRet = btrGetDirect(hmCHF, tmDiffChf, imCHFRecLen, lmChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    tmChfSrchKey.lCode = lmCntrChfCode
                    ilRet = btrGetEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                    On Error GoTo mOKIDErr
                    gBtrvErrorMsg ilRet, "mOKID (btrGetEqual: Contract)", Contract
                    On Error GoTo 0
                    mOKID = True
                    Exit Function
                End If
                ilNotFound = True
                ilRet = btrGetNext(hmCHF, tmDiffChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If Not ilNotFound Then
                'If lmChfRecPos <> 0 Then
                If lmCntrChfCode > 0 Then
                    'ilRet = btrGetDirect(hmCHF, tmDiffChf, imCHFRecLen, lmChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    tmChfSrchKey.lCode = lmCntrChfCode
                    ilRet = btrGetEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                    On Error GoTo mOKIDErr
                    gBtrvErrorMsg ilRet, "mOKID (btrGetEqual: Contract)", Contract
                    On Error GoTo 0
                End If
                mOKID = True
                Exit Function
            End If
            'If lmChfRecPos <> 0 Then
            If lmCntrChfCode > 0 Then
                'ilRet = btrGetDirect(hmCHF, tmDiffChf, imCHFRecLen, lmChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmChfSrchKey.lCode = lmCntrChfCode
                ilRet = btrGetEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                On Error GoTo mOKIDErr
                gBtrvErrorMsg ilRet, "mOKID (btrGetEqual: Contract)", Contract
                On Error GoTo 0
            End If
            Beep
            Screen.MousePointer = vbDefault
            MsgBox "Number already used, enter a different number", vbOKOnly + vbExclamation + vbApplicationModal, "Error"
            'If lmChfRecPos <> 0 Then
            If lmCntrChfCode > 0 Then
                slCode = Trim$(str$(tgChfCntr.lCntrNo)) 'Reset text
            Else
                slCode = " "    'Leave space so number will not be assigned
            End If
            edcCntrNo.Text = slCode
            mSetShow imHdBoxNo
            imHdBoxNo = CNTRNOINDEX
            mEnableBox imHdBoxNo
            mOKID = False
            Exit Function
        End If
    End If
    'Assign unique number
    mOKID = True
    Exit Function
mOKIDErr:
    mOKID = False
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mOvEnableBox                    *
'*                                                     *
'*             Created:8/14/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Public Sub mOvEnableBox(ilBoxNo As Integer)
'
'   mOvEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer
    Dim ilLen As Integer
    Dim slStr As String
    Dim ilPos As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilVff As Integer
    Dim ilVefCode As Integer
    

    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        'pbcClickFocus.SetFocus
        pbcOv.SetFocus
        Exit Sub
    End If
    If (imOVType <> 2) And (imOVType <> 3) Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmOV1Ctrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OVWDINDEX
                pbcDGPreempt.Width = tmOV1Ctrls(OVWDINDEX).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(OVWDINDEX).fBoxX, tmOV1Ctrls(OVWDINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OVDAYSINDEX To OVDAYSINDEX + 6 'Day index
                If imOvDays(ilBoxNo - OVDAYSINDEX) < 0 Then
                    If imAllowedDays(ilBoxNo - OVDAYSINDEX + LBound(imAllowedDays)) Then
                        imOvDays(ilBoxNo - OVDAYSINDEX) = 1
                    Else
                        imOvDays(ilBoxNo - OVDAYSINDEX) = 0
                    End If
                End If
                If imDGSave(2) = 0 Then 'Daily
                    edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW
                    edcDGDropDown.MaxLength = 3
                    gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                    edcDGDropDown.Text = smDGSave(3 + ilBoxNo - OVDAYSINDEX)
                    edcDGDropDown.SelStart = 0
                    edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                    edcDGDropDown.Visible = True  'Set visibility
                    'cmcDGDropDown.Visible = True
                    edcDGDropDown.SetFocus
                Else
                    'Weekly
                    pbcDGPreempt.Width = tmOV1Ctrls(ilBoxNo).fBoxW
                    gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                    pbcDGPreempt_Paint
                    pbcDGPreempt.Visible = True  'Set visibility
                    pbcDGPreempt.SetFocus
                End If
            Case OVSTARTTIMEINDEX
                edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW + cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 10
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                plcTme.Move edcDGDropDown.Left, edcDGDropDown.Top - plcTme.height
                edcDGDropDown.Text = smDGSave(13)
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                'plcTme.Visible = True
                edcDGDropDown.SetFocus
            Case OVENDTIMEINDEX
                edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW + cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 10
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                plcTme.Move cmcDGDropDown.Left + cmcDGDropDown.Width - plcTme.Width, edcDGDropDown.Top - plcTme.height
                edcDGDropDown.Text = smDGSave(14)
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                'plcTme.Visible = True
                edcDGDropDown.SetFocus

            Case OVHIGHINDEX
                pbcDGPreempt.Width = tmOV1Ctrls(OVHIGHINDEX).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(OVHIGHINDEX).fBoxX, tmOV1Ctrls(OVHIGHINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OVRANKINDEX
                edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW
                edcDGDropDown.MaxLength = 4
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                If imDGSave(4) > 0 Then
                    edcDGDropDown.Text = Trim$(str$(imDGSave(4)))
                Else
                    edcDGDropDown.Text = ""
                End If
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                edcDGDropDown.SetFocus
            Case OVBBOPENINDEX
                mLenPop
                lbcBBLen.height = gListBoxHeight(lbcBBLen.ListCount, 5)
                edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW - cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 6
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                imChgMode = True
                lbcBBLen.ListIndex = -1
                For ilLoop = 0 To lbcBBLen.ListCount - 1 Step 1
                    If Val(lbcBBLen.List(ilLoop)) = imDGSave(5) Then
                        lbcBBLen.ListIndex = ilLoop
                        imComboBoxIndex = lbcBBLen.ListIndex
                        edcDGDropDown.Text = lbcBBLen.List(ilLoop)
                        Exit For
                    End If
                Next ilLoop
                If lbcBBLen.ListIndex = -1 Then
                    If lbcBBLen.ListCount > 0 Then
                        lbcBBLen.ListIndex = 0
                        imComboBoxIndex = lbcBBLen.ListIndex
                        edcDGDropDown.Text = lbcBBLen.List(0)
                    Else
                        lbcBBLen.ListIndex = -1
                        imComboBoxIndex = lbcBBLen.ListIndex
                        edcDGDropDown.Text = ""
                    End If
                End If
                imChgMode = False
                'If imLnRowNo - vbcLines.Value <= vbcLines.LargeChange \ 2 Then
                lbcBBLen.Move edcDGDropDown.Left, edcDGDropDown.Top + edcDGDropDown.height
                If lbcBBLen.Top + lbcBBLen.height >= cmcUpdate.Top + cmcUpdate.height Then
                    lbcBBLen.Move edcDGDropDown.Left, edcDGDropDown.Top - lbcBBLen.height
                End If
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True
                cmcDGDropDown.Visible = True
                edcDGDropDown.SetFocus
            Case OVBBCLOSEINDEX
                mLenPop
                lbcBBLen.height = gListBoxHeight(lbcBBLen.ListCount, 5)
                edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW - cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 6
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                imChgMode = True
                lbcBBLen.ListIndex = -1
                For ilLoop = 0 To lbcBBLen.ListCount - 1 Step 1
                    If Val(lbcBBLen.List(ilLoop)) = imDGSave(6) Then
                        lbcBBLen.ListIndex = ilLoop
                        imComboBoxIndex = lbcBBLen.ListIndex
                        edcDGDropDown.Text = lbcBBLen.List(ilLoop)
                        Exit For
                    End If
                Next ilLoop
                If lbcBBLen.ListIndex = -1 Then
                    If lbcBBLen.ListCount > 0 Then
                        lbcBBLen.ListIndex = 0
                        imComboBoxIndex = lbcBBLen.ListIndex
                        edcDGDropDown.Text = lbcBBLen.List(0)
                    Else
                        lbcBBLen.ListIndex = -1
                        imComboBoxIndex = lbcBBLen.ListIndex
                        edcDGDropDown.Text = ""
                    End If
                End If
                imChgMode = False
                'If imLnRowNo - vbcLines.Value <= vbcLines.LargeChange \ 2 Then
                lbcBBLen.Move edcDGDropDown.Left, edcDGDropDown.Top + edcDGDropDown.height
                If lbcBBLen.Top + lbcBBLen.height >= cmcUpdate.Top + cmcUpdate.height Then
                    lbcBBLen.Move edcDGDropDown.Left, edcDGDropDown.Top - lbcBBLen.height
                End If
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True
                cmcDGDropDown.Visible = True
                edcDGDropDown.SetFocus
            Case OVCOPYINDEX
                pbcDGPreempt.Width = (3 * tmOV1Ctrls(OVCOPYINDEX).fBoxW) / 2
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(OVCOPYINDEX).fBoxX, tmOV1Ctrls(OVCOPYINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1LINEUPINDEX
                edcDGDropDown.Width = tmOV1Ctrls(ilBoxNo).fBoxW
                edcDGDropDown.MaxLength = 11
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV1Ctrls(ilBoxNo).fBoxX, tmOV1Ctrls(ilBoxNo).fBoxY
                'If Trim$(smDGSave(15)) = "" Then
                '    gFindMatch smLnSave(1, imLnRowNo), 0, lbcLnVehicle(igTabMapIndex)
                '    If gLastFound(lbcLnVehicle(igTabMapIndex)) < 0 Then
                '        ilVefCode = 0
                '    Else
                '        slNameCode = tmVehicleCode(gLastFound(lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                '        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                '        ilVefCode = CInt(slCode)
                '    End If
                '    If ilVefCode > 0 Then
                '        ilVff = gBinarySearchVff(ilVefCode)
                '        If ilVff <> -1 Then
                '            smDGSave(15) = tgVff(ilVff).sACT1LineupCode
                '        End If
                '    End If
                'End If
                edcDGDropDown.Text = Trim$(smDGSave(15))
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                edcDGDropDown.SetFocus
            Case ACT1STOREDTIMESINDEX
                pbcDGPreempt.Width = tmOV1Ctrls(ACT1STOREDTIMESINDEX).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(ACT1STOREDTIMESINDEX).fBoxX, tmOV1Ctrls(ACT1STOREDTIMESINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1STOREDSPOTSINDEX
                pbcDGPreempt.Width = tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxX, tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1STOREDCLEARPCTINDEX
                pbcDGPreempt.Width = tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX).fBoxX, tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1DAYPARTFILTERINDEX
                pbcDGPreempt.Width = tmOV1Ctrls(ACT1DAYPARTFILTERINDEX).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV1Ctrls(ACT1DAYPARTFILTERINDEX).fBoxX, tmOV1Ctrls(ACT1DAYPARTFILTERINDEX).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
        End Select
    ElseIf imOVType = 2 Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmOV2Ctrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OV2DAYSINDEX To OV2DAYSINDEX + 6 'Day index
                pbcDGPreempt.Width = tmOV2Ctrls(ilBoxNo).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OV2STARTTIMEINDEX
                edcDGDropDown.Width = tmOV2Ctrls(ilBoxNo).fBoxW + cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 10
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                plcTme.Move edcDGDropDown.Left, edcDGDropDown.Top - plcTme.height
                edcDGDropDown.Text = smLnSave(25, imLnRowNo)
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                'plcTme.Visible = True
                edcDGDropDown.SetFocus
            Case OV2ENDTIMEINDEX
                edcDGDropDown.Width = tmOV2Ctrls(ilBoxNo).fBoxW + cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 10
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                plcTme.Move cmcDGDropDown.Left + cmcDGDropDown.Width - plcTme.Width, edcDGDropDown.Top - plcTme.height
                edcDGDropDown.Text = smLnSave(26, imLnRowNo)
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                'plcTme.Visible = True
                edcDGDropDown.SetFocus
            Case OV2SPLITINDEX
                mPopRegion
                lbcRegion.height = gListBoxHeight(lbcRegion.ListCount, 5)
                lbcRegion.Width = 2 * tmOV2Ctrls(ilBoxNo).fBoxW
                edcDGDropDown.Width = tmOV2Ctrls(ilBoxNo).fBoxW - cmcDGDropDown.Width
                edcDGDropDown.MaxLength = 0
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                cmcDGDropDown.Move edcDGDropDown.Left + edcDGDropDown.Width, edcDGDropDown.Top
                edcDGDropDown.Width = 2 * edcDGDropDown.Width
                edcDGDropDown.Left = cmcDGDropDown.Left + cmcDGDropDown.Width - edcDGDropDown.Width
                imChgMode = True
                lbcRegion.ListIndex = -1
                For ilLoop = 0 To lbcRegion.ListCount - 1 Step 1
                    If lbcRegion.List(ilLoop) = smLnSave(28, imLnRowNo) Then
                        lbcRegion.ListIndex = ilLoop
                        imComboBoxIndex = lbcRegion.ListIndex
                        edcDGDropDown.Text = lbcRegion.List(ilLoop)
                        Exit For
                    End If
                Next ilLoop
                If lbcRegion.ListIndex = -1 Then
                    If lbcRegion.ListCount > 0 Then
                        lbcRegion.ListIndex = 1
                        imComboBoxIndex = lbcRegion.ListIndex
                        edcDGDropDown.Text = lbcRegion.List(1)
                    Else
                        lbcRegion.ListIndex = -1
                        imComboBoxIndex = lbcRegion.ListIndex
                        edcDGDropDown.Text = ""
                    End If
                End If
                imChgMode = False
                'If imLnRowNo - vbcLines.Value <= vbcLines.LargeChange \ 2 Then
                lbcRegion.Move cmcDGDropDown.Left + cmcDGDropDown.Width - lbcRegion.Width, edcDGDropDown.Top + edcDGDropDown.height
                If lbcRegion.Top + lbcRegion.height >= cmcUpdate.Top + cmcUpdate.height Then
                    lbcRegion.Move lbcRegion.Left, edcDGDropDown.Top - lbcRegion.height
                End If
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True
                cmcDGDropDown.Visible = True
                edcDGDropDown.SetFocus
            Case OV2ALLOCATIONINDEX
                edcDGDropDown.Width = tmOV2Ctrls(ilBoxNo).fBoxW
                edcDGDropDown.MaxLength = 6
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                If Trim$(smLnSave(27, imLnRowNo)) <> "" Then
                    edcDGDropDown.Text = Trim$(smLnSave(27, imLnRowNo))
                Else
                    edcDGDropDown.Text = ""
                End If
                edcDGDropDown.SelStart = 0
                edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                edcDGDropDown.Visible = True  'Set visibility
                edcDGDropDown.SetFocus
            Case OV2ACQUISITIONINDEX
                '5/4/20: The handling of the Acq adjustment by spot length is not consistent
                '        It is added only with vehicle type C or S but in the contract when clicking in the acq override field, it is testing for Vehicle type R
                '        see mSetDefAcqCost and mAcqCostPop
                '        Acq Cost adjustment record type is method I, whereas the commission record method is N
                '        The code to get the adj record is in error. Date should be set to 1/1/1970 and use a getEqual
                'I think that the listbox contract should not be shown, only used. If shown and row selected, it is not working correctly.
                mAcqCostPop
                lbcAcqCost.height = gListBoxHeight(lbcAcqCost.ListCount, 5)
                lbcAcqCost.Width = 2 * tmOV2Ctrls(ilBoxNo).fBoxW
                edcDGDropDown.Width = tmOV2Ctrls(ilBoxNo).fBoxW
                edcDGDropDown.MaxLength = 12
                gMoveFormCtrl pbcOv, edcDGDropDown, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                lbcAcqCost.Move edcDGDropDown.Left, edcDGDropDown.Top + edcDGDropDown.height
                If lbcAcqCost.Top + lbcAcqCost.height >= cmcUpdate.Top + cmcUpdate.height Then
                    lbcAcqCost.Move lbcAcqCost.Left, edcDGDropDown.Top - lbcAcqCost.height
                End If
                If Trim$(smLnSave(24, imLnRowNo)) <> "" Then
                    edcDGDropDown.Text = Trim$(smLnSave(24, imLnRowNo))
                Else
                    edcDGDropDown.Text = ""
                    If lbcAcqCost.ListCount > 0 Then
                        ilLen = -1
                        If Trim$(smLnSave(16, imLnRowNo)) <> "" Then
                            ilLen = Val(Trim$(smLnSave(16, imLnRowNo)))
                        Else
                            If imVpfIndex >= 0 Then
                                ilLen = tgVpf(imVpfIndex).iSDLen
                            End If
                        End If
                        If ilLen <> -1 Then
                            For ilLoop = 0 To lbcAcqCost.ListCount - 1 Step 1
                                slStr = lbcAcqCost.List(ilLoop)
                                ilPos = InStr(1, slStr, ": ", vbTextCompare)
                                If ilPos > 0 Then
                                    If Val(Left$(slStr, ilPos - 2)) = ilLen Then
                                        lbcAcqCost.ListIndex = ilLoop
                                        Exit For
                                    End If
                                End If
                            Next ilLoop
                        End If
                    End If
                End If
                If mAllowedToChgAcqCost(imLnRowNo) Then
                    If lbcAcqCost.ListCount > 0 Then
                        lbcAcqCost.Visible = True
                    Else
                        lbcAcqCost.Visible = False
                    End If
                    edcDGDropDown.SelStart = 0
                    edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                    edcDGDropDown.Visible = True  'Set visibility
                    edcDGDropDown.SetFocus
                End If
            Case OV2SOLOINDEX
                pbcDGPreempt.Width = tmOV2Ctrls(ilBoxNo).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OV21STINDEX
                pbcDGPreempt.Width = tmOV2Ctrls(ilBoxNo).fBoxW
                gMoveFormCtrl pbcOv, pbcDGPreempt, tmOV2Ctrls(ilBoxNo).fBoxX, tmOV2Ctrls(ilBoxNo).fBoxY
                pbcDGPreempt_Paint
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
        End Select
    End If
    'If (imOVType = 3) And (igFreezeState = 1) And (pbcOVWD(0).Visible) Then
    If (imOVType = 3) And (pbcOVWD(0).Visible) Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDailyCtrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OV2DAYSINDEX To OV2DAYSINDEX + 6 'Day index
                If imLnSave(8, imLnRowNo) = 0 Then
                    edcDGDropDown.Width = tmDailyCtrls(ilBoxNo).fBoxW
                    edcDGDropDown.MaxLength = 3
                    gMoveFormCtrl pbcOVWD(0), edcDGDropDown, tmDailyCtrls(ilBoxNo).fBoxX, tmDailyCtrls(ilBoxNo).fBoxY
                    edcDGDropDown.Text = smLnSave(7 + ilBoxNo - OV2DAYSINDEX, imLnRowNo)
                    edcDGDropDown.SelStart = 0
                    edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                    edcDGDropDown.Visible = True  'Set visibility
                    edcDGDropDown.SetFocus
                Else
                    If imLnSave(12 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) < 0 Then
                        If imAllowedDays(ilBoxNo - OV2DAYSINDEX + LBound(imAllowedDays)) Then
                            imLnSave(12 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                        Else
                            imLnSave(12 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                        End If
                    End If
                    pbcDGPreempt.Width = tmDailyCtrls(ilBoxNo).fBoxW
                    gMoveFormCtrl pbcOVWD(0), pbcDGPreempt, tmDailyCtrls(ilBoxNo).fBoxX, tmDailyCtrls(ilBoxNo).fBoxY
                    pbcDGPreempt_Paint
                    pbcDGPreempt.Visible = True  'Set visibility
                    pbcDGPreempt.SetFocus
                End If
        End Select
    End If
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mOvSrtFocus                     *
'*                                                     *
'*             Created:8/14/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mOvSetFocus(ilBoxNo As Integer)
'
'   mOvSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imOVType <> 2) And (imOVType <> 3) Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmOV1Ctrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OVWDINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OVDAYSINDEX To OVDAYSINDEX + 6 'Day index
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OVSTARTTIMEINDEX
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                'plcTme.Visible = True
                edcDGDropDown.SetFocus
            Case OVENDTIMEINDEX
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                'plcTme.Visible = True
                edcDGDropDown.SetFocus
            'Case OVPREEMPTINDEX
            Case OVCOPYINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OVHIGHINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OVRANKINDEX
                edcDGDropDown.Visible = True  'Set visibility
                edcDGDropDown.SetFocus
            Case ACT1LINEUPINDEX
                edcLNDropDown.Visible = True  'Set visibility
                edcLNDropDown.SetFocus
            Case ACT1STOREDTIMESINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1STOREDSPOTSINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1STOREDCLEARPCTINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case ACT1DAYPARTFILTERINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
        End Select
    ElseIf imOVType = 2 Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmOV2Ctrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OV2DAYSINDEX To OV2DAYSINDEX + 6 'Day index
                'If (igFreezeState = 1) And (pbcOVWD(0).Visible) Then
                If (pbcOVWD(0).Visible) Then
                    edcDGDropDown.Visible = True  'Set visibility
                    edcDGDropDown.SetFocus
                Else
                    pbcDGPreempt.Visible = True  'Set visibility
                    pbcDGPreempt.SetFocus
                End If
            Case OV2STARTTIMEINDEX
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                edcDGDropDown.SetFocus
            Case OV2ENDTIMEINDEX
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                edcDGDropDown.SetFocus
            Case OV2SPLITINDEX
                edcDGDropDown.Visible = True  'Set visibility
                cmcDGDropDown.Visible = True
                edcDGDropDown.SetFocus
            Case OV2ALLOCATIONINDEX
                edcDGDropDown.Visible = True  'Set visibility
                edcDGDropDown.SetFocus
            Case OV2ACQUISITIONINDEX
                edcDGDropDown.Visible = True  'Set visibility
                edcDGDropDown.SetFocus
            Case OV2SOLOINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
            Case OV21STINDEX
                pbcDGPreempt.Visible = True  'Set visibility
                pbcDGPreempt.SetFocus
        End Select
    ElseIf imOVType = 3 Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDailyCtrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OV2DAYSINDEX To OV2DAYSINDEX + 6 'Day index
                If imLnSave(8, imLnRowNo) = 0 Then
                    edcDGDropDown.Visible = True  'Set visibility
                    edcDGDropDown.SetFocus
                Else
                    pbcDGPreempt.Visible = True
                    pbcDGPreempt.SetFocus
                End If
        End Select
   End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mOvSetShow                      *
'*                                                     *
'*             Created:8/14/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mOvSetShow(ilBoxNo As Integer)
'
'   mDGSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim slStr As String
    Dim ilLoop As Integer

    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Sub
    End If
    If (imOVType <> 2) And (imOVType <> 3) Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmOV1Ctrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OVWDINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(2) = 0 Then
                    slStr = "Daily"
                Else
                    slStr = "Weekly"
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
                If imLnSave(8, imLnRowNo) <> imDGSave(2) Then
                    For ilLoop = OVDAYSINDEX To OVDAYSINDEX + 6 Step 1
                        If imDGSave(2) = 0 Then
                            'smDGSave(3 + ilLoop - OVDAYSINDEX) = smLnSave(7 + ilLoop - OVDAYSINDEX, imLnRowNo)
                            'slStr = smLnSave(7 + ilLoop - OVDAYSINDEX, imLnRowNo)
                            smDGSave(3 + ilLoop - OVDAYSINDEX) = ""
                            slStr = ""
                        Else
                            If imOvDays(ilLoop - OVDAYSINDEX) = 0 Then
                                slStr = "Yes"
                            ElseIf imOvDays(ilLoop - OVDAYSINDEX) = 1 Then
                                slStr = "No"
                            ElseIf imOvDays(ilLoop - OVDAYSINDEX) = 2 Then
                                slStr = "Mix"
                            Else
                                slStr = ""
                            End If
                        End If
                        gSetShow pbcOv, slStr, tmOV1Ctrls(ilLoop)
                    Next ilLoop
                    pbcOv.Cls
                    pbcOv_Paint
                End If
                If imDGSave(2) = 0 Then
                    For ilLoop = 0 To 6 Step 1
                        imLnSave(24 + ilLoop, imLnRowNo) = -1
                    Next ilLoop
                End If
            Case OVDAYSINDEX To OVDAYSINDEX + 6 'Day index
                If imDGSave(2) = 0 Then
                    edcDGDropDown.Visible = False  'Set visibility
                    slStr = edcDGDropDown.Text
                    smDGSave(3 + ilBoxNo - OVDAYSINDEX) = slStr
                    If Val(slStr) <= 0 Then
                        imOvDays(ilBoxNo - OVDAYSINDEX) = 1
                    Else
                        imOvDays(ilBoxNo - OVDAYSINDEX) = 0
                    End If
                Else
                    pbcDGPreempt.Visible = False
                    If imOvDays(ilBoxNo - OVDAYSINDEX) = 0 Then
                        slStr = "Yes"
                    ElseIf imOvDays(ilBoxNo - OVDAYSINDEX) = 1 Then
                        slStr = "No"
                    ElseIf imOvDays(ilBoxNo - OVDAYSINDEX) = 2 Then
                        slStr = "Mix"
                    Else
                        slStr = ""
                    End If
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case OVSTARTTIMEINDEX
                plcTme.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If gValidTime(slStr) Then   'Check that time is valid (press cancel with invalid date showing)
                    smDGSave(13) = edcDGDropDown.Text
                Else
                    Beep
                    smDGSave(13) = ""
                    slStr = ""
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case OVENDTIMEINDEX
                plcTme.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If gValidTime(slStr) Then   'Check that time is valid (press cancel with invalid date showing)
                    smDGSave(14) = edcDGDropDown.Text
                Else
                    Beep
                    smDGSave(14) = ""
                    slStr = ""
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            'Case OVPREEMPTINDEX
            Case OVCOPYINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(7) = 0 Then
                    slStr = "LC"    '"Live Cmml"
                ElseIf imDGSave(7) = 2 Then
                    slStr = "LP"    '"Live Promo"
                ElseIf imDGSave(7) = 3 Then
                    slStr = "RP"    '"Rec Promo"
                ElseIf imDGSave(7) = 4 Then
                    slStr = "PC"    '"Pre-recorded live cmml"
                ElseIf imDGSave(7) = 5 Then
                    slStr = "PP"    '"Pre-recorded live promo"
                ElseIf imDGSave(7) = 1 Then
                    slStr = "RC"    '"Rec Cmml"
                Else
                    slStr = ""
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case OVHIGHINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(3) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case OVRANKINDEX
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If slStr <> "" Then
                    If Val(slStr) > 0 Then
                        imDGSave(4) = Val(slStr)
                    Else
                        imDGSave(4) = -1
                        slStr = ""
                    End If
                Else
                    imDGSave(4) = -1
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case OVBBOPENINDEX
                lbcBBLen.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If StrComp(slStr, "[None]", vbTextCompare) = 0 Then
                    imDGSave(5) = 0
                    slStr = ""
                Else
                    imDGSave(5) = Val(slStr)
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case OVBBCLOSEINDEX
                lbcBBLen.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If StrComp(slStr, "[None]", vbTextCompare) = 0 Then
                    imDGSave(6) = 0
                    slStr = ""
                Else
                    imDGSave(6) = Val(slStr)
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case ACT1LINEUPINDEX
                edcDGDropDown.Visible = False
                slStr = edcDGDropDown.Text
                smDGSave(15) = slStr
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case ACT1STOREDTIMESINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(8) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case ACT1STOREDSPOTSINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(9) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case ACT1STOREDCLEARPCTINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(10) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
            Case ACT1DAYPARTFILTERINDEX
                pbcDGPreempt.Visible = False
                If imDGSave(11) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV1Ctrls(ilBoxNo)
        End Select
    ElseIf imOVType = 2 Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmOV2Ctrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OV2DAYSINDEX To OV2DAYSINDEX + 6 'Day index
                pbcDGPreempt.Visible = False
                slStr = ""
                If imLnSave(8, imLnRowNo) = 1 Then
                    If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                        slStr = "Yes"
                    ElseIf imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1 Then
                        slStr = "No"
                    End If
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
            Case OV2STARTTIMEINDEX
                plcTme.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If gValidTime(slStr) Then   'Check that time is valid (press cancel with invalid date showing)
                    If gTimeToLong(slStr, False) <> gTimeToLong(smLnSave(25, imLnRowNo), False) Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    smLnSave(25, imLnRowNo) = edcDGDropDown.Text
                Else
                    Beep
                    smLnSave(25, imLnRowNo) = ""
                    slStr = ""
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
                If smLnSave(25, imLnRowNo) = "" Then
                    smLnSave(26, imLnRowNo) = ""
                    slStr = ""
                    gSetShow pbcOv, slStr, tmOV2Ctrls(OV2ENDTIMEINDEX)
                End If
            Case OV2ENDTIMEINDEX
                plcTme.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If gValidTime(slStr) Then   'Check that time is valid (press cancel with invalid date showing)
                    If gTimeToLong(slStr, False) <> gTimeToLong(smLnSave(26, imLnRowNo), False) Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    smLnSave(26, imLnRowNo) = edcDGDropDown.Text
                Else
                    Beep
                    smLnSave(26, imLnRowNo) = ""
                    slStr = ""
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
                If smLnSave(26, imLnRowNo) = "" Then
                    smLnSave(25, imLnRowNo) = ""
                    slStr = ""
                    gSetShow pbcOv, slStr, tmOV2Ctrls(OV2STARTTIMEINDEX)
                End If
            Case OV2SPLITINDEX
                lbcRegion.Visible = False
                cmcDGDropDown.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = edcDGDropDown.Text
                If StrComp(slStr, "[None]", vbTextCompare) = 0 Then
                    slStr = ""
                End If
                If StrComp(Trim$(smLnSave(28, imLnRowNo)), Trim$(slStr), vbTextCompare) <> 0 Then
                    smLnSave(28, imLnRowNo) = slStr
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                        mPackageInfoToHidden imLnRowNo, 7
                    End If
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
            Case OV2ALLOCATIONINDEX
                edcDGDropDown.Visible = False  'Set visibility
                slStr = Trim$(edcDGDropDown.Text)
                If gStrDecToLong(slStr, 2) <> gStrDecToLong(smLnSave(27, imLnRowNo), 2) Then
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                End If
                If slStr <> "" Then
                    smLnSave(27, imLnRowNo) = slStr
                    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                Else
                    smLnSave(27, imLnRowNo) = ""
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
            Case OV2ACQUISITIONINDEX
                lbcAcqCost.Visible = False
                edcDGDropDown.Visible = False  'Set visibility
                slStr = Trim$(edcDGDropDown.Text)
                If gStrDecToLong(slStr, 2) <> gStrDecToLong(smLnSave(24, imLnRowNo), 2) Then
                    tgClfCntr(imLnRowNo - 1).sLineChgd = "Y"
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    If slStr <> "" Then
                        mSetAcqOrSpotPrice "S", imLnRowNo, slStr, PRICEINDEX
                    Else
                        mSetAcqOrSpotPrice "S", imLnRowNo, ".00", PRICEINDEX
                    End If
                    mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
                    mSetLnTotals imLnRowNo
                End If
                If slStr <> "" Then
                    smLnSave(24, imLnRowNo) = slStr
                    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                Else
                    smLnSave(24, imLnRowNo) = ""
                End If
                
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
            Case OV2SOLOINDEX
                pbcDGPreempt.Visible = False
                slStr = ""
                If imLnSave(23, imLnRowNo) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
            Case OV21STINDEX
                pbcDGPreempt.Visible = False
                slStr = ""
                If imLnSave(22, imLnRowNo) = 0 Then
                    slStr = "Yes"
                Else
                    slStr = "No"
                End If
                gSetShow pbcOv, slStr, tmOV2Ctrls(ilBoxNo)
        End Select
    ElseIf imOVType = 3 Then
        If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmDailyCtrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case OV2DAYSINDEX To OV2DAYSINDEX + 6 'Day index
                If imLnSave(8, imLnRowNo) = 0 Then
                    edcDGDropDown.Visible = False
                    smLnSave(7 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) = edcDGDropDown.Text
                    slStr = smLnSave(7 + ilBoxNo - OV2DAYSINDEX, imLnRowNo)
                    gSetShow pbcOVWD(0), slStr, tmDailyCtrls(ilBoxNo)
                    imLnDaily = 1
                    For ilLoop = 1 To 7 Step 1
                        If Trim$(smLnSave(7 + ilLoop - OV2DAYSINDEX, imLnRowNo)) <> "" Then
                            imLnDaily = 0
                            Exit For
                        End If
                    Next ilLoop
                    pbcLnDaily_Paint
                    pbcOVWD_Paint 0
                Else
                    pbcDGPreempt.Visible = False
                    If imLnSave(12 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                        slStr = "Yes"
                    ElseIf imLnSave(12 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) = 1 Then
                        slStr = "No"
                    ElseIf imLnSave(12 + ilBoxNo - OV2DAYSINDEX, imLnRowNo) = 2 Then
                        slStr = "Mix"
                    Else
                        slStr = ""
                    End If
                    gSetShow pbcOVWD(0), slStr, tmDailyCtrls(ilBoxNo)
                End If
        End Select
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPackage                       *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Create package from lines      *
'*                                                     *
'*******************************************************
Private Function mPackage(ilSource As Integer) As Integer
'
'   ilSource(I)- 0=From package button in line area; 1= From Rate Bar
'
    Dim ilFound As Integer
    Dim llRif As Long
    Dim ilRdf As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilLen As Integer
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llDate As Long
    Dim ilLine As Integer
    Dim ilDay As Integer
    Dim ilLineNo As Integer
    Dim slWDFlag As String
    Dim slStr As String
    Dim ilUpper As Integer
    Dim ilPrevIndex As Integer
    Dim ilBypassLine As Integer
    ReDim ilDays(0 To 6) As Integer
    ReDim ilSpots(0 To 6) As Integer
    mPackage = True
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Function
    End If
    'If Not gWinRoom(igNoExeWinRes(CCANCELEXE)) Then
    '    Exit Function
    'End If
    mMoveCtrlToRec True
    If grdCPMBuy.Visible Then
        If grdCPMBuy.Row < grdCPMBuy.rows Then
            If grdCPMBuy.TextMatrix(grdCPMBuy.Row, CPMLNTYPE) = "P" Then
                igPackLnNo = grdCPMBuy.TextMatrix(grdCPMBuy.Row, CPMID)
            Else
                igPackLnNo = 0
            End If
        Else
            igPackLnNo = 0
        End If
        CPackage.Show vbModal
        gCPMPkVehPop lbcPkVehicle(igTabMapIndex)
        mSetCommands
        Exit Function
    End If
    Screen.MousePointer = vbHourglass
    If imLnRowNo > 0 Then
        igPackLnNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
        tgClfCntr(imLnRowNo - 1).bShowLine = True
        tgClfCntr(imLnRowNo - 1).bPkExpanded = Not bgHideHiddenLines
    End If
    'Move above so that rcfCode set in tgChfCntr
    'mMoveCtrlToRec True
    Screen.MousePointer = vbHourglass
    If Not mMoveLnCtrlToRec(False) Then
        If imHdBoxNo > 0 Then
            mEnableBox imHdBoxNo
        Else
            mLnEnableBox imLnBoxNo
        End If
        Screen.MousePointer = vbDefault
        mPackage = False
        Exit Function
    End If
    mSetHdDate False, False
    'Screen.MousePointer = vbHourGlass  'Wait
    mAvailPop   'make sure avail list box has latest names
    igTerminateReturn = 0   '0=Canceled
    Screen.MousePointer = vbDefault
    If ilSource = 2 Then
        ilUpper = UBound(tgPackLn)
        If Trim$(smRBPackageValues(1)) = "0" Then
            tgPackLn(ilUpper).sType = "A"
        Else
            tgPackLn(ilUpper).sType = "O"
            If Val(smRBPackageValues(5)) <> 1 Then
                'ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
                'Do While ilCff <> -1
                '    tgCffCntr(ilCff).CffRec.iSpotsWk = Val(smRBPackageValues(5))
                '    ilCff = tgCffCntr(ilCff).iNextCff
                'Loop
            End If
        End If
        'tgPackLn(ilUpper).iAlter = True
        tgPackLn(ilUpper).sAlter = "Y"
        tgPackLn(ilUpper).sAlterName = "Y"
        tgPackLn(ilUpper).iLineNo = -1
        tgPackLn(ilUpper).iIndex = -1
        tgPackLn(ilUpper).sVehName = smRBPackageValues(3)
        tgPackLn(ilUpper).sDPName = smRBPackageValues(4)
            tgPackLn(ilUpper).iMnfVehGp3Mkt = 0
        ReDim Preserve tgPackLn(0 To ilUpper + 1) As PACKLN
        ilPrevIndex = ilUpper
        ilUpper = ilUpper + 1
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            If tgClfCntr(ilClf).iCancel Then
                ilBypassLine = True
            Else
                ilBypassLine = True
                For ilLoop = LBound(igLnMakingPack) To UBound(igLnMakingPack) - 1 Step 1
                    If igLnMakingPack(ilLoop) = tgClfCntr(ilClf).ClfRec.iLine Then
                        ilBypassLine = False
                        Exit For
                    End If
                Next ilLoop
            End If
            If Not ilBypassLine Then
                tgClfCntr(ilClf).bShowLine = Not bgHideHiddenLines
                tgClfCntr(ilClf).bPkExpanded = Not bgHideHiddenLines
                tgPackLn(ilPrevIndex).iIndex = ilUpper
                tgPackLn(ilUpper).sType = "H"
                'tgPackLn(ilUpper).iAlter = True
                tgPackLn(ilUpper).sAlter = "Y"
                tgPackLn(ilUpper).sAlterName = "Y"
                tgPackLn(ilUpper).iLineNo = tgClfCntr(ilClf).ClfRec.iLine
                tgPackLn(ilUpper).iIndex = -1
                tgPackLn(ilUpper).sVehName = ""
                tgPackLn(ilUpper).sDPName = ""
                tgPackLn(ilUpper).iMnfVehGp3Mkt = 0
                ReDim Preserve tgPackLn(0 To ilUpper + 1) As PACKLN
                ilPrevIndex = ilUpper
                ilUpper = ilUpper + 1
            End If
        Next ilClf
        igTerminateReturn = 1
    Else
        CPackage.Show vbModal
    End If
    'igTerminate: 0=Cancel; 1=New Package; 2=Changed; 3=Unpackage
    'Screen.MousePointer = vbDefault    'Default
    If (igTerminateReturn = 1) Then
        imLnChg = True
        imComputeReq = True
        imBypassLnPaint = True
        For ilLoop = UBound(tgPackLn) - 1 To LBound(tgPackLn) Step -1
            If ((tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "E")) And (tgPackLn(ilLoop).iLineNo = -1) Then
                ilIndex = ilLoop
                Exit For
            End If
        Next ilLoop
        ilLen = -1
        For ilLoop = 0 To 6 Step 1
            ilDays(ilLoop) = False
        Next ilLoop
        llStartDate = 0
        llEndDate = 0
        slWDFlag = ""
        ilLine = tgPackLn(ilIndex).iIndex
        Do While ilLine >= 0
            'Find Line
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                If tgPackLn(ilLine).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                    If mGetLineType(ilClf + 1) = "H" Then
                        tgClfCntr(ilClf).bShowLine = Not bgHideHiddenLines
                    Else
                        tgClfCntr(ilClf).bShowLine = True
                    End If
                    If ilLen = -1 Then
                        ilLen = tgClfCntr(ilClf).ClfRec.iLen
                        gUnpackDateLong tgClfCntr(ilClf).ClfRec.iStartDate(0), tgClfCntr(ilClf).ClfRec.iStartDate(1), llStartDate
                        gUnpackDateLong tgClfCntr(ilClf).ClfRec.iEndDate(0), tgClfCntr(ilClf).ClfRec.iEndDate(1), llEndDate
                    Else
                        If ilLen <> tgClfCntr(ilClf).ClfRec.iLen Then
                            ilLen = 0
                        End If
                        gUnpackDateLong tgClfCntr(ilClf).ClfRec.iStartDate(0), tgClfCntr(ilClf).ClfRec.iStartDate(1), llDate
                        If (llDate < llStartDate) And (llDate > 0) Then
                            llStartDate = llDate
                        End If
                        gUnpackDateLong tgClfCntr(ilClf).ClfRec.iEndDate(0), tgClfCntr(ilClf).ClfRec.iEndDate(1), llDate
                        If llDate > llEndDate Then
                            llEndDate = llDate
                        End If
                    End If
                    'Merge days
                    ilCff = tgClfCntr(ilClf).iFirstCff
                    Do While ilCff <> -1
                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                            If slWDFlag = "" Then
                                slWDFlag = "D"
                            ElseIf slWDFlag = "W" Then
                                slWDFlag = "B"
                            End If
                            For ilDay = 0 To 6 Step 1
                                If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                    ilDays(ilDay) = True
                                End If
                            Next ilDay
                        Else
                            If slWDFlag = "" Then
                                slWDFlag = "W"
                            ElseIf slWDFlag = "D" Then
                                slWDFlag = "B"
                            End If
                            For ilDay = 0 To 6 Step 1
                                If (tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilDay) = "1") Then
                                    ilDays(ilDay) = True
                                End If
                            Next ilDay
                        End If
                        ilCff = tgCffCntr(ilCff).iNextCff
                    Loop
                    Exit For
                End If
            Next ilClf
            ilLine = tgPackLn(ilLine).iIndex
        Loop
        ReDim Preserve tgClfCntr(0 To UBound(tgClfCntr) + 1) As CLFLIST
        ReDim Preserve smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
        ReDim Preserve imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
        ReDim Preserve smLnShow(0 To LINECOMMINDEX, 0 To UBound(tgClfCntr) + 1) As String
        ReDim Preserve smLnComment(0 To UBound(tgClfCntr) + 1) As String
        ReDim Preserve smLnInitComment(0 To UBound(tgClfCntr) + 1) As String
        ReDim Preserve imLnCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
        ReDim Preserve imLnInitCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
        imLnRowNo = UBound(tgClfCntr) 'ilLineNo - 1    'Init line area to be filled
        mInitNewLine
        Screen.MousePointer = vbHourglass
        tgClfCntr(imLnRowNo).ClfRec.iLine = 0
        imLnRowNo = UBound(tgClfCntr) - 1 'ilLineNo    'Init line area not used first
        mInitNewLine
        Screen.MousePointer = vbHourglass
        tgClfCntr(imLnRowNo).iStatus = 0
        imLnChg = True
        imComputeReq = True

        imLnRowNo = UBound(tgClfCntr)
        tgClfCntr(imLnRowNo - 1).iSPChg = True
        igLnSPChg = True
        tgPackLn(ilIndex).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
        smLineType = mGetLineType(imLnRowNo)
        If smLineType = "H" Then
            tgClfCntr(imLnRowNo - 1).bShowLine = Not bgHideHiddenLines
        Else
            tgClfCntr(imLnRowNo - 1).bShowLine = True
        End If
        mVehPop True
        'Set values into line area
        imLnBoxNo = VEHINDEX
        edcLNDropDown.MaxLength = 0
        edcLNDropDown.Text = Trim$(tgPackLn(ilIndex).sVehName) 'lbcAllVehicle.List(ilVeh)
        edcLnDropDown_Change
        mLnSetShow imLnBoxNo
        'tgPackLn(ilIndex).iAlter = True
        tgPackLn(ilIndex).sAlter = "Y"
        tgPackLn(ilIndex).sAlterName = "Y"
        tgPackLn(ilIndex).iStdPkg = False
        tgPackLn(ilUpper).sSource = "A"
        Screen.MousePointer = vbHourglass
        mPrgPop imLnRowNo, "L"
        imLnBoxNo = DPINDEX
        edcLNDropDown.MaxLength = 0
        ilFound = False
        For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
            If (tgMRif(llRif).iRcfCode = tgChfCntr.iRcfCode) Then
                'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                '    If tgMRif(ilRif).iRdfcode = tgMRdf(ilRdf).iCode Then
                    ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                    If ilRdf <> -1 Then
                        If (Trim$(tgMRdf(ilRdf).sName) = Trim$(tgPackLn(ilIndex).sDPName)) Then
                            ilFound = True
                            edcLNDropDown.Text = mMakePrgName(tgMRdf(ilRdf).iCode)   'Trim$(tmPBDPGen(ilLoop).sDPName)    'lbcDaypart.List(ilDP)
                '            Exit For
                        End If
                    End If
                'Next ilRdf
                If ilFound Then
                    Exit For
                End If
            End If
        Next llRif
        If Not ilFound Then
            edcLNDropDown.Text = Trim$(tgPackLn(ilIndex).sDPName)   'Trim$(tmPBDPGen(ilLoop).sDPName)    'lbcDaypart.List(ilDP)
        End If
        edcLnDropDown_Change
        mLnSetShow imLnBoxNo
        Screen.MousePointer = vbHourglass
        imLnSave(2, imLnRowNo) = -1 'Buy type 0=Program; 1=Time
        imLnSave(3, imLnRowNo) = 0  'BB: N/A
        imLnSave(4, imLnRowNo) = 0  'Time override
        imLnSave(5, imLnRowNo) = 0  'Unique Spot Types: N/A
        If ilLen > 0 Then
            imLnBoxNo = LENINDEX
            edcLNDropDown.Text = Trim$(str$(ilLen))   'Trim$(Str$(lbcLength.List(ilLen)))
            edcLnDropDown_Change
            mLnSetShow imLnBoxNo
            Screen.MousePointer = vbHourglass
        End If
        If llStartDate > 0 Then
            imLnBoxNo = PRICEINDEX
            'imLnSave(6, imLnRowNo) = 1  'Preemptible
            'Create flights
            imDGSave(1) = 0 'Every Week
            If slWDFlag = "D" Then
                imDGSave(2) = 0
            Else
                imDGSave(2) = 1 'Weekly
            End If
            'imDGSave(3) = imLnSave(6, imLnRowNo)
            smDGSave(2) = ""    'Number of spots/week
            smDGSave(10) = Format$(llStartDate, "m/d/yy")
            smDGSave(11) = Format$(llEndDate, "m/d/yy")
            smDGSave(12) = "0"   'No price (force flights to be PriceType = T)
            smDGSave(13) = ""   'Override start Time
            smDGSave(14) = ""   'Override End Time
            If slWDFlag = "D" Then
                For ilDay = 0 To 6 Step 1
                    If ilDays(ilDay) Then
                        smDGSave(3 + ilDay) = "1"
                        ilSpots(ilDay) = 1
                        imOvDays(ilDay) = 0
                    Else
                        smDGSave(3 + ilDay) = "0"
                        ilSpots(ilDay) = 0
                        imOvDays(ilDay) = 1
                    End If
                Next ilDay
            Else
                For ilDay = 0 To 6 Step 1
                    If ilDays(ilDay) Then
                        smDGSave(3 + ilDay) = "Y"
                        ilSpots(ilDay) = True
                    Else
                        smDGSave(3 + ilDay) = "N"
                        ilSpots(ilDay) = False
                    End If
                Next ilDay
            End If
            Screen.MousePointer = vbHourglass
            imGenReq = False
            mCreateDate False
            Screen.MousePointer = vbHourglass
            imAirCancel = False
            If smLineType = "E" Then
                tgPackLn(ilIndex).sType = "O"   'O used to get the Weekly price to equal the sum of the hidden lines price
                mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), slWDFlag, ilSpots()
                tgPackLn(ilIndex).sType = "E"
                mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), slWDFlag, ilSpots()
            End If
            'If tgUrf(0).sUseComputeCMC <> "I" Then
                'mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf
                If tgSpf.sCAudPkg = "Y" Then
                    tgSpf.sCAudPkg = "N"
                    mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), slWDFlag, ilSpots()
                    tgSpf.sCAudPkg = "Y"
                    mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), slWDFlag, ilSpots()
                Else
                    mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), slWDFlag, ilSpots()
                End If
                If ilSource = 2 Then
                    If Trim$(smRBPackageValues(1)) = "1" Then
                        If Val(smRBPackageValues(5)) <> 1 Then
                            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
                            Do While ilCff <> -1
                                tgCffCntr(ilCff).CffRec.iSpotsWk = Val(smRBPackageValues(5))
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                            mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), slWDFlag, ilSpots()
                        End If
                    End If
                End If
            If slWDFlag = "D" Then
                imLnSave(8, imLnRowNo) = 0
                mSetFlightDays imLnRowNo, imOvDays(), imLnRowNo, smDGSave()
                slStr = mSetDPShowName(imLnRowNo, DPINDEX, imOvDays())
                slStr = " "
                If Trim$(smLnSave(29, imLnRowNo)) <> "" Then
                    slStr = "A"
                Else
                    If imLnSave(8, imLnRowNo) = 0 Then
                        slStr = "D"
                    Else
                        If Left$(tmLnCtrls(DPINDEX).sShow, 1) = "*" Then
                            slStr = "*"
                        ElseIf (imLnSave(20, imLnRowNo) > 0) Or (imLnSave(21, imLnRowNo) > 0) Then
                            slStr = "*"
                        End If
                    End If
                End If
                gSetShow pbcLine, slStr, tmLnCtrls(OV1INDEX)
                smLnShow(OV1INDEX, imLnRowNo) = tmLnCtrls(OV1INDEX).sShow
                'Required to re-compute total number of spots for a real package line
                mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", ilSpots()
            Else
                imLnSave(8, imLnRowNo) = 1
            End If
        End If
        pbcLine.Cls
        mResortLines hmMnf
        Screen.MousePointer = vbHourglass
        imLnRowNo = -1
        pbcLnDates.Cls
        mCntrTotal    'This calls pbcLnDates_Paint
        'Demo bar is made invisible so the code below is not required as imLnRowNo set to -1 in GotFocus and mSetCommands called
        'If tgUrf(0).sUseComputeCMC <> "I" Then
        '    mResetDemoBar True, True
        'End If
        mSetSchStatus smOrigStatus
        'mSetPriDemoResearch hmDrf, hmMnf, imStep1Index
        If (sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH) Then
            lacAudTotals.Visible = False
        Else
            If (tgSpf.sGUsePropSys = "Y") Then
                lacAudTotals.Visible = True
            Else
                lacAudTotals.Visible = False
            End If
        End If
        imBypassLnPaint = False
        mSetLineScroll True, False
        pbcLine_Paint   'This should not be required- do it to make sure paint event occurs
        Screen.MousePointer = vbDefault
    ElseIf igTerminateReturn = 2 Then   'Changed
        imLnChg = True
        imComputeReq = True
        ilLineNo = igPackLnNo
        ilIndex = -1
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = ilLineNo Then
                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                    If ilLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                        imLnRowNo = ilClf + 1
                        smLineType = mGetLineType(imLnRowNo)
                        If smLineType = "H" Then
                            tgClfCntr(imLnRowNo - 1).bShowLine = Not bgHideHiddenLines
                        Else
                            tgClfCntr(imLnRowNo - 1).bShowLine = True
                        End If
                        tgClfCntr(imLnRowNo - 1).iSPChg = True
                        igLnSPChg = True
                        mVehPop True
                        'Set values into line area
                        imLnBoxNo = VEHINDEX
                        edcLNDropDown.MaxLength = 0
                        edcLNDropDown.Text = Trim$(tgPackLn(ilLoop).sVehName) 'lbcAllVehicle.List(ilVeh)
                        edcLnDropDown_Change
                        mLnSetShow imLnBoxNo
                        Screen.MousePointer = vbHourglass
                        mPrgPop imLnRowNo, "L"
                        imLnBoxNo = DPINDEX
                        edcLNDropDown.MaxLength = 0
                        ilFound = False
                        For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                            If (tgMRif(llRif).iRcfCode = tgChfCntr.iRcfCode) Then
                                'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                                '    If tgMRif(ilRif).iRdfcode = tgMRdf(ilRdf).iCode Then
                                    ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                                    If ilRdf <> -1 Then
                                        If (Trim$(tgMRdf(ilRdf).sName) = Trim$(tgPackLn(ilLoop).sDPName)) Then
                                            ilFound = True
                                            edcLNDropDown.Text = mMakePrgName(tgMRdf(ilRdf).iCode)   'Trim$(tmPBDPGen(ilLoop).sDPName)    'lbcDaypart.List(ilDP)
                                '            Exit For
                                        End If
                                    End If
                                'Next ilRdf
                                If ilFound Then
                                    Exit For
                                End If
                            End If
                        Next llRif
                        If Not ilFound Then
                            edcLNDropDown.Text = Trim$(tgPackLn(ilLoop).sDPName)   'Trim$(tmPBDPGen(ilLoop).sDPName)    'lbcDaypart.List(ilDP)
                        End If
                        edcLnDropDown_Change
                        mLnSetShow imLnBoxNo
                        Screen.MousePointer = vbHourglass
                        'If tgUrf(0).sUseComputeCMC <> "I" Then
                            mLnTotals ilClf + 1, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
                            mGetLnPriceInfo imLnRowNo, slStr, imLnTotalType, PRICEINDEX     'Set show price field
                        'End If
                        mResortLines hmMnf
                        imLnRowNo = -1
                        pbcLnTotal.Cls
                        pbcLnDates.Cls
                        pbcLine.Cls
                        pbcLine_Paint
                        mPkgTotal
                        mCntrTotal    'This calls pbcLnDates_Paint
                        'Demo bar is made invisible so the code below is not required as imLnRowNo set to -1 in GotFocus and mSetCommands called
                        'If tgUrf(0).sUseComputeCMC <> "I" Then
                        '    mResetDemoBar True, True
                        'End If
                        mSetSchStatus smOrigStatus
                        'mSetPriDemoResearch hmDrf, hmMnf, imStep1Index
                        If (sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH) Then
                            lacAudTotals.Visible = False
                        Else
                            If (tgSpf.sGUsePropSys = "Y") Then
                                lacAudTotals.Visible = True
                            Else
                                lacAudTotals.Visible = False
                            End If
                        End If
                        Exit For
                    End If
                Next ilClf
                Exit For
            End If
        Next ilLoop
        Screen.MousePointer = vbDefault
    ElseIf igTerminateReturn = 3 Then   'Remove package line
        imLnChg = True
        imComputeReq = True
        ilLineNo = igPackLnNo
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = ilLineNo Then
                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                    If ilLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                        imLnRowNo = ilClf + 1
                        imcTrash_Click
                        Exit For
                    End If
                Next ilClf
                Exit For
            End If
        Next ilLoop
    End If
    igPackLnNo = -1
    mPackage = True
    mSetHideParameters
    'mBuildMapLinePaint
    mSetLineScroll True, False
    pbcLine.Cls
    pbcLine_Paint
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintHdTitle                   *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint Header Titles            *
'*                                                     *
'*******************************************************
Public Sub mPaintHdTitle()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer

    llColor = pbcHeader.ForeColor
    slFontName = pbcHeader.FontName
    flFontSize = pbcHeader.FontSize
    pbcHeader.ForeColor = BLUE
    pbcHeader.FontBold = False
    pbcHeader.FontSize = 7
    pbcHeader.FontName = "Arial"
    pbcHeader.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    'For ilLoop = LBound(tmHdCtrls) To UBound(tmHdCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        pbcHeader.Line (tmHdCtrls(ilLoop).fBoxX - 15, tmHdCtrls(ilLoop).fBoxY - 15)-Step(tmHdCtrls(ilLoop).fBoxW + 15, tmHdCtrls(ilLoop).fBoxH + 15), BLUE, B
        pbcHeader.CurrentX = tmHdCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
        pbcHeader.CurrentY = tmHdCtrls(ilLoop).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        Select Case ilLoop
            Case STATUSINDEX
                pbcHeader.Print "Status"
            Case POTINDEX
                If (Asc(tgSpf.sOptionFields) And OFPROJECTION) = OFPROJECTION Then  'Using Potential
                    pbcHeader.Print "Pot."
                End If
            Case TYPEINDEX
                pbcHeader.Print "Type"
            Case CNTRNOINDEX
                If sgCntrScreen = "Orders" Then
                    pbcHeader.Print "Order #"
                Else
                    pbcHeader.Print "Proposal #"
                End If
            Case PROPVERINDEX
                pbcHeader.Print "Ver #"
            Case REVNOINDEX
                pbcHeader.Print "Rev #"
            Case DATEINDEX
                pbcHeader.Print "Date"
            Case ADVTINDEX
                pbcHeader.Print "Advertiser"
            Case PRODUCTINDEX
                pbcHeader.Print "Product"
            Case SHTTITLEINDEX
                If tgSpf.sUseProdSptScr = "P" Then  'Short Title
                    pbcHeader.Print "Short Title"
                    pbcHeader.Line (tmHdCtrls(SHTTITLEINDEX).fBoxX - 15, tmHdCtrls(SHTTITLEINDEX).fBoxY - 15)-Step(0, 330)
                End If
            Case AGENCYINDEX
                pbcHeader.Print "Agency"
            Case SPERSONINDEX
                pbcHeader.Print "Salesperson"
            Case COMPINDEX
                If tgSpf.sAExcl = "Y" Then  'Using Program exclusions
                    pbcHeader.Print "Product Protection/Program Exclusions"
                Else
                    If (Asc(tgSpf.sOptionFields) And OFBUSCAT) = OFBUSCAT Then  'Using Business Category
                        pbcHeader.Print "Product Protection/Business Category"
                    Else
                        pbcHeader.Print "Product Protection"
                    End If
                End If
            Case BUYERINDEX
                pbcHeader.Print "Buyer"
            Case PHONEINDEX
                pbcHeader.Print "Buyer Phone # and Extension"
            Case SHAREINDEX
                If (Asc(tgSpf.sOptionFields) And OFSHARE) = OFSHARE Then  'Using Share
                    pbcHeader.Print "Share"
                End If
            Case MERCHINDEX
                If tgSpf.sRUseMerch = "Y" Then  'Short Title
                    pbcHeader.Print "Merchandising"
                End If
            Case PROMOINDEX
                If tgSpf.sRUsePromo = "Y" Then  'Short Title
                    pbcHeader.Print "Promotion"
                End If
            Case REVSETINDEX
                If (Asc(tgSpf.sOptionFields) And OFREVSET) = OFREVSET Then  'Using Revenue sets
                    pbcHeader.Print "Revenue Sets"
                End If
            Case SEGINDEX
                If tgSpf.sCUseSegments = "Y" Then  'Using Segments
                    pbcHeader.Print "Segment"
                    pbcHeader.Line (tmHdCtrls(SEGINDEX).fBoxX - 15, tmHdCtrls(SEGINDEX).fBoxY - 15)-Step(0, 330)
                End If
            Case DEMOINDEX
                pbcHeader.Print "Demographics"
            Case GUARINDEX
                If (Asc(tgSpf.sOptionFields) And OFDELGUAR) = OFDELGUAR Then  'Using Delivery Guarantee
                    pbcHeader.Print "Delivery Guarantee %"
                Else
                    If (Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) = GUARBYGRIMP Then  'Using Delivery Guarantee
                        pbcHeader.Print "Delivery Guarantee GrImp"
                    End If
                End If
            Case TRADEINDEX
                pbcHeader.Print "% Trade"
            Case RATECARDINDEX
                pbcHeader.Print "Rate Card #"
            Case GROSSINDEX
                pbcHeader.Print "Total Gross"
            Case BILLCYCLEINDEX
                ''If (Asc(tgSpf.sOptionFields) And &H20) = &H20 Then  'Using Billing Cycle
                '8/16/12: Handle case where contract was set as Calendar but is not allowed at this time
                'If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Or ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) = WEEKLYBILL) Then
                If (tgChfCntr.sBillCycle = "C") Or ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Or ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) = WEEKLYBILL) Then
                    pbcHeader.Print "Bill Cycle"
                End If
            Case INVGROUPINDEX
                If (Asc(tgSpf.sOptionFields) And OFCOOPBILL) = OFCOOPBILL Then  'Using Co-op
                    pbcHeader.Print "# Invoices/Cycle"
                End If
            Case PRODTAGINDEX
                If (Asc(tgSpf.sOptionFields) And OFCOOPBILL) = OFCOOPBILL Then  'Using Co-op
                    pbcHeader.Print "Prod/Tag %"
                End If
            '10967-show
            Case VENDORINDEX
                pbcHeader.Print "Vendor Status"
            Case INTCOMMINDEX
                pbcHeader.Print "Internal Comment"
            Case CANCLAUSEINDEX
                pbcHeader.Print "Cancellation Clause"
            Case CHGREASONINDEX
                pbcHeader.Print "Change Reason"
            Case OTHERCOMMINDEX
                pbcHeader.Print "Other Comments"
            '10910-show
            Case ATTACHMENTINDEX
               ' pbcHeader.ForeColor = vbBlack
                pbcHeader.Print "Attachments"
        End Select
    Next ilLoop
    
    pbcHeader.FontSize = flFontSize
    pbcHeader.FontName = slFontName
    pbcHeader.FontSize = flFontSize
    pbcHeader.ForeColor = llColor
    pbcHeader.FontBold = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintLnTitle                   *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint Header Titles            *
'*                                                     *
'*******************************************************
Public Sub mPaintLnTitle()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer
    Dim llTop As Long
    Dim ilFillStyle As Integer
    Dim llFillColor As Long
    Dim ilLineCount As Integer

    llColor = pbcLine.ForeColor
    slFontName = pbcLine.FontName
    flFontSize = pbcLine.FontSize
    ilFillStyle = pbcLine.FillStyle
    llFillColor = pbcLine.FillColor
    pbcLine.ForeColor = BLUE
    pbcLine.FontBold = False
    pbcLine.FontSize = 7
    pbcLine.FontName = "Arial"
    pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual

    pbcLine.FillStyle = 0 'Solid
    pbcLine.FillColor = LIGHTBLUE
    pbcLine.Line (15, 15)-Step(tmLnCtrls(VEHINDEX).fBoxX - 15, tmLnCtrls(VEHINDEX).fBoxY - 15), BLUE, B
    pbcLine.CurrentX = 30  'fgBoxInsetX
    pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLine.Print "#"
    pbcLine.FillStyle = ilFillStyle
    pbcLine.FillColor = llFillColor
    pbcLine.Line (tmLnCtrls(VEHINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(DPINDEX).fBoxX - tmLnCtrls(VEHINDEX).fBoxX, tmLnCtrls(VEHINDEX).fBoxY - 15), BLUE, B
    pbcLine.CurrentX = tmLnCtrls(VEHINDEX).fBoxX + 15  'fgBoxInsetX
    pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLine.Print "Vehicle"
    '7/26/15: Swapped Override and Len
    'pbcLine.Line (tmLnCtrls(DPINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(OV1INDEX).fBoxX - tmLnCtrls(DPINDEX).fBoxX, tmLnCtrls(DPINDEX).fBoxY - 15), BLUE, B
    'If tscLine.SelectedItem.Index <> 10 Then
    If tscLine.SelectedItem.Index <> imTabMap(TABRESEARCH) Then
        pbcLine.Line (tmLnCtrls(DPINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(LENINDEX).fBoxX - tmLnCtrls(DPINDEX).fBoxX, tmLnCtrls(DPINDEX).fBoxY - 15), BLUE, B
        pbcLine.CurrentX = tmLnCtrls(DPINDEX).fBoxX + 15  'fgBoxInsetX
        pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcLine.Print "Daypart"
    Else
        lmResearchTabBNWidth = tmLnCtrls(LENINDEX).fBoxX - tmLnCtrls(DPINDEX).fBoxX - (tmLnCtrls(VEHINDEX).fBoxX + 30)
        pbcLine.Line (tmLnCtrls(DPINDEX).fBoxX - 15, 15)-Step(lmResearchTabBNWidth, tmLnCtrls(DPINDEX).fBoxY - 15), BLUE, B
        pbcLine.CurrentX = tmLnCtrls(DPINDEX).fBoxX + 15  'fgBoxInsetX
        pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcLine.Print "Book Name"
        lmResearchTabPOPLeft = tmLnCtrls(DPINDEX).fBoxX + lmResearchTabBNWidth - 15 '+ 15
        lmResearchTabPOPWidth = tmLnCtrls(VEHINDEX).fBoxX + 15
        pbcLine.Line (lmResearchTabPOPLeft, 15)-Step(lmResearchTabPOPWidth + 15, tmLnCtrls(DPINDEX).fBoxY - 15), BLUE, B
        pbcLine.CurrentX = lmResearchTabPOPLeft + 15 'fgBoxInsetX
        pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcLine.Print "Pop"
        
    End If
    '7/26/15: Swapped Override and Len
    'pbcLine.Line (tmLnCtrls(OV1INDEX).fBoxX - 15, 15)-Step(tmLnCtrls(LENINDEX).fBoxX - tmLnCtrls(OV1INDEX).fBoxX, tmLnCtrls(OV1INDEX).fBoxY - 15), BLUE, B
    pbcLine.Line (tmLnCtrls(LENINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(OV1INDEX).fBoxX - tmLnCtrls(LENINDEX).fBoxX, tmLnCtrls(LENINDEX).fBoxY - 15), BLUE, B
    '7/26/15: Swapped Override and Len-Moved from below
    pbcLine.Line (tmLnCtrls(OV1INDEX).fBoxX - 15, (tmLnCtrls(OV1INDEX).fBoxY / 2) + 15)-Step(tmLnCtrls(WKSPOTSINDEX).fBoxX - tmLnCtrls(OV1INDEX).fBoxX, (tmLnCtrls(OV1INDEX).fBoxY) / 2 - 30), BLUE, B
    pbcLine.CurrentX = tmLnCtrls(OV1INDEX).fBoxX + 15  'fgBoxInsetX
    '7/26/15: Swapped Override and Len
    'pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLine.CurrentY = tmLnCtrls(OV1INDEX).fBoxY / 2 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLine.Print "Ov"
    '7/26/15: Swapped Override and Len- moved up
    'pbcLine.Line (tmLnCtrls(LENINDEX).fBoxX - 15, (tmLnCtrls(LENINDEX).fBoxY / 2) + 15)-Step(tmLnCtrls(WKSPOTSINDEX).fBoxX - tmLnCtrls(LENINDEX).fBoxX, (tmLnCtrls(LENINDEX).fBoxY) / 2 - 15), BLUE, B
    pbcLine.CurrentX = tmLnCtrls(LENINDEX).fBoxX + 15  'fgBoxInsetX
    '7/26/15: Swapped Override and Len
    'pbcLine.CurrentY = tmLnCtrls(LENINDEX).fBoxY / 2 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    'If tscLine.SelectedItem.Index <> 10 Then
    If tscLine.SelectedItem.Index <> imTabMap(TABRESEARCH) Then
        pbcLine.Print "Len"
    Else
        pbcLine.Print "AQH"
    End If
    'pbcLnWkArrow(0).Move tmLnCtrls(LENINDEX).fBoxX + 30, 15, tmLnCtrls(LENINDEX).fBoxW - 45, tmLnCtrls(LENINDEX).fBoxY / 2 - 15
    pbcLnWkArrow(0).Move tmLnCtrls(OV1INDEX).fBoxX + 30, 15, tmLnCtrls(OV1INDEX).fBoxW - 45, tmLnCtrls(OV1INDEX).fBoxY / 2 - 15
    pbcLine.Line (tmLnCtrls(WKSPOTSINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(SPOTSINDEX).fBoxX - tmLnCtrls(WKSPOTSINDEX).fBoxX, tmLnCtrls(WKSPOTSINDEX).fBoxY - 15), BLUE, B
    pbcLine.Line (tmLnCtrls(SPOTSINDEX).fBoxX - 15, (tmLnCtrls(SPOTSINDEX).fBoxY / 2) + 15)-Step(tmLnCtrls(PRICEINDEX).fBoxX - tmLnCtrls(SPOTSINDEX).fBoxX, tmLnCtrls(SPOTSINDEX).fBoxY / 2 - 15), BLUE, B
    'If (tscLine.SelectedItem.Index < 8) Or ((tscLine.SelectedItem.Index >= 8) And (imLnTotalType <> 2)) Then
    If (tscLine.SelectedItem.Index <= imTabMap(TABINSTALL)) Or ((tscLine.SelectedItem.Index >= imTabMap(TABAVAIL)) And (imTabMap(TABAVAIL) <> -1) And (imLnTotalType <> 2)) Then
        pbcLine.CurrentX = tmLnCtrls(SPOTSINDEX).fBoxX + 15  'fgBoxInsetX
        pbcLine.CurrentY = tmLnCtrls(SPOTSINDEX).fBoxY / 2 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcLine.Print "Spots"
    End If
    pbcLnWkArrow(1).Move tmLnCtrls(SPOTSINDEX).fBoxX + 30, 15, pbcLnWkArrow(1).Width, tmLnCtrls(SPOTSINDEX).fBoxY / 2 - 15
    pbcLine.Line (tmLnCtrls(PRICEINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(LINECOMMINDEX).fBoxX - tmLnCtrls(PRICEINDEX).fBoxX, tmLnCtrls(PRICEINDEX).fBoxY - 15), BLUE, B
    pbcLine.Line (tmLnCtrls(LINECOMMINDEX).fBoxX - 15, 15)-Step(tmLnCtrls(LINECOMMINDEX).fBoxW + 15, tmLnCtrls(LINECOMMINDEX).fBoxY - 15), BLUE, B
    pbcLine.CurrentX = tmLnCtrls(LINECOMMINDEX).fBoxX + 15  'fgBoxInsetX
    pbcLine.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLine.Print "C"

    imResearchTogglePriceLeft = tmLnCtrls(PRICEINDEX).fBoxW / 2
    imResearchTogglePriceWidth = tmLnCtrls(PRICEINDEX).fBoxW / 2
    ilLineCount = 0
    llTop = tmLnCtrls(1).fBoxY
    Do
        For ilLoop = imLBCTCtrls To UBound(tmLnCtrls) Step 1
            If ilLoop = imLBCTCtrls Then
                pbcLine.Line (30 - 15, llTop - 15)-Step(tmLnCtrls(ilLoop).fBoxX - 15, tmLnCtrls(ilLoop).fBoxH + 15), BLUE, B
            End If
            'If ilLoop = SPOTSINDEX Or ((ilLoop = PRICEINDEX) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Or ((ilLoop = LENINDEX) And (tscLine.SelectedItem.Index = 10)) Then
            If ilLoop = SPOTSINDEX Or ((ilLoop = PRICEINDEX) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Or ((ilLoop = LENINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                pbcLine.FillStyle = 0 'Solid
                pbcLine.FillColor = LIGHTYELLOW
            End If
            ''If (ilLoop <> DPINDEX) Or ((ilLoop = DPINDEX) And (tscLine.SelectedItem.Index <> 10)) Then
            ''Draw Research Boxes and price box
            'If (ilLoop <> DPINDEX) Or ((ilLoop = DPINDEX) And (tscLine.SelectedItem.Index <> 10)) Then
            If (ilLoop <> DPINDEX) Or ((ilLoop = DPINDEX) And (tscLine.SelectedItem.Index <> imTabMap(TABRESEARCH))) Then
                'If ((ilLoop = PRICEINDEX) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Then
                If ((ilLoop = PRICEINDEX) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Then
                    pbcLine.Line (tmLnCtrls(ilLoop).fBoxX - 15, llTop - 15)-Step(imResearchTogglePriceWidth + 15, tmLnCtrls(ilLoop).fBoxH + 15), BLUE, B
                    pbcLine.FillStyle = ilFillStyle
                    pbcLine.FillColor = llFillColor
                    pbcLine.Line (tmLnCtrls(ilLoop).fBoxX + imResearchTogglePriceLeft, llTop - 15)-Step(imResearchTogglePriceWidth + 15, tmLnCtrls(ilLoop).fBoxH + 15), BLUE, B
                Else
                    pbcLine.Line (tmLnCtrls(ilLoop).fBoxX - 15, llTop - 15)-Step(tmLnCtrls(ilLoop).fBoxW + 15, tmLnCtrls(ilLoop).fBoxH + 15), BLUE, B
                End If
            Else
                'Population and AQH
                pbcLine.Line (tmLnCtrls(ilLoop).fBoxX - 15, llTop - 15)-Step(lmResearchTabBNWidth + 15, tmLnCtrls(ilLoop).fBoxH + 15), BLUE, B
                pbcLine.FillStyle = 0 'Solid
                pbcLine.FillColor = LIGHTYELLOW
                pbcLine.Line (lmResearchTabPOPLeft, llTop - 15)-Step(lmResearchTabPOPWidth + 15, tmLnCtrls(ilLoop).fBoxH + 15), BLUE, B
                pbcLine.FillStyle = ilFillStyle
                pbcLine.FillColor = llFillColor
            End If
            'If ilLoop = SPOTSINDEX Or ((ilLoop = PRICEINDEX) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Or ((ilLoop = LENINDEX) And (tscLine.SelectedItem.Index = 10)) Then
            If ilLoop = SPOTSINDEX Or ((ilLoop = PRICEINDEX) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Or ((ilLoop = LENINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                pbcLine.FillStyle = ilFillStyle
                pbcLine.FillColor = llFillColor
            End If
        Next ilLoop
        ilLineCount = ilLineCount + 1
        llTop = llTop + tmLnCtrls(1).fBoxH + 15
    Loop While llTop + tmLnCtrls(1).fBoxH < pbcLine.height
    vbcLines.LargeChange = ilLineCount - 1
    '10865
    mSetLineScroll True, False
'    vbcLines.Min = LBound(tgClfCntr)
'    If UBound(tgClfCntr) <= vbcLines.LargeChange Then
'        vbcLines.Max = LBound(tgClfCntr)
'    Else
'        vbcLines.Max = UBound(tgClfCntr) - vbcLines.LargeChange
'    End If
    pbcLine.FontSize = flFontSize
    pbcLine.FontName = slFontName
    pbcLine.FontSize = flFontSize
    pbcLine.ForeColor = llColor
    pbcLine.FontBold = True
    lacPrice(0).Refresh
    lacPrice(1).Refresh
    mResearchSubTitles
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPBSetCommands                  *
'*                                                     *
'*             Created:10/07/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set command buttons (enable or *
'*                      disabled)                      *
'*                                                     *
'*******************************************************
Private Sub mPBSetCommands()
'
'   mPBSetCommands
'   Where:
'
    Dim ilLoop As Integer
    Dim ilSelected As Integer
    Dim slStr As String
    Dim ilMnfDemo As Integer
    Dim ilIndex As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    tmcDelay.Enabled = False
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        cmcGenLineBar.Enabled = False
        cmcGenPkgLine.Enabled = False
        Exit Sub
    End If
    If Trim$(smPowerCaption) = "Rate Bar" Then
        cmcRBGenGrid.Enabled = False
    End If
    slStr = edcPBDate(0).Text
    If Not gValidDate(slStr) Then
        cmcGenLineBar.Enabled = False
        cmcGenPkgLine.Enabled = False
        Exit Sub
    End If
    slStr = edcPBDate(1).Text
    If Not gValidDate(slStr) Then
        cmcGenLineBar.Enabled = False
        cmcGenPkgLine.Enabled = False
        Exit Sub
    End If
    If Trim$(smPowerCaption) = "Rate Bar" Then
        If lbcPBLen.ListIndex < 0 Then
            cmcGenLineBar.Enabled = False
            cmcGenPkgLine.Enabled = False
        End If
    End If
    If Trim$(smPowerCaption) = "Rate Bar" Then
        ilMnfDemo = 0
        If lbcDaypart.ListIndex >= 0 Then
            'Find matching name
            If (lbcDemo(0).ListIndex >= 1) Or (lbcDemo(1).ListIndex >= 1) Or (lbcDemo(2).ListIndex >= 1) Or (lbcDemo(3).ListIndex >= 1) Then
                ilIndex = lbcDemo(lbcDaypart.ListIndex).ListIndex
                slNameCode = tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            Else
                ilIndex = lbcDaypart.ListIndex
                slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            End If
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilMnfDemo = Val(slCode)
        Else
            If lbcDemo(0).ListIndex >= 1 Then
                lbcDaypart.ListIndex = 0
                If (lbcDemo(0).ListIndex >= 1) Or (lbcDemo(1).ListIndex >= 1) Or (lbcDemo(2).ListIndex >= 1) Or (lbcDemo(3).ListIndex >= 1) Then
                    slNameCode = tgDemoCode(lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(lbcDemo(0).ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilMnfDemo = Val(slCode)
                Else
                    slNameCode = tgDemoCode(lbcDaypart.ListIndex).sKey 'Traffic!lbcDemoCode.List(lbcDemo(0).ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilMnfDemo = Val(slCode)
                End If
            End If
        End If
    End If
    If Trim$(smPowerCaption) = "Rate Bar" Then
        mGenRBDates
    End If
    mPopPBVehicle
    If Trim$(smPowerCaption) = "Rate Bar" Then
        If (UBound(tmPB1DP) > LBound(tmPB1DP)) And ((lbcRBVehicle.SelCount <= 0) Or (lbcRBDaypart.SelCount <= 0)) Then
            ReDim tmPB1DP(0 To 0) As PBDPGEN
            ReDim tmRB1DP(0 To 0) As PBDPGEN
            Contract.pbcRBVeh(0).Cls
        Else
            If (lbcRBVehicle.SelCount > 0) And (lbcRBDaypart.SelCount > 0) And (lbcPBLen.ListIndex >= 0) Then
                cmcRBGenGrid.Enabled = True
            End If
        End If
    End If
    ilSelected = False
    If Trim$(smPowerCaption) = "Rate Bar" Then
        For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            If tmPB1DP(ilLoop).iChk Then
                ilSelected = True
                Exit For
            End If
        Next ilLoop
    Else
    End If
    If Not ilSelected Then
        cmcGenLineBar.Enabled = False
        cmcGenPkgLine.Enabled = False
        Exit Sub
    End If
    If Trim$(smPowerCaption) = "Rate Bar" Then
        cmcGenLineBar.Enabled = True
        ilSelected = False
        For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            If tmPB1DP(ilLoop).iChk And tmPB1DP(ilLoop).iStdPkg Then
                ilSelected = True
                Exit For
            End If
        Next ilLoop
        If Not ilSelected Then
            cmcGenPkgLine.Enabled = True
        Else
            cmcGenPkgLine.Enabled = False
        End If
        Exit Sub
    Else
    End If
    cmcGenLineBar.Enabled = False
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPersonnelBranch                *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      personnel and process          *
'*                      communication back from        *
'*                      personnel                      *
'*******************************************************
Private Function mPersonnelBranch() As Integer
'
'   ilRet = mPersonnelBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    'Dim ilNoForms As Integer
    'Dim ilUsage As Integer
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    Dim slBuyerOrPayable As String
    'Dim slNameCode As String
    'Dim slCode As String
    Dim ilRetrieve As Integer
    Dim ilAdvtAgyCode As Integer
    Dim slSourceType As String
    Dim slName30 As String * 30
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mPersonnelBranch = False
        Exit Function
    End If
    'If imBoxNo = BUYERINDEX Then
        slBuyerOrPayable = "B"
        ilRet = gOptionalLookAhead(edcHdDropDown, lbcBuyer, imBSMode, slStr)
    'Else
    '    slBuyerOrPayable = "P"
    '    ilRet = gOptionalLookAhead(edcHdDropDown, lbcPayable, imBSMode, slStr)
    'End If
    If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcHdDropDown.Text = "[None]") Then
        imDoubleClickName = False
        mPersonnelBranch = False
        Exit Function
    End If
    If tmAgf.iCode > 0 Then
        If igWinStatus(AGENCIESLIST) <> 2 Then
            Beep
            imDoubleClickName = False
            mPersonnelBranch = True
            mSetFocus imHdBoxNo
            Exit Function
        End If
    Else
        If igWinStatus(ADVERTISERSLIST) <> 2 Then
            Beep
            imDoubleClickName = False
            mPersonnelBranch = True
            mSetFocus imHdBoxNo
            Exit Function
        End If
    End If
    igPersonnelCallSource = CALLSOURCECONTRACT
    If edcHdDropDown.Text = "[New]" Then
        sgPersonnelName = " "
    Else
        sgPersonnelName = Trim$(Left$(edcHdDropDown.Text, 30))    'Remove phone numbers
    End If
    If tmAgf.iCode > 0 Then
        ilAdvtAgyCode = tmAgf.iCode
        slSourceType = "\Agy"
        ilRetrieve = 1
    Else
        If tmAdf.iCode > 0 Then
            ilAdvtAgyCode = tmAdf.iCode
            slSourceType = "\Advt"
            ilRetrieve = 0
        Else
            imDoubleClickName = False
            mPersonnelBranch = True
            mEnableBox imHdBoxNo
            Exit Function
        End If
    End If
    ilUpdateAllowed = imUpdateAllowed
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igPersonnelCallSource)) & slSourceType & "\" & Trim$(str$(ilAdvtAgyCode)) & "\B" & "\" & sgPersonnelName
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igPersonnelCallSource)) & slSourceType & "\" & Trim$(str$(ilAdvtAgyCode)) & "\B" & "\" & sgPersonnelName
    End If
    sgCommandStr = slStr
    Persnnel.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgPersonnelName)
    igPersonnelCallSource = Val(sgPersonnelName)
    ilParse = gParseItem(slStr, 2, "\", sgPersonnelName)
    imDoubleClickName = False
    mPersonnelBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    If igPersonnelCallSource = CALLDONE Then  'Done
        igPersonnelCallSource = CALLNONE
'        gSetMenuState True
        lbcBuyer.Clear
        'Traffic!lbcBuyerCode.Tag = ""
        smCntBuyerCodeTag = ""
        mBuyerPop ilRetrieve, ilAdvtAgyCode
        If imTerminate Then
            mPersonnelBranch = False
            Exit Function
        End If
        slName30 = sgPersonnelName
        gFindPartialMatch slName30, 2, 30, lbcBuyer
        sgPersonnelName = ""
        If gLastFound(lbcBuyer) > 1 Then
            imChgMode = True
            lbcBuyer.ListIndex = gLastFound(lbcBuyer)
            edcHdDropDown.Text = lbcBuyer.List(lbcBuyer.ListIndex)
            imPhoneFirstTime = True
            smBuyer = ""    'Force reread of pnf
            imChgMode = False
            mPersonnelBranch = False
            mSetChg BUYERINDEX
        Else
            imChgMode = True
            lbcBuyer.ListIndex = 1
            edcHdDropDown.Text = lbcBuyer.List(1)
            imChgMode = False
            mSetChg BUYERINDEX
            edcHdDropDown.SetFocus
            Exit Function
        End If
    End If
    If igPersonnelCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igPersonnelCallSource = CALLNONE
        sgPersonnelName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    If igPersonnelCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igPersonnelCallSource = CALLNONE
        sgPersonnelName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mPkgTotal                       *
'*                                                     *
'*             Created:10/16/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Obtain fixed price total        *
'*                                                     *
'*******************************************************
Public Sub mPkgTotal()
    'Dim ilRet As Integer    'Return status
    Dim slNoItems As String
    Dim slStr As String
    Dim ilLoop As Integer
    smFBITotal = "0"    'Fixed Price amount
    smIBCTotal = "0"    'Item contracted amount
    imAnyFixedBilled = False
    For ilLoop = LBound(tgFBSbf) To UBound(tgFBSbf) - 1 Step 1
        If (tgFBSbf(ilLoop).iStatus = 0) Or (tgFBSbf(ilLoop).iStatus = 1) Then
            'gPDNToStr tgFBSbf(ilLoop).SbfRec.sItemAmount, 2, slStr
            slStr = gLongToStrDec(tgFBSbf(ilLoop).SbfRec.lGross, 2)
            smFBITotal = gAddStr(smFBITotal, slStr)
            If (tgFBSbf(ilLoop).SbfRec.sBilled = "B") Or (tgFBSbf(ilLoop).SbfRec.sBilled = "Y") Then
                imAnyFixedBilled = True
            End If
        End If
    Next ilLoop
    For ilLoop = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
        If (tgIBSbf(ilLoop).iStatus = 0) Or (tgIBSbf(ilLoop).iStatus = 1) Then
            'gPDNToStr tgIBSbf(ilLoop).SbfRec.sItemAmount, 2, slStr
            slStr = gLongToStrDec(tgIBSbf(ilLoop).SbfRec.lGross, 2)
            slNoItems = Trim$(str$(tgIBSbf(ilLoop).SbfRec.iNoItems))
            slStr = gMulStr(slStr, slNoItems)
            smIBCTotal = gAddStr(smIBCTotal, slStr)
        End If
    Next ilLoop
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPopPBVehicle                   *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Vehicle box if        *
'*                      required                       *
'*                                                     *
'*******************************************************
Private Sub mPopPBVehicle()
    Dim ilLoop As Integer
    Dim llEDate As Long
    Dim llLDate As Long
    Dim llDate0 As Long
    Dim llDate1 As Long
    Dim slStamp As String
    Dim slStr As String
    'Dim ilLen As Integer
    Dim slNameCode As String
    Dim slName As String
    Dim slCode As String
    Dim ilCode As Integer
    'Dim ilVpfIndex As Integer
    Dim ilRet As Integer
    Dim ilDay As Integer
    Dim ilOk As Integer
    Dim ilFound As Integer
    Dim ilTest As Integer
    Dim ilVef As Integer
    Dim slSortChar As String
'    Dim ilLen As Integer
'    Dim ilVpf As Integer
    Dim slSQLQuery As String
    Dim pvf_rst As ADODB.Recordset

    tmcDelay.Enabled = False
    imDelaySrce = -1
    slStamp = Trim$(edcPBDate(0).Text) & Trim$(edcPBDate(1).Text)
    If slStamp = "" Then
        Exit Sub
    End If
    slStr = edcPBDate(0).Text
    If Not gValidDate(slStr) Then
        Exit Sub
    End If
    slStr = edcPBDate(1).Text
    If Not gValidDate(slStr) Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ReDim tgTmpSort(0 To 0) As SORTCODE
    slStr = edcPBDate(0).Text
    llDate0 = gDateValue(slStr)
    slStr = edcPBDate(1).Text
    llDate1 = gDateValue(slStr)
    For ilLoop = 0 To UBound(tmVehicleCode) - 1 Step 1  'lbcVehicle.ListCount - 1 Step 1
        slNameCode = tmVehicleCode(ilLoop).sKey    'lbcVehicle.List(ilLoop)
        ilRet = gParseItem(slNameCode, 1, "\", slName)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilCode = Val(slCode)
        If tgUrf(0).iRemoteUserID <= 0 Then
            llEDate = gGetEarliestLCFDate(hmLcf, "C", ilCode)
            llLDate = gGetLatestLCFDate(hmLcf, "C", ilCode)
            ilOk = False
            If ((llDate1 >= llEDate) And (llDate0 <= llLDate)) Or (llEDate = -1) Then
                ilOk = True
            Else
                ilVef = gBinarySearchVef(ilCode)
                If ilVef <> -1 Then
                    If tgMVef(ilVef).sType <> "G" Then
                        'Test if TFN exist
                        If (llDate1 >= llEDate) Then
                            For ilDay = 1 To 7 Step 1
                                tmLcfSrchKey.iType = 0
                                tmLcfSrchKey.sStatus = "C"
                                tmLcfSrchKey.iVefCode = ilCode
                                tmLcfSrchKey.iLogDate(0) = ilDay  '1=Monday; 2= Tuesday;...
                                tmLcfSrchKey.iLogDate(1) = 0
                                tmLcfSrchKey.iSeqNo = 1
                                ilRet = btrGetLessOrEqual(hmLcf, tmLcf, imLcfRecLen, tmLcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get last current record to obtain date
                                If (ilRet = BTRV_ERR_NONE) And (tmLcf.sStatus = "C") And (tmLcf.iVefCode = ilCode) And (tmLcf.iType = 0) Then
                                    ilOk = True
                                    Exit For
                                End If
                            Next ilDay
                        End If
                    End If
                End If
            End If
        Else
            ilOk = False
        End If
        'Check if Package and if hidden lines exist
        If ilOk Then
            ilVef = gBinarySearchVef(ilCode)
            If ilVef <> -1 Then
                If tgMVef(ilVef).sState <> "D" Then
                    slSortChar = "B"
                    If (tgMVef(ilVef).sType = "P") And (tgMVef(ilVef).lPvfCode <= 0) Then
                        ilOk = False
                    ElseIf (tgMVef(ilVef).sType = "P") Then
                        slSortChar = "A"
                        '6/25/12: Test if Package contains a Game vehicle.  If so, ignore package
                        If mGameInStdPkg(hmPvf, tgMVef(ilVef).lPvfCode) Then
                            ilOk = False
                        Else
                            'If CPM package, ignore package vehicle
                            slSQLQuery = "Select pvfType from PVF_Package_Vehicle Where pvfCode = " & tgMVef(ilVef).lPvfCode
                            Set pvf_rst = gSQLSelectCall(slSQLQuery)
                            If Not pvf_rst.EOF Then
                                If pvf_rst!pvfType = "C" Then
                                    ilOk = False
                                End If
                            End If
                        End If
                    ElseIf (tgMVef(ilVef).sType = "G") Then
                        ilOk = False
                    End If
                Else
                    ilOk = False
                End If
            Else
                ilOk = False
            End If
        End If
        If ilOk Then
            'Traffic!lbcTmpSort.AddItem slName
            tgTmpSort(UBound(tgTmpSort)).sKey = slSortChar & slName
            ReDim Preserve tgTmpSort(0 To UBound(tgTmpSort) + 1) As SORTCODE
        End If
    Next ilLoop
    If UBound(tgTmpSort) - 1 > 0 Then
        ArraySortTyp fnAV(tgTmpSort(), 0), UBound(tgTmpSort), 0, LenB(tgTmpSort(0)), 0, LenB(tgTmpSort(0).sKey), 0
    End If
    For ilLoop = 0 To UBound(tgTmpSort) - 1 Step 1  'Traffic!lbcTmpSort.ListCount - 1 Step 1
        slStr = tgTmpSort(ilLoop).sKey 'Traffic!lbcTmpSort.List(ilLoop)
        ilRet = gParseItem(slStr, 3, "|", slName)
        If (Trim$(smPowerCaption) <> "Rate Bar") Then
        Else
            gFindMatch slName, 0, lbcRBVehicle
            If gLastFound(lbcRBVehicle) < 0 Then
                lbcRBVehicle.AddItem Trim$(slName), ilLoop
            End If
        End If
    Next ilLoop
    If (Trim$(smPowerCaption) <> "Rate Bar") Then
    Else
        ilLoop = 0
        Do While ilLoop < lbcRBVehicle.ListCount
            slName = Trim$(lbcRBVehicle.List(ilLoop))
            ilFound = False
            For ilTest = 0 To UBound(tgTmpSort) - 1 Step 1
                slNameCode = tgTmpSort(ilTest).sKey 'Traffic!lbcTmpSort.List(ilLoop)
                ilRet = gParseItem(slNameCode, 3, "|", slStr)
                If StrComp(Trim$(slStr), slName, vbTextCompare) = 0 Then
                    ilFound = True
                    Exit For
                End If
            Next ilTest
            If Not ilFound Then
                lbcRBVehicle.RemoveItem ilLoop
            Else
                ilLoop = ilLoop + 1
            End If
        Loop
        ReDim imRBVehType(0 To lbcRBVehicle.ListCount) As Integer
        For ilLoop = 0 To lbcRBVehicle.ListCount - 1 Step 1
            slStr = Trim$(lbcRBVehicle.List(ilLoop))
            imRBVehType(ilLoop) = 0
            For ilTest = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                If StrComp(Trim$(tgMVef(ilTest).sName), slStr, vbTextCompare) = 0 Then
                    If tgMVef(ilTest).sType = "P" Then
                        imRBVehType(ilLoop) = 1
                    End If
                    Exit For
                End If
            Next ilTest
        Next ilLoop
        If lbcRBVehicle.ListCount > 0 Then
            ckcRBAllVeh.Caption = "All (" & lbcRBVehicle.SelCount & " of " & lbcRBVehicle.ListCount & ")"
        Else
            ckcRBAllVeh.Caption = "All"
        End If
        pbclbcRBVehicle_Paint
        mPopRBDaypart
    End If
    On Error Resume Next
    pvf_rst.Close
    'Traffic!lbcTmpSort.Clear
    ReDim tgTmpSort(0 To 0) As SORTCODE
    Screen.MousePointer = vbDefault
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPrgPop                         *
'*                                                     *
'*             Created:6/28/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Population Program box         *
'*                                                     *
'*******************************************************
Public Sub mPrgPop(ilRowNo As Integer, slFromLnOrCPM As String)
'lbcPrg Index values:
'Index = 0 => Air Time and Podcast Spots Daypart
'Index = 1 => Either only air time or Only Podcast Spots (Not coded)
'Index = 2 => Podcast CPM (not pop hear)
'Index = 3 => Pod-Target (Not pop hear)
    Dim slStr As String
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilVehCode As Integer
    Dim ilRcfCode As Integer
    Dim ilRet As Integer
    Dim ilCode As Integer
    Dim ilRdf As Integer
    Dim ilTest As Integer
    Dim ilRdfFound As Integer
    Dim slLineType As String
    Dim llRif As Long
    Dim slVefName As String
    Dim slRdfName As String
    Dim ilPrgIndex As Integer

    If slFromLnOrCPM = "C" Then
        slVefName = grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMVEHICLE)
        slRdfName = grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMDAYPART)
        If slVefName = "" Then
            Exit Sub
        End If
        If Contract.grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMLNTYPE) = "P" Then
            slLineType = "O"
        End If
        ilPrgIndex = 1
        ilVehCode = grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMVEFCODE)
        'ilRdfCode = grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMRDFCODE)
    Else
        slVefName = smLnSave(1, ilRowNo)
        If slVefName = "" Then
            Exit Sub
        End If
        slLineType = mGetLineType(ilRowNo)
        ilPrgIndex = 0
    End If
    If lbcRateCard.ListIndex < 0 Then
        Exit Sub
    End If
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        'If tscLine.SelectedItem.Index = 10 Then
        If tscLine.SelectedItem.Index = imTabMap(TABRESEARCH) Then
            mLnBookNamePop ilRowNo
            Exit Sub
        End If
        slNameCode = tmCntRateCard(lbcRateCard.ListIndex).sKey    'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 3, "\", slCode)
        If ilRet <> CP_MSG_NONE Then
            Exit Sub
        End If
        slCode = Trim$(slCode)
        ilRcfCode = CInt(slCode)

        'gFindMatch smLnSave(1, ilRowNo), 0, lbcLnVehicle(igTabMapIndex)
        gFindMatch slVefName, 0, lbcLnVehicle(igTabMapIndex)
        If gLastFound(lbcLnVehicle(igTabMapIndex)) < 0 Then
            Exit Sub
        End If
        ilRdfFound = False
        If slFromLnOrCPM = "C" Then
            slNameCode = tmVehicleCode2(gLastFound(lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
        Else
            slNameCode = tmVehicleCode(gLastFound(lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
        End If
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        On Error GoTo mPrgPopErr
        gCPErrorMsg ilRet, "mPrgPop (gParseItem field 2)", Contract
        On Error GoTo 0
        If lbcLnProgram(igTabMapIndex).Tag <> "" Then
            If StrComp(slCode, lbcLnProgram(igTabMapIndex).Tag, 1) = 0 Then
                'Exit Sub
            End If
        End If
        ilVehCode = CInt(slCode)
        lbcPrg(ilPrgIndex).Clear
        'lbcPrg(ilPrgIndex).Tag = slStamp
        lbcLnProgram(igTabMapIndex).Clear
        lbcLnProgram(igTabMapIndex).Tag = slCode
        For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
            If (tgMRif(llRif).iVefCode = ilVehCode) And (tgMRif(llRif).iRcfCode = ilRcfCode) Then
                'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                '    If tgMRif(ilLoop).iRdfcode = tgMRdf(ilRdf).iCode Then
                    ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                    If ilRdf <> -1 Then
                        If grdCPMBuy.Visible Then
                            If slRdfName = Trim$(tgMRdf(ilRdf).sName) And (Trim$(tgMRdf(ilRdf).sName) <> "") Then
                                ilRdfFound = True
                            End If
                        Else
                            If imLnSave(1, ilRowNo) = tgMRdf(ilRdf).iCode Then
                                ilRdfFound = True
                            End If
                        End If
                        ilFound = False
                        If (tgMRdf(ilRdf).sState = "A") Or ilRdfFound Then  '(imLnSave(1, ilRowNo) = tgMRdf(ilRdf).iCode) Then
                            For ilTest = 0 To lbcPrg(ilPrgIndex).ListCount - 1 Step 1
                                If tgMRdf(ilRdf).iCode = lbcPrg(ilPrgIndex).ItemData(ilTest) Then
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilTest
                        Else
                            ilFound = True
                        End If
                        If Not ilFound Then
                            slStr = mMakePrgSort(llRif, ilRdf)
                            lbcPrg(ilPrgIndex).AddItem slStr    'Add ID (retain matching sorted order) and Code number to list box
                            lbcPrg(ilPrgIndex).ItemData(lbcPrg(ilPrgIndex).NewIndex) = tgMRdf(ilRdf).iCode
                        End If
                '        Exit For
                    End If
                'Next ilRdf
            End If
        Next llRif
        If Not ilRdfFound Then
            If grdCPMBuy.Visible Then
                For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                    If slStr = Trim$(tgMRdf(ilRdf).sName) Then
                        ilFound = False
                        For ilTest = 0 To lbcPrg(ilPrgIndex).ListCount - 1 Step 1
                            If tgMRdf(ilRdf).iCode = lbcPrg(ilPrgIndex).ItemData(ilTest) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilTest
                        If Not ilFound Then
                            slStr = mMakePrgSort(-1, ilRdf)
                            lbcPrg(ilPrgIndex).AddItem slStr    'Add ID (retain matching sorted order) and Code number to list box
                            lbcPrg(ilPrgIndex).ItemData(lbcPrg(ilPrgIndex).NewIndex) = tgMRdf(ilRdf).iCode
                        End If
                    End If
                Next ilRdf
            Else
                ilRdf = gBinarySearchRdf(imLnSave(1, ilRowNo))
                If ilRdf <> -1 Then
                    ilFound = False
                    For ilTest = 0 To lbcPrg(ilPrgIndex).ListCount - 1 Step 1
                        If tgMRdf(ilRdf).iCode = lbcPrg(ilPrgIndex).ItemData(ilTest) Then
                            ilFound = True
                            Exit For
                        End If
                    Next ilTest
                    If Not ilFound Then
                        slStr = mMakePrgSort(-1, ilRdf)
                        lbcPrg(ilPrgIndex).AddItem slStr    'Add ID (retain matching sorted order) and Code number to list box
                        lbcPrg(ilPrgIndex).ItemData(lbcPrg(ilPrgIndex).NewIndex) = tgMRdf(ilRdf).iCode
                    End If
                End If
            End If
        End If
        For ilLoop = 0 To lbcPrg(ilPrgIndex).ListCount - 1 Step 1
            ilCode = lbcPrg(ilPrgIndex).ItemData(ilLoop)
            slStr = mMakePrgName(ilCode)
            lbcLnProgram(igTabMapIndex).AddItem slStr
            lbcLnProgram(igTabMapIndex).ItemData(lbcLnProgram(igTabMapIndex).NewIndex) = ilCode
            If slFromLnOrCPM = "C" Then
                lbcPkProgram(igTabMapIndex).AddItem slStr
                lbcPkProgram(igTabMapIndex).ItemData(lbcLnProgram(igTabMapIndex).NewIndex) = ilCode
            End If
        Next ilLoop
    Else
        mPkDPPop lbcPkProgram(igTabMapIndex)
    End If
    Exit Sub
mPrgPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mProdBranch                     *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      advertiser product and process *
'*                      communication back from        *
'*                      advertiser product             *
'*                                                     *
'*                                                     *
'*******************************************************
Private Function mProdBranch() As Integer
'
'   ilRet = mProdBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim slStr As String
    'Dim ilNoForms As Integer
    'Dim ilUsage As Integer
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mProdBranch = False
        Exit Function
    End If
    If (Not imDoubleClickName) Or (edcHdDropDown.Text = "[None]") Then
        imDoubleClickName = False
        mProdBranch = False
        Exit Function
    End If
    If igWinStatus(ADVERTISERSLIST) <> 2 Then
        Beep
        imDoubleClickName = False
        mProdBranch = True
        mSetFocus imHdBoxNo
        Exit Function
    End If
    igAdvtProdCallSource = CALLSOURCECONTRACT
    sgAdvtProdName = lbcAdvt.List(lbcAdvt.ListIndex)
    If edcHdDropDown.Text = "[New]" Then
        sgAdvtProdName = sgAdvtProdName & "\" & " "
    Else
        sgAdvtProdName = sgAdvtProdName & "\" & Trim$(edcHdDropDown.Text)
    End If
    ilUpdateAllowed = imUpdateAllowed
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
    End If
    sgCommandStr = slStr
    AdvtProd.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgAdvtProdName)
    igAdvtProdCallSource = Val(sgAdvtProdName)
    ilParse = gParseItem(slStr, 2, "\", sgAdvtProdName)
    imDoubleClickName = False
    mProdBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    If igAdvtProdCallSource = CALLDONE Then  'Done
        igAdvtProdCallSource = CALLNONE
'        gSetMenuState True
        lbcProd.Clear
        'Traffic!lbcProdCode.Tag = ""
        smProdCodeTag = ""
        mProdPop tmAdf.iCode, tmProdCode(), smProdCodeTag
        If imTerminate Then
            mProdBranch = False
            Exit Function
        End If
        gFindMatch sgAdvtProdName, 1, lbcProd
        If gLastFound(lbcProd) > 0 Then
            imChgMode = True
            lbcProd.ListIndex = gLastFound(lbcProd)
            edcHdDropDown.Text = lbcProd.List(lbcProd.ListIndex)
            imChgMode = False
            mProdBranch = False
            mSetChg PRODUCTINDEX
        Else
            imChgMode = True
            lbcProd.ListIndex = -1
            edcHdDropDown.Text = sgAdvtProdName
            imChgMode = False
            mSetChg PRODUCTINDEX
            edcHdDropDown.SetFocus
            sgAdvtProdName = ""
            Exit Function
        End If
        sgAdvtProdName = ""
    End If
    If igAdvtProdCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igAdvtProdCallSource = CALLNONE
        sgAdvtProdName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    If igAdvtProdCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igAdvtProdCallSource = CALLNONE
        sgAdvtProdName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mPTEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mPTEnableBox(ilBoxNo As Integer)
'
'   mPTEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmPTCtrls)) Then
        Exit Sub
    End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case PTTRADEINDEX   '% Trade
            If smPctTrade = "" Then
                edcShareDropDown.Text = "0"
            Else
                edcShareDropDown.Text = smPctTrade
            End If
            edcShareDropDown.Width = tmPTCtrls(ilBoxNo).fBoxW '- cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 3
            gMoveFormCtrl pbcPctTrade, edcShareDropDown, tmPTCtrls(ilBoxNo).fBoxX, tmPTCtrls(ilBoxNo).fBoxY
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
        Case PTAGYCOMMINDEX 'Agy Commissionable
            If imAgyComm < 0 Then
                imAgyComm = 0   'Yes
                tmHdCtrls(TRADEINDEX).iChg = True
                mSetCommands
            End If
            pbcAgyCTrade.Width = tmPTCtrls(ilBoxNo).fBoxW
            gMoveFormCtrl pbcPctTrade, pbcAgyCTrade, tmPTCtrls(ilBoxNo).fBoxX, tmPTCtrls(ilBoxNo).fBoxY
            pbcAgyCTrade_Paint
            pbcAgyCTrade.Visible = True
            pbcAgyCTrade.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPTSetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mPTSetChg(ilBoxNo As Integer)
'
'   mPTSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilIndex As Integer
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmPTCtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case PTTRADEINDEX
            ilIndex = ilBoxNo
            slStr = gIntToStrDec(tgChfCntr.iPctTrade, 0)
            gSetChgFlag slStr, edcShareDropDown, tmPTCtrls(ilBoxNo)
        Case PTAGYCOMMINDEX
            If (imAgyComm = 0) And (tgChfCntr.sAgyCTrade <> "Y") Then
                tmPTCtrls(ilBoxNo).iChg = True
            End If
            If (imAgyComm = 1) And (tgChfCntr.sAgyCTrade <> "N") Then
                tmPTCtrls(ilBoxNo).iChg = True
            End If
    End Select
    tmHdCtrls(TRADEINDEX).iChg = False
    For ilLoop = imLBCTCtrls To UBound(tmPTCtrls) Step 1
        If tmPTCtrls(ilLoop).iChg Then
            tmHdCtrls(TRADEINDEX).iChg = True
            
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPTSetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mPTSetShow(ilBoxNo As Integer)
'
'   mPTSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilIndex As Integer
    Dim slStr As String
    If ilBoxNo < imLBCTCtrls Or (ilBoxNo > UBound(tmPTCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case PTTRADEINDEX
            edcShareDropDown.Visible = False  'Set visibility
            slStr = edcShareDropDown.Text
            'imAgyComm = -1
            If Val(slStr) = 0 Or Val(slStr) = 100 Or Not mIsStationXmlAllowedForSite(STATIONXMLMARKETRON) Then
                If Val(slStr) = 0 Then
                    imAgyComm = 1
                    'L.Bianchi
                    mPTSetShow (PTAGYCOMMINDEX)
                End If
                smPctTrade = slStr
                gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
                gSetShow pbcPctTrade, slStr, tmPTCtrls(ilBoxNo)
            Else
                gMsgBox "Because you are using Station Xml-Marketron Electronic Orders, you cannot mix cash/trade in one order."
            End If
        Case PTAGYCOMMINDEX
            pbcAgyCTrade.Visible = False
            If imAgyComm = 0 Then
                slStr = "Yes"
            Else
                slStr = "No"
            End If
            gSetShow pbcPctTrade, slStr, tmPTCtrls(ilBoxNo)
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRateCardPop                    *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Rate Card list        *
'*                      box if required                *
'*                                                     *
'*******************************************************
Public Sub mRateCardPop()
'
'   mRateCardPop
'   Where:
'
    Dim ilRet As Integer
    Dim ilRet1 As Integer
    Dim slDate As String
    Dim llDate As Long
    Dim slName As String
    Dim ilIndex As Integer
    Dim ilFound As Integer
    Dim ilRcf As Integer
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim llRif As Long
    If imStep3Index < 0 Then 'New selected
        slDate = Format$(gNow(), "m/d/yy")
        llDate = gDateValue(slDate)
    Else

        gUnpackDate tgChfCntr.iOHDDate(0), tgChfCntr.iOHDDate(1), slDate
        If slDate <> "" Then
            llDate = gDateValue(slDate)
        Else
            gUnpackDate tgChfCntr.iPropDate(0), tgChfCntr.iPropDate(1), slDate
            llDate = gDateValue(slDate)
        End If
        'Find The earliest date for the contract
        tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
        tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
        tmChfSrchKey1.iPropVer = tgChfCntr.iPropVer
        ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmDiffChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tmDiffChf.lCntrNo = tgChfCntr.lCntrNo)
            gUnpackDate tmDiffChf.iOHDDate(0), tmDiffChf.iOHDDate(1), slDate
            If slDate <> "" Then
                If gDateValue(slDate) < llDate Then
                    llDate = gDateValue(slDate)
                End If
            End If
            gUnpackDate tmDiffChf.iPropDate(0), tmDiffChf.iPropDate(1), slDate
            If slDate <> "" Then
                If gDateValue(slDate) < llDate Then
                    llDate = gDateValue(slDate)
                End If
            End If
            ilRet = btrGetNext(hmCHF, tmDiffChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        For ilRcf = LBound(tgMRcf) To UBound(tgMRcf) - 1 Step 1
            If tgMRcf(ilRcf).iCode = tgChfCntr.iRcfCode Then
                gUnpackDate tgMRcf(ilRcf).iStartDate(0), tgMRcf(ilRcf).iStartDate(1), slDate
                If slDate <> "" Then
                    If gDateValue(slDate) < llDate Then
                        llDate = gDateValue(slDate)
                    End If
                End If
                Exit For
            End If
        Next ilRcf
    End If
    ReDim tmRCSort(0 To 0) As RCSORT
    ilIndex = lbcRateCard.ListIndex
    If ilIndex >= 0 Then
        slName = lbcRateCard.List(ilIndex)
    End If
    'Repopulate if required- if rate card changed by another user while in this screen
    'ilRet = gPopRateCardBox(Contract, llDate, lbcRateCard, Traffic!lbcRateCardCode, -1)
    ilRet = gPopRateCardBox(Contract, llDate, lbcRateCard, tmCntRateCard(), smCntRateCardTag, -1)

    If imStep3Index >= 0 Then   'Reference order- check that rate card is in list- if not add it
        ilFound = False
        For ilLoop = 0 To UBound(tmCntRateCard) - 1 Step 1 'Traffic!lbcRateCardCode.ListCount - 1 Step 1
            slNameCode = tmCntRateCard(ilLoop).sKey   'Traffic!lbcRateCardCode.List(ilLoop)
            ilRet1 = gParseItem(slNameCode, 3, "\", slName)
            If tgChfCntr.iRcfCode = Val(slName) Then
                ilFound = True
                Exit For
            End If
        Next ilLoop
        If Not ilFound Then
            For ilRcf = LBound(tgMRcf) To UBound(tgMRcf) - 1 Step 1
                If tgMRcf(ilRcf).iCode = tgChfCntr.iRcfCode Then
                    imExtraRcfAdded = True
                    gUnpackDateForSort tgMRcf(ilRcf).iStartDate(0), tgMRcf(ilRcf).iStartDate(1), slName
'Changed to descending order 2/16/04
'                    slName = gSubStr("99999", slName)
                    slName = slName & "\" & Trim$(tgMRcf(ilRcf).sName) & str$(tgMRcf(ilRcf).iYear)
                    slName = slName & "\" & Trim$(str$(tgMRcf(ilRcf).iCode))
                    tmCntRateCard(UBound(tmCntRateCard)).sKey = slName
                    ReDim Preserve tmCntRateCard(0 To UBound(tmCntRateCard) + 1) As SORTCODE
                    If UBound(tmCntRateCard) - 1 > 0 Then
'                        ArraySortTyp fnAV(tmCntRateCard(), 0), UBound(tmCntRateCard), 0, LenB(tmCntRateCard(0)), 0, LenB(tmCntRateCard(0).sKey), 0
'Change to descending (removed date subtraction, 2/16/04
                        ArraySortTyp fnAV(tmCntRateCard(), 0), UBound(tmCntRateCard), 1, LenB(tmCntRateCard(0)), 0, LenB(tmCntRateCard(0).sKey), 0
                    End If
                    lbcRateCard.Clear
                    For ilLoop = 0 To UBound(tmCntRateCard) - 1 Step 1 '-1
                        slNameCode = tmCntRateCard(ilLoop).sKey    'lbcMster.List(ilLoop)
                        ilRet1 = gParseItem(slNameCode, 2, "\", slName)
                        slName = Trim$(slName)
                        lbcRateCard.AddItem slName  'Add ID to list box
                    Next ilLoop
                    Exit For
                End If
            Next ilRcf
        End If
    End If
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mRateCardErr
        gCPErrorMsg ilRet, "mRateCardPop (gPopRateCardBox)", Contract
        On Error GoTo 0
        imChgMode = True
        If ilIndex >= 0 Then
            gFindMatch slName, 0, lbcRateCard
            If gLastFound(lbcRateCard) >= 0 Then
                lbcRateCard.ListIndex = gLastFound(lbcRateCard)
            Else
                lbcRateCard.ListIndex = -1
            End If
        Else
            lbcRateCard.ListIndex = ilIndex
        End If
        imChgMode = False
    End If
    If lbcRateCard.ListCount <= 0 Then
        If llDate > 0 Then
            slDate = Format$(llDate - 32, "m/d/yy")
            gObtainMonthYear 0, slDate, ilIndex, ilFound
        Else
            ilFound = 0
        End If
        MsgBox "Rate Card Not Defined for" & str$(ilFound), vbOKOnly + vbExclamation, "Warning"
        imTerminate = True
    Else
        For ilLoop = 0 To UBound(tmCntRateCard) - 1 Step 1 'Traffic!lbcRateCardCode.ListCount - 1 Step 1
            slNameCode = tmCntRateCard(ilLoop).sKey   'Traffic!lbcRateCardCode.List(ilLoop)
            ilRet1 = gParseItem(slNameCode, 3, "\", slName)
            tmRCSort(UBound(tmRCSort)).iRcfCode = Val(slName)
            For ilRcf = LBound(tgMRcf) To UBound(tgMRcf) - 1 Step 1
                If tgMRcf(ilRcf).iCode = tmRCSort(UBound(tmRCSort)).iRcfCode Then
                    gUnpackDateLong tgMRcf(ilRcf).iStartDate(0), tgMRcf(ilRcf).iStartDate(1), tmRCSort(UBound(tmRCSort)).lStartDate
                    Do While gWeekDayLong(tmRCSort(UBound(tmRCSort)).lStartDate) <> 0
                        tmRCSort(UBound(tmRCSort)).lStartDate = tmRCSort(UBound(tmRCSort)).lStartDate - 1
                    Loop
                    Exit For
                End If
            Next ilRcf
            For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                If (tgMRif(llRif).iRcfCode = tmRCSort(UBound(tmRCSort)).iRcfCode) Then
                    tmRCSort(UBound(tmRCSort)).lRifIndex = llRif
                    Exit For
                End If
            Next llRif
            ReDim Preserve tmRCSort(0 To UBound(tmRCSort) + 1) As RCSORT
        Next ilLoop
    End If
    Exit Sub
mRateCardErr:
    On Error GoTo 0
    imTerminate = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRBSetShow                      *
'*                                                     *
'*             Created:8/02/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mRBSetShow(ilSetChk As Integer)
    Dim slStr As String
    Dim llCPP As Long
    Dim llCPM As Long
    Dim ilLoop As Integer
    Dim ilValueWasZero As Integer
    Dim slMixIn As String
    Dim slMixOut As String
    Dim ilIndex As Integer
    Dim slvalue As String
    Dim ilRet As Integer
    'Dim llPopEst As Long

    'If imRBBox < LBound(tmRBCtrls) Or imRBBox > UBound(tmRBCtrls) Then
    If imRBBox < imLBCTCtrls Or imRBBox > UBound(tmRBCtrls) Then
        Exit Sub
    End If
    If imRBRow < 0 Then
        Exit Sub
    End If
    If (imRBInLnGridOrSum <> 0) And (imRBInLnGridOrSum <> 1) Then
        Exit Sub
    End If
    If imRBInLnGridOrSum <> 1 Then
        frcRBVehSpots.Visible = False
        If (imRBBox = 4) Then
            slStr = edcRB(imRBInLnGridOrSum).Text
            If (slStr = "") Or (Val(slStr) = 0) Then
                edcRB(imRBInLnGridOrSum).Text = Trim$(str$(tmPB1DP(imRBRow - 1).lNoSpots))
                edcRB(imRBInLnGridOrSum).Visible = False
                ilRet = MsgBox("Uncheck line instead of setting the number of spots to zero", vbOKOnly + vbExclamation, "Message")
                Exit Sub
            End If
        End If
        If (imRBBox = 4) And (tmPB1DP(imRBRow - 1).lMixStartDate > 0) Then
            tmPB1DP(imRBRow - 1).iAudSet = False
            If ilSetChk Then
                mSetRBEquals 4
            End If
        End If
        slStr = edcRB(imRBInLnGridOrSum).Text
        Select Case imRBBox
            Case 4
                If ilSetChk Then
                    tmPB1DP(imRBRow - 1).iChk = True
                End If
                If tmPB1DP(imRBRow - 1).lNoSpots <> Val(slStr) Then
                    tmPB1DP(imRBRow - 1).lNoSpots = Val(slStr)
                    tmPB1DP(imRBRow - 1).iAudSet = False
                    If tmPB1DP(imRBRow - 1).lMixStartDate <= 0 Then
                        tmPB1DP(imRBRow - 1).iSpotChg = True
                    End If
                End If
            Case 5  'Price
                If ilSetChk Then
                    tmPB1DP(imRBRow - 1).iChk = True
                End If
                If tmPB1DP(imRBRow - 1).lAvgPrice <> 100 * gStrDecToLong(slStr, 0) Then
                    tmPB1DP(imRBRow - 1).iAudSet = False
                    tmPB1DP(imRBRow - 1).lAvgPrice = 100 * gStrDecToLong(slStr, 0)
                End If
            Case 8  'CPP
                If ilSetChk Then
                    tmPB1DP(imRBRow - 1).iChk = True
    '                If imRBView = 2 Then
    '                    tmRB1DP(imRBRow - 1).iChk = True
    '                End If
                End If
                If tmPB1DP(imRBRow - 1).lCPP <> Val(slStr) Then
                    tmPB1DP(imRBRow - 1).iAudSet = False
                    llCPP = tmPB1DP(imRBRow - 1).lCPP
                    tmPB1DP(imRBRow - 1).lCPP = Val(slStr)
                    'tmPB1DP(imRBRow - 1).iChk = True
                    If llCPP > 0 Then
                        ilValueWasZero = False
                        tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lAvgPrice * (CDbl(tmPB1DP(imRBRow - 1).lCPP) / llCPP)
                    Else
                        'Might want to change to NewCPP * GRP * 10 or tmPB1DP(imRBRow - 1).lCPP * tmPB1DP(imRBRow - 1).lGRP * 10
                        ilValueWasZero = True
                        tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lCPP * tmPB1DP(imRBRow - 1).lGRP * 10
                    End If
                End If
            Case 9  'CPM
                If ilSetChk Then
                    tmPB1DP(imRBRow - 1).iChk = True
                End If
                If tmPB1DP(imRBRow - 1).lCPM <> gStrDecToLong(slStr, 2) Then
                    tmPB1DP(imRBRow - 1).iAudSet = False
                    llCPM = tmPB1DP(imRBRow - 1).lCPM
                    tmPB1DP(imRBRow - 1).lCPM = gStrDecToLong(slStr, 2)
                    'tmPB1DP(imRBRow - 1).iChk = True
                    If llCPM > 0 Then
                        tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lAvgPrice * (CDbl(tmPB1DP(imRBRow - 1).lCPM) / llCPM)
                    Else
                        'Might want to change to NewCPM * GrImp or tmPB1DP(imRBRow - 1).lCPM * tmPB1DP(imRBRow - 1).lGrImp
                        If tgSpf.sSAudData = "H" Then
                            tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lCPM * tmPB1DP(imRBRow - 1).lGrImp \ 10
                        ElseIf tgSpf.sSAudData = "N" Then
                            tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lCPM * tmPB1DP(imRBRow - 1).lGrImp \ 100
                        ElseIf tgSpf.sSAudData = "U" Then
                            tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lCPM * tmPB1DP(imRBRow - 1).lGrImp \ 1000
                        Else
                            tmPB1DP(imRBRow - 1).lAvgPrice = tmPB1DP(imRBRow - 1).lCPM * tmPB1DP(imRBRow - 1).lGrImp
                        End If
                    End If
                    tmPB1DP(imRBRow - 1).lCPM = llCPM
                End If
        End Select
    Else
        If imRBBox = 3 Then
            mDPAllowedDays tmRB1DP(imRBRow - 1).iRdfCode, imAllowedDays()
            mSetRBOverrides tmRB1DP(imRBRow - 1)
            For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                If (imRBView = 2) And (tmPB1DP(ilLoop).iRdfCode = tmRB1DP(imRBRow - 1).iRdfCode) Then
                    mSetRBOverrides tmPB1DP(ilLoop)
                End If
            Next ilLoop
        Else
            slStr = edcRB(imRBInLnGridOrSum).Text
            For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                If ((imRBView = 1) And (tmPB1DP(ilLoop).iVefCode = tmRB1DP(imRBRow - 1).iVefCode)) Or ((imRBView = 2) And (tmPB1DP(ilLoop).iRdfCode = tmRB1DP(imRBRow - 1).iRdfCode)) Then
                    Select Case imRBBox
                        Case 4
                            If (tmRB1DP(imRBRow - 1).lNoSpots <> Val(slStr)) And (tmRB1DP(imRBRow - 1).lNoSpots > 0) Then
                                tmPB1DP(ilLoop).iAudSet = False
                                tmPB1DP(ilLoop).iSpotChg = True
                                If tmPB1DP(ilLoop).lMixStartDate > 0 Then
                                    slMixIn = smRBMixDatesSpots(tmPB1DP(ilLoop).iMixSpotIndex)
                                    slMixOut = ""
                                    ilIndex = 1
                                    Do
                                        ilRet = gParseItem(slMixIn, ilIndex, "|", slvalue)
                                        If ilRet <> CP_MSG_NONE Then
                                            smRBMixDatesSpots(tmPB1DP(ilLoop).iMixSpotIndex) = slMixOut
                                            Exit Do
                                        End If
                                        If tmPB1DP(ilLoop).lNoSpots > 0 Then
                                            If Left$(slvalue, 1) = "-" Then
                                                slvalue = Mid$(slvalue, 2)
                                                slvalue = gMulStr(slvalue, slStr)
                                                slvalue = gDivStr(slvalue, Trim$(str$(tmRB1DP(imRBRow - 1).lNoSpots)))
                                                If Trim$(slvalue) <> "" Then
                                                    If Val(slvalue) <= 0 Then
                                                        slvalue = "1"
                                                    End If
                                                Else
                                                    slvalue = "1"
                                                End If
                                                slvalue = "-" & slvalue
                                            Else
                                                slvalue = gMulStr(slvalue, slStr)
                                                slvalue = gDivStr(slvalue, Trim$(str$(tmRB1DP(imRBRow - 1).lNoSpots)))
                                                If Trim$(slvalue) <> "" Then
                                                    If Val(slvalue) <= 0 Then
                                                        slvalue = "1"
                                                    End If
                                                Else
                                                    slvalue = "1"
                                                End If
                                            End If
                                        End If
                                        slMixOut = slMixOut & slvalue & "|"
                                        ilIndex = ilIndex + 1
                                    Loop
                                Else
                                    If tmPB1DP(ilLoop).lNoSpots > 0 Then
                                        tmPB1DP(ilLoop).lNoSpots = tmPB1DP(ilLoop).lNoSpots * (gStrDecToLong(slStr, 0) / CDbl(tmRB1DP(imRBRow - 1).lNoSpots))
                                        If tmPB1DP(ilLoop).lNoSpots <= 0 Then
                                            tmPB1DP(ilLoop).lNoSpots = 1
                                        End If
                                    End If
                                End If
                            End If
                        Case 5  'Price
                            If (tmRB1DP(imRBRow - 1).lAvgPrice <> 100 * gStrDecToLong(slStr, 0)) And (tmRB1DP(imRBRow - 1).lAvgPrice > 0) Then
                                tmPB1DP(ilLoop).iAudSet = False
                                tmPB1DP(ilLoop).lAvgPrice = tmPB1DP(ilLoop).lAvgPrice * (100 * gStrDecToLong(slStr, 0) / CDbl(tmRB1DP(imRBRow - 1).lAvgPrice))
                            End If
                        Case 8  'CPP
                            If (tmRB1DP(imRBRow - 1).lCPP <> Val(slStr)) And (tmRB1DP(imRBRow - 1).lCPP > 0) Then
                                tmPB1DP(ilLoop).iAudSet = False
                                tmPB1DP(ilLoop).lAvgPrice = tmPB1DP(ilLoop).lAvgPrice * (gStrDecToLong(slStr, 0) / CDbl(tmRB1DP(imRBRow - 1).lCPP))
                            End If
                        Case 9  'CPM
                            If (tmRB1DP(imRBRow - 1).lCPM <> gStrDecToLong(slStr, 2)) And (tmRB1DP(imRBRow - 1).lCPM > 0) Then
                                tmPB1DP(ilLoop).iAudSet = False
                                tmPB1DP(ilLoop).lAvgPrice = tmPB1DP(ilLoop).lAvgPrice * (gStrDecToLong(slStr, 2) / CDbl(tmRB1DP(imRBRow - 1).lCPM))
                            End If
                    End Select
                End If
            Next ilLoop
        End If
    End If
    edcRB(imRBInLnGridOrSum).Visible = False
    If ilSetChk Then
        mSetRBEquals 4
        imRBBox = -1
        imRBRow = -1
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mReadClfCffRec                  *
'*                                                     *
'*             Created:8/01/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read a record                  *
'*                                                     *
'*******************************************************
Public Function mReadClfCffRec() As Integer

'
'   iRet = mReadClfCffRec
'   Where:
'       iRet (O)- True if record read,
'                 False if not read
'
    Dim ilRet As Integer    'Return status
    Dim ilUpperBound As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilSortReq As Integer
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim ilCount As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilLineNo As Integer
    Dim hlDnf As Integer
    Dim ilDnfRecLen As Integer     'Slf record length
    Dim tlDnf As DNF
    Dim tlDnfSrchKey As INTKEY0
    Dim blPcfRet As Boolean

    imAnyLnSchd = False

    'ilRet = gObtainCntrPlusGame(hmChf, hmClf, hmCff, hmCgf, hmMsf, tgChfCntr.lCode, False, tmDiffChf, tgClfCntr(), tgCffCntr(), tgCgfCntr(), tgMsfCntr())
    If imStep1Index = 1 Then    'Modeling- make all lines as if new and remove flight info
        '2/8/19: Retain sports vehicle until question asked in CMedel
        'ilRet = gObtainCntr(hmCHF, hmClf, hmCff, tgChfCntr.lCode, False, tmDiffChf, tgClfCntr(), tgCffCntr())
        ilRet = gObtainCntrPlusGame(hmCHF, hmClf, hmCff, hmCgf, tgChfCntr.lCode, False, tmDiffChf, tgClfCntr(), tgCffCntr(), tgCgfCntr())
    Else
        ilRet = gObtainCntrPlusGame(hmCHF, hmClf, hmCff, hmCgf, tgChfCntr.lCode, False, tmDiffChf, tgClfCntr(), tgCffCntr(), tgCgfCntr())
    End If
    If Not ilRet Then
        mReadClfCffRec = False
        Exit Function
    End If
    blPcfRet = gReadPcfAndLoadGrid()
    imLastCffUsed = UBound(tgCffCntr)
    If imStep1Index = 1 Then    'Modeling- make all lines as if new and remove flight info
        '10910
        ReDim tgContractDocuments(0 To 0) As ACFList
        'Remove CBS Lines
        ilClf = LBound(tgClfCntr)
        Do While ilClf < UBound(tgClfCntr)
            tgClfCntr(ilClf).ClfRec.iSpotsWrite = 0
            tgClfCntr(ilClf).ClfRec.iSpotsBooked = 0
            tgClfCntr(ilClf).ClfRec.lRafCode = 0
            ilCount = 0
            llStartDate = 0
            llEndDate = 0
            ilCff = tgClfCntr(ilClf).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    ilCount = ilCount + 1
                    'gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate    'Week Start date
                    'gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate    'Week Start date
                    llStartDate = tgCffCntr(ilCff).lStartDate   'gDateValue(slStartDate)
                    llEndDate = tgCffCntr(ilCff).lEndDate   'gDateValue(slEndDate)
                    If ilCount > 1 Then
                        Exit Do
                    End If
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If llEndDate < llStartDate Then
                ilSortReq = True
                ilLineNo = tgClfCntr(ilClf).ClfRec.iLine
                For ilLoop = ilClf To UBound(tgClfCntr) - 1 Step 1
                    tgClfCntr(ilLoop) = tgClfCntr(ilLoop + 1)
                Next ilLoop
                ReDim Preserve tgClfCntr(0 To UBound(tgClfCntr) - 1) As CLFLIST
                For ilLoop = 0 To UBound(tgClfCntr) - 1 Step 1
                    If tgClfCntr(ilLoop).ClfRec.iLine > ilLineNo Then
                        tgClfCntr(ilLoop).ClfRec.iLine = tgClfCntr(ilLoop).ClfRec.iLine - 1
                    End If
                    If tgClfCntr(ilLoop).ClfRec.iPkLineNo > ilLineNo Then
                        tgClfCntr(ilLoop).ClfRec.iPkLineNo = tgClfCntr(ilLoop).ClfRec.iPkLineNo - 1
                    End If
                Next ilLoop
                'Leave tgCff as it is since it is a link list and leaving the extra images
                'will do no harm
            Else
                '2/8/19: Retain sports vehicle until CModel
                'ilRet = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                'If ilRet <> -1 Then
                '    If tgMVef(ilRet).sType = "G" Then
                '        ilCff = tgClfCntr(ilClf).iFirstCff
                '        Do While ilCff <> -1
                '            tgCffCntr(ilCff).iStatus = -1
                '            ilRet = ilCff
                '            ilCff = tgCffCntr(ilCff).iNextCff
                '            tgCffCntr(ilRet).iNextCff = -1
                '        Loop
                '        tgClfCntr(ilClf).iFirstCff = -1
                '        tgClfCntr(ilClf).iFirstCgf = -1
                '    End If
                'End If
              '10774 removed to below
                'ilClf = ilClf + 1
            End If
            '10774 remove if line # = 0
            If tgClfCntr(ilClf).ClfRec.iLine = 0 Then
                ilSortReq = True
                For ilLoop = ilClf To UBound(tgClfCntr) - 1 Step 1
                    tgClfCntr(ilLoop) = tgClfCntr(ilLoop + 1)
                Next ilLoop
                ReDim Preserve tgClfCntr(0 To UBound(tgClfCntr) - 1) As CLFLIST
                'don't need to increment, as we moved the next record down.  Let's look at that same one,which will actually be next.  If last, we should get out of loop.
            Else
                ilClf = ilClf + 1
            End If
        Loop
        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            tgClfCntr(ilLoop).iStatus = 0
            tgClfCntr(ilLoop).lRecPos = 0
            'tgClfCntr(ilLoop).iFirstCff = -1
        Next ilLoop
        For ilLoop = LBound(tgCffCntr) To UBound(tgCffCntr) - 1 Step 1
            tgCffCntr(ilLoop).iStatus = 0
            tgCffCntr(ilLoop).lRecPos = 0
            'tgClfCntr(ilLoop).iFirstCff = -1
        Next ilLoop
        ReDim smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
        ReDim imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
        ReDim smLnShow(0 To LINECOMMINDEX, 0 To UBound(tgClfCntr) + 1) As String
        For ilIndex = 1 To UBound(tgClfCntr) + 1 Step 1
            For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
                imLnSave(ilLoop, ilIndex) = -1
            Next ilLoop
        Next ilIndex
        ReDim smLnComment(0 To UBound(tgClfCntr) + 1) As String
        ReDim smLnInitComment(0 To UBound(tgClfCntr) + 1) As String
        ReDim imLnCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
        ReDim imLnInitCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
        ReDim tmWkInfo(0 To 1) As WKINFO
        tmWkInfo(1).iNextIndex = -1
        lbcStep(2).Visible = False
        igTerminateReturn = 0   '0=Canceled
        Screen.MousePointer = vbDefault    'Default
        CModel.Show vbModal
        Screen.MousePointer = vbHourglass
        If igTerminateReturn = 0 Then
            ReDim tgIBSbf(0 To 0) As SBFLIST
            tgIBSbf(0).iStatus = -1 'Not Used
            tgIBSbf(0).lRecPos = 0
            ReDim tgClfCntr(0 To 0) As CLFLIST
            tgClfCntr(0).iStatus = -1 'Not Used
            tgClfCntr(0).lRecPos = 0
            tgClfCntr(0).iFirstCff = -1
            tgClfCntr(0).iFirstCgf = -1
            tgClfCntr(0).lFirstAvail = -1
            tgClfCntr(0).bLnPriceSet = False
            ReDim tgCffCntr(0 To 0) As CFFLIST
            tgCffCntr(0).iStatus = -1 'Not Used
            tgCffCntr(0).lRecPos = 0
            tgCffCntr(0).iNextCff = -1
            ReDim tgCgfCntr(0 To 0) As CGFLIST
            tgCgfCntr(0).iStatus = -1 'Not Used
            tgCgfCntr(0).iNextCgf = -1
            ReDim tgMsfCntr(0 To 0) As MSFLIST
            tgMsfCntr(0).iStatus = -1 'Not Used
            tgMsfCntr(0).iFirstMgf = -1
            tgMsfCntr(0).iCxfIndex = -1
            ReDim tgMgfCntr(0 To 0) As MGFLIST
            tgMgfCntr(0).iStatus = -1 'Not Used
            ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
            tgLnAvailInfo(0).lNextIndex = -1
            ReDim sgMsfCntrCxf(0 To 0) As String
            ReDim lgDeletedPcfCode(0 To 0) As Long
            mReadClfCffRec = False
            Exit Function
        End If
    ElseIf (imStep1Index = 3) And (sgCntrScreen <> "Orders") Then    'New Reversion of an existing proposal
        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            tgClfCntr(ilLoop).iStatus = 0
            tgClfCntr(ilLoop).lRecPos = 0
        Next ilLoop
        For ilLoop = LBound(tgCffCntr) To UBound(tgCffCntr) - 1 Step 1
            tgCffCntr(ilLoop).iStatus = 0
            tgCffCntr(ilLoop).lRecPos = 0
        Next ilLoop
    Else
        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            If (tgClfCntr(ilLoop).ClfRec.sSchStatus = "F") Or (tgClfCntr(ilLoop).ClfRec.sSchStatus = "I") Or (tgClfCntr(ilLoop).ClfRec.sSchStatus = "M") Then
                imAnyLnSchd = True
            End If
        Next ilLoop
        '11/15/14: Check if previous contract scheduled
        If Not imAnyLnSchd Then
            If (smOrigSchdStatusSaved = "F") Or (smOrigSchdStatusSaved = "I") Or (smOrigSchdStatusSaved = "M") Then
                imAnyLnSchd = True
            End If
        End If
    End If
    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        tgClfCntr(ilLoop).bLnPriceSet = True
    Next ilLoop
    ilUpperBound = UBound(tgClfCntr)
    tgClfCntr(ilUpperBound).ClfRec.iLine = 0
    tgClfCntr(ilUpperBound).ClfRec.iNoGames = 0
    tgClfCntr(ilUpperBound).ClfRec.iSpotsOrdered = 0
    tgClfCntr(ilUpperBound).ClfRec.sSchStatus = " "
    tgClfCntr(ilUpperBound).ClfRec.iPriority = -1
    tgClfCntr(ilUpperBound).ClfRec.sDelete = "N"
    tgClfCntr(ilUpperBound).ClfRec.iSpotsWrite = 0
    tgClfCntr(ilUpperBound).ClfRec.iSpotsBooked = 0
    tgClfCntr(ilUpperBound).ClfRec.sHideCBS = "N"
    tgClfCntr(ilUpperBound).sCurrentPrice = ""
    tgClfCntr(ilUpperBound).sLineChgd = "N"
    tgClfCntr(ilUpperBound).bLnPriceSet = False
    
    ReDim smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
    ReDim imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim smLnShow(0 To LINECOMMINDEX, 0 To UBound(tgClfCntr) + 1) As String
    For ilIndex = 1 To UBound(tgClfCntr) + 1 Step 1
        For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            imLnSave(ilLoop, ilIndex) = -1
        Next ilLoop
    Next ilIndex
    ReDim smLnComment(0 To UBound(tgClfCntr) + 1) As String
    ReDim smLnInitComment(0 To UBound(tgClfCntr) + 1) As String
    ReDim imLnCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim imLnInitCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim tmWkInfo(0 To 1) As WKINFO
    tmWkInfo(1).iNextIndex = -1
    mClearPB
    mClearDB
    
    hlDnf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hlDnf, "", sgDBPath & "Dnf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    ilDnfRecLen = Len(tlDnf)
    
    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If tgClfCntr(ilLoop).ClfRec.sOV2DefinedBits = " " Then
            tgClfCntr(ilLoop).ClfRec.sOV2DefinedBits = Chr(&H0)
        End If
        smLnInitComment(ilLoop + 1) = ""
        smLnComment(ilLoop + 1) = ""
        imLnCommShowOn(0, ilLoop + 1) = 1
        imLnCommShowOn(1, ilLoop + 1) = 1
        imLnCommShowOn(2, ilLoop + 1) = 1
        imLnCommShowOn(3, ilLoop + 1) = 1
        imLnCommShowOn(4, ilLoop + 1) = 1
        imLnInitCommShowOn(0, ilLoop + 1) = 1 'Proposal
        imLnInitCommShowOn(1, ilLoop + 1) = 1 'Order
        imLnInitCommShowOn(2, ilLoop + 1) = 1 'Spots
        imLnInitCommShowOn(3, ilLoop + 1) = 1 'Invoices
        imLnInitCommShowOn(4, ilLoop + 1) = 1 'Insertion
        If imStep1Index = 1 Then    'Model new order
            tgClfCntr(ilLoop).ClfRec.lCxfCode = 0
        End If
        tmCxfSrchKey.lCode = tgClfCntr(ilLoop).ClfRec.lCxfCode
        If tmCxfSrchKey.lCode <> 0 Then
            tmCxf.sComment = ""
            imCxfRecLen = Len(tmCxf) '5027
            ilRet = gCXFGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet = BTRV_ERR_NONE Then
                ilRet = btrGetPosition(hmCxf, tgClfCntr(ilLoop).lCxfRecPos)
                    smLnInitComment(ilLoop + 1) = gStripChr0(tmCxf.sComment) 'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                    smLnInitComment(ilLoop + 1) = gRemoveLeadingCrCl(smLnInitComment(ilLoop + 1))
                    smLnComment(ilLoop + 1) = smLnInitComment(ilLoop + 1)
                If tmCxf.sShProp = "Y" Then
                    imLnCommShowOn(0, ilLoop + 1) = 0
                Else
                    imLnCommShowOn(0, ilLoop + 1) = 1
                End If
                If tmCxf.sShOrder = "Y" Then
                    imLnCommShowOn(1, ilLoop + 1) = 0
                Else
                    imLnCommShowOn(1, ilLoop + 1) = 1
                End If
                If tmCxf.sShSpot = "Y" Then
                    imLnCommShowOn(2, ilLoop + 1) = 0
                Else
                    imLnCommShowOn(2, ilLoop + 1) = 1
                End If
                If tmCxf.sShInv = "Y" Then
                    imLnCommShowOn(3, ilLoop + 1) = 0
                Else
                    imLnCommShowOn(3, ilLoop + 1) = 1
                End If
                If tmCxf.sShInsertion = "Y" Then
                    imLnCommShowOn(4, ilLoop + 1) = 0
                Else
                    imLnCommShowOn(4, ilLoop + 1) = 1
                End If
                imLnInitCommShowOn(0, ilLoop + 1) = imLnCommShowOn(0, ilLoop + 1) 'Proposal
                imLnInitCommShowOn(1, ilLoop + 1) = imLnCommShowOn(1, ilLoop + 1) 'Order
                imLnInitCommShowOn(2, ilLoop + 1) = imLnCommShowOn(2, ilLoop + 1) 'Spots
                imLnInitCommShowOn(3, ilLoop + 1) = imLnCommShowOn(3, ilLoop + 1) 'Invoices
                imLnInitCommShowOn(4, ilLoop + 1) = imLnCommShowOn(4, ilLoop + 1) 'Insertion
            End If
        End If
        tgClfCntr(ilLoop).sCurrentPrice = ""
        '12/16/14: Add Hide/Show Hidden Lines: Add site option test
        tgClfCntr(ilLoop).bShowLine = True
        tgClfCntr(ilLoop).bPkExpanded = True
        tgClfCntr(ilLoop).sLineChgd = "N"
        tgClfCntr(ilLoop).bLnPriceSet = True
        If bgHideHiddenLines Then
            If (tgClfCntr(ilLoop).ClfRec.sType = "O") Or (tgClfCntr(ilLoop).ClfRec.sType = "A") Or (tgClfCntr(ilLoop).ClfRec.sType = "E") Then
                tgClfCntr(ilLoop).bPkExpanded = False
            End If
            If tgClfCntr(ilLoop).ClfRec.iPkLineNo > 0 Then
                tgClfCntr(ilLoop).bShowLine = False
            End If
        End If
        'Verify book exist
        tlDnfSrchKey.iCode = tgClfCntr(ilLoop).ClfRec.iDnfCode
        ilRet = btrGetEqual(hlDnf, tlDnf, ilDnfRecLen, tlDnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        If ilRet <> BTRV_ERR_NONE Then
            tgClfCntr(ilLoop).ClfRec.iDnfCode = 0
        End If
    Next ilLoop
    ilRet = btrClose(hlDnf)
    btrDestroy hlDnf
    mSplitFlightsIntoWeeks -1
    ilSortReq = False
    mInitPackArrays ilSortReq
    If (ilSortReq = True) Or bgSortByLineNo Then
        mResortLines hmMnf
    End If
    mBuildVer0Lines hmCHF, hmClf, imStep1Index

    mSetLineScroll True, True
    
    mReadClfCffRec = True
    Exit Function
mReadClfCffRecErr: 'VBC NR
    On Error GoTo 0
    mReadClfCffRec = False
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mReadRec                        *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read a record                  *
'*                                                     *
'*******************************************************
Public Function mReadRec(ilSelectIndex As Integer) As Integer
'
'   iRet = mReadRec(ilSelectIndex)
'   Where:
'       ilSelectIndex (I) - list box index
'       iRet (O)- True if record read,
'                 False if not read
'
    Dim slNameCode As String  'Code and Code strings from Traffic!lbcLockBox or Traffic!lbcAgencyDP
    Dim slCode As String    'Code number- so record can be found
    Dim ilRet As Integer    'Return status
    'Dim tmSrchKey As INTKEY0    'Rcf key record image
    Dim slStamp As String
    Dim ilLoop As Integer
    Dim ilLockBias As Integer
    Dim ilMsgRet As Integer
    Dim slUserName As String

    lacCode.Caption = ""
    lmLastWkDateAdded = -1
    imLastLnDateAdded = -1

    imRecLocked = False
    slNameCode = tmStep3Code(ilSelectIndex).sKey   'lbcStep3Code.List(ilSelectIndex) 'lbcContract.List(ilSelectIndex - 1)
    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    On Error GoTo mReadRecErr
    gCPErrorMsg ilRet, "mReadRecErr (gParseItem field 2)", Contract
    On Error GoTo 0
    ilLockBias = BTRV_LOCK_NONE
    slCode = Trim$(slCode)
    tmChfSrchKey.lCode = CLng(slCode)
    ilRet = btrGetEqual(hmCHF, tgChfCntr, imCHFRecLen, tmChfSrchKey, INDEXKEY0, ilLockBias, SETFORREADONLY)
    If ilRet = BTRV_ERR_NONE Then
        lmLockRecCode = -1
        If (sgCntrScreen = "Orders") And ((imStep1Index = 2) Or (imStep1Index = 3)) Then
            lmLockRecCode = gCreateLockRec(hmRlf, "C", "C", tgChfCntr.lCntrNo, False, slUserName)
        End If
        If (sgCntrScreen <> "Orders") And ((imStep1Index = 2) Or (imStep1Index = 3) Or (imStep1Index = 4) Or (imStep1Index = 5)) Then
            lmLockRecCode = gCreateLockRec(hmRlf, "C", "C", tgChfCntr.lCntrNo, False, slUserName)
        End If
        'If ilRet = BTRV_ERR_REC_LOCKED Then
        If lmLockRecCode = 0 Then
            imRecLocked = True
            Beep
            Screen.MousePointer = vbDefault
            ilMsgRet = MsgBox("Contract currently being altered by " & slUserName & ", can't update", vbOKOnly + vbExclamation, "Message")
            Screen.MousePointer = vbHourglass
            ilRet = BTRV_ERR_NONE
            mSetBackgroundColor 10  'force to Yellow (view mode)
        End If
    End If
    On Error GoTo mReadRecErr
    gBtrvErrorMsg ilRet, "mReadRecErr (btrGetEqual: Contract)", Contract
    On Error GoTo 0
    ilRet = btrGetPosition(hmCHF, lmChfRecPos)
    lmCntrChfCode = tgChfCntr.lCode
    On Error GoTo mReadRecErr
    gBtrvErrorMsg ilRet, "mReadRecErr (btrGetPosition: Contract)", Contract
    On Error GoTo 0
    If imStep1Index = 1 Then    'Model new order
        tgChfCntr.lCxfCode = 0
        tgChfCntr.lCxfChgR = 0
        tgChfCntr.lCxfInt = 0
        tgChfCntr.lCxfMerch = 0
        tgChfCntr.iMerchPct = 0
        tgChfCntr.lCxfProm = 0
        tgChfCntr.iPromoPct = 0
        'tgChfCntr.lCxfCanc = 0 'Retain as of 2/19/98- Jim/Mary
        'Remove Short Title
        tgChfCntr.lSifCode = 0
        smOrigNTRDefined = ""
        '3/21/11: Jim: Set Product protection to default.
        '              Setting to zero will result in default being set later
        tgChfCntr.iMnfComp(0) = 0
        tgChfCntr.iMnfComp(1) = 0
    Else
        smOrigNTRDefined = tgChfCntr.sNTRDefined
        'Remove Change Reason and Internal comment
        If ((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6)) Then
        Else
            If (sgCntrScreen <> "Orders") And (imStep1Index = 4) And (tgChfCntr.sStatus <> "O") And (tgChfCntr.sStatus <> "H") Then
                'proposal ->Revise Order and it is Rev Working
            Else
                'Order or Proposal (but not Rev working)
                tgChfCntr.lCxfChgR = 0
                'Removed 5/18/01 by Jim for Primiere traffic
                'tgChfCntr.lCxfInt = 0
            End If
        End If
    End If
    'Comments
    For ilLoop = 0 To 5 Step 1
        smInitComment(ilLoop) = ""
        imCommShowOn(ilLoop, 0) = 1
        imCommShowOn(ilLoop, 1) = 1
        imCommShowOn(ilLoop, 2) = 1
        imCommShowOn(ilLoop, 3) = 1
        imCommShowOn(ilLoop, 4) = 1
        imInitCommShowOn(ilLoop, 0) = 1 'Proposal
        imInitCommShowOn(ilLoop, 1) = 1 'Order
        imInitCommShowOn(ilLoop, 2) = 1 'Spots
        imInitCommShowOn(ilLoop, 3) = 1 'Invoices
        imInitCommShowOn(ilLoop, 4) = 1 'Insertion
        Select Case ilLoop
            Case 0
                tmCxfSrchKey.lCode = tgChfCntr.lCxfMerch
            Case 1
                tmCxfSrchKey.lCode = tgChfCntr.lCxfProm
            Case 2
                tmCxfSrchKey.lCode = tgChfCntr.lCxfInt
            Case 3
                tmCxfSrchKey.lCode = tgChfCntr.lCxfCanc
            Case 4
                tmCxfSrchKey.lCode = tgChfCntr.lCxfChgR
            Case 5
                tmCxfSrchKey.lCode = tgChfCntr.lCxfCode
        End Select
        If tmCxfSrchKey.lCode <> 0 Then
            tmCxf.sComment = ""
            imCxfRecLen = Len(tmCxf) '5027
            ilRet = gCXFGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            On Error GoTo mReadRecErr
            gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual:Comment)", Contract
            On Error GoTo 0
            ilRet = btrGetPosition(hmCxf, lmCxfRecPos(ilLoop))
            On Error GoTo mReadRecErr
            gBtrvErrorMsg ilRet, "mReadRecErr (btrGetPosition: Comment)", Contract
            On Error GoTo 0
            'If tmCxf.iStrLen > 0 Then
                'smInitComment(ilLoop) = Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                smInitComment(ilLoop) = gStripChr0(tmCxf.sComment)
            'End If
            If tmCxf.sShProp = "Y" Then
                imCommShowOn(ilLoop, 0) = 0
            Else
                imCommShowOn(ilLoop, 0) = 1
            End If
            If tmCxf.sShOrder = "Y" Then
                imCommShowOn(ilLoop, 1) = 0
            Else
                imCommShowOn(ilLoop, 1) = 1
            End If
            If tmCxf.sShSpot = "Y" Then
                imCommShowOn(ilLoop, 2) = 0
            Else
                imCommShowOn(ilLoop, 2) = 1
            End If
            If tmCxf.sShInv = "Y" Then
                imCommShowOn(ilLoop, 3) = 0
            Else
                imCommShowOn(ilLoop, 3) = 1
            End If
            If tmCxf.sShInsertion = "Y" Then
                imCommShowOn(ilLoop, 4) = 0
            Else
                imCommShowOn(ilLoop, 4) = 1
            End If
            imInitCommShowOn(ilLoop, 0) = imCommShowOn(ilLoop, 0) 'Proposal
            imInitCommShowOn(ilLoop, 1) = imCommShowOn(ilLoop, 1) 'Order
            imInitCommShowOn(ilLoop, 2) = imCommShowOn(ilLoop, 2) 'Spots
            imInitCommShowOn(ilLoop, 3) = imCommShowOn(ilLoop, 3) 'Invoices
            imInitCommShowOn(ilLoop, 4) = imCommShowOn(ilLoop, 4) 'Insertion
        End If
    Next ilLoop
    tmAdfSrchKey.iCode = tgChfCntr.iAdfCode
    slStamp = gFileDateTime(sgDBPath & "Adf.btr") & Trim$(str$(tmAdfSrchKey.iCode))
    If smAdfStamp <> slStamp Then
        smAdfStamp = slStamp
        If tgChfCntr.iAdfCode <> 0 Then
            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            On Error GoTo mReadRecErr
            gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual:Advertiser)", Contract
            On Error GoTo 0
        Else
            tmAdf.iCode = 0
            tmAdf.sName = ""
            tmAdf.iAgfCode = 0
            tmAdf.iSlfCode = 0
            smAdfStamp = ""
        End If
    End If
    If tgChfCntr.iAdfCode > 0 Then
        ilRet = gBinarySearchAdf(tgChfCntr.iAdfCode)
        'If ilRet > 0 Then
        If ilRet <> -1 Then
            'Update
            If StrComp(Trim$(tgCommAdf(ilRet).sName), Trim$(tmAdf.sName), vbTextCompare) <> 0 Then
                tgCommAdf(ilRet).sName = tmAdf.sName
                tgCommAdf(ilRet).sAbbr = tmAdf.sAbbr
                tgCommAdf(ilRet).iMnfSort = tmAdf.iMnfSort
                tgCommAdf(ilRet).sAllowRepMG = tmAdf.sAllowRepMG
                tgCommAdf(ilRet).sBillAgyDir = tmAdf.sBillAgyDir
                tgCommAdf(ilRet).sBonusOnInv = tmAdf.sBonusOnInv
                tgCommAdf(ilRet).sCreditRestr = tmAdf.sCreditRestr
                tgCommAdf(ilRet).sRepInvGen = tmAdf.sRepInvGen
                tgCommAdf(ilRet).sPolitical = tmAdf.sPolitical      '5-26-06
                tgCommAdf(ilRet).sAddrID = tmAdf.sAddrID
                tgCommAdf(ilRet).iPnfBuyer = tmAdf.iPnfBuyer
                smCntAdvertiserTag = ""
                lbcAdvt.Clear
                mAdvtPop
            Else
                tgCommAdf(ilRet).sName = tmAdf.sName
                tgCommAdf(ilRet).sAbbr = tmAdf.sAbbr
                tgCommAdf(ilRet).iMnfSort = tmAdf.iMnfSort
                tgCommAdf(ilRet).sAllowRepMG = tmAdf.sAllowRepMG
                tgCommAdf(ilRet).sBillAgyDir = tmAdf.sBillAgyDir
                tgCommAdf(ilRet).sBonusOnInv = tmAdf.sBonusOnInv
                tgCommAdf(ilRet).sCreditRestr = tmAdf.sCreditRestr
                tgCommAdf(ilRet).sRepInvGen = tmAdf.sRepInvGen
                tgCommAdf(ilRet).sPolitical = tmAdf.sPolitical      '5-26-06
                tgCommAdf(ilRet).sAddrID = tmAdf.sAddrID
                tgCommAdf(ilRet).iPnfBuyer = tmAdf.iPnfBuyer
            End If
        End If
    End If
    tmAgfSrchKey.iCode = tgChfCntr.iAgfCode
    slStamp = gFileDateTime(sgDBPath & "Agf.btr") & Trim$(str$(tmAgfSrchKey.iCode))
    If smAgfStamp <> slStamp Then
        smAgfStamp = slStamp
        If tgChfCntr.iAgfCode <> 0 Then
            ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            On Error GoTo mReadRecErr
            gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual:Agency)", Contract
            On Error GoTo 0
        Else
            tmAgf.iCode = 0
            tmAgf.sName = ""
            tmAgf.iSlfCode = 0
            smAgfStamp = ""
        End If
    End If
    '10/27/14: set 1 or 2 place rating
    smCntr1or2PlaceRating = gSet1or2PlaceRating(tgChfCntr.iAgfCode)
    If tgChfCntr.iAgfCode > 0 Then
        ilRet = gBinarySearchAgf(tgChfCntr.iAgfCode)
        'If ilRet > 0 Then
        If ilRet <> -1 Then
            'Update
            If StrComp(Trim$(tgCommAgf(ilRet).sName), Trim$(tmAgf.sName), vbTextCompare) <> 0 Then
                tgCommAgf(ilRet).sName = tmAgf.sName
                tgCommAgf(ilRet).iMnfSort = tmAgf.iMnfSort
                tgCommAgf(ilRet).sCityID = tmAgf.sCityID
                tgCommAgf(ilRet).sCreditRestr = tmAgf.sCreditRestr
                tgCommAgf(ilRet).sState = tmAgf.sState
                tgCommAgf(ilRet).iPnfBuyer = tmAgf.iPnfBuyer
                smCntAgencyTag = ""
                lbcAgency.Clear
                mAgencyPop
            Else
                tgCommAgf(ilRet).sName = tmAgf.sName
                tgCommAgf(ilRet).iMnfSort = tmAgf.iMnfSort
                tgCommAgf(ilRet).sCityID = tmAgf.sCityID
                tgCommAgf(ilRet).sCreditRestr = tmAgf.sCreditRestr
                tgCommAgf(ilRet).sState = tmAgf.sState
                tgCommAgf(ilRet).iPnfBuyer = tmAgf.iPnfBuyer
            End If
        End If
    End If
    If tmAgf.iCode > 0 Then
        tmPnfSrchKey.iCode = tmAgf.iPnfBuyer
    Else
        tmPnfSrchKey.iCode = tmAdf.iPnfBuyer
    End If
    If tmPnfSrchKey.iCode > 0 Then
        ilRet = btrGetEqual(hmPnf, tmPnf, imPnfRecLen, tmPnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        On Error GoTo mReadRecErr
        gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual:Personnel)", Contract
        On Error GoTo 0
    Else
        tmPnf.iCode = 0
        tmPnf.sName = ""
    End If
    smOrigStatus = tgChfCntr.sStatus    'Save for erase test and mSaveRec
    smOrigStatusSaved = smOrigStatus
    smOrigSchdStatusSaved = tgChfCntr.sSchStatus
    smOrigType = tgChfCntr.sType
    If (smOrigType = "T") And (tgSpf.sSchdRemnant = "Y") Then
        smOrigType = "C"
    End If
    If (smOrigType = "M") And (tgSpf.sSchdPromo = "Y") Then
        smOrigType = "C"
    End If
    If (smOrigType = "S") And (tgSpf.sSchdPSA = "Y") Then
        smOrigType = "C"
    End If
    mSetDefaults
    imOVDGenerated = False
    mReadRec = True
    mStatusPop tgChfCntr.sStatus, tgChfCntr.iCntRevNo, imStep1Map()
    If (sgCntrScreen <> "Orders") And (imStep1Index = 3) Then
        tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
        tmChfSrchKey1.iCntRevNo = 32000
        tmChfSrchKey1.iPropVer = 32000
        ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
        If (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tgChfCntr.lCntrNo) Then
            tgChfCntr.iPropVer = tmChf.iPropVer + 1
        Else
            tgChfCntr.iPropVer = tgChfCntr.iPropVer + 1
        End If
    End If
    lgSchChfCode = 0
    tmChf = tgChfCntr
    If tmChf.sSchStatus <> "F" Then
        tmChfSrchKey1.lCntrNo = tmChf.lCntrNo
        tmChfSrchKey1.iCntRevNo = tmChf.iCntRevNo - 1
        tmChfSrchKey1.iPropVer = 32000
        ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tgChfCntr.lCntrNo) And (tmChf.sSchStatus <> "F")
            ilRet = btrGetNext(hmCHF, tmChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        If (ilRet <> BTRV_ERR_NONE) Or (tmChf.lCntrNo <> tgChfCntr.lCntrNo) Then
            tmChf.lCode = 0
            '6/8/14
            If (tgChfCntr.sStatus <> "G") And (tgChfCntr.sStatus <> "H") And (tgChfCntr.sStatus <> "N") And (tgChfCntr.sStatus <> "O") Then
                smOrigTotalDollars = "0.00"
            Else
                smOrigTotalDollars = gLongToStrDec(tgChfCntr.lInputGross, 2)
            End If
        Else
            '6/8/14
            smOrigTotalDollars = gLongToStrDec(tmChf.lInputGross, 2)
            smOrigStatusSaved = tmChf.sStatus
            smOrigSchdStatusSaved = tmChf.sSchStatus
        End If
    Else
        '6/8/14
        smOrigTotalDollars = gLongToStrDec(tgChfCntr.lInputGross, 2)
    End If
    If (sgCntrScreen = "Orders") And ((imStep1Index = 2) Or (imStep1Index = 3)) Then
        lgSchChfCode = tmChf.lCode
    End If
    If (sgCntrScreen <> "Orders") And ((imStep1Index = 4) Or (imStep1Index = 5)) Then
        lgSchChfCode = tmChf.lCode
    End If
    If imExtraRcfAdded Then
        smCntRateCardTag = ""  'Force rate card read incase a extra Rate Card added because of a previous order
    End If
    mRateCardPop
    '10910
    mGetContractDocuments tgChfCntr.lCntrNo
    ReDim tgIBSbf(0 To 0) As SBFLIST
    tgIBSbf(0).iStatus = -1 'Not Used
    tgIBSbf(0).lRecPos = 0
    ReDim tgClfCntr(0 To 0) As CLFLIST
    ReDim tgDelClf(0 To 0) As CLFLIST
    tgClfCntr(0).iStatus = -1 'Not Used
    tgClfCntr(0).lRecPos = 0
    tgClfCntr(0).iFirstCff = -1
    tgClfCntr(0).iFirstCgf = -1
    tgClfCntr(0).lFirstAvail = -1
    ReDim tgCffCntr(0 To 0) As CFFLIST
    tgCffCntr(0).iStatus = -1 'Not Used
    tgCffCntr(0).lRecPos = 0
    tgCffCntr(0).iNextCff = -1
    ReDim tgCgfCntr(0 To 0) As CGFLIST
    tgCgfCntr(0).iStatus = -1 'Not Used
    tgCgfCntr(0).iNextCgf = -1
    ReDim tgMsfCntr(0 To 0) As MSFLIST
    tgMsfCntr(0).iStatus = -1 'Not Used
    tgMsfCntr(0).iFirstMgf = -1
    tgMsfCntr(0).iCxfIndex = -1
    ReDim tgMgfCntr(0 To 0) As MGFLIST
    tgMgfCntr(0).iStatus = -1 'Not Used
    ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
    tgLnAvailInfo(0).lNextIndex = -1
    ReDim sgMsfCntrCxf(0 To 0) As String
    imLastCffUsed = 0
    lbcPrg(igTabMapIndex).Tag = ""
    lbcPrg(1).Tag = ""
    lbcPrg(2).Tag = ""
    ReDim lgDeletedPcfCode(0 To 0) As Long
    imLnChg = False
    imGameInvChg = False
    imNTRChg = False
    imCPMChg = False
    '10910
    bgContractAttachments_Changed = False
    imComputeReq = False
    imAllAnsw = False
    imSPersonFirstTime = True   'First time at field-set default if required
    imProdFirstTime = True   'First time at field-set default if required
    imAgyFirstTime = True   'First time at field-set default if required
    imComp0FirstTime = True   'First time at field-set default if required
    imComp1FirstTime = True   'First time at field-set default if required
    imExcl0FirstTime = True   'First time at field-set default if required
    imExcl1FirstTime = True   'First time at field-set default if required
    imBusFirstTime = True
    imGuarFirstTime = True
    imBuyerFirstTime = True   'First time at field-set default if required
    imPhoneFirstTime = True   'First time at field-set default if required
    imDemoFirstTime = True   'First time at field-set default if required
    If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName) Then
        If tgChfCntr.lCode > 0 Then
            lacCode.Caption = str(tgChfCntr.lCode)
        End If
    End If
    Exit Function
mReadRecErr:
    On Error GoTo 0
    mReadRec = False
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mResetDeaults                   *
'*                                                     *
'*             Created:8/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set contract defaults from     *
'*                      advertiser and/or agency       *
'*                                                     *
'*******************************************************
Private Sub mResetDefaults(ilForAdvt As Integer)
'
'   mResetDeaults ilAdvt
'   Where:
'       ilAdvt (I)- True=Change advertiser fields
'                   False=Change agency fields
'

    Dim slNameCode As String  'Code and Code strings from Traffic!lbcLockBox or Traffic!lbcAgencyDP
    Dim slCode As String    'Code number- so record can be found
    Dim ilRet As Integer    'Return status
    Dim ilLoop As Integer
    Dim slRecCode As String
    'Dim ilFound As Integer
    Dim slPhone As String
    Dim slAdfTarg As String
    Dim ilFieldChgd As Integer
    Dim ilUpdateField As Integer
    Dim ilIndex As Integer
    Dim slStr As String

    imChgMode = True
    ilFieldChgd = False
    'Product
    If (imDefSource(1) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If tmAdf.iCode <= 0 Then
            smDefSave(1) = ""
            ilUpdateField = True
        Else
            If StrComp(Trim$(smDefSave(1)), Trim$(tmAdf.sProduct), 1) <> 0 Then
                ilUpdateField = True
                smDefSave(1) = Trim$(tmAdf.sProduct)
            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(1) = 0  'Advertiser
            imProdFirstTime = True
            smProduct = ""
            tmHdCtrls(PRODUCTINDEX).iChg = True
            mSetShow PRODUCTINDEX
        End If
    End If
    'Agency
    If (imDefSource(2) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If tmAdf.iCode <= 0 Then
            smDefSave(2) = ""
            ilUpdateField = True
        Else
            If Val(smDefSave(2)) <> tmAdf.iAgfCode Then
                ilUpdateField = True
                If (Trim$(tmAdf.sBillAgyDir) = "D") And (tmAdf.iAgfCode = 0) Then
                    smDefSave(2) = "0"
                Else
                    smDefSave(2) = Trim$(str$(tmAdf.iAgfCode))
                End If
            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(2) = 0  'Advertiser
            imAgyFirstTime = True
            lbcAgency.ListIndex = -1
            tmHdCtrls(AGENCYINDEX).iChg = True
            mSetShow AGENCYINDEX
        End If
    End If
    'Competitive
    For ilLoop = 0 To 1 Step 1
        ilUpdateField = False
        If (imDefSource(4 + ilLoop) <= 0) And (ilForAdvt) Then
            If tmAdf.iCode <= 0 Then
                smDefSave(4 + ilLoop) = ""
                ilUpdateField = True
            Else
                If Val(smDefSave(4 + ilLoop)) <> tmAdf.iMnfComp(ilLoop) Then
                    smDefSave(4 + ilLoop) = Trim$(str$(tmAdf.iMnfComp(ilLoop)))
                    ilUpdateField = True
                End If
            End If
            If ilUpdateField Then
                ilFieldChgd = True
                imDefSource(4 + ilLoop) = 0 'Advt
                imComp0FirstTime = True
                imComp1FirstTime = True
                lbcComp(ilLoop).ListIndex = -1
                tmHdCtrls(COMPINDEX).iChg = True
                mSetShow COMPINDEX
            End If
        End If
    Next ilLoop
    'Program exclusion
    For ilLoop = 0 To 1 Step 1
        ilUpdateField = False
        If (imDefSource(17 + ilLoop) <= 0) And (ilForAdvt) Then
            If tmAdf.iCode <= 0 Then
                smDefSave(17 + ilLoop) = ""
                ilUpdateField = True
            Else
                If Val(smDefSave(17 + ilLoop)) <> tmAdf.iMnfExcl(ilLoop) Then
                    smDefSave(17 + ilLoop) = Trim$(str$(tmAdf.iMnfExcl(ilLoop)))
                    ilUpdateField = True
                End If
            End If
            If ilUpdateField Then
                ilFieldChgd = True
                imDefSource(17 + ilLoop) = 0 'Advt
                imExcl0FirstTime = True
                imExcl1FirstTime = True
                lbcExcl(ilLoop).ListIndex = -1
                tmHdCtrls(COMPINDEX).iChg = True
                mSetShow COMPINDEX
            End If
        End If
    Next ilLoop
    'Business Category
    If (imDefSource(19) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If tmAdf.iCode <= 0 Then
            smDefSave(19) = ""
            ilUpdateField = True
        Else
            If Val(smDefSave(19)) <> tmAdf.iMnfBus Then
                smDefSave(19) = Trim$(str$(tmAdf.iMnfBus))
                ilUpdateField = True
            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(19) = 0 'Advt
            imBusFirstTime = True
            lbcBusCat.ListIndex = -1
            tmHdCtrls(COMPINDEX).iChg = True
            mSetShow COMPINDEX
        End If
    End If
    'Delivery Guarantee
    If (imDefSource(20) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If tmAdf.iCode <= 0 Then
            smDefSave(20) = ""
            ilUpdateField = True
        Else
            If (Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) = GUARBYGRIMP Then  'Using Delivery Guarantee
                If Val(smDefSave(20)) <> tmAdf.lGuar Then
                    smDefSave(20) = Trim$(str$(tmAdf.lGuar))
                    ilUpdateField = True
                End If

            Else
                If (tmAdf.lGuar >= 0) And (tmAdf.lGuar <= 100) Then
                    If Val(smDefSave(20)) <> tmAdf.lGuar Then
                        smDefSave(20) = Trim$(str$(tmAdf.lGuar))
                        ilUpdateField = True
                    End If
                Else
                    smDefSave(20) = ""
                    ilUpdateField = True
                End If

            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(20) = 0 'Advt
            imGuarFirstTime = True
            tmHdCtrls(GUARINDEX).iChg = True
            slStr = edcHdDropDown.Text
            edcHdDropDown.Text = smDefSave(20)
            mSetShow GUARINDEX
            edcHdDropDown.Text = slStr
        End If
    End If

    'Buyer and Phone number
    If (imDefSource(6) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If tmAdf.iCode <= 0 Then
        '    smDefSave(6) = ""
        '    ilUpdateField = True
        ElseIf (tmAdf.iCode > 0) And (tmAdf.sBillAgyDir = "D") And (tmPnf.iCode > 0) Then
            If StrComp(Trim$(smDefSave(6)), Trim$(tmPnf.sName), 1) <> 0 Then
                smDefSave(6) = Trim$(tmPnf.sName)
                ilUpdateField = True
            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(6) = 0  'Advt
            imBuyerFirstTime = True
            lbcBuyer.ListIndex = -1
            tmHdCtrls(BUYERINDEX).iChg = True
            mSetShow BUYERINDEX
        End If
    End If
    If (imDefSource(7) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If (tmAdf.iCode <= 0) Then
        '    smDefSave(7) = ""
        '    ilUpdateField = True
        ElseIf (tmAdf.iCode > 0) And (tmAdf.sBillAgyDir = "D") And (tmPnf.iCode > 0) Then
            slPhone = mkcPhone.Text
            gSetPhoneNo tmPnf.sPhone, mkcPhone
            If StrComp(Trim$(smDefSave(7)), Trim$(mkcPhone.Text), 1) <> 0 Then
                smDefSave(7) = Trim$(mkcPhone.Text)
                ilUpdateField = True
            End If
            mkcPhone.Text = slPhone
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(7) = 0  'Advt
            imPhoneFirstTime = True
            mkcPhone.Text = smPhoneImage
            tmHdCtrls(PHONEINDEX).iChg = True
            mSetShow PHONEINDEX
        End If
    End If
    If ((imDefSource(6) < 0) Or (imDefSource(6) = 1)) And (Not ilForAdvt) Then
        ilUpdateField = False
        If tmAgf.iCode <= 0 Then
            smDefSave(6) = ""
            ilUpdateField = True
        ElseIf tmPnf.iCode > 0 Then
            If StrComp(Trim$(smDefSave(6)), Trim$(tmPnf.sName), 1) <> 0 Then
                smDefSave(6) = Trim$(tmPnf.sName)
                ilUpdateField = True
            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(6) = 1  'Advt
            imBuyerFirstTime = True
            lbcBuyer.ListIndex = -1
            tmHdCtrls(BUYERINDEX).iChg = True
            mSetShow BUYERINDEX
        End If
    End If
    If ((imDefSource(7) < 0) Or (imDefSource(7) = 1)) And (Not ilForAdvt) Then
        ilUpdateField = False
        If tmAgf.iCode <= 0 Then
            smDefSave(7) = ""
            ilUpdateField = True
        ElseIf tmPnf.iCode > 0 Then
            slPhone = mkcPhone.Text
            gSetPhoneNo tmPnf.sPhone, mkcPhone
            If StrComp(Trim$(smDefSave(7)), Trim$(mkcPhone.Text), 1) <> 0 Then
                smDefSave(7) = Trim$(mkcPhone.Text)
                ilUpdateField = True
            End If
            mkcPhone.Text = slPhone
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(7) = 0  'Advt
            imPhoneFirstTime = True
            mkcPhone.Text = smPhoneImage
            tmHdCtrls(PHONEINDEX).iChg = True
            mSetShow PHONEINDEX
        End If
    End If
    'Demo
    If (imDefSource(8) <= 0) And (ilForAdvt) Then
        ilUpdateField = False
        If tmAdf.iCode <= 0 Then
            smDefSave(8) = ""
            ilUpdateField = True
        Else
            If StrComp(smDefSave(8), tmAdf.sCppCpm, 1) <> 0 Then
                smDefSave(8) = tmAdf.sCppCpm
                ilUpdateField = True
            End If
        End If
        If ilUpdateField Then
            ilFieldChgd = True
            imDefSource(8) = 0
            imDemoFirstTime = True
            imCppCpm = -1
            tmHdCtrls(DEMOINDEX).iChg = True
            For ilLoop = 0 To 3 Step 1
                If tmAdf.iCode <= 0 Then
                    smDefSave(9 + 2 * ilLoop) = ""
                    smDefSave(10 + 2 * ilLoop) = ""
                Else
                    'smDefSave(9 + 2 * ilLoop) = Trim$(tmAdf.sDemo(ilLoop))
                    smDefSave(9 + 2 * ilLoop) = ""  'Trim$(tmAdf.sDemo(ilLoop))
                    slRecCode = Trim$(str$(tmAdf.iMnfDemo(ilLoop)))
                    For ilIndex = 0 To UBound(tgDemoCode) - 1 Step 1 'Traffic!lbcDemoCode.ListCount - 1 Step 1
                        slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        If slRecCode = slCode Then
                            smDefSave(9 + 2 * ilLoop) = lbcDemo(ilLoop).List(ilIndex + 1)
                            Exit For
                        End If
                    Next ilIndex
                    'gPDNToStr tmAdf.sTarget(ilLoop), 2, slAdfTarg
                    slAdfTarg = gLongToStrDec(tmAdf.lTarget(ilLoop), 2)
                    If tmAdf.sCppCpm = "P" Then
                        slAdfTarg = Left$(slAdfTarg, Len(slAdfTarg) - 3) 'Remove decimal point
                    End If
                    smDefSave(10 + 2 * ilLoop) = Trim$(str$(Val(slAdfTarg)))
                End If
                imDefSource(9 + 2 * ilLoop) = 0
                imDefSource(10 + 2 * ilLoop) = 0
            Next ilLoop
            mSetShow DEMOINDEX
        End If
    End If
    If ilFieldChgd Then
        pbcHeader.Cls
        pbcHeader_Paint
    End If
    imChgMode = False
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mResetDemoBar                   *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Reset the demo values and paint*
'*                                                     *
'*******************************************************
Public Sub mResetDemoBar(ilBypassLnTotal As Integer)
    Dim slPrice As String
    'Moved on 10/17/03, becuase research not recomputed if # spots (or price) changed and user mouse clicked to another line without tabbing
    'Set to True only in pbcLine_MouseUp when mouse clicked to another line
    'mResetDemoBar called from pbcLine_DragDrop, imcTrash_Click, mDBSetShow and mLnSetShow
    'mLnSetShow only calls here if spot count changed or price changed or week added
    If imLnRowNo > 0 Then
        tgClfCntr(imLnRowNo - 1).iResearch = False
    End If
    If imBypassResetDemoBar Then
        Exit Sub
    End If
        If (imLnRowNo > 0) And (Not ilBypassLnTotal) Then
            mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()            'Set associated package lines values
            mGetLnPriceInfo imLnRowNo, slPrice, imLnTotalType, PRICEINDEX       'Formats Price within Show
        End If
        If plcDemoBar.Visible Then
            If imDBTotals < 5 Then
                If imLnRowNo > 0 Then
                    mBuildWkInfo True, True, False
                    mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
                End If
                pbcDemoBar(0).Cls
                pbcDemoBar(1).Cls
                pbcDemoBar_Paint 0
                pbcDemoBar_Paint 1
            Else
                pbcDemoBar(1).Cls
                pbcDemoBar(2).Cls
                pbcDemoBar(3).Cls
                mSummary
                pbcDemoBar_Paint 1
                If imDBTotals = 5 Then
                    pbcDemoBar_Paint 2
                Else
                    pbcDemoBar_Paint 3
                End If
            End If
        End If
    Screen.MousePointer = vbDefault
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mResvPop                        *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection combo   *
'*                      box                            *
'*                                                     *
'*******************************************************
Public Sub mResvPop()
'
'   mResvPop
'   Where:
'
    Dim ilRet As Integer 'btrieve status
    'Dim ilFilter As Integer
    Dim slNameCode As String  'Name and code
    Dim slCode As String    'Code number
    'Dim ilCurrent As Integer
    Dim ilState As Integer
    Dim ilAdfCode As Integer

    imPopReqd = False
    Screen.MousePointer = vbHourglass  'Wait
    If (tgUrf(0).sRefResvType <> "I") Or (lbcResvAdvt.ListIndex < 1) Then
        lbcResv.Clear
        'Traffic!lbcResvCode.Clear
        ReDim tgResvCode(0 To 0) As SORTCODE
        sgResvCodeTag = ""
        lbcResv.AddItem "[None]", 0
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    ilState = 1
    'ilRet = gPopCntrForAASBox(Contract, -1, -1, "HO", "V", 0, ilState, 1, lbcResv, Traffic!lbcResvCode)
    slNameCode = tmCntAdvertiser(lbcResvAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    ilAdfCode = Val(Trim$(slCode))
    ilRet = gPopCntrForAASBoxByMkt(Contract, 0, ilAdfCode, "HO", "V", 0, ilState, 1, igCntrMktCode(), lbcResv, tgResvCode(), sgResvCodeTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mResvPopErr
        gCPErrorMsg ilRet, "mResvPop (gPopCntrForAASBoxByMkt)", Contract
        On Error GoTo 0
        lbcResv.AddItem "[None]", 0  'Force as first item on list
        imPopReqd = True
    End If
    Screen.MousePointer = vbDefault
    Exit Sub
mResvPopErr:
    On Error GoTo 0
    imTerminate = True
    Screen.MousePointer = vbDefault
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRSEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Public Sub mRSEnableBox(ilBoxNo As Integer)
'
'   mRSEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilFound As Integer
    Dim ilIndex As Integer
    Dim ilLbcIndex As Integer
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmRSCtrls)) Then
        Exit Sub
    End If
    '2/13/09:  Allow revenue sets to be set
    'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
    If (Not imUpdateAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case RSREV1INDEX, RSREV2INDEX, RSREV3INDEX, RSREV4INDEX, RSREV5INDEX
            mRevSetPop 1
            If imTerminate Then
                Exit Sub
            End If
            ilLbcIndex = ilBoxNo - 1
            lbcRevSet(ilLbcIndex).height = gListBoxHeight(lbcRevSet(ilLbcIndex).ListCount, 6)
            edcShareDropDown.Width = tmRSCtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcRevenue, edcShareDropDown, tmRSCtrls(ilBoxNo).fBoxX, tmRSCtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcRevSet(ilLbcIndex).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            ilFound = False
            imChgMode = True
            ilIndex = ilBoxNo \ 2
            If lbcRevSet(ilLbcIndex).ListIndex < 0 Then
                lbcRevSet(ilLbcIndex).ListIndex = 1
            End If
            If lbcRevSet(ilLbcIndex).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcRevSet(ilLbcIndex).List(lbcRevSet(ilLbcIndex).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
    End Select
    mRSSetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRSSetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Public Sub mRSSetChg(ilBoxNo As Integer)
'
'   mSPSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilIndex As Integer
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmRSCtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case RSREV1INDEX, RSREV2INDEX, RSREV3INDEX, RSREV4INDEX, RSREV5INDEX
            ilIndex = ilBoxNo
            slStr = smRevSet(ilIndex - 1)
            gSetChgFlag slStr, lbcRevSet(ilIndex - 1), tmRSCtrls(ilBoxNo)
    End Select
    tmHdCtrls(REVSETINDEX).iChg = False
    For ilLoop = imLBCTCtrls To UBound(tmRSCtrls) Step 1
        If tmRSCtrls(ilLoop).iChg Then
            tmHdCtrls(REVSETINDEX).iChg = True
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRSEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Public Sub mRSSetFocus(ilBoxNo As Integer)
'
'   mRSEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    'Dim ilLoop As Integer   'For loop control parameter
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmRSCtrls)) Then
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case RSREV1INDEX, RSREV2INDEX, RSREV3INDEX, RSREV4INDEX, RSREV5INDEX
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRSSetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mRSSetShow(ilBoxNo As Integer)
'
'   mRSSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilIndex As Integer
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmRSCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case RSREV1INDEX, RSREV2INDEX, RSREV3INDEX, RSREV4INDEX, RSREV5INDEX
            ilIndex = ilBoxNo - 1
            lbcRevSet(ilIndex).Visible = False
            edcShareDropDown.Visible = False
            cmcShareDropDown.Visible = False
            If (lbcRevSet(ilIndex).ListIndex > 1) Or ((lbcRevSet(ilIndex).ListIndex = 1) And (smRevSetName(ilIndex) <> "")) Then
                slStr = lbcRevSet(ilIndex).Text
            Else
                slStr = ""
            End If
            gSetShow pbcRevenue, slStr, tmRSCtrls(ilBoxNo)
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mRSTestFields                   *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test fields for mandatory and   *
'*                     blanks                          *
'*                                                     *
'*******************************************************
Private Function mRSTestFields(ilCtrlNo As Integer, ilState As Integer) As Integer
'
'   iState = ALLBLANK+NOMSG   'Blank
'   iTest = TESTALLCTRLS
'   iRet = mRSTestFields(iTest, iState)
'   Where:
'       iTest (I)- Test all controls or control number specified
'       iState (I)- Test one of the following:
'                  ALLBLANK=All fields blank
'                  ALLMANBLANK=All mandatory
'                    field blank
'                  ALLMANDEFINED=All mandatory
'                    fields have data
'                  Plus
'                  NOMSG=No error message shown
'                  SHOWMSG=show error message
'       iRet (O)- True if all mandatory fields blank, False if not all blank
'
'
    Dim slStr As String
    Dim ilReq As Integer

    If (ilCtrlNo = RSREV1INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(0).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV1INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(0).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Set must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imRSBoxNo = RSREV1INDEX
            End If
            mRSTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = RSREV2INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        'If gFieldDefinedCtrl(lbcRevSet(1), "", "Revenue Set must be specified", tmRSCtrls(RSREV2INDEX).iReq, ilState) = NO Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(1).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV2INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(1).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Set must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imRSBoxNo = RSREV2INDEX
            End If
            mRSTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = RSREV3INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        'If gFieldDefinedCtrl(lbcRevSet(2), "", "Revenue Set must be specified", tmRSCtrls(RSREV3INDEX).iReq, ilState) = NO Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(2).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV3INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(2).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Set must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imRSBoxNo = RSREV3INDEX
            End If
            mRSTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = RSREV4INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        'If gFieldDefinedCtrl(lbcRevSet(3), "", "Revenue Set must be specified", tmRSCtrls(RSREV4INDEX).iReq, ilState) = NO Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(3).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV4INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(3).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Set must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imRSBoxNo = RSREV4INDEX
            End If
            mRSTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = RSREV5INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        'If gFieldDefinedCtrl(lbcRevSet(4), "", "Revenue Set must be specified", tmRSCtrls(RSREV5INDEX).iReq, ilState) = NO Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(4).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV5INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(4).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Set must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imRSBoxNo = RSREV5INDEX
            End If
            mRSTestFields = NO
            Exit Function
        End If
    End If
    mRSTestFields = YES
End Function

'***********************************************************
'*                                                         *
'*      Procedure Name:mSaveRec                            *
'*                                                         *
'*             Created:7/20/93       By:D. LeVine          *
'*            Modified:              By:                   *
'*                                                         *
'*            Comments:Update or added record              *
'*                                                         *
'***********************************************************
Private Function mSaveRec() As Integer
    Dim ilTabMapIndex As Integer
    Dim ilActiveTabIndex As Integer
    '9/15/20: Disallow all mouse clicks and key presses until save completed. TTP 9961
    ilTabMapIndex = igTabMapIndex
    igTabMapIndex = 0
    Contract.Enabled = False
    ilActiveTabIndex = tscLine.SelectedItem.Index
    mSaveRec = mSaveRecFunction(STATUSINDEX, CNTRNOINDEX, NOPROPINDEX, GROSSINDEX, PRICEINDEX, PTAGYCOMMINDEX) 'L.Bianchi 06/24/2021 v81 - TTP 10185
    imInSave = True
    If Contract.tscLine.SelectedItem.Index <> ilActiveTabIndex Then
        Set tscLine.SelectedItem = tscLine.Tabs.item(ilActiveTabIndex)
    End If
    imInSave = False
    Contract.Enabled = True
    igTabMapIndex = ilTabMapIndex
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mSaveRecChg                     *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if record altered and*
'*                      requires updating              *
'*                                                     *
'*******************************************************
Private Function mSaveRecChg(ilAsk As Integer) As Integer
'
'   iAsk = True
'   iRet = mSaveRecChg(iAsk)
'   Where:
'       iAsk (I)- True = Ask if changed records should be updated;
'                 False= Update record if required without asking user
'       iRet (O)- True if updated or added, False if not updated or added
'
    Dim ilRes As Integer
    Dim slMess As String
    Dim ilAltered As Integer
    Dim ilTest As Integer
    Dim slStr As String
    Dim ilIndex As Integer
    Dim llRow As Long
    ilAltered = gAnyFieldChgd(tmHdCtrls(), TESTALLCTRLS)
    'Force as if altered if Planner so "Comlete" can be sent back without requiring changes
    If (tgUrf(0).iRemoteUserID <= 0) And (tgUrf(0).iSlfCode <= 0) And (sgCntrScreen <> "Orders") And (imStep1Index = 2) And (tgSpf.sGUsePropSys = "Y") And (smOrigStatus = "C") And ((tgUrf(0).sWorkToHold = "Y") Or (tgUrf(0).sWorkToOrder = "Y") Or (tgUrf(0).sCompToHold = "Y") Or (tgUrf(0).sCompToOrder = "Y") Or (tgUrf(0).sIncompToHold = "Y") Or (tgUrf(0).sIncompToOrder = "Y")) Then
        ilAltered = YES
    End If
       
    ilIndex = lbcType.ListIndex
    If ilIndex < 0 Then
        'slStr = lbcType.List(0) 'Standard
        slStr = ""  'Don't set as undo will not come on
    Else
        slStr = lbcType.List(ilIndex)
    End If
    '9/13/21: Luigi - Mix Air Time...
    'If contract contains Ad Server rows, only standard contracts are allowed.
    If (slStr <> "Standard") And (slStr <> "") Then 'if not standard
        'If ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
            'Check if airtime spots purchased
            For llRow = grdCPMBuy.FixedRows To grdCPMBuy.rows - 1 Step 1
                If (grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
                    '10527
'                    MsgBox "Ad Server Lines only allowed with standard contracts. Contract not Saved", vbOKOnly + vbExclamation, "Information"
                    MsgBox "Digital Lines only allowed with standard contracts. Contract not Saved", vbOKOnly + vbExclamation, "Information"
                    imInTseLine = False
                    Screen.MousePointer = vbDefault    'Default
                    pbcClickFocus.SetFocus
                    mSaveRecChg = False
                    Exit Function
                End If
            Next llRow
        'End If
    End If
        
    If gCompNumberStr(gAddStr(Replace(smTotalDollars, ",", ""), Replace(smIBCTotal, ",", "")), "21000000.00") > 0 Then
        MsgBox "Contract total price exceeded 21,000,000, Contract not Saved.", vbOKOnly + vbExclamation, "Warning"
        mSaveRecChg = False
        Exit Function
    End If
    
    ilTest = mTestFields(TESTALLCTRLS, ALLMANBLANK + NOMSG)
    If (ilTest = NO) Or imLnChg Then
        '10910 added
        If (ilAltered = YES) Or imLnChg Or imNTRChg Or imCPMChg Or imGameInvChg Or bgContractAttachments_Changed Then
            If ilAsk Then
                If imStep1Index > 1 Then
                    slMess = "Save Changes to " & lbcStep(2).List(imStep3Index)
                Else
                    slMess = "Add " & edcCntrNo.Text
                End If
                ilRes = MsgBox(slMess, vbYesNoCancel + vbQuestion, "Update")
                If ilRes = vbCancel Then
                    mSaveRecChg = False
                    pbcHeader_Paint
                    Exit Function
                End If
                If ilRes = vbYes Then
                    '8723 not using a filemaker order--if it is, we don't want to stop here.
                   'If ((cmcSaveStay.Enabled = False) Or (cmcUpdate.Enabled = False)) Then
                    If ogContractCreator.ContractToProcess = NoProcess And ((cmcSaveStay.Enabled = False) Or (cmcUpdate.Enabled = False)) Then
                        MsgBox "Unable to save at this time as not all required fields have been specified in the Header part of the Proposal/Order"
                        mSaveRecChg = False
                        pbcHeader_Paint
                        Exit Function
                    End If
                    ilRes = mSaveRec()
                    mSaveRecChg = ilRes
                    '8723
                    If ogContractCreator.ContractToProcess = Order Then
                        If ilRes <> 0 Then
                            ogContractCreator.ProcessResult = Success
                        End If
                    End If
                    Exit Function
                End If
                If ilRes = vbNo Then
                    imUndoSelection = 0
                    cmcUndo_Click
                    If imUndoSelection = vbNo Then
                        imUndoSelection = -1
                        mSaveRecChg = False
                        pbcHeader_Paint
                        Exit Function
                    End If
                    imUndoSelection = -1
                End If
            Else
                ilRes = mSaveRec()
                mSaveRecChg = ilRes
                '8723
                If ogContractCreator.ContractToProcess = Order Then
                    If ilRes <> 0 Then
                        ogContractCreator.ProcessResult = Success
                    End If
                End If
                Exit Function
            End If
        End If
    End If
    
    mSaveRecChg = True
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mSBEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Public Sub mSBEnableBox(ilBoxNo As Integer)
'
'   mSBEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    'Dim slRecCode As String
    'Dim slNameCode As String
    Dim ilFound As Integer
    'Dim ilRet As Integer
    'Dim slCode As String
    Dim ilIndex As Integer
    Dim ilLbcIndex As Integer
    Dim slShare As String
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmSBCtrls)) Then
        Exit Sub
    End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case SBYCOMPANYINDEX, SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
            mShareBudgetPop
            If imTerminate Then
                Exit Sub
            End If
            If ilBoxNo = SBYCOMPANYINDEX Then
                ilLbcIndex = 0
            Else
                ilLbcIndex = 1
            End If
            lbcShareBudget(ilLbcIndex).height = gListBoxHeight(lbcShareBudget(ilLbcIndex).ListCount, 6)
            edcShareDropDown.Width = tmSBCtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 20
            gMoveFormCtrl pbcShareBudget, edcShareDropDown, tmSBCtrls(ilBoxNo).fBoxX, tmSBCtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcShareBudget(ilLbcIndex).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            ilFound = False
            imChgMode = True
            ilIndex = ilBoxNo \ 2
            If imShareBudgetIndex(ilIndex) < 0 Then
                If lbcShareBudget(ilLbcIndex).ListCount >= 3 Then
                    If ilLbcIndex = 0 Then
                        lbcShareBudget(ilLbcIndex).ListIndex = 2
                    Else
                        lbcShareBudget(ilLbcIndex).ListIndex = 1
                    End If
                Else
                    lbcShareBudget(ilLbcIndex).ListIndex = 1
                End If
            Else
                lbcShareBudget(ilLbcIndex).ListIndex = imShareBudgetIndex(ilIndex)
            End If
            If lbcShareBudget(ilLbcIndex).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcShareBudget(ilLbcIndex).List(lbcShareBudget(ilLbcIndex).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            edcShareDropDown.Width = tmSBCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 3
            gMoveFormCtrl pbcShareBudget, edcShareDropDown, tmSBCtrls(ilBoxNo).fBoxX, tmSBCtrls(ilBoxNo).fBoxY
            ilIndex = (ilBoxNo - 1) \ 2
            If smShareBudgetPct(ilIndex) = "" Then
                If ilBoxNo = SBYPCTINDEX Then
                    edcShareDropDown.Text = "0"
                Else
                    slShare = "100"
                    For ilLoop = 0 To 6 Step 1
                        slShare = gSubStr(slShare, smShareBudgetPct(ilLoop))
                    Next ilLoop
                End If
                If gCompNumberStr(slShare, ".0") < 0 Then
                    edcShareDropDown.Text = "0"
                Else
                    edcShareDropDown.Text = slShare
                End If
            Else
                edcShareDropDown.Text = smShareBudgetPct(ilIndex)
            End If
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
    End Select
    mSBSetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
    Exit Sub

    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSBSetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Public Sub mSBSetChg(ilBoxNo As Integer)
'
'   mSBSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilIndex As Integer
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmSBCtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case SBYCOMPANYINDEX, SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
            ilIndex = ilBoxNo \ 2
            slStr = smInitShareBudget(ilIndex)
            gSetChgFlag slStr, edcShareDropDown, tmSBCtrls(ilBoxNo)
        Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            ilIndex = (ilBoxNo - 1) \ 2
            slStr = smInitShareBudgetPct(ilIndex)
            gSetChgFlag slStr, edcShareDropDown, tmSBCtrls(ilBoxNo)
    End Select
    tmHdCtrls(SHAREINDEX).iChg = False
    For ilLoop = imLBCTCtrls To UBound(tmSBCtrls) Step 1
        If tmSBCtrls(ilLoop).iChg Then
            tmHdCtrls(SHAREINDEX).iChg = True
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSBSetFocus                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Public Sub mSBSetFocus(ilBoxNo As Integer)
'
'   mSBSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    'Dim ilLoop As Integer   'For loop control parameter
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmSBCtrls)) Then
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case SBYCOMPANYINDEX, SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSBSetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mSBSetShow(ilBoxNo As Integer)
'
'   mSBSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    'Dim ilRet As Integer
    'Dim slNameCode As String
    'Dim slCode As String
    Dim ilIndex As Integer
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmSBCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case SBYCOMPANYINDEX, SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
            ilIndex = ilBoxNo \ 2
            edcShareDropDown.Visible = False  'Set visibility
            cmcShareDropDown.Visible = False
            If ilBoxNo = SBYCOMPANYINDEX Then
                imShareBudgetIndex(ilIndex) = lbcShareBudget(0).ListIndex
                lbcShareBudget(0).Visible = False
                If lbcShareBudget(0).ListIndex < 2 Then
                    slStr = ""
                Else
                    slStr = lbcShareBudget(0).List(lbcShareBudget(0).ListIndex)
                End If
            Else
                imShareBudgetIndex(ilIndex) = lbcShareBudget(1).ListIndex
                lbcShareBudget(1).Visible = False
                If lbcShareBudget(1).ListIndex < 2 Then
                    slStr = ""
                Else
                    slStr = lbcShareBudget(1).List(lbcShareBudget(1).ListIndex)
                End If
            End If
            smShareBudget(ilIndex) = slStr
            gSetShow pbcSPerson, slStr, tmSBCtrls(ilBoxNo)
        Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
            ilIndex = (ilBoxNo - 1) \ 2
            edcShareDropDown.Visible = False  'Set visibility
            If imShareBudgetIndex(ilIndex) > 1 Then
                slStr = edcShareDropDown.Text
                smShareBudgetPct(ilIndex) = slStr
                gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
            Else
                slStr = ""
                smShareBudgetPct(ilIndex) = ""
            End If
            gSetShow pbcShareBudget, slStr, tmSBCtrls(ilBoxNo)
    End Select
End Sub

Private Sub mSelectChange()
    mSelectChangeSub CNTRNOINDEX, MERCHINDEX, PROMOINDEX, INTCOMMINDEX, CANCLAUSEINDEX, CHGREASONINDEX, OTHERCOMMINDEX, STATUSINDEX, REVNOINDEX, GUARINDEX, GROSSINDEX, PRODTAGINDEX, RATECARDINDEX, DEMOINDEX, DATEINDEX
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetAirDateFromSpots            *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Change start/End date of week  *
'*                      based on days spots assigned   *
'*                                                     *
'*******************************************************
Private Sub mSetAirDateFromSpots()
    Dim ilDay As Integer
    Dim ilStartDay As Integer
    Dim ilEndDay As Integer
    Dim ilLoop As Integer
    Dim llDate As Long
    Dim slDate As String
    'Don't shrink dates
    Exit Sub
    ilStartDay = -1
    ilEndDay = -1
    If (smAirSave(3, imAirRowNo) = "") And (Not tgClfCntr(imLnRowNo - 1).iGame) Then
        For ilLoop = 0 To 6 Step 1
            If Val(smAirSave(4 + ilLoop, imAirRowNo)) > 0 Then
                If ilStartDay = -1 Then
                    ilStartDay = ilLoop
                End If
                ilEndDay = ilLoop
            End If
        Next ilLoop
    Else
        For ilLoop = 0 To 6 Step 1
            If smAirSave(4 + ilLoop, imAirRowNo) = "Y" Then
                If ilStartDay = -1 Then
                    ilStartDay = ilLoop
                End If
                ilEndDay = ilLoop
            End If
        Next ilLoop
    End If
    ilDay = gWeekDayStr(smAirSave(1, imAirRowNo))
    If ilStartDay <> ilDay Then
        If ilStartDay <> -1 Then
            llDate = gDateValue(smAirSave(1, imAirRowNo))
            llDate = llDate - ilDay + ilStartDay
            slDate = Format$(llDate, "m/d/yy")
            smAirSave(1, imAirRowNo) = slDate
            slDate = gAddDayToDate(slDate)
            'gSetShow pbcAirWk, slDate, tmAirCtrls(WEEKSTARTDATEINDEX)
            'smAirShow(WEEKSTARTDATEINDEX, imAirRowNo) = tmAirCtrls(WEEKSTARTDATEINDEX).sShow
            'gPaintArea pbcAirWk, tmAirCtrls(WEEKSTARTDATEINDEX).fBoxX, tmAirCtrls(WEEKSTARTDATEINDEX).fBoxY + (imAirRowNo - vbcAirWk.Value) * (fgBoxGridH + 15), tmAirCtrls(WEEKSTARTDATEINDEX).fBoxW - 15, tmAirCtrls(WEEKSTARTDATEINDEX).fBoxH - 15, WHITE
            'pbcAirWk.CurrentX = tmAirCtrls(WEEKSTARTDATEINDEX).fBoxX + fgBoxInsetX
            'pbcAirWk.CurrentY = tmAirCtrls(WEEKSTARTDATEINDEX).fBoxY + (imAirRowNo - vbcAirWk.Value) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            'pbcAirWk.Print smAirShow(WEEKSTARTDATEINDEX, imAirRowNo)
        End If
    End If
    ilDay = gWeekDayStr(smAirSave(2, imAirRowNo))
    If ilEndDay <> ilDay Then
        If ilEndDay <> -1 Then
            llDate = gDateValue(smAirSave(2, imAirRowNo))
            llDate = llDate - ilDay + ilEndDay
            slDate = Format$(llDate, "m/d/yy")
            smAirSave(2, imAirRowNo) = slDate
            slDate = gAddDayToDate(slDate)
            'gSetShow pbcAirWk, slDate, tmAirCtrls(WEEKENDDATEINDEX)
            'smAirShow(WEEKENDDATEINDEX, imAirRowNo) = tmAirCtrls(WEEKENDDATEINDEX).sShow
            'gPaintArea pbcAirWk, tmAirCtrls(WEEKENDDATEINDEX).fBoxX, tmAirCtrls(WEEKENDDATEINDEX).fBoxY + (imAirRowNo - vbcAirWk.Value) * (fgBoxGridH + 15), tmAirCtrls(WEEKENDDATEINDEX).fBoxW - 15, tmAirCtrls(WEEKENDDATEINDEX).fBoxH - 15, WHITE
            'pbcAirWk.CurrentX = tmAirCtrls(WEEKENDDATEINDEX).fBoxX + fgBoxInsetX
            'pbcAirWk.CurrentY = tmAirCtrls(WEEKENDDATEINDEX).fBoxY + (imAirRowNo - vbcAirWk.Value) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            'pbcAirWk.Print smAirShow(WEEKENDDATEINDEX, imAirRowNo)
        End If
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetChg                         *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mSetChg(ilBoxNo As Integer)
'
'   mSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    'If (ilBoxNo < LBound(tmHdCtrls)) Or (ilBoxNo > UBound(tmHdCtrls)) Then
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmHdCtrls)) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case STATUSINDEX
            Select Case tgChfCntr.sStatus
                Case "W"
                    If tgChfCntr.iCntRevNo > 0 Then
                        slStr = "Rev Working"
                    Else
                        slStr = "Working Proposal"
                    End If
                Case "D"
                    slStr = "Rejected"
                Case "C"
                    If tgChfCntr.iCntRevNo > 0 Then
                        slStr = "Rev Completed"
                    Else
                        slStr = "Completed Proposal"
                    End If
                Case "I"
                    If tgChfCntr.iCntRevNo > 0 Then
                        slStr = "Rev Unapproved"
                    Else
                        slStr = "Unapproved Proposal"
                    End If
                Case "G"
                    slStr = "Approved Hold"
                Case "H"
                    slStr = "Hold"
                Case "N"
                    slStr = "Approved Order"
                Case "O"
                    slStr = "Order"
            End Select
            'If imSelectedIndex <> 0 Then
                gSetChgFlag slStr, lbcStatus, tmHdCtrls(ilBoxNo)
            'End If
        Case POTINDEX 'Potential
            gSetChgFlag smPot, lbcPot, tmHdCtrls(ilBoxNo)
        Case TYPEINDEX 'Type
            Select Case tgChfCntr.sType
                Case "C"    'Standard
                    slStr = "Standard"
                Case "V"  'Reservation
                    slStr = "Reservation"
                Case "T"  'Remnant
                    slStr = "Remnant"
                Case "R"  'DR
                    slStr = "Direct Response"
                Case "Q"    'PI
                    slStr = "Per Inquiry"
                Case "S"  'PSA
                    slStr = "PSA"
                Case "P"
                    slStr = "Promo"
                Case Else
                    slStr = ""
            End Select
            'If imSelectedIndex <> 0 Then
                gSetChgFlag slStr, lbcType, tmHdCtrls(ilBoxNo)
            'End If
        'Case ESTNOINDEX 'Agency Estimate number
        '    slStr = Trim$(Str$(tgChfCntr.lAgyEstNo))
        '    gSetChgFlag slStr, edcEstNo, tmHdCtrls(ilBoxNo)
        Case CNTRNOINDEX 'Contract number
            If sgCntrScreen = "Orders" Then
                'slStr = Trim$(Str$(tgChfCntr.lCntrNo))
                'gSetChgFlag slStr, edcCntrNo, tmHdCtrls(ilBoxNo)
            Else
                'Change flag set in mNoSetChg
            End If
        Case REVNOINDEX 'Revision number
            If ((sgCntrScreen = "Orders") And (imStep1Index < 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4)) Then
                slStr = Trim$(str$(tgChfCntr.iExtRevNo))
                gSetChgFlag slStr, edcRevNo, tmHdCtrls(ilBoxNo)
            End If
        Case ADVTINDEX   'Advertiser
            gSetChgFlag smAdvertiser, lbcAdvt, tmHdCtrls(ilBoxNo)
        Case PRODUCTINDEX   'Product
            gSetChgFlagStr tgChfCntr.sProduct, smProduct, tmHdCtrls(ilBoxNo)
        Case SHTTITLEINDEX   'Short Title
            If tgSpf.sUseProdSptScr = "P" Then
                gSetChgFlagStr smInitShtTitle, smShtTitle, tmHdCtrls(ilBoxNo)
            End If
        Case AGENCYINDEX   'Agency
            gSetChgFlag smAgency, lbcAgency, tmHdCtrls(ilBoxNo)
        Case SPERSONINDEX   'Salesperson
        Case BUYERINDEX 'Buyer
            gSetChgFlag smOrigBuyer, lbcBuyer, tmHdCtrls(ilBoxNo)
        Case PHONEINDEX 'Phone and extension
            gSetChgFlag tgChfCntr.sPhone, mkcPhone, tmHdCtrls(ilBoxNo)
        Case MERCHINDEX
            gSetChgFlagStr smComment(0), smInitComment(0), tmHdCtrls(ilBoxNo)
            For ilLoop = 0 To 3 Step 1
                If imInitCommShowOn(0, ilLoop) <> imCommShowOn(0, ilLoop) Then
                    tmHdCtrls(ilBoxNo).iChg = True
                    Exit For
                End If
            Next ilLoop
        Case PROMOINDEX
            gSetChgFlagStr smComment(1), smInitComment(1), tmHdCtrls(ilBoxNo)
            For ilLoop = 0 To 3 Step 1
                If imInitCommShowOn(1, ilLoop) <> imCommShowOn(1, ilLoop) Then
                    tmHdCtrls(ilBoxNo).iChg = True
                    Exit For
                End If
            Next ilLoop
        Case REVSETINDEX 'Revenue set
        '    gSetChgFlag smRevSet(0), lbcRevSet(0), tmHdCtrls(ilBoxNo)
        Case SEGINDEX 'Segment
            gSetChgFlag smSeg, lbcSeg, tmHdCtrls(ilBoxNo)
        Case GUARINDEX 'Guarantee
            slStr = gLongToStrDec(tgChfCntr.lGuar, 0)
            gSetChgFlag slStr, edcHdDropDown, tmHdCtrls(ilBoxNo)
        Case TRADEINDEX '% Trade
        Case RATECARDINDEX 'Rate Card
            gSetChgFlag smRateCard, lbcRateCard, tmHdCtrls(ilBoxNo)
        Case GROSSINDEX 'Total Gross
            'gPDNToStr tgChfCntr.sInputGross, 2, slStr
            slStr = gLongToStrDec(tgChfCntr.lInputGross, 2)
            gSetChgFlag slStr, edcHdDropDown, tmHdCtrls(ilBoxNo)
        Case BILLCYCLEINDEX 'Billing cycle
            Select Case tgChfCntr.sBillCycle
                Case "S"  'Standard
                    slStr = "Std B'cast"    'lbcBillCycle.List(0)
                Case "C"  'Calendar
                    slStr = "Calendar"  'lbcBillCycle.List(1)
                Case "W"
                    If Left$(lbcBillCycle.List(1), 1) = "C" Then
                        slStr = "Calendar"  'lbcBillCycle.List(3)
                    Else
                        slStr = "Weekly"    'bcBillCycle.List(2)
                    End If
            End Select
            gSetChgFlag slStr, lbcBillCycle, tmHdCtrls(ilBoxNo)
        Case INVGROUPINDEX 'Invoice grouping
            Select Case tgChfCntr.sInvGp
                Case "A"  'Only one-all Spots
                    slStr = lbcInvGroup.List(0)
                Case "P"  '1 per Product
                    slStr = lbcInvGroup.List(1)
                Case "T"  '1 per Tag
                    slStr = lbcInvGroup.List(2)
            End Select
            gSetChgFlag slStr, lbcInvGroup, tmHdCtrls(ilBoxNo)
            '10043 iPctTag removed
'        Case PRODTAGINDEX   'Product/Tag %
'            'gPDNToStr tgChfCntr.sPctTag, 2, slStr
'            slStr = gIntToStrDec(tgChfCntr.iPctTag, 2)
'            gSetChgFlag slStr, edcHdDropDown, tmHdCtrls(ilBoxNo)
        Case INTCOMMINDEX
            gSetChgFlagStr smComment(2), smInitComment(2), tmHdCtrls(ilBoxNo)
        Case CANCLAUSEINDEX
            gSetChgFlagStr smComment(3), smInitComment(3), tmHdCtrls(ilBoxNo)
            For ilLoop = 0 To 3 Step 1
                If imInitCommShowOn(3, ilLoop) <> imCommShowOn(3, ilLoop) Then
                    tmHdCtrls(ilBoxNo).iChg = True
                    Exit For
                End If
            Next ilLoop
        Case CHGREASONINDEX
            gSetChgFlagStr smComment(4), smInitComment(4), tmHdCtrls(ilBoxNo)
            For ilLoop = 0 To 3 Step 1
                If imInitCommShowOn(4, ilLoop) <> imCommShowOn(4, ilLoop) Then
                    tmHdCtrls(ilBoxNo).iChg = True
                    Exit For
                End If
            Next ilLoop
        Case OTHERCOMMINDEX
            gSetChgFlagStr smComment(5), smInitComment(5), tmHdCtrls(ilBoxNo)
            For ilLoop = 0 To 4 Step 1
                If imInitCommShowOn(5, ilLoop) <> imCommShowOn(5, ilLoop) Then
                    tmHdCtrls(ilBoxNo).iChg = True
                    Exit For
                End If
            Next ilLoop
    End Select
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetCommands                    *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set command buttons (enable or *
'*                      disabled)                      *
'*                                                     *
'*******************************************************
Public Sub mSetCommands()
'
'   mSetCommands
'   Where:
'
    Dim ilAltered As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    ilAltered = gAnyFieldChgd(tmHdCtrls(), TESTALLCTRLS)
    If imGameInvChg Then
        ilAltered = True
    End If
    If imNTRChg Then
        ilAltered = True
    End If
    If imCPMChg Then
        ilAltered = True
    End If
    '10910
    If bgContractAttachments_Changed Then
        ilAltered = True
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6)) Then
        ilAltered = False
        imLnChg = False
        imComputeReq = False
    End If
    If (Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION Then
        cmcProj.Enabled = False
    End If
    If (imStep1Index < 0) Or ((imStep1Index > 0) And (imStep2Index < 0)) Or ((imStep1Index > 0) And (imStep2Index > 0) And (imStep3Index < 0)) Or ((imStep1Index > 0) And (imStep2Index = 0) And (imStep3Index = -2)) Then
        pbcSelect.Enabled = True
        pbcStepSTab.Enabled = True
        pbcStepTab.Enabled = True
        pbcHdSTab.Enabled = False
        pbcHdTab.Enabled = False
        pbcHeader.Enabled = False
        pbcLnSTab.Enabled = False
        pbcLnTab.Enabled = False
        pbcLine.Enabled = False
        plcPower.Enabled = False
    Else
        'Test if values defined
        pbcHdSTab.Enabled = True
        pbcHdTab.Enabled = True
        pbcHeader.Enabled = True
        pbcLnSTab.Enabled = True
        pbcLnTab.Enabled = True
        pbcLine.Enabled = True
        plcPower.Enabled = True
        If (Not ilAltered) And (Not imLnChg) Then
            pbcSelect.Enabled = True
            pbcStepSTab.Enabled = True
            pbcStepTab.Enabled = True
        Else
            'If modeling and user is not to the number field allow to get back to steps
            If (imStep1Index <= 1) And (lbcAdvt.ListIndex < 0) Then ' (edcCntrNo.Text = "") Then
                pbcSelect.Enabled = True
                pbcStepSTab.Enabled = True
                pbcStepTab.Enabled = True
            Else
                pbcSelect.Enabled = False
                pbcStepSTab.Enabled = False
                pbcStepTab.Enabled = False
            End If
        End If
    End If
    'cmcCompute.Enabled = imComputeReq
    If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
        'Disallow any line changes 7/2/98- Jim
        cmcErase.Enabled = False
        cmcTerminate(0).Enabled = False
    Else
        If (imStep1Index >= 1) And (imStep3Index >= 0) Then
            If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
                cmcTerminate(0).Enabled = True
            Else
                cmcTerminate(0).Enabled = False
            End If
        Else
            cmcTerminate(0).Enabled = False
        End If
        If (imStep1Index >= 2) And (imStep3Index >= 0) Then
            If ((sgCntrScreen <> "Orders") And (imStep1Index = 2)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4) And ((smOrigStatus = "W") Or (smOrigStatus = "C") Or (smOrigStatus = "I"))) Then 'Erase
                If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
                    cmcErase.Enabled = True
                Else
                    cmcErase.Enabled = False
                End If
            ElseIf (sgCntrScreen = "Orders") And (UBound(tgClfCntr) <= LBound(tgClfCntr)) And (UBound(tgDelClf) > LBound(tgDelClf)) Then 'Erase
                If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
                    cmcErase.Enabled = True
                Else
                    cmcErase.Enabled = False
                End If
            Else
                cmcErase.Enabled = False
            End If
        Else
            cmcErase.Enabled = False
        End If
    End If
    'Update button set if all mandatory fields have data and any field altered
    'If (((mTestFields(TESTALLCTRLS, ALLMANDEFINED + NOMSG) = Yes) And (ilAltered = Yes)) Or (imLnChg)) And (UBound(tgClfCntr) >= 1) Then
    '10910 added attachments
    If ((ilAltered = YES) Or (imLnChg)) And ((UBound(tgClfCntr) >= 1) Or (UBound(tgIBSbf) > LBound(tgIBSbf) Or ((Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) <> ""))) Or imNTRChg Or imCPMChg Or imGameInvChg Or bgContractAttachments_Changed) Then  ' Or ((Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) <> "")) Then
        cmcUpdate.Enabled = True
        cmcSaveStay.Enabled = True
    Else
        If (ilAltered = YES) And (UBound(tgClfCntr) < 1) And (UBound(tgIBSbf) <= LBound(tgIBSbf)) And (((sgCntrScreen = "Orders") And (imStep1Index = 2)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 4))) Then  'All lines delete
            cmcUpdate.Enabled = True
            cmcSaveStay.Enabled = True
        Else
            'Allow planners to Save Complete proposals without requiring a change.
            If (tgUrf(0).iRemoteUserID <= 0) And (tgUrf(0).iSlfCode <= 0) And (sgCntrScreen <> "Orders") And (imStep1Index = 2) And (tgSpf.sGUsePropSys = "Y") And (smOrigStatus = "C") And ((tgUrf(0).sWorkToHold = "Y") Or (tgUrf(0).sWorkToOrder = "Y") Or (tgUrf(0).sCompToHold = "Y") Or (tgUrf(0).sCompToOrder = "Y") Or (tgUrf(0).sIncompToHold = "Y") Or (tgUrf(0).sIncompToOrder = "Y")) Then
                cmcUpdate.Enabled = True
                cmcSaveStay.Enabled = True
            Else
                cmcUpdate.Enabled = False
                cmcSaveStay.Enabled = False
            End If
        End If
    End If
    If (tgSpf.sMktBase = "Y") Then
        If (cmcUpdate.Enabled = True) Or (cmcSaveStay.Enabled = True) Then
            cmcMkt.Enabled = False
        Else
            cmcMkt.Enabled = True
        End If
    End If
    'Revert button set if any field changed
    If ilAltered Or imLnChg Then
        cmcUndo.Enabled = True
        If sgCntrScreen = "Orders" Then
            cmcHold.Enabled = False
        End If
    Else
        cmcUndo.Enabled = False
        If sgCntrScreen = "Orders" Then
            cmcHold.Enabled = True
        End If
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
        cmcDates.Enabled = False
        udcCBill.Enabled = False
        cmcAvails.Enabled = False
        cmcPackage(0).Enabled = False
        cmcPackage(1).Enabled = False
        cmcRates.Visible = False
        'cmcPower.Visible = False
    Else
        If UBound(tgClfCntr) >= 1 Then
            cmcDates.Enabled = True
            If tgUrf(0).iSlfCode = 0 Then
                'cmcBills.Enabled = True
                cmcAvails.Enabled = True
            Else
                'cmcBills.Enabled = False
                cmcAvails.Enabled = False
            End If
            mEnableCBill
        Else
            If lbcRateCard.ListIndex < 0 Then
                udcCBill.Enabled = False
            Else
                mEnableCBill
            End If
            cmcAvails.Enabled = False
            cmcDates.Enabled = False
        End If
        If (tgSpf.sCPkOrdered = "Y") Or (tgSpf.sCPkAired = "Y") Or (tgSpf.sCPkEqual = "Y") Then
            If ((UBound(tgClfCntr) >= 1) Or ((Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) <> ""))) And (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
                cmcPackage(0).Enabled = True
                cmcPackage(1).Enabled = True
            Else
                cmcPackage(0).Enabled = False
                cmcPackage(1).Enabled = False
            End If
        End If
        'If tscLine.SelectedItem.Index = 10 Then 'Research
        If tscLine.SelectedItem.Index = imTabMap(TABRESEARCH) Then 'Research
            cmcPackage(0).Enabled = False
            cmcPackage(1).Enabled = False
        End If
        If Not plcPower.Visible Then
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                'cmcPower.Visible = False
                cmcRates.Visible = False
            Else
                    'If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
                    If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Then
                        cmcRates.Visible = False
                    Else
                        cmcRates.Visible = True
                    End If
            End If
        End If
        If (Trim$(smPowerCaption) = "Rate Bar") Then
            If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
                plcPower.Enabled = False
            Else
                plcPower.Enabled = True
            End If
        Else
        End If
    End If
    'If (tscLine.SelectedItem.Index <> 4) And (tscLine.SelectedItem.Index <> 8) And (tscLine.SelectedItem.Index <> 9) Then 'only allow for ai time, avails or protection
    '    cmcRates.Enabled = False
    'Else
    '    cmcRates.Enabled = True
    'End If
    If (tscLine.SelectedItem.Index = imTabMap(TABAIRTIME)) Or (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Then 'only allow for ai time, avails or protection
        cmcRates.Enabled = True
    Else
        cmcRates.Enabled = False
    End If
    
    If (Trim$(smPowerCaption) = "Rate Bar") Then
        If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
            plcPower.Enabled = False
        Else
            plcPower.Enabled = True
        End If
    Else
    End If
    If (Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH Then
        cmcDemoBar.Visible = False
    '12'5/19: Disallow demo bar except when on air time table as unable to get weekly totals to be generated while demo bar displayed
    'Conflict in generating weekly amount (imDBTotals=6) and display type selected in demo bar.
    'lacAudTotals_Click
    'Possible fix: Create a new variable that is tested along when imDBTotals = 6
    'ElseIf tscLine.SelectedItem.Index <> 4 Then
    ElseIf tscLine.SelectedItem.Index <> imTabMap(TABAIRTIME) Then
        cmcDemoBar.Enabled = False
    Else
        If plcPower.Visible Then
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                cmcGenLineBar.Enabled = False
            End If
            If plcDemoBar.Visible Then
                cmcDemoBar_Click
            End If
            cmcDemoBar.Enabled = False  'Visible = False
         Else
            If imLine = 0 Then  '0=6 line view; 1=13 line view
                If imDiffMode Then
                    If plcDemoBar.Visible Then
                        cmcDemoBar_Click
                    End If
                    cmcDemoBar.Enabled = False  'Visible = False
                Else
                    If sgCntrScreen <> "Orders" Then
                        If (imLnRowNo > 0) Then
                            On Error Resume Next
                            If smLnSave(1, imLnRowNo) <> "" Then
                                cmcDemoBar.Enabled = True   'Visible = True
                            Else
                                cmcDemoBar.Enabled = True
                            End If
                        Else
                            'Always allow demo bar even if line not selected
                            slStr = ""
                            On Error Resume Next
                            slStr = smLnSave(1, 1)
                            If slStr = "" Then
                                cmcDemoBar.Enabled = False
                            Else
                                cmcDemoBar.Enabled = True
                            End If
                        End If
                    Else
                        If plcDemoBar.Visible Then
                            cmcDemoBar_Click
                        End If
                        cmcDemoBar.Enabled = False  'Visible = False
                    End If
                End If
            Else
                If plcDemoBar.Visible Then
                    cmcDemoBar_Click
                End If
                cmcDemoBar.Enabled = False  'Visible = False
            End If
        End If
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
       cmcFlight.Enabled = False
    Else
        If (imLnRowNo >= imLB1Or2) And (imLnRowNo <= UBound(imLnSave, LINEBOUNDINDEX)) Then
            If (Not mIsLnGame(imLnRowNo)) And (Not mGameInPkg(imLnRowNo)) Then
               smLineType = mGetLineType(imLnRowNo)
               If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                   'Check that vehicle defined, daypart and spot length to be able to compute price from Rate Card
                   If (smLnSave(1, imLnRowNo) <> "") And (imLnSave(1, imLnRowNo) > 0) And (smLnSave(16, imLnRowNo) <> "") Then
                        If mIsLnGame(imLnRowNo) Then
                            cmcFlight.Enabled = False
                        Else
                            cmcFlight.Enabled = True
                            If smLineType = "H" Then
                                For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                                    If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                                        'If tgPackLn(ilLoop).iAlter <> True Then
                                        If tgPackLn(ilLoop).sAlter <> "Y" Then
                                            cmcFlight.Enabled = False
                                            Exit For
                                        End If
                                    End If
                                Next ilLoop
                            End If
                        End If
                   Else
                       cmcFlight.Enabled = False
                   End If
               Else
                   If (smLnSave(1, imLnRowNo) <> "") And (smLnSave(20, imLnRowNo) <> "") And (smLnSave(16, imLnRowNo) <> "") Then
                        If mGameInPkg(imLnRowNo) Then
                            cmcFlight.Enabled = False
                        Else
                            cmcFlight.Enabled = True
                        End If
                   Else
                       cmcFlight.Enabled = False
                   End If
               End If
            Else
                cmcFlight.Enabled = False
            End If
        Else
            cmcFlight.Enabled = False
        End If
        'End If
    End If
     If tgSpf.sUseProdSptScr = "P" Then
        If (lbcStatus.ListIndex >= 0) And (UBound(tgClfCntr) >= 2) Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                cmcShtTitle.Enabled = True
            Else
                cmcShtTitle.Enabled = False
            End If
        Else
            cmcShtTitle.Enabled = False
        End If
    End If
    If (imUpdateAllowed) And (sgCntrScreen <> "Orders") And (imStep1Index <= 3) And (UBound(tgClfCntr) >= 1) And (Not igRepNetChgAllowed) Then
        If igFreezeState = 0 Then
            cmcScale.Enabled = True
        Else
            cmcScale.Enabled = False
        End If
    Else
        cmcScale.Enabled = False
    End If
    If (imUpdateAllowed) And (((sgCntrScreen <> "Orders") And (imStep1Index <= 4)) Or ((sgCntrScreen = "Orders") And (imStep1Index <= 2))) And (UBound(tgClfCntr) >= 1) And (Not igRepNetChgAllowed) Then
        cmcClone.Enabled = True
        cmcClone.Visible = True
    Else
        cmcClone.Enabled = False
        If ((sgCntrScreen <> "Orders") And (imStep1Index > 4)) Or ((sgCntrScreen = "Orders") And (imStep1Index > 2)) Then
            cmcClone.Visible = False
        Else
            cmcClone.Visible = True
        End If
    End If
    If ((Asc(tgSpf.sSportInfo) And USINGSPORTS) = USINGSPORTS) Then
        If (Asc(tgSpf.sUsingFeatures) And MULTIMEDIA) = MULTIMEDIA Then 'Using Live Log
            'If not allowed to update is handled in the control
            If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
                udcCGameInv.Enabled = False
            Else
                udcCGameInv.Enabled = True
            End If
        Else
            udcCGameInv.Enabled = False
        End If
    Else
        udcCGameInv.Enabled = False
    End If
    If tscLine.SelectedItem.Index = imTabMap(TABPODCASTCPM) Then
        cmcRates.Enabled = False
        cmcDemoBar.Enabled = False
    End If
    
    If (cmcUpdate.Enabled = True) Or (cmcSaveStay.Enabled = True) Then
        igOKToCallCntr = False
    Else
        igOKToCallCntr = True
    End If
    If igFreezeState = 1 Then
        cmcUpdate.Enabled = False
    End If
    mSetTabColors False
    '8723
    If ogContractCreator.CreationUser = Filemaker And ogContractCreator.ContractToProcess = Order Then
        cmcUpdate.Enabled = False
        cmcSaveStay.Enabled = False
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetCreditInfo                  *
'*                                                     *
'*             Created:10/07/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set credit and payment rating  *
'*                      info                           *
'*                                                     *
'*******************************************************
Public Sub mSetCreditInfo()
    Dim ilAdvtCredit As Integer
    Dim ilAgyCredit As Integer
    Dim ilCredit As Integer
    Dim slDollars As String
    Dim slCreditLimit As String
    Dim slCurrAR As String
    Dim slUnbilled As String
    Dim slOwned As String
    Dim slAdvtDollars As String
    Dim slAgyDollars As String
    Dim ilRet As Integer
    Dim slPay As String
    Dim sl90 As String
    Dim il90 As Integer
    Dim ilBypassCredit As Integer
    ilAdvtCredit = -1
    ilAgyCredit = -1
    imCreditRestr = -1
    ilBypassCredit = False
    If (tmAdf.iCode <> 0) Then
        If tmAdf.sCrdApp = "R" Then 'Requires Checking
            lacCreditInfo.Visible = True
            lacCreditInfo.BackColor = Yellow
            lacCreditInfo.Caption = "Advt Credit Unapproved"
            lacPayInfo.Visible = False
            ilBypassCredit = True
        ElseIf tmAdf.sCrdApp = "D" Then 'Denied
            lacCreditInfo.Visible = True
            lacCreditInfo.BackColor = Red
            lacCreditInfo.Caption = "Advt Credit Denied"
            lacPayInfo.Visible = False
            imCreditRestr = 1
            ilBypassCredit = True
        End If
    End If
    If Not ilBypassCredit Then
        If (tmAgf.iCode <> 0) And (tmAdf.sBillAgyDir <> "D") Then
            If tmAgf.sCrdApp = "R" Then 'Requires Checking
                lacCreditInfo.Visible = True
                lacCreditInfo.BackColor = Yellow
                lacCreditInfo.Caption = "Agency Credit Unapproved"
                lacPayInfo.Visible = False
                ilBypassCredit = True
            ElseIf tmAgf.sCrdApp = "D" Then 'Denied
                lacCreditInfo.Visible = True
                lacCreditInfo.BackColor = Red
                lacCreditInfo.Caption = "Agency Credit Denied"
                lacPayInfo.Visible = False
                imCreditRestr = 1
                ilBypassCredit = True
            End If
        End If
    End If
    If Not ilBypassCredit Then
        If tmAdf.iCode <> 0 Then
            Select Case tmAdf.sCreditRestr
                Case "N"
                    ilAdvtCredit = 0
                Case "L"
                    ilAdvtCredit = 1
                    'gPDNToStr tmAdf.sCreditLimit, 2, slCreditLimit
                    slCreditLimit = gLongToStrDec(tmAdf.lCreditLimit, 2)
                    gPDNToStr tmAdf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAdf.sUnbilled, 2, slUnbilled
                    slOwned = gAddStr(slCurrAR, slUnbilled)
                    slAdvtDollars = gSubStr(slCreditLimit, slOwned)
                Case "W"
                    ilAdvtCredit = 2
                    gPDNToStr tmAdf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAdf.sUnbilled, 2, slUnbilled
                    slAdvtDollars = gAddStr(slCurrAR, slUnbilled)
                Case "M"
                    ilAdvtCredit = 3
                    gPDNToStr tmAdf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAdf.sUnbilled, 2, slUnbilled
                    slAdvtDollars = gAddStr(slCurrAR, slUnbilled)
                Case "T"
                    ilAdvtCredit = 4
                    gPDNToStr tmAdf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAdf.sUnbilled, 2, slUnbilled
                    slAdvtDollars = gAddStr(slCurrAR, slUnbilled)
                Case "P"
                    ilAdvtCredit = 5
            End Select
        End If
        If tmAgf.iCode <> 0 Then
            Select Case tmAgf.sCreditRestr
                Case "N"
                    ilAgyCredit = 0
                Case "L"
                    ilAgyCredit = 1
                    'gPDNToStr tmAgf.sCreditLimit, 2, slCreditLimit
                    slCreditLimit = gLongToStrDec(tmAgf.lCreditLimit, 2)
                    gPDNToStr tmAgf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAgf.sUnbilled, 2, slUnbilled
                    slOwned = gAddStr(slCurrAR, slUnbilled)
                    slAgyDollars = gSubStr(slCreditLimit, slOwned)
                Case "W"
                    ilAgyCredit = 2
                    gPDNToStr tmAgf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAgf.sUnbilled, 2, slUnbilled
                    slAgyDollars = gAddStr(slCurrAR, slUnbilled)
                Case "M"
                    ilAgyCredit = 3
                    gPDNToStr tmAgf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAgf.sUnbilled, 2, slUnbilled
                    slAgyDollars = gAddStr(slCurrAR, slUnbilled)
                Case "T"
                    ilAgyCredit = 4
                    gPDNToStr tmAgf.sCurrAR, 2, slCurrAR
                    gPDNToStr tmAgf.sUnbilled, 2, slUnbilled
                    slAgyDollars = gAddStr(slCurrAR, slUnbilled)
                Case "P"
                    ilAgyCredit = 5
            End Select
        End If
        If (ilAdvtCredit = -1) And (ilAgyCredit = -1) Then
            lacCreditInfo.Visible = False
        Else
            lacCreditInfo.Visible = True
            If ilAdvtCredit = ilAgyCredit Then
                ilCredit = ilAdvtCredit
                ilRet = gCompNumberStr(slAdvtDollars, slAgyDollars)
                If ilRet < 0 Then
                    slDollars = slAdvtDollars
                Else
                    slDollars = slAgyDollars
                End If
            ElseIf ilAdvtCredit > ilAgyCredit Then
                ilCredit = ilAdvtCredit
                slDollars = slAdvtDollars
            Else
                ilCredit = ilAgyCredit
                slDollars = slAgyDollars
            End If
            lacCreditInfo.ForeColor = BLACK
            Select Case ilCredit
                Case 0
                    imCreditColor = 2
                    lacCreditInfo.BackColor = GREEN
                    lacCreditInfo.Caption = "Credit: No Restrictions"
                Case 1
                    imCreditColor = 1
                    If InStr(slDollars, "-") = 0 Then
                        lacCreditInfo.BackColor = Yellow
                    Else
                        lacCreditInfo.BackColor = Red
                    End If
                    gFormatStr slDollars, FMTLEAVEBLANK + FMTCOMMA, 2, slDollars
                    lacCreditInfo.Caption = "Credit Remaining: " & slDollars
                Case 2
                    imCreditColor = 1
                    If gCompNumberStr(slDollars, ".00") > 0 Then
                        lacCreditInfo.BackColor = Red
                    Else
                        lacCreditInfo.BackColor = Yellow
                    End If
                    gFormatStr slDollars, FMTLEAVEBLANK + FMTCOMMA, 2, slDollars
                    lacCreditInfo.Caption = "Cash in Advance- Weekly: " & slDollars
                Case 3
                    imCreditColor = 1
                    If gCompNumberStr(slDollars, ".00") > 0 Then
                        lacCreditInfo.BackColor = Red
                    Else
                        lacCreditInfo.BackColor = Yellow
                    End If
                    gFormatStr slDollars, FMTLEAVEBLANK + FMTCOMMA, 2, slDollars
                    lacCreditInfo.Caption = "Cash in Advance- Monthly: " & slDollars
                Case 4
                    imCreditColor = 1
                    If gCompNumberStr(slDollars, ".00") > 0 Then
                        lacCreditInfo.BackColor = Red
                    Else
                        lacCreditInfo.BackColor = Yellow
                    End If
                    gFormatStr slDollars, FMTLEAVEBLANK + FMTCOMMA, 2, slDollars
                    lacCreditInfo.Caption = "Cash in Advance- Contract: " & slDollars
                Case 5
                    imCreditRestr = 1
                    imCreditColor = 0
                    lacCreditInfo.BackColor = Red
                    lacCreditInfo.ForeColor = WHITE
                    lacCreditInfo.Caption = "Prohibit New Orders"
            End Select
        End If
    End If
    '2/13/10: Change font size and move SctStatus to the right of CreditInfo
    If Not lacSchStatus.Visible Then
        lacCreditInfo.Left = lacSchStatus.Left + lacSchStatus.Width - lacCreditInfo.Width
    Else
        lacCreditInfo.Left = lacSchStatus.Left - lacCreditInfo.Width - 15
    End If
    lacPayInfo.ForeColor = BLACK
    If tmAdf.iCode <> 0 Then
        gPDNToStr tmAdf.sCurrAR, 2, slDollars
        gFormatStr slDollars, FMTLEAVEBLANK + FMTCOMMA, 0, slDollars
        'gPDNToStr tmAdf.sPct90, 0, sl90
        sl90 = gIntToStrDec(tmAdf.iPct90, 0)
        il90 = tmAdf.iPct90 'Val(sl90)
        gFormatStr sl90, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, sl90
        slPay = "A/R:" & slDollars & " 90+:" & sl90 & " Days:" & Trim$(str$(tmAdf.iAvgToPay))
        If il90 <= 0 Then
            imStatsColor = 2
            lacPayInfo.BackColor = GREEN
        ElseIf il90 < 25 Then
            imStatsColor = 1
            lacPayInfo.BackColor = Yellow
        Else
            imStatsColor = 0
            lacPayInfo.BackColor = Red
            lacPayInfo.ForeColor = WHITE
        End If
        lacPayInfo.Caption = slPay
        lacPayInfo.Visible = True
    Else
        lacPayInfo.Visible = False
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetDate                        *
'*                                                     *
'*             Created:8/24/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move values from work area to  *
'*                      records                        *
'*                                                     *
'*******************************************************
Private Sub mSetDate(ilRemoveZeroSpotWk As Integer)
    Dim ilWkIndex As Integer
    Dim ilCff As Integer
    Dim ilPrevCff As Integer
    Dim ilPrev As Integer
    Dim ilNoWkCombine As Integer
    Dim ilIndex As Integer
    Dim ilMatch As Integer
    Dim ilUpperBound As Integer
    'Dim llStartDate As Long
    Dim slStartDate As String
    'Dim llEndDate As Long
    Dim slEndDate As String
    Dim ilDay As Integer
    Dim ilCffIndex As Integer
    Dim ilLoop As Integer
    'Dim slTestDate As String
    Dim ilMoveIndex As Integer
    Dim ilWkEnd As Integer
    Dim llSpots As Long
    'Dim ilResetCff As Integer
    Dim ilLastCffUsed As Integer
    Dim ilClf As Integer
    Dim ilTestCff As Integer
    Dim ilFound As Integer
    Dim slLineType As String
    Dim llDate As Long
    Dim llPkStartDate As Long
    Dim llPkEndDate As Long
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim ilAirWk As Integer
    Dim ilStdPkg As Integer
    Dim slWDFlag As String
    ReDim ilDailySpots(0 To 6) As Integer
    ReDim ilDays(0 To 6) As Integer
    Dim slStr As String
    Dim llWkPrice As Long
    slLineType = mGetLineType(imLnRowNo)
    If (smLnSave(2, imLnRowNo) <> smDGSave(13)) Or (smLnSave(3, imLnRowNo) <> smDGSave(14)) Then
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
    End If
    If (Trim$(smDGSave(13)) = "") Or (Trim$(smDGSave(14)) = "") Then
        imLnSave(4, imLnRowNo) = 0
        smLnSave(2, imLnRowNo) = ""
        smLnSave(3, imLnRowNo) = ""
    ElseIf (Not gValidTime(smDGSave(13))) Or (Not gValidTime(smDGSave(14))) Then
        imLnSave(4, imLnRowNo) = 0
        smLnSave(2, imLnRowNo) = ""
        smLnSave(3, imLnRowNo) = ""
    Else
        imLnSave(4, imLnRowNo) = 1
        smLnSave(2, imLnRowNo) = smDGSave(13)
        smLnSave(3, imLnRowNo) = smDGSave(14)
    End If
    ReDim tmFlWkInfo(0 To 0) As FLWKINFO
    ilStdPkg = False
    If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                If (tgPackLn(ilLoop).iStdPkg = True) Or (slLineType = "E") Then
                    ilStdPkg = True
                End If
                Exit For
            End If
        Next ilLoop
    End If
    If ilStdPkg Then
        llPkStartDate = 0
        llPkEndDate = 0
        ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    llSpots = 0
                    For ilDay = 0 To 6 Step 1
                        llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                        ilDailySpots(ilDay) = tgCffCntr(ilCff).CffRec.iDay(ilDay)
                    Next ilDay
                    slWDFlag = "D"
                Else
                    slWDFlag = "W"
                    llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                If llSpots > 0 Then
                    If llPkStartDate = 0 Then
                        llPkStartDate = llFlStartDate
                        llPkEndDate = llFlEndDate
                    Else
                        If llFlStartDate < llPkStartDate Then
                            llPkStartDate = llFlStartDate
                        End If
                        If llFlEndDate > llPkEndDate Then
                            llPkEndDate = llFlEndDate
                        End If
                    End If
                End If
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
        llPkStartDate = gDateValue(gObtainPrevMonday(Format$(llPkStartDate, "m/d/yy")))
        For llDate = llPkStartDate To llPkEndDate Step 7
            ilAirWk = False
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                        ilAirWk = True
                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                            llSpots = 0
                            For ilDay = 0 To 6 Step 1
                                If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                    llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                End If
                            Next ilDay
                        Else
                            llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                        End If
                        Exit Do
                    End If
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If ilAirWk Then
                tmFlWkInfo(UBound(tmFlWkInfo)).lDate = llDate
                tmFlWkInfo(UBound(tmFlWkInfo)).iSpots = llSpots
                tmFlWkInfo(UBound(tmFlWkInfo)).iStatus = 1
                ReDim Preserve tmFlWkInfo(0 To UBound(tmFlWkInfo) + 1) As FLWKINFO
            End If
        Next llDate
    End If
    ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
    ilUpperBound = UBound(tgCffCntr)
    ilLastCffUsed = LBound(tgCffCntr)
    'Combine daily split weeks
    ilWkIndex = imLB1Or2    'LBound(smAirSave, 2)
    ilWkEnd = UBound(smAirSave, 2)
    Do
        If (smAirSave(13, ilWkIndex) = "Y") And (imAirSave(2, ilWkIndex) = 0) Then
            smAirSave(13, ilWkIndex) = "N"
            ilIndex = gWeekDayStr(smAirSave(1, ilWkIndex + 1))
            For ilDay = ilIndex To 6 Step 1
                smAirSave(4 + ilDay, ilWkIndex) = smAirSave(4 + ilDay, ilWkIndex + 1)
            Next ilDay
            For ilMoveIndex = ilWkIndex + 2 To ilWkEnd Step 1
                For ilLoop = LBound(smAirSave, 1) To UBound(smAirSave, 1) Step 1
                    smAirSave(ilLoop, ilMoveIndex - 1) = smAirSave(ilLoop, ilMoveIndex)
                Next ilLoop
                For ilLoop = LBound(imAirSave, 1) To UBound(imAirSave, 1) Step 1
                    imAirSave(ilLoop, ilMoveIndex - 1) = imAirSave(ilLoop, ilMoveIndex)
                Next ilLoop
                For ilLoop = LBound(smAirShow, 1) To UBound(smAirShow, 1) Step 1
                    smAirShow(ilLoop, ilMoveIndex - 1) = smAirShow(ilLoop, ilMoveIndex)
                Next ilLoop
            Next ilMoveIndex
            ilWkEnd = ilWkEnd - 1
            ReDim Preserve smAirShow(0 To 14, 0 To ilWkEnd) As String
            ReDim Preserve smAirSave(0 To 13, 0 To ilWkEnd) As String
            ReDim Preserve imAirSave(0 To 2, 0 To ilWkEnd) As Integer
        End If
        ilWkIndex = ilWkIndex + 1
    Loop Until ilWkIndex >= ilWkEnd
    If ilRemoveZeroSpotWk Then
        'For ilWkIndex = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
        For ilWkIndex = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
            If (smAirSave(13, ilWkIndex) = "N") And (imAirSave(1, ilWkIndex) = 0) Then  'Test non-split weeks only
                If (imAirSave(2, ilWkIndex) = 0) And (Not tgClfCntr(imLnRowNo - 1).iGame) Then
                    llSpots = 0
                    For ilDay = 0 To 6 Step 1
                        If smAirSave(4 + ilDay, ilWkIndex) <> "" Then
                            llSpots = llSpots + Val(smAirSave(4 + ilDay, ilWkIndex))
                        End If
                    Next ilDay
                Else
                    If tgClfCntr(imLnRowNo - 1).iGame Then
                        llSpots = 1
                    Else
                        llSpots = Val(smAirSave(3, ilWkIndex))
                    End If
                End If
                If llSpots = 0 Then
                    imAirSave(1, ilWkIndex) = 1
                End If
            End If
        Next ilWkIndex
    End If
    ilPrevCff = -1
    ilWkIndex = imLB1Or2    'LBound(smAirSave, 2)
    Do While ilWkIndex < UBound(smAirSave, 2)
        ilNoWkCombine = 1
        If imAirSave(1, ilWkIndex) = 0 Then  'Combine weeks( Air weeks only)
            If (smAirSave(13, ilWkIndex) = "N") And (Not mIsLnGame(imLnRowNo)) Then  'Not a split week
                ilMatch = True
                For ilLoop = ilWkIndex + 1 To UBound(smAirSave, 2) - 1 Step 1
                    If imAirSave(1, ilLoop) <> 0 Then
                        Exit For
                    End If
                    If smAirSave(13, ilLoop) = "Y" Then
                        Exit For
                    End If
                    'For ilIndex = LBound(smAirSave, 1) + 2 To UBound(smAirSave, 1) - 1 Step 1
                    For ilIndex = imLB1Or2 + 2 To UBound(smAirSave, 1) - 1 Step 1
                        If StrComp(smAirSave(ilIndex, ilWkIndex), smAirSave(ilIndex, ilLoop), 1) <> 0 Then
                            ilMatch = False
                            Exit For
                        End If
                    Next ilIndex
                    If Not ilMatch Then
                        Exit For
                    End If
                    ilNoWkCombine = ilNoWkCombine + 1
                Next ilLoop
            End If
            slStartDate = smAirSave(1, ilWkIndex)
            If smAirSave(13, ilWkIndex + ilNoWkCombine - 1) = "Y" Then
                slEndDate = smAirSave(2, ilWkIndex + ilNoWkCombine)
            Else
                slEndDate = smAirSave(2, ilWkIndex + ilNoWkCombine - 1)
            End If
            If ilCff = -1 Then  'Use next available
                'ilCffIndex = ilUpperBound
                '6/7/16: Moved code here
                'GoSub lObtainNextCff2
                ilCffIndex = -1
                For ilLoop = ilLastCffUsed To UBound(tgCffCntr) - 1 Step 1
                    If tgCffCntr(ilLoop).iStatus = -1 Then
                        'Test Chain
                        ilFound = False
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
                            ilTestCff = tgClfCntr(ilClf).iFirstCff
                            If ilTestCff = ilLoop Then
                                ilFound = True
                                Exit For
                            End If
                            Do While ilTestCff <> -1
                                ilTestCff = tgCffCntr(ilTestCff).iNextCff
                                If ilTestCff = ilLoop Then
                                    ilFound = True
                                    Exit For
                                End If
                            Loop
                        Next ilClf
                        If Not ilFound Then
                            ilCffIndex = ilLoop
                            ilLastCffUsed = ilLoop
                            Exit For
                        End If
                    End If
                Next ilLoop
                If ilCffIndex = -1 Then
                    ilCffIndex = UBound(tgCffCntr)
                    ilLastCffUsed = ilCffIndex
                    ReDim Preserve tgCffCntr(0 To ilCffIndex + 100) As CFFLIST
                    For ilLoop = ilCffIndex + 1 To UBound(tgCffCntr) Step 1
                        tgCffCntr(ilLoop).iStatus = -1 'Not Used
                        tgCffCntr(ilLoop).lRecPos = 0
                        tgCffCntr(ilLoop).iNextCff = -1
                    Next ilLoop
                End If
                tgCffCntr(ilCffIndex).iNextCff = -1
                tgCffCntr(ilCffIndex).iStatus = 0
                tgCffCntr(ilCffIndex).lRecPos = 0
                If tgClfCntr(imLnRowNo - 1).iFirstCff = -1 Then
                    tgClfCntr(imLnRowNo - 1).iFirstCff = ilCffIndex 'ilUpperBound
                Else
                    tgCffCntr(ilPrevCff).iNextCff = ilCffIndex  'ilUpperBound
                End If
                ilPrevCff = ilCffIndex  'ilUpperBound
            Else
                ilCffIndex = ilCff
                ilPrevCff = ilCff
                ilCff = tgCffCntr(ilCff).iNextCff
            End If
            If tgCffCntr(ilCffIndex).iStatus = -1 Then
                tgCffCntr(ilCffIndex).iStatus = 0   'New to not used
            ElseIf tgCffCntr(ilCffIndex).iStatus = 2 Then
                tgCffCntr(ilCffIndex).iStatus = 1    'Old to use
            End If
            If tgCffCntr(ilCffIndex).iStatus = 0 Then
                tgCffCntr(ilCffIndex).CffRec.lChfCode = tgChfCntr.lCode
            End If
            tgCffCntr(ilCffIndex).CffRec.iClfLine = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
            tgCffCntr(ilCffIndex).CffRec.iCntRevNo = tgClfCntr(imLnRowNo - 1).ClfRec.iCntRevNo
            tgCffCntr(ilCffIndex).CffRec.iPropVer = tgClfCntr(imLnRowNo - 1).ClfRec.iPropVer
            gPackDate slStartDate, tgCffCntr(ilCffIndex).CffRec.iStartDate(0), tgCffCntr(ilCffIndex).CffRec.iStartDate(1)
            gPackDate slEndDate, tgCffCntr(ilCffIndex).CffRec.iEndDate(0), tgCffCntr(ilCffIndex).CffRec.iEndDate(1)
            tgCffCntr(ilCffIndex).lStartDate = gDateValue(slStartDate)
            tgCffCntr(ilCffIndex).lEndDate = gDateValue(slEndDate)
            If (imAirSave(2, ilWkIndex) = 0) And (Not tgClfCntr(imLnRowNo - 1).iGame) Then
                tgCffCntr(ilCffIndex).CffRec.iSpotsWk = 0
                tgCffCntr(ilCffIndex).CffRec.sDyWk = "D"
                llSpots = 0
                For ilDay = 0 To 6 Step 1
                    If smAirSave(4 + ilDay, ilWkIndex) = "" Then
                        tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = 0
                    Else
                        tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = Val(smAirSave(4 + ilDay, ilWkIndex))
                        llSpots = llSpots + tgCffCntr(ilCffIndex).CffRec.iDay(ilDay)
                    End If
                Next ilDay
            Else
                If tgClfCntr(imLnRowNo - 1).iGame Then
                    tgCffCntr(ilCffIndex).CffRec.iSpotsWk = 0
                Else
                    tgCffCntr(ilCffIndex).CffRec.sDyWk = "W"
                    tgCffCntr(ilCffIndex).CffRec.iSpotsWk = Val(smAirSave(3, ilWkIndex))
                    llSpots = tgCffCntr(ilCffIndex).CffRec.iSpotsWk
                End If
                For ilDay = 0 To 6 Step 1
                    If smAirSave(4 + ilDay, ilWkIndex) = "Y" Then
                        tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = 1
                    Else
                        tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = 0
                    End If
                Next ilDay
            End If
            'Test if split week
            tgCffCntr(ilCffIndex).CffRec.sDelete = "N"
            If smAirSave(13, ilWkIndex) = "Y" Then
                ilWkIndex = ilWkIndex + 1
                tgCffCntr(ilCffIndex).CffRec.iXSpotsWk = Val(smAirSave(3, ilWkIndex))
                For ilDay = 0 To 6 Step 1
                    If smAirSave(4 + ilDay, ilWkIndex) = "Y" Then
                        tgCffCntr(ilCffIndex).CffRec.sXDay(ilDay) = "1"
                    Else
                        tgCffCntr(ilCffIndex).CffRec.sXDay(ilDay) = "0"
                    End If
                Next ilDay
            Else
                tgCffCntr(ilCffIndex).CffRec.iXSpotsWk = 0
                For ilDay = 0 To 6 Step 1
                    tgCffCntr(ilCffIndex).CffRec.sXDay(ilDay) = "0"
                Next ilDay
            End If
            'Determine if week existed- if so add week
            If ilStdPkg Then
                For llDate = gDateValue(slStartDate) To gDateValue(slEndDate) Step 7
                    ilFound = False
                    For ilLoop = LBound(tmFlWkInfo) To UBound(tmFlWkInfo) Step 1
                        If (llDate >= tmFlWkInfo(ilLoop).lDate) And (llDate <= tmFlWkInfo(ilLoop).lDate + 6) Then
                            If llSpots = tmFlWkInfo(ilLoop).iSpots Then
                                ilFound = True
                            End If
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        ilFound = mAddStdPkgWk(hmPvf, imLnRowNo, llDate, slWDFlag, llSpots, ilDailySpots(), ilLastCffUsed, tmRcf, imDGSave(), imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), hmCHF, hmClf, hmSdf, hmSmf, hmGhf, hmGsf)
                    End If
                Next llDate
            End If
            tgCffCntr(ilCffIndex).CffRec.sPriceType = ""
            gFindMatch smAirSave(11, ilWkIndex), 1, lbcPriceType(1)
            If gLastFound(lbcPriceType(1)) > 0 Then
                tgCffCntr(ilCffIndex).CffRec.sPriceType = Left$(lbcPriceType(1).List(gLastFound(lbcPriceType(1))), 1)
                tgCffCntr(ilCffIndex).CffRec.lActPrice = 0  'Later- might want to store average package price
            Else
                If smAirSave(11, ilWkIndex) <> "" Then
                    tgCffCntr(ilCffIndex).CffRec.sPriceType = "T"
                    If smLineType <> "E" Then
                        If tgCffCntr(ilCffIndex).CffRec.lActPrice <> gStrDecToLong(smAirSave(11, ilWkIndex), 2) Then
                            tgClfCntr(imLnRowNo - 1).sCurrentPrice = ""
                        End If
                        tgCffCntr(ilCffIndex).CffRec.lActPrice = gStrDecToLong(smAirSave(11, ilWkIndex), 2)
                    Else
                        If llSpots > 0 Then
                            tgCffCntr(ilCffIndex).CffRec.lActPrice = gStrDecToLong(smAirSave(11, ilWkIndex), 2)
                        Else
                            tgCffCntr(ilCffIndex).CffRec.lActPrice = 0
                        End If
                    End If
                Else
                    tgCffCntr(ilCffIndex).CffRec.sPriceType = ""    'Not defined
                    tgCffCntr(ilCffIndex).CffRec.lActPrice = 0
                End If
            End If
            '3/18/17: Determine actual price if not specified
            If Trim$(smAirSave(12, ilWkIndex)) = "" Then
                llWkPrice = mComputeRCWkPrice(tmRcf.iCode, imLnSave(1, imLnRowNo), slStartDate, tgClfCntr(imLnRowNo - 1).ClfRec.iVefCode, imLnRowNo)
                If llWkPrice > 0 Then
                    For ilDay = 0 To 6 Step 1
                        If tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) > 0 Then
                            ilDays(ilDay) = True
                        Else
                            ilDays(ilDay) = False
                        End If
                    Next ilDay
                    slStr = mRCPriceAdjust(tmRcf, llWkPrice, False, imLnRowNo, imDGSave(), 0, 0, Val(smLnSave(16, imLnRowNo)), llSpots, ilDays(), imLnSave(1, imLnRowNo))
                    smAirSave(12, ilWkIndex) = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                End If
            End If
            tgCffCntr(ilCffIndex).CffRec.lPropPrice = gStrDecToLong(smAirSave(12, ilWkIndex), 0)    '2)
        End If
        ilWkIndex = ilWkIndex + ilNoWkCombine
    Loop
    'If all flights removed- then its CBS
    If (ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff) And (ilCff <> -1) Then
        tgClfCntr(imLnRowNo - 1).iCancel = True
        gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate
        slEndDate = gDecOneDay(slStartDate)
        gPackDate slEndDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)
        gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), tgCffCntr(ilCff).lStartDate    'Week Start date
        gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), tgCffCntr(ilCff).lEndDate    'Week Start date
        smLnSave(14, imLnRowNo) = slStartDate
        smLnSave(15, imLnRowNo) = slEndDate
        If tgCffCntr(ilCff).iStatus = -1 Then
            tgCffCntr(ilCff).iStatus = 0    'Reset to new
        ElseIf tgCffCntr(ilCff).iStatus = 2 Then
            tgCffCntr(ilCff).iStatus = 1    'Reset old
        End If
        ilPrevCff = ilCff
        ilCff = tgCffCntr(ilCff).iNextCff
        Do While ilCff <> -1
            If tgCffCntr(ilCff).iStatus = 0 Then
                tgCffCntr(ilPrevCff).iNextCff = tgCffCntr(ilCff).iNextCff
                tgCffCntr(ilCff).iStatus = -1   'New to not used
                ilPrev = ilCff
                ilCff = tgCffCntr(ilCff).iNextCff
                tgCffCntr(ilPrev).iNextCff = -1
            ElseIf tgCffCntr(ilCff).iStatus = 1 Then
                ilPrevCff = ilCff
                tgCffCntr(ilCff).iStatus = 2    'Old to delete
                ilCff = tgCffCntr(ilCff).iNextCff
            Else
                ilCff = tgCffCntr(ilCff).iNextCff
            End If
        Loop
    Else
        'Note ilPrevCff is set to prev cff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = -1) Then
                tgCffCntr(ilPrevCff).iNextCff = tgCffCntr(ilCff).iNextCff
                tgCffCntr(ilCff).iStatus = -1   'New to not used
                ilPrev = ilCff
                ilCff = tgCffCntr(ilCff).iNextCff
                tgCffCntr(ilPrev).iNextCff = -1
            Else
                ilPrevCff = ilCff
                tgCffCntr(ilCff).iStatus = 2    'Old to delete
                ilCff = tgCffCntr(ilCff).iNextCff
            End If
        Loop
    End If
    If ilStdPkg Then
        For ilLoop = LBound(tmFlWkInfo) To UBound(tmFlWkInfo) - 1 Step 1
            llDate = tmFlWkInfo(ilLoop).lDate
            ilFound = False
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                        ilFound = True
                        Exit Do
                    End If
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If Not ilFound Then   'Delete week
                ilFound = mAddStdPkgWk(hmPvf, imLnRowNo, llDate, "W", 0, ilDailySpots(), ilLastCffUsed, tmRcf, imDGSave(), imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), hmCHF, hmClf, hmSdf, hmSmf, hmGhf, hmGsf)
            End If
        Next ilLoop
    End If
    If (Not imInSave) Or (slLineType <> "H") Then
        mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
    End If
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetDeaults                     *
'*                                                     *
'*             Created:8/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set contract defaults from     *
'*                      advertiser and/or agency       *
'*                                                     *
'*******************************************************
Private Sub mSetDefaults()
'
'   mSetDeaults
'   Where:
'

    Dim slNameCode As String  'Code and Code strings from Traffic!lbcLockBox or Traffic!lbcAgencyDP
    Dim slCode As String    'Code number- so record can be found
    Dim ilRet As Integer    'Return status
    Dim ilLoop As Integer
    Dim slRecCode As String
    'Dim ilFound As Integer
    Dim slPhone As String
    Dim slChfTarg As String
    Dim slAdfTarg As String
    Dim ilIndex As Integer
    'Set default status arrays
    For ilLoop = LBound(smDefSave) To UBound(smDefSave) Step 1
        smDefSave(ilLoop) = ""
        imDefSource(ilLoop) = -1
    Next ilLoop
    'Product
    If Trim$(tgChfCntr.sProduct) <> Trim$(tmAdf.sProduct) Then
        imDefSource(1) = 4  'User defined
    Else
        smDefSave(1) = Trim$(tmAdf.sProduct)
        imDefSource(1) = 0  'Advertiser
    End If
    'Agency
    If (Trim$(tmAdf.sBillAgyDir) = "D") And (tmAdf.iAgfCode = 0) Then
        If tgChfCntr.iAgfCode <> 0 Then
            imDefSource(2) = 4  'User defined
        Else
            smDefSave(2) = "0"
            imDefSource(2) = 0  'Advertiser
        End If
    Else
        If tgChfCntr.iAgfCode <> tmAdf.iAgfCode Then
            imDefSource(2) = 4  'User defined
        Else
            smDefSave(2) = Trim$(str$(tmAdf.iAgfCode))
            imDefSource(2) = 0  'Advt
        End If
    End If
    'Salesperson
    If tgChfCntr.iSlfCode(0) = tmAdf.iSlfCode Then
        smDefSave(3) = Trim$(str$(tmAdf.iSlfCode))
        imDefSource(3) = 0  'Advt
    ElseIf tgChfCntr.iSlfCode(0) <> tmAgf.iSlfCode Then
        smDefSave(3) = Trim$(str$(tmAgf.iSlfCode))
        imDefSource(3) = 1  'Agy
    Else
        imDefSource(3) = 4  'User defined
    End If
    'Competitive
    For ilLoop = 0 To 1 Step 1
        If tgChfCntr.iMnfComp(ilLoop) <> tmAdf.iMnfComp(ilLoop) Then
            imDefSource(4 + ilLoop) = 4 'User defined
        Else
            smDefSave(4 + ilLoop) = Trim$(str$(tmAdf.iMnfComp(ilLoop)))
            imDefSource(4 + ilLoop) = 0 'Advt
        End If
    Next ilLoop
    'Exclusions
    For ilLoop = 0 To 1 Step 1
        If tgChfCntr.iMnfExcl(ilLoop) <> tmAdf.iMnfExcl(ilLoop) Then
            imDefSource(17 + ilLoop) = 4 'User defined
        Else
            smDefSave(17 + ilLoop) = Trim$(str$(tmAdf.iMnfExcl(ilLoop)))
            imDefSource(17 + ilLoop) = 0 'Advt
        End If
    Next ilLoop
    If tgChfCntr.iMnfBus <> tmAdf.iMnfBus Then
        imDefSource(19) = 4 'User defined
    Else
        smDefSave(19) = Trim$(str$(tmAdf.iMnfBus))
        imDefSource(19) = 0 'Advt
    End If
    If tgChfCntr.lGuar <> tmAdf.lGuar Then
        imDefSource(20) = 4
    Else
        imDefSource(20) = 0
        smDefSave(20) = Trim$(str$(tmAdf.lGuar))
    End If
    'Buyer and Phone number
    'If (Trim$(tgChfCntr.sBuyer) = Trim$(tmPnf.sName)) And (tmPnf.iCode > 0) Then
    If ((tgChfCntr.iPnfBuyer = tmAdf.iPnfBuyer) And (tmAgf.iCode <= 0) And (tmPnf.iCode > 0)) Or ((tgChfCntr.iPnfBuyer = tmAgf.iPnfBuyer) And (tmAgf.iCode > 0) And (tmPnf.iCode > 0)) Then
        smDefSave(6) = Trim$(tmPnf.sName)
        If tmAgf.iCode > 0 Then
            imDefSource(6) = 1  'Agy
        Else
            imDefSource(6) = 0  'Advt
        End If
        If Trim$(tgChfCntr.sPhone) <> Trim$(tmPnf.sPhone) Then
            imDefSource(7) = 4
        Else
            slPhone = mkcPhone.Text
            gSetPhoneNo tmPnf.sPhone, mkcPhone
            smDefSave(7) = Trim$(mkcPhone.Text)
            mkcPhone.Text = slPhone
            If tmAgf.iCode > 0 Then
                imDefSource(6) = 1  'Agy
            Else
                imDefSource(7) = 0  'Advt
            End If
        End If
    Else
        imDefSource(6) = 4
        imDefSource(7) = 4
    End If
    'Demo
    If tgChfCntr.sCppCpm <> tmAdf.sCppCpm Then
        For ilLoop = 8 To 12 Step 1
            imDefSource(ilLoop) = 4
        Next ilLoop
    Else
        imDefSource(8) = 0
        smDefSave(8) = tmAdf.sCppCpm
        For ilLoop = 0 To 3 Step 1
            'If Trim$(tgChfCntr.sDemo(ilLoop)) <> Trim$(tmAdf.sDemo(ilLoop)) Then
            If tgChfCntr.iMnfDemo(ilLoop) <> tmAdf.iMnfDemo(ilLoop) Then
                imDefSource(8) = 4
                imDefSource(9 + 2 * ilLoop) = 4  'Only use index 8
                imDefSource(10 + 2 * ilLoop) = 4
            Else
                If imDefSource(8) < 0 Then
                    imDefSource(8) = 0
                End If
                imDefSource(9 + 2 * ilLoop) = 0
                'smDefSave(9 + 2 * ilLoop) = Trim$(tmAdf.sDemo(ilLoop))
                smDefSave(9 + 2 * ilLoop) = ""  'Trim$(tmAdf.sDemo(ilLoop))
                slRecCode = Trim$(str$(tmAdf.iMnfDemo(ilLoop)))
                For ilIndex = 0 To UBound(tgDemoCode) - 1 Step 1 'Traffic!lbcDemoCode.ListCount - 1 Step 1
                    slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    If slRecCode = slCode Then
                        smDefSave(9 + 2 * ilLoop) = lbcDemo(ilLoop).List(ilIndex + 1)
                        Exit For
                    End If
                Next ilIndex
                'gPDNToStr tgChfCntr.sTarget(ilLoop), 2, slChfTarg
                slChfTarg = gLongToStrDec(tgChfCntr.lTarget(ilLoop), 2)
                If tgChfCntr.sCppCpm = "P" Then
                    slChfTarg = Left$(slChfTarg, Len(slChfTarg) - 3) 'Remove decimal point
                End If
                'gPDNToStr tmAdf.sTarget(ilLoop), 2, slAdfTarg
                slAdfTarg = gLongToStrDec(tmAdf.lTarget(ilLoop), 2)
                If tmAdf.sCppCpm = "P" Then
                    slAdfTarg = Left$(slAdfTarg, Len(slAdfTarg) - 3) 'Remove decimal point
                End If
                'If Val(slChfTarg) <> Val(slAdfTarg) Then
                If tgChfCntr.lTarget(ilLoop) = tmAdf.lTarget(ilLoop) Then
                    imDefSource(8) = 4
                    imDefSource(10 + 2 * ilLoop) = 4
                Else
                    If imDefSource(8) < 0 Then
                        imDefSource(8) = 0
                    End If
                    imDefSource(10 + 2 * ilLoop) = 0
                    smDefSave(10 + 2 * ilLoop) = Trim$(str$(Val(slAdfTarg)))
                End If
            End If
        Next ilLoop
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetDifference                  *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set cbcDifference view mode    *
'*                                                     *
'*******************************************************
Public Sub mSetDifference(slCntrNo As String)
    Dim ilRet As Integer    'Return status
    Dim llCntrNo As Long
    Dim ilCntRevNo As Integer
    Dim ilPropVer As Integer
    Dim slCntRevNo As String
    Dim slExtRevNo As String
    Dim slPropVer As String
    'Dim slStr As String
    imChgMode = True
    imDiffMode = False
    cbcDifference.Clear
    ReDim lmDiffCntrCode(0 To 1) As Long
    If slCntrNo = "" Then
        imChgMode = False
        Exit Sub
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6)) Then
        llCntrNo = Val(slCntrNo)
        tmChfSrchKey1.lCntrNo = llCntrNo
        ilCntRevNo = 32000
        ilPropVer = 32000
        tmChfSrchKey1.iCntRevNo = ilCntRevNo
        tmChfSrchKey1.iPropVer = ilPropVer
        ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
        Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = llCntrNo)
            If tmChf.lCode <> tgChfCntr.lCode Then
                slCntRevNo = Trim$(str$(tmChf.iCntRevNo))
                slExtRevNo = Trim$(str$(tmChf.iExtRevNo))
                slPropVer = Trim$(str$(tmChf.iPropVer))
                If tmChf.iCntRevNo > 0 Then
                    cbcDifference.AddItem "R" & slCntRevNo & "-" & slExtRevNo & " Compare"
                Else
                    If (tmChf.sStatus = "W") Or (tmChf.sStatus = "C") Or (tmChf.sStatus = "I") Or (tmChf.sStatus = "D") Then
                        cbcDifference.AddItem "V" & slPropVer & " Compare"
                    Else
                        cbcDifference.AddItem "R" & slCntRevNo & "-" & slExtRevNo & " Compare"
                    End If
                End If
                lmDiffCntrCode(UBound(lmDiffCntrCode)) = tmChf.lCode
                ReDim Preserve lmDiffCntrCode(0 To UBound(lmDiffCntrCode) + 1) As Long
            End If
            ilRet = btrGetNext(hmCHF, tmChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        Loop
        'cmcCompute.Visible = False
        cmcScale.Visible = False
        If cbcDifference.ListCount <= 0 Then
            cbcDifference.Visible = False
        Else
            cbcDifference.AddItem "[Current]", 0
            cbcDifference.ListIndex = 0
            cbcDifference.Visible = True
            'Set tscLine.SelectedItem = tscLine.Tabs.Item(imTabMap(4))
            Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABAIRTIME))
        End If
    Else
        cbcDifference.Visible = False
        If sgCntrScreen <> "Orders" Then
            If igFreezeState = 0 Then
                cmcScale.Enabled = True
            Else
                cmcScale.Enabled = False
            End If
        End If
    End If
    imChgMode = False
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetFlightPrice                 *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set flight prices              *
'*                                                     *
'*******************************************************
Sub mSetFlightPrice(slInPrice As String, ilFromFlightArea As Integer)
    'Dim llTotalPrice As Long
    Dim slTotalPrice As String
    Dim slWkPrice As String
    Dim ilTotalSpots As Integer
    Dim ilLoop As Integer
    Dim llSpots As Long
    Dim llWkPrice As Long
    Dim ilDay As Integer
    Dim llAvgPrice As Long
    Dim slAvgPrice As String
    Dim slRound As String
    Dim slStr As String
    Dim ilCff As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llWkEndDate As Long
    Dim llSDate As Long
    Dim llEDate As Long
    Dim llDate As Long
    Dim slDate As String
    Dim llPrice As Long
    Dim slPriceType As String
    'Dim ilUpper As Integer
    Dim ilFirstWk As Integer
    Dim ilSetPropPrice As Integer
    Dim ilLastCffUsed As Integer
    Dim ilCffIndex As Integer
    Dim ilClf As Integer
    Dim ilTestCff As Integer
    Dim ilFound As Integer
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilDays(0 To 6) As Integer
    Dim llEndbilledDate As Long

    'llTotalPrice = 0
    slTotalPrice = ".00"
    ilTotalSpots = 0
    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
    llEndbilledDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate
    If (tgClfCntr(imLnRowNo - 1).iChgBilledPrice) And (Not ilFromFlightArea) Then
        llEndbilledDate = 0
        '1/3/07: Disallow period closed price to be changed
        gUnpackDateLong tgSpf.iRPRP(0), tgSpf.iRPRP(1), llEndbilledDate
    End If
    ilLastCffUsed = LBound(tgCffCntr)
    If slInPrice = lbcPriceType(0).List(2) Then  'Use average rate card price
        If ilFromFlightArea Then
            'For ilLoop = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
            For ilLoop = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
                llDate = gDateValue(smAirSave(1, ilLoop))
                If (llEndbilledDate = 0) Or ((llEndbilledDate <> 0) And (llEndbilledDate < llDate)) Then
                    If imAirSave(1, ilLoop) = 0 Then    'Air week
                        'Determine number of spots
                        llSpots = 0
                        If imAirSave(2, ilLoop) = 0 Then
                            For ilDay = 4 To 10 Step 1
                                llSpots = llSpots + Val(smAirSave(ilDay, ilLoop))
                                If Val(smAirSave(ilDay, ilLoop)) > 0 Then
                                    ilDays(ilDay - 4) = True
                                Else
                                    ilDays(ilDay - 4) = False
                                End If
                            Next ilDay
                        Else
                            llSpots = Val(smAirSave(3, ilLoop))
                            For ilDay = 4 To 10 Step 1
                                If smAirSave(ilDay, ilLoop) = "Y" Then
                                    ilDays(ilDay - 4) = True
                                Else
                                    ilDays(ilDay - 4) = False
                                End If
                            Next ilDay
                        End If
                        llWkPrice = mComputeRCWkPrice(tmRcf.iCode, imLnSave(1, imLnRowNo), smAirSave(1, ilLoop), imCntrVefCode, imLnRowNo)
                        If llWkPrice > 0 Then
                            If smDGSave(13) <> "" Then
                                llOvStartTime = gTimeToLong(smDGSave(13), False)
                                llOvEndTime = gTimeToLong(smDGSave(14), False)
                            Else
                                llOvStartTime = 0
                                llOvEndTime = 0
                            End If
                            slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, imLnRowNo, imDGSave(), llOvStartTime, llOvEndTime, Val(smLnSave(16, imLnRowNo)), llSpots, ilDays(), imLnSave(1, imLnRowNo))
                            smAirSave(12, ilLoop) = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                            llWkPrice = gStrDecToLong(smAirSave(12, ilLoop), 0)
                        Else
                            smAirSave(12, ilLoop) = ""
                        End If
                        'llTotalPrice = llTotalPrice + llSpots * llWkPrice
                        If smLineType <> "E" Then
                            slWkPrice = gMulStr(gLongToStrDec(llSpots, 0), gLongToStrDec(llWkPrice, 2))
                            slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                            ilTotalSpots = ilTotalSpots + llSpots
                        Else
                            slWkPrice = gLongToStrDec(llWkPrice, 2)
                            slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                            ilTotalSpots = ilTotalSpots + 1
                        End If
                    End If
                End If
            Next ilLoop
        Else
            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    llDate = llFlStartDate
                    llWkEndDate = llDate + 6
                    If llWkEndDate > llFlEndDate Then
                        llWkEndDate = llFlEndDate
                    End If
                    Do
                        If (llEndbilledDate = 0) Or ((llEndbilledDate <> 0) And (llEndbilledDate < llDate)) Then
                            slDate = Format$(llDate, "m/d/yy")
                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                llSpots = 0
                                For ilLoop = gWeekDayLong(llDate) To gWeekDayLong(llWkEndDate) Step 1
                                    llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                                Next ilLoop
                            Else
                                llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                            End If
                            For ilLoop = 0 To 6 Step 1
                                If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                                    ilDays(ilLoop) = True
                                Else
                                    ilDays(ilLoop) = False
                                End If
                            Next ilLoop
                            llWkPrice = mComputeRCWkPrice(tmRcf.iCode, imLnSave(1, imLnRowNo), slDate, imCntrVefCode, imLnRowNo)
                            If llWkPrice > 0 Then
                                slStr = mRCPriceAdjust(tmRcf, llWkPrice, False, imLnRowNo, imDGSave(), 0, 0, Val(smLnSave(16, imLnRowNo)), llSpots, ilDays(), imLnSave(1, imLnRowNo))
                                slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                                llWkPrice = gStrDecToLong(slStr, 0)
                            End If
                            'llTotalPrice = llTotalPrice + llSpots * llWkPrice
                            If smLineType <> "E" Then
                                slWkPrice = gMulStr(gLongToStrDec(llSpots, 0), gLongToStrDec(llWkPrice, 2))
                                slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                                ilTotalSpots = ilTotalSpots + llSpots
                            Else
                                slWkPrice = gLongToStrDec(llWkPrice, 2)
                                slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                                ilTotalSpots = ilTotalSpots + 1
                            End If
                        End If
                        llDate = llDate + 1
                        Do While gWeekDayLong(llDate) <> 0
                            llDate = llDate + 1
                        Loop
                        llWkEndDate = llDate + 6
                        If llWkEndDate > llFlEndDate Then
                            llWkEndDate = llFlEndDate
                        End If
                    Loop While llDate <= llFlEndDate
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
        End If
        If ilTotalSpots > 0 Then
            llAvgPrice = gStrDecToInt(gDivStr(slTotalPrice, gIntToStrDec(ilTotalSpots, 0)), 0)   'llTotalPrice / ilTotalSpots
        Else
            llAvgPrice = 0
        End If
        slAvgPrice = Trim$(str$(llAvgPrice)) & ".00"
        If tmRcf.iCode <> 0 Then
            slRound = gLongToStrDec(tmRcf.lRound, 2)
            slAvgPrice = gRoundStr(slAvgPrice, slRound, 2)
        End If
    End If
    If ilFromFlightArea Then
        'For ilLoop = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
        For ilLoop = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
            llDate = gDateValue(smAirSave(1, ilLoop))
            If (llEndbilledDate = 0) Or ((llEndbilledDate <> 0) And (llEndbilledDate < llDate)) Then
                If imAirSave(1, ilLoop) = 0 Then    'Air week
                    If slInPrice = lbcPriceType(0).List(1) Then  'Use rate card price
                        llWkPrice = mComputeRCWkPrice(tmRcf.iCode, imLnSave(1, imLnRowNo), smAirSave(1, ilLoop), imCntrVefCode, imLnRowNo)
                        If llWkPrice > 0 Then
                            llSpots = 0
                            If imAirSave(2, ilLoop) = 0 Then
                                For ilDay = 4 To 10 Step 1
                                    llSpots = llSpots + Val(smAirSave(ilDay, ilLoop))
                                    If Val(smAirSave(ilDay, ilLoop)) > 0 Then
                                        ilDays(ilDay - 4) = True
                                    Else
                                        ilDays(ilDay - 4) = False
                                    End If
                                Next ilDay
                            Else
                                llSpots = Val(smAirSave(3, ilLoop))
                                For ilDay = 4 To 10 Step 1
                                    If smAirSave(ilDay, ilLoop) = "Y" Then
                                        ilDays(ilDay - 4) = True
                                    Else
                                        ilDays(ilDay - 4) = False
                                    End If
                                Next ilDay
                            End If
                            If smDGSave(13) <> "" Then
                                llOvStartTime = gTimeToLong(smDGSave(13), False)
                                llOvEndTime = gTimeToLong(smDGSave(14), False)
                            Else
                                llOvStartTime = 0
                                llOvEndTime = 0
                            End If
                            slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, imLnRowNo, imDGSave(), llOvStartTime, llOvEndTime, Val(smLnSave(16, imLnRowNo)), llSpots, ilDays(), imLnSave(1, imLnRowNo))
                        Else
                            slStr = "0"
                        End If
                        smAirSave(11, ilLoop) = slStr
                        smAirSave(12, ilLoop) = slStr
                    ElseIf slInPrice = lbcPriceType(0).List(2) Then  'Use average rate card price
                        smAirSave(11, ilLoop) = slAvgPrice
                    Else
                        smAirSave(11, ilLoop) = slInPrice
                    End If
                Else
                    smAirSave(11, ilLoop) = ""
                End If
                If smAirSave(11, ilLoop) <> "" Then
                    If (Left$(smAirSave(11, ilLoop), 1) < "0") Or (Left$(smAirSave(11, ilLoop), 1) > "9") Then
                        'gSetShow pbcAirWk, smAirSave(11, ilLoop), tmAirCtrls(WKPRICEINDEX)
                        'smAirShow(WKPRICEINDEX, ilLoop) = tmAirCtrls(WKPRICEINDEX).sShow
                    Else
                        gFormatStr smAirSave(11, ilLoop), FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                        'gSetShow pbcAirWk, slStr, tmAirCtrls(WKPRICEINDEX)
                        'smAirShow(WKPRICEINDEX, ilLoop) = tmAirCtrls(WKPRICEINDEX).sShow
                    End If
                Else
                    'gSetShow pbcAirWk, "", tmAirCtrls(WKPRICEINDEX)
                    'smAirShow(WKPRICEINDEX, ilLoop) = tmAirCtrls(WKPRICEINDEX).sShow
                End If
            End If
        Next ilLoop
    Else
       '10843 remove dead code
'        If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType > 1) Then
'            If lmHSStartDate < 0 Then
'                mSetHdDate True, False
'            End If
'            llSDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
'            slDate = Format(llSDate, "m/d/yy")
'            gObtainMonthYear 0, slDate, ilCff, ilClf
'            slDate = Trim$(str$(3 * ((ilCff - 1) \ 3) + 1)) & "/15/" & Trim$(str$(ilClf))
'            llFlStartDate = gDateValue(gObtainStartStd(slDate))
'            llEDate = llSDate + 7 * 12 - 1
'            ilCff = (ilCff - 1) \ 3 + 1
'            llSpots = ilCff
'            Do While llSpots = ilCff
'                llEDate = llEDate + 7
'                slDate = Format(llEDate, "m/d/yy")
'                gObtainMonthYear 0, slDate, ilCff, ilClf
'                ilCff = (ilCff - 1) \ 3 + 1
'            Loop
'            llEDate = llEDate - 7
'            llSpots = 0
'        Else
            llSDate = 0
            llEDate = 999999999
      '  End If
        ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                llDate = llFlStartDate
                llWkEndDate = llDate + 6
                If llWkEndDate > llFlEndDate Then
                    llWkEndDate = llFlEndDate
                End If
                ilFirstWk = True
                Do
                    If (llDate >= llSDate) And (llDate <= llEDate) Then
                        If (llEndbilledDate = 0) Or ((llEndbilledDate <> 0) And (llEndbilledDate < llDate)) Then
                            slDate = Format$(llDate, "m/d/yy")
                            llWkPrice = mComputeRCWkPrice(tmRcf.iCode, imLnSave(1, imLnRowNo), slDate, imCntrVefCode, imLnRowNo)
                            If llWkPrice > 0 Then
                                For ilDay = 0 To 6 Step 1
                                    ilDays(ilDay) = False
                                Next ilDay
                                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                    llSpots = 0
                                    For ilDay = 0 To 6 Step 1
                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                            llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                            If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                                ilDays(ilDay) = True
                                            End If
                                        End If
                                    Next ilDay
                                Else
                                    llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                    For ilDay = 0 To 6 Step 1
                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                            If (tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilDay) = "1") Then
                                                ilDays(ilDay) = True
                                            End If
                                        End If
                                    Next ilDay
                                End If
                                slStr = mRCPriceAdjust(tmRcf, llWkPrice, False, imLnRowNo, imDGSave(), 0, 0, Val(smLnSave(16, imLnRowNo)), llSpots, ilDays(), imLnSave(1, imLnRowNo))
                                llWkPrice = gStrDecToLong(slStr, 0)
                            End If
                            If slInPrice = lbcPriceType(0).List(1) Then  'Use rate card price
                                slPriceType = "T"
                                llPrice = 100 * llWkPrice
                            ElseIf slInPrice = lbcPriceType(0).List(2) Then  'Use average rate card price
                                slPriceType = "T"
                                llPrice = gStrDecToLong(slAvgPrice, 2)  'llAvgPrice
                            Else
                                gFindMatch slInPrice, 1, lbcPriceType(0)
                                If gLastFound(lbcPriceType(0)) > 0 Then
                                    lbcPriceType(0).ListIndex = gLastFound(lbcPriceType(0))
                                    llPrice = 0
                                    Select Case lbcPriceType(0).ListIndex
                                        Case 3  'N/C
                                            slPriceType = "N"
                                        Case 4  'MG
                                            slPriceType = "M"
                                        Case 5  'Bonus
                                            slPriceType = "B"
                                        Case 6  'Spinoff
                                            slPriceType = "S"
                                        Case 7  'Package
                                            slPriceType = "P"
                                        Case 8  'Recaptureable
                                            slPriceType = "R"
                                        Case 9  'ADU
                                            slPriceType = "A"
                                    End Select
                                Else
                                    slPriceType = "T"
                                    llPrice = gStrDecToLong(slInPrice, 2)
                                End If
                            End If
                            If ilFirstWk Then
                                ilSetPropPrice = False
                                If tgCffCntr(ilCff).CffRec.sPriceType = "*" Then
                                    tgCffCntr(ilCff).CffRec.lPropPrice = llWkPrice
                                    ilSetPropPrice = True
                                End If
                                tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
                                If smLineType <> "E" Then
                                    tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                                Else
                                    tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                                End If
                                ilFirstWk = False
                            Else
                                If (tgCffCntr(ilCff).CffRec.lPropPrice <> llWkPrice) Or (tgCffCntr(ilCff).CffRec.lActPrice <> llPrice) Then
                                    'Split flight
                                     ilCffIndex = -1
                                    For ilLoop = ilLastCffUsed To UBound(tgCffCntr) - 1 Step 1
                                        If tgCffCntr(ilLoop).iStatus = -1 Then
                                            'Test Chain
                                            ilFound = False
                                            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
                                                ilTestCff = tgClfCntr(ilClf).iFirstCff
                                                If ilTestCff = ilLoop Then
                                                    ilFound = True
                                                    Exit For
                                                End If
                                                Do While ilTestCff <> -1
                                                    ilTestCff = tgCffCntr(ilTestCff).iNextCff
                                                    If ilTestCff = ilLoop Then
                                                        ilFound = True
                                                        Exit For
                                                    End If
                                                Loop
                                            Next ilClf
                                            If Not ilFound Then
                                                ilCffIndex = ilLoop
                                                ilLastCffUsed = ilLoop
                                                Exit For
                                            End If
                                        End If
                                    Next ilLoop
                                    If ilCffIndex = -1 Then
                                        ilCffIndex = UBound(tgCffCntr)
                                        ilLastCffUsed = ilCffIndex
                                        ReDim Preserve tgCffCntr(0 To ilCffIndex + 100) As CFFLIST
                                        For ilLoop = ilCffIndex + 1 To UBound(tgCffCntr) Step 1
                                            tgCffCntr(ilLoop).iStatus = -1 'Not Used
                                            tgCffCntr(ilLoop).lRecPos = 0
                                            tgCffCntr(ilLoop).iNextCff = -1
                                        Next ilLoop
                                    End If
                                    tgCffCntr(ilCffIndex) = tgCffCntr(ilCff)
                                    tgCffCntr(ilCffIndex).iStatus = 0
                                    tgCffCntr(ilCff).iNextCff = ilCffIndex
                                    'Set End Date
                                    gPackDateLong llDate - 1, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)
                                    tgCffCntr(ilCff).lEndDate = llDate - 1
                                    ilCff = ilCffIndex
                                    gPackDateLong llDate, tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1)
                                    tgCffCntr(ilCff).lStartDate = llDate
                                    If ilSetPropPrice Then
                                        tgCffCntr(ilCff).CffRec.lPropPrice = llWkPrice
                                    End If
                                    tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
                                    If smLineType <> "E" Then
                                        tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                                    Else
                                        tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                                    End If
                                End If
                            End If
                        End If
                    ElseIf llDate > llEDate Then
                        Exit Do
                    End If
                    llDate = llDate + 1
                    Do While gWeekDayLong(llDate) <> 0
                        llDate = llDate + 1
                    Loop
                    llWkEndDate = llDate + 6
                    If llWkEndDate > llFlEndDate Then
                        llWkEndDate = llFlEndDate
                    End If
                Loop While llDate <= llFlEndDate
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
       '10843 remove dead code
'        If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType > 1) Then
'            tgClfCntr(imLnRowNo - 1).sCurrentPrice = ""
'        Else
            tgClfCntr(imLnRowNo - 1).sCurrentPrice = slInPrice
 '       End If
        'If tgUrf(0).sUseComputeCMC <> "I" Then
            mInitLnTotals imLnRowNo, imLnTotalType, PRICEINDEX
        'End If
    End If
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetFocus                       *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mSetFocus(ilBoxNo As Integer)
'
'   mSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmHdCtrls)) Then
        Exit Sub
    End If
    If (ilBoxNo <> STATUSINDEX) And (ilBoxNo <> INTCOMMINDEX) And (ilBoxNo <> CANCLAUSEINDEX) And (ilBoxNo <> CHGREASONINDEX) And (ilBoxNo <> OTHERCOMMINDEX) Then
        If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            pbcClickFocus.SetFocus
            Exit Sub
        End If
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case STATUSINDEX 'Status
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case POTINDEX 'Potential
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case TYPEINDEX 'Type
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case CNTRNOINDEX 'Contract number
            If sgCntrScreen = "Orders" Then
                edcCntrNo.Visible = True  'Set visibility
                edcCntrNo.SetFocus
            End If
        Case REVNOINDEX 'Revision number
        Case DATEINDEX 'Date
        Case ADVTINDEX   'Advertiser
            cmcHdDropDown.Visible = True
            edcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case PRODUCTINDEX   'Product
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case SHTTITLEINDEX   'Short Title
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case AGENCYINDEX   'Agency
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case SPERSONINDEX   'Salesperson
        Case COMPINDEX   'Competitive
        Case BUYERINDEX 'Buyer
            edcHdDropDown.Visible = True  'Set visibility
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case PHONEINDEX 'Phone and extension
            mkcPhone.Visible = True  'Set visibility
            mkcPhone.SetFocus
        Case MERCHINDEX
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case PROMOINDEX
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case REVSETINDEX 'Revenue set
        Case SEGINDEX 'Segment
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case DEMOINDEX 'Demo Code
        Case GUARINDEX
            edcHdDropDown.Visible = True  'Set visibility
            'cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case TRADEINDEX '% Trade
        Case RATECARDINDEX 'Rate Card
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case GROSSINDEX 'Total Gross
            edcHdDropDown.Visible = True  'Set visibility
            'cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case BILLCYCLEINDEX 'Billing cycle
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case INVGROUPINDEX 'Invoice grouping
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case PRODTAGINDEX   'Product/Tag %
            edcHdDropDown.Visible = True  'Set visibility
            'cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case INTCOMMINDEX
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case CANCLAUSEINDEX
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case CHGREASONINDEX
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
        Case OTHERCOMMINDEX
            edcHdDropDown.Visible = True
            cmcHdDropDown.Visible = True
            edcHdDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetHdDate                      *
'*                                                     *
'*             Created:8/10/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine Start/End date of all*
'*                      lines- use cff instead of      *
'*                      smLnSave dates as this is      *
'*                      called after CCancel (line     *
'*                      terminate)                     *
'*                                                     *
'*******************************************************
Public Sub mSetHdDate(ilIncludeLast As Integer, ilSetTrueDate As Integer)
'
'   ilSetTrueDate(I)- True= ignore if scratch; False= test if scratch (always show from todays date, without this then when enter first line you could not enter one with a prior date on front screen)

    Dim llStartDate As Long
    Dim slStartDate As String
    Dim llEndDate As Long
    Dim slEndDate As String
    Dim slDate As String
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilMaxLn As Integer
    Dim llHSStartDate As Long
    Dim ilHSEndWkNo As Integer
    Dim ilCurWkNo As Integer
    Dim ilMonth As Integer
    Dim ilYear As Integer
    Dim llRow As Long
    Dim blNowDateUsed As Boolean
    
    llStartDate = 0
    llEndDate = 0
    llHSStartDate = lmHSStartDate
    ilHSEndWkNo = imHSEndWkNo
    ilCurWkNo = imHSCurWkNo
    If Not ilIncludeLast Then
        ilMaxLn = UBound(tgClfCntr) - 1
    Else
        If UBound(smLnSave, LINEBOUNDINDEX) <= UBound(tgClfCntr) Then
            ilMaxLn = UBound(tgClfCntr) - 1
        Else
            ilMaxLn = UBound(tgClfCntr)
        End If
    End If
    For ilClf = LBound(tgClfCntr) To ilMaxLn Step 1
        If (((tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1)) And (Not tgClfCntr(ilClf).iCancel)) Or (ilIncludeLast And (ilClf = ilMaxLn)) Then
            smLnSave(14, ilClf + 1) = ""
            smLnSave(15, ilClf + 1) = ""
            ilCff = tgClfCntr(ilClf).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate    'Week Start date
                    gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate    'Week Start date
                    If smLnSave(14, ilClf + 1) = "" Then
                        smLnSave(14, ilClf + 1) = slStartDate
                    End If
                    smLnSave(15, ilClf + 1) = slEndDate
                    'The test below should not be required as iCancel for the line
                    'should be set to True if the line is a CBS- leave test in for safety
                    If gDateValue(slEndDate) >= gDateValue(slStartDate) Then
                        If llStartDate = 0 Then
                            llStartDate = gDateValue(slStartDate)
                            llEndDate = gDateValue(slEndDate)
                        Else
                            If gDateValue(slStartDate) < llStartDate Then
                                llStartDate = gDateValue(slStartDate)
                            End If
                            If gDateValue(slEndDate) > llEndDate Then
                                llEndDate = gDateValue(slEndDate)
                            End If
                        End If
                    End If
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
        ElseIf tgClfCntr(ilClf).iCancel Then
            smLnSave(14, ilClf + 1) = ""
            smLnSave(15, ilClf + 1) = ""
            ilCff = tgClfCntr(ilClf).iFirstCff
            If ilCff <> -1 Then
                gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), smLnSave(14, ilClf + 1)    'Week Start date
                smLnSave(15, ilClf + 1) = gDecOneDay(smLnSave(14, ilClf + 1))
            End If
        End If
    Next ilClf
    If (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMSTARTDATE) <> "") Then
        For llRow = Contract.grdCPMBuy.FixedRows To Contract.grdCPMBuy.rows - 1 Step 1
            If (Contract.grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
                If Contract.grdCPMBuy.TextMatrix(llRow, CPMLNTYPE) <> "P" Then
                    If (Contract.grdCPMBuy.TextMatrix(llRow, CPMSTARTDATE) <> "CBS") And (Contract.grdCPMBuy.TextMatrix(llRow, CPMSTARTDATE) <> "Deleted") Then
                        If llStartDate = 0 Then
                            llStartDate = gDateValue(Contract.grdCPMBuy.TextMatrix(llRow, CPMSTARTDATE))
                        Else
                            If gDateValue(Contract.grdCPMBuy.TextMatrix(llRow, CPMSTARTDATE)) < llStartDate Then
                                llStartDate = gDateValue(Contract.grdCPMBuy.TextMatrix(llRow, CPMSTARTDATE))
                            End If
                        End If
                        If llEndDate = 0 Then
                            llEndDate = gDateValue(Contract.grdCPMBuy.TextMatrix(llRow, CPMENDDATE))
                        Else
                            If gDateValue(Contract.grdCPMBuy.TextMatrix(llRow, CPMENDDATE)) > llEndDate Then
                                llEndDate = gDateValue(Contract.grdCPMBuy.TextMatrix(llRow, CPMENDDATE))
                            End If
                        End If
                    End If
                End If
            End If
        Next llRow
    
    End If

    If (imStep1Index = 0) And (Not ilSetTrueDate) Then   'Force date to start on Today
        If (llStartDate = 0) Or (llStartDate > gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy")))) Then
            If llHSStartDate <= 0 Then
                llStartDate = gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy")))
                llEndDate = gDateValue(gObtainNextSunday(Format$(gNow(), "m/d/yy")))
            End If
        End If
    End If
    If sgCntrScreen = "Orders" Then
        If ((imStep1Index = 1) Or (imStep1Index = 2)) And (Not ilSetTrueDate) Then   'Force date to start on Today
            If (llStartDate = 0) Or ((llStartDate > llHSStartDate) And (llHSStartDate > 0)) Then
                If llStartDate = 0 Then
                    llStartDate = gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy")))
                    llEndDate = gDateValue(gObtainNextSunday(Format$(gNow(), "m/d/yy")))
                Else
                    llStartDate = llHSStartDate
                    'llEndDate = gDateValue(gObtainNextSunday(Format$(gNow(), "m/d/yy")))
                End If
            End If
        End If
    Else
        If ((imStep1Index = 1) Or (imStep1Index = 2) Or (imStep1Index = 3) Or (imStep1Index = 4)) And (Not ilSetTrueDate) Then   'Force date to start on Today
            If (llStartDate = 0) Or ((llStartDate > llHSStartDate) And (llHSStartDate > 0)) Then
                If llStartDate = 0 Then
                    llStartDate = gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy")))
                    llEndDate = gDateValue(gObtainNextSunday(Format$(gNow(), "m/d/yy")))
                Else
                    llStartDate = llHSStartDate
                    'llEndDate = gDateValue(gObtainNextSunday(Format$(gNow(), "m/d/yy")))
                End If
            End If
        End If
    End If
    'Test if CBS contract- if so default dates
    If (sgCntrScreen = "Orders") And (imUpdateAllowed) And (imStep1Index = 2) And (llStartDate = 0) And (ilSetTrueDate) Then
        llStartDate = gDateValue(smChfStartDate)
        llEndDate = gDateValue(smChfEndDate)
    ElseIf (sgCntrScreen <> "Orders") And (imUpdateAllowed) And (imStep1Index = 4) And (llStartDate = 0) And (ilSetTrueDate) Then
        llStartDate = gDateValue(smChfStartDate)
        llEndDate = gDateValue(smChfEndDate)
    End If
    If (imUpdateAllowed) And ((imStep1Index = 2) Or (imStep1Index = 1)) And (llStartDate = 0) Then
        llStartDate = gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy")))
        llEndDate = gDateValue(gObtainNextSunday(Format$(gNow(), "m/d/yy")))
    End If
    '6/13/06-  Add view mode to setting the date
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 5))) And (llStartDate = 0) And (ilSetTrueDate) Then
        llStartDate = gDateValue(smChfStartDate)
        llEndDate = gDateValue(smChfEndDate)
    End If
    If (llStartDate = 0) Or (llEndDate = 0) Then
        slStartDate = ""
        slEndDate = ""
        lmHSStartDate = -1
        imHSStartWkNo = 0
        imHSEndWkNo = 0
        imHSCurWkNo = 0
        gPackDate slStartDate, tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1)
        gPackDate slEndDate, tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1)
    Else
        slStartDate = Format$(llStartDate, "m/d/yy")
        slEndDate = Format$(llEndDate, "m/d/yy")
        gPackDate slStartDate, tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1)
        gPackDate slEndDate, tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1)
        If ((sgCntrScreen = "Orders") And (imStep1Index >= 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 5)) Then
           '10843 remove dead code
'            If tgSpf.sCLnStdQt = "Y" Then
'                'Determine start of Quarter
'                gObtainMonthYear 0, slStartDate, ilMonth, ilYear
'                slDate = Trim$(str$(3 * ((ilMonth - 1) \ 3) + 1)) & "/15/" & Trim$(str$(ilYear))
'                slStartDate = gObtainStartStd(slDate)
'            End If
            lmHSStartDate = gDateValue(gObtainPrevMonday(slStartDate))
            imHSStartWkNo = 1
            imHSEndWkNo = (llEndDate - lmHSStartDate) \ 7 + 1
        Else
            slStartDate = gObtainPrevMonday(Format$(gNow(), "m/d/yy"))
            If gDateValue(slStartDate) > llStartDate Then
                slStartDate = Format$(llStartDate, "m/d/yy")
            Else
               '10843 remove dead code
'                If tgSpf.sCLnStdQt = "Y" Then
'                    slStartDate = Format$(llStartDate, "m/d/yy")
'                Else
                    slDate = Format$(llStartDate, "m/d/yy")
                    slDate = gObtainYearStartDate(0, slDate)
                    If gDateValue(slStartDate) < gDateValue(slDate) Then
                        slStartDate = slDate
                    End If
                'End If
            End If
           '10843 remove dead code
'            If tgSpf.sCLnStdQt = "Y" Then
'                'Determine start of Quarter
'                gObtainMonthYear 0, slStartDate, ilMonth, ilYear
'                slDate = Trim$(str$(3 * ((ilMonth - 1) \ 3) + 1)) & "/15/" & Trim$(str$(ilYear))
'                slStartDate = gObtainStartStd(slDate)
'            End If
            lmHSStartDate = gDateValue(gObtainPrevMonday(slStartDate))
            imHSStartWkNo = 1
            imHSEndWkNo = (llEndDate - lmHSStartDate) \ 7 + 1
            'Allow new weeks to be added
            If imHSEndWkNo < 104 Then
                imHSEndWkNo = 104
            End If
        End If
        If llHSStartDate = lmHSStartDate Then
            If imHSCurWkNo <= imHSEndWkNo Then
            Else
                imHSCurWkNo = 1
            End If
        ElseIf llHSStartDate < lmHSStartDate Then
            If (lmHSStartDate - llHSStartDate) \ 7 < imHSCurWkNo Then
                '10843 remove dead code
'                If tgSpf.sCLnStdQt = "Y" Then
'                    imHSCurWkNo = 1
'                Else
                    imHSCurWkNo = imHSCurWkNo - (lmHSStartDate - llHSStartDate) \ 7
              '  End If
            Else
                If lmHSStartDate < llStartDate Then
                   '10843 remove dead code
'                    If tgSpf.sCLnStdQt = "Y" Then
'                        imHSCurWkNo = 1
'                    Else
                        imHSCurWkNo = (llStartDate - lmHSStartDate) \ 7 + 1 '1
                   ' End If
                Else
                    imHSCurWkNo = 1
                End If
            End If
        ElseIf llHSStartDate > lmHSStartDate Then
            If (llHSStartDate - lmHSStartDate) \ 7 + imHSCurWkNo <= 104 Then
               '10843 remove dead code
'                If tgSpf.sCLnStdQt = "Y" Then
'                    imHSCurWkNo = 1
'                Else
                    imHSCurWkNo = imHSCurWkNo + (llHSStartDate - lmHSStartDate) \ 7
              '  End If
            Else
                imHSCurWkNo = 1
            End If
        Else
            imHSCurWkNo = 1
        End If
        If (llHSStartDate <> lmHSStartDate) Or (ilCurWkNo = imHSCurWkNo) Then
           '10843 remove dead code
'            If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType >= 2) Then
'                imLnTotalType = imHSCurWkNo
'                lacPrice_Click 0
'            Else
                pbcLnTotal.Cls
                pbcLnDates.Cls
                pbcLine.Cls
                pbcLine_Paint
                If plcDemoBar.Visible Then
                    pbcDemoBar(1).Cls
                    pbcDemoBar_Paint 1
                End If
'            End If
        End If
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetRevNo                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set cbcDifference view mode    *
'*                                                     *
'*******************************************************
Public Sub mSetRevNo()
    Dim ilRet As Integer    'Return status
    Dim ilCntRevNo As Integer
    Dim ilPropVer As Integer
    Dim slCntRevNo As String
    Dim slExtRevNo As String
    'Dim slPropVer As String
    'Dim slStr As String
    Dim ilIndex As Integer

    imChgMode = True
    lbcRevNo.Clear
    ReDim lmRevNoCode(0 To 1) As Long
    ilIndex = -1
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
        tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
        ilCntRevNo = 32000
        ilPropVer = 32000
        tmChfSrchKey1.iCntRevNo = ilCntRevNo
        tmChfSrchKey1.iPropVer = ilPropVer
        ilRet = gCHF1GetGreaterOrEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
        Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tgChfCntr.lCntrNo)
            slCntRevNo = Trim$(str$(tmChf.iCntRevNo))
            slExtRevNo = Trim$(str$(tmChf.iExtRevNo))
            lbcRevNo.AddItem "R" & slCntRevNo & "-" & slExtRevNo
            If tgChfCntr.lCode = tmChf.lCode Then
                ilIndex = lbcRevNo.ListCount - 1
            End If
            lmRevNoCode(UBound(lmRevNoCode)) = tmChf.lCode
            ReDim Preserve lmRevNoCode(0 To UBound(lmRevNoCode) + 1) As Long
            ilRet = btrGetNext(hmCHF, tmChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        Loop
        lbcRevNo.ListIndex = ilIndex
    End If
    imChgMode = False
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetRowVisible                  *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set row so it is visible       *
'*                      on the screen                  *
'*                                                     *
'*******************************************************
Private Sub mSetRowVisible()
    Dim ilLineNo As Integer
    If (imLnRowNo < LBound(tgClfCntr) + 1) Or (imLnRowNo > UBound(tgClfCntr) + 1) Then
        Exit Sub
    End If
    If (bgHideHiddenLines = True) Then
        ilLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine
        edcLineNo(0).Text = ilLineNo
        imDelaySrce = 3
        tmcDelay_Timer
    Else
        imMoveLnRowNo = mFindPaintLnRowNo(imLnRowNo)
        If (imMoveLnRowNo < vbcLines.Value + 1) Or (imMoveLnRowNo >= vbcLines.Value + vbcLines.LargeChange + 2) Then
            imSettingValue = True
            vbcLines.Value = vbcLines.Min
            Do While (imMoveLnRowNo < vbcLines.Value + 1) Or (imMoveLnRowNo >= vbcLines.Value + vbcLines.LargeChange + 2)
                imSettingValue = True
                vbcLines.Value = vbcLines.Value + 1
            Loop
            'Force line to top if possible
            Do While imMoveLnRowNo <> vbcLines.Value + 1
                If vbcLines.Value + 1 > vbcLines.Max Then
                    Exit Do
                End If
                imSettingValue = True
                vbcLines.Value = vbcLines.Value + 1
            Loop
    
        End If
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetShow                        *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Public Sub mSetShow(ilBoxNo As Integer)
'
'   mSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim slStr As String
    ReDim slTarg(0 To 3) As String
    Dim ilPos As Integer
    Dim slFirst As String
    Dim slLast As String
    Dim slCode As String
    Dim slNameCode As String
    Dim ilRcfCode As Integer
    Dim ilRet As Integer
    Dim slStamp As String
    Dim ilLoop As Integer
    Dim ilFirst As Integer
    Dim flWidth As Single
    Dim flSvWidth As Single
    Dim ilCount As Integer
    Dim ilFound As Integer
    Dim ilRcf As Integer
    Dim ilVeh As Integer
    Dim ilAllNeg As Integer
    Dim slLineType As String
    'If (ilBoxNo < LBound(tmHdCtrls)) Or (ilBoxNo > UBound(tmHdCtrls)) Then
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmHdCtrls)) Then
        Exit Sub
    End If
    
    '2/4/16: Add filter to handle the case where the name has illegal characters and it was pasted into the field
    If (ilBoxNo = PRODUCTINDEX) Then
        '9760
        'slStr = gReplaceIllegalCharacters(edcHdDropDown.Text)
        slStr = gRemoveIllegalPastedChar(edcHdDropDown.Text)
        edcHdDropDown.Text = slStr
    End If
    
    mSetChg imHdBoxNo
    Select Case ilBoxNo 'Branch on box type (control)
        Case STATUSINDEX
            lbcStatus.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcStatus.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcStatus.List(lbcStatus.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case POTINDEX
            lbcPot.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcPot.ListIndex < 2 Then
                slStr = ""
            Else
                slStr = lbcPot.List(lbcPot.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case TYPEINDEX 'Type
            lbcType.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcType.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcType.List(lbcType.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            lbcDWP.Clear
            If StrComp(slStr, "[Allocation Contracts]", 1) = 0 Then
                lbcDWP.AddItem "Daily"
                lbcDWP.AddItem "Weekly"
                lbcDWP.AddItem "Daily by %"
                lbcDWP.AddItem "Weekly by %"
            Else
                lbcDWP.AddItem "Daily"
                lbcDWP.AddItem "Weekly"
            End If
        Case CNTRNOINDEX 'Contract number
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
                mNoSetShow imNoBoxNo
                imNoBoxNo = -1
                pbcNumber.Visible = False
                plcShare.Visible = False
                slStr = smPropNo
                gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            'End If
        Case PROPVERINDEX 'Proposal Number
            edcPropVer.Visible = False  'Set visibility
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            slStr = edcPropVer.Text
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case REVNOINDEX 'Revision number
            'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
            If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) Then
                pbcHdSTab.Enabled = False
                pbcHdTab.Enabled = False
                lbcRevNo.Visible = False
                cmcHdDropDown.Visible = False
                edcRevNo.Visible = False  'Set visibility
                pbcLnDates.Visible = True
                slStr = edcRevNo.Text
                If lbcRevNo.ListIndex >= 0 Then
                    If (lmRevNoCode(lbcRevNo.ListIndex + 1) <> tgChfCntr.lCode) Or (cbcDifference.ListIndex > 0) Then
                        tmChfSrchKey.lCode = lmRevNoCode(lbcRevNo.ListIndex + 1)
                        ilRet = btrGetEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        imStep2Index = -1
                        imStepBoxNo = 2
                        mStep2IndexPop
                        If lbcStep(1).ListIndex <> 0 Then
                            lbcStep(1).ListIndex = 0    'by number
                        Else
                            lbcStep(1).ListIndex = -1
                            lbcStep(1).ListIndex = 0
                        End If
                        mStepSetShow 2
                        imStepBoxNo = 3
                        edcStepDropDown.MaxLength = 25
                        edcStepDropDown.Text = Trim$(str$(tmChf.lCntrNo)) & " R" & Trim$(str$(tmChf.iCntRevNo)) & "-" & Trim$(str$(tmChf.iExtRevNo))
                        slStr = edcStepDropDown.Text
                        gSetShow pbcSelect, slStr, tmStepCtrls(imStepBoxNo)
                        pbcSelect.Cls
                        pbcSelect_Paint
                        mSelectChange
                    End If
                    pbcClickFocus.SetFocus
                    Exit Sub
                End If
            Else
                edcRevNo.Visible = False  'Set visibility
                If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                    pbcClickFocus.SetFocus
                    Exit Sub
                End If
                slStr = edcRevNo.Text
                If Val(slStr) <> imFromExtRevNo Then
                    imToExtRevNo = Val(slStr)
                End If
                slStr = Trim$(str$(tgChfCntr.iCntRevNo)) & "-" & slStr
                gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            End If
        Case ADVTINDEX   'Advertiser
            lbcAdvt.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcAdvt.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcAdvt.List(lbcAdvt.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            If lbcAdvt.ListIndex >= 1 Then
                slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mSetShowErr
                gCPErrorMsg ilRet, "mSetShowRec (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                tmAdfSrchKey.iCode = CInt(slCode)
                slStamp = gFileDateTime(sgDBPath & "Adf.btr") & Trim$(str$(tmAdfSrchKey.iCode))
                If smAdfStamp <> slStamp Then
                    smAdfStamp = slStamp
                    mClearPodTartget
                    If tmAdfSrchKey.iCode <> 0 Then
                        ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        On Error GoTo mSetShowErr
                        gBtrvErrorMsg ilRet, "mSetShow (btrGetEqual:Advertiser)", Contract
                        On Error GoTo 0
                        If (tmAdf.iPnfBuyer > 0) And (tmAdf.sBillAgyDir = "D") Then
                            tmPnfSrchKey.iCode = tmAdf.iPnfBuyer
                            ilRet = btrGetEqual(hmPnf, tmPnf, imPnfRecLen, tmPnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                            On Error GoTo mSetShowErr
                            gBtrvErrorMsg ilRet, "mSetShow (btrGetEqual:Personnel)", Contract
                            On Error GoTo 0
                        End If
                        mBuyerPop 0, tmAdf.iCode
                        mResetDefaults True
                    Else
                        tmAdf.iCode = 0
                        tmAdf.sName = ""
                        tmAdf.iAgfCode = 0
                        tmAdf.iSlfCode = 0
                        smAdfStamp = ""
                    End If
                End If
            Else
                tmAdf.iCode = 0
                tmAdf.sName = ""
                tmAdf.iAgfCode = 0
                tmAdf.iSlfCode = 0
                smAdfStamp = ""
            End If
            mSetCreditInfo
            igDirAdvt = False
            If tmAdf.sBillAgyDir = "D" Then
                igDirAdvt = True
            End If
        Case PRODUCTINDEX   'Product
            lbcProd.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
'            smProduct = edcDropDown.Text
            gSetShow pbcHeader, smProduct, tmHdCtrls(ilBoxNo)
            mSetSource 1, smProduct
        Case SHTTITLEINDEX   'Short Title
            lbcShtTitle.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
'            smProduct = edcDropDown.Text
            gSetShow pbcHeader, smShtTitle, tmHdCtrls(ilBoxNo)
        Case AGENCYINDEX   'Agency
            lbcAgency.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcAgency.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcAgency.List(lbcAgency.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            If lbcAgency.ListIndex >= 2 Then
                slNameCode = tmCntAgency(lbcAgency.ListIndex - 2).sKey    'Traffic!lbcAgency.List(lbcAgency.ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mSetShowErr
                gCPErrorMsg ilRet, "mSetShow (gParseItem field 2)", Contract
                On Error GoTo 0
                slCode = Trim$(slCode)
                tmAgfSrchKey.iCode = CInt(slCode)
                slStamp = gFileDateTime(sgDBPath & "Agf.btr") & Trim$(str$(tmAgfSrchKey.iCode))
                If smAgfStamp <> slStamp Then
                    smAgfStamp = slStamp
                    If tmAgfSrchKey.iCode <> 0 Then
                        ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        On Error GoTo mSetShowErr
                        gBtrvErrorMsg ilRet, "mSetShow (btrGetEqual:Agency)", Contract
                        On Error GoTo 0
                        If tmAgf.iPnfBuyer > 0 Then
                            tmPnfSrchKey.iCode = tmAgf.iPnfBuyer
                            ilRet = btrGetEqual(hmPnf, tmPnf, imPnfRecLen, tmPnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                            On Error GoTo mSetShowErr
                            gBtrvErrorMsg ilRet, "mSetShow (btrGetEqual:Personnel)", Contract
                            On Error GoTo 0
                        Else
                            tmPnf.iCode = 0
                        End If
                        mBuyerPop 1, tmAgf.iCode
                        mResetDefaults False
                    Else
                        tmAgf.iCode = 0
                        tmAgf.sName = ""
                        tmAgf.iSlfCode = 0
                        smAgfStamp = ""
                    End If
                End If
            Else
                tmAgf.iCode = 0
                tmAgf.sName = ""
                tmAgf.iSlfCode = 0
                smAgfStamp = ""
            End If
            '10/27/14: set 1 or 2 place rating
            smCntr1or2PlaceRating = gSet1or2PlaceRating(tmAgf.iCode)
            If lbcAgency.ListIndex >= 2 Then
                slNameCode = tmCntAgency(lbcAgency.ListIndex - 2).sKey    'Traffic!lbcAgency.List(lbcAgency.ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                slCode = Trim$(slCode)
                mSetSource 2, slCode
            ElseIf lbcAgency.ListIndex = 1 Then
                mSetSource 2, "0"
            End If
            mSetCreditInfo
        Case SPERSONINDEX   'Salesperson
            mSPSetShow imSPBoxNo
            imSPBoxNo = -1
            pbcSPerson.Visible = False
            plcShare.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            slStr = smSlspName(0)
            If (Not igSlfFirstNameFirst) Then
                ilPos = InStr(slStr, ",")
                If ilPos > 0 Then
                    slLast = Left$(slStr, ilPos - 1)
                    slFirst = right$(slStr, Len(slStr) - ilPos - 1)
                    slStr = slFirst & " " & slLast
                End If
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case COMPINDEX
            mCESetShow imCEBoxNo
            imCEBoxNo = -1
            pbcCE.Visible = False
            plcShare.Visible = False
            If Not imUpdateAllowed Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            flSvWidth = tmHdCtrls(ilBoxNo).fBoxW
            ilCount = 0
            For ilLoop = 0 To 1 Step 1
                If lbcComp(ilLoop).ListIndex > 1 Then
                    ilCount = ilCount + 1
                End If
                If lbcExcl(ilLoop).ListIndex > 1 Then
                    ilCount = ilCount + 1
                End If
                If ((Asc(tgSpf.sOptionFields) And OFBUSCAT) = OFBUSCAT) Then
                    If lbcBusCat.ListIndex > 0 Then
                        ilCount = ilCount + 1
                    End If
                End If
            Next ilLoop
            slStr = ""
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            If ilCount > 0 Then
                flWidth = tmHdCtrls(ilBoxNo).fBoxW / ilCount
            Else
                flWidth = tmHdCtrls(ilBoxNo).fBoxW
            End If
            ilCount = 0
            slStr = ""
            For ilLoop = 0 To 1 Step 1
                If lbcComp(ilLoop).ListIndex > 1 Then
                    If ilCount > 0 Then
                        slStr = slStr & "," ' "/"
                    End If
                    ilCount = ilCount + 1
                    slStr = slStr & lbcComp(ilLoop).List(lbcComp(ilLoop).ListIndex)
                    tmHdCtrls(ilBoxNo).fBoxW = ilCount * flWidth
                    gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
                End If
            Next ilLoop
            If ((Asc(tgSpf.sOptionFields) And OFBUSCAT) = OFBUSCAT) Then
                If lbcBusCat.ListIndex > 0 Then
                    If ilCount > 0 Then
                        slStr = slStr & "," ' "/"
                    End If
                    ilCount = ilCount + 1
                    slStr = slStr & lbcBusCat.Text
                    tmHdCtrls(ilBoxNo).fBoxW = ilCount * flWidth
                    gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
                End If
            End If
            For ilLoop = 0 To 1 Step 1
                If lbcExcl(ilLoop).ListIndex > 1 Then
                    If ilCount > 0 Then
                        slStr = slStr & "," ' "/"
                    End If
                    ilCount = ilCount + 1
                    slStr = slStr & lbcExcl(ilLoop).List(lbcExcl(ilLoop).ListIndex)
                    tmHdCtrls(ilBoxNo).fBoxW = ilCount * flWidth
                    gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
                End If
            Next ilLoop
            tmHdCtrls(ilBoxNo).fBoxW = flSvWidth
            If lbcComp(0).ListIndex >= 2 Then
                slNameCode = tgCompCode(lbcComp(0).ListIndex - 2).sKey 'Traffic!lbcCompCode.List(lbcComp(0).ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                slCode = Trim$(slCode)
                mSetSource 4, slCode
            ElseIf lbcComp(0).ListIndex = 1 Then
                mSetSource 4, "0"
            End If
            If lbcComp(1).ListIndex >= 2 Then
                slNameCode = tgCompCode(lbcComp(1).ListIndex - 2).sKey 'Traffic!lbcCompCode.List(lbcComp(1).ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                slCode = Trim$(slCode)
                mSetSource 5, slCode
            ElseIf lbcComp(1).ListIndex = 1 Then
                mSetSource 5, "0"
            End If
            If lbcExcl(0).ListIndex >= 2 Then
                slNameCode = tgExclCode(lbcExcl(0).ListIndex - 2).sKey 'Traffic!lbcExclCode.List(lbcExcl(0).ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                slCode = Trim$(slCode)
                mSetSource 17, slCode
            ElseIf lbcExcl(0).ListIndex = 1 Then
                mSetSource 17, "0"
            End If
            If lbcExcl(1).ListIndex >= 2 Then
                slNameCode = tgExclCode(lbcExcl(1).ListIndex - 2).sKey 'Traffic!lbcExclCode.List(lbcExcl(1).ListIndex - 2)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                slCode = Trim$(slCode)
                mSetSource 18, slCode
            ElseIf lbcExcl(1).ListIndex = 1 Then
                mSetSource 18, "0"
            End If
            If (UCase(Trim(lbcComp(0).Text)) <> UCase(Trim(smComp0))) Or (UCase(Trim(lbcComp(1).Text)) <> UCase(Trim(smComp1))) Then
                smComp0 = lbcComp(0).Text
                smComp1 = lbcComp(1).Text
                mClearAvails -1
            End If
            
        Case BUYERINDEX 'Buyer
            cmcHdDropDown.Visible = False
            edcHdDropDown.Visible = False  'Set visibility
            lbcBuyer.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcBuyer.ListIndex <= 0 Then
                slStr = ""
            Else
                slStr = lbcBuyer.List(lbcBuyer.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            If smBuyer <> Trim$(slStr) Then
                smBuyer = slStr
                If lbcBuyer.ListIndex >= 2 Then
                    mSetSource 6, slStr
                    slNameCode = tmCntBuyerCode(lbcBuyer.ListIndex - 2).sKey  'Traffic!lbcBuyerCode.List(lbcBuyer.ListIndex - 2)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    On Error GoTo mSetShowErr
                    gCPErrorMsg ilRet, "mSetShow (gParseItem field 2)", Contract
                    On Error GoTo 0
                    slCode = Trim$(slCode)
                    tmPnfSrchKey.iCode = CInt(slCode)
                    If tmPnfSrchKey.iCode <> 0 Then
                        ilRet = btrGetEqual(hmPnf, tmPnf, imPnfRecLen, tmPnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        On Error GoTo mSetShowErr
                        gBtrvErrorMsg ilRet, "mSetShow (btrGetEqual:Personnel)", Contract
                        On Error GoTo 0
                        gSetPhoneNo tmPnf.sPhone, mkcPhone
                        If mkcPhone.Text = smPhoneImage Then
                            slStr = ""
                        Else
                            slStr = mkcPhone.Text
                        End If
                        If slStr <> "" Then
                            If InStr(slStr, "(____)") <> 0 Then
                                ilPos = InStr(slStr, "Ext(")
                                slStr = Left$(slStr, ilPos - 1)
                            End If
                        End If
                        gSetShow pbcHeader, slStr, tmHdCtrls(PHONEINDEX)
                    Else
                        mkcPhone.Text = smPhoneImage
                        slStr = ""
                        gSetShow pbcHeader, slStr, tmHdCtrls(PHONEINDEX)
                    End If
                Else
                    mkcPhone.Text = smPhoneImage
                    slStr = ""
                    gSetShow pbcHeader, slStr, tmHdCtrls(PHONEINDEX)
                End If
            End If
        Case PHONEINDEX 'Phone and extension
            mkcPhone.Visible = False  'Set visibility
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If mkcPhone.Text = smPhoneImage Then
                slStr = ""
            Else
                slStr = mkcPhone.Text
            End If
            If slStr <> "" Then
                If InStr(slStr, "(____)") <> 0 Then
                    ilPos = InStr(slStr, "Ext(")
                    slStr = Left$(slStr, ilPos - 1)
                End If
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case SHAREINDEX '% Budget
            mSBSetShow imSBBoxNo
            imSBBoxNo = -1
            pbcShareBudget.Visible = False
            plcShare.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If

            slStr = smShareBudgetPct(0)
            gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case MERCHINDEX   'Merchandising
            If plcComment.Visible Then
                plcComment.Visible = False  'Set visibility
                If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
                    smComment(0) = edcComment.Text
                End If
            End If
            imInCommentBranch = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            lbcComment(0).Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcComment(0).ListIndex < 0 Then
                smComment(0) = ""
                slStr = ""
            ElseIf lbcComment(0).ListIndex = 0 Then
                smComment(0) = ""
                slStr = "[None]"
            Else
                smComment(0) = edcComment.Text
                slStr = Left$(smComment(0), 20)
                For ilLoop = 0 To 3 Step 1
                    If ckcCommOn(ilLoop).Value = vbChecked Then
                        imCommShowOn(0, ilLoop) = 0
                    Else
                        imCommShowOn(0, ilLoop) = 1
                    End If
                    imCommShowOn(0, 2) = 1
                    imCommShowOn(0, 4) = 1
                Next ilLoop
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case PROMOINDEX   'Promotion
            If plcComment.Visible Then
                plcComment.Visible = False  'Set visibility
                If (imUpdateAllowed) And (Not igRepNetChgAllowed) Then
                    smComment(1) = edcComment.Text
                End If
            End If
            imInCommentBranch = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            lbcComment(0).Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcComment(0).ListIndex < 0 Then
                smComment(1) = ""
                slStr = ""
            ElseIf lbcComment(0).ListIndex = 0 Then
                smComment(1) = ""
                slStr = "[None]"
            Else
                smComment(1) = edcComment.Text
                slStr = Left$(smComment(1), 20)
                For ilLoop = 0 To 3 Step 1
                    If ckcCommOn(ilLoop).Value = vbChecked Then
                        imCommShowOn(1, ilLoop) = 0
                    Else
                        imCommShowOn(1, ilLoop) = 1
                    End If
                    imCommShowOn(1, 2) = 1
                    imCommShowOn(1, 4) = 1
                Next ilLoop
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case REVSETINDEX 'Revenue sets
            mRSSetShow imSBBoxNo
            imRSBoxNo = -1
            pbcRevenue.Visible = False
            plcShare.Visible = False
            '2/16/09:  Allow revenue sets
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If

            slStr = ""
            ilAllNeg = True
            For ilLoop = 0 To 4 Step 1
                If lbcRevSet(ilLoop).ListIndex > 1 Then
                    slStr = slStr & lbcRevSet(ilLoop).List(lbcRevSet(ilLoop).ListIndex) & " "
                ElseIf lbcRevSet(ilLoop).ListIndex = 1 Then
                    ilAllNeg = False
                End If
            Next ilLoop
            If (slStr = "") And (Not ilAllNeg) Then
                slStr = "[None]"
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case SEGINDEX
            lbcSeg.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcSeg.ListIndex < 1 Then
                slStr = ""
            Else
                slStr = lbcSeg.List(lbcSeg.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case DEMOINDEX
            mDmSetShow imDMBoxNo
            imDMBoxNo = -1
            pbcDm.Visible = False
            plcShare.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            ilFirst = True
            If tgSpf.iATargets = 0 Then
                slStr = ""
            Else
                If imCppCpm = 0 Then
                    slStr = "N/A"
                ElseIf imCppCpm = 1 Then 'CPM
                    slStr = "CPM: "
                ElseIf imCppCpm = 2 Then 'CPP
                    slStr = "CPP: "
                Else
                    slStr = ""
                End If
                If (imCppCpm = 1) Or (imCppCpm = 2) Then
                    For ilLoop = 0 To 3 Step 1
                        gFormatStr smTarget(ilLoop), FMTLEAVEBLANK + FMTCOMMA, 2, slTarg(ilLoop)
                        If (lbcDemo(ilLoop).ListIndex > 0) Then
                            If ilFirst Then
                                slStr = slStr & lbcDemo(ilLoop).Text & " @ " & slTarg(ilLoop)
                                ilFirst = False
                            Else
                                slStr = slStr & ";  " & lbcDemo(ilLoop).Text & " @ " & slTarg(ilLoop)
                            End If
                        End If
                    Next ilLoop
                End If
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            If (imSvCppCpm <> imCppCpm) Or (smDemo0 <> lbcDemo(0).Text) Then
                mClearResearch -1, VEHINDEX, DPINDEX
            End If
        Case GUARINDEX
            edcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            slStr = edcHdDropDown.Text
            smHdSave(2) = slStr
            If ((Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) = GUARBYGRIMP) Then
                gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 0, slStr
            Else
                gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)

        Case TRADEINDEX '% Trade
            mPTSetShow imPTBoxNo
            imPTBoxNo = -1
            pbcPctTrade.Visible = False
            plcShare.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            slStr = smPctTrade
            slCode = slStr
            gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, slStr
            If (imAgyComm = 0) And (Val(slCode) > 0) Then
                slStr = slStr & "C" & "(Y)"
            ElseIf (Val(slCode) > 0) Then
                slStr = slStr & "(N)"
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case RATECARDINDEX 'Rate Card
            lbcRateCard.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcRateCard.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcRateCard.List(lbcRateCard.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            If lbcRateCard.ListIndex >= 0 Then
                Screen.MousePointer = vbHourglass
                slNameCode = tmCntRateCard(lbcRateCard.ListIndex).sKey    'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
                ilRet = gParseItem(slNameCode, 3, "\", slCode)
                If ilRet = CP_MSG_NONE Then
                    slCode = Trim$(slCode)
                    ilRcfCode = CInt(slCode)
                    'gRCRead Contract, ilRcfCode, tgRcf, tgRif(), tgRdf()
                    'Build from tgMRcf; tgMRif; tgMRdf
                    For ilRcf = LBound(tgMRcf) To UBound(tgMRcf) - 1 Step 1
                        If tgMRcf(ilRcf).iCode = ilRcfCode Then
                            tmRcf = tgMRcf(ilRcf)
                            smBaseLen = Trim$(str$(tmRcf.iBaseLen)) 'Trim$(Str$(tgMRcf(ilRcf).iBaseLen))
                            Exit For
                        End If
                    Next ilRcf
                    'mVehPop do at each line
                End If
                If StrComp(smCurRC, slStr, 1) <> 0 Then 'Clear all program values
                    mVehPop True
                    For ilLoop = imLB1Or2 To UBound(imLnSave, LINEBOUNDINDEX) Step 1
                        slLineType = mGetLineType(ilLoop)
                        ilFound = False
                        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                            'Test if vehicle exist- if not remove vehicle and rate card name
                            gFindMatch smLnSave(1, ilLoop), 0, lbcLnVehicle(igTabMapIndex)
                            If gLastFound(lbcLnVehicle(igTabMapIndex)) >= 0 Then
                                ilFound = True
                            End If
                        Else
                            For ilVeh = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                                If StrComp(Trim$(smLnSave(1, ilLoop)), Trim$(tgPackVeh(ilVeh).sName), 1) = 0 Then
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilVeh
                        End If
                        If Not ilFound Then
                            smLnSave(1, ilLoop) = ""
                            slStr = ""
                            gSetShow pbcLine, slStr, tmLnCtrls(VEHINDEX)
                            smLnShow(VEHINDEX, ilLoop) = tmLnCtrls(VEHINDEX).sShow
                        Else
                        End If
                    Next ilLoop
                    pbcLine_Paint
                End If
                Screen.MousePointer = vbDefault
            Else
                tmRcf.iCode = 0
            End If
        Case GROSSINDEX 'Total Gross
            edcHdDropDown.Visible = False  'Set visibility
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            slStr = edcHdDropDown.Text
            smHdSave(1) = slStr
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
            igLnSPChg = False
            mCntrTotal
        Case BILLCYCLEINDEX 'Billing cycle
            lbcBillCycle.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcBillCycle.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcBillCycle.List(lbcBillCycle.ListIndex)
                ''12/5/14: Hide installment if defined
                ''If tscLine.SelectedItem.Index = 7 And lbcBillCycle.ListIndex >= 1 Then
                'If tscLine.SelectedItem.Index = 7 And Left(slStr, 1) <> "S" Then
                If tscLine.SelectedItem.Index = imTabMap(TABINSTALL) And Left(slStr, 1) <> "S" Then
                    udcCBill.Action 6
                End If
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case INVGROUPINDEX 'Invoice grouping
            lbcInvGroup.Visible = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcInvGroup.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcInvGroup.List(lbcInvGroup.ListIndex)
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case PRODTAGINDEX   'Product/Tag %
            edcHdDropDown.Visible = False  'Set visibility
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            slStr = edcHdDropDown.Text
            smHdSave(3) = slStr
            gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 2, slStr
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case INTCOMMINDEX   'Internal Comment
            If plcComment.Visible Then
                plcComment.Visible = False  'Set visibility
                '2/16/09:  Allow comments
                'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If (Not imUpdateAllowed) Then
                    smComment(2) = edcComment.Text
                End If
            End If
            imInCommentBranch = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            lbcComment(0).Visible = False
            '2/16/09:  Allow comments
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            For ilLoop = 0 To 3 Step 1
                ckcCommOn(ilLoop).Enabled = True
            Next ilLoop
            If lbcComment(0).ListIndex < 0 Then
                smComment(2) = ""
                slStr = ""
            ElseIf lbcComment(0).ListIndex = 0 Then
                smComment(2) = ""
                slStr = "[None]"
            Else
                smComment(2) = edcComment.Text
                slStr = Left$(smComment(2), 20)
                For ilLoop = 0 To 3 Step 1
                    If ckcCommOn(ilLoop).Value = vbChecked Then
                        imCommShowOn(2, ilLoop) = 0
                    Else
                        imCommShowOn(2, ilLoop) = 1
                    End If
                Next ilLoop
                imCommShowOn(2, 4) = 1
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case CANCLAUSEINDEX   'Cancel Clause
            If plcComment.Visible Then
                plcComment.Visible = False  'Set visibility
                '2/16/09:  Allow comments
                'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If (Not imUpdateAllowed) Then
                    smComment(3) = edcComment.Text
                End If
            End If
            imInCommentBranch = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            lbcComment(0).Visible = False
            '2/16/09:  Allow comments
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcComment(0).ListIndex < 0 Then
                smComment(3) = ""
                slStr = ""
            ElseIf lbcComment(0).ListIndex = 0 Then
                smComment(3) = ""
                slStr = "[None]"
            Else
                smComment(3) = edcComment.Text
                slStr = Left$(smComment(3), 20)
                For ilLoop = 0 To 3 Step 1
                    If ckcCommOn(ilLoop).Value = vbChecked Then
                        imCommShowOn(3, ilLoop) = 0
                    Else
                        imCommShowOn(3, ilLoop) = 1
                    End If
                    imCommShowOn(3, 2) = 1
                Next ilLoop
                imCommShowOn(3, 4) = 1
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        Case CHGREASONINDEX   'Change Reason
            If plcComment.Visible Then
                plcComment.Visible = False  'Set visibility
                '2/16/09:  Allow comments
                'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If (Not imUpdateAllowed) Then
                    smComment(4) = edcComment.Text
                End If
            End If
            imInCommentBranch = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            lbcComment(0).Visible = False
            '2/16/09:  Allow comments
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcComment(0).ListIndex < 0 Then
                smComment(4) = ""
                slStr = ""
            ElseIf lbcComment(0).ListIndex = 0 Then
                smComment(4) = ""
                slStr = "[None]"
            Else
                smComment(4) = edcComment.Text
                slStr = Left$(smComment(4), 20)
                For ilLoop = 0 To 3 Step 1
                    If ckcCommOn(ilLoop).Value = vbChecked Then
                        imCommShowOn(4, ilLoop) = 0
                    Else
                        imCommShowOn(4, ilLoop) = 1
                    End If
                    imCommShowOn(4, 2) = 1
                Next ilLoop
                imCommShowOn(4, 4) = 1
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        '10967-show
        Case VENDORINDEX
            mVendorWriteStatus
        Case OTHERCOMMINDEX   'Comment
            If plcComment.Visible Then
                plcComment.Visible = False  'Set visibility
                '2/16/09:  Allow comments
                'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If (Not imUpdateAllowed) Then
                    smComment(5) = edcComment.Text
                End If
            End If
            imInCommentBranch = False
            edcHdDropDown.Visible = False
            cmcHdDropDown.Visible = False
            lbcComment(0).Visible = False
            '2/16/09:  Allow comments
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If lbcComment(0).ListIndex < 0 Then
                smComment(5) = ""
                slStr = ""
            ElseIf lbcComment(0).ListIndex = 0 Then
                smComment(5) = ""
                slStr = "[None]"
            Else
                smComment(5) = edcComment.Text
                slStr = Left$(smComment(5), 20)
                For ilLoop = 0 To 4 Step 1
                    If ckcCommOn(ilLoop).Value = vbChecked Then
                        imCommShowOn(5, ilLoop) = 0
                    Else
                        imCommShowOn(5, ilLoop) = 1
                    End If
                Next ilLoop
            End If
            gSetShow pbcHeader, slStr, tmHdCtrls(ilBoxNo)
        '10910-show
        Case ATTACHMENTINDEX
            mContractDocumentWriteAmount False, False
    End Select
    If ((sgCntrScreen = "Orders") And ((imStep1Index = 2) Or (imStep1Index = 3))) Or ((sgCntrScreen <> "Orders") And ((imStep1Index = 2) Or (imStep1Index = 3) Or (imStep1Index = 4) Or (imStep1Index = 5))) Then
        mSetCommands
    End If
    Exit Sub
mSetShowErr:
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetSource                      *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set default source             *
'*                                                     *
'*******************************************************
Private Sub mSetSource(ilIndex As Integer, slStr1 As String)
    If Trim$(slStr1) <> Trim$(smDefSave(ilIndex)) Then
        If imDefSource(ilIndex) = 0 Then
            imDefSource(ilIndex) = 2
        ElseIf imDefSource(ilIndex) = 1 Then
            imDefSource(ilIndex) = 3
        ElseIf imDefSource(ilIndex) = -1 Then
            imDefSource(ilIndex) = 4
        End If
    Else
        If imDefSource(ilIndex) = 2 Then
            imDefSource(ilIndex) = 0
        ElseIf imDefSource(ilIndex) = 3 Then
            imDefSource(ilIndex) = 2
        End If
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mShareBudgetPop                 *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Revenue Set list      *
'*                      box if required                *
'*                                                     *
'*******************************************************
Public Sub mShareBudgetPop()
'
'   mShareBudgetPop
'   Where:
'
    Dim ilLoop As Integer
    Dim ilRet As Integer
    'Dim ilFound As Integer
    Dim slSyncDate As String
    Dim slSyncTime As String
    'Dim slShare As String      'Exclusion name, saved to determine if changed
    'Dim ilShare As Integer      'Exclusion name, saved to determine if changed

    ilRet = gObtainMnfForType("O", sgShareBudgetStamp, tgShareBudget())
    ilLoop = 0
    Do
        imChgMode = True
        Select Case ilLoop
            Case 0
                mPopShareBudget ilLoop + 1, lbcShareBudget(ilLoop), tmShareBudgetCode0(), smShareBudgetCodeTag(0)
            Case 1
                mPopShareBudget ilLoop + 1, lbcShareBudget(ilLoop), tmShareBudgetCode1(), smShareBudgetCodeTag(1)
        End Select
        If (ilLoop = 0) And lbcShareBudget(ilLoop).ListCount <= 2 Then
            gGetSyncDateTime slSyncDate, slSyncTime
            tmMnf.iCode = 0
            tmMnf.sType = "O"
            tmMnf.sName = "You"
            tmMnf.sRPU = ""
            tmMnf.sUnitType = ""
            tmMnf.iMerge = 0
            tmMnf.iGroupNo = 1
            tmMnf.sCodeStn = "You"
            tmMnf.iRemoteID = tgUrf(0).iRemoteUserID
            tmMnf.iAutoCode = tmMnf.iCode
            ilRet = btrInsert(hmMnf, tmMnf, imMnfRecLen, INDEXKEY0)
            On Error GoTo mShareBudgetPopErr
            gCPErrorMsg ilRet, "mShareBudgetPop (btrInsert)", Contract
            On Error GoTo 0
            Do
                'tmMnfSrchKey.iCode = tmMnf.iCode
                'ilRet = btrGetEqual(hmMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                tmMnf.iRemoteID = tgUrf(0).iRemoteUserID
                tmMnf.iAutoCode = tmMnf.iCode
                gPackDate smSyncDate, tmMnf.iSyncDate(0), tmMnf.iSyncDate(1)
                gPackTime smSyncTime, tmMnf.iSyncTime(0), tmMnf.iSyncTime(1)
                ilRet = btrUpdate(hmMnf, tmMnf, imMnfRecLen)
            Loop While ilRet = BTRV_ERR_CONFLICT
            On Error GoTo mShareBudgetPopErr
            gCPErrorMsg ilRet, "mShareBudgetPop (btrUpdate: MultiName)", Contract
            On Error GoTo 0
            smShareBudgetCodeTag(ilLoop) = ""
            sgShareBudgetStamp = ""
            ilRet = gObtainMnfForType("O", sgShareBudgetStamp, tgShareBudget())
        Else
            ilLoop = ilLoop + 1
        End If
        imChgMode = False
    Loop While ilLoop <= 1
    Exit Sub
mShareBudgetPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mShtTitleBranch                 *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      advertiser Short title and     *
'*                      process communication back from*
'*                      advertiser short title         *
'*                                                     *
'*******************************************************
Private Function mShtTitleBranch() As Integer
'
'   ilRet = mShtTitleBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mShtTitleBranch = False
        Exit Function
    End If
    If (Not imDoubleClickName) And (edcHdDropDown.Text <> "[New]") Then
        imDoubleClickName = False
        mShtTitleBranch = False
        Exit Function
    End If
    igAdvtProdCallSource = CALLSOURCECONTRACT
    sgAdvtProdName = lbcAdvt.List(lbcAdvt.ListIndex)
    If edcHdDropDown.Text = "[New]" Then
        sgAdvtProdName = sgAdvtProdName & "\" & " "
    Else
        sgAdvtProdName = sgAdvtProdName & "\" & Trim$(edcHdDropDown.Text)
    End If
    ilUpdateAllowed = imUpdateAllowed
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
    End If
    sgCommandStr = slStr
    ShtTitle.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgAdvtProdName)
    igAdvtProdCallSource = Val(sgAdvtProdName)
    ilParse = gParseItem(slStr, 2, "\", sgAdvtProdName)
    imDoubleClickName = False
    mShtTitleBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    If igAdvtProdCallSource = CALLDONE Then  'Done
        igAdvtProdCallSource = CALLNONE
'        gSetMenuState True
        lbcShtTitle.Clear
        'lbcShtTitleCode.Tag = ""
        sgShtTitleCodeTag = ""
        mShtTitlePop tmAdf.iCode
        If imTerminate Then
            mShtTitleBranch = False
            Exit Function
        End If
        gFindMatch sgAdvtProdName, 0, lbcShtTitle
        If gLastFound(lbcShtTitle) >= 0 Then
            imChgMode = True
            lbcShtTitle.ListIndex = gLastFound(lbcShtTitle)
            edcHdDropDown.Text = lbcShtTitle.List(lbcShtTitle.ListIndex)
            imChgMode = False
            mShtTitleBranch = False
            mSetChg SHTTITLEINDEX
        Else
            imChgMode = True
            lbcShtTitle.ListIndex = -1
            edcHdDropDown.Text = sgAdvtProdName
            imChgMode = False
            mSetChg SHTTITLEINDEX
            edcHdDropDown.SetFocus
            sgAdvtProdName = ""
            Exit Function
        End If
        sgAdvtProdName = ""
    End If
    If igAdvtProdCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igAdvtProdCallSource = CALLNONE
        sgAdvtProdName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    If igAdvtProdCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igAdvtProdCallSource = CALLNONE
        sgAdvtProdName = ""
        mEnableBox imHdBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mSPEnableBox                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mSPEnableBox(ilBoxNo As Integer)
'
'   mSPEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slRecCode As String
    Dim slNameCode As String
    Dim ilFound As Integer
    Dim ilRet As Integer
    Dim slCode As String
    Dim ilIndex As Integer
    Dim ilLbcIndex As Integer
    Dim slComm As String
    'If (ilBoxNo < LBound(tmSPCtrls)) Or (ilBoxNo > UBound(tmSPCtrls)) Then
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmSPCtrls)) Then
        Exit Sub
    End If
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    imTestNum = True
    Select Case ilBoxNo 'Branch on box type (control)
        Case SPNAME1INDEX   'Salesperson
            mSPersonPop
            If imTerminate Then
                Exit Sub
            End If
            'Remove [None]
            If lbcSPerson(0).List(1) = "[None]" Then
                lbcSPerson(0).RemoveItem 1
            End If
            lbcSPerson(0).height = gListBoxHeight(lbcSPerson(0).ListCount, 6)
            edcShareDropDown.Width = tmSPCtrls(SPNAME1INDEX).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 40
            gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(SPNAME1INDEX).fBoxX, tmSPCtrls(SPNAME1INDEX).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            lbcSPerson(0).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            ilFound = False
            imChgMode = True
            If (imSlspIndex(0) - 1 < 0) And (imSPersonFirstTime) Then
                If (tgUrf(0).iSlfCode > 0) Then
                    slRecCode = Trim$(str$(tgUrf(0).iSlfCode))
                    For ilLoop = 0 To UBound(tmCntSalesperson) - 1 Step 1  'Traffic!lbcSalesperson.ListCount - 1 Step 1
                        slNameCode = tmCntSalesperson(ilLoop).sKey    'Traffic!lbcSalesperson.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        On Error GoTo mSPEnableBoxErr
                        gCPErrorMsg ilRet, "mEnableBox (gParseItem field 2: SPerson)", Contract
                        On Error GoTo 0
                        If slRecCode = slCode Then
                            lbcSPerson(0).ListIndex = ilLoop + 1    'not 2 as [None] removed
                            smDefSave(3) = Trim$(str$(tgUrf(0).iSlfCode))
                            imDefSource(3) = 4  'User Define
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                End If
                If Not ilFound Then
                    If tmAdf.iCode > 0 Then
                        slRecCode = Trim$(str$(tmAdf.iSlfCode))
                        For ilLoop = 0 To UBound(tmCntSalesperson) - 1 Step 1  'Traffic!lbcSalesperson.ListCount - 1 Step 1
                            slNameCode = tmCntSalesperson(ilLoop).sKey    'Traffic!lbcSalesperson.List(ilLoop)
                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                            On Error GoTo mSPEnableBoxErr
                            gCPErrorMsg ilRet, "mEnableBox (gParseItem field 2: SPerson)", Contract
                            On Error GoTo 0
                            If slRecCode = slCode Then
                                lbcSPerson(0).ListIndex = ilLoop + 1    'not 2 as [None] removed
                                smDefSave(3) = Trim$(str$(tmAdf.iCode))
                                imDefSource(3) = 0  'Advt
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                    End If
                End If
                If Not ilFound Then
                    If tmAgf.iCode > 0 Then
                        slRecCode = Trim$(str$(tmAgf.iSlfCode))
                        For ilLoop = 0 To UBound(tmCntSalesperson) - 1 Step 1  'Traffic!lbcSalesperson.ListCount - 1 Step 1
                            slNameCode = tmCntSalesperson(ilLoop).sKey    'Traffic!lbcSalesperson.List(ilLoop)
                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                            On Error GoTo mSPEnableBoxErr
                            gCPErrorMsg ilRet, "mEnableBox (gParseItem field 2: SPerson)", Contract
                            On Error GoTo 0
                            If slRecCode = slCode Then
                                lbcSPerson(0).ListIndex = ilLoop + 1    'Not 2 as [None] removed
                                smDefSave(3) = Trim$(str$(tmAgf.iCode))
                                imDefSource(3) = 1  'Agy
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                    End If
                    If Not ilFound Then
                        lbcSPerson(0).ListIndex = 0 '  "[New]"
                    End If
                End If
            Else
                If imSlspIndex(0) <= -1 Then
                    lbcSPerson(0).ListIndex = -1
                Else
                    lbcSPerson(0).ListIndex = imSlspIndex(0) - 1
                End If
            End If
            imSPersonFirstTime = False
            If lbcSPerson(0).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcSPerson(0).List(lbcSPerson(0).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
            mSPersonPop
            If imTerminate Then
                Exit Sub
            End If
            'If ilBoxNo = SPPNAMEINDEX Then
            '    ilLbcIndex = 1
            'ElseIf ilBoxNo = SPMNAMEINDEX Then
            '    ilLbcIndex = 2
            'Else
                ilLbcIndex = 0
            'End If
            lbcSPerson(ilLbcIndex).height = gListBoxHeight(lbcSPerson(ilLbcIndex).ListCount, 6)
            edcShareDropDown.Width = tmSPCtrls(ilBoxNo).fBoxW - cmcShareDropDown.Width
            edcShareDropDown.MaxLength = 40
            gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
            cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
            If ilBoxNo <= SPNAME1INDEX + 4 * imSPNoCol Then
                lbcSPerson(ilLbcIndex).Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
            Else
                lbcSPerson(ilLbcIndex).Move edcShareDropDown.Left, edcShareDropDown.Top - lbcSPerson(ilLbcIndex).height
            End If
            imChgMode = True
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            If imSlspIndex(ilIndex) < 0 Then
                lbcSPerson(ilLbcIndex).ListIndex = 1   '[None]
            Else
                lbcSPerson(ilLbcIndex).ListIndex = imSlspIndex(ilIndex)
            End If
            If lbcSPerson(ilLbcIndex).ListIndex < 0 Then
                edcShareDropDown.Text = ""
            Else
                edcShareDropDown.Text = lbcSPerson(ilLbcIndex).List(lbcSPerson(ilLbcIndex).ListIndex)
            End If
            imChgMode = False
            edcShareDropDown.SelStart = 0
            edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
            If tgSpf.sSubCompany <> "Y" Then
                edcShareDropDown.Width = tmSPCtrls(ilBoxNo).fBoxW
                edcShareDropDown.MaxLength = 8
                'gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
                If tgSpf.sCommByCntr = "Y" Then
                    gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
                Else
                    gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
                End If
                ilIndex = (ilBoxNo - 1) \ imSPNoCol
                If smSlspField2(ilIndex) = "" Then
                    If imSlspIndex(ilIndex) > 1 Then
                        If tgSpf.sCommByCntr <> "Y" Then
                            slComm = "100."
                            For ilLoop = 0 To 9 Step 1
                                slComm = gSubStr(slComm, smSlspField2(ilLoop))
                            Next ilLoop
                            If gCompNumberStr(slComm, ".0") < 0 Then
                                edcShareDropDown.Text = "0"
                            Else
                                edcShareDropDown.Text = slComm
                            End If
                        Else
                            If ilIndex > 0 Then
                                edcShareDropDown.Text = smSlspField2(ilIndex - 1)
                            Else
                                edcShareDropDown.Text = ""
                            End If
                        End If
                    Else
                        edcShareDropDown.Text = "0"
                    End If
                Else
                    If imSlspIndex(ilIndex) > 1 Then
                        edcShareDropDown.Text = smSlspField2(ilIndex)
                    Else
                        edcShareDropDown.Text = "0"
                    End If
                End If
                edcShareDropDown.Visible = True  'Set visibility
                edcShareDropDown.SetFocus
            Else
                imTestNum = False
                lbcVehGp6.height = gListBoxHeight(lbcVehGp6.ListCount, 6)
                edcShareDropDown.Width = tmSPCtrls(ilBoxNo).fBoxW
                edcShareDropDown.MaxLength = 20
                gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
                cmcShareDropDown.Move edcShareDropDown.Left + edcShareDropDown.Width, edcShareDropDown.Top
                If ilBoxNo <= SPNAME1INDEX + 4 * imSPNoCol + 2 Then
                    'lbcVehGp6.Move edcShareDropDown.Left + edcShareDropDown.Width + cmcShareDropDown.Width - plcNum.Width, edcShareDropDown.Top + edcShareDropDown.Height
                    lbcVehGp6.Move edcShareDropDown.Left, edcShareDropDown.Top + edcShareDropDown.height
                Else
                    lbcVehGp6.Move edcShareDropDown.Left, edcShareDropDown.Top - lbcVehGp6.height
                End If
                ilIndex = (ilBoxNo - 1) \ imSPNoCol
                If smSlspField2(ilIndex) = "" Then
                    If imSlspIndex(ilIndex) > 1 Then
                        If ilIndex > 0 Then
                            gFindMatch smSlspField2(ilIndex - 1), 0, lbcVehGp6
                            If gLastFound(lbcVehGp6) >= 0 Then
                                lbcVehGp6.ListIndex = gLastFound(lbcVehGp6)
                            Else
                                lbcVehGp6.ListIndex = 0
                            End If
                        Else
                            lbcVehGp6.ListIndex = 0
                        End If
                    Else
                        lbcVehGp6.ListIndex = 0
                    End If
                Else
                    gFindMatch smSlspField2(ilIndex), 0, lbcVehGp6
                    If gLastFound(lbcVehGp6) >= 0 Then
                        lbcVehGp6.ListIndex = gLastFound(lbcVehGp6)
                    Else
                        lbcVehGp6.ListIndex = 0
                    End If
                End If
                edcShareDropDown.Text = lbcVehGp6.List(lbcVehGp6.ListIndex)
                imComboBoxIndex = lbcVehGp6.ListIndex
                edcShareDropDown.Visible = True  'Set visibility
                cmcShareDropDown.Visible = True
                edcShareDropDown.SetFocus
            End If
        Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
            edcShareDropDown.Width = tmSPCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 8
            'gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
            If tgSpf.sCommByCntr = "Y" Then
                gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
            Else
                gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
            End If
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            If smSlspField3(ilIndex) = "" Then
                If imSlspIndex(ilIndex) > 1 Then
                    slComm = "100."
                    For ilLoop = 0 To 9 Step 1
                        If tgSpf.sCommByCntr = "Y" Then
                            slComm = gSubStr(slComm, smSlspField3(ilLoop))
                        Else
                            If (StrComp(smSlspField2(ilIndex), smSlspField2(ilLoop), 1) = 0) And (ilIndex <> ilLoop) Then
                                slComm = gSubStr(slComm, smSlspField3(ilLoop))
                            End If
                        End If
                    Next ilLoop
                    If gCompNumberStr(slComm, ".0") < 0 Then
                        edcShareDropDown.Text = "0"
                    Else
                        edcShareDropDown.Text = slComm
                    End If
                Else
                    edcShareDropDown.Text = "0"
                End If
            Else
                If imSlspIndex(ilIndex) > 1 Then
                    edcShareDropDown.Text = smSlspField3(ilIndex)
                Else
                    edcShareDropDown.Text = "0"
                End If
            End If
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
        Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            edcShareDropDown.Width = tmSPCtrls(ilBoxNo).fBoxW
            edcShareDropDown.MaxLength = 8
            gMoveTableCtrl pbcSPerson, edcShareDropDown, tmSPCtrls(ilBoxNo).fBoxX, tmSPCtrls(ilBoxNo).fBoxY
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            If smSlspField4(ilIndex) = "" Then
                edcShareDropDown.Text = smSlspField3(ilIndex)
            Else
                If imSlspIndex(ilIndex) > 1 Then
                    edcShareDropDown.Text = smSlspField4(ilIndex)
                Else
                    edcShareDropDown.Text = "0"
                End If
            End If
            edcShareDropDown.Visible = True  'Set visibility
            edcShareDropDown.SetFocus
    End Select
    mSPSetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
    Exit Sub
mSPEnableBoxErr:
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSPersonBranch                  *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      salesperson and process        *
'*                      communication back from        *
'*                      salesperson                    *
'*                                                     *
'*******************************************************
Private Function mSPersonBranch(ilIndex As Integer) As Integer
'
'   ilRet = mSPersonBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilCallReturn As Integer
    Dim slName As String
    'Dim ilNoForms As Integer
    'Dim ilUsage As Integer
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    'Dim ilFound As Integer
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mSPersonBranch = False
        Exit Function
    End If
    ilRet = gOptionalLookAhead(edcShareDropDown, lbcSPerson(ilIndex), imBSMode, slStr)
    If (ilRet = 0) And (Not imDoubleClickName) Then
        mSPersonBranch = False
        Exit Function
    End If
    If igWinStatus(SALESPEOPLELIST) <> 2 Then
        Beep
        imDoubleClickName = False
        mSPersonBranch = True
        mSPSetFocus imSPBoxNo
        Exit Function
    End If
    igSlfCallSource = CALLSOURCECONTRACT
    If edcShareDropDown.Text = "[New]" Then
        sgSlfName = ""
    Else
        sgSlfName = slStr
    End If
    'Save the index in case cancelled pressed
    If (imSPBoxNo - 1) \ imSPNoCol = 0 Then
        If lbcSPerson(ilIndex).ListIndex > 0 Then
            imSlspIndex((imSPBoxNo - 1) \ imSPNoCol) = lbcSPerson(ilIndex).ListIndex + 1
        End If
    Else
        If lbcSPerson(ilIndex).ListIndex > 1 Then
            imSlspIndex((imSPBoxNo - 1) \ imSPNoCol) = lbcSPerson(ilIndex).ListIndex + 1
        End If
    End If
    ilUpdateAllowed = imUpdateAllowed
    If igTestSystem Then
        slStr = "Traffic^Test\" & sgUserName & "\" & Trim$(str$(igSlfCallSource)) & "\" & sgSlfName
    Else
        slStr = "Traffic^Prod\" & sgUserName & "\" & Trim$(str$(igSlfCallSource)) & "\" & sgSlfName
    End If
    sgCommandStr = slStr
    SPerson.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgSlfName)
    igSlfCallSource = Val(sgSlfName)
    ilParse = gParseItem(slStr, 2, "\", sgSlfName)
    imDoubleClickName = False
    mSPersonBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    ilCallReturn = igSlfCallSource
    slName = sgSlfName
    'igVsfCallSource = CALLNONE
    igSlfCallSource = CALLNONE
    'sgVsfName = ""
    sgSlfName = ""
    mSPersonBranch = True
    If ilCallReturn = CALLDONE Then  'Done
'        gSetMenuState True
        'For ilLoop = 0 To 2 Step 1
        '    lbcSPerson(ilLoop).Clear
        'Next ilLoop
        lbcSPerson(ilIndex).Clear
        'Traffic!lbcSalesperson.Tag = ""
        smCntSalespersonTag = ""
        sgMSlfStamp = ""
        
        '5/18/12: Only include dormant salesperson if referenced in contract
        bmCheckSlfDormant = True
        
        mSPersonPop
        If imTerminate Then
            mSPersonBranch = False
            Exit Function
        End If
        If imSPBoxNo = SPNAME1INDEX Then
            If lbcSPerson(0).List(1) = "[None]" Then
                lbcSPerson(0).RemoveItem 1
            End If
        End If
        gFindMatch slName, 1, lbcSPerson(ilIndex)
        If gLastFound(lbcSPerson(ilIndex)) > 0 Then
            imChgMode = True
            lbcSPerson(ilIndex).ListIndex = gLastFound(lbcSPerson(ilIndex))
            edcShareDropDown.Text = lbcSPerson(ilIndex).List(lbcSPerson(ilIndex).ListIndex)
            imChgMode = False
            mSPersonBranch = False
            mSPSetChg imSPBoxNo
        Else
            imChgMode = True
            lbcSPerson(ilIndex).ListIndex = 1
            edcShareDropDown.Text = lbcSPerson(ilIndex).List(1)
            imChgMode = False
            mSPSetChg imSPBoxNo
            edcShareDropDown.SetFocus
            Exit Function
        End If
    End If
    If ilCallReturn = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        mSPEnableBox imSPBoxNo
        Exit Function
    End If
    If ilCallReturn = CALLTERMINATED Then
'        gSetMenuState True
        mSPEnableBox imSPBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mSPersonPop                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Sales office list box *
'*                      if requireds                   *
'*                                                     *
'*******************************************************
Public Sub mSPersonPop()
'
'   mSPersonPop
'   Where:
'
    Dim ilRet As Integer
    ReDim slName(0 To 2) As String
    ReDim ilIndex(0 To 2) As Integer
    'Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim ilDormant As Integer
    
    '5/18/12: Only include dormant salesperson if referenced in contract
    Dim ilSlf As Integer
    
    ilLoop = 0
        ilIndex(ilLoop) = lbcSPerson(ilLoop).ListIndex
        If ilIndex(ilLoop) > 0 Then
            slName(ilLoop) = lbcSPerson(ilLoop).List(ilIndex(ilLoop))
        End If
    ilDormant = False
    
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopSalespersonBox(Contract, 0, False, ilDormant, lbcSPerson(0), Traffic!lbcSalesperson, igSlfFirstNameFirst)
    ilRet = gPopSalespersonBox(Contract, 0, False, ilDormant, lbcSPerson(0), tmCntSalesperson(), smCntSalespersonTag, igSlfFirstNameFirst)
    
    '5/18/12: Only include dormant salesperson if referenced in contract
    ilSlf = mAddDormantSlf()
    
    '5/18/12: Only include dormant salesperson if referenced in contract
    'If (ilRet <> CP_MSG_NOPOPREQ) Then
    If (ilRet <> CP_MSG_NOPOPREQ) Or (ilSlf = True) Then
        On Error GoTo mSPersonPopErr
        gCPErrorMsg ilRet, "mSPersonPop (gPopSalespersonBox)", Contract
        On Error GoTo 0
        lbcSPerson(0).AddItem "[None]", 0  'Force as first item on list
        lbcSPerson(0).AddItem "[New]", 0  'Force as first item on list
    End If
    imChgMode = True
    'For ilLoop = 0 To 2 Step 1
    ilLoop = 0
        If ilIndex(ilLoop) > 0 Then
            gFindMatch slName(ilLoop), 1, lbcSPerson(ilLoop)
            If gLastFound(lbcSPerson(ilLoop)) > 0 Then
                lbcSPerson(ilLoop).ListIndex = gLastFound(lbcSPerson(ilLoop))
            Else
                lbcSPerson(ilLoop).ListIndex = -1
            End If
        Else
            lbcSPerson(ilLoop).ListIndex = ilIndex(ilLoop)
        End If
    'Next ilLoop
    imChgMode = False
    Exit Sub
mSPersonPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSPSetChg                       *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mSPSetChg(ilBoxNo As Integer)
'
'   mSPSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilIndex As Integer
    'If ilBoxNo < LBound(tmSPCtrls) Or ilBoxNo > UBound(tmSPCtrls) Then
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmSPCtrls) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            slStr = smInitSlspName(ilIndex)
            gSetChgFlag slStr, edcShareDropDown, tmSPCtrls(ilBoxNo)
        Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            slStr = smInitSlspField2(ilIndex)
            gSetChgFlag slStr, edcShareDropDown, tmSPCtrls(ilBoxNo)
        Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            slStr = smInitSlspField3(ilIndex)
            gSetChgFlag slStr, edcShareDropDown, tmSPCtrls(ilBoxNo)
        Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            slStr = smInitSlspField4(ilIndex)
            gSetChgFlag slStr, edcShareDropDown, tmSPCtrls(ilBoxNo)
    End Select
    tmHdCtrls(SPERSONINDEX).iChg = False
    'For ilLoop = LBound(tmSPCtrls) To UBound(tmSPCtrls) Step 1
    For ilLoop = imLBCTCtrls To UBound(tmSPCtrls) Step 1
        If tmSPCtrls(ilLoop).iChg Then
            tmHdCtrls(SPERSONINDEX).iChg = True
            Exit For
        End If
    Next ilLoop
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSPSetFocus                     *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                                                     *
'*******************************************************
Private Sub mSPSetFocus(ilBoxNo As Integer)
'
'   mSPSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    'Dim ilLoop As Integer   'For loop control parameter
    'If ilBoxNo < LBound(tmSPCtrls) Or ilBoxNo > UBound(tmSPCtrls) Then
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmSPCtrls) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
        Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            edcShareDropDown.Visible = True
            cmcShareDropDown.Visible = True
            edcShareDropDown.SetFocus
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSPSetShow                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mSPSetShow(ilBoxNo As Integer)
'
'   mSPSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    Dim ilPos As Integer
    Dim slFirst As String
    Dim slLast As String
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilIndex As Integer
    'If (ilBoxNo < LBound(tmSPCtrls)) Or (ilBoxNo > UBound(tmSPCtrls)) Then
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmSPCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            edcShareDropDown.Visible = False  'Set visibility
            cmcShareDropDown.Visible = False
                imSlspIndex(ilIndex) = lbcSPerson(0).ListIndex
                lbcSPerson(0).Visible = False
                If ilBoxNo = SPNAME1INDEX Then
                    If lbcSPerson(0).ListIndex < 1 Then
                        slStr = ""
                    Else
                        slStr = lbcSPerson(0).List(lbcSPerson(0).ListIndex)
                    End If
                        lbcSPerson(0).AddItem "[None]", 1
                        imSlspIndex(ilIndex) = imSlspIndex(ilIndex) + 1
                    Else
                    If lbcSPerson(0).ListIndex < 2 Then
                        slStr = ""
                    Else
                        slStr = lbcSPerson(0).List(lbcSPerson(0).ListIndex)
                    End If
                End If
            smSlspName(ilIndex) = slStr
            If (Not igSlfFirstNameFirst) Then
                ilPos = InStr(slStr, ",")
                If ilPos > 0 Then
                    slLast = Left$(slStr, ilPos - 1)
                    slFirst = right$(slStr, Len(slStr) - ilPos - 1)
                    slStr = slFirst & " " & slLast
                End If
            End If
            gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            If ilBoxNo = SPNAME1INDEX Then
                If imSlspIndex(ilIndex) >= 2 Then
                    slNameCode = tmCntSalesperson(imSlspIndex(ilIndex) - 2).sKey  'Traffic!lbcSalesperson.List(imSlspIndex(ilIndex) - 2)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    slCode = Trim$(slCode)
                    mSetSource 3, slCode
                End If
            End If
        Case SPNAME1INDEX + 1, SPNAME1INDEX + imSPNoCol + 1, SPNAME1INDEX + 2 * imSPNoCol + 1, SPNAME1INDEX + 3 * imSPNoCol + 1, SPNAME1INDEX + 4 * imSPNoCol + 1, SPNAME1INDEX + 5 * imSPNoCol + 1, SPNAME1INDEX + 6 * imSPNoCol + 1, SPNAME1INDEX + 7 * imSPNoCol + 1, SPNAME1INDEX + 8 * imSPNoCol + 1, SPNAME1INDEX + 9 * imSPNoCol + 1
            edcShareDropDown.Visible = False  'Set visibility
            cmcShareDropDown.Visible = False
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            If tgSpf.sSubCompany <> "Y" Then
                If imSlspIndex(ilIndex) > 1 Then
                    slStr = edcShareDropDown.Text
                    smSlspField2(ilIndex) = slStr
                    If tgSpf.sCommByCntr = "Y" Then
                        gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 2, slStr
                    Else
                        gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 4, slStr
                    End If
                Else
                    slStr = ""
                    smSlspField2(ilIndex) = ""
                End If
                gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            Else
                lbcVehGp6.Visible = False
                If (imSlspIndex(ilIndex) > 1) And (lbcVehGp6.ListIndex >= 0) Then
                    slStr = edcShareDropDown.Text
                    smSlspField2(ilIndex) = slStr
                Else
                    slStr = ""
                    smSlspField2(ilIndex) = ""
                End If
                gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            End If
        Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            edcShareDropDown.Visible = False  'Set visibility
            cmcShareDropDown.Visible = False
            If imSlspIndex(ilIndex) > 1 Then
                slStr = edcShareDropDown.Text
                smSlspField3(ilIndex) = slStr
                gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 4, slStr
            Else
                slStr = ""
                smSlspField3(ilIndex) = ""
            End If
            gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
        Case SPNAME1INDEX + 3, SPNAME1INDEX + imSPNoCol + 3, SPNAME1INDEX + 2 * imSPNoCol + 3, SPNAME1INDEX + 3 * imSPNoCol + 3, SPNAME1INDEX + 4 * imSPNoCol + 3, SPNAME1INDEX + 5 * imSPNoCol + 3, SPNAME1INDEX + 6 * imSPNoCol + 3, SPNAME1INDEX + 7 * imSPNoCol + 3, SPNAME1INDEX + 8 * imSPNoCol + 3, SPNAME1INDEX + 9 * imSPNoCol + 3
            ilIndex = (ilBoxNo - 1) \ imSPNoCol
            edcShareDropDown.Visible = False  'Set visibility
            cmcShareDropDown.Visible = False
            If imSlspIndex(ilIndex) > 1 Then
                slStr = edcShareDropDown.Text
                smSlspField4(ilIndex) = slStr
                gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 2, slStr
            Else
                slStr = ""
                smSlspField4(ilIndex) = ""
            End If
            gSetShow pbcSPerson, slStr, tmSPCtrls(ilBoxNo)
            pbcSPerson.Cls
            pbcSPerson_Paint
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mStep2IndexPop                  *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate LbcStep(1) with       *
'*                      Advertisers                    *
'*                                                     *
'*******************************************************
Private Sub mStep2IndexPop()
'
'   mStep2IndexPop
'   Where:
'
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim slName As String
    Dim ilIndex As Integer
    Dim slStamp As String
    Dim ilStep1Item As Integer

    Screen.MousePointer = vbHourglass
    If imStep2Index > 0 Then
        slName = lbcStep(1).List(imStep2Index)
    End If
    ilIndex = imStep1Index
    If sgCntrScreen = "Orders" Then
        Select Case ilIndex
            Case 0  'Build from scratch
                lbcStep(1).Clear
                cbcDifference.Visible = False
                If sgCntrScreen <> "Orders" Then
                    If igFreezeState = 0 Then
                        cmcScale.Enabled = True
                    Else
                        cmcScale.Enabled = False
                    End If
                End If
                cbcDifference.Clear
                imDiffMode = False
                ilRet = CP_MSG_POPREQ
             Case Else
                slStamp = smCntAdvertiserTag   'Traffic!lbcAdvertiser.Tag
                mAdvtPop
                'If (slStamp <> Traffic!lbcAdvertiser.Tag) Or (lbcStep(1).ListCount <= 0) Then
                If (slStamp <> smCntAdvertiserTag) Or (lbcStep(1).ListCount <= 0) Then
                    lbcStep(1).Clear
                    For ilLoop = 1 To lbcAdvt.ListCount - 1 Step 1
                        lbcStep(1).AddItem lbcAdvt.List(ilLoop)
                    Next ilLoop
                Else
                    ilRet = CP_MSG_NOPOPREQ
                End If
        End Select
        If lbcStep(1).ListCount > 0 Then
            If lbcStep(1).List(0) <> "[by Number]" Then
                lbcStep(1).AddItem "[by Number]", 0
            End If
        End If
    Else
        'imStep1Index was remapped in cmcSelect_Change, it is not required here
        ilStep1Item = ilIndex
        'ilStep1Item = 2 -> "Change an Existing Proposal"
        '              6 -> View
        If (ilStep1Item <> 2) Then
            If lbcStep(1).ListCount > 0 Then
                If lbcStep(1).List(1) = "[by Alerts]" Then
                    lbcStep(1).RemoveItem 1
                End If
            End If
        End If
        Select Case ilIndex
            Case 0  'Build from scratch
                lbcStep(1).Clear
                ilRet = CP_MSG_POPREQ
                cbcDifference.Visible = False
                If sgCntrScreen <> "Orders" Then
                    If igFreezeState = 0 Then
                        cmcScale.Enabled = True
                    Else
                        cmcScale.Enabled = False
                    End If
                End If
                cbcDifference.Clear
                imDiffMode = False
            Case Else
                slStamp = smCntAdvertiserTag   'Traffic!lbcAdvertiser.Tag
                mAdvtPop
                'If (slStamp <> Traffic!lbcAdvertiser.Tag) Or (lbcStep(1).ListCount <= 0) Then
                If (slStamp <> smCntAdvertiserTag) Or (lbcStep(1).ListCount <= 0) Then
                    lbcStep(1).Clear
                    For ilLoop = 1 To lbcAdvt.ListCount - 1 Step 1
                        lbcStep(1).AddItem lbcAdvt.List(ilLoop)
                    Next ilLoop
                Else
                    ilRet = CP_MSG_NOPOPREQ
                End If
        End Select
        'Change Proposal
        If (ilStep1Item = 2) And (tgUrf(0).sCompAlert <> "N") Then
            If lbcStep(1).ListCount > 0 Then
                If lbcStep(1).List(1) <> "[by Alerts]" Then
                    If lbcStep(1).List(0) <> "[by Number]" Then
                        lbcStep(1).AddItem "[by Alerts]", 0
                    Else
                        lbcStep(1).AddItem "[by Alerts]", 1
                    End If
                End If
            End If
        End If
        If lbcStep(1).ListCount > 0 Then
            If lbcStep(1).List(0) <> "[by Number]" Then
                lbcStep(1).AddItem "[by Number]", 0
            End If
        End If
    End If
    If ilRet <> CP_MSG_NOPOPREQ Then
        imChgMode = True
        If imStep2Index > 0 Then
            gFindMatch slName, 1, lbcStep(1)
            If gLastFound(lbcStep(1)) > 0 Then
                lbcStep(1).ListIndex = gLastFound(lbcStep(1))
            Else
                lbcStep(1).ListIndex = -1
            End If
        Else
            lbcStep(1).ListIndex = imStep2Index
        End If
        imStep2Index = lbcStep(1).ListIndex
        imChgMode = False
    End If
    Screen.MousePointer = vbDefault
    Exit Sub

    On Error GoTo 0
    imTerminate = True
    Screen.MousePointer = vbDefault
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mStep3IndexPop                  *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate LbcStep(2) with       *
'*                      Contract Numbers               *
'*                                                     *
'*******************************************************
Private Sub mStep3IndexPop()
'
'   mAdvtPop
'   Where:
'
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim slSvName As String
    Dim ilIndex As Integer
    Dim ilStep3Index As Integer
    Dim ilAAS As Integer
    Dim ilAASCode As Integer
    Dim slCntrStatus As String
    Dim slCntrType As String
    Dim ilCurrent As Integer
    Dim ilShow As Integer
    Dim ilState As Integer

    Screen.MousePointer = vbHourglass
    If imStep2Index > 0 Then
        ilStep3Index = lbcStep(2).ListIndex
        If ilStep3Index > 0 Then
            slSvName = lbcStep(2).List(ilStep3Index)
        End If
        If sgCntrScreen = "Orders" Then
            slNameCode = tmCntAdvertiser(imStep2Index - 1).sKey   'Traffic!lbcAdvertiser.List(imStep2Index - 1)'lbcStep2Code.List(imStep2Index - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
        Else
            If (imStep1Index = 2) And (tgUrf(0).sCompAlert <> "N") Then
                If imStep2Index = 1 Then
                    slCode = ""
                    ilRet = CP_MSG_NONE
                Else
                    slNameCode = tmCntAdvertiser(imStep2Index - 2).sKey   'Traffic!lbcAdvertiser.List(imStep2Index - 1)'lbcStep2Code.List(imStep2Index - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                End If
            Else
                slNameCode = tmCntAdvertiser(imStep2Index - 1).sKey   'Traffic!lbcAdvertiser.List(imStep2Index - 1)'lbcStep2Code.List(imStep2Index - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
            End If
        End If
        If ilRet = CP_MSG_NONE Then
            slCntrType = "C"
            If tgUrf(0).sResvType <> "H" Then
                slCntrType = slCntrType & "V"
            End If
            If tgUrf(0).sRemType <> "H" Then
                slCntrType = slCntrType & "T"
            End If
            If tgUrf(0).sDRType <> "H" Then
                slCntrType = slCntrType & "R"
            End If
            If tgUrf(0).sPIType <> "H" Then
                slCntrType = slCntrType & "Q"
            End If
            If tgUrf(0).sPSAType <> "H" Then
                slCntrType = slCntrType & "S"
            End If
            If tgUrf(0).sPromoType <> "H" Then
                slCntrType = slCntrType & "M"
            End If
            If slCntrType = "CVTRQSM" Then
                slCntrType = ""
            End If
            ilIndex = imStep1Index
            If slCode <> "" Then
                ilAAS = 0
                ilAASCode = Val(slCode)
            Else
                ilAAS = -1
                ilAASCode = -1
            End If
            ilShow = 1
            If sgCntrScreen = "Orders" Then
                Select Case ilIndex
                    Case 0  'Build from scratch
                        lbcStep(2).Clear
                        ReDim tmStep3Code(0 To 0) As SORTCODE   'lbcStep3Code.Clear
                        smStep3CodeTag = ""
                    Case 1  'Model- show all advertisers
                        ilCurrent = 1
                        slCntrStatus = "HO"   '"HO"
                        ilState = 3 'include h, o, g, n, w, c, i
                    Case 2  'Revise an existing Order
                        ilCurrent = 1
                        slCntrStatus = "HO"
                        ilState = 3
                    Case 3  'Change Hold to Order
                        ilCurrent = 1
                        slCntrStatus = "H"
                        ilState = 3 '4 '1  '3 did not work
                    Case 4  'View
                        ilCurrent = 1
                        slCntrStatus = "HO"
                        ilState = 3
                End Select
                If ilRet <> CP_MSG_NOPOPREQ Then
                    If lbcStep(1).List(0) <> "[by Number]" Then
                        lbcStep(1).AddItem "[by Number]", 0
                    End If
                End If
            Else
                Select Case ilIndex
                    Case 0  'Build from scratch
                        lbcStep(2).Clear
                        ReDim tmStep3Code(0 To 0) As SORTCODE   'lbcStep3Code.Clear
                        smStep3CodeTag = ""
                    Case 1  'Model- show all advertisers
                        ilCurrent = 1
                        slCntrStatus = ""  '"HOD"
                        ilState = 3 '1
                    Case 2  'Change Existing Proposal
                        ilCurrent = 1
                        slCntrStatus = "WCID"
                        If lbcStep(1).ListCount > 0 Then
                            If (imStep2Index = 1) And (lbcStep(1).List(imStep2Index) = "[by Alerts]") And (tgUrf(0).sCompAlert <> "N") Then
                                slCntrStatus = "C"
                            End If
                        Else
                            slCntrStatus = "WCID"
                        End If
                        ilState = 0
                    Case 3  'New version of Existing Proposals
                        ilCurrent = 1
                        slCntrStatus = "WCI"
                        ilState = 0
                    Case 4 '5  'Revise an existing Order
                        ilCurrent = 1
                        slCntrStatus = "HO"
                        ilState = 3
                    Case 5 '7  'Change Hold to Order
                        ilCurrent = 1
                        slCntrStatus = "H"
                        ilState = 3 '4 '1  '3 did not work
                    Case 6 '8  'View
                        ilCurrent = 1
                        slCntrStatus = ""
                        ilState = 3
                End Select
            End If
            If ilIndex > 0 Then
                'ilRet = gPopCntrForAASBox(Contract, ilAAS, ilAASCode, slCntrStatus, slCntrType, ilCurrent, ilState, ilShow, lbcStep(2), lbcStep3Code)
                ilRet = gPopCntrForAASBoxByMkt(Contract, ilAAS, ilAASCode, slCntrStatus, slCntrType, ilCurrent, ilState, ilShow, igCntrMktCode(), lbcStep(2), tmStep3Code(), smStep3CodeTag)
            End If
            'gPopCntrBoxViaArray 0, ilAASCodes(), tmChfAdvtExt(), 1, lbcStep(2), lbcStep3Code
        End If
        imChgMode = True
        If (ilStep3Index > 0) And (lbcStep(2).ListCount > 0) Then
            gFindMatch slSvName, 0, lbcStep(2)
            If gLastFound(lbcStep(2)) > 0 Then
                lbcStep(2).ListIndex = gLastFound(lbcStep(2))
            Else
                lbcStep(2).ListIndex = -1
            End If
        Else
            'lbcStep(2).ListIndex = ilStep3Index
        End If
        imChgMode = False
    Else    'Model from scratch
        lbcStep(2).Clear
        ReDim tmStep3Code(0 To 0) As SORTCODE   'lbcStep3Code.Clear
        smStep3CodeTag = "" 'lbcStep3Code.Tag = ""
        cbcDifference.Visible = False
        If sgCntrScreen <> "Orders" Then
            If igFreezeState = 0 Then
                cmcScale.Enabled = True
            Else
                cmcScale.Enabled = False
            End If
        End If
        cbcDifference.Clear
        imDiffMode = False
    End If
    Screen.MousePointer = vbDefault
    Exit Sub

    On Error GoTo 0
    imTerminate = True
    Screen.MousePointer = vbDefault
    Exit Sub
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mStepEnableBox                  *
'*                                                     *
'*             Created:8/05/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mStepEnableBox(ilBoxNo As Integer)
'
'   mAirEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim ilRet As Integer

    'If ilBoxNo < LBound(tmStepCtrls) Or ilBoxNo > UBound(tmStepCtrls) Then
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmStepCtrls) Then
        Exit Sub
    End If
    '12/27/19: Set to avoid mAllSetShow to clear fields which cause user to have to press tab twice (when tab field had to be reset to 4 or 8)
    imLoadingForm = True
    mPaintStep
    imFirstTimeStep = True
    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
    Select Case ilBoxNo 'Branch on box type (control)
        Case STEP1INDEX
            'Remove [None], then readd in mSetShow
            lbcStep(ilBoxNo - 1).height = gListBoxHeight(lbcStep(ilBoxNo - 1).ListCount, 16)
            edcStepDropDown.Width = tmStepCtrls(ilBoxNo).fBoxW - cmcStepDropDown.Width
            edcStepDropDown.MaxLength = 0   '40'0
            gMoveFormCtrl pbcSelect, edcStepDropDown, tmStepCtrls(ilBoxNo).fBoxX, tmStepCtrls(ilBoxNo).fBoxY
            cmcStepDropDown.Move edcStepDropDown.Left + edcStepDropDown.Width, edcStepDropDown.Top
            lbcStep(ilBoxNo - 1).Move edcStepDropDown.Left, edcStepDropDown.Top + edcStepDropDown.height
            imChgMode = True
            If lbcStep(ilBoxNo - 1).ListIndex < 0 Then
                If lbcStep(ilBoxNo - 1).ListCount > 0 Then
                    lbcStep(ilBoxNo - 1).ListIndex = 0
                End If
            End If
            imComboBoxIndex = lbcStep(ilBoxNo - 1).ListIndex
            If lbcStep(ilBoxNo - 1).ListIndex < 0 Then
                edcStepDropDown.Text = ""
            Else
                edcStepDropDown.Text = lbcStep(ilBoxNo - 1).List(lbcStep(ilBoxNo - 1).ListIndex)
            End If
            imChgMode = False
            edcStepDropDown.SelStart = 0
            edcStepDropDown.SelLength = Len(edcStepDropDown.Text)
            edcStepDropDown.Visible = True
            cmcStepDropDown.Visible = True
            edcStepDropDown.SetFocus
        Case STEP2INDEX
            mStep2IndexPop
            lbcStep(ilBoxNo - 1).height = gListBoxHeight(lbcStep(ilBoxNo - 1).ListCount, 15)
            edcStepDropDown.Width = tmStepCtrls(ilBoxNo).fBoxW - cmcStepDropDown.Width
            edcStepDropDown.MaxLength = 40  '30  '25  '0
            gMoveFormCtrl pbcSelect, edcStepDropDown, tmStepCtrls(ilBoxNo).fBoxX, tmStepCtrls(ilBoxNo).fBoxY
            cmcStepDropDown.Move edcStepDropDown.Left + edcStepDropDown.Width, edcStepDropDown.Top
            lbcStep(ilBoxNo - 1).Move edcStepDropDown.Left, edcStepDropDown.Top + edcStepDropDown.height
            lbcStep(ilBoxNo - 1).Width = pbcLine.TextWidth("0NNNNNNNN1NNNNNNNNN2NNNNNNNNN3NNNNNNNNN4NNNNNNNNN")
            imChgMode = True
            If lbcStep(ilBoxNo - 1).ListIndex < 0 Then
                If imStep1Index > 0 Then
                    If lbcStep(ilBoxNo - 1).ListCount > 0 Then
                        lbcStep(ilBoxNo - 1).ListIndex = 0   '
                    End If
                End If
            End If
            imComboBoxIndex = lbcStep(ilBoxNo - 1).ListIndex
            If lbcStep(ilBoxNo - 1).ListIndex < 0 Then
                edcStepDropDown.Text = ""
            Else
                edcStepDropDown.Text = lbcStep(ilBoxNo - 1).List(lbcStep(ilBoxNo - 1).ListIndex)
            End If
            imChgMode = False
            edcStepDropDown.SelStart = 0
            edcStepDropDown.SelLength = Len(edcStepDropDown.Text)
            edcStepDropDown.Visible = True
            cmcStepDropDown.Visible = True
            edcStepDropDown.SetFocus
        Case STEP3INDEX
            mStep3IndexPop
            lbcStep(ilBoxNo - 1).height = gListBoxHeight(lbcStep(ilBoxNo - 1).ListCount, 15)
            If lbcStep(2).ListCount > 0 Then
                edcStepDropDown.Width = tmStepCtrls(ilBoxNo).fBoxW - cmcStepDropDown.Width
                edcStepDropDown.MaxLength = 25 '0
                gMoveFormCtrl pbcSelect, edcStepDropDown, tmStepCtrls(ilBoxNo).fBoxX, tmStepCtrls(ilBoxNo).fBoxY
                cmcStepDropDown.Move edcStepDropDown.Left + edcStepDropDown.Width, edcStepDropDown.Top
                lbcStep(ilBoxNo - 1).Move edcStepDropDown.Left + edcStepDropDown.Width + cmcStepDropDown.Width - lbcStep(ilBoxNo - 1).Width, edcStepDropDown.Top + edcStepDropDown.height
            Else
                edcStepDropDown.Width = tmStepCtrls(ilBoxNo).fBoxW
                edcStepDropDown.MaxLength = 14
                gMoveFormCtrl pbcSelect, edcStepDropDown, tmStepCtrls(ilBoxNo).fBoxX, tmStepCtrls(ilBoxNo).fBoxY
            End If
            imChgMode = True
            imComboBoxIndex = lbcStep(ilBoxNo - 1).ListIndex
            If lbcStep(ilBoxNo - 1).ListIndex < 0 Then
                edcStepDropDown.Text = smContrNoForSave '""
            Else
                edcStepDropDown.Text = lbcStep(ilBoxNo - 1).List(lbcStep(ilBoxNo - 1).ListIndex)
            End If
            smContrNoForSave = ""
            imChgMode = False
            edcStepDropDown.SelStart = 0
            edcStepDropDown.SelLength = Len(edcStepDropDown.Text)
            edcStepDropDown.Visible = True
            If lbcStep(2).ListCount > 0 Then
                cmcStepDropDown.Visible = True
                lbcStep(ilBoxNo - 1).Visible = True
            End If
            edcStepDropDown.SetFocus
    End Select
    imLoadingForm = False
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mStepSetFocus                  *
'*                                                     *
'*             Created:8/05/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mStepSetFocus(ilBoxNo As Integer)
'
'   mStepSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If ilBoxNo < imLBCTCtrls Or ilBoxNo > UBound(tmStepCtrls) Then
        Exit Sub
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case STEP1INDEX, STEP2INDEX, STEP3INDEX 'Vehicle
            If edcStepDropDown.Visible Then
                edcStepDropDown.SetFocus
            Else
                cmcCancel.SetFocus
            End If
    End Select
    mSetCommands
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mStepSetShow                    *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mStepSetShow(ilBoxNo As Integer)
'
'   mStepSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    'Dim ilLoop As Integer   'For loop control parameter
    Dim slStr As String
    If (ilBoxNo < imLBCTCtrls) Or (ilBoxNo > UBound(tmStepCtrls)) Then
        Exit Sub
    End If
    'If ((tscLine.SelectedItem.Index <> 4) And (tscLine.SelectedItem.Index <> 8)) And (Not imInTseLine) Then
    '    mActiveLnTab
    'End If
    If ((tscLine.SelectedItem.Index = imTabMap(TABAIRTIME)) Or (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPODCASTCPM))) Or (imInTseLine) Then
    Else
        mActiveLnTab
    End If
    Select Case ilBoxNo 'Branch on box type (control)
        Case STEP1INDEX 'Task
            '10256
            sgAvgAudStamp = ""
            lbcStep(0).Visible = False
            edcStepDropDown.Visible = False
            cmcStepDropDown.Visible = False
            If lbcStep(0).ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcStep(0).List(lbcStep(0).ListIndex)
            End If
            gSetShow pbcSelect, slStr, tmStepCtrls(ilBoxNo)
            mSetBackgroundColor imStep1Index
            mSPersonPop
        Case STEP2INDEX 'Advertiser
            lbcStep(1).Visible = False
            edcStepDropDown.Visible = False
            cmcStepDropDown.Visible = False
            If lbcStep(1).ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcStep(1).List(lbcStep(1).ListIndex)
            End If
            gSetShow pbcSelect, slStr, tmStepCtrls(ilBoxNo)
        Case STEP3INDEX 'Number
            lbcStep(2).Visible = False
            edcStepDropDown.Visible = False
            cmcStepDropDown.Visible = False
            slStr = edcStepDropDown.Text
            gSetShow pbcSelect, slStr, tmStepCtrls(ilBoxNo)
    End Select
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mStepTestFields                 *
'*                                                     *
'*             Created:6/23/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test if field defined           *
'*                                                     *
'*******************************************************
Private Function mStepTestFields(ilCtrlNo As Integer, ilState As Integer) As Integer
'
'   iState = ALLBLANK+NOMSG   'Blank
'   iTest = TESTALLCTRLS
'   iRet = mStepTestFields(iTest, iState)
'   Where:
'       iTest (I)- Test all controls or control number specified
'       iState (I)- Test one of the following:
'                  ALLBLANK=All fields blank
'                  ALLMANBLANK=All mandatory
'                    field blank
'                  ALLMANDEFINED=All mandatory
'                    fields have data
'                  Plus
'                  NOMSG=No error message shown
'                  SHOWMSG=show error message
'       iRet (O)- True if all mandatory fields blank, False if not all blank
'
    If (ilCtrlNo = STEP1INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcStep(0), "", "Task must be specified", tmStepCtrls(STEP1INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imStepBoxNo = STEP1INDEX
            End If
            mStepTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = STEP2INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcStep(1), "", "Number or Advertiser must be specified", tmStepCtrls(STEP2INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imStepBoxNo = STEP2INDEX
            End If
            mStepTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = STEP3INDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcStep(2), "", "Number must be specified", tmStepCtrls(STEP3INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imStepBoxNo = STEP3INDEX
            End If
            mStepTestFields = NO
            Exit Function
        End If
    End If
    mStepTestFields = YES
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mSummary                        *
'*                                                     *
'*             Created:6/28/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Get Summary totals             *
'*                                                     *
'*******************************************************
Public Sub mSummary()
    Dim ilDBBookOvly As Integer

    If bmInCancel Then
        Exit Sub
    End If
    If imInSummary Then
        Exit Sub
    End If
   ilDBBookOvly = lacDBBookOvly.Visible
   If ilDBBookOvly = False Then
        lbcDBBook.Visible = False
        'lacDBBookOvly.Caption = edcDBBook.Text
        'Changed lacDBBookOvly to edit control so that it overlays the true control
        lacDBBookOvly.Text = edcDBBook.Text
        edcDBBook.Visible = False
        lacDBBookOvly.Visible = True
        'DoEvents
    End If
    imInSummary = True
    If (imDBTotals = 6) Or (imDBTotals = 7) Then    'Week Summary or Quarterly Summary
        If imLnRowNo > 0 Then
            If tgClfCntr(imLnRowNo - 1).bLnPriceSet = True Then
                If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
                    mSetHdDate False, True
                Else
                    mSetHdDate True, True
                End If
            End If
        Else
            If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
                mSetHdDate False, True
            Else
                mSetHdDate True, True
            End If
        End If
    End If
    If imDBTotals = 10 Then
        mInitSumDiff hmCHF, hmClf, hmCff, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imCppCpm, imChgMode, VEHINDEX, DPINDEX, imStep1Index
    End If
    mTSummary imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, VEHINDEX, DPINDEX, imStep1Index, False, False
    If imDBTotals >= 5 Then
        pbcDemoBar(1).Cls
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
    End If
    If imDBTotals = 5 Then    'Line Summary
        vbcSummary.Min = imLB1Or2   'LBound(smLnSumShow, 2)
        If UBound(smLnSumShow, 2) - 2 <= vbcSummary.LargeChange Then
            vbcSummary.Max = imLB1Or2   'LBound(smLnSumShow, 2)
        Else
            vbcSummary.Max = UBound(smLnSumShow, 2) - 1 - vbcSummary.LargeChange
        End If
        If vbcSummary.Value = vbcSummary.Min Then
            pbcDemoBar_Paint 2
        Else
            vbcSummary.Value = vbcSummary.Min
        End If
    ElseIf (imDBTotals = 6) Then    'Week Summary or Quarterly Summary
        vbcSummary.Min = imLB1Or2   'LBound(smWkSumShow, 2)
        If UBound(smWkSumShow, 2) - 2 <= vbcSummary.LargeChange Then
            vbcSummary.Max = imLB1Or2   'LBound(smWkSumShow, 2)
        Else
            vbcSummary.Max = UBound(smWkSumShow, 2) - 1 - vbcSummary.LargeChange
        End If
        If vbcSummary.Value = vbcSummary.Min Then
            pbcDemoBar_Paint 3
        Else
            vbcSummary.Value = vbcSummary.Min
        End If
    ElseIf (imDBTotals = 7) Then     'Week Summary or Quarterly Summary
        vbcSummary.Min = imLB1Or2   'LBound(smQSumShow, 2)
        If UBound(smQSumShow, 2) - 2 <= vbcSummary.LargeChange Then
            vbcSummary.Max = imLB1Or2   'LBound(smQSumShow, 2)
        Else
            vbcSummary.Max = UBound(smQSumShow, 2) - 1 - vbcSummary.LargeChange
        End If
        If vbcSummary.Value = vbcSummary.Min Then
            pbcDemoBar_Paint 3
        Else
            vbcSummary.Value = vbcSummary.Min
        End If
    ElseIf (imDBTotals = 8) Then     'Vehicle Summary
        vbcSummary.Min = imLB1Or2   'LBound(smVSumShow, 2)
        If UBound(smVSumShow, 2) - 2 <= vbcSummary.LargeChange Then
            vbcSummary.Max = imLB1Or2   'LBound(smVSumShow, 2)
        Else
            vbcSummary.Max = UBound(smVSumShow, 2) - 1 - vbcSummary.LargeChange
        End If
        If vbcSummary.Value = vbcSummary.Min Then
            pbcDemoBar_Paint 3
        Else
            vbcSummary.Value = vbcSummary.Min
        End If
    ElseIf (imDBTotals = 9) Then     'Daypart Summary
        vbcSummary.Min = imLB1Or2   'LBound(smDPSumShow, 2)
        If UBound(smDPSumShow, 2) - 2 <= vbcSummary.LargeChange Then
            vbcSummary.Max = imLB1Or2   'LBound(smDPSumShow, 2)
        Else
            vbcSummary.Max = UBound(smDPSumShow, 2) - 1 - vbcSummary.LargeChange
        End If
        If vbcSummary.Value = vbcSummary.Min Then
            pbcDemoBar_Paint 3
        Else
            vbcSummary.Value = vbcSummary.Min
        End If
    ElseIf (imDBTotals = 10) Then     'Vehicle Difference
        vbcSummary.Min = imLB1Or2   'LBound(smVDSumShow, 2)
        If UBound(smVDSumShow, 2) - 2 <= vbcSummary.LargeChange Then
            vbcSummary.Max = imLB1Or2   'LBound(smVDSumShow, 2)
        Else
            vbcSummary.Max = UBound(smVDSumShow, 2) - 1 - vbcSummary.LargeChange
        End If
        If vbcSummary.Value = vbcSummary.Min Then
            pbcDemoBar_Paint 3
        Else
            vbcSummary.Value = vbcSummary.Min
        End If
    End If
    If ilDBBookOvly = False Then
        edcDBBook.Visible = True
        lacDBBookOvly.Visible = False
    End If
    If (imDBTotals = 6) Or (imDBTotals = 7) Then    'Week Summary or Quarterly Summary
        If imLnRowNo > 0 Then
            If tgClfCntr(imLnRowNo - 1).bLnPriceSet = True Then
                If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
                    mSetHdDate False, False
                Else
                    mSetHdDate True, False
                End If
            End If
        Else
            If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
                mSetHdDate False, False
            Else
                mSetHdDate True, False
            End If
        End If
    End If
    imInSummary = False
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mTerminate                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: terminate form                 *
'*                                                     *
'*******************************************************
Public Sub mTerminate()
'
'   mTerminate
'   Where:
'
    Dim ilRet As Integer
    'ilRet = btrClose(hmRgf)
    'btrDestroy hmRgf

    
    imTerminate = True
    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)

    smStep3CodeTag = ""
    smVehicleCodeTag = ""
    smShareBudgetCodeTag(0) = ""
    smShareBudgetCodeTag(1) = ""
    smRevSetCodeTag(0) = ""
    smRevSetCodeTag(1) = ""
    smRevSetCodeTag(2) = ""
    smRevSetCodeTag(3) = ""
    smRevSetCodeTag(4) = ""

    igAlertCntrStatus = -1
    'TTP 10937 - Contract Dashboard: new screen to show contract header information
    If imReturnToAlerts Or imReturnToDashboard Then
        Traffic!tmcInitAlert.Enabled = True
    End If

    Screen.MousePointer = vbDefault
    igManUnload = YES
    Unload Contract
    igManUnload = NO
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mTestFields                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Test fields for mandatory and   *
'*                     blanks                          *
'*                                                     *
'*******************************************************
Public Function mTestFields(ilCtrlNo As Integer, ilState As Integer) As Integer
'
'   iState = ALLBLANK+NOMSG   'Blank
'   iTest = TESTALLCTRLS
'   iRet = mTestFields(iTest, iState)
'   Where:
'       iTest (I)- Test all controls or control number specified
'       iState (I)- Test one of the following:
'                  ALLBLANK=All fields blank
'                  ALLMANBLANK=All mandatory
'                    field blank
'                  ALLMANDEFINED=All mandatory
'                    fields have data
'                  Plus
'                  NOMSG=No error message shown
'                  SHOWMSG=show error message
'       iRet (O)- True if all mandatory fields blank, False if not all blank
'
'
    Dim ilRes As Integer    'Result of MsgBox
    Dim ilLoop As Integer
    Dim ilGp As Integer
    Dim slStr As String
    'Dim ilIndex As Integer
    Dim slComm As String
    Dim ilRet As Integer
    Dim ilCode As Integer
    Dim ilReq As Integer

    If (ilCtrlNo = STATUSINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcStatus, "", "Status must be specified", tmHdCtrls(STATUSINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = STATUSINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If tmHdCtrls(STATUSINDEX).iChg Then
            ilCode = lbcStatus.ListIndex
            slStr = lbcStatus.List(ilCode)
            If (tmAdf.iCode <> 0) And ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) Then
                If (tmAdf.sCrdApp = "D") Then 'Requires Checking
                    If (ilState And SHOWMSG) = SHOWMSG Then
                        ilRes = MsgBox("Advertiser Credit Denied, Can't change Status to Hold or Order", vbOKOnly + vbExclamation, "Incomplete")
                    End If
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = STATUSINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
            End If
            If (tmAgf.iCode <> 0) And (tmAdf.sBillAgyDir <> "D") Then
                If (tmAgf.sCrdApp = "D") Then 'Requires Checking
                    If (ilState And SHOWMSG) = SHOWMSG Then
                        ilRes = MsgBox("Agency Credit Denied, Can't change Status to Hold or Order", vbOKOnly + vbExclamation, "Incomplete")
                    End If
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = STATUSINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
            End If
        End If
    End If
    If (ilCtrlNo = POTINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then

        If gFieldDefinedCtrl(lbcPot, "", "Potential Code must be specified", tmHdCtrls(POTINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = POTINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = TYPEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcType, "", "Contract Type must be specified", tmHdCtrls(TYPEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = TYPEINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = CNTRNOINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If sgCntrScreen = "Orders" Then
            slStr = edcCntrNo.Text
            If slStr <> "" Then
                If Val(slStr) = 0 Then
                    slStr = ""
                End If
            End If
            If gFieldDefinedStr(slStr, "", "Contract # must be specified", tmHdCtrls(CNTRNOINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
        Else
            slStr = smPropNo
            If slStr <> "" Then
                If Val(slStr) = 0 Then
                    slStr = ""
                End If
            End If
            If gFieldDefinedStr(slStr, "", "Proposal # must be specified", tmNoCtrls(NOPROPINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If gFieldDefinedStr(smEstNo, "", "Estimate # must be specified", tmNoCtrls(NOESTINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If gFieldDefinedCtrl(lbcResvAdvt, "", "Reservation Advertiser must be specified", tmNoCtrls(NORESVADVTINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If gFieldDefinedCtrl(lbcResv, "", "Reservation Order # must be specified", tmNoCtrls(NORESVORDERINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If gFieldDefinedStr(smEDIClientCode, "", "EDI Client Code must be specified", tmNoCtrls(NOEDICLIENTCODEINDEX).iReq, ilState) = NO Then
            'If gFieldDefinedStr(smInvProjCode, "", "Invoice Project Code must be specified", tmNoCtrls(NOINVPROJCODEINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If gFieldDefinedStr(smEDIProductCode, "", "EDI Product Code must be specified", tmNoCtrls(NOEDIPRODUCTCODEINDEX).iReq, ilState) = NO Then
            'If gFieldDefinedStr(smInvSMSNo, "", "Invoice SMS # must be specified", tmNoCtrls(NOINVSMSNOINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If gFieldDefinedStr(smDtNeeded, "", "Date Needed must be specified", tmNoCtrls(NODATEINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = CNTRNOINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
        End If
    End If
    If (ilCtrlNo = ADVTINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcAdvt, "", "Advertiser must be specified", tmHdCtrls(ADVTINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = ADVTINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = PRODUCTINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smProduct, "", "Product must be specified", tmHdCtrls(PRODUCTINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = PRODUCTINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If tgSpf.sUseProdSptScr = "P" Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                tmHdCtrls(SHTTITLEINDEX).iReq = True
            Else
                tmHdCtrls(SHTTITLEINDEX).iReq = False
            End If
        Else
            tmHdCtrls(SHTTITLEINDEX).iReq = False
        End If
        If (ilCtrlNo = SHTTITLEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
            If smShtTitle <> "[None]" Then
                slStr = smShtTitle
            Else
                slStr = ""
            End If
            If gFieldDefinedStr(slStr, "", "Short Title must be specified", tmHdCtrls(SHTTITLEINDEX).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = SHTTITLEINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
        End If
        tmHdCtrls(SHTTITLEINDEX).iReq = False
    End If
    If (ilCtrlNo = AGENCYINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcAgency, "", "Agency must be specified", tmHdCtrls(AGENCYINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = AGENCYINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        'If driect selected- then advertiser must be defined as direct
        If (lbcAgency.ListIndex = 1) And (Trim$(tmAdf.sBillAgyDir) <> "D") Then
            If (ilState And SHOWMSG) = SHOWMSG Then
                ilRes = MsgBox("Contract can't be [Direct Advertiser] until Advertiser is defined as Bill Direct", vbOKOnly + vbExclamation, "Incomplete")
            End If
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = ADVTINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = SPERSONINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then

        For ilLoop = 0 To 9 Step 1
            If gFieldDefinedStr(smSlspName(ilLoop), "", "Salesperson must be specified", tmSPCtrls(SPNAME1INDEX + ilLoop * imSPNoCol).iReq, ilState) = NO Then
                If ilState = (ALLMANDEFINED + SHOWMSG) Then
                    imHdBoxNo = SPERSONINDEX
                End If
                mTestFields = NO
                Exit Function
            End If
            If tgSpf.sSubCompany <> "Y" Then
                If gFieldDefinedStr(smSlspField2(ilLoop), "", "Commission must be specified", tmSPCtrls(SPNAME1INDEX + ilLoop * imSPNoCol + 1).iReq, ilState) = NO Then
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = SPERSONINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
            Else
                If gFieldDefinedStr(smSlspField2(ilLoop), "", "SubCompany must be specified", tmSPCtrls(SPNAME1INDEX + ilLoop * imSPNoCol + 1).iReq, ilState) = NO Then
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = SPERSONINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
            End If
            If tgSpf.sCommByCntr = "Y" Then
                If gFieldDefinedStr(smSlspField3(ilLoop), "", "Commission must be specified", tmSPCtrls(SPNAME1INDEX + ilLoop * imSPNoCol + 2).iReq, ilState) = NO Then
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = SPERSONINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
            ElseIf tgSpf.sSubCompany = "Y" Then
                If gFieldDefinedStr(smSlspField3(ilLoop), "", "Commission must be specified", tmSPCtrls(SPNAME1INDEX + ilLoop * imSPNoCol + 2).iReq, ilState) = NO Then
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = SPERSONINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
                If gFieldDefinedStr(smSlspField4(ilLoop), "", "Commission must be specified", tmSPCtrls(SPNAME1INDEX + ilLoop * imSPNoCol + 3).iReq, ilState) = NO Then
                    If ilState = (ALLMANDEFINED + SHOWMSG) Then
                        imHdBoxNo = SPERSONINDEX
                    End If
                    mTestFields = NO
                    Exit Function
                End If
            End If
        Next ilLoop
        'Test commissions- if not 100% should warning message
        If imInSave Then    'And tmHdCtrls(SPERSONINDEX).iChg Then
            If lbcStatus.ListIndex >= 0 Then
                slStr = Contract.lbcStatus.List(Contract.lbcStatus.ListIndex)
                If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                    If tgSpf.sSubCompany <> "Y" Then
                        slComm = "0.0"
                        For ilLoop = 0 To 9 Step 1
                            If imSlspIndex(ilLoop) >= 2 Then
                                If tgSpf.sCommByCntr = "Y" Then
                                    slComm = gAddStr(slComm, smSlspField3(ilLoop))
                                Else
                                    slComm = gAddStr(slComm, smSlspField2(ilLoop))
                                End If
                            End If
                        Next ilLoop
                        If gCompNumberStr(slComm, "100.0") <> 0 Then
                            Beep
                            ilRet = MsgBox("Salesperson Commission Total is " & slComm & " which is not 100%, Ok to Continue with Save", vbYesNo + vbDefaultButton2 + vbQuestion, "Warning")
                            If ilRet = vbNo Then
                                imHdBoxNo = SPERSONINDEX
                                mTestFields = NO
                                Exit Function
                            End If
                        End If
                    Else
                        For ilGp = 0 To 9 Step 1
                            If imSlspIndex(ilGp) >= 2 Then
                                slComm = "0.0"
                                For ilLoop = 0 To 9 Step 1
                                    If imSlspIndex(ilLoop) >= 2 Then
                                        If StrComp(smSlspField2(ilGp), smSlspField2(ilLoop), 1) = 0 Then
                                            slComm = gAddStr(slComm, smSlspField3(ilLoop))
                                        End If
                                    End If
                                Next ilLoop
                                If gCompNumberStr(slComm, "100.0") <> 0 Then
                                    Beep
                                    ilRet = MsgBox("Salesperson Revenue Share Total is " & slComm & " which is not 100%, Ok to Continue with Save", vbYesNo + vbDefaultButton2 + vbQuestion, "Warning")
                                    If ilRet = vbNo Then
                                        imHdBoxNo = SPERSONINDEX
                                        mTestFields = NO
                                        Exit Function
                                    End If
                                End If
                            End If
                        Next ilGp
                    End If
                End If
            End If
        End If
    End If
    If (ilCtrlNo = COMPINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        slStr = lbcComp(0).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Product Protection must be specified", tmCECtrls(CECOMPINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = COMPINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedCtrl(lbcComp(1), "", "Product Protection must be specified", tmCECtrls(CECOMPINDEX + 1).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = COMPINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedCtrl(lbcExcl(0), "", "Program Exclusion must be specified", tmCECtrls(CEEXCLINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = COMPINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedCtrl(lbcExcl(1), "", "Program Exclusion must be specified", tmCECtrls(CEEXCLINDEX + 1).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = COMPINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedCtrl(lbcBusCat, "", "Business Category must be specified (Click in Product Protection Area)", tmCECtrls(CEBUSCATINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = COMPINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = BUYERINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(edcHdDropDown, "", "Buyer must be specified", tmHdCtrls(BUYERINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = BUYERINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = PHONEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(mkcPhone, smPhoneImage, "Phone # must be specified", tmHdCtrls(PHONEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = PHONEINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = SHAREINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smShareBudget(0), "", "Company Name must be specified", tmSBCtrls(SBYCOMPANYINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(0), "", "Share of Budget must be specified", tmSBCtrls(SBYPCTINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudget(1), "", "Company Name must be specified", tmSBCtrls(SBCOMPANY1INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(1), "", "Share of Budget must be specified", tmSBCtrls(SBPCT1INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudget(2), "", "Company Name must be specified", tmSBCtrls(SBCOMPANY2INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(2), "", "Share of Budget must be specified", tmSBCtrls(SBPCT2INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudget(3), "", "Company Name must be specified", tmSBCtrls(SBCOMPANY3INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(3), "", "Share of Budget must be specified", tmSBCtrls(SBPCT3INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudget(4), "", "Company Name must be specified", tmSBCtrls(SBCOMPANY4INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(4), "", "Share of Budget must be specified", tmSBCtrls(SBPCT4INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudget(5), "", "Company Name must be specified", tmSBCtrls(SBCOMPANY5INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(5), "", "Share of Budget must be specified", tmSBCtrls(SBPCT5INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudget(6), "", "Company Name must be specified", tmSBCtrls(SBCOMPANY6INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If gFieldDefinedStr(smShareBudgetPct(6), "", "Share of Budget must be specified", tmSBCtrls(SBPCT6INDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SHAREINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        'Test commissions- if not 100% should warning message
       If (imInSave) And (tgSpf.sCWarnMsg = "Y") And ((Asc(tgSpf.sOptionFields) And OFSHARE) = OFSHARE) Then    'And tmHdCtrls(SHAREINDEX).iChg Then
            If lbcStatus.ListIndex >= 0 Then
                slStr = Contract.lbcStatus.List(Contract.lbcStatus.ListIndex)
                If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                    slComm = "0.0"
                    For ilLoop = 0 To 6 Step 1
                        slComm = gAddStr(slComm, smShareBudgetPct(ilLoop))
                    Next ilLoop
                    If gCompNumberStr(slComm, "100.0") <> 0 Then
                        Beep
                        ilRet = MsgBox("Share of Budget Total is " & slComm & " which is not 100%, Ok to Continue with Save", vbYesNo + vbDefaultButton2 + vbQuestion, "Warning")
                        If ilRet = vbNo Then
                            imHdBoxNo = SHAREINDEX
                            mTestFields = NO
                            Exit Function
                        End If
                    End If
                End If
            End If
        End If
    End If
    If (ilCtrlNo = REVSETINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(0).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV1INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(0).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Sets must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = REVSETINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        'tmRSCtrls(RSREV1INDEX).iReq = False
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(1).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV2INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(1).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Sets must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = REVSETINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(2).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV3INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(2).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Sets must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = REVSETINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If ((InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0)) And (lbcRevSet(3).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV4INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(3).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Sets must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = REVSETINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) And (lbcRevSet(4).ListCount > 2) Then
                ilReq = tmRSCtrls(RSREV5INDEX).iReq
            Else
                ilReq = False
            End If
        Else
            ilReq = False
        End If
        slStr = lbcRevSet(4).Text
        If slStr = "[None]" Then
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Revenue Sets must be specified", ilReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = REVSETINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = SEGINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then

        If gFieldDefinedCtrl(lbcSeg, "", "Segment must be specified", tmHdCtrls(SEGINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = SEGINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = DEMOINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If imCppCpm = 0 Then
            slStr = "N/A"
        ElseIf imCppCpm = 1 Then
            slStr = "CPM"
        ElseIf imCppCpm = 2 Then
            slStr = "CPP"
        Else
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Price type must be specified", tmHdCtrls(DEMOINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = DEMOINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = GUARINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smHdSave(2), "", "Delivery Guarantee must be specified", tmHdCtrls(GUARINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = GUARINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = TRADEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smPctTrade, "", "% Trade must be specified", tmPTCtrls(PTTRADEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = TRADEINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If imAgyComm = 0 Then
            slStr = "Yes"
        ElseIf imAgyComm = 1 Then
            slStr = "No"
        Else
            slStr = ""
        End If
        If gFieldDefinedStr(slStr, "", "Agency Commissionable on Trade not set", tmPTCtrls(PTAGYCOMMINDEX).iReq, ilState) = NO Then  'L.Bianchi 06/24/2021 TTP 10185
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = TRADEINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = RATECARDINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcRateCard, "", "Rate card must be specified", tmHdCtrls(RATECARDINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = RATECARDINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = GROSSINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smHdSave(1), "", "Total gross must be specified", tmHdCtrls(GROSSINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = GROSSINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = BILLCYCLEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcBillCycle, "", "Billing cycle must be specified", tmHdCtrls(BILLCYCLEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = BILLCYCLEINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
        If lbcBillCycle.ListIndex >= 0 Then
            '10756 disallow digital with weekly billing
'            If Left(lbcBillCycle.List(lbcBillCycle.ListIndex), 1) <> "S" Then
            If Left(lbcBillCycle.List(lbcBillCycle.ListIndex), 1) = "W" Then
                '10756
'                If UBound(tgClfCntr) > LBound(tgClfCntr) Then
                 If ((Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMSTARTDATE) <> "")) Then
                    If (ilState And SHOWMSG) = SHOWMSG Then
                        MsgBox "Digital buys not allowed with weekly billing cycle", vbOKOnly + vbExclamation, "Message"
                    End If
                    imHdBoxNo = BILLCYCLEINDEX
                    mTestFields = NO
                    Exit Function
                End If
            End If
        End If
    End If
    If (ilCtrlNo = INVGROUPINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedCtrl(lbcInvGroup, "", "Invoice grouping must be specified", tmHdCtrls(INVGROUPINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = INVGROUPINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = PRODTAGINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        If gFieldDefinedStr(smHdSave(3), "", "Product/Tag must be specified", tmHdCtrls(PRODTAGINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = PRODTAGINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = CANCLAUSEINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        slStr = Trim$(edcComment.Text)
        If (ilCtrlNo = TESTALLCTRLS) Then
            slStr = smComment(3)
        End If
        If gFieldDefinedStr(slStr, "", "Cancellation Comment must be specified", tmHdCtrls(CANCLAUSEINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = CANCLAUSEINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    If (ilCtrlNo = OTHERCOMMINDEX) Or (ilCtrlNo = TESTALLCTRLS) Then
        slStr = Trim$(edcComment.Text)
        If (ilCtrlNo = TESTALLCTRLS) Then
            slStr = smComment(5)
        End If
        If gFieldDefinedStr(slStr, "", "Comment must be specified", tmHdCtrls(OTHERCOMMINDEX).iReq, ilState) = NO Then
            If ilState = (ALLMANDEFINED + SHOWMSG) Then
                imHdBoxNo = OTHERCOMMINDEX
            End If
            mTestFields = NO
            Exit Function
        End If
    End If
    mTestFields = YES
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mTypeProcessArrowKey            *
'*                                                     *
'*             Created:9/13/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process user arrow keys.       *
'*                      Used with combo boxes made up  *
'*                      from text control/button       *
'*                      control/list box control.      *
'*                                                     *
'*******************************************************
Private Sub mTypeProcessArrowKey(ilShift As Integer, ilKeyCode As Integer, lbcCtrl As Control, ilLbcArrowSetting As Integer)
'
'   mTypeProcessArrowKey Shift, KeyCode, lbcCtrl, imLbcArrowSetting
'   Where:
'       Shift (I)- Shift key state
'       KeyCode (I)- Key code
'       lbcCtrl (I)- list box control
'       ilLbcArrowSetting (I/O) - list box arrow setting flag
'                               True= make list box invisible (user click on item)
'                               False= retain list box visible state
'
    Dim ilListIndex As Integer
    If (ilShift And vbAltMask) > 0 Then
        lbcCtrl.Visible = Not lbcCtrl.Visible
    ElseIf (ilShift And vbShiftMask) > 0 Then
    Else
        ilListIndex = lbcCtrl.ListIndex
        ilLbcArrowSetting = True
        If ilKeyCode = KEYUP Then    'Up arrow
            If ilListIndex > 0 Then
                lbcCtrl.ListIndex = lbcCtrl.ListIndex - 1
            Else
                ilLbcArrowSetting = False
                Beep
                Exit Sub
            End If
        Else
            If ilListIndex < lbcCtrl.ListCount - 1 Then
                lbcCtrl.ListIndex = lbcCtrl.ListIndex + 1
            Else
                ilLbcArrowSetting = False
                Beep
                Exit Sub
            End If
        End If
        ilLbcArrowSetting = False
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mVehGp6Pop                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Vehicle Group Code    *
'*                      list box if required           *
'*                                                     *
'*******************************************************
Public Sub mVehGp6Pop()
'
'   mVehGpPop
'   Where:
'
    Dim ilRet As Integer
    Dim slName As String
    Dim ilIndex As Integer
    ilIndex = lbcVehGp6.ListIndex
    If ilIndex > 0 Then
        slName = lbcVehGp6.List(ilIndex)
    End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gIMoveListBox(Vehicle, lbcVehGp, tmVehGpCode(), smVehGpCodeTag, "Mnf.Btr", gFieldOffset("Mnf", "MnfName"), 20, ilFilter(), slFilter(), ilOffset())
    ilRet = gPopMnfPlusFieldsBox(Contract, lbcVehGp6, tmVehGp6Code(), smVehGp6CodeTag, "H6")
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mVehGp6PopErr
        gCPErrorMsg ilRet, "mVehGp6Pop (gPopMnfPlusFieldsBox)", Contract
        On Error GoTo 0
        lbcVehGp6.AddItem "[None]", 0
        If ilIndex > 0 Then
            gFindMatch slName, 1, lbcVehGp6
            If gLastFound(lbcVehGp6) > 0 Then
                lbcVehGp6.ListIndex = gLastFound(lbcVehGp6)
            Else
                lbcVehGp6.ListIndex = -1
            End If
        Else
            lbcVehGp6.ListIndex = ilIndex
        End If
    End If
    Exit Sub
mVehGp6PopErr:
    On Error GoTo 0
    imTerminate = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mVehPop                         *
'*                                                     *
'*             Created:7/21/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection combo   *
'*                      box                            *
'*                                                     *
'*******************************************************
Public Sub mVehPop(ilBuildPkName As Integer, Optional blCPMTab As Boolean = False)
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRcfCode As Integer
    Dim slFilter As String
    Dim ilClf As Integer
    Dim llRow As Long
    Dim ilVpf As Integer
    Dim slType As String
    Dim ilIndex As Integer
    
    If lbcRateCard.ListIndex < 0 Then
        Exit Sub
    End If
    'smLineType = mGetLineType(imLnRowNo)
    'If (smLineType <> "O") And (smLineType <> "A") Then
        slNameCode = tmCntRateCard(lbcRateCard.ListIndex).sKey    'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 3, "\", slCode)
        slCode = Trim$(slCode)
        ilRcfCode = CInt(slCode)
        ilIndex = lbcType.ListIndex
        If ilIndex < 0 Then
            'slType = lbcType.List(0) 'Standard
            slType = ""  'Don't set as undo will not come on
        Else
            slType = lbcType.List(ilIndex)
        End If
        'slFilter = "M"
        slFilter = "P"
        If slType <> "Standard" Then
            slFilter = "X"
        End If
        'Populate Ad Server tab info
        ilRet = gPopVehViaRateCardBox(Contract, ilRcfCode, igCntrMktCode(), lbcLnVehicle(1), tmVehicleCode2(), smVehicleCodeTag2, slFilter, True)
        slFilter = "B"  'Retrieve Air Time and Podcast Spot vehicles
        '2/25/21: Mix Air Time... changed to Ad Server Tab View Only
        '         Always populate air Time/Podcast Spots with both types of vehicles exclude CPM packages
        'If (Asc(tgSaf(0).sFeatures8) And PODADSERVERVIEWONLY) <> PODADSERVERVIEWONLY Then
        '    'Any Air Time Buys or Podcast Spot buys
        '    If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) = PODAIRTIME) Then
        '        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        '            ilVpf = gBinarySearchVpf(tgClfCntr(ilClf).ClfRec.iVefCode)
        '            If ilVpf <> -1 Then
        '                If (tgVpf(ilVpf).sGMedium <> "P") Then  'And (tgVpf(ilVpf).sGMedium <> "M") Then
        '                    slFilter = "A"
        '                Else
        '                    slFilter = "P"
        '                End If
        '                Exit For
        '            End If
        '        Next ilClf
        '    End If
        '    'Any Podcast CPM Buy
        '    If ((Asc(tgSaf(0).sFeatures8) And PODADSERVER) = PODADSERVER) And (slFilter = "B") Then
        '        For llRow = grdCPMBuy.FixedRows To grdCPMBuy.Rows - 1 Step 1
        '            If (grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
        '                slFilter = "P"
        '                Exit For
        '            End If
        '        Next llRow
        '    End If
        'End If
        If slFilter = "B" Then
            If slType <> "Standard" Then
                slFilter = "A"
            End If
        ElseIf slFilter = "P" Then
            If slType <> "Standard" Then
                slFilter = "X"
            End If
        End If
        If smVefPrevFilter <> slFilter Then
            smVehicleCodeTag = "~"
            smVefPrevFilter = slFilter
        End If
        'TTP 10438 - Proposals/Contracts screen, NTR tab: podcast medium vehicle for use with ad server only doesn't appear in vehicle list WHEN the podcast Ad Server option is ON
        If tscLine.SelectedItem.Index <> imTabMap(TABNTR) Then
            ilRet = gPopVehViaRateCardBox(Contract, ilRcfCode, igCntrMktCode(), lbcLnVehicle(0), tmVehicleCode(), smVehicleCodeTag, slFilter, False, True)
        Else
            'Dont check LTF for NTR Tab
            ilRet = gPopVehViaRateCardBox(Contract, ilRcfCode, igCntrMktCode(), lbcLnVehicle(0), tmVehicleCode(), smVehicleCodeTag, slFilter, False, False)
        End If
        If ilRet <> CP_MSG_NOPOPREQ Then
            On Error GoTo mVehPopErr
            gCPErrorMsg ilRet, "mVehPop (gPopVehViaRateCardBox: Vehicle/Combo)", Contract
            On Error GoTo 0
            lbcLnProgram(1).Tag = ""
            gAddMissingCPMVehicle
            gCPMPkVehPop lbcPkVehicle(1)
            lbcLnProgram(0).Tag = ""
            mAddMissingLnVehicle imVefDormantAdd
            mPkVehPop lbcPkVehicle(0), False, False
        Else
            If ilBuildPkName Then
                gCPMPkVehPop lbcPkVehicle(1)
                mPkVehPop lbcPkVehicle(0), False, True
            Else
                'mPkVehPop lbcPkVehicle(igTabMapIndex), True
            End If
        End If
    ''Else
    '    mPkVehPop lbcPkVehicle(igTabMapIndex)
    ''End If
    Exit Sub
mVehPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub

Private Sub pbcAgyCTrade_KeyPress(KeyAscii As Integer)
    If KeyAscii = Asc("Y") Or (KeyAscii = Asc("y")) Then
        imAgyComm = 0
        pbcAgyCTrade_Paint
    ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
        imAgyComm = 1
        pbcAgyCTrade_Paint
    End If
    If KeyAscii = Asc(" ") Then
        If imAgyComm = 0 Then
            imAgyComm = 1
            pbcAgyCTrade_Paint
        ElseIf imAgyComm = 1 Then
            imAgyComm = 0
            pbcAgyCTrade_Paint
        End If
    End If
    mPTSetChg imPTBoxNo
    'mSetChg imHdBoxNo
End Sub

Private Sub pbcAgyCTrade_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imAgyComm = 0 Then
        imAgyComm = 1
    Else
        imAgyComm = 0
    End If
    pbcAgyCTrade_Paint
    mPTSetChg imPTBoxNo
    'mSetChg imHdBoxNo
End Sub

Private Sub pbcAgyCTrade_Paint()
    pbcAgyCTrade.Cls
    pbcAgyCTrade.CurrentX = fgBoxInsetX
    pbcAgyCTrade.CurrentY = 30 'fgBoxInsetY
    If imAgyComm = 0 Then
        pbcAgyCTrade.Print "Y"
    Else
        pbcAgyCTrade.Print "N"
    End If
End Sub


Private Sub pbcCalendar_Click()
    'gShowHelpMess tmClfHelp(), CLFCALENDAR
End Sub

Private Sub pbcCalendar_GotFocus()
    If plcPower.Visible Then
        tmcDelay.Enabled = False
        imDelaySrce = -1
    End If
End Sub

Private Sub pbcCalendar_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llDate As Long
    Dim ilWkDay As Integer
    Dim ilRowNo As Integer
    Dim slDay As String
    'mAirSetShow imAirBoxNo
    'imAirBoxNo = -1
    'pbcWkArrow.Visible = False
    ilRowNo = 0
    llDate = lmCalStartDate
    Do
        ilWkDay = gWeekDayLong(llDate)
        slDay = Trim$(str$(Day(llDate)))
        If (X >= tmCDCtrls(ilWkDay + 1).fBoxX) And (X <= (tmCDCtrls(ilWkDay + 1).fBoxX + tmCDCtrls(ilWkDay + 1).fBoxW)) Then
            If (Y >= tmCDCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15)) And (Y <= tmCDCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15) + tmCDCtrls(ilWkDay + 1).fBoxH) Then
                If imNoBoxNo = NODATEINDEX Then
                    edcShareDropDown.Text = Format$(llDate, "m/d/yy")
                    edcShareDropDown.SelStart = 0
                    edcShareDropDown.SelLength = Len(edcShareDropDown.Text)
                    edcShareDropDown.SetFocus
                    Exit Sub
                ElseIf (imDGBoxNo = DGSTARTDATEINDEX) Or (imDGBoxNo = DGENDDATEINDEX) Then
                    '11/2/19: Moved to CFlight form
                    'edcDGDropDown.Text = Format$(llDate, "m/d/yy")
                    'edcDGDropDown.SelStart = 0
                    'edcDGDropDown.SelLength = Len(edcDGDropDown.Text)
                    'edcDGDropDown.SetFocus
                    Exit Sub
                End If
                If plcPower.Visible Then
                    tmcDelay.Enabled = False
                    imDelaySrce = -1
                    If (imPBDateIndex = 0) Or (imPBDateIndex = 1) Then
                        edcPBDate(imPBDateIndex).Text = Format$(llDate, "m/d/yy")
                        edcPBDate(imPBDateIndex).SelStart = 0
                        edcPBDate(imPBDateIndex).SelLength = Len(edcPBDate(imPBDateIndex).Text)
                        edcPBDate(imPBDateIndex).SetFocus
                        'DoEvents
                        'mPBSetCommands
                    End If
                    Exit Sub
                End If
                If grdCPMBuy.Visible Then
                    edcLNDropDown.Text = Format$(llDate, "m/d/yy")
                    edcLNDropDown.SelStart = 0
                    edcLNDropDown.SelLength = Len(edcShareDropDown.Text)
                    edcLNDropDown.SetFocus
                    Exit Sub
                End If
            End If
        End If
        If ilWkDay = 6 Then
            ilRowNo = ilRowNo + 1
        End If
        llDate = llDate + 1
    Loop Until llDate > lmCalEndDate
    If imNoBoxNo = NODATEINDEX Then
        edcShareDropDown.SetFocus
    ElseIf (imDGBoxNo = DGSTARTDATEINDEX) Or (imDGBoxNo = DGENDDATEINDEX) Then
        edcDGDropDown.SetFocus
    Else
        If plcPower.Visible Then
            If (imPBDateIndex = 0) Or (imPBDateIndex = 1) Then
                edcPBDate(imPBDateIndex).SetFocus
            End If
        ElseIf grdCPMBuy.Visible Then
            edcLNDropDown.SetFocus
        End If
    End If
End Sub

Public Sub pbcCalendar_Paint()
    Dim slStr As String
    If imSettingCD Then
        imSettingCD = False
        Exit Sub
    End If
    slStr = Trim$(str$(imCalMonth)) & "/15/" & Trim$(str$(imCalYear))
    lacCalName.Caption = gMonthYearFormat(slStr)
    gPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
    mBoxCalDate
End Sub

Private Sub pbcCE_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    If Not imUpdateAllowed Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    For ilBox = imLBCTCtrls To UBound(tmCECtrls) Step 1
        If (X >= tmCECtrls(ilBox).fBoxX) And (X <= tmCECtrls(ilBox).fBoxX + tmCECtrls(ilBox).fBoxW) Then
            If (Y >= tmCECtrls(ilBox).fBoxY) And (Y <= tmCECtrls(ilBox).fBoxY + tmCECtrls(ilBox).fBoxH) Then
                If (tgSpf.sAExcl <> "Y") And ((ilBox = CEEXCLINDEX) Or (ilBox = CEEXCLINDEX + 1)) Then
                    Beep
                    Exit Sub
                End If
                If (ilBox = CEBUSCATINDEX) And ((Asc(tgSpf.sOptionFields) And OFBUSCAT) <> OFBUSCAT) Then
                    Beep
                    Exit Sub
                End If
                If (igRepNetChgAllowed) And (ilBox <> CECOMPINDEX) And (ilBox <> CECOMPINDEX + 1) And (ilBox <> CEBUSCATINDEX) Then
                    Beep
                    Exit Sub
                End If
                mCESetShow imCEBoxNo
                imCEBoxNo = ilBox
                mCEEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mCESetFocus imCEBoxNo
End Sub

Private Sub pbcCE_Paint()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilBox As Integer
    llColor = pbcCE.ForeColor
    slFontName = pbcCE.FontName
    flFontSize = pbcCE.FontSize
    pbcCE.ForeColor = BLUE
    pbcCE.FontBold = False
    pbcCE.FontSize = 7
    pbcCE.FontName = "Arial"
    pbcCE.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    If tgSpf.sAExcl = "Y" Then  'Using Program exclusions
        pbcCE.CurrentX = tmCECtrls(CEEXCLINDEX).fBoxX + 15  'fgBoxInsetX
        pbcCE.CurrentY = tmCECtrls(CEEXCLINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcCE.Print "Program Exclusions"
        pbcCE.CurrentX = tmCECtrls(CEEXCLINDEX + 1).fBoxX + 15 'fgBoxInsetX
        pbcCE.CurrentY = tmCECtrls(CEEXCLINDEX + 1).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcCE.Print "Program Exclusions"
    End If
    If (Asc(tgSpf.sOptionFields) And OFBUSCAT) = OFBUSCAT Then  'Using Business Category
        pbcCE.CurrentX = tmCECtrls(CEBUSCATINDEX).fBoxX + 15  'fgBoxInsetX
        pbcCE.CurrentY = tmCECtrls(CEBUSCATINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcCE.Print "Business Category"
    End If
    pbcCE.FontSize = flFontSize
    pbcCE.FontName = slFontName
    pbcCE.FontSize = flFontSize
    pbcCE.ForeColor = llColor
    pbcCE.FontBold = True

    For ilBox = imLBCTCtrls To UBound(tmCECtrls) Step 1
        If ((tgSpf.sAExcl <> "Y") And ((ilBox = CEEXCLINDEX) Or (ilBox = CEEXCLINDEX + 1))) Or ((ilBox = CEBUSCATINDEX) And ((Asc(tgSpf.sOptionFields) And OFBUSCAT) <> OFBUSCAT)) Then 'Using Program exclusions
        Else
            pbcCE.CurrentX = tmCECtrls(ilBox).fBoxX + fgBoxInsetX
            pbcCE.CurrentY = tmCECtrls(ilBox).fBoxY + fgBoxInsetY
            pbcCE.Print tmCECtrls(ilBox).sShow
        End If
    Next ilBox
End Sub

Private Sub pbcClickFocus_GotFocus()
    If plcDemoBar.Visible Then
        mAllSetShow 2
        mDBSetShow imDB0BoxNo
        imDB0BoxNo = -1
        mDBSetShow imDBBoxNo
        imDBBoxNo = -1
        'If ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) Or (imLnBoxNo = PRICEINDEX) Then
        '    mSetTotalsFrmWks
        'End If
        mLnSetShow imLnBoxNo
        imLnBoxNo = -1
        '12/16/14: Add Hide/Show Hidden Lines
        'mBuildMapLinePaint
        mSetLineScroll True, False
        imMoveLnRowNo = mFindPaintLnRowNo(imLnRowNo)
        mSetArrowFrame
    Else
        mAllSetShow 0
    End If
End Sub

Private Sub pbcClickFocus_KeyUp(KeyCode As Integer, Shift As Integer)
    If KeyCode = KEYF1 Then    'Function key 1= Help
    End If
End Sub

Private Sub pbcDBLnDaily_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub pbcDBLnDaily_KeyPress(KeyAscii As Integer)
    If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Then
        edcDBValue.Text = "P"
        pbcDBLnDaily_Paint
        Exit Sub
    End If
    If (KeyAscii = Asc("Q")) Or (KeyAscii = Asc("q")) Or (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        edcDBValue.Text = "Q"
        pbcDBLnDaily_Paint
        Exit Sub
    End If
    If (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        edcDBValue.Text = "C"
        pbcLnDaily_Paint
        Exit Sub
    End If
    If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
        If imLnDaily <> 0 Then
            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                imLnChg = True
            End If
        End If
        imLnDaily = 0
        pbcLnDaily_Paint
        pbcDBLnDaily_Paint
    ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
        If imLnDaily <> 1 Then
            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                imLnChg = True
            End If
        End If
        imLnDaily = 1
        pbcLnDaily_Paint
        pbcDBLnDaily_Paint
    End If
    If KeyAscii = Asc(" ") Then
        If imLnDaily = 0 Then
            imLnDaily = 1
        Else
            imLnDaily = 0
        End If
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
        pbcLnDaily_Paint
        pbcDBLnDaily_Paint
    End If
End Sub

Private Sub pbcDBLnDaily_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imLnDaily = 0 Then
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
        imLnDaily = 1
    Else
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
        imLnDaily = 0
    End If
    pbcLnDaily_Paint
    pbcDBLnDaily_Paint
End Sub

Public Sub pbcDBLnDaily_Paint()
    Dim slStr As String

    slStr = Trim$(edcDBValue.Text)
    pbcDBLnDaily.Cls
    pbcDBLnDaily.CurrentX = fgBoxInsetX
    pbcDBLnDaily.CurrentY = 30 'fgBoxInsetY
    If imLnDaily = 0 Then
        pbcDBLnDaily.Print "Y" & slStr
    Else
        pbcDBLnDaily.Print "N" & slStr
    End If
End Sub

Private Sub pbcDBSTab_GotFocus()
    Dim ilBox As Integer
    Dim ilRet As Integer
    Dim ilLnBoxNo As Integer
    Dim ilFound As Integer
    Dim llLnStartDate As Long
    'Dim ilWkIndex As Integer
    'Dim ilIndex As Integer
    Dim llDate As Long
    Dim llAllowedChgWkStartDate As Long
    Dim ilLastBox As Integer
    Dim slWDFlag As String
    ReDim ilDailySpots(0 To 6) As Integer

    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If GetFocus() <> pbcDBSTab.HWnd Then
        Exit Sub
    End If
    If (tgChfCntr.sSchStatus = "I") Then
        ilRet = MsgBox("Contract partially scheduled, finish scheduling", vbOKOnly + vbExclamation, "Error")
        cmcHold.Enabled = True
        cmcHold.SetFocus
        Exit Sub
    End If
    If (imCreditRestr = 1) And ((imStep1Index = 0) Or (imStep1Index = 1)) Then
        ilRet = MsgBox("NO NEW ORDERS", vbOKOnly + vbExclamation, "Restriction")
        cmcCancel.SetFocus
        Exit Sub
    End If
    imTabDirection = 0  'Set-Left to right
    Select Case imDBRowNo
        Case 1  'Spot Count
            Select Case imDBBoxNo
                Case 1 To 13
                    'slStr = Trim$(edcDBValue.Text)
                    If (InStr(1, Trim$(edcDBValue.Text), "P", 1) > 0) Then
                        imLnBoxNo = imDBBoxNo + WKSPOTSINDEX - 1
                        pbcLnTab.SetFocus
                        Exit Sub
                    ElseIf (InStr(1, Trim$(edcDBValue.Text), "Q", 1) > 0) Or (InStr(1, Trim$(edcDBValue.Text), "C", 1) > 0) Then
                        imLnBoxNo = imDBBoxNo + WKSPOTSINDEX - 1
                        pbcLnTab.SetFocus
                        Exit Sub
                    Else
                        '6/7/16: Replaced GoSub
                        'GoSub STabNextBoxNo
                        mSTabNextBoxNo ilFound, ilLastBox, ilLnBoxNo, ilBox, ilDailySpots()
                        If ilFound < 0 Then
                            imDBBoxNo = -1
                            imDBRowNo = -1
                            mSetArrowFrame
                            'pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                        ilBox = ilFound
                        imDBBoxNo = ilBox
                        mDBEnableBox ilBox
                        Exit Sub
                    End If
                Case Else
                    ilBox = imDBBoxNo - 1
            End Select
        Case 3  'Price
            Select Case imDBBoxNo
                Case 1 To 13
                    '6/7/16: Replaced GoSub
                    'GoSub STabNextBoxNo
                    mSTabNextBoxNo ilFound, ilLastBox, ilLnBoxNo, ilBox, ilDailySpots()
                    If ilFound < 0 Then
                        imDBBoxNo = -1
                        imDBRowNo = -1
                        mSetArrowFrame
                        'pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    ilBox = ilFound
                    imDBBoxNo = ilBox
                    mDBEnableBox ilBox
                    Exit Sub
                Case Else
                    ilBox = imDBBoxNo - 1
            End Select
        Case 5  'Ratio
            Select Case imDBBoxNo
                Case 1 To 13
                    '6/7/16: Replaced GoSub
                    'GoSub STabNextBoxNo
                    mSTabNextBoxNo ilFound, ilLastBox, ilLnBoxNo, ilBox, ilDailySpots()
                    If ilFound < 0 Then
                        imDBBoxNo = -1
                        imDBRowNo = -1
                        mSetArrowFrame
                        'pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    ilBox = ilFound
                    imDBBoxNo = ilBox
                    mDBEnableBox ilBox
                    Exit Sub
                Case Else
                    ilBox = imDBBoxNo - 1
            End Select
        Case -2
            mDBSetShow imDB0BoxNo
            imDB0BoxNo = -1
            imDBRowNo = -1
            'pbcClickFocus.SetFocus
            Exit Sub
    End Select
    mDBSetShow imDBBoxNo
    imDBBoxNo = ilBox
    mDBEnableBox ilBox
    Exit Sub

End Sub

Private Sub pbcDBTab_GotFocus()
    Dim ilBox As Integer
    Dim ilRet As Integer
    Dim ilLnBoxNo As Integer
    Dim ilFound As Integer
    Dim ilLastBox As Integer
    Dim slStr As String

    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If GetFocus() <> pbcDBTab.HWnd Then
        Exit Sub
    End If
    If (tgChfCntr.sSchStatus = "I") Then
        ilRet = MsgBox("Contract partially scheduled, finish scheduling", vbOKOnly + vbExclamation, "Error")
        cmcHold.Enabled = True
        cmcHold.SetFocus
        Exit Sub
    End If
    If (imCreditRestr = 1) And ((imStep1Index = 0) Or (imStep1Index = 1)) Then
        ilRet = MsgBox("NO NEW ORDERS", vbOKOnly + vbExclamation, "Restriction")
        cmcCancel.SetFocus
        Exit Sub
    End If
    imTabDirection = 0  'Set-Left to right
    Select Case imDBRowNo
        Case 1  'Spot Count
            Select Case imDBBoxNo
                Case 1 To 13
                    'slStr = UCase$(Left$(edcDBValue.Text, 1))
                    slStr = Trim$(edcDBValue.Text)
                    If (InStr(1, slStr, "P", 1) > 0) Then
                        imLnBoxNo = imDBBoxNo + WKSPOTSINDEX - 1
                        pbcLnTab.SetFocus
                        Exit Sub
                    ElseIf (InStr(1, slStr, "Q", 1) > 0) Or (InStr(1, slStr, "C", 1) > 0) Then
                        imLnBoxNo = imDBBoxNo + WKSPOTSINDEX - 1
                        pbcLnTab.SetFocus
                        Exit Sub
                    Else
                        'GoSub TabNextBoxNo
                        mTabNextBoxNo ilFound
                        If ilFound <= 0 Then
                            imDBBoxNo = -1
                            imDBRowNo = -1
                            mSetArrowFrame
                            'pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                        ilBox = ilFound
                        imDBBoxNo = ilBox
                        mDBEnableBox ilBox
                        Exit Sub
                    End If
                Case Else
                    ilBox = imDBBoxNo + 1
            End Select
        Case 3  'Price
            Select Case imDBBoxNo
                Case 1 To 13
                    'GoSub TabNextBoxNo
                    mTabNextBoxNo ilFound
                    If ilFound <= 0 Then
                        imDBBoxNo = -1
                        imDBRowNo = -1
                        mSetArrowFrame
                        'pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    ilBox = ilFound
                    imDBBoxNo = ilBox
                    mDBEnableBox ilBox
                    Exit Sub
                Case Else
                    ilBox = imDBBoxNo + 1
            End Select
        Case 5  'Ratio
            Select Case imDBBoxNo
                Case 1 To 13
                    'GoSub TabNextBoxNo
                    mTabNextBoxNo ilFound
                    If ilFound <= 0 Then
                        imDBBoxNo = -1
                        imDBRowNo = -1
                        mSetArrowFrame
                        Exit Sub
                    End If
                    ilBox = ilFound
                    imDBBoxNo = ilBox
                    mDBEnableBox ilBox
                    Exit Sub
                Case Else
                    ilBox = imDBBoxNo + 1
            End Select
        Case -2
            mDBSetShow imDB0BoxNo
            imDB0BoxNo = -1
            imDBRowNo = -1
            'pbcClickFocus.SetFocus
            Exit Sub
    End Select
    mDBSetShow imDBBoxNo
    imDBBoxNo = ilBox
    mDBEnableBox ilBox
    Exit Sub

End Sub

Private Sub mTabNextBoxNo(ilFound As Integer)
    Dim ilLnBoxNo As Integer
    Dim llLnStartDate As Long
    Dim llDate As Long
    Dim llAllowedChgWkStartDate As Long
    Dim ilBox As Integer
    Dim slWDFlag As String
    ReDim ilDailySpots(0 To 6) As Integer
    
    'Skip to next allowed week
    mDBSetShow imDBBoxNo
    ilFound = -1
    'ilLastBox = -1
    ilLnBoxNo = WKSPOTSINDEX + imDBBoxNo - 1
    If ilLnBoxNo = WKSPOTSINDEX + 12 Then
        'pbcDemoBar_MouseUp 1, 0, 0, CSng(lmDBHotSpot(3, 1) + 1220), CSng(lmDBHotSpot(3, 2))
        pbcDemoBar_MouseUp 1, 0, 0, CSng(lmDBHotSpot(3, 1)), CSng(lmDBHotSpot(3, 2))
        ilLnBoxNo = WKSPOTSINDEX - 1
    End If
    If ilLnBoxNo < WKSPOTSINDEX + 12 Then
        llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
        llAllowedChgWkStartDate = mLnDate(imLnRowNo, smLnLLD, 0)
        If llAllowedChgWkStartDate <= tgClfCntr(imLnRowNo - 1).lEndBilledDate Then
            llAllowedChgWkStartDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate + 1
        End If
        ilBox = ilLnBoxNo + 1
        Do While ilBox <= WKSPOTSINDEX + 12
            llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
            If (llAllowedChgWkStartDate <= llDate) Then 'And (llDate >= gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))) And ((llDate <= gDateValue(gObtainNextSunday(smLnSave(15, imLnRowNo))))) Then
                If (imDBRowNo = 3) Or (imDBRowNo = 5) Then
                    imWkCff = mGetFlightSpotsDays(imLnRowNo, llDate, imOvDays(), lmWkSpots, imWkDays(), slWDFlag, ilDailySpots())
                    If imLnSave(8, imLnRowNo) = 0 Then
                        If lmWkSpots > 0 Then
                            ilFound = ilBox - WKSPOTSINDEX + 1
                            Exit Do
                        End If
                    Else
                        If lmWkSpots > 0 Then
                            ilFound = ilBox - WKSPOTSINDEX + 1
                            Exit Do
                        End If
                    End If
                Else
                    ilFound = ilBox - WKSPOTSINDEX + 1
                    Exit Do
                End If
            End If
            ilBox = ilBox + 1
        Loop
    End If
End Sub

Private Sub pbcDemoBar_GotFocus(Index As Integer)
    lbcDBDisplay.Visible = False
    lbcDBBook.Visible = False
    lbcDBDemo.Visible = False
    lbcDBSocEco.Visible = False
End Sub

Private Sub pbcDemoBar_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim ilLoop As Integer
    Dim ilHSStartWkNo As Integer
    Dim ilHSCurWkNo As Integer
    Dim ilAdj As Integer
    Dim ilSvRowNo As Integer
    'Dim ilFound As Integer
    Dim llDate As Long
    Dim llEndPrevPeriod As Long
    Dim llAllowedChgWkStartDate As Long
    Dim slLineType As String
    Dim ilPaintLnRowNo As Integer
    Dim ilWkCff As Integer
    Dim llWkSpots As Long
    Dim ilRow As Integer
    Dim ilCompRow As Integer
    Dim ilRowNo As Integer
    Dim llPrice As Long
    Dim ilSpots As Integer
    Dim ilMaxRow As Integer
    Dim slWDFlag As String
    ReDim ilDailySpots(0 To 6) As Integer

    If ((Index = 2) Or (Index = 3)) And (imDBTotals >= 5) And (imDBTotals <= 10) Then
        If (imDBTotals = 5) Or (imDBTotals = 8) Or (imDBTotals = 9) Then
            ilCompRow = vbcSummary.LargeChange + 1
            Select Case imDBTotals
                Case 5
                    If UBound(smLnSumShow, 2) - 1 > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = UBound(smLnSumShow, 2) - 1
                    End If
                Case 8
                    If UBound(smVSumShow, 2) - 1 > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = UBound(smVSumShow, 2) - 1
                    End If
                Case 9
                    If UBound(smDPSumShow, 2) - 1 > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = UBound(smDPSumShow, 2) - 1
                    End If
            End Select

            For ilRow = 1 To ilMaxRow Step 1
                For ilBox = imLBCTCtrls To UBound(tmSumCtrls) Step 1
                    If ((X >= tmSumCtrls(ilBox).fBoxX) And (X <= (tmSumCtrls(ilBox).fBoxX + tmSumCtrls(ilBox).fBoxW))) Or ((X >= 30) And (X <= (tmSumCtrls(VEHINDEX).fBoxX - 15)) And (ilBox = VEHINDEX)) Then
                        If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmSumCtrls(ilBox).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmSumCtrls(ilBox).fBoxY + tmSumCtrls(ilBox).fBoxH)) Then
                            ilRowNo = ilRow + vbcSummary.Value - 1
                            Select Case imDBTotals
                                Case 5
                                    If Trim$(smLnSumShow(12, ilRowNo)) = "F" Then
                                        smLnSumShow(12, ilRowNo) = "T"
                                    Else
                                        smLnSumShow(12, ilRowNo) = "F"
                                    End If
                                Case 8
                                    If Trim$(smVSumShow(12, ilRowNo)) = "F" Then
                                        smVSumShow(12, ilRowNo) = "T"
                                    Else
                                        smVSumShow(12, ilRowNo) = "F"
                                    End If
                                Case 9
                                    If Trim$(smDPSumShow(12, ilRowNo)) = "F" Then
                                        smDPSumShow(12, ilRowNo) = "T"
                                    Else
                                        smDPSumShow(12, ilRowNo) = "F"
                                    End If
                            End Select
                            mTSummary imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, VEHINDEX, DPINDEX, imStep1Index, False, True
                            If imDBTotals = 5 Then
                                pbcDemoBar(2).Cls
                                pbcDemoBar_Paint 2
                            Else
                                pbcDemoBar(3).Cls
                                pbcDemoBar_Paint 3
                            End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                Next ilBox
            Next ilRow
        End If
        Exit Sub
    End If
    If imLnRowNo <= 0 Then
        Exit Sub
    End If
    If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
        'Disallow any line changes 7/2/98- Jim
        Exit Sub
    End If
    If tgClfCntr(imLnRowNo - 1).iCancel Then
        Beep
        mSetArrowFrame
        Exit Sub
    End If
    mLnSetShow imLnBoxNo
    slLineType = mGetLineType(imLnRowNo)
    If Index = 0 Then
        For ilBox = imLBCTCtrls To UBound(tmDBCtrls) - 1 Step 1
            If (X >= tmDBCtrls(ilBox).fBoxX) And (X <= (tmDBCtrls(ilBox).fBoxX + tmDBCtrls(ilBox).fBoxW)) Then
                If (Y >= tmDBCtrls(ilBox).fBoxY - tmDBCtrls(1).fBoxY + 15) And (Y <= (tmDBCtrls(ilBox).fBoxY - tmDBCtrls(1).fBoxY + 15 + tmDBCtrls(ilBox).fBoxH)) Then
                    If (ilBox <> 1) Then    'Or (slLineType = "O") Or (slLineType = "A") Then
                        Beep
                        mSetArrowFrame
                        Exit Sub
                    End If
                    If imToggleCPPCPM = 0 Then
                        imToggleCPPCPM = 1
                    Else
                        imToggleCPPCPM = 0
                    End If
                    mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
                    pbcDemoBar(0).Cls
                    pbcDemoBar(1).Cls
                    pbcDemoBar_Paint 0
                    pbcDemoBar_Paint 1
                    mSetArrowFrame
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
            End If
        Next ilBox
        Beep
        mSetArrowFrame
        Exit Sub
    Else
        If (imDBTotals < 5) And (Index = 1) Then
            If (X >= tmAvToggleCtrls(1).fBoxX) And (X <= (tmAvToggleCtrls(1).fBoxX + tmAvToggleCtrls(1).fBoxW)) Then
                If (Y >= tmAvToggleCtrls(1).fBoxY) And (Y <= (tmAvToggleCtrls(1).fBoxY + tmAvToggleCtrls(1).fBoxH)) Then
                    If (slLineType = "O") Or (slLineType = "A") Then
                        Beep
                        mSetArrowFrame
                        Exit Sub
                    End If
                    If Val(smLnSave(16, imLnRowNo)) = 10 Then
                        If imToggleAvail = 2 Then
                            imToggleAvail = -1
                        ElseIf imToggleAvail = 0 Then
                            imToggleAvail = 2
                        Else
                            imToggleAvail = 0
                        End If
                    Else
                        If imToggleAvail = 1 Then
                            'imToggleAvail = 2
                            imToggleAvail = -1
                        ElseIf imToggleAvail = 0 Then
                            'imToggleAvail = 2
                            imToggleAvail = 1
                        Else
                            imToggleAvail = 0
                        End If
                    End If
                    Screen.MousePointer = vbHourglass
                    mBuildWkInfo False, True, True
                    pbcDemoBar(1).Cls
                    pbcDemoBar_Paint 1
                    mSetArrowFrame
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
            End If
            For ilBox = UBound(tmDBCtrls) To UBound(tmDBCtrls) Step 1
                If (X >= tmDBCtrls(ilBox).fBoxX) And (X <= (tmDBCtrls(ilBox).fBoxX + tmDBCtrls(ilBox).fBoxW)) Then
                    If (Y >= tmDBCtrls(ilBox).fBoxY) And (Y <= (tmDBCtrls(ilBox).fBoxY + tmDBCtrls(ilBox).fBoxH)) Then
                        If (ilBox <> 12) Or (slLineType = "O") Or (slLineType = "A") Then
                            Beep
                            mSetArrowFrame
                            Exit Sub
                        End If
                        If ilBox = 12 And Not mAllowedToChgSpotPrice(imLnRowNo) Then
                            mSetArrowFrame
                            Exit Sub
                        End If
                        If slLineType = "H" Then
                            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                                If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                                    'If tgPackLn(ilLoop).iAlter <> True Then
                                    If tgPackLn(ilLoop).sAlter <> "Y" Then
                                        mSetArrowFrame
                                        If pbcLineArrow.Visible Then
                                            pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                                        Else
                                            pbcClickFocus.SetFocus
                                        End If
                                        Exit Sub
                                    End If
                                    Exit For
                                End If
                            Next ilLoop
                        End If
                        mDBSetShow imDBBoxNo
                        imDBRowNo = -2
                        imDBBoxNo = -1
                        mDBSetShow imDB0BoxNo
                        imDB0BoxNo = ilBox
                        mDBEnableBox ilBox
                        Exit Sub
                    End If
                End If
            Next ilBox
        End If
        'Check if hot spot
        If imInHotSpot Then
            Exit Sub
        End If
        For ilLoop = imLBCTCtrls To UBound(lmDBHotSpot, 1) Step 1
            'If ilLoop <= 2 Then
            '    ilAdj = -2235   '-2115
            'Else
            '    ilAdj = 1220    '1380
            'End If
            ilAdj = 0
            If (X >= lmDBHotSpot(ilLoop, 1) + ilAdj) And (X <= lmDBHotSpot(ilLoop, 3) + ilAdj) And (Y >= lmDBHotSpot(ilLoop, 2)) And (Y <= lmDBHotSpot(ilLoop, 4)) Then
                Screen.MousePointer = vbHourglass
                ilSvRowNo = imLnRowNo
                mAllSetShow 2
                mDBSetShow imDB0BoxNo
                imDB0BoxNo = -1
                mDBSetShow imDBBoxNo
                imDBBoxNo = -1
                mLnSetShow imLnBoxNo
                imLnBoxNo = -1
                imInHotSpot = True
                ilHSStartWkNo = imHSStartWkNo
                ilHSCurWkNo = imHSCurWkNo
                Select Case ilLoop
                    Case 1  'Goto Start
                        imHSCurWkNo = imHSStartWkNo
                    Case 2  'Reduce by 13
                        imHSCurWkNo = imHSCurWkNo - 13
                        If imHSCurWkNo < imHSStartWkNo Then
                            imHSCurWkNo = imHSStartWkNo
                        End If
                    Case 3  'Increase by 13
                        imHSCurWkNo = imHSCurWkNo + 13
                        If imHSCurWkNo + 12 > imHSEndWkNo Then
                            imHSCurWkNo = imHSEndWkNo - 12
                            If imHSCurWkNo < imHSStartWkNo Then
                                imHSCurWkNo = imHSStartWkNo
                            End If
                        End If
                    Case 4  'GoTo End
                        imHSCurWkNo = imHSEndWkNo - 12
                        If imHSCurWkNo < imHSStartWkNo Then
                            imHSCurWkNo = imHSStartWkNo
                        End If
                End Select
                imLnRowNo = ilSvRowNo
                If ilHSCurWkNo <> imHSCurWkNo Then
                    'If (imHSCurWkNo > ilHSCurWkNo) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9)) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                    If (imHSCurWkNo > ilHSCurWkNo) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION))) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        bmInAvailTab = True
                        mAvailTab
                        bmInAvailTab = False
                        'If (imLnTotalType = 2) Then
                        '    mResearchForTabs
                        'End If
                    End If
                    ilPaintLnRowNo = imPaintLnRowNo
                    imPaintLnRowNo = -1
                   '10843 remove dead code
'                    If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType >= 2) Then
'                        imLnTotalType = (imHSCurWkNo - ilHSStartWkNo) \ 13 + 1
'                        lacPrice_Click 0
'                    Else
                        pbcLnTotal.Cls
                        pbcLnDates.Cls
                        pbcLine.Cls
                        pbcLine_Paint
                        mBuildWkInfo True, False, False
                        pbcDemoBar(1).Cls
                        pbcDemoBar_Paint 1
                  '  End If
                    imPaintLnRowNo = ilPaintLnRowNo
                End If
                mSetArrowFrame
                Screen.MousePointer = vbDefault
                imInHotSpot = False
                Exit Sub
            End If
        Next ilLoop
    End If
    If slLineType = "H" Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                'If tgPackLn(ilLoop).iAlter <> True Then
                If tgPackLn(ilLoop).sAlter <> "Y" Then
                    mSetArrowFrame
                    If pbcLineArrow.Visible Then
                        pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                End If
                Exit For
            End If
        Next ilLoop
    End If
    'Spot Count
    'If (slLineType <> "A") Then
        If imDBTotals < 5 Then
            For ilBox = imLBCTCtrls To UBound(tmDBSCCtrls) Step 1
                If (X >= tmDBSCCtrls(ilBox).fBoxX) And (X <= (tmDBSCCtrls(ilBox).fBoxX + tmDBSCCtrls(ilBox).fBoxW)) Then
                    If (Y >= tmDBSCCtrls(ilBox).fBoxY) And (Y <= (tmDBSCCtrls(ilBox).fBoxY + tmDBSCCtrls(ilBox).fBoxH)) Then
                        mAllSetShow 2
                        If Trim$(smLnSave(1, imLnRowNo)) = "" Then
                            Beep
                            mSetArrowFrame
                            Exit Sub
                        End If
                        If ((Not imUpdateAllowed) Or (igRepNetChgAllowed)) And (imLnRowNo = UBound(tgClfCntr) + 1) Then
                            Beep
                            mSetArrowFrame
                            Exit Sub
                        End If
                        '8/7/12: Disallow spot count change for game lines or packages with games.
                        If mIsLnGame(imLnRowNo) Then
                            Beep
                            mSetArrowFrame
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        Screen.MousePointer = vbHourglass
                        mDBSetShow imDBBoxNo
                        'ilFound = False
                        llAllowedChgWkStartDate = mLnDate(imLnRowNo, smLnLLD, 0)
                        If llAllowedChgWkStartDate < tgClfCntr(imLnRowNo - 1).lEndBilledDate Then
                            llAllowedChgWkStartDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate
                        End If
                        gUnpackDateLong tgSpf.iRPRP(0), tgSpf.iRPRP(1), llEndPrevPeriod
                        If (llAllowedChgWkStartDate < llEndPrevPeriod) Then
                            llAllowedChgWkStartDate = llEndPrevPeriod
                        End If
                        llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - 2)
                        If (llAllowedChgWkStartDate > llDate) Then  'Or (llDate < gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))) Or ((llDate > gDateValue(gObtainNextSunday(smLnSave(15, imLnRowNo))))) Then
                            If (llDate > lmHSStartDate + 7 * imHSEndWkNo - 1) Or (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                                Beep
                                mSetArrowFrame
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            Else
                                'mCreateExtraLnWeek llDate
                                Screen.MousePointer = vbHourglass
                            End If
                        End If
                        'Disallow if weeks not defined and dynamic created package
                        If ((slLineType = "A") Or (slLineType = "O")) Then
                            ilSpots = mGetFlightSpots(imLnRowNo, llDate, llPrice)
                            If (ilSpots = 0) Then
                                For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                                    If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                                        If (tgPackLn(ilLoop).iStdPkg = False) Then
                                            Beep
                                            mSetArrowFrame
                                            Screen.MousePointer = vbDefault
                                            Exit Sub
                                        End If
                                    End If
                                Next ilLoop
                            End If
                        End If
                        imDBRowNo = 1
                        imDBBoxNo = ilBox
                        imLnBoxNo = ilBox + WKSPOTSINDEX - 1
                        mDBEnableBox ilBox
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                End If
            Next ilBox
        End If
    'End If
    Screen.MousePointer = vbDefault
    'If (tgUrf(0).sChgPrices <> "V") Then
    If (mAllowedToChgSpotPrice(imLnRowNo)) Then
        'If ((slLineType <> "O") And (slLineType <> "A")) Or ((slLineType = "O") And (tgSpf.sVirtPkgCompute = "H")) Then
        If ((slLineType <> "O") And (slLineType <> "A")) Or (((slLineType = "O") Or (slLineType = "A")) And (tgSpf.sVirtPkgCompute = "H")) Then
            'Actual Price
            For ilBox = imLBCTCtrls To UBound(tmDBAPCtrls) Step 1
                If ((imDBTotals < 5) And (X >= tmDBAPCtrls(ilBox).fBoxX) And (X <= (tmDBAPCtrls(ilBox).fBoxX + tmDBAPCtrls(ilBox).fBoxW))) Or ((imDBTotals >= 5) And (X >= tmDBSCCtrls(ilBox).fBoxX) And (X <= (tmDBSCCtrls(ilBox).fBoxX + tmDBSCCtrls(ilBox).fBoxW))) Then
                    If ((imDBTotals < 5) And (Y >= tmDBAPCtrls(ilBox).fBoxY) And (Y <= (tmDBAPCtrls(ilBox).fBoxY + tmDBAPCtrls(ilBox).fBoxH))) Or ((imDBTotals >= 5) And (Y >= tmDBSCCtrls(ilBox).fBoxY) And (Y <= (tmDBSCCtrls(ilBox).fBoxY + tmDBSCCtrls(ilBox).fBoxH))) Then
                        If tgClfCntr(imLnRowNo - 1).iCancel Then
                            Beep
                            mSetArrowFrame
                            Exit Sub
                        End If
                        If (tgClfCntr(imLnRowNo - 1).iAcqCostSpotRate = 2) Or (igFreezeState = 1) Then
                            Beep
                            mSetArrowFrame
                            Exit Sub
                        End If
                        'ilFound = False
                        llAllowedChgWkStartDate = mLnDate(imLnRowNo, smLnLLD, 0)
                        If llAllowedChgWkStartDate < tgClfCntr(imLnRowNo - 1).lEndBilledDate Then
                            llAllowedChgWkStartDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate
                        End If
                        gUnpackDateLong tgSpf.iRPRP(0), tgSpf.iRPRP(1), llEndPrevPeriod
                        If (llAllowedChgWkStartDate < llEndPrevPeriod) Then
                            llAllowedChgWkStartDate = llEndPrevPeriod
                        End If
                        llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - 2)
                        If (llAllowedChgWkStartDate > llDate) Then  'Or (llDate < gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))) Or ((llDate > gDateValue(gObtainNextSunday(smLnSave(15, imLnRowNo))))) Then
                            Beep
                            mSetArrowFrame
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        Screen.MousePointer = vbHourglass
                        ilWkCff = mGetFlightSpotsDays(imLnRowNo, llDate, imOvDays(), llWkSpots, imWkDays(), slWDFlag, ilDailySpots())
                        If llWkSpots <= 0 Then
                            Beep
                            mSetArrowFrame
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If

                        mAllSetShow 2
                        Screen.MousePointer = vbHourglass
                        If Trim$(smLnSave(1, imLnRowNo)) = "" Then
                            Beep
                            mSetArrowFrame
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If ((Not imUpdateAllowed) Or (igRepNetChgAllowed)) And (imLnRowNo = UBound(tgClfCntr) + 1) Then
                            Beep
                            mSetArrowFrame
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        mDBSetShow imDBBoxNo
                        imDBRowNo = 3
                        imDBBoxNo = ilBox
                        imLnBoxNo = -1
                        mDBEnableBox ilBox
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                End If
            Next ilBox
        End If
        If ((slLineType <> "O") And (slLineType <> "A")) Then
            'Price ratio
            If imDBTotals < 5 Then
                For ilBox = imLBCTCtrls To UBound(tmDBRCtrls) Step 1
                    If (X >= tmDBRCtrls(ilBox).fBoxX) And (X <= (tmDBRCtrls(ilBox).fBoxX + tmDBRCtrls(ilBox).fBoxW)) Then
                        If (Y >= tmDBRCtrls(ilBox).fBoxY) And (Y <= (tmDBRCtrls(ilBox).fBoxY + tmDBRCtrls(ilBox).fBoxH)) Then
                            If tgClfCntr(imLnRowNo - 1).iCancel Then
                                Beep
                                mSetArrowFrame
                                Exit Sub
                            End If
                            If Not mAllowedToChgSpotPrice(imLnRowNo) Then
                                Beep
                                mSetArrowFrame
                                Exit Sub
                            End If
                            If (tgClfCntr(imLnRowNo - 1).iAcqCostSpotRate = 2) Or (igFreezeState = 1) Then
                                Beep
                                mSetArrowFrame
                                Exit Sub
                            End If
                            Screen.MousePointer = vbHourglass
                            'ilFound = False
                            llAllowedChgWkStartDate = mLnDate(imLnRowNo, smLnLLD, 0)
                            If llAllowedChgWkStartDate < tgClfCntr(imLnRowNo - 1).lEndBilledDate Then
                                llAllowedChgWkStartDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate
                            End If
                            gUnpackDateLong tgSpf.iRPRP(0), tgSpf.iRPRP(1), llEndPrevPeriod
                            If (llAllowedChgWkStartDate < llEndPrevPeriod) Then
                                llAllowedChgWkStartDate = llEndPrevPeriod
                            End If
                            llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - 2)
                            If (llAllowedChgWkStartDate > llDate) Then  'Or (llDate < gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))) Or ((llDate > gDateValue(gObtainNextSunday(smLnSave(15, imLnRowNo))))) Then
                                Beep
                                mSetArrowFrame
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                            ilWkCff = mGetFlightSpotsDays(imLnRowNo, llDate, imOvDays(), llWkSpots, imWkDays(), slWDFlag, ilDailySpots())
                            If llWkSpots <= 0 Then
                                Beep
                                mSetArrowFrame
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                            mAllSetShow 2
                            Screen.MousePointer = vbHourglass
                            If Trim$(smLnSave(1, imLnRowNo)) = "" Then
                                Beep
                                mSetArrowFrame
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                            If ((Not imUpdateAllowed) Or (igRepNetChgAllowed)) And (imLnRowNo = UBound(tgClfCntr) + 1) Then
                                Beep
                                mSetArrowFrame
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                            mDBSetShow imDBBoxNo
                            imDBRowNo = 5
                            imDBBoxNo = ilBox
                            imLnBoxNo = -1
                            mDBEnableBox ilBox
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                Next ilBox
            End If
        End If
    End If
    Screen.MousePointer = vbDefault
    mSetArrowFrame
    If pbcLineArrow.Visible Then
        pbcLineArrow.SetFocus
    End If
    'pbcClickFocus.SetFocus
End Sub

Public Sub pbcDemoBar_Paint(Index As Integer)
    mPBCDemoBarPaint Index, imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
End Sub

Private Sub pbcDGPreempt_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub pbcDGPreempt_KeyPress(KeyAscii As Integer)
    Dim ilLIndex As Integer
    Dim ilCount As Integer
    
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) And (imRBInLnGridOrSum <> 1) And (imOVType <> 3) Then
    Else
        If (imOVType <> 2) And (imOVType <> 3) Then
            If imOVBoxNo = OVWDINDEX Then
                If (KeyAscii = Asc("W")) Or (KeyAscii = Asc("w")) Then
                    If imDGSave(2) <> 1 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imDGSave(2) = 1
                    pbcDGPreempt_Paint
                ElseIf KeyAscii = Asc("D") Or (KeyAscii = Asc("d")) Then
                    If imDGSave(2) <> 0 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imDGSave(2) = 0
                    pbcDGPreempt_Paint
                End If
                If KeyAscii = Asc(" ") Then
                    If imDGSave(2) = 0 Then
                        imDGSave(2) = 1
                    Else
                        imDGSave(2) = 0
                    End If
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    pbcDGPreempt_Paint
                End If
            ElseIf (imOVBoxNo >= OVDAYSINDEX) And (imOVBoxNo <= OVDAYSINDEX + 6) Then
                ilLIndex = LBound(imAllowedDays)
                If imAllowedDays(imOVBoxNo - OVDAYSINDEX + ilLIndex) Then
                    If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                        If imOvDays(imOVBoxNo - OVDAYSINDEX) <> 0 Then
                            If imRBInLnGridOrSum <> 1 Then
                                imComputeReq = True
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                        End If
                        imOvDays(imOVBoxNo - OVDAYSINDEX) = 0
                        pbcDGPreempt_Paint
                    ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                        If imOvDays(imOVBoxNo - OVDAYSINDEX) <> 1 Then
                            If imRBInLnGridOrSum <> 1 Then
                                imComputeReq = True
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                        End If
                        imOvDays(imOVBoxNo - OVDAYSINDEX) = 1
                        pbcDGPreempt_Paint
                    ElseIf KeyAscii = Asc("M") Or (KeyAscii = Asc("m")) Then
                        If imSvOvDays(imOVBoxNo - OVDAYSINDEX) = 2 Then
                            If imOvDays(imOVBoxNo - OVDAYSINDEX) <> 1 Then
                                imComputeReq = True
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                            imOvDays(imOVBoxNo - OVDAYSINDEX) = 2
                            pbcDGPreempt_Paint
                        End If
                    End If
                    If KeyAscii = Asc(" ") Then
                        If imOvDays(imOVBoxNo - OVDAYSINDEX) = 0 Then
                            imOvDays(imOVBoxNo - OVDAYSINDEX) = 1
                        ElseIf imOvDays(imOVBoxNo - OVDAYSINDEX) = 1 Then
                            'If imSvOvDays(imOvBoxNo - OVDAYSINDEX) = 2 Then
                            '    imOvDays(imOvBoxNo - OVDAYSINDEX) = 2
                            'Else
                                imOvDays(imOVBoxNo - OVDAYSINDEX) = 0
                            'End If
                        Else
                            imOvDays(imOVBoxNo - OVDAYSINDEX) = 0
                        End If
                        If imRBInLnGridOrSum <> 1 Then
                            imComputeReq = True
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        pbcDGPreempt_Paint
                    End If
                Else
                    If imOvDays(imOVBoxNo - OVDAYSINDEX) <> 1 Then
                        If imRBInLnGridOrSum <> 1 Then
                            imComputeReq = True
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                    End If
                    imOvDays(imOVBoxNo - OVDAYSINDEX) = 1
                    pbcDGPreempt_Paint
                End If
            'ElseIf imOvBoxNo = OVPREEMPTINDEX Then
            ElseIf imOVBoxNo = OVCOPYINDEX Then
                If (KeyAscii = Asc("L")) Or (KeyAscii = Asc("l")) Then
                    If (Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY Then
                        If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            If (imDGSave(7) = 0) And (tgSaf(0).sExcludeAudioTypeM <> "Y") Then
                                imDGSave(7) = 2
                            Else
                                If (tgSaf(0).sExcludeAudioTypeL <> "Y") Then
                                    imDGSave(7) = 0
                                Else
                                    imDGSave(7) = 1
                                End If
                            End If
                        Else
                            If imDGSave(7) <> 0 Then
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                            If (tgSaf(0).sExcludeAudioTypeL <> "Y") Then
                                imDGSave(7) = 0
                            Else
                                imDGSave(7) = 1
                            End If
                        End If
                        pbcDGPreempt_Paint
                    End If
                ElseIf KeyAscii = Asc("R") Or (KeyAscii = Asc("r")) Then
                    If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                        If (imDGSave(7) = 1) And (tgSaf(0).sExcludeAudioTypeS <> "Y") Then
                            imDGSave(7) = 3
                        Else
                            imDGSave(7) = 1
                        End If
                    Else
                        If imDGSave(7) <> 1 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        imDGSave(7) = 1
                    End If
                    pbcDGPreempt_Paint
                ElseIf KeyAscii = Asc("P") Or (KeyAscii = Asc("p")) Then
                    If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                        If (imDGSave(7) = 4) And (tgSaf(0).sExcludeAudioTypeQ <> "Y") Then
                            imDGSave(7) = 5
                        Else
                            If (tgSaf(0).sExcludeAudioTypeP <> "Y") Then
                                imDGSave(7) = 4
                            Else
                                imDGSave(7) = 1
                            End If
                        End If
                    Else
                        If imDGSave(7) <> 4 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        If (tgSaf(0).sExcludeAudioTypeP <> "Y") Then
                            imDGSave(7) = 4
                        Else
                            imDGSave(7) = 1
                        End If
                    End If
                    pbcDGPreempt_Paint
                End If
                If KeyAscii = Asc(" ") Then
                    If (Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY Then
                        If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                            ilCount = 0
                            Do
                                If imDGSave(7) = 0 Then
                                    imDGSave(7) = 1
                                    If (tgSaf(0).sExcludeAudioTypeR <> "Y") Then Exit Do
                                ElseIf imDGSave(7) = 1 Then
                                    imDGSave(7) = 2
                                    If (tgSaf(0).sExcludeAudioTypeM <> "Y") Then Exit Do
                                ElseIf imDGSave(7) = 2 Then
                                    imDGSave(7) = 3
                                    If (tgSaf(0).sExcludeAudioTypeS <> "Y") Then Exit Do
                                ElseIf imDGSave(7) = 3 Then
                                    imDGSave(7) = 4
                                    If (tgSaf(0).sExcludeAudioTypeP <> "Y") Then Exit Do
                                ElseIf imDGSave(7) = 4 Then
                                    imDGSave(7) = 5
                                    If (tgSaf(0).sExcludeAudioTypeQ <> "Y") Then Exit Do
                                Else
                                    imDGSave(7) = 0
                                    If (tgSaf(0).sExcludeAudioTypeL <> "Y") Then Exit Do
                                End If
                                ilCount = ilCount + 1
                                If ilCount > 6 Then
                                    imDGSave(7) = 1
                                    Exit Do
                                End If
                            Loop
                        Else
                            ilCount = 0
                            Do
                                If imDGSave(7) = 0 Then
                                    imDGSave(7) = 1
                                    If (tgSaf(0).sExcludeAudioTypeR <> "Y") Then Exit Do
                                ElseIf imDGSave(7) = 1 Then
                                    imDGSave(7) = 4
                                    If (tgSaf(0).sExcludeAudioTypeP <> "Y") Then Exit Do
                                Else
                                    imDGSave(7) = 0
                                    If (tgSaf(0).sExcludeAudioTypeL <> "Y") Then Exit Do
                                End If
                                ilCount = ilCount + 1
                                If ilCount > 3 Then
                                    imDGSave(7) = 1
                                    Exit Do
                                End If
                            Loop
                        End If
                    Else
                        If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                            If (imDGSave(7) = 1) And (tgSaf(0).sExcludeAudioTypeS <> "Y") Then
                                imDGSave(7) = 3
                            Else
                                imDGSave(7) = 1
                            End If
                        Else
                            imDGSave(7) = 1
                        End If
                    End If
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    pbcDGPreempt_Paint
                End If
            ElseIf imOVBoxNo = OVHIGHINDEX Then
                If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                    If imDGSave(3) <> 0 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imDGSave(3) = 0
                    pbcDGPreempt_Paint
                ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                    If imDGSave(3) <> 1 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imDGSave(3) = 1
                    pbcDGPreempt_Paint
                End If
                If KeyAscii = Asc(" ") Then
                    If imDGSave(3) = 0 Then
                        imDGSave(3) = 1
                    Else
                        imDGSave(3) = 0
                    End If
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    pbcDGPreempt_Paint
                End If
                
            ElseIf (imOVBoxNo >= ACT1STOREDTIMESINDEX) And (imOVBoxNo <= ACT1DAYPARTFILTERINDEX) Then
                If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                    If imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) <> 0 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 0
                    pbcDGPreempt_Paint
                ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                    If imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) <> 1 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 1
                    pbcDGPreempt_Paint
                End If
                If KeyAscii = Asc(" ") Then
                    If imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 0 Then
                        imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 1
                    Else
                        imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 0
                    End If
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    pbcDGPreempt_Paint
                End If
            End If
        Else
            If (imOVBoxNo >= OV2DAYSINDEX) And (imOVBoxNo <= OV2DAYSINDEX + 6) Then
                ilLIndex = LBound(imAllowedDays)
                If imOVType <> 3 Then
                    If (imAllowedDays(imOVBoxNo - OV2DAYSINDEX + ilLIndex)) And (imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0) Then
                        If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                            If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 0 Then
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                            imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                            pbcDGPreempt_Paint
                        ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                            If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 1 Then
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                            imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                            pbcDGPreempt_Paint
                        End If
                        If KeyAscii = Asc(" ") Then
                            If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                                imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                            Else
                                imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                            End If
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            pbcDGPreempt_Paint
                        End If
                    Else
                        If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 1 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                        pbcDGPreempt_Paint
                    End If
                Else
                    If (imAllowedDays(imOVBoxNo - OV2DAYSINDEX + ilLIndex)) Then
                        If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                            If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 0 Then
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                            imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                            pbcDGPreempt_Paint
                        ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                            If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 1 Then
                                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                    imLnChg = True
                                End If
                            End If
                            imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                            pbcDGPreempt_Paint
                        End If
                        If KeyAscii = Asc(" ") Then
                            If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                                imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                            Else
                                imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                            End If
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            pbcDGPreempt_Paint
                        End If
                    Else
                        If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 1 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                        pbcDGPreempt_Paint
                    End If
                End If
            ElseIf (imOVBoxNo = OV2SOLOINDEX) And (imOVType <> 3) Then
                If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                    If imLnSave(23, imLnRowNo) <> 0 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imLnSave(23, imLnRowNo) = 0
                    pbcDGPreempt_Paint
                ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                    If imLnSave(23, imLnRowNo) <> 1 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imLnSave(23, imLnRowNo) = 1
                    pbcDGPreempt_Paint
                End If
                If KeyAscii = Asc(" ") Then
                    If imLnSave(23, imLnRowNo) = 0 Then
                        imLnSave(23, imLnRowNo) = 1
                    Else
                        imLnSave(23, imLnRowNo) = 0
                    End If
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    pbcDGPreempt_Paint
                End If
            ElseIf (imOVBoxNo = OV21STINDEX) And (imOVType <> 3) Then
                If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
                    If imLnSave(22, imLnRowNo) <> 0 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imLnSave(22, imLnRowNo) = 0
                    pbcDGPreempt_Paint
                ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
                    If imLnSave(22, imLnRowNo) <> 1 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imLnSave(22, imLnRowNo) = 1
                    pbcDGPreempt_Paint
                End If
                If KeyAscii = Asc(" ") Then
                    If imLnSave(22, imLnRowNo) = 0 Then
                        imLnSave(22, imLnRowNo) = 1
                    Else
                        imLnSave(22, imLnRowNo) = 0
                    End If
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    pbcDGPreempt_Paint
                End If
            End If
        End If
    End If
End Sub

Private Sub pbcDGPreempt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilLIndex As Integer
    Dim ilCount As Integer
    
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) And (imRBInLnGridOrSum <> 1) And (imOVType <> 3) Then
    Else
        If (imOVType <> 2) And (imOVType <> 3) Then
            If imOVBoxNo = OVWDINDEX Then
                If imDGSave(2) = 1 Then
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imDGSave(2) = 0
                Else
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imDGSave(2) = 1
                End If
            ElseIf (imOVBoxNo >= OVDAYSINDEX) And (imOVBoxNo <= OVDAYSINDEX + 6) Then
                ilLIndex = LBound(imAllowedDays)
                If imAllowedDays(imOVBoxNo - OVDAYSINDEX + ilLIndex) Then
                    If imOvDays(imOVBoxNo - OVDAYSINDEX) = 0 Then
                        imComputeReq = True
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                        imOvDays(imOVBoxNo - OVDAYSINDEX) = 1
                    ElseIf imOvDays(imOVBoxNo - OVDAYSINDEX) = 1 Then
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                        'If imSvOvDays(imOvBoxNo - OVDAYSINDEX) = 2 Then
                        '    imOvDays(imOvBoxNo - OVDAYSINDEX) = 2
                        'Else
                            imOvDays(imOVBoxNo - OVDAYSINDEX) = 0
                        'End If
                    Else
                        imComputeReq = True
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                        imOvDays(imOVBoxNo - OVDAYSINDEX) = 0
                    End If
                Else
                    If imOvDays(imOVBoxNo - OVDAYSINDEX) <> 1 Then
                        imComputeReq = True
                        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                            imLnChg = True
                        End If
                    End If
                    imOvDays(imOVBoxNo - OVDAYSINDEX) = 1
                End If
            'ElseIf imOvBoxNo = OVPREEMPTINDEX Then
            ElseIf imOVBoxNo = OVCOPYINDEX Then
                If (Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY Then
                    If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                        'If imDGSave(7) <= 0 Then
                        '    imDGSave(7) = 1
                        'ElseIf imDGSave(7) = 1 Then
                        '    imDGSave(7) = 2
                        'ElseIf imDGSave(7) = 2 Then
                        '    imDGSave(7) = 3
                        'ElseIf imDGSave(7) = 3 Then
                        '    imDGSave(7) = 4
                        'ElseIf imDGSave(7) = 4 Then
                        '    imDGSave(7) = 5
                        'Else
                        '    imDGSave(7) = 0
                        'End If
                        ilCount = 0
                        Do
                            If imDGSave(7) = 0 Then
                                imDGSave(7) = 1
                                If (tgSaf(0).sExcludeAudioTypeR <> "Y") Then Exit Do
                            ElseIf imDGSave(7) = 1 Then
                                imDGSave(7) = 2
                                If (tgSaf(0).sExcludeAudioTypeM <> "Y") Then Exit Do
                            ElseIf imDGSave(7) = 2 Then
                                imDGSave(7) = 3
                                If (tgSaf(0).sExcludeAudioTypeS <> "Y") Then Exit Do
                            ElseIf imDGSave(7) = 3 Then
                                imDGSave(7) = 4
                                If (tgSaf(0).sExcludeAudioTypeP <> "Y") Then Exit Do
                            ElseIf imDGSave(7) = 4 Then
                                imDGSave(7) = 5
                                If (tgSaf(0).sExcludeAudioTypeQ <> "Y") Then Exit Do
                            Else
                                imDGSave(7) = 0
                                If (tgSaf(0).sExcludeAudioTypeL <> "Y") Then Exit Do
                            End If
                            ilCount = ilCount + 1
                            If ilCount > 6 Then
                                imDGSave(7) = 1
                                Exit Do
                            End If
                        Loop
                    Else
                        'If imDGSave(7) <= 0 Then
                        '    imDGSave(7) = 1
                        'ElseIf imDGSave(7) = 1 Then
                        '    imDGSave(7) = 4
                        'Else
                        '    imDGSave(7) = 0
                        'End If
                            ilCount = 0
                        Do
                            If imDGSave(7) = 0 Then
                                imDGSave(7) = 1
                                If (tgSaf(0).sExcludeAudioTypeR <> "Y") Then Exit Do
                            ElseIf imDGSave(7) = 1 Then
                                imDGSave(7) = 4
                                If (tgSaf(0).sExcludeAudioTypeP <> "Y") Then Exit Do
                            Else
                                imDGSave(7) = 0
                                If (tgSaf(0).sExcludeAudioTypeL <> "Y") Then Exit Do
                            End If
                            ilCount = ilCount + 1
                            If ilCount > 3 Then
                                imDGSave(7) = 1
                                Exit Do
                            End If
                        Loop
                    End If
                Else
                    If (Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY Then
                        If (imDGSave(7) = 1) And (tgSaf(0).sExcludeAudioTypeS <> "Y") Then
                            imDGSave(7) = 3
                        Else
                            imDGSave(7) = 1
                        End If
                    Else
                        imDGSave(7) = 1
                    End If
                End If
                If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                    imLnChg = True
                End If
            ElseIf imOVBoxNo = OVHIGHINDEX Then
                If imDGSave(3) = 0 Then
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imDGSave(3) = 1
                Else
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imDGSave(3) = 0
                End If
                
            ElseIf (imOVBoxNo >= ACT1STOREDTIMESINDEX) And (imOVBoxNo <= ACT1DAYPARTFILTERINDEX) Then
                If imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 0 Then
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 1
                Else
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 0
                End If
            End If
        Else
            If (imOVBoxNo >= OV2DAYSINDEX) And (imOVBoxNo <= OV2DAYSINDEX + 6) Then
                ilLIndex = LBound(imAllowedDays)
                If imOVType <> 3 Then
                    If (imAllowedDays(imOVBoxNo - OV2DAYSINDEX + ilLIndex)) And (imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0) Then
                        If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                        Else
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                        End If
                    Else
                        If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 1 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                    End If
                Else
                    If (imAllowedDays(imOVBoxNo - OV2DAYSINDEX + ilLIndex)) Then
                        If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                        Else
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                            imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0
                        End If
                    Else
                        If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) <> 1 Then
                            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                                imLnChg = True
                            End If
                        End If
                        imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1
                    End If
                End If
            ElseIf (imOVBoxNo = OV2SOLOINDEX) And (imOVType <> 3) Then
                If imLnSave(23, imLnRowNo) = 0 Then
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imLnSave(23, imLnRowNo) = 1
                Else
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imLnSave(23, imLnRowNo) = 0
                End If
            ElseIf (imOVBoxNo = OV21STINDEX) And (imOVType <> 3) Then
                If imLnSave(22, imLnRowNo) = 0 Then
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imLnSave(22, imLnRowNo) = 1
                Else
                    If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                        imLnChg = True
                    End If
                    imLnSave(22, imLnRowNo) = 0
                End If
            End If
        End If
    End If
    pbcDGPreempt_Paint
End Sub

Private Sub pbcDGPreempt_Paint()
    pbcDGPreempt.Cls
    pbcDGPreempt.CurrentX = fgBoxInsetX
    pbcDGPreempt.CurrentY = 30 'fgBoxInsetY
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) And (imRBInLnGridOrSum <> 1) And (imOVType <> 3) Then
        'If imDGSave(3) = 0 Then
        '    pbcDGPreempt.Print "Y"
        'Else
        '    pbcDGPreempt.Print "N"
        'End If
    Else
        If (imOVType <> 2) And (imOVType <> 3) Then
            If imOVBoxNo = OVWDINDEX Then
                If imDGSave(2) = 0 Then
                    pbcDGPreempt.Print "Daily"
                Else
                    pbcDGPreempt.Print "Weekly"
                End If
            ElseIf (imOVBoxNo >= OVDAYSINDEX) And (imOVBoxNo <= OVDAYSINDEX + 6) Then
                If imOvDays(imOVBoxNo - OVDAYSINDEX) = 0 Then
                    pbcDGPreempt.Print "Yes"
                ElseIf imOvDays(imOVBoxNo - OVDAYSINDEX) = 1 Then
                    pbcDGPreempt.Print "No"
                ElseIf imOvDays(imOVBoxNo - OVDAYSINDEX) = 2 Then
                    pbcDGPreempt.Print "Mix"
                End If
            'ElseIf imOvBoxNo = OVPREEMPTINDEX Then
            ElseIf imOVBoxNo = OVCOPYINDEX Then
                If imDGSave(7) = 0 Then
                    pbcDGPreempt.Print "Live Cmml"
                ElseIf imDGSave(7) = 2 Then
                    pbcDGPreempt.Print "Live Promo"
                ElseIf imDGSave(7) = 3 Then
                    pbcDGPreempt.Print "Rec Promo"
                ElseIf imDGSave(7) = 4 Then
                    pbcDGPreempt.Print "Pre-Cmml"
                ElseIf imDGSave(7) = 5 Then
                    pbcDGPreempt.Print "Pre-Promo"
                ElseIf imDGSave(7) = 1 Then
                    pbcDGPreempt.Print "Rec Cmml"
                End If
            ElseIf imOVBoxNo = OVHIGHINDEX Then
                If imDGSave(3) = 0 Then
                    pbcDGPreempt.Print "Yes"
                Else
                    pbcDGPreempt.Print "No"
                End If
            ElseIf (imOVBoxNo >= ACT1STOREDTIMESINDEX) And (imOVBoxNo <= ACT1DAYPARTFILTERINDEX) Then
                If imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) = 0 Then
                    pbcDGPreempt.Print "Yes"
                ElseIf imDGSave(8 + imOVBoxNo - ACT1STOREDTIMESINDEX) <> -1 Then
                    pbcDGPreempt.Print "No"
                End If
            End If
        Else
            'If (imOVBoxNo >= OV2DAYSINDEX) And (imOVBoxNo <= OVDAYSINDEX + 6) Then
            If (imOVBoxNo >= OV2DAYSINDEX) And (imOVBoxNo <= OV2DAYSINDEX + 6) Then
                If imOVType <> 3 Then
                    If imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                        pbcDGPreempt.Print "Yes"
                    ElseIf imLnSave(24 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1 Then
                        pbcDGPreempt.Print "No"
                    End If
                Else
                    If imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 0 Then
                        pbcDGPreempt.Print "Yes"
                    ElseIf imLnSave(12 + imOVBoxNo - OV2DAYSINDEX, imLnRowNo) = 1 Then
                        pbcDGPreempt.Print "No"
                    End If
                End If
            ElseIf (imOVBoxNo = OV2SOLOINDEX) And (imOVType <> 3) Then
                If imLnSave(23, imLnRowNo) = 0 Then
                    pbcDGPreempt.Print "Yes"
                Else
                    pbcDGPreempt.Print "No"
                End If
            ElseIf (imOVBoxNo = OV21STINDEX) And (imOVType <> 3) Then
                If imLnSave(22, imLnRowNo) = 0 Then
                    pbcDGPreempt.Print "Yes"
                Else
                    pbcDGPreempt.Print "No"
                End If
            End If
        End If
    End If
End Sub

Private Sub pbcDm_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    For ilBox = imLBCTCtrls To UBound(tmDmCtrls) Step 1
        If (X >= tmDmCtrls(ilBox).fBoxX) And (X <= tmDmCtrls(ilBox).fBoxX + tmDmCtrls(ilBox).fBoxW) Then
            If (Y >= tmDmCtrls(ilBox).fBoxY) And (Y <= tmDmCtrls(ilBox).fBoxY + tmDmCtrls(ilBox).fBoxH) Then
                If (imCppCpm <= 0) And (ilBox > DMCPPCPMINDEX) Then
                    Beep
                    Exit Sub
                End If
                If (tgSaf(0).sHideDemoOnBR <> "Y") And (ilBox = DMHIDEDEMOINDEX) Then
                    Beep
                    Exit Sub
                End If
                If ilBox > DMVALUEINDEX + 2 * (tgSpf.iATargets - 1) Then
                    Beep
                    Exit Sub
                End If
                mDmSetShow imDMBoxNo
                imDMBoxNo = ilBox
                mDmEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
End Sub

Private Sub pbcDm_Paint()
    Dim ilBox As Integer
    Dim slFontName As String
    Dim flFontSize As Single
'    Dim llColor As Long
    
    If tgSaf(0).sHideDemoOnBR = "Y" Then
        'Add title
        slFontName = pbcDm.FontName
        flFontSize = pbcDm.FontSize
        pbcDm.ForeColor = BLUE
        pbcDm.FontBold = False
        pbcDm.FontSize = 7
        pbcDm.FontName = "Arial"
        pbcDm.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
        pbcDm.CurrentX = tmDmCtrls(DMHIDEDEMOINDEX).fBoxX + 15 'fgBoxInsetX
        pbcDm.CurrentY = 15  '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcDm.Print "Show ""Impressions"""
        pbcDm.FontSize = flFontSize
        pbcDm.FontName = slFontName
        pbcDm.FontSize = flFontSize
        pbcDm.FontBold = True
    End If
    For ilBox = imLBCTCtrls To UBound(tmDmCtrls) Step 1
        pbcDm.CurrentX = tmDmCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcDm.CurrentY = tmDmCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcDm.Print tmDmCtrls(ilBox).sShow
    Next ilBox
End Sub

Private Sub pbcDmShare_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub pbcDmShare_KeyPress(KeyAscii As Integer)
    If imDMBoxNo = DMCPPCPMINDEX Then
        If KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
            If imCppCpm <> 0 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
            End If
            imCppCpm = 0
            pbcDmShare_Paint
        ElseIf KeyAscii = Asc("M") Or (KeyAscii = Asc("m")) Then
            If imCppCpm <> 1 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
            End If
            imCppCpm = 1
            pbcDmShare_Paint
        ElseIf KeyAscii = Asc("P") Or (KeyAscii = Asc("p")) Then
            If imCppCpm <> 2 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
            End If
            imCppCpm = 2
            pbcDmShare_Paint
        End If
        If KeyAscii = Asc(" ") Then
            If imCppCpm = 0 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
                imCppCpm = 1
                pbcDmShare_Paint
            ElseIf imCppCpm = 1 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
                imCppCpm = 2
                pbcDmShare_Paint
            ElseIf imCppCpm = 2 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
                imCppCpm = 0
                pbcDmShare_Paint
            End If
        End If
    End If
    If imDMBoxNo = DMHIDEDEMOINDEX Then
        If KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
            If imHideDemo <> 0 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
            End If
            imHideDemo = 0
            pbcDmShare_Paint
        ElseIf KeyAscii = Asc("Y") Or (KeyAscii = Asc("y")) Then
            If imHideDemo <> 1 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
            End If
            imHideDemo = 1
            pbcDmShare_Paint
        End If
        If KeyAscii = Asc(" ") Then
            If imHideDemo = 0 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
                imHideDemo = 1
                pbcDmShare_Paint
            ElseIf imHideDemo = 1 Then
                tmDmCtrls(imDMBoxNo).iChg = True
                tmHdCtrls(DEMOINDEX).iChg = True
                imHideDemo = 0
                pbcDmShare_Paint
            End If
        End If
    End If
    mSetCommands
End Sub

Private Sub pbcDmShare_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDMBoxNo = DMCPPCPMINDEX Then
        If imCppCpm = 0 Then
            tmDmCtrls(imDMBoxNo).iChg = True
            tmHdCtrls(DEMOINDEX).iChg = True
            imCppCpm = 1
        ElseIf imCppCpm = 1 Then
            tmDmCtrls(imDMBoxNo).iChg = True
            tmHdCtrls(DEMOINDEX).iChg = True
            imCppCpm = 2
        Else    'If imCppCpm = 2 Then
            tmDmCtrls(imDMBoxNo).iChg = True
            tmHdCtrls(DEMOINDEX).iChg = True
            imCppCpm = 0
        End If
    End If
    If imDMBoxNo = DMHIDEDEMOINDEX Then
        If imHideDemo = 0 Then
            tmDmCtrls(imDMBoxNo).iChg = True
            tmHdCtrls(DEMOINDEX).iChg = True
            imHideDemo = 1
        Else
            tmDmCtrls(imDMBoxNo).iChg = True
            tmHdCtrls(DEMOINDEX).iChg = True
            imHideDemo = 0
        End If
    End If
    pbcDmShare_Paint
    mSetCommands
End Sub

Private Sub pbcDmShare_Paint()
    pbcDmShare.Cls
    pbcDmShare.CurrentX = fgBoxInsetX
    pbcDmShare.CurrentY = 0 'fgBoxInsetY
    If imDMBoxNo = DMCPPCPMINDEX Then
        If imCppCpm = 0 Then
            pbcDmShare.Print "N/A"
        ElseIf imCppCpm = 1 Then
            pbcDmShare.Print "CPM"
        ElseIf imCppCpm = 2 Then
            pbcDmShare.Print "CPP"
        Else
            pbcDmShare.Print "   "
        End If
    End If
    If imDMBoxNo = DMHIDEDEMOINDEX Then
        If imHideDemo = 0 Then
            pbcDmShare.Print "No"
        ElseIf imHideDemo = 1 Then
            pbcDmShare.Print "Yes"
        Else
            pbcDmShare.Print "   "
        End If
    End If
End Sub

Private Sub pbcEatTab_GotFocus(Index As Integer)
    If (tmcClick.Enabled) And (Index = 1) Then
        pbcEatTab(0).SetFocus
    End If
End Sub

Private Sub pbcHdSTab_GotFocus()
    Dim ilBox As Integer
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilFound As Integer

    If imInLnComment Then
        If plcLine.Visible Then
            pbcLnSTab.SetFocus
        End If
        Exit Sub
    End If
    If GetFocus() <> pbcHdSTab.HWnd Then
        Exit Sub
    End If
    If plcDemoBar.Visible Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
        mSetShow imHdBoxNo
        Exit Sub
    End If
    If Not imUpdateAllowed Then
        'If imHdBoxNo <> -1 Then
            pbcClickFocus.SetFocus
        'End If
        Exit Sub
    End If
    imTabDirection = -1  'Set-Right to left
    mAllSetShow 4
    If imHdBoxNo = POTINDEX Then
        If mMnfBranch(4, 0) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = ADVTINDEX Then
        If mAdvtBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = PRODUCTINDEX Then
        If mProdBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = SHTTITLEINDEX Then
        If mShtTitleBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = AGENCYINDEX Then
        If mAgencyBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = BUYERINDEX Then
        If mPersonnelBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = MERCHINDEX Then
        If mHdCommentBranch(0, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = PROMOINDEX Then
        If mHdCommentBranch(1, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = SEGINDEX Then
        If mMnfBranch(5, 0) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = INTCOMMINDEX Then
        If mHdCommentBranch(2, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = CANCLAUSEINDEX Then
        If mHdCommentBranch(3, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = CHGREASONINDEX Then
        If mHdCommentBranch(4, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = OTHERCOMMINDEX Then
        If mHdCommentBranch(5, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    'If (imHdBoxNo >= LBound(tmHdCtrls)) And (imHdBoxNo <= UBound(tmHdCtrls)) Then
    If (imHdBoxNo >= imLBCTCtrls) And (imHdBoxNo <= UBound(tmHdCtrls)) Then
        If mTestFields(imHdBoxNo, ALLMANDEFINED + NOMSG) = NO Then
            Beep
            mEnableBox imHdBoxNo
            Exit Sub
        End If
    End If
    ilBox = imHdBoxNo
    Do
        ilFound = True
        Select Case ilBox
            Case -1 'Tab from control prior to form area
                'If (imSelectedIndex > 0) And (tgChfCntr.sStatus = "I") Then
                If (tgChfCntr.sSchStatus = "I") Then
                    ilRet = MsgBox("Contract partially scheduled, finish scheduling", vbOKOnly + vbExclamation, "Error")
                    cmcHold.Enabled = True
                    '2/7/09: Added to handle case where focus can't be set
                    On Error Resume Next
                    cmcHold.SetFocus
                    On Error GoTo 0
                    Exit Sub
                End If
                imTabDirection = 0  'Set-Left to right
                If (imStep1Index = 0) Or (imStep1Index = 1) Then
                    ilBox = 1
                    mSetCommands
                ElseIf (sgCntrScreen = "Orders") And (imStep1Index = 3) Then
                    ilBox = 1
                    mSetCommands
                'ElseIf (sgCntrScreen <> "Orders") And ((imStep1Index = 4) Or (imStep1Index = 5)) Then
                ElseIf (sgCntrScreen <> "Orders") And (imStep1Index = 5) Then
                    ilBox = 1
                    mSetCommands
                Else
                    mSetChg 1
                    ilBox = ADVTINDEX
                End If
            Case STATUSINDEX 'Status (first control within header)
                mSetShow imHdBoxNo
                imHdBoxNo = -1
                If pbcSelect.Enabled Then
                    pbcStepTab.SetFocus
                    Exit Sub
                End If
                If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
                    If cmcUpdate.Enabled Then
                        'cmcUpdate.SetFocus
                        cmcSaveStay.SetFocus
                    Else
                        cmcDone.SetFocus
                    End If
                Else
                    ilBox = 1
                End If
            Case TYPEINDEX
                If sgCntrScreen = "Orders" Then
                    If (tgChfCntr.sStatus = "O") And (imStep1Index > 1) Then
                        mSetShow imHdBoxNo
                        imHdBoxNo = -1
                        If pbcSelect.Enabled Then
                            pbcStepTab.SetFocus
                            Exit Sub
                        End If
                        cmcDone.SetFocus
                    Else
                        ilBox = STATUSINDEX
                    End If
                Else
                    ilBox = POTINDEX
                End If
            Case CNTRNOINDEX
                If sgCntrScreen = "Orders" Then
                    If (imStep1Index <= 1) Or ((imStep1Index = 2) And (Not imAnyLnSchd)) Then
                        ilBox = TYPEINDEX
                    Else
                        If (tgChfCntr.sStatus = "O") Then
                            mSetShow imHdBoxNo
                            imHdBoxNo = -1
                            If pbcSelect.Enabled Then
                                pbcStepTab.SetFocus
                                Exit Sub
                            End If
                            cmcDone.SetFocus
                        Else
                            ilBox = STATUSINDEX
                        End If
                    End If
                Else
                    If (imStep1Index <= 1) Or ((imStep1Index = 3) And (Not imAnyLnSchd)) Or ((imStep1Index = 2) And (Not imAnyLnSchd)) Then
                        ilBox = TYPEINDEX
                    Else
                        ilBox = POTINDEX
                    End If
                End If
            Case PROMOINDEX
                If tgSpf.sRUseMerch = "Y" Then
                    ilBox = ilBox - 1
                Else
                    ilBox = ilBox - 2
                End If
            Case REVNOINDEX
                If tgSpf.sRUsePromo = "Y" Then
                    ilBox = ilBox - 1
                Else
                    If tgSpf.sRUseMerch = "Y" Then
                        ilBox = ilBox - 2
                    Else
                        ilBox = ilBox - 3
                    End If
                End If
            Case ADVTINDEX
                If sgCntrScreen = "Orders" Then
                    If ((imStep1Index <= 1) Or (imStep1Index = 2)) Then
                        ilBox = CNTRNOINDEX
                    Else
                        If (tgChfCntr.sStatus = "O") Then
                            mSetShow imHdBoxNo
                            imHdBoxNo = -1
                            If pbcSelect.Enabled Then
                                pbcStepTab.SetFocus
                                Exit Sub
                            End If
                            cmcDone.SetFocus
                        Else
                            ilBox = STATUSINDEX
                        End If
                    End If
                Else
                    If (imStep1Index <= 1) Or ((imStep1Index > 1) And ((tgUrf(0).sRefResvType = "I") Or (tgSpf.sCEstNo = "Y") Or ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES))) Then
                    'If (imStep1Index <= 1) Or ((imStep1Index > 1) And ((tgUrf(0).sRefResvType = "I") Or (tgSpf.sCEstNo = "Y") Or ((Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS))) Then
                        ilBox = CNTRNOINDEX
                    Else
                        If imAnyLnSchd Then
                            ilBox = POTINDEX
                        Else
                            If (imStep1Index = 2) Or (imStep1Index = 3) Then
                                ilBox = TYPEINDEX
                            Else
                                ilBox = POTINDEX
                            End If
                        End If
                    End If
                End If
            Case AGENCYINDEX
                If tgSpf.sUseProdSptScr = "P" Then  'Short Title
                    If (lbcStatus.ListIndex >= 0) Then
                        slStr = lbcStatus.List(lbcStatus.ListIndex)
                        If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                            ilBox = SHTTITLEINDEX
                        Else
                            ilBox = PRODUCTINDEX
                        End If
                    Else
                        ilBox = PRODUCTINDEX
                    End If
                Else
                    ilBox = PRODUCTINDEX
                End If
            Case DEMOINDEX
                If tgSpf.sCUseSegments = "Y" Then
                    ilBox = SEGINDEX
                Else
                    ilBox = REVSETINDEX
                End If
            '10967-show
            Case BILLCYCLEINDEX
                    ilBox = GROSSINDEX
            Case INVGROUPINDEX
                If (imAnyFixedBilled) Or (Not imAllowCashTradeChgs) Then
                    ilBox = GROSSINDEX
                Else
                    ilBox = BILLCYCLEINDEX
                End If
            Case BUYERINDEX
                ilBox = COMPINDEX
            Case DEMOINDEX
                ilBox = REVSETINDEX
            Case GROSSINDEX
                If imAnyLnSchd Then
                    ilBox = TRADEINDEX
                Else
                    ilBox = RATECARDINDEX
                End If
            Case INTCOMMINDEX
                If lbcInvGroup.ListIndex <= 0 Then
                    ilBox = INVGROUPINDEX
                Else
                    ilBox = PRODTAGINDEX
                End If
            Case Else
                ilBox = ilBox - 1
        End Select
        If (ilBox = TRADEINDEX) And (imAllowCashTradeChgs = False) Then
            ilFound = False
        End If
        If (ilBox = MERCHINDEX) And (tgSpf.sRUseMerch <> "Y") Then
            ilFound = False
        End If
        If (ilBox = PROMOINDEX) And (tgSpf.sRUsePromo <> "Y") Then
            ilFound = False
        End If
        If (ilBox = SHTTITLEINDEX) And (tgSpf.sUseProdSptScr <> "P") Then  'Short Title
            ilFound = False
        End If
        If (ilBox = POTINDEX) And ((Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION) Then
            ilFound = False
        End If
        If (ilBox = SHAREINDEX) And ((Asc(tgSpf.sOptionFields) And OFSHARE) <> OFSHARE) Then
            ilFound = False
        End If
        If (ilBox = REVSETINDEX) And ((Asc(tgSpf.sOptionFields) And OFREVSET) <> OFREVSET) Then
            ilFound = False
        End If
        If (tgSpf.sGUsePropSys <> "Y") And (ilBox = DEMOINDEX) Then
            ilFound = False
        End If
        If (ilBox = GUARINDEX) And (((Asc(tgSpf.sOptionFields) And OFDELGUAR) <> OFDELGUAR) And ((Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) <> GUARBYGRIMP)) Then
            ilFound = False
        End If
        If (ilBox = BILLCYCLEINDEX) And ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
            ilFound = False
        End If
        If ((ilBox = INVGROUPINDEX) Or (ilBox = PRODTAGINDEX)) And ((Asc(tgSpf.sOptionFields) And OFCOOPBILL) <> OFCOOPBILL) Then
            ilFound = False
        End If
    Loop While Not ilFound
    mSetShow imHdBoxNo
    imHdBoxNo = ilBox
    mEnableBox ilBox
    If imTerminate Then
        cmcCancel.SetFocus
    End If
End Sub

Private Sub pbcHdSTab_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcHdTab_GotFocus()
    Dim ilBox As Integer
    Dim slStr As String
    Dim ilFound As Integer

    If imInLnComment Then
        If grdCPMBuy.Visible Then
            gCPMTab
        Else
            pbcLnTab.SetFocus
        End If
        Exit Sub
    End If
    If imInTseLine Then
        Exit Sub
    End If
    If GetFocus() <> pbcHdTab.HWnd Then
        Exit Sub
    End If
    If plcDemoBar.Visible Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
        mSetShow imHdBoxNo
        Exit Sub
    End If
    If Not imUpdateAllowed Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    imTabDirection = 0  'Set-Left to right
    mAllSetShow 4
    If imHdBoxNo = POTINDEX Then
        If mMnfBranch(4, 0) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = ADVTINDEX Then
        If mAdvtBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = PRODUCTINDEX Then
        If mProdBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = SHTTITLEINDEX Then
        If mShtTitleBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = AGENCYINDEX Then
        If mAgencyBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = BUYERINDEX Then
        If mPersonnelBranch() Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = MERCHINDEX Then
        If mHdCommentBranch(0, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = PROMOINDEX Then
        If mHdCommentBranch(1, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = SEGINDEX Then
        If mMnfBranch(5, 0) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = INTCOMMINDEX Then
        If mHdCommentBranch(2, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = CANCLAUSEINDEX Then
        If mHdCommentBranch(3, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = CHGREASONINDEX Then
        If mHdCommentBranch(4, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = OTHERCOMMINDEX Then
        If mHdCommentBranch(5, imInCommentBranch, imDoubleClickName, imBSMode, imComboBoxIndex, imUpdateAllowed, smComment()) Then
            Exit Sub
        End If
    End If
    If imHdBoxNo = BILLCYCLEINDEX Then
        If lbcBillCycle.ListIndex >= 0 Then
            '10756 disallow digital with weekly billing
'            If Left(lbcBillCycle.List(lbcBillCycle.ListIndex), 1) <> "S" Then
            If Left(lbcBillCycle.List(lbcBillCycle.ListIndex), 1) = "W" Then
                '10756 disallow digital
'                If UBound(tgClfCntr) > LBound(tgClfCntr) Then
                 If ((Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMDAYPART) <> "") And (Contract.grdCPMBuy.TextMatrix(Contract.grdCPMBuy.FixedRows, CPMSTARTDATE) <> "")) Then
                    MsgBox "Digital buys not allowed with weekly billing cycle", vbOKOnly + vbExclamation, "Information"
                End If
            End If
        End If
    End If
    'If (imHdBoxNo >= LBound(tmHdCtrls)) And (imHdBoxNo <= UBound(tmHdCtrls)) Then
    If (imHdBoxNo >= imLBCTCtrls) And (imHdBoxNo <= UBound(tmHdCtrls)) Then
        If imHdBoxNo = CNTRNOINDEX Then
            If imStep1Index > 1 Then
                If Not mGetNextCntrNo(hmCHF, lmChfRecPos, lmCntrChfCode) Then
                    Exit Sub
                End If
            End If
        End If
        If mTestFields(imHdBoxNo, ALLMANDEFINED + NOMSG) = NO Then
            Beep
            imDirProcess = -1
            mEnableBox imHdBoxNo
            If imTerminate Then
                cmcCancel.SetFocus
            End If
            Exit Sub
        End If
    End If
    If imDirProcess >= 0 Then
        mHdDirection imDirProcess
        imDirProcess = -1
        Exit Sub
    End If
    ilBox = imHdBoxNo
    Do
        ilFound = True
        Select Case ilBox
            Case -1 'Shift tab from button
                imTabDirection = -1  'Set-Right to left
                '10910
                'ilBox = UBound(tmHdCtrls)
                ilBox = OTHERCOMMINDEX
            Case STATUSINDEX
                If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
                    mSetShow imHdBoxNo
                    imHdBoxNo = -1
                    If cmcUpdate.Enabled Then
                        'cmcUpdate.SetFocus
                        cmcSaveStay.SetFocus
                    Else
                        cmcDone.SetFocus
                    End If
                    Exit Sub
                End If
                If sgCntrScreen = "Orders" Then
                    If imStep1Index <= 1 Then
                        ilBox = TYPEINDEX
                    Else
                        If imAnyLnSchd Then
                            If imStep1Index = 2 Then
                                ilBox = CNTRNOINDEX
                            Else
                                ilBox = ADVTINDEX
                            End If
                        Else
                            ilBox = TYPEINDEX
                        End If
                    End If
                Else
                    ilBox = POTINDEX
                End If
            Case POTINDEX   'Only can be at popindex if proposal
                If imStep1Index <= 1 Then
                    ilBox = TYPEINDEX
                Else
                    If imAnyLnSchd Then
                        ilBox = ADVTINDEX
                    Else
                        If (imStep1Index = 2) Or (imStep1Index = 3) Then
                            ilBox = TYPEINDEX
                        Else
                            ilBox = ADVTINDEX
                        End If
                    End If
                End If
            Case TYPEINDEX
                If imStep1Index <= 1 Then
                    ilBox = CNTRNOINDEX
                Else
                    If sgCntrScreen = "Orders" Then
                        If imStep1Index = 2 Then
                            ilBox = CNTRNOINDEX
                        Else
                            ilBox = ADVTINDEX
                        End If
                    Else
                        If (tgUrf(0).sRefResvType <> "I") And (tgSpf.sCEstNo <> "Y") And ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) <> EDIAGYCODES) Then
                        'If (tgUrf(0).sRefResvType <> "I") And (tgSpf.sCEstNo <> "Y") And ((Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) <> INVEXPORTPARAMETERS) Then
                            ilBox = ADVTINDEX
                        Else
                            ilBox = CNTRNOINDEX
                        End If
                    End If
                End If
                If ilBox = CNTRNOINDEX Then
                    If tgSpf.sCEstNo <> "Y" Then
                        If sgCntrScreen = "Orders" Then
                            If (tgUrf(0).sRefResvType <> "I") And (imStep1Index > 2) Then
                                If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) <> EDIAGYCODES) Then
                                'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) <> INVEXPORTPARAMETERS Then
                                    ilBox = ADVTINDEX
                                End If
                            End If
                        End If
                    End If
                End If
            Case CNTRNOINDEX
                ilBox = ADVTINDEX
            Case REVNOINDEX
                ilBox = ilBox + 1   'imHdBoxNo + 1
            Case PRODUCTINDEX
                If tgSpf.sUseProdSptScr = "P" Then  'Short Title
                    If (lbcStatus.ListIndex >= 0) Then
                        slStr = lbcStatus.List(lbcStatus.ListIndex)
                        If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                            ilBox = ilBox + 1   'imHdBoxNo + 1
                        Else
                            ilBox = ilBox + 2   'imHdBoxNo + 2
                        End If
                    Else
                        ilBox = ilBox + 2   'imHdBoxNo + 2
                    End If
                Else
                    ilBox = ilBox + 2   'imHdBoxNo + 2
                End If
            Case SHAREINDEX
                If tgSpf.sRUseMerch = "Y" Then  'Merchandising
                    ilBox = ilBox + 1   'imHdBoxNo + 1
                Else
                    If tgSpf.sRUsePromo = "Y" Then  'Promotion
                        ilBox = ilBox + 2   'imHdBoxNo + 2
                    Else
                        ilBox = ilBox + 3   'imHdBoxNo + 3
                    End If
                End If
            Case MERCHINDEX
                If tgSpf.sRUsePromo = "Y" Then  'Promotion
                    ilBox = ilBox + 1   'imHdBoxNo + 1
                Else
                    ilBox = ilBox + 2   'imHdBoxNo + 2
                End If
            Case TRADEINDEX
                If imAnyLnSchd Then
                    ilBox = GROSSINDEX
                Else
                    ilBox = RATECARDINDEX
                End If
            Case GROSSINDEX
                If (imAnyFixedBilled) Or (Not imAllowCashTradeChgs) Then
                    ilBox = INVGROUPINDEX
                Else
                    ilBox = BILLCYCLEINDEX
                End If
            Case REVSETINDEX
                If tgSpf.sCUseSegments = "Y" Then
                    ilBox = SEGINDEX
                Else
                    ilBox = DEMOINDEX
                End If
            Case INVGROUPINDEX
                If lbcInvGroup.ListIndex <= 0 Then
                    ilBox = INTCOMMINDEX
                Else
                    ilBox = PRODTAGINDEX
                End If
            Case OTHERCOMMINDEX 'last control
                mSetShow imHdBoxNo
                imHdBoxNo = -1
                If mTestFields(TESTALLCTRLS, ALLMANDEFINED + SHOWMSG) = NO Then
                    Beep
                    mEnableBox imHdBoxNo
                    Exit Sub
                End If
                imAllAnsw = True
                If plcLine.Visible Then
                    On Error Resume Next
                    pbcLnSTab.SetFocus
                    On Error GoTo 0
                End If
                Exit Sub
            Case Else
                ilBox = ilBox + 1
        End Select
        If (ilBox = TRADEINDEX) And (imAllowCashTradeChgs = False) Then
            ilFound = False
        End If
        If (ilBox = MERCHINDEX) And (tgSpf.sRUseMerch <> "Y") Then
            ilFound = False
        End If
        If (ilBox = PROMOINDEX) And (tgSpf.sRUsePromo <> "Y") Then
            ilFound = False
        End If
        If (ilBox = SHTTITLEINDEX) And (tgSpf.sUseProdSptScr <> "P") Then  'Short Title
            ilFound = False
        End If
        If (ilBox = POTINDEX) And ((Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION) Then
            ilFound = False
        End If
        If (ilBox = SHAREINDEX) And ((Asc(tgSpf.sOptionFields) And OFSHARE) <> OFSHARE) Then
            ilFound = False
        End If
        If (ilBox = REVSETINDEX) And ((Asc(tgSpf.sOptionFields) And OFREVSET) <> OFREVSET) Then
            ilFound = False
        End If
        If (tgSpf.sGUsePropSys <> "Y") And (ilBox = DEMOINDEX) Then
            ilFound = False
        End If
        If (ilBox = GUARINDEX) And (((Asc(tgSpf.sOptionFields) And OFDELGUAR) <> OFDELGUAR) And ((Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) <> GUARBYGRIMP)) Then
            ilFound = False
        End If
        If (ilBox = BILLCYCLEINDEX) And ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
            ilFound = False
        End If
        If ((ilBox = INVGROUPINDEX) Or (ilBox = PRODTAGINDEX)) And ((Asc(tgSpf.sOptionFields) And OFCOOPBILL) <> OFCOOPBILL) Then
            ilFound = False
        End If
    Loop While Not ilFound
    mSetShow imHdBoxNo
    'DoEvents
    imHdBoxNo = ilBox
    mEnableBox ilBox
    If imTerminate Then
        cmcCancel.SetFocus
    End If
End Sub

Private Sub pbcHdTab_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcHeader_GotFocus()
    'If pbcAir.Visible Then
    '    cmcAirCancel.SetFocus
    '    Exit Sub
    'End If
    'cmcDemoBar.Visible = False
    cmcDemoBar.Enabled = False
    'mAllSetShow 4
    If plcLine.Visible Then
        If (fmAdjFactorW = 1#) And (vbcLines.LargeChange = 12) Then
            plcLine.Move 105, 2775, pbcLine.Width + vbcLines.Width + fgPanelAdj, 2280
            pbcLine.Move plcLine.Left + fgBevelX, plcLine.Top + 450, pbcLine.Width, 1545 'fgBevelY
            pbcLnTotal.Move pbcLine.Left, pbcLine.Top + pbcLine.height, pbcLine.Width, 225
            'vbcLines.Move pbcLine.Left + pbcLine.Width + 15, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.Height - pbcLine.Top
            vbcLines.Move pbcLine.Left + pbcLine.Width, pbcLine.Top, vbcLines.Width, pbcLnTotal.Top + pbcLnTotal.height - pbcLine.Top
            vbcLines.LargeChange = 5
        End If
        imLine = 0
        If Not imUpdateAllowed Then
            'cmcPower.Visible = False
            cmcRates.Visible = False
        Else
            If (mTestFields(RATECARDINDEX, ALLMANDEFINED + NOMSG) = NO) Or (mTestFields(DEMOINDEX, ALLMANDEFINED + NOMSG) = NO) Then
                cmcRates.Visible = False
            Else
                cmcRates.Visible = True
            End If
        End If
    Else
        If plcPower.Visible And (Trim$(smPowerCaption) = "Rate Bar") Then
            cmcPBCancel_Click
        End If
    End If
End Sub

Private Sub pbcHeader_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim slStr As String
    Dim ilRet As Integer

    'If pbcAir.Visible Then
    '    cmcAirCancel.SetFocus
    '    Exit Sub
    'End If
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
    If plcPower.Visible Then
        plcCalendar.Visible = False
    End If
    If (imStep1Index < 0) Or ((imStep2Index < 0) And (imStep1Index > 0)) Then
        '2/7/09: Added to handle case where focus can't be set
        On Error Resume Next
        pbcClickFocus.SetFocus
        On Error GoTo 0
        Exit Sub
    End If
    If (imStep1Index > 0) And (imStep2Index > 0) And (imStep3Index < 0) Then
        '2/7/09: Added to handle case where focus can't be set
        On Error Resume Next
        pbcClickFocus.SetFocus
        On Error GoTo 0
        Exit Sub
    End If
    If (imStep1Index > 0) And (imStep2Index = 0) And (imStep3Index = -2) Then
        '2/7/09: Added to handle case where focus can't be set
        On Error Resume Next
        pbcClickFocus.SetFocus
        On Error GoTo 0
        Exit Sub
    End If
    'If (imSelectedIndex > 0) And (tgChfCntr.sStatus = "I") Then
    If (tgChfCntr.sSchStatus = "I") Then
        ilRet = MsgBox("Contract partially scheduled, finish scheduling", vbOKOnly + vbExclamation, "Error")
        cmcHold.Enabled = True
        '2/7/09: Added to handle case where focus can't be set
        On Error Resume Next
        cmcHold.SetFocus
        On Error GoTo 0
        Exit Sub
    End If
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
        mSetShow imHdBoxNo
        Exit Sub
    End If
    For ilBox = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        If (X >= tmHdCtrls(ilBox).fBoxX) And (X <= tmHdCtrls(ilBox).fBoxX + tmHdCtrls(ilBox).fBoxW) Then
            If (Y >= tmHdCtrls(ilBox).fBoxY) And (Y <= tmHdCtrls(ilBox).fBoxY + tmHdCtrls(ilBox).fBoxH) Then
                If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
                    If ilBox <> STATUSINDEX Then
                        Beep
                        Exit For    'stay on active control
                    End If
                End If
                If sgCntrScreen = "Orders" Then
                    If (ilBox = STATUSINDEX) And (tgChfCntr.sStatus = "O") And (imStep1Index > 1) Then
                        Beep
                        Exit For
                    End If
                    If ilBox = POTINDEX Then
                        Beep
                        Exit For
                    End If
                    If (ilBox = TYPEINDEX) And (((imStep1Index = 2) And (imAnyLnSchd)) Or (imStep1Index = 3)) Then
                        Beep
                        Exit For
                    End If
                    If (ilBox = CNTRNOINDEX) And (imStep1Index > 2) Then
                        Beep
                        Exit For
                    End If
                Else
                    If (ilBox = TYPEINDEX) And (((imStep1Index = 2) And (imAnyLnSchd)) Or ((imStep1Index = 3) And (imAnyLnSchd)) Or (imStep1Index > 4)) Then
                        Beep
                        Exit For
                    End If
                    If (imStep1Index > 1) And (ilBox = CNTRNOINDEX) And ((tgUrf(0).sRefResvType <> "I") And (tgSpf.sCEstNo <> "Y") And ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) <> EDIAGYCODES)) Then
                    'If (imStep1Index > 1) And (ilBox = CNTRNOINDEX) And ((tgUrf(0).sRefResvType <> "I") And (tgSpf.sCEstNo <> "Y") And ((Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) <> INVEXPORTPARAMETERS)) Then
                        Beep
                        Exit For
                    End If
                End If
                If (ilBox = MERCHINDEX) And (tgSpf.sRUseMerch <> "Y") Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = PROMOINDEX) And (tgSpf.sRUsePromo <> "Y") Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = BILLCYCLEINDEX) And ((imAnyFixedBilled) Or (Not imAllowCashTradeChgs)) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = TRADEINDEX) And (imAllowCashTradeChgs = False) Then
                    Beep
                    Exit For
                End If
                If (ilBox = RATECARDINDEX) And (imAnyLnSchd) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = TYPEINDEX) And (imAnyLnSchd) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = SHTTITLEINDEX) And (tgSpf.sUseProdSptScr <> "P") Then  'Short Title
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = POTINDEX) And ((Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = SHAREINDEX) And ((Asc(tgSpf.sOptionFields) And OFSHARE) <> OFSHARE) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = REVSETINDEX) And ((Asc(tgSpf.sOptionFields) And OFREVSET) <> OFREVSET) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (tgSpf.sGUsePropSys <> "Y") And (ilBox = DEMOINDEX) Then
                    Beep
                    Exit For
                End If
                If (ilBox = GUARINDEX) And (((Asc(tgSpf.sOptionFields) And OFDELGUAR) <> OFDELGUAR) And ((Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) <> GUARBYGRIMP)) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If (ilBox = BILLCYCLEINDEX) And ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
                    Beep
                    Exit For    'stay on active control
                End If
                If ((ilBox = INVGROUPINDEX) Or (ilBox = PRODTAGINDEX)) And ((Asc(tgSpf.sOptionFields) And OFCOOPBILL) <> OFCOOPBILL) Then
                    Beep
                    Exit For    'stay on active control
                End If
                mAllSetShow 4
                mSetShow imHdBoxNo
                If (ilBox = PRODTAGINDEX) And (lbcInvGroup.ListIndex <= 0) Then
                    Beep
                    ilBox = INVGROUPINDEX
                End If
                If (ilBox = PRODUCTINDEX) And (tmAdf.iCode <= 0) Then
                    Beep
                    ilBox = ADVTINDEX
                End If
                If (ilBox = SHTTITLEINDEX) And (tmAdf.iCode <= 0) Then
                    Beep
                    ilBox = ADVTINDEX
                End If
                If ilBox = SHTTITLEINDEX Then
                    If (lbcStatus.ListIndex >= 0) Then
                        slStr = lbcStatus.List(lbcStatus.ListIndex)
                        If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then

                        Else
                            Beep
                            Exit For    'stay on active control
                        End If
                    Else
                        Beep
                        Exit For    'stay on active control
                    End If
                End If
                If (ilBox = BUYERINDEX) And (tmAdf.iCode <= 0) Then
                    Beep
                    ilBox = ADVTINDEX
                End If
                If (ilBox = BUYERINDEX) And (tmAdf.sBillAgyDir = "A") And (tmAgf.iCode <= 0) Then
                    Beep
                    ilBox = AGENCYINDEX
                End If
                '10910-show
                If ilBox = ATTACHMENTINDEX Then
                        ContractDoc.CONTRACTNO = tgChfCntr.lCntrNo
                        ContractDoc.isViewOnly = False
                        If sgCntrScreen = "Orders" Then
                            If imStep1Index = 4 Then
                                ContractDoc.isViewOnly = True
                            End If
                        ElseIf imStep1Index = 6 Then
                            ContractDoc.isViewOnly = True
                        End If
                        ContractDoc.Show vbModal
                        Set ContractDoc = Nothing
                        mSetCommands
                        If bgContractAttachments_Changed Then
                            mContractDocumentWriteAmount
                        End If
                       'if they skip the header, normally the vehicle in the line will warn them.  For some reason, I'm not setting that off when coming from here, so I'll test and block.
                        If imUpdateAllowed Then
                            If mTestFields(TESTALLCTRLS, ALLMANDEFINED + SHOWMSG) = NO Then
                                mEnableBox imHdBoxNo
                                Exit Sub
                            End If
                        End If
                        imAllAnsw = True
                        If plcLine.Visible Then
                            On Error Resume Next
                            pbcLnSTab.SetFocus
                            On Error GoTo 0
                        Else
                            On Error Resume Next
                            pbcClickFocus.SetFocus
                            On Error GoTo 0
                        End If
                        Exit Sub
                End If
                imFirstTimeStep = False
                imHdBoxNo = ilBox
                mEnableBox ilBox
                If imTerminate Then
                    cmcCancel.SetFocus
                End If
                Exit Sub
            End If
        End If
    Next ilBox
    If imCEBoxNo > 0 Then
        mCESetFocus imCEBoxNo
    ElseIf imDMBoxNo > 0 Then
        mDmSetFocus imDMBoxNo
    ElseIf imNoBoxNo > 0 Then
        mNoSetFocus imNoBoxNo
    ElseIf imSPBoxNo > 0 Then
        mSPSetFocus imSPBoxNo
    Else
        mSetFocus imHdBoxNo
    End If
End Sub

Public Sub pbcHeader_Paint()
    Dim ilBox As Integer
    Dim ilShowField As Integer

    '10910-show color box blue
    gPaintArea pbcHeader, tmHdCtrls(ATTACHMENTINDEX).fBoxX + 15, tmHdCtrls(ATTACHMENTINDEX).fBoxY + 15, tmHdCtrls(ATTACHMENTINDEX).fBoxW - 30, tmHdCtrls(ATTACHMENTINDEX).fBoxH - 30, LIGHTBLUE
    '10967-show
    gPaintArea pbcHeader, tmHdCtrls(VENDORINDEX).fBoxX + 15, tmHdCtrls(VENDORINDEX).fBoxY + 15, tmHdCtrls(VENDORINDEX).fBoxW - 30, tmHdCtrls(VENDORINDEX).fBoxH - 30, LIGHTYELLOW
    mPaintHdTitle
    'For ilBox = LBound(tmHdCtrls) To UBound(tmHdCtrls) Step 1
    For ilBox = imLBCTCtrls To UBound(tmHdCtrls) Step 1
        ilShowField = True
        If (ilBox = SHTTITLEINDEX) And (tgSpf.sUseProdSptScr <> "P") Then  'Short Title
            ilShowField = False
        End If
        If (ilBox = MERCHINDEX) And (tgSpf.sRUseMerch <> "Y") Then  'Short Title
            ilShowField = False
        End If
        If (ilBox = PROMOINDEX) And (tgSpf.sRUsePromo <> "Y") Then  'Short Title
            ilShowField = False
        End If
        If (ilBox = POTINDEX) And ((Asc(tgSpf.sOptionFields) And OFPROJECTION) <> OFPROJECTION) Then
            ilShowField = False
        End If
        If (ilBox = SHAREINDEX) And ((Asc(tgSpf.sOptionFields) And OFSHARE) <> OFSHARE) Then
            ilShowField = False
        End If
        If (ilBox = REVSETINDEX) And ((Asc(tgSpf.sOptionFields) And OFREVSET) <> OFREVSET) Then
            ilShowField = False
        End If
        If (ilBox = GUARINDEX) And (((Asc(tgSpf.sOptionFields) And OFDELGUAR) <> OFDELGUAR) And ((Asc(tgSpf.sUsingFeatures6) And GUARBYGRIMP) <> GUARBYGRIMP)) Then
            ilShowField = False
        End If
        If (ilBox = BILLCYCLEINDEX) And ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
            ilShowField = False
            '8/16/12: Handle case where contract was set as Calendar but is not allowed at this time
            If (tgChfCntr.sBillCycle = "C") Then
                ilShowField = True
            End If
        End If
        If ((ilBox = INVGROUPINDEX) Or (ilBox = PRODTAGINDEX)) And ((Asc(tgSpf.sOptionFields) And OFCOOPBILL) <> OFCOOPBILL) Then
            ilShowField = False
        End If
        If ilShowField Then
            pbcHeader.CurrentX = tmHdCtrls(ilBox).fBoxX + fgBoxInsetX
            pbcHeader.CurrentY = tmHdCtrls(ilBox).fBoxY + fgBoxInsetY
            pbcHeader.Print tmHdCtrls(ilBox).sShow
        End If
    Next ilBox
End Sub

Private Sub pbclbcRBDatesSpots_Paint(Index As Integer)
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilLinesEnd As Integer
    Dim ilField As Integer
    Dim llWidth As Long
    Dim slFields(0 To 2) As String
    Dim llFgColor As Long
    If imINRBPBCPaint Then
        Exit Sub
    End If
    imINRBPBCPaint = True
    ilLinesEnd = lbcRBDatesSpots(Index).TopIndex + lbcRBDatesSpots(Index).height \ fgListHtArial825
    If ilLinesEnd > lbcRBDatesSpots(Index).ListCount Then
        ilLinesEnd = lbcRBDatesSpots(Index).ListCount
    End If
    If lbcRBDatesSpots(Index).ListCount <= lbcRBDatesSpots(Index).height \ fgListHtArial825 Then
        llWidth = lbcRBDatesSpots(Index).Width - 30
    Else
        llWidth = lbcRBDatesSpots(Index).Width - igScrollBarWidth - 30
    End If
    pbcLbcRBDatesSpots(Index).Width = llWidth
    pbcLbcRBDatesSpots(Index).Cls
    llFgColor = pbcLbcRBDatesSpots(Index).ForeColor
    For ilLoop = lbcRBDatesSpots(Index).TopIndex To ilLinesEnd - 1 Step 1
        pbcLbcRBDatesSpots(Index).ForeColor = llFgColor
        If lbcRBDatesSpots(Index).Selected(ilLoop) Then
            gPaintArea pbcLbcRBDatesSpots(Index), CSng(0), CSng((ilLoop - lbcRBDatesSpots(Index).TopIndex) * fgListHtArial825), CSng(pbcLbcRBDatesSpots(Index).Width), CSng(fgListHtArial825) - 15, vbHighlight 'WHITE
            pbcLbcRBDatesSpots(Index).ForeColor = vbWhite
        End If
        slStr = lbcRBDatesSpots(Index).List(ilLoop)
        gParseItemFields slStr, "|", slFields()
        For ilField = imLBCTCtrls To UBound(imListField) - 1 Step 1
            pbcLbcRBDatesSpots(Index).CurrentX = imListField(ilField)
            pbcLbcRBDatesSpots(Index).CurrentY = (ilLoop - lbcRBDatesSpots(Index).TopIndex) * fgListHtArial825 + 15
            slStr = slFields(ilField - 1)
            gAdjShowLen pbcLbcRBDatesSpots(Index), slStr, imListField(ilField + 1) - imListField(ilField)
            pbcLbcRBDatesSpots(Index).Print slStr
        Next ilField
        pbcLbcRBDatesSpots(Index).ForeColor = llFgColor
    Next ilLoop
    imINRBPBCPaint = False
End Sub

Private Sub pbclbcRBVehicle_Paint()
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilLinesEnd As Integer
    Dim llWidth As Long
    Dim llFgColor As Long
    '5/18/19
    Dim slNameCode As String
    Dim ilVefCode As Integer
    Dim ilVef As Integer
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilCheck As Integer
    Dim ilVpf As Integer
    Dim slMedium As String

    If imINRBPBCPaint Then
        Exit Sub
    End If
    imINRBPBCPaint = True
    ilLinesEnd = lbcRBVehicle.TopIndex + lbcRBVehicle.height \ fgListHtArial825
    If ilLinesEnd > lbcRBVehicle.ListCount Then
        ilLinesEnd = lbcRBVehicle.ListCount
    End If
    If lbcRBVehicle.ListCount <= lbcRBVehicle.height \ fgListHtArial825 Then
        llWidth = lbcRBVehicle.Width - 30
    Else
        llWidth = lbcRBVehicle.Width - igScrollBarWidth - 30
    End If
    pbclbcRBVehicle.Width = llWidth
    pbclbcRBVehicle.Cls
    llFgColor = pbclbcRBVehicle.ForeColor
    For ilLoop = lbcRBVehicle.TopIndex To ilLinesEnd - 1 Step 1
        pbclbcRBVehicle.ForeColor = llFgColor
        If lbcRBVehicle.Selected(ilLoop) Then
            gPaintArea pbclbcRBVehicle, CSng(0), CSng((ilLoop - lbcRBVehicle.TopIndex) * fgListHtArial825), CSng(pbclbcRBVehicle.Width), CSng(fgListHtArial825) - 15, vbHighlight 'WHITE
            pbclbcRBVehicle.ForeColor = vbWhite
        Else
            If imRBVehType(ilLoop) = 1 Then
                pbclbcRBVehicle.ForeColor = vbBlue
            Else
                pbclbcRBVehicle.ForeColor = vbBlack
            End If
        End If
        slMedium = ""
        For ilCheck = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            If Trim$(tgMVef(ilCheck).sName) = lbcRBVehicle.List(ilLoop) Then
                ilVpf = gBinarySearchVpf(tgMVef(ilCheck).iCode)
                If ilVpf <> -1 Then
                    slMedium = tgVpf(ilVpf).sGMedium
                End If
                If slMedium = "P" Then
                    pbclbcRBVehicle.FontItalic = True
                Else
                    pbclbcRBVehicle.FontItalic = False
                End If
                Exit For
            End If
        Next ilCheck
        
        ''5/28/19: Show dormant vehicles in red
        'Dormant vehicle not included in Power Bar
        'ilRet = gBinarySearchVefName(Trim$(lbcRBVehicle.List(ilLoop)))
        'If ilRet <> -1 Then
        '    ilVef = gBinarySearchDormantVef(tgVefName(ilRet).iCode)
        '    If ilVef <> -1 Then
        '        pbclbcRBVehicle.ForeColor = vbRed
        '    End If
        'End If
        
        pbclbcRBVehicle.CurrentX = 15
        pbclbcRBVehicle.CurrentY = (ilLoop - lbcRBVehicle.TopIndex) * fgListHtArial825 + 15
        slStr = lbcRBVehicle.List(ilLoop)
        gAdjShowLen pbclbcRBVehicle, slStr, pbclbcRBVehicle.Width
        pbclbcRBVehicle.Print slStr
        pbclbcRBVehicle.FontItalic = False
        pbclbcRBVehicle.ForeColor = llFgColor
    Next ilLoop
    imINRBPBCPaint = False
End Sub

Public Sub pbcLbcVehicle_Paint()
    If imINPBCPaint Then
        Exit Sub
    End If
    imINPBCPaint = True
    If grdCPMBuy.Visible Then
        If Contract.grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMLNTYPE) <> "P" Then
            mLnVehPaint lbcLnVehicle(igTabMapIndex), False
        Else
            mLnVehPaint lbcPkVehicle(igTabMapIndex), True
        End If
    Else
        If (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
            mLnVehPaint lbcLnVehicle(igTabMapIndex), False
        Else
            mLnVehPaint lbcPkVehicle(igTabMapIndex), True
        End If
    End If
    imINPBCPaint = False
End Sub

Private Sub pbcLine_DragDrop(Source As Control, X As Single, Y As Single)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilRowNo As Integer
    Dim ilCff As Integer
    Dim ilPrevCff As Integer
    Dim ilDay As Integer
    Dim ilExit As Integer
    Dim ilLoop As Integer
    Dim ilCffIndex As Integer
    Dim ilLastCffUsed
    ReDim ilAllowedDays(0 To 6) As Integer
    Dim slLineType As String
    '11/26/14: Disallow weeks copied from Non-Sports to Sports
    Dim ilFromVef As Integer
    Dim ilToVef As Integer
    Dim ilLnRowNo As Integer

    Screen.MousePointer = vbHourglass
    ilLastCffUsed = LBound(tgCffCntr)
    If ((imDragBoxNo >= WKSPOTSINDEX) And (imDragBoxNo <= WKSPOTSINDEX + 12)) Then
        laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
        laclnFrame.Visible = False
        ilCompRow = vbcLines.LargeChange + 1
        If UBound(tgClfCntr) + 1 > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = UBound(tgClfCntr) + 1
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(VEHINDEX).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(VEHINDEX).fBoxY + tmLnCtrls(VEHINDEX).fBoxH)) Then
                ilRowNo = ilRow + vbcLines.Value
                If ilRowNo = imLnRowNo Then
                    Exit For
                End If
                ilRowNo = mRemapRowNo(ilRowNo)
                ilLnRowNo = mRemapRowNo(imLnRowNo)
                If smLnSave(1, ilRowNo) = "" Then
                    Exit For
                End If
                If (Not tgClfCntr(ilRowNo - 1).iCancel) And ((tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "F") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "I") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "M")) Then
                    Exit For
                End If
                '11/26/14: Disallow copying of weeks from Non-Sports to Sports
                ilFromVef = gBinarySearchVef(tgClfCntr(ilLnRowNo - 1).ClfRec.iVefCode)
                ilToVef = gBinarySearchVef(tgClfCntr(ilRowNo - 1).ClfRec.iVefCode)
                If (ilFromVef = -1) Or (ilToVef = -1) Then
                    Exit For
                End If
                If (tgMVef(ilFromVef).sType = "G") And (tgMVef(ilToVef).sType <> "G") Then
                    Exit For
                End If
                If (tgMVef(ilFromVef).sType <> "G") And (tgMVef(ilToVef).sType = "G") Then
                    Exit For
                End If
                ilExit = False
                If (Not tgClfCntr(ilRowNo - 1).iCancel) And (tgClfCntr(ilRowNo - 1).iFirstCff >= 0) Then
                    ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
                    Do While ilCff <> -1
                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                For ilDay = 0 To 6 Step 1
                                    If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                        ilExit = True
                                        Exit Do
                                    End If
                                Next ilDay
                            Else
                                If tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk > 0 Then
                                        ilExit = True
                                        Exit Do
                                End If
                            End If
                        End If
                        ilCff = tgCffCntr(ilCff).iNextCff
                    Loop
                End If
                If ilExit Then
                    Exit For
                End If
                'Insert weeks- first remove any weeks, then add week
                ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
                Do While ilCff <> -1
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = -1) Then
                        tgCffCntr(ilCff).iStatus = -1   'New to not used
                    Else
                        tgCffCntr(ilCff).iStatus = 2    'Old to delete
                    End If
                    ilPrevCff = ilCff
                    ilCff = tgCffCntr(ilCff).iNextCff
                    tgCffCntr(ilPrevCff).iNextCff = -1
                Loop
                tgClfCntr(ilRowNo - 1).iFirstCff = -1
                tgClfCntr(ilRowNo - 1).iFirstCgf = -1
                tgClfCntr(ilRowNo - 1).lFirstAvail = -1
                ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
                Do While ilCff <> -1
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        '6/7/16: Moved code here
                        'GoSub lObtainNextCff1
                        ilCffIndex = -1
                        For ilLoop = ilLastCffUsed To UBound(tgCffCntr) - 1 Step 1
                            If tgCffCntr(ilLoop).iStatus = -1 Then
                                ilCffIndex = ilLoop
                                ilLastCffUsed = ilLoop
                                Exit For
                            End If
                        Next ilLoop
                        If ilCffIndex = -1 Then
                            ilCffIndex = UBound(tgCffCntr)
                            ilLastCffUsed = ilCffIndex
                            ReDim Preserve tgCffCntr(0 To ilCffIndex + 100) As CFFLIST
                            For ilLoop = ilCffIndex + 1 To UBound(tgCffCntr) Step 1
                                tgCffCntr(ilLoop).iStatus = -1 'Not Used
                                tgCffCntr(ilLoop).lRecPos = 0
                                tgCffCntr(ilLoop).iNextCff = -1
                            Next ilLoop
                        End If
                        
                        tgCffCntr(ilCffIndex) = tgCffCntr(ilCff)
                        tgCffCntr(ilCffIndex).iStatus = 0
                        tgCffCntr(ilCffIndex).lRecPos = 0
                        tgCffCntr(ilCffIndex).CffRec.sPriceType = "*"
                        tgCffCntr(ilCffIndex).CffRec.lActPrice = 0
                        tgCffCntr(ilCffIndex).CffRec.lPropPrice = 0
                        If tgClfCntr(ilRowNo - 1).iFirstCff = -1 Then
                            tgClfCntr(ilRowNo - 1).iFirstCff = ilCffIndex
                        Else
                            tgCffCntr(ilPrevCff).iNextCff = ilCffIndex
                        End If
                        ilPrevCff = ilCffIndex
                        tgCffCntr(ilCffIndex).iNextCff = -1
                    End If
                    ilCff = tgCffCntr(ilCff).iNextCff
                Loop
                imDragBoxNo = -1
                imLnSave(8, ilRowNo) = imLnSave(8, ilLnRowNo)
                For ilDay = 0 To 6 Step 1
                    smLnSave(7 + ilDay, ilRowNo) = smLnSave(7 + ilDay, ilLnRowNo)
                Next ilDay
                imLnRowNo = ilRowNo
                For ilDay = 0 To 6 Step 1
                    If imLnSave(12 + ilDay, ilRowNo) = 1 Then
                        ilAllowedDays(ilDay) = False
                    Else
                        ilAllowedDays(ilDay) = True
                    End If
                Next ilDay
                mCVehOptIndex ilRowNo, imCntrVefCode, imVpfIndex, imTerminate
                mChgDaypart ilRowNo, ilAllowedDays()
                mGetFlightDays ilRowNo, imOvDays()
                imComputeReq = True
                tgClfCntr(ilRowNo - 1).iSPChg = True
                igLnSPChg = True
                imLnChg = True
                If sgCntrScreen = "Orders" Then
                    mSetFlightPrice ".00", False
                Else
                    mSetFlightPrice "Rate Card", False
                End If
                mResetDemoBar False
                pbcLine_Paint
                mSetCommands
                slLineType = mGetLineType(ilRowNo)
                If (slLineType <> "A") And (slLineType <> "O") Then
                    imLnBoxNo = PRICEINDEX  '0'1
                Else
                    imLnBoxNo = LINECOMMINDEX
                End If
                laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
                'lacLnFrame.Visible = True
                pbcLineArrow.Move pbcLineArrow.Left, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
                pbcLineArrow.Visible = True
                'pbcLineArrow.SetFocus
                mLnEnableBox imLnBoxNo
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
        Next ilRow
    End If
    Screen.MousePointer = vbDefault
    imDragBoxNo = -1
    imLnBoxNo = 0 '1
    'lacLnFrame.Visible = True
    pbcLineArrow.SetFocus
    Exit Sub
End Sub

Private Sub pbcLine_DragOver(Source As Control, X As Single, Y As Single, State As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilRowNo As Integer
    Dim ilCff As Integer
    Dim ilDay As Integer
    '11/26/14: Disallow weeks copied from Non-Sports to Sports
    Dim ilFromVef As Integer
    Dim ilLnRowNo As Integer
    Dim ilToVef As Integer
    
    If State = 1 Then
        laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
    If ((imDragBoxNo >= WKSPOTSINDEX) And (imDragBoxNo <= WKSPOTSINDEX + 12)) Then
        ilCompRow = vbcLines.LargeChange + 1
        If UBound(tgClfCntr) + 1 > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = UBound(tgClfCntr) + 1
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(VEHINDEX).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(VEHINDEX).fBoxY + tmLnCtrls(VEHINDEX).fBoxH)) Then
                ilRowNo = ilRow + vbcLines.Value
                If ilRowNo = imLnRowNo Then
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                ilRowNo = mRemapRowNo(ilRowNo)
                ilLnRowNo = mRemapRowNo(imLnRowNo)
                If smLnSave(1, ilRowNo) = "" Then
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                If (Not tgClfCntr(ilRowNo - 1).iCancel) And ((tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "F") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "I") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "M")) Then
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                '11/26/14: Disallow copying of weeks from Non-Sports to Sports
                ilFromVef = gBinarySearchVef(tgClfCntr(ilLnRowNo - 1).ClfRec.iVefCode)
                ilToVef = gBinarySearchVef(tgClfCntr(ilRowNo - 1).ClfRec.iVefCode)
                If (ilFromVef = -1) Or (ilToVef = -1) Then
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                If (tgMVef(ilFromVef).sType = "G") And (tgMVef(ilToVef).sType <> "G") Then
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                If (tgMVef(ilFromVef).sType <> "G") And (tgMVef(ilToVef).sType = "G") Then
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                
                If (tgClfCntr(ilRowNo - 1).iCancel) Or (tgClfCntr(ilRowNo - 1).iFirstCff < 0) Then
                    laclnFrame.DragIcon = IconTraf!imcIconInsert.DragIcon
                    Exit Sub
                End If
                ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
                Do While ilCff <> -1
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                            For ilDay = 0 To 6 Step 1
                                If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Next ilDay
                        Else
                            If tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk > 0 Then
                                laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        End If
                    End If
                    ilCff = tgCffCntr(ilCff).iNextCff
                Loop
                laclnFrame.DragIcon = IconTraf!imcIconInsert.DragIcon
                Exit Sub
            End If
        Next ilRow
        laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    End If
End Sub

Private Sub pbcLine_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    fmDragX = X
    fmDragY = Y
    imDragType = 0
    tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub

Private Sub pbcLine_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilBox As Integer
    Dim ilRowNo As Integer
    Dim llDate As Long
    Dim llNext As Long
    Dim ilWeekIndex As Integer
    
    'If (tscLine.SelectedItem.Index <> 8) And (tscLine.SelectedItem.Index <> 9) Then
    '    Exit Sub
    'End If
    If (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Then
    Else
        Exit Sub
    End If
    If bmInAvailTab Then
        Exit Sub
    End If
    If imIgnoreRightMove Then
        Exit Sub
    End If
    imButton = Button
    'If Button <> 2 Then  'Right Mouse
    '    Exit Sub
    'End If
    'imButton = Button
    imIgnoreRightMove = True
    ilCompRow = vbcLines.LargeChange + 1
    If UBound(tgClfCntr) + 1 > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = UBound(tgClfCntr) + 1
    End If
    ' Look through all rows
    For ilRow = 1 To ilMaxRow Step 1
        If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(WKSPOTSINDEX).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(WKSPOTSINDEX).fBoxY + tmLnCtrls(WKSPOTSINDEX).fBoxH)) Then
            For ilBox = WKSPOTSINDEX To WKSPOTSINDEX + 12 Step 1
                If ((X >= tmLnCtrls(ilBox).fBoxX) And (X <= (tmLnCtrls(ilBox).fBoxX + tmLnCtrls(ilBox).fBoxW))) Or ((X >= 30) And (X <= (tmLnCtrls(VEHINDEX).fBoxX - 15)) And (ilBox = VEHINDEX)) Then
                    ilRowNo = ilRow + vbcLines.Value
                    ilRowNo = mRemapRowNo(ilRowNo)
                    '6/30/20: Don't show tool tip if past last displayed line
                    If (tgClfCntr(ilRowNo - 1).ClfRec.iLine > 0) And (Not tgClfCntr(ilRowNo - 1).bShowLine) Then
                        pbcLine.ToolTipText = ""
                        imIgnoreRightMove = False
                        Exit Sub
                    End If
                    If smLnSave(1, ilRowNo) = "" Then
                        pbcLine.ToolTipText = ""
                        imIgnoreRightMove = False
                        Exit Sub
                    End If
                    
                    llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                    ''If tgClfCntr(ilRowNo - 1).iFirstCff = -1 Then
                    ''    pbcLine.ToolTipText = ""
                    ''    imIgnoreRightMove = False
                    ''    Exit Sub
                    ''End If
                    'If tgClfCntr(ilRowNo - 1).lFirstAvail = -1 Then
                    '    Screen.MousePointer = vbHourglass
                    '    bmInAvailTab = True
                    '    mAvailTab ilRow
                    '    bmInAvailTab = False
                    '    Screen.MousePointer = vbDefault
                    'End If
                    '
                    'llNext = tgClfCntr(ilRowNo - 1).lFirstAvail
                    'If llNext = -1 Then
                    '    pbcLine.ToolTipText = ""
                    '    imIgnoreRightMove = False
                    '    Exit Sub
                    'End If
                    'ilWeekIndex = (llDate - tgLnAvailInfo(llNext).lStartDate) \ 7
                    'Do While llNext <> -1
                    '    If ilWeekIndex <= UBound(tgLnAvailInfo(0).iSAvail) Then
                    '        Exit Do
                    '    Else
                    '        ilWeekIndex = ilWeekIndex - (UBound(tgLnAvailInfo(0).iSAvail) + 1)
                    '        llNext = tgLnAvailInfo(llNext).lNextIndex
                    '    End If
                    'Loop
                    'If llNext <> -1 Then
                    '    If tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) <> -29999 Then
                    '        If (lmToolTipNext <> llNext) Or (imToolTipWeekIndex <> ilWeekIndex) Then
                    '            pbcLine.ToolTipText = ""
                    '        End If
                    '        lmToolTipNext = llNext
                    '        imToolTipWeekIndex = ilWeekIndex
                    '        If (tscLine.SelectedItem.Index = 8) Then
                    '            pbcLine.ToolTipText = tgLnAvailInfo(llNext).iSAvail(ilWeekIndex)
                    '        Else
                    '            pbcLine.ToolTipText = tgLnAvailInfo(llNext).iAPAvail(ilWeekIndex)
                    '        End If
                    '    Else
                    '        pbcLine.ToolTipText = ""
                    '    End If
                    'Else
                    '    pbcLine.ToolTipText = ""
                    'End If
                    'imIgnoreRightMove = False
                    If llDate >= lmMonNowDate Then
                        pbcLine.ToolTipText = mGetWeekToolTip(ilRowNo, llDate, imIgnoreRightMove, pbcLine)
                    Else
                        pbcLine.ToolTipText = ""
                        imIgnoreRightMove = False
                    End If
                    Exit Sub
                End If
            Next ilBox
            Exit For
        End If
    Next ilRow
    pbcLine.ToolTipText = ""
    imIgnoreRightMove = False
    Exit Sub
End Sub

Public Sub pbcLine_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim ilMaxRow As Integer
    Dim ilCompRow As Integer
    Dim ilRow As Integer
    Dim ilRowNo As Integer
    Dim ilLoop As Integer
    Dim ilSvHSCurWkNo As Integer
    Dim ilSvRowNo As Integer
    Dim ilSvBoxNo As Integer
    Dim ilFound As Integer
    Dim slStr As String
    Dim ilRet As Integer
    Dim llDate As Long
    Dim llAllowedChgWkStartDate As Long
    Dim ilLineNo As Integer
    Dim ilChgCancel As Integer
    Dim slLineType As String
    Dim ilHSStartWkNo As Integer
    Dim ilHSCurWkNo As Integer
    Dim ilHSEndWkNo As Integer
    Dim ilPaintLnRowNo As Integer
    Dim llPrice As Long
    Dim ilSpots As Integer
    '12/16/14: Add Hide/Show Hidden Lines
    Dim ilRetainMoveRowNo As Integer
    '4/13/20: Add Shift click and duplicate spots horizontally
    Dim llNewDate As Long
    Dim ilCff As Integer
    Dim ilCffDay As Integer
    Dim ilAddCff As Integer
    Dim ilVef As Integer
    Dim blShiftAllowed As Boolean
    '10865
    'Dim ilTotalLinesShown As Integer

    ReDim ilDays(0 To 6) As Integer
    
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
    If (imStep1Index < 0) Or ((imStep2Index < 0) And (imStep1Index > 0)) Then
        If plcDemoBar.Visible Then
            mSetArrowFrame
        Else
            '2/7/09: Added to handle case where focus can't be set
            On Error Resume Next
            pbcClickFocus.SetFocus
            On Error GoTo 0
        End If
        Exit Sub
    End If
    If (imStep1Index > 0) And (imStep2Index > 0) And (imStep3Index < 0) Then
        If plcDemoBar.Visible Then
            mSetArrowFrame
        Else
            '2/7/09: Added to handle case where focus can't be set
            On Error Resume Next
            pbcClickFocus.SetFocus
            On Error GoTo 0
        End If
        Exit Sub
    End If
    If (imStep1Index > 0) And (imStep2Index = 0) And (imStep3Index = -2) Then
        If plcDemoBar.Visible Then
            mSetArrowFrame
        Else
            '2/7/09: Added to handle case where focus can't be set
            On Error Resume Next
            pbcClickFocus.SetFocus
            On Error GoTo 0
        End If
        Exit Sub
    End If
    'If (imSelectedIndex > 0) And (tgChfCntr.sStatus = "I") Then
    If (tgChfCntr.sSchStatus = "I") Then
        ilRet = MsgBox("Contract partially scheduled, finish scheduling", vbOKOnly + vbExclamation, "Error")
        If cmcHold.Enabled Then
            '2/7/09: Added to handle case where focus can't be set
            On Error Resume Next
            cmcHold.SetFocus
            On Error GoTo 0
        Else
            If plcDemoBar.Visible Then
                mSetArrowFrame
            Else
                '2/7/09: Added to handle case where focus can't be set
                On Error Resume Next
                pbcClickFocus.SetFocus
                On Error GoTo 0
            End If
        End If
        Exit Sub
    End If
    If (imCreditRestr = 1) And ((imStep1Index = 0) Or (imStep1Index = 1)) Then
        ilRet = MsgBox("NO NEW ORDERS", vbOKOnly + vbExclamation, "Restriction")
        If plcDemoBar.Visible Then
            mSetArrowFrame
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    'If ((tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "O")) And (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
    If (((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6))) And (imHdBoxNo = REVNOINDEX) Then
        mSetShow imHdBoxNo
        Exit Sub
    End If
    'Check if hot spot
    If imInHotSpot Then
        Exit Sub
    End If
    For ilLoop = imLBCTCtrls To UBound(lmLnHotSpot, 1) Step 1
        If (X >= lmLnHotSpot(ilLoop, 1)) And (X <= lmLnHotSpot(ilLoop, 3)) And (Y >= lmLnHotSpot(ilLoop, 2)) And (Y <= lmLnHotSpot(ilLoop, 4)) Then
            Screen.MousePointer = vbHourglass
            ilSvRowNo = imLnRowNo
            mAllSetShow 2
            Screen.MousePointer = vbHourglass
            mDBSetShow imDB0BoxNo
            imDB0BoxNo = -1
            mDBSetShow imDBBoxNo
            imDBBoxNo = -1
            mLnSetShow imLnBoxNo
            imLnBoxNo = -1
            imInHotSpot = True
            ilSvHSCurWkNo = imHSCurWkNo
            ilHSStartWkNo = imHSStartWkNo
            ilHSCurWkNo = imHSCurWkNo
            ilHSEndWkNo = imHSEndWkNo
            If ilHSStartWkNo <= 0 Then
                ilHSStartWkNo = 1
                ilHSEndWkNo = 104
            End If
            Select Case ilLoop
                Case 1  'Goto Start
                    imHSCurWkNo = ilHSStartWkNo
                Case 2  'Reduce by 13
                    imHSCurWkNo = ilHSCurWkNo - 13
                    If imHSCurWkNo < ilHSStartWkNo Then
                        imHSCurWkNo = ilHSStartWkNo
                    End If
                Case 3  'Increase by 13
                    imHSCurWkNo = ilHSCurWkNo + 13
                    If imHSCurWkNo + 12 > ilHSEndWkNo Then
                        imHSCurWkNo = ilHSEndWkNo - 12
                        If imHSCurWkNo < ilHSStartWkNo Then
                            imHSCurWkNo = ilHSStartWkNo
                        End If
                    End If
                Case 4  'GoTo End
                    imHSCurWkNo = ilHSEndWkNo - 12
                    If imHSCurWkNo < ilHSStartWkNo Then
                        imHSCurWkNo = ilHSStartWkNo
                    End If
            End Select
            imLnRowNo = ilSvRowNo
            If ilSvHSCurWkNo <> imHSCurWkNo Then
                ''If (imHSCurWkNo > ilSvHSCurWkNo) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9)) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9)) Then   'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION))) Then   'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                    Screen.MousePointer = vbHourglass
                    bmInAvailTab = True
                    mAvailTab
                    bmInAvailTab = False
                    'If (imLnTotalType = 2) Then
                    '    mResearchForTabs
                    'End If
                End If
                ilPaintLnRowNo = imPaintLnRowNo
                imPaintLnRowNo = -1
               '10843 remove dead code
'                If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType >= 2) Then
'                    imLnTotalType = (imHSCurWkNo - ilHSStartWkNo) \ 13 + 1
'                    lacPrice_Click 0
'                Else
                    'If (Not igLnSPChg) Or (tgUrf(0).sUseComputeCMC <> "I") Then
                        mCntrTotal
                    'End If
                    pbcLnTotal.Cls
                    pbcLnDates.Cls
                    pbcLine.Cls
                    pbcLine_Paint
                    pbcLnTotal_Paint
                    pbcLnDates_Paint
                    If plcDemoBar.Visible Then
                        mBuildWkInfo True, False, False
                        pbcDemoBar(1).Cls
                        pbcDemoBar_Paint 1
                    End If
               ' End If
                imPaintLnRowNo = ilPaintLnRowNo
            End If
            mSetArrowFrame
            'mCntrTotal
            Screen.MousePointer = vbDefault
            imInHotSpot = False
            Exit Sub
        End If
    Next ilLoop
    If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
        mSetShow imHdBoxNo
        Exit Sub
    End If
    '10865
'    If bgHideHiddenLines Then
'        ilTotalLinesShown = 1
'        For ilRow = LBound(tgClfCntr) + 1 To UBound(tgClfCntr) + 1 Step 1
'            If (tgClfCntr(ilRow - 1).ClfRec.iLine > 0) And (tgClfCntr(ilRow - 1).bShowLine) Then
'                ilTotalLinesShown = ilTotalLinesShown + 1
'            End If
'        Next ilRow
'        'the # of rows we're displaying must be greater or equal to value, or they've clicked the scroll bar on a funky spot and value has a way too large and phony value
'        If ilTotalLinesShown < vbcLines.Value Then
'            mSetShow imHdBoxNo
'            Exit Sub
'        End If
'    End If
    ilCompRow = vbcLines.LargeChange + 1
    If UBound(tgClfCntr) + 1 > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = UBound(tgClfCntr) + 1
    End If
    If Not imAllAnsw Then
        mAllSetShow 3
        If imUpdateAllowed Then
            If mTestFields(TESTALLCTRLS, ALLMANDEFINED + SHOWMSG) = NO Then
                mEnableBox imHdBoxNo
                Exit Sub
            End If
        End If
    End If
    imAllAnsw = True
    ''11/19/20: expand line if conditions match
    ''On price and mouse clicks in vehicle next row
    'slLineType = mGetLineType(imLnRowNo, False, True)
    'If (bgHideHiddenLines = True) And (tgClfCntr(imLnRowNo - 1).iStatus <= 0) And (imLnBoxNo = PRICEINDEX) And imUpdateAllowed And ((slLineType = "A") Or (slLineType = "O") Or (slLineType = "E")) Then
    '    ilSvBoxNo = imLnBoxNo
    '    ilSvRowNo = imLnRowNo
    '    mLnSetShow imLnBoxNo
    '    imLnRowNo = ilSvRowNo
    '    imLnBoxNo = ilSvBoxNo
    'End If
    ''end
    '11/23/20 Luigi: expand line if conditions match
    'On price and mouse clicks in vehicle next row
    If (bgHideHiddenLines = True) And imLnRowNo > 0 Then
        slLineType = mGetLineType(imLnRowNo, False, True)
        If (tgClfCntr(imLnRowNo - 1).iStatus <= 0) And (imLnBoxNo = PRICEINDEX) And imUpdateAllowed And ((slLineType = "A") Or (slLineType = "O") Or (slLineType = "E")) Then
            ilSvBoxNo = imLnBoxNo
            ilSvRowNo = imLnRowNo
            mLnSetShow imLnBoxNo
            imLnRowNo = ilSvRowNo
            imLnBoxNo = ilSvBoxNo
        End If
    End If
    '--------------------------------
    
    ilChgCancel = False
    For ilRow = 1 To ilMaxRow Step 1
        For ilBox = imLBCTCtrls To UBound(tmLnCtrls) Step 1
            If ((X >= tmLnCtrls(ilBox).fBoxX) And (X <= (tmLnCtrls(ilBox).fBoxX + tmLnCtrls(ilBox).fBoxW))) Or ((X >= 30) And (X <= (tmLnCtrls(VEHINDEX).fBoxX - 15)) And (ilBox = VEHINDEX)) Then
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(ilBox).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(ilBox).fBoxY + tmLnCtrls(ilBox).fBoxH)) Then
                    Screen.MousePointer = vbHourglass
                    ilSvRowNo = imLnRowNo
                    ilRowNo = ilRow + vbcLines.Value
                                        '12/16/14: Add Hide/Show Hidden Lines
                    If ((X >= 30) And (X <= (tmLnCtrls(VEHINDEX).fBoxX - 15)) And (ilBox = VEHINDEX)) Then
                        'mBuildMapLinePaint
                        mSetLineScroll True, False
                    End If
                    ilRetainMoveRowNo = ilRowNo
                    ilRowNo = mRemapRowNo(ilRowNo)
                    slLineType = mGetLineType(ilRowNo)
                    If imLnTotalType = 2 Then
                        ilFound = True
                        If ilBox = PRICEINDEX Then
                            If (X < tmLnCtrls(ilBox).fBoxX + imResearchTogglePriceLeft) Or (X > (tmLnCtrls(ilBox).fBoxX + imResearchTogglePriceLeft + imResearchTogglePriceWidth)) Then
                                ilFound = False
                            End If
                        End If
                        If ilBox = DPINDEX Then
                            'If tscLine.SelectedItem.Index = 10 Then
                            If tscLine.SelectedItem.Index = imTabMap(TABRESEARCH) Then
                                If (X < tmLnCtrls(ilBox).fBoxX) Or (X > (tmLnCtrls(ilBox).fBoxX + lmResearchTabBNWidth)) Then
                                    ilFound = False
                                End If
                            End If
                        End If
                        If Not ilFound Then
                            Beep
                            'If imDGBoxNo > 0 Then
                            '    mDGSetFocus imDGBoxNo
                            'ElseIf imAirBoxNo > 0 Then
                            '    mAirSetFocus imAirBoxNo
                            'Else
                                mLnSetFocus imLnBoxNo
                            'End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                    'If tscLine.SelectedItem.Index = 10 Then
                    If tscLine.SelectedItem.Index = imTabMap(TABRESEARCH) Then
                        ilFound = True
                        If ((slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E")) Then
                            If (tgClfCntr(ilRowNo - 1).iStatus = -1) And (tgClfCntr(ilRowNo - 1).ClfRec.iLine <= 0) Or (imLnSave(1, ilRowNo) <= 0) Or (Trim$(smLnSave(16, ilRowNo)) = "") Then
                                ilFound = False
                            End If
                        Else
                            If (tgClfCntr(ilRowNo - 1).iStatus = -1) And (tgClfCntr(ilRowNo - 1).ClfRec.iLine <= 0) Or (Trim$(smLnSave(20, ilRowNo)) = "") Or (Trim$(smLnSave(16, ilRowNo)) = "") Then
                                ilFound = False
                            End If
                        End If
                        If ilFound Then
                            If ilBox = LENINDEX Then
                                ilFound = False
                            End If
                            If (ilBox <> DPINDEX) Then
                                If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                                    If imLnSave(1, ilRowNo) <= 0 Then
                                        ilFound = False
                                    End If
                                    If (ilBox <> LENINDEX) And (imLnBoxNo <> LENINDEX) Then
                                        If Trim$(smLnSave(16, ilRowNo)) = "" Then
                                            ilFound = False
                                        End If
                                    End If
                                Else
                                    If Trim$(smLnSave(20, ilRowNo)) = "" Then
                                        ilFound = False
                                    End If
                                End If
                            End If
                        End If
                        If Not ilFound Then
                            Beep
                            'If imDGBoxNo > 0 Then
                            '    mDGSetFocus imDGBoxNo
                            'ElseIf imAirBoxNo > 0 Then
                            '    mAirSetFocus imAirBoxNo
                            'Else
                                mLnSetFocus imLnBoxNo
                            'End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                    
                    '4/4/15: Line still hidden even if feature not enabled
                    'If (slLineType = "A") Or (slLineType = "O") Or (slLineType = "E") Then
                    If (bgHideHiddenLines = True) And ((slLineType = "A") Or (slLineType = "O") Or (slLineType = "E")) Then
                        If ((X >= 30) And (X <= (tmLnCtrls(VEHINDEX).fBoxX - 15)) And (ilBox = VEHINDEX)) Then
                            mAllSetShow 0
                            If tgClfCntr(ilRowNo - 1).bPkExpanded = False Then
                                tgClfCntr(ilRowNo - 1).bPkExpanded = True
                                mResetShowLine ilRowNo, True
                                'mBuildMapLinePaint
                                mSetLineScroll True, False
                                pbcLine_Paint
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            Else
                                tgClfCntr(ilRowNo - 1).bPkExpanded = False
                                mResetShowLine ilRowNo, False
                                'mBuildMapLinePaint
                                mSetLineScroll True, False
                                pbcLine_Paint
                                Screen.MousePointer = vbDefault
                                Exit Sub
                           End If
                        Else
                            If tgClfCntr(ilRowNo - 1).bPkExpanded = False Then
                                Beep
                                'If imDGBoxNo > 0 Then
                                '    mDGSetFocus imDGBoxNo
                                'ElseIf imAirBoxNo > 0 Then
                                '    mAirSetFocus imAirBoxNo
                                'Else
                                    mLnSetFocus imLnBoxNo
                                'End If
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                        End If
                    End If
                    
                    If (X >= 30) And (X <= (tmLnCtrls(VEHINDEX).fBoxX - 15)) Then
                        ilBox = 0
                    End If
                    If tgClfCntr(ilRowNo - 1).iCancel Then
                        If ((sgCntrScreen = "Orders") And (imStep1Index <= 2)) Or ((sgCntrScreen <> "Orders") And (imStep1Index <= 4)) Then
                            If ((ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12)) Then
                                ilChgCancel = True
                            End If
                        End If
                        If Not ilChgCancel Then
                            Beep
                            'If imDGBoxNo > 0 Then
                            '    mDGSetFocus imDGBoxNo
                            'ElseIf imAirBoxNo > 0 Then
                            '    mAirSetFocus imAirBoxNo
                            'Else
                                mLnSetFocus imLnBoxNo
                            'End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        Else
                            tgClfCntr(ilRowNo - 1).iInPast = False
                        End If
                    End If
                    If (tgClfCntr(ilRowNo - 1).iInPast) And (ilBox = VEHINDEX) Then
                        Beep
                        ilBox = 0
                    End If
                    'If (ilBox = OV1INDEX) Or (ilBox = SPOTSINDEX) Then
                    If (ilBox = SPOTSINDEX) Then
                        Beep
                        ilBox = 0
                    End If
                   '10843 remove dead code
'                    If (ilBox = PRICEINDEX) And (imLnTotalType <= 1) And (tgSpf.sCLnStdQt = "Y") Then
'                        Beep
'                        'If imDGBoxNo > 0 Then
'                        '    mDGSetFocus imDGBoxNo
'                        'ElseIf imAirBoxNo > 0 Then
'                        '    mAirSetFocus imAirBoxNo
'                        'Else
'                            mLnSetFocus imLnBoxNo
'                        'End If
'                        Screen.MousePointer = vbDefault
'                        Exit Sub
'                    End If
                    'If (ilBox = PRICEINDEX) And (tgUrf(0).sChgPrices = "V") Then
                    If (ilBox = PRICEINDEX) And (Not mAllowedToChgSpotPrice(ilRowNo)) Then
                        Beep
                        'If imDGBoxNo > 0 Then
                        '    mDGSetFocus imDGBoxNo
                        'ElseIf imAirBoxNo > 0 Then
                        '    mAirSetFocus imAirBoxNo
                        'Else
                            mLnSetFocus imLnBoxNo
                        'End If
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    slLineType = mGetLineType(ilRowNo)

                    If ilBox = OV2INDEX Then
                        If mIsLnGame(ilRowNo) Then
                            If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                                If ((Asc(tgSpf.sOverrideOptions) And SPALLOCATION) <> SPALLOCATION) And (Not mUsingAcqCost()) And ((Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) <> SPSOLOAVAIL) And ((Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) <> SP1STPOSITION) Then
                                    If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
                                        Beep
                                        'If imDGBoxNo > 0 Then
                                        '    mDGSetFocus imDGBoxNo
                                        'ElseIf imAirBoxNo > 0 Then
                                        '    mAirSetFocus imAirBoxNo
                                        'Else
                                            mLnSetFocus imLnBoxNo
                                        'End If
                                        Screen.MousePointer = vbDefault
                                        Exit Sub
                                    End If
                                End If
                            Else
                                If ((Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) <> SPSOLOAVAIL) And ((Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) <> SP1STPOSITION) Then
                                    If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
                                        Beep
                                        'If imDGBoxNo > 0 Then
                                        '    mDGSetFocus imDGBoxNo
                                        'ElseIf imAirBoxNo > 0 Then
                                        '    mAirSetFocus imAirBoxNo
                                        'Else
                                            mLnSetFocus imLnBoxNo
                                        'End If
                                        Screen.MousePointer = vbDefault
                                        Exit Sub
                                    End If
                                End If
                            End If
                        Else
                            If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                                If ((Asc(tgSpf.sOverrideOptions) And SPALLOCATION) <> SPALLOCATION) And (Not mUsingAcqCost()) And ((Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) <> SPSOLOAVAIL) And ((Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) <> SP1STPOSITION) Then
                                    If ((Asc(tgSpf.sOverrideOptions) And SPPREFERREDDT) <> SPPREFERREDDT) And ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
                                        Beep
                                        'If imDGBoxNo > 0 Then
                                        '    mDGSetFocus imDGBoxNo
                                        'ElseIf imAirBoxNo > 0 Then
                                        '    mAirSetFocus imAirBoxNo
                                        'Else
                                            mLnSetFocus imLnBoxNo
                                        'End If
                                        Screen.MousePointer = vbDefault
                                        Exit Sub
                                    End If
                                End If
                            Else
                                If ((Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) <> SPSOLOAVAIL) And ((Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) <> SP1STPOSITION) Then
                                    If ((Asc(tgSpf.sOverrideOptions) And SPPREFERREDDT) <> SPPREFERREDDT) And ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
                                        Beep
                                        'If imDGBoxNo > 0 Then
                                        '    mDGSetFocus imDGBoxNo
                                        'ElseIf imAirBoxNo > 0 Then
                                        '    mAirSetFocus imAirBoxNo
                                        'Else
                                            mLnSetFocus imLnBoxNo
                                        'End If
                                        Screen.MousePointer = vbDefault
                                        Exit Sub
                                    End If
                                End If
                            End If
                        End If
                    End If
                    If (ilBox = PRICEINDEX) And ((slLineType = "O") Or (slLineType = "A")) And (tgSpf.sCAudPkg <> "Y") Then
                        'If (slLineType <> "O") Or (tgSpf.sVirtPkgCompute <> "H") Then
                        If ((slLineType = "O") Or (slLineType = "A")) And (tgSpf.sVirtPkgCompute = "H") Then
                        Else
                            Beep
                            'If imDGBoxNo > 0 Then
                            '    mDGSetFocus imDGBoxNo
                            'ElseIf imAirBoxNo > 0 Then
                            '    mAirSetFocus imAirBoxNo
                            'Else
                                mLnSetFocus imLnBoxNo
                            'End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                    If (ilBox = PRICEINDEX) And (slLineType = "H") Then
                        slStr = mGetPkLineType(ilRowNo)
                        If (slStr = "E") Or (((slStr = "O") Or (slStr = "A")) And (tgSpf.sCAudPkg = "Y")) Then
                            Beep
                            'If imDGBoxNo > 0 Then
                            '    mDGSetFocus imDGBoxNo
                            'ElseIf imAirBoxNo > 0 Then
                            '    mAirSetFocus imAirBoxNo
                            'Else
                                mLnSetFocus imLnBoxNo
                            'End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                    If (ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12) And (slLineType = "A") And (tgSpf.sVirtPkgCompute <> "H") Then
                        'Test if week has no spots- if so allow change
                        llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                        If mGetFlightSpots(ilRowNo, llDate, llPrice) <> 0 Then
                            Beep
                            'If imDGBoxNo > 0 Then
                            '    mDGSetFocus imDGBoxNo
                            'ElseIf imAirBoxNo > 0 Then
                            '    mAirSetFocus imAirBoxNo
                            'Else
                                mLnSetFocus imLnBoxNo
                            'End If
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                    If (ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12) And ((slLineType = "A") Or (slLineType = "O")) Then
                        'Test if week has no spots- if so allow change
                        llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                                                'Disallow if weeks not defined and dynamic created package
                        ilSpots = mGetFlightSpots(ilRowNo, llDate, llPrice)
                        If (ilSpots = 0) Then
                            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                                If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilRowNo - 1).ClfRec.iLine Then
                                End If
                            Next ilLoop
                        End If
                    End If
                    mAllSetShow 2
                    Screen.MousePointer = vbHourglass
                    If (tgClfCntr(ilRowNo - 1).iStatus = -1) And (tgClfCntr(ilRowNo - 1).ClfRec.iLine <= 0) Then
                        ilLineNo = 0
                        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If (tgClfCntr(ilLoop).ClfRec.iLine > ilLineNo) And (tgClfCntr(ilLoop).iStatus >= 0) Then
                                ilLineNo = tgClfCntr(ilLoop).ClfRec.iLine
                            End If
                        Next ilLoop
                        For ilLoop = LBound(tgDelClf) To UBound(tgDelClf) - 1 Step 1
                            If (tgDelClf(ilLoop).ClfRec.iLine > ilLineNo) And (tgDelClf(ilLoop).iStatus >= 0) Then
                                ilLineNo = tgDelClf(ilLoop).ClfRec.iLine
                            End If
                        Next ilLoop
                        tgClfCntr(ilRowNo - 1).ClfRec.iLine = ilLineNo + 1
                        tgClfCntr(ilRowNo - 1).bShowLine = True
                    End If
                    If (imLnRowNo = UBound(tgClfCntr) + 1) And ((imLnBoxNo = VEHINDEX) Or (imLnBoxNo = DPINDEX)) And (ilRowNo <> imLnRowNo) Then
                        mClearLastLine
                    End If
                    If ilBox <> VEHINDEX Then
                        If Trim$(smLnSave(1, ilRowNo)) = "" Then
                            Beep
                            ilBox = VEHINDEX
                        Else
                            If (ilBox <> DPINDEX) Then
                                If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                                    If imLnSave(1, ilRowNo) <= 0 Then
                                        Beep
                                        ilBox = DPINDEX
                                    End If
                                    If (ilBox <> LENINDEX) And (imLnBoxNo <> LENINDEX) Then
                                        If Trim$(smLnSave(16, ilRowNo)) = "" Then
                                            Beep
                                            ilBox = LENINDEX
                                        End If
                                    End If
                                Else
                                    If Trim$(smLnSave(20, ilRowNo)) = "" Then
                                        Beep
                                        ilBox = DPINDEX
                                    End If
                                End If
                            End If
                        End If
                    End If
                    If ((Not imUpdateAllowed) Or (igRepNetChgAllowed)) And (imLnRowNo = UBound(tgClfCntr) + 1) Then
                        Beep
                        If plcDemoBar.Visible Then
                            mSetArrowFrame
                        Else
                            pbcClickFocus.SetFocus
                        End If
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    imBypassResetDemoBar = False
                    If ilRowNo <> imLnRowNo Then
                        imBypassResetDemoBar = True
                    End If
                    'If imUpdateAllowed Then
                        mLnSetShow imLnBoxNo    'This call must be before mPrgPop
                    'End If
                    
                    If ilRowNo <> imLnRowNo Then
                        'If tgUrf(0).sUseComputeCMC <> "I" Then
                            '12/9/15: add update allowed test
                            'If imLnRowNo > 0 Then
                            If (imLnRowNo > 0) And (imUpdateAllowed) Then
                                mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()             'Set associated package lines values
                                mGetLnPriceInfo imLnRowNo, slStr, imLnTotalType, PRICEINDEX       'Formats Price within Show
                            End If
                        'End If
                    End If
                    'If (imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12) Then
                    'If ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) Or (imLnBoxNo = PRICEINDEX) Then
                        If plcDemoBar.Visible Then
                            mDBSetShow imDB0BoxNo
                            imDB0BoxNo = -1
                            mDBSetShow imDBBoxNo
                            imDBBoxNo = -1
                            imDBRowNo = -1
                        End If
                        'If (ilBox < WKSPOTSINDEX) Or (ilBox > WKSPOTSINDEX + 12) Or (ilRowNo <> imLnRowNo) Then
                        '    mSetTotalsFrmWks
                        'End If
                    'End If
                    imBypassResetDemoBar = False
                    ''12/11/19: bypass call as when click in Book Name (daypart) column, the pop is called
                    'If tscLine.SelectedItem.Index <> 10 Then
                    If tscLine.SelectedItem.Index <> imTabMap(TABRESEARCH) Then
                        mPrgPop ilRowNo, "L"
                        If imTerminate Then
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                    End If
                    'If ilRowNo <> imLnRowNo Then
                    'If user clicks from one line to another, then the array imOvDays is not set without the line number test
                    If (imLnSave(12, ilRowNo) = -1) Or (ilRowNo <> imLnRowNo) Then
                        mGetFlightDays ilRowNo, imOvDays()
                    End If
                    'End If
                    If ilBox > DPINDEX Then
                        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                            'If tscLine.SelectedItem.Index <> 10 Then
                            If tscLine.SelectedItem.Index <> imTabMap(TABRESEARCH) Then
                                ilFound = False
                                For ilLoop = 0 To lbcPrg(igTabMapIndex).ListCount - 1 Step 1
                                    If imLnSave(1, ilRowNo) = lbcPrg(igTabMapIndex).ItemData(ilLoop) Then
                                        ilFound = True
                                        Exit For
                                    End If
                                Next ilLoop
                                If Not ilFound Then
                                    Beep
                                    ilBox = DPINDEX
                                End If
                            Else
                                If imLnSave(1, ilRowNo) <= 0 Then
                                    Beep
                                    'If imDGBoxNo > 0 Then
                                    '    mDGSetFocus imDGBoxNo
                                    'ElseIf imAirBoxNo > 0 Then
                                    '    mAirSetFocus imAirBoxNo
                                    'Else
                                        mLnSetFocus imLnBoxNo
                                    'End If
                                    Screen.MousePointer = vbDefault
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                    If (ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12) Then
                        'Test if valid week to mouse into
                        ilFound = False
                        If smLnSave(14, ilRowNo) <> "" Then
                            'llAllowedChgWkStartDate = mLnDate(ilRowNo, smLnLLD, False)
                            llAllowedChgWkStartDate = mLnDate(ilRowNo, smLnLLD, 1)
                            If llAllowedChgWkStartDate < tgClfCntr(ilRowNo - 1).lEndBilledDate Then
                                llAllowedChgWkStartDate = tgClfCntr(ilRowNo - 1).lEndBilledDate
                            End If
                            llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                            If (llAllowedChgWkStartDate > llDate) And (tgClfCntr(ilRowNo - 1).iStatus > 0) And ((tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "F") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "I") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "A") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "N") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "M")) Then
                                Beep
                                If plcDemoBar.Visible Then
                                    mSetArrowFrame
                                Else
                                    imLnRowNo = ilRowNo
                                    imMoveLnRowNo = ilRetainMoveRowNo
                                    'mCntrTotal
                                    If (imMoveLnRowNo >= vbcLines.Value + 1) And (imMoveLnRowNo < vbcLines.Value + vbcLines.LargeChange + 2) Then
                                        laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
                                        'lacLnFrame.Visible = True
                                        pbcLineArrow.Move pbcLineArrow.Left, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
                                        pbcLineArrow.Visible = True
                                        imLnBoxNo = 0
                                        pbcLineArrow.SetFocus
                                    Else
                                        pbcClickFocus.SetFocus
                                    End If
                                End If
                                mSetCommands    'Enable Flight Button
                                Screen.MousePointer = vbDefault
                                Exit Sub
                            End If
                        Else
                            If tgClfCntr(ilRowNo - 1).iFirstCff < 0 Then
                                If lmHSStartDate > 0 Then
                                    llDate = gDateValue(gObtainPrevMonday(Format$(lmHSStartDate, "m/d/yy"))) + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                                Else
                                    llDate = gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy"))) + 7 * (ilBox - WKSPOTSINDEX)
                                End If
                            Else
                                llDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
                            End If
                            Screen.MousePointer = vbHourglass
                            imSvLnRowNo = -1
                            imLnRowNo = ilRowNo
                            'mCreateExtraLnWeek llDate
                            Screen.MousePointer = vbHourglass
                        End If
                        imLnRowNo = ilRowNo
                    End If
                    
                    imLnRowNo = ilRowNo
                    
                    '12/16/14: Add Hide/Show Hidden Lines
                    If bgHideHiddenLines Then
                        imMoveLnRowNo = ilRetainMoveRowNo
                    Else
                        imMoveLnRowNo = ilRowNo
                    End If
                    
                    'If mouse to vehicle- then paint dates
                    If (UBound(tgClfCntr) = LBound(tgClfCntr)) And (Trim$(smLnSave(1, ilRowNo)) = "") Then
                        mSetHdDate False, False
                        pbcLine_Paint
                    End If
                    mCntrTotal  'Placed back into service 7/15/97
                    If plcDemoBar.Visible Then
                        If ilSvRowNo <> imLnRowNo Then
                            imComputeReq = True
                            If imDBTotals < 5 Then
                                mSetDemoBarBooks imLnRowNo, ilFound, imCppCpm, 2, imCntrVefCode, imVpfIndex, imTerminate, imChgMode 'Using ilfound for ilDnfCode (mBuildWkInfo sets tgClf to DnfCode)
                                mGetResearchTotals imLnRowNo, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), imDBTotals, False, imCppCpm, imCntrVefCode, imVpfIndex, imTerminate, imChgMode, imInResearch, imLnTotalType
                                mBuildWkInfo True, True, False
                                pbcDemoBar(0).Cls
                                pbcDemoBar(1).Cls
                                pbcDemoBar_Paint 0
                                pbcDemoBar_Paint 1
                            Else
                                mBuildWkInfo True, True, False
                                pbcDemoBar(1).Cls
                                pbcDemoBar(2).Cls
                                pbcDemoBar(3).Cls
                                mSummary
                                pbcDemoBar_Paint 1
                                If imDBTotals = 5 Then
                                    pbcDemoBar_Paint 2
                                Else
                                    pbcDemoBar_Paint 3
                                End If
                            End If
                        End If
                    End If
                    If ilSvRowNo <> imLnRowNo Then
                        'mSetPriDemoResearch hmDrf, hmMnf, imStep1Index
                        If (sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH) Then
                            lacAudTotals.Visible = False
                        Else
                            If (tgSpf.sGUsePropSys = "Y") Then
                                lacAudTotals.Visible = True
                            Else
                                lacAudTotals.Visible = False
                            End If
                        End If
                    End If
                    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
                    imFirstTimeStep = False
                    '4/13/20: Add Shift click and duplicate spots horizontally
                    If Shift = 1 And (ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12) And (lmLastWkDateAdded + 7 >= llAllowedChgWkStartDate) And (imLastLnDateAdded = tgClfCntr(imLnRowNo - 1).ClfRec.iLine) Then
                        blShiftAllowed = True
                        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                            ilVef = gBinarySearchVef(imCntrVefCode)
                            If ilVef = -1 Then
                                blShiftAllowed = False
                            Else
                                If tgMVef(ilVef).sType = "G" Then
                                    blShiftAllowed = False
                                End If
                            End If
                        End If
                        If blShiftAllowed = True Then
                            llNewDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                            ilCff = tgClfCntr(imLnRowNo - 1).iFirstCff
                            Do While ilCff <> -1
                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                    If tgCffCntr(ilCff).lStartDate <= lmLastWkDateAdded And tgCffCntr(ilCff).lEndDate >= lmLastWkDateAdded Then
                                        
                                        ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk
                                        For ilCffDay = 0 To 6 Step 1
                                            ilDays(ilCffDay) = tgCffCntr(ilCff).CffRec.iDay(ilCffDay)
                                        Next ilCffDay
                                        For llDate = lmLastWkDateAdded + 7 To llNewDate Step 7
                                            '4/16/20: Handle packages
                                            ilRet = mAddStdPkgWk(hmPvf, imLnRowNo, llDate, tgCffCntr(ilCff).CffRec.sDyWk, CLng(ilSpots), ilDays(), imLastCffUsed, tmRcf, imDGSave(), imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), hmCHF, hmClf, hmSdf, hmSmf, hmGhf, hmGsf)
                                            mAddWeek imLastCffUsed, imLnRowNo, llDate, tgCffCntr(ilCff).CffRec.sDyWk, CLng(ilSpots), ilDays()
                                            slStr = Contract.lbcPriceType(0).List(1)
                                            If (sgCntrScreen <> "Orders") Or ((sgCntrScreen = "Orders") And (tgCffCntr(ilCff).CffRec.sPriceType <> "*")) Then
                                                'Set Rate Pard price, then set actual price from week copied
                                                mSetFlightPriceForWk imLnRowNo, llDate, slStr, imOvDays(), tmRcf, imCntrVefCode, imDGSave(), imLnTotalType
                                            End If
                                            ilAddCff = tgClfCntr(imLnRowNo - 1).iFirstCff
                                            Do While ilAddCff <> -1
                                                If (tgCffCntr(ilAddCff).iStatus = 0) Or (tgCffCntr(ilAddCff).iStatus = 1) Then
                                                    If tgCffCntr(ilAddCff).lStartDate = llDate Then
                                                        tgCffCntr(ilAddCff).CffRec.sPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                                                        tgCffCntr(ilAddCff).CffRec.lActPrice = tgCffCntr(ilCff).CffRec.lActPrice
                                                        Exit Do
                                                    End If
                                                End If
                                                ilAddCff = tgCffCntr(ilAddCff).iNextCff
                                            Loop
                                        Next llDate
                                        lmWkSpots = 0
                                        Contract.edcLNDropDown.Text = ilSpots
                                        mLnSetShow ilBox
                                        Exit Do
                                    End If
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                        End If
                    End If
                    imLnBoxNo = ilBox
                    lmLastWkDateAdded = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                    imLastLnDateAdded = tgClfCntr(imLnRowNo - 1).ClfRec.iLine

                    mLnEnableBox ilBox
                    'If Not imUpdateAllowed Then
                        mSetCommands    'Required to get flight button on and Demo Bar button
                    'End If
                    If ilBox = 0 Then
                        mSetArrowFrame
                        If pbcLineArrow.Visible Then
                            pbcLineArrow.SetFocus
                        End If
                    End If
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
            End If
        Next ilBox
    Next ilRow
    Screen.MousePointer = vbDefault
    'If imDGBoxNo > 0 Then
    '    mDGSetFocus imDGBoxNo
    'ElseIf imAirBoxNo > 0 Then
    '    mAirSetFocus imAirBoxNo
    'Else
        mLnSetFocus imLnBoxNo
    'End If
End Sub

Public Sub pbcLine_Paint()
    Dim ilBox As Integer
    Dim ilRow As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilPStartRow As Integer
    Dim ilPEndRow As Integer
    Dim llColor As Long
    Dim ilDate As Integer
    Dim llDate As Long
    Dim ilMonth As Integer
    Dim ilYear As Integer
    Dim slPrevMonth As String
    Dim slFontName As String
    Dim flFontSize As Single
    Dim slDate As String
    Dim slYear As String
    Dim slDay As String
    Dim slMonth As String
    Dim slTDate As String
    Dim slTYear As String
    Dim slTDay As String
    Dim slTMonth As String
    'Dim ilSpotCount As Integer
    Dim llSpotCount As Long
    Dim slStr As String
    Dim slLineType As String
    Dim llHSStartDate As Long
    Dim ilHSCurWkNo As Integer
    Dim ilHSEndWkNo As Integer
    Dim llSpotPrice As Long
    Dim ilCff As Integer
    Dim ilStartCff As Integer
    'Dim llFlStartDate As Long
    'Dim llFlEndDate As Long
    Dim llSDate As Long
    Dim llEDate As Long
    Dim ilMonthCount As Integer
    '12/16/14: Add Hide/Show Hidden Lines
    Dim ilPaintRowNo As Integer
    Dim ilAdjX As Integer
    Dim ilPRow As Integer
    Dim ilPrevRowNo As Integer
    Dim ilVef As Integer
    Dim llNext As Long
    Dim ilWeekIndex As Integer
    Dim ilVpf As Integer
    Dim slLength As String
    Dim llCompTime As Long
    Dim llTop As Long
    Dim ilFillStyle As Integer
    Dim llFillColor As Long
    Dim tlCtrlArray As FIELDAREA
    Dim ilDnf As Integer
    Dim llBNColor As Long
    Dim blResetAvails As Boolean
    Dim slVefType As String
    Dim ilVpfIndex As Integer
    Dim slMedium As String
    
    If imBypassLnPaint Then
        Exit Sub
    End If
    If imExpandingPkg Then
        Exit Sub
    End If
    
    If bmInAvailTab Then
        Exit Sub
    End If
    
    If (imPaintLnRowNo <> -1) Then
        mPaintLnTitle
    End If
    llColor = pbcLine.ForeColor
    llHSStartDate = lmHSStartDate
    ilHSCurWkNo = imHSCurWkNo
    ilHSEndWkNo = imHSEndWkNo
    slFontName = pbcLine.FontName
    flFontSize = pbcLine.FontSize
    ilFillStyle = pbcLine.FillStyle
    llFillColor = pbcLine.FillColor
    If (imPaintLnRowNo = -1) Then
        If (imCurrHightLightLnRowNo = -1) Then
            If (igFreezeState <> 1) Then
                pbcLine.Cls
            End If
            mPaintLnTitle
        End If
        If (llHSStartDate > 0) And (ilHSCurWkNo > 0) Then
            pbcLine.ForeColor = BLUE
            pbcLine.FontBold = False
            pbcLine.FontSize = 7
            pbcLine.FontName = "Arial"
            pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
            slPrevMonth = "x"
            For ilDate = 0 To 12 Step 1
                If ilHSCurWkNo + ilDate > ilHSEndWkNo Then
                    Exit For
                End If
                If ilDate = 0 Then
                    llDate = llHSStartDate + 7 * (ilHSCurWkNo - 1)
                End If
                slDate = Format(llDate, "m/d/yy")
                gObtainYearMonthDayStr slDate, False, slYear, slMonth, slDay
                slMonth = gMonthName(slDate)
                'If tgSpf.sCLnStdQt = "Y" Then
                    'Determine start of Quarter
                    gObtainMonthYear 0, slDate, ilMonth, ilYear
                    If ilMonth <= 3 Then
                        pbcLine.ForeColor = BLUE
                    ElseIf ilMonth <= 6 Then
                        pbcLine.ForeColor = MAGENTA
                    ElseIf ilMonth <= 9 Then
                        pbcLine.ForeColor = DARKGREEN
                    Else
                        pbcLine.ForeColor = Red
                    End If
                'End If
                If slMonth <> slPrevMonth Then
                    pbcLine.CurrentX = tmLnCtrls(WKSPOTSINDEX + ilDate).fBoxX + 15 'fgBoxInsetX
                    pbcLine.CurrentY = 15  '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                    If ilDate <= 0 Then
                        'Later- check if next month is different- if not show year
                        slTDate = Format(llDate + 7, "m/d/yy")
                        gObtainYearMonthDayStr slTDate, False, slTYear, slTMonth, slTDay
                        slTMonth = gMonthName(slTDate)
                        If slMonth <> slTMonth Then
                            pbcLine.Print Left$(slMonth, 2)     '3)
                        Else
                            pbcLine.Print Left$(slMonth, 3) & right$(slYear, 2)
                        End If
                    ElseIf ilDate <= 11 Then
                        pbcLine.Print Left$(slMonth, 3) & right$(slYear, 2)
                    Else
                        pbcLine.Print Left$(slMonth, 2)     '3)
                    End If
                    slPrevMonth = slMonth
                End If
                pbcLine.CurrentX = tmLnCtrls(WKSPOTSINDEX + ilDate).fBoxX + 15 'fgBoxInsetX
                pbcLine.CurrentY = fgBoxGridH \ 2 + 90 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcLine.Print slDay
                llDate = llDate + 7
            Next ilDate
            pbcLine.FontSize = flFontSize
            pbcLine.FontName = slFontName
            pbcLine.FontSize = flFontSize
            pbcLine.ForeColor = llColor
            pbcLine.FontBold = True
        End If
    End If
    ilStartRow = vbcLines.Value + 1  'Top location
    ilEndRow = vbcLines.Value + vbcLines.LargeChange + 1
    If ilEndRow > UBound(tgClfCntr) + 1 Then
        ilEndRow = UBound(tgClfCntr) + 1 'include blank row as it might have data
    End If
    ilPStartRow = ilStartRow
    ilPEndRow = ilEndRow
    pbcLine.ForeColor = BLUE
    pbcLine.FontBold = False
    pbcLine.FontSize = 7
    pbcLine.FontName = "Arial"
    pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    '12/16/14: Add Hide/Show Hidden Lines
    ilPaintRowNo = ilPStartRow
    ilPrevRowNo = -1
    For ilPRow = ilPStartRow To ilPEndRow Step 1
        '12/16/14: Add Hide/Show Hidden Lines
        'If tgClfCntr(ilRow - 1).ClfRec.iLine > 0 Then
        ilRow = mRemapRowNo(ilPRow)
        '12/8/15
        If (ilRow = ilPrevRowNo) Then
            Exit For
        End If
        'If (ilRow <> ilPrevRowNo) And (tgClfCntr(ilRow - 1).ClfRec.iLine > 0) And (tgClfCntr(ilRow - 1).bShowLine) Then
        If (tgClfCntr(ilRow - 1).ClfRec.iLine > 0) And (tgClfCntr(ilRow - 1).bShowLine) Then
            ilPrevRowNo = ilRow
            '12/16/16
            ilAdjX = 0
            
            slStr = Trim$(str$(tgClfCntr(ilRow - 1).ClfRec.iLine))
            slLineType = mGetLineType(ilRow)
            If (slLineType = "H") Or (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                '12/16/14: Add Hide/Show Hidden Lines
                If ((slLineType = "O") Or (slLineType = "A") Or (slLineType = "E")) And (bgHideHiddenLines) Then
                    pbcLine.FontBold = False
                    pbcLine.FontSize = 7
                    pbcLine.FontName = "Monotype Sorts"
                    pbcLine.CurrentX = fgBoxInsetX
                    pbcLine.CurrentY = tmLnCtrls(VEHINDEX).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15)
                    If tgClfCntr(ilRow - 1).bPkExpanded Then
                        pbcLine.Print "s"
                    Else
                        pbcLine.Print "t"
                    End If
                    ilAdjX = 105
                    pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                    pbcLine.FontBold = False
                    pbcLine.FontSize = 7
                    pbcLine.FontName = "Arial"
                    pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                End If
                pbcLine.ForeColor = BLUE
            Else
                pbcLine.ForeColor = BLACK
            End If
            On Error GoTo mPaintErr
            If imLnSave(6, ilRow) = 0 Then
                'Show High Priority with line number in Mageneta changed 11/20/02- Jim (it was DarkGreen)
                pbcLine.ForeColor = MAGENTA 'DARKGREEN
            End If
            On Error GoTo 0
            pbcLine.CurrentX = fgBoxInsetX + ilAdjX
            '12/16/14: Add Hide/Show Hidden Lines
            'pbcLine.CurrentY = tmLnCtrls(VEHINDEX).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
            pbcLine.CurrentY = tmLnCtrls(VEHINDEX).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
            slMedium = ""
            ilVpfIndex = gBinarySearchVpf(tgClfCntr(ilRow - 1).ClfRec.iVefCode)
            If ilVpfIndex <> -1 Then
                slMedium = tgVpf(ilVpfIndex).sGMedium
            End If
            If slMedium = "P" Then
                pbcLine.FontItalic = True
            Else
                pbcLine.FontItalic = False
            End If
            pbcLine.Print slStr
            ilPaintRowNo = ilPaintRowNo + 1
        End If
    Next ilPRow
    pbcLine.FontItalic = False
    pbcLine.FontSize = flFontSize
    pbcLine.FontName = slFontName
    pbcLine.FontSize = flFontSize
    pbcLine.ForeColor = llColor
    pbcLine.FontBold = True
    ilPaintRowNo = ilPStartRow
    ilPrevRowNo = -1
    For ilPRow = ilPStartRow To ilPEndRow Step 1
        '12/16/14: Add Hide/Show Hidden Lines
        'If tgClfCntr(ilRow - 1).ClfRec.iLine > 0 Then
        ilRow = mRemapRowNo(ilPRow)
        '12/8/15
        If (ilRow = ilPrevRowNo) Then
            Exit For
        End If
        'If (ilRow <> ilPrevRowNo) And (tgClfCntr(ilRow - 1).ClfRec.iLine > 0) And (tgClfCntr(ilRow - 1).bShowLine) Then
        If ((tgClfCntr(ilRow - 1).ClfRec.iLine > 0) And (tgClfCntr(ilRow - 1).bShowLine) And (imCurrHightLightLnRowNo = -1)) Or ((ilRow = imCurrHightLightLnRowNo) Or ((ilRow = imPrevHightLightLnRowNo) And (imPrevHightLightLnRowNo <> -1))) Then
            
            imResearchTogglePriceLeft = tmLnCtrls(PRICEINDEX).fBoxW / 2
            imResearchTogglePriceWidth = tmLnCtrls(PRICEINDEX).fBoxW / 2
            ilPrevRowNo = ilRow
            slLineType = mGetLineType(ilRow, False, True)
            slVefType = ""
            ilVef = gBinarySearchVef(tgClfCntr(ilRow - 1).ClfRec.iVefCode)
            If ilVef <> -1 Then
                slVefType = Trim$(tgMVef(ilVef).sType)
            End If
            ilCff = tgClfCntr(ilRow - 1).iFirstCff
            For ilBox = imLBCTCtrls To UBound(tmLnCtrls) Step 1
                pbcLine.FontItalic = False
                'If (ilBox <> DPINDEX) Or ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index <> 10)) Then
                    If (ilRow <> imLnRowNo) Or (imCurrHightLightLnRowNo = -1) Then
                        llBNColor = WHITE
                        'If (ilBox = PRICEINDEX) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        If (ilBox = PRICEINDEX) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                            gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX + imResearchTogglePriceLeft + 15, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), imResearchTogglePriceWidth - 30, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                        'ElseIf (ilBox = DPINDEX) And (tscLine.SelectedItem.Index = 10) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        ElseIf (ilBox = DPINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH)) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                            gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabBNWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                        Else
                            gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                        End If
                    Else
                        llBNColor = GRAY
                        'If (ilBox = PRICEINDEX) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        If (ilBox = PRICEINDEX) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                            gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX + imResearchTogglePriceLeft + 15, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), imResearchTogglePriceWidth - 30, tmLnCtrls(ilBox).fBoxH - 15, GRAY
                        'ElseIf (ilBox = DPINDEX) And (tscLine.SelectedItem.Index = 10) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        ElseIf (ilBox = DPINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH)) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                            gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabBNWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, GRAY
                        Else
                            gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 15, GRAY
                        End If
                    End If
                'Else
                '    If (ilRow <> imLnRowNo) Or (imCurrHightLightLnRowNo = -1) Then
                '        gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabBNWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                '    Else
                '        gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabBNWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, GRAY
                '    End If
                '    gPaintArea pbcLine, lmResearchTabPOPLeft, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabPOPWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, LIGHTYELLOW
                'End If
                If ilBox = DPINDEX Then
                    ''12/16/14: Add Hide/Show Hidden Lines
                    ''gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                    '11/21/15
                    'gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                ''Else
                ''    gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 15, WHITE
                End If
                pbcLine.FontStrikethru = False
                If (slLineType = "H") Or (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                    If (slLineType = "H") Then
                        pbcLine.ForeColor = MIDDLEBLUE       'DARKYELLOW
                    Else
                        pbcLine.ForeColor = BLUE
                    End If
                Else
                    pbcLine.ForeColor = BLACK
                End If
                If ilRow = UBound(tgClfCntr) + 1 Then
                    pbcLine.ForeColor = DARKPURPLE  'CYAN
                End If
                '5/28/19
                pbcLine.FontItalic = False
                If (ilBox = VEHINDEX) Then
                    ilVef = gBinarySearchDormantVef(tgClfCntr(ilRow - 1).ClfRec.iVefCode)
                    If ilVef <> -1 Then
                        pbcLine.ForeColor = vbRed
                        
                    End If
                    slMedium = ""
                    ilVpfIndex = gBinarySearchVpf(tgClfCntr(ilRow - 1).ClfRec.iVefCode)
                    If ilVpfIndex <> -1 Then
                        slMedium = tgVpf(ilVpfIndex).sGMedium
                    End If
                    If slMedium = "P" Then
                        pbcLine.FontItalic = True
                    End If
                End If
                
                If tgClfCntr(ilRow - 1).iCancel Then
                    If (ilBox = VEHINDEX) Or (ilBox = DPINDEX) Then
                        pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX
                        '12/16/14: Add Hide/Show Hidden Lines
                        'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        If (slLineType = "H") And (ilBox = VEHINDEX) Then
                            slStr = "MM" & smLnShow(ilBox, ilRow)
                            gSetShow pbcLine, slStr, tmLnCtrls(ilBox)
                            slStr = right(tmLnCtrls(ilBox).sShow, Len(tmLnCtrls(ilBox).sShow) - 2)
                            pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX + pbcLine.TextWidth("MM")
                            pbcLine.Print slStr
                        Else
                            pbcLine.Print smLnShow(ilBox, ilRow)
                        End If
                        pbcLine.FontItalic = False
                    ElseIf (ilBox = OV1INDEX) Or (ilBox = OV2INDEX) Or (ilBox = SPOTSINDEX) Or (ilBox = PRICEINDEX) Then
                    ElseIf (ilBox = LENINDEX) Then
                        If (imLnRowNo = ilRow) And ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) Then
                        Else
                        End If
                    ElseIf ilBox = UBound(tmLnCtrls) Then
                        pbcLine.CurrentX = tmLnCtrls(WKSPOTSINDEX).fBoxX + fgBoxInsetX
                        '12/16/14: Add Hide/Show Hidden Lines
                        'pbcLine.CurrentY = tmLnCtrls(WKSPOTSINDEX).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLine.CurrentY = tmLnCtrls(WKSPOTSINDEX).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        If (imLnRowNo = ilRow) And ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) And (tgClfCntr(ilRow - 1).iOrigAnySpots <> -1) Then
                        Else
                            If tgClfCntr(ilRow - 1).ClfRec.sHideCBS <> "Y" Then
                                pbcLine.Print "Canceled before Start"
                            Else
                                pbcLine.Print "Deleted"
                            End If
                        End If
                    End If
                    'If ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index = 10)) Then
                    If ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        llTop = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15)
                        pbcLine.Line (tmLnCtrls(ilBox).fBoxX - 15, llTop - 15)-Step(lmResearchTabBNWidth, tmLnCtrls(ilBox).fBoxH + 15), BLUE, B
                        gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabBNWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, llBNColor
                        pbcLine.FillStyle = 0 'Solid
                        pbcLine.FillColor = LIGHTYELLOW
                        pbcLine.Line (lmResearchTabPOPLeft, llTop - 15)-Step(lmResearchTabPOPWidth + 15, tmLnCtrls(ilBox).fBoxH + 15), BLUE, B
                        pbcLine.FillStyle = ilFillStyle
                        pbcLine.FillColor = llFillColor
                    End If
                    'If ((ilBox = LENINDEX) And (tscLine.SelectedItem.Index = 10)) Then
                    If ((ilBox = LENINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        pbcLine.FillStyle = 0 'Solid
                        pbcLine.FillColor = LIGHTYELLOW
                        pbcLine.Line (tmLnCtrls(ilBox).fBoxX - 15, llTop - 15)-Step(tmLnCtrls(ilBox).fBoxW + 15, tmLnCtrls(ilBox).fBoxH + 15), BLUE, B
                        pbcLine.FillStyle = ilFillStyle
                        pbcLine.FillColor = llFillColor
                    End If
                    'If (ilBox = SPOTSINDEX) And ((tscLine.SelectedItem.Index = 4) Or (tscLine.SelectedItem.Index >= 8)) Then
                    If (ilBox = SPOTSINDEX) And ((tscLine.SelectedItem.Index = imTabMap(TABAIRTIME)) Or (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) + 15, tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 30, LIGHTYELLOW
                    End If
                Else
                    If (ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12) Then
                        If lmHSStartDate > 0 Then
                            llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                            llSpotCount = mGetFlightSpots(ilRow, llDate, llSpotPrice)
                        Else
                            llSpotCount = 0
                        End If
                        If ilCff = -1 Then
                            ilCff = ilStartCff
                        End If
                        If llSpotCount <> 0 Then
                            slStr = Trim$(str$(llSpotCount))
                        Else
                            slStr = ""
                        End If
                        If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                        End If
                        gSetShow pbcLine, slStr, tmLnCtrls(ilBox)
                        If slStr <> tmLnCtrls(ilBox).sShow Then
                            slFontName = pbcLine.FontName
                            flFontSize = pbcLine.FontSize
                            pbcLine.ForeColor = BLACK
                            pbcLine.FontBold = False
                            pbcLine.FontSize = 7
                            pbcLine.FontName = "Arial"
                            pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                            gSetShow pbcLine, slStr, tmLnCtrls(ilBox)
                        End If
                    End If
                    'If ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index = 10)) Then
                    If ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        llTop = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15)
                        pbcLine.Line (tmLnCtrls(ilBox).fBoxX - 15, llTop - 15)-Step(lmResearchTabBNWidth, tmLnCtrls(ilBox).fBoxH + 15), BLUE, B
                        gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15), lmResearchTabBNWidth - 15, tmLnCtrls(ilBox).fBoxH - 15, llBNColor
                        pbcLine.FillStyle = 0 'Solid
                        pbcLine.FillColor = LIGHTYELLOW
                        pbcLine.Line (lmResearchTabPOPLeft, llTop - 15)-Step(lmResearchTabPOPWidth + 15, tmLnCtrls(ilBox).fBoxH + 15), BLUE, B
                        pbcLine.FillStyle = ilFillStyle
                        pbcLine.FillColor = llFillColor
                    End If
                    'If ((ilBox = LENINDEX) And (tscLine.SelectedItem.Index = 10)) Then
                    If ((ilBox = LENINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        pbcLine.FillStyle = 0 'Solid
                        pbcLine.FillColor = LIGHTYELLOW
                        pbcLine.Line (tmLnCtrls(ilBox).fBoxX - 15, llTop - 15)-Step(tmLnCtrls(ilBox).fBoxW + 15, tmLnCtrls(ilBox).fBoxH + 15), BLUE, B
                        pbcLine.FillStyle = ilFillStyle
                        pbcLine.FillColor = llFillColor
                    End If
                    If ilBox = SPOTSINDEX Then
                        llSpotCount = 0
                        On Error GoTo mPaintErr
                        llSpotCount = Val(smLnSave(23, ilRow))
                        On Error GoTo 0
                        'If (tgClfCntr(ilRow - 1).iSPChg) And (tgUrf(0).sUseComputeCMC = "I") Then
                        '    slStr = ""
                        'Else
                            If (imLnTotalType > 1) And (lmHSStartDate > 0) Then
                                llSDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
                                slDate = Format(llSDate, "m/d/yy")
                                gObtainMonthYear 0, slDate, ilMonth, ilYear
                                llEDate = llSDate + 7 * 12 - 1
                                ilMonth = (ilMonth - 1) \ 3 + 1
                                ilMonthCount = ilMonth
                                Do While ilMonthCount = ilMonth
                                    llEDate = llEDate + 7
                                    slDate = Format(llEDate, "m/d/yy")
                                    gObtainMonthYear 0, slDate, ilMonth, ilYear
                                    ilMonth = (ilMonth - 1) \ 3 + 1
                                Loop
                                llEDate = llEDate - 7
                                llSpotCount = 0
                                For llDate = llSDate To llEDate Step 7
                                    llSpotCount = llSpotCount + mGetFlightSpots(ilRow, llDate, llSpotPrice)
                                Next llDate
                            End If
                            If llSpotCount > 0 Then
                                slStr = Trim$(str$(llSpotCount))
                            ElseIf llSpotCount = 0 Then
                                If (Not imDiffMode) Or ((imDiffMode) And (tgClfCntr(ilRow - 1).iStatus >= 0)) Then
                                    If Trim$(smLnShow(VEHINDEX, ilRow)) <> "" Then
                                        slStr = Trim$(str$(llSpotCount))
                                    Else
                                        slStr = ""
                                    End If
                                Else
                                    slStr = ""
                                End If
                            Else
                                If (imDiffMode) And (tgClfCntr(ilRow - 1).iStatus >= 0) Then
                                    slStr = Trim$(str$(llSpotCount))
                                Else
                                    slStr = ""
                                End If
                            End If
                        'End If
                        gSetShow pbcLine, slStr, tmLnCtrls(ilBox)
                        If slStr <> tmLnCtrls(ilBox).sShow Then
                            slFontName = pbcLine.FontName
                            flFontSize = pbcLine.FontSize
                            pbcLine.ForeColor = BLACK
                            pbcLine.FontBold = False
                            pbcLine.FontSize = 7
                            pbcLine.FontName = "Arial"
                            pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                            gSetShow pbcLine, slStr, tmLnCtrls(ilBox)
                        End If
                        '12/16/14: Add Hide/Show Hidden Lines
                        'gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) + 15, tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 30, LIGHTYELLOW
                        gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) + 15, tmLnCtrls(ilBox).fBoxW - 15, tmLnCtrls(ilBox).fBoxH - 30, LIGHTYELLOW
                    End If
                    pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX
                    If ilBox = PRICEINDEX Then
                        'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                            '
                            'gPaintArea pbcLine, tmLnCtrls(ilBox).fBoxX, tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) + 15, tmLnCtrls(ilBox).fBoxW / 2 - 30, tmLnCtrls(ilBox).fBoxH - 30, LIGHTYELLOW
                            If (tgClfCntr(ilRow - 1).iFirstCff <> -1) Then
                                'pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX
                                pbcLine.CurrentX = tmLnCtrls(SPOTSINDEX).fBoxX + fgBoxInsetX
                                pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                If imCppCpm = 2 Then
                                    'grp and cpp
                                    slStr = ""
                                    If tgClfCntr(ilRow - 1).lGRP > 0 Then
                                        slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lGRP, 1)
                                    End If
                                    pbcLine.Print slStr
                                    'pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX + tmLnCtrls(ilBox).fBoxW / 2
                                    pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX
                                    pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                    slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lCPP, 0)
                                    pbcLine.Print slStr
                                Else
                                    'gross impression and cpm
                                    If tgSpf.sSAudData = "H" Then
                                        slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lGrImp, 1)
                                    ElseIf tgSpf.sSAudData = "N" Then
                                        slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lGrImp, 2)
                                    ElseIf tgSpf.sSAudData = "U" Then
                                        slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lGrImp, 3)
                                    Else
                                        slStr = Trim$(str$(tgClfCntr(ilRow - 1).lGrImp))
                                    End If
                                    pbcLine.Print slStr
                                    'pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX + tmLnCtrls(ilBox).fBoxW / 2
                                    pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX
                                    pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                    slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lCPM, 2)
                                    pbcLine.Print slStr
                                End If
                            End If
                        'Else
                        End If
                            pbcLine.CurrentX = gRightJustifyShowStr(pbcLine, smLnShow(ilBox, ilRow), tmLnCtrls(ilBox))
                            '12/16/14: Add Hide/Show Hidden Lines
                            'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            If InStr(smLnShow(ilBox, ilRow), "-") <= 0 Then
                                pbcLine.Print smLnShow(ilBox, ilRow)
                            Else
                                If (imDiffMode) And (tgClfCntr(ilRow - 1).iStatus >= 0) Then
                                    pbcLine.Print smLnShow(ilBox, ilRow)
                                Else
                                    pbcLine.Print ""
                                End If
                            End If
                        'End If
                    ElseIf (ilBox >= WKSPOTSINDEX) And (ilBox <= WKSPOTSINDEX + 12) Then
                        'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9)) And (tgClfCntr(ilRow - 1).iFirstCff <> -1) And (slVefType <> "R") Then  'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                        If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION))) And (tgClfCntr(ilRow - 1).iFirstCff <> -1) And (slVefType <> "R") Then  'And (Trim$(smLnSave(15, ilRow)) <> "") Then
                            If tgClfCntr(ilRow - 1).lFirstAvail = -1 Then
                                Screen.MousePointer = vbHourglass
                                bmInAvailTab = True
                                mAvailTab ilRow
                                bmInAvailTab = False
                                Screen.MousePointer = vbDefault
                            End If
                            llNext = tgClfCntr(ilRow - 1).lFirstAvail
                            ilWeekIndex = (llDate - tgLnAvailInfo(llNext).lStartDate) \ 7
                            Do
                                If ilWeekIndex <= UBound(tgLnAvailInfo(0).iSAvail) Then
                                    Exit Do
                                Else
                                    ilWeekIndex = ilWeekIndex - (UBound(tgLnAvailInfo(0).iSAvail) + 1)
                                End If
                            Loop
                            blResetAvails = False
                            If ilWeekIndex < 0 Then
                                tgClfCntr(ilRow - 1).lFirstAvail = -1
                                blResetAvails = True
                            ElseIf (tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) = -29999) Then
                                blResetAvails = True
                            End If
                            
                            'If (tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) = -29999) And (llDate >= lmMonNowDate) And (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                            If blResetAvails And (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                                Screen.MousePointer = vbHourglass
                                bmInAvailTab = True
                                mAvailTab ilRow
                                bmInAvailTab = False
                                Screen.MousePointer = vbDefault
                                llNext = tgClfCntr(ilRow - 1).lFirstAvail
                                ilWeekIndex = (llDate - tgLnAvailInfo(llNext).lStartDate) \ 7
                                Do
                                    If ilWeekIndex <= UBound(tgLnAvailInfo(0).iSAvail) Then
                                        Exit Do
                                    Else
                                        ilWeekIndex = ilWeekIndex - (UBound(tgLnAvailInfo(0).iSAvail) + 1)
                                    End If
                                Loop
                            End If
                            If (tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) <> -29999) And (llDate >= lmMonNowDate) And (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                                'If (tscLine.SelectedItem.Index = 8) Then
                                If (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Then
                                    If tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) <= 0 Then
                                        pbcLine.ForeColor = Red
                                    ElseIf Val(tmLnCtrls(ilBox).sShow) <= tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) Then
                                        pbcLine.ForeColor = DARKGREEN
                                    Else
                                        pbcLine.ForeColor = Orange
                                    End If
                                'ElseIf (tscLine.SelectedItem.Index = 9) Then
                                ElseIf (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Then
                                    If tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) < tgLnAvailInfo(llNext).iAPAvail(ilWeekIndex) Then
                                        If tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) <= 0 Then
                                            pbcLine.ForeColor = Red
                                        ElseIf Val(tmLnCtrls(ilBox).sShow) <= tgLnAvailInfo(llNext).iSAvail(ilWeekIndex) Then
                                            pbcLine.ForeColor = DARKGREEN
                                        Else
                                            pbcLine.ForeColor = Orange
                                        End If
                                    Else
                                        If tgLnAvailInfo(llNext).iAPAvail(ilWeekIndex) <= 0 Then
                                            pbcLine.ForeColor = Red
                                        ElseIf Val(tmLnCtrls(ilBox).sShow) <= tgLnAvailInfo(llNext).iAPAvail(ilWeekIndex) Then
                                            pbcLine.ForeColor = DARKGREEN
                                        Else
                                            pbcLine.ForeColor = Orange
                                        End If
                                    End If
                                End If
                            Else
                                pbcLine.ForeColor = BLACK
                            End If
                        Else
                            If ilRow <> UBound(tgClfCntr) + 1 Then
                                If llDate < lmFirstSchMonDate Then
                                    pbcLine.ForeColor = Red
                                ElseIf llDate <= tgClfCntr(ilRow - 1).lLLD Then
                                    pbcLine.ForeColor = MAGENTA 'DARKGREEN
                                End If
                            End If
                        End If
                        If pbcLine.FontName = "Arial" Then
                            '12/16/14: Add Hide/Show Hidden Lines
                            'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) '- 30'+ fgBoxInsetY
                            pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) '- 30'+ fgBoxInsetY
                        Else
                            '12/16/14: Add Hide/Show Hidden Lines
                            'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        End If
                        pbcLine.Print tmLnCtrls(ilBox).sShow
                        pbcLine.ForeColor = llColor
                    ElseIf (ilBox = SPOTSINDEX) Then
                        If (imLnTotalType <> 2) Then
                            'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            If pbcLine.FontName = "Arial" Then
                                '12/16/14: Add Hide/Show Hidden Lines
                                'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) '+ fgBoxInsetY
                                pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) '+ fgBoxInsetY
                            Else
                                '12/16/14: Add Hide/Show Hidden Lines
                                'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            End If
                            If tgClfCntr(ilRow - 1).iOrigAnySpots >= 0 Then
                                pbcLine.Print tmLnCtrls(ilBox).sShow
                            Else
                                pbcLine.Print "   "
                            End If
                        End If
                    ElseIf (ilBox = OV1INDEX) Then
                        '12/16/14: Add Hide/Show Hidden Lines
                        'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        On Error GoTo mPaintErr
                        If (imLnSave(20, ilRow) > 0) Or (imLnSave(21, ilRow) > 0) Then
                            pbcLine.Print "b"
                        Else
                            pbcLine.Print smLnShow(ilBox, ilRow)
                        End If
                        On Error GoTo 0
                    ElseIf (ilBox = OV2INDEX) Then
                        '12/16/14: Add Hide/Show Hidden Lines
                        'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        On Error GoTo mPaintErr
                        If (Trim$(smLnSave(28, ilRow)) <> "") Then
                            pbcLine.Print "r"
                        Else
                            pbcLine.Print smLnShow(ilBox, ilRow)
                        End If
                        On Error GoTo 0
                    'ElseIf ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index = 10)) Then
                    ElseIf ((ilBox = DPINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        'Get book name
                        ilDnf = gBinarySearchDnfInfo(tgClfCntr(ilRow - 1).ClfRec.iDnfCode)
                        If ilDnf <> -1 Then
                            slStr = Trim$(tgBookNameInfo(ilDnf).sName)
                        Else
                            slStr = "  "
                        End If
                        tlCtrlArray.fBoxW = lmResearchTabBNWidth
                        gSetShow pbcLine, slStr, tlCtrlArray
                        If slStr <> tlCtrlArray.sShow Then
                            slFontName = pbcLine.FontName
                            flFontSize = pbcLine.FontSize
                            pbcLine.ForeColor = BLACK
                            pbcLine.FontBold = False
                            pbcLine.FontSize = 7
                            pbcLine.FontName = "Arial"
                            pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                            gSetShow pbcLine, slStr, tlCtrlArray
                        End If
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcLine.Print tlCtrlArray.sShow
                        If pbcLine.FontName = "Arial" Then
                            pbcLine.FontSize = flFontSize
                            pbcLine.FontName = slFontName
                            pbcLine.FontSize = flFontSize
                            pbcLine.ForeColor = llColor
                            pbcLine.FontBold = True
                        End If
                        'Get population
                        If tgClfCntr(ilRow - 1).lPop > 0 Then
                            If tgSpf.sSAudData = "H" Then
                                slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lPop, 1)
                            ElseIf tgSpf.sSAudData = "N" Then
                                slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lPop, 2)
                            ElseIf tgSpf.sSAudData = "U" Then
                                slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lPop, 3)
                            Else
                                slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lPop, 0)
                            End If
                            tlCtrlArray.fBoxW = lmResearchTabPOPWidth
                            gSetShow pbcLine, slStr, tlCtrlArray
                            If slStr <> tlCtrlArray.sShow Then
                                slFontName = pbcLine.FontName
                                flFontSize = pbcLine.FontSize
                                pbcLine.ForeColor = BLACK
                                pbcLine.FontBold = False
                                pbcLine.FontSize = 7
                                pbcLine.FontName = "Arial"
                                pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                                gSetShow pbcLine, slStr, tlCtrlArray
                            End If
                            If lmMajorityPopulation <> -1 Then
                                If tgClfCntr(ilRow - 1).lPop <> lmMajorityPopulation Then
                                    pbcLine.ForeColor = Red
                                End If
                            End If
                        Else
                            tlCtrlArray.sShow = "   "
                        End If
                        pbcLine.CurrentX = lmResearchTabPOPLeft + fgBoxInsetX
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcLine.Print tlCtrlArray.sShow
                        pbcLine.ForeColor = llColor
                    'ElseIf ((ilBox = LENINDEX) And (tscLine.SelectedItem.Index = 10)) Then
                    ElseIf ((ilBox = LENINDEX) And (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) Then
                        'Get AQH
                        If tgSpf.sSAudData = "H" Then
                            slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lAvgAud, 1)
                        ElseIf tgSpf.sSAudData = "N" Then
                            slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lAvgAud, 2)
                        ElseIf tgSpf.sSAudData = "U" Then
                            slStr = gLongToStrDec(tgClfCntr(ilRow - 1).lAvgAud, 3)
                        Else
                            slStr = Trim$(str$(tgClfCntr(ilRow - 1).lAvgAud))
                        End If
                        '12/5/19: Clear AQH if line not added
                        If (tgClfCntr(ilRow - 1).iFirstCff = -1) Then
                            slStr = ""
                        End If
                        tlCtrlArray.fBoxW = tmLnCtrls(ilBox).fBoxW
                        gSetShow pbcLine, slStr, tlCtrlArray
                        If slStr <> tlCtrlArray.sShow Then
                            slFontName = pbcLine.FontName
                            flFontSize = pbcLine.FontSize
                            pbcLine.ForeColor = BLACK
                            pbcLine.FontBold = False
                            pbcLine.FontSize = 7
                            pbcLine.FontName = "Arial"
                            pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                            gSetShow pbcLine, slStr, tlCtrlArray
                        End If
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcLine.Print tlCtrlArray.sShow
                    Else
                        '12/16/14: Add Hide/Show Hidden Lines
                        'pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLine.CurrentY = tmLnCtrls(ilBox).fBoxY + (ilPaintRowNo - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        If (slLineType = "H") And (ilBox = VEHINDEX) Then
                            slStr = "MM" & smLnShow(ilBox, ilRow)
                            gSetShow pbcLine, slStr, tmLnCtrls(ilBox)
                            slStr = right(tmLnCtrls(ilBox).sShow, Len(tmLnCtrls(ilBox).sShow) - 2)
                            pbcLine.CurrentX = tmLnCtrls(ilBox).fBoxX + fgBoxInsetX + pbcLine.TextWidth("MM")
                            pbcLine.Print slStr
                        Else
                            pbcLine.Print smLnShow(ilBox, ilRow)
                        End If
                    End If
                    If pbcLine.FontName = "Arial" Then
                        pbcLine.FontSize = flFontSize
                        pbcLine.FontName = slFontName
                        pbcLine.FontSize = flFontSize
                        pbcLine.ForeColor = llColor
                        pbcLine.FontBold = True
                    End If
                End If
            Next ilBox
            '12/16/14: Add Hide/Show Hidden Lines
            ilPaintRowNo = ilPaintRowNo + 1
        Else
            If (imCurrHightLightLnRowNo <> -1) Or (imPrevHightLightLnRowNo <> -1) Then
                ilPaintRowNo = ilPaintRowNo + 1
            End If
        End If
        pbcLine.FontStrikethru = False
    Next ilPRow
    'Draw horizontal line that splits Price field
    'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
    If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2) Then 'And (Trim$(smLnSave(15, ilRow)) <> "") Then
        pbcLine.ForeColor = BLUE
        pbcLine.Line (tmLnCtrls(PRICEINDEX).fBoxX + fgBoxInsetX + imResearchTogglePriceLeft - 45, tmLnCtrls(PRICEINDEX).fBoxY - tmLnCtrls(SPOTSINDEX).fBoxY / 2)-Step(0, tmLnCtrls(SPOTSINDEX).fBoxH)
        pbcLine.ForeColor = llColor
    End If
    'If (imLnRowNo = imPrevHightLightLnRowNo) And (imPrevHightLightLnRowNo <> -1) Then
    '    mPaintLnBkgd imLnRowNo, GRAY
    'End If
    pbcLnDates.Visible = False
    pbcLnDates.Visible = True
    imPaintLnRowNo = -1
    Exit Sub
mPaintErr:
    Exit Sub
End Sub

Private Sub pbcLineArrow_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcLnDaily_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub pbcLnDaily_KeyPress(KeyAscii As Integer)
    If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Then
        edcLNDropDown.Text = "P"
        pbcLnDaily_Paint
        Exit Sub
    End If
    If (KeyAscii = Asc("Q")) Or (KeyAscii = Asc("q")) Or (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        edcLNDropDown.Text = "Q"
        pbcLnDaily_Paint
        Exit Sub
    End If
    If (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        edcLNDropDown.Text = "C"
        pbcLnDaily_Paint
        Exit Sub
    End If
    If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
        If imLnDaily <> 0 Then
            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                imLnChg = True
            End If
        End If
        imLnDaily = 0
        pbcLnDaily_Paint
        pbcDBLnDaily_Paint
    ElseIf KeyAscii = Asc("N") Or (KeyAscii = Asc("n")) Then
        If imLnDaily <> 1 Then
            If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                imLnChg = True
            End If
        End If
        imLnDaily = 1
        pbcLnDaily_Paint
        pbcDBLnDaily_Paint
    End If
    If KeyAscii = Asc(" ") Then
        If imLnDaily = 0 Then
            imLnDaily = 1
        Else
            imLnDaily = 0
        End If
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
        pbcLnDaily_Paint
        pbcDBLnDaily_Paint
    End If
End Sub

Private Sub pbcLnDaily_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imLnDaily = 0 Then
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
        imLnDaily = 1
    Else
        If imLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
            imLnChg = True
        End If
        imLnDaily = 0
    End If
    pbcLnDaily_Paint
    pbcDBLnDaily_Paint
End Sub

Public Sub pbcLnDaily_Paint()
    Dim slStr As String

    slStr = Trim$(edcLNDropDown.Text)
    pbcLnDaily.Cls
    pbcLnDaily.CurrentX = fgBoxInsetX
    pbcLnDaily.CurrentY = 30 'fgBoxInsetY
    If imLnDaily = 0 Then
        pbcLnDaily.Print "Y" & slStr
        If imOVType = 3 Then
            'If igFreezeState = 1 Then
                If Not mIsLnGame(imLnRowNo) Then
                    If (tgUrf(0).sActFlightButton = "I") And ((Asc(tgSaf(0).sFeatures5) And SHOWDAYDROPDOWN) = SHOWDAYDROPDOWN) Then
                        pbcOVWD(0).Visible = True
                    End If
                End If
            'Else
            '    pbcOVWD(0).Visible = False
            'End If
        End If
    Else
        pbcLnDaily.Print "N" & slStr
        If imOVType = 3 Then
            pbcOVWD(0).Visible = False
        End If
    End If
End Sub

Private Sub pbcLnDates_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
    'If imDGBoxNo > 0 Then
    '    mDGSetFocus imDGBoxNo
    'ElseIf imAirBoxNo > 0 Then
    '    mAirSetFocus imAirBoxNo
    'ElseIf imLnBoxNo > 0 Then
    If imLnBoxNo > 0 Then
        mLnSetFocus imLnBoxNo
    Else
        pbcClickFocus.SetFocus
    End If
End Sub

Private Sub pbcLnDates_Paint()
    Dim ilBox As Integer
    Dim ilEnd As Integer

    mPaintLnDates
    If imLnRowNo > 0 Then
        ilEnd = 2
    Else
        ilEnd = 2
    End If
    For ilBox = 1 To ilEnd Step 1
        pbcLnDates.CurrentX = tmLnDCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcLnDates.CurrentY = tmLnDCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
        pbcLnDates.Print tmLnDCtrls(ilBox).sShow
    Next ilBox

End Sub

Private Sub pbcLnSTab_GotFocus()
    pbcSTabSub LINECOMMINDEX, PRICEINDEX, OV1INDEX, LENINDEX, OV2INDEX, VEHINDEX, DPINDEX, WKSPOTSINDEX
End Sub

Private Sub pbcLnSTab_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcLnTab_GotFocus()
    If imTerminate Then
        Exit Sub
    End If
    pbcLnTabSub LINECOMMINDEX, PRICEINDEX, OV1INDEX, LENINDEX, OV2INDEX, VEHINDEX, DPINDEX, WKSPOTSINDEX
End Sub

Private Sub pbcLnTab_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcLnTotal_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
    'If imDGBoxNo > 0 Then
    '    mDGSetFocus imDGBoxNo
    'ElseIf imAirBoxNo > 0 Then
    '    mAirSetFocus imAirBoxNo
    'ElseIf imLnBoxNo > 0 Then
    If imLnBoxNo > 0 Then
        mLnSetFocus imLnBoxNo
    Else
        pbcClickFocus.SetFocus
    End If
End Sub

Public Sub pbcLnTotal_Paint()
    Dim ilBox As Integer
    Dim slStr As String
    Dim slFontName As String
    Dim llColor As Long
    Dim flFontSize As Single
    Dim llHSStartDate As Long
    Dim ilHSCurWkNo As Integer
    Dim ilHSEndWkNo As Integer
    Dim llDate As Long
    Dim ilDate As Integer
    Dim ilDateIndex As Integer
    Dim ilPass As Integer
    Dim ilSumIndex As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slGRP As String
    Dim slGrImp As String
    Dim slCPP As String
    Dim slCPM As String
    Dim ilWkSum As Integer
    
    Dim ilPos As Integer
    Dim tlCtrlArray As FIELDAREA
        
    llHSStartDate = lmHSStartDate
    ilHSCurWkNo = imHSCurWkNo
    ilHSEndWkNo = imHSEndWkNo

    mPaintLnTotal
    llColor = pbcLnTotal.ForeColor
    slFontName = pbcLnTotal.FontName
    flFontSize = pbcLnTotal.FontSize

    pbcLnTotal.CurrentX = 15
    pbcLnTotal.CurrentY = 0
    pbcLnTotal.Print "Totals: Units"

    'Contract!lacAudTotals.Caption = "GRP: " & gLongToStrDec(llGRP, 1) & " GrImp:" & Trim$(str$(llGrImp)) & " CPP:" & Trim$(str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "

    'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2) Then
    If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2) Then
        slStr = UCase(lacAudTotals.Caption)
        ilPos1 = InStr(1, slStr, "GRP:")
        ilPos2 = InStr(1, slStr, "GRIMP:")
        slGRP = Trim$(Mid(slStr, ilPos1 + 4, ilPos2 - (ilPos1 + 4)))
        ilPos1 = InStr(1, slStr, "GRIMP:")
        ilPos2 = InStr(1, slStr, "CPP:")
        slGrImp = Trim$(Mid(slStr, ilPos1 + 6, ilPos2 - (ilPos1 + 6)))
        ilPos1 = InStr(1, slStr, "CPP:")
        ilPos2 = InStr(1, slStr, "CPM:")
        slCPP = Trim$(Mid(slStr, ilPos1 + 4, ilPos2 - (ilPos1 + 4)))
        ilPos1 = InStr(1, slStr, "CPM:")
        slCPM = Trim$(Mid(slStr, ilPos1 + 4))
    End If
    
    For ilBox = imLBCTCtrls To UBound(tmLnTCtrls) Step 1
        If ilBox = UBound(tmLnTCtrls) Then
            pbcLnTotal.CurrentX = gRightJustifyShowStr(pbcLnTotal, tmLnTCtrls(ilBox).sShow, tmLnTCtrls(ilBox))
        Else
            pbcLnTotal.CurrentX = tmLnTCtrls(ilBox).fBoxX + fgBoxInsetX
        End If
        'If ilBox <= 13 Then
            slStr = tmLnTCtrls(ilBox).sShow
            gSetShow pbcLnTotal, slStr, tmLnTCtrls(ilBox)
            If slStr <> tmLnTCtrls(ilBox).sShow Then
                slFontName = pbcLine.FontName
                flFontSize = pbcLine.FontSize
                pbcLnTotal.ForeColor = BLACK
                pbcLnTotal.FontBold = False
                pbcLnTotal.FontSize = 7
                pbcLnTotal.FontName = "Arial"
                pbcLnTotal.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                'If ((ilBox = UBound(tmLnTCtrls)) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Then
                If ((ilBox = UBound(tmLnTCtrls)) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Then
                    gSetShow pbcLnTotal, slStr, tmLnTCtrls(ilBox)
                    pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY '- 30 '+ fgBoxInsetY
                    pbcLnTotal.Print tmLnTCtrls(ilBox).sShow
                    tmLnTCtrls(ilBox).sShow = slStr
                    If imCppCpm = 2 Then
                        'grp and cpp
                        pbcLnTotal.CurrentX = tmLnTCtrls(14).fBoxX + fgBoxInsetX
                        pbcLnTotal.Print slGRP
                        pbcLnTotal.CurrentX = tmLnTCtrls(15).fBoxX + fgBoxInsetX '+ tmLnTCtrls(ilBox).fBoxW / 2
                        pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY '- 30 '+ fgBoxInsetY
                        pbcLnTotal.Print slCPP
                    Else
                        'gross impression and cpm
                        pbcLnTotal.CurrentX = tmLnTCtrls(14).fBoxX + fgBoxInsetX
                        pbcLnTotal.Print slGrImp
                        pbcLnTotal.CurrentX = tmLnTCtrls(15).fBoxX + fgBoxInsetX '+ tmLnTCtrls(ilBox).fBoxW / 2
                        pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
                        pbcLnTotal.Print slCPM
                    End If
                Else
                    'Bypass spots if avail/protection or research tab
                    'If ((ilBox = UBound(tmLnTCtrls) - 1) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Then
                    If ((ilBox = UBound(tmLnTCtrls) - 1) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Then
                    Else
                        gSetShow pbcLnTotal, slStr, tmLnTCtrls(ilBox)
                        pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY '- 30 '+ fgBoxInsetY
                        pbcLnTotal.Print tmLnTCtrls(ilBox).sShow
                        tmLnTCtrls(ilBox).sShow = slStr
                    End If
                End If
                pbcLnTotal.FontSize = flFontSize
                pbcLnTotal.FontName = slFontName
                pbcLnTotal.FontSize = flFontSize
                pbcLnTotal.ForeColor = llColor
                pbcLnTotal.FontBold = True
            Else
                pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
                'If ((ilBox = UBound(tmLnTCtrls)) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Then
                If ((ilBox = UBound(tmLnTCtrls)) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Then
                    pbcLnTotal.Print tmLnTCtrls(ilBox).sShow
                    pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
                    If imCppCpm = 2 Then
                        'grp and cpp
                        pbcLnTotal.CurrentX = tmLnTCtrls(14).fBoxX + fgBoxInsetX
                        pbcLnTotal.Print slGRP
                        pbcLnTotal.CurrentX = tmLnTCtrls(15).fBoxX + fgBoxInsetX '+ tmLnTCtrls(ilBox).fBoxW / 2
                        pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
                        pbcLnTotal.Print slCPP
                    Else
                        'gross impression and cpm
                        pbcLnTotal.CurrentX = tmLnTCtrls(14).fBoxX + fgBoxInsetX
                        pbcLnTotal.Print slGrImp
                        pbcLnTotal.CurrentX = tmLnTCtrls(15).fBoxX + fgBoxInsetX '+ tmLnTCtrls(ilBox).fBoxW / 2
                        pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
                        pbcLnTotal.Print slCPM
                    End If
                Else
                    'Bypass spots if avail/protection or research tab
                    'If ((ilBox = UBound(tmLnTCtrls) - 1) And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (imLnTotalType = 2)) Then
                    If ((ilBox = UBound(tmLnTCtrls) - 1) And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (imLnTotalType = 2)) Then
                    Else
                        pbcLnTotal.Print tmLnTCtrls(ilBox).sShow
                    End If
                End If
            End If
        'Else
        '    pbcLnTotal.CurrentY = tmLnTCtrls(ilBox).fBoxY - 30 '+ fgBoxInsetY
        '    pbcLnTotal.Print tmLnTCtrls(ilBox).sShow
        'End If
    Next ilBox
    tlCtrlArray.fBoxW = tmLnTCtrls(1).fBoxW
    'If (tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10) Then
    If (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH)) Then
        If tgSpf.sGUsePropSys = "Y" Then
            pbcLnTotal.CurrentX = 15
            pbcLnTotal.CurrentY = tmLnTCtrls(imLBCTCtrls).fBoxY + 1 * (fgBoxGridH + 15) - 15
            If imCppCpm = 2 Then
                pbcLnTotal.Print "Totals: GRP"
            Else
                pbcLnTotal.Print "Totals: Gross Impressions"
            End If
            pbcLnTotal.CurrentX = 15
            pbcLnTotal.CurrentY = tmLnTCtrls(imLBCTCtrls).fBoxY + 2 * (fgBoxGridH + 15) - 15
            If imCppCpm = 2 Then
                pbcLnTotal.Print "Totals: CPP"
            Else
                pbcLnTotal.Print "Totals: CPM"
            End If
            pbcLnTotal.CurrentX = 15
            pbcLnTotal.CurrentY = tmLnTCtrls(imLBCTCtrls).fBoxY + 3 * (fgBoxGridH + 15) - 15
            pbcLnTotal.Print "Totals: Weekly Cost"
            If (llHSStartDate > 0) And (ilHSCurWkNo > 0) Then
                'ilDateIndex = -1
                'llDate = llHSStartDate + 7 * (ilHSCurWkNo - 1)
                'For ilDate = LBound(smWkSumShow, 2) To UBound(smWkSumShow, 2) - 1 Step 1
                '    ilPos = InStr(1, smWkSumShow(1, ilDate), "-")
                '    If ilPos > 0 Then
                '        If llDate = gDateValue(Left$(smWkSumShow(1, ilDate), ilPos - 1)) Then
                '            ilDateIndex = ilDate
                '            Exit For
                '        End If
                '    End If
                'Next ilDate
                For ilPass = 1 To 3 Step 1
                    For ilDate = 0 To 12 Step 1
                        If ilHSCurWkNo + ilDate > ilHSEndWkNo Then
                            Exit For
                        End If
                        ilDateIndex = -1
                        llDate = llHSStartDate + 7 * (ilHSCurWkNo + ilDate - 1) '- 1) '(ilHSCurWkNo - 1)
                        For ilWkSum = LBound(smWkSumShow, 2) To UBound(smWkSumShow, 2) - 1 Step 1
                            ilPos = InStr(1, smWkSumShow(1, ilWkSum), "-")
                            If ilPos > 0 Then
                                If llDate = gDateValue(Left$(smWkSumShow(1, ilWkSum), ilPos - 1)) Then
                                    ilDateIndex = ilWkSum
                                    Exit For
                                End If
                            End If
                        Next ilWkSum
                        If ilDateIndex <> -1 Then
                            'If ilDateIndex + ilDate >= UBound(smWkSumShow, 2) Then
                            '    Exit For
                            'End If
                            pbcLnTotal.CurrentX = tmLnTCtrls(imLBCTCtrls + ilDate).fBoxX + fgBoxInsetX
                            If imCppCpm = 2 Then
                                If ilPass = 1 Then ilSumIndex = 2
                                If ilPass = 2 Then ilSumIndex = 7
                                If ilPass = 3 Then ilSumIndex = 9
                            Else
                                If ilPass = 1 Then ilSumIndex = 4
                                If ilPass = 2 Then ilSumIndex = 6
                                If ilPass = 3 Then ilSumIndex = 9
                            End If
                            slStr = smWkSumShow(ilSumIndex, ilDateIndex)    ' + ilDate)
                            gSetShow pbcLnTotal, slStr, tlCtrlArray
                            If slStr <> smWkSumShow(ilSumIndex, ilDateIndex) Then   ' + ilDate) Then
                                slFontName = pbcLine.FontName
                                flFontSize = pbcLine.FontSize
                                pbcLnTotal.ForeColor = BLACK
                                pbcLnTotal.FontBold = False
                                pbcLnTotal.FontSize = 7
                                pbcLnTotal.FontName = "Arial"
                                pbcLnTotal.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                                gSetShow pbcLnTotal, slStr, tlCtrlArray
                                pbcLnTotal.CurrentY = tmLnTCtrls(imLBCTCtrls + ilDate).fBoxY + ilPass * (fgBoxGridH + 15) - 15 '- 30 '+ fgBoxInsetY
                                pbcLnTotal.Print tlCtrlArray.sShow
                                pbcLnTotal.FontSize = flFontSize
                                pbcLnTotal.FontName = slFontName
                                pbcLnTotal.FontSize = flFontSize
                                pbcLnTotal.ForeColor = llColor
                                pbcLnTotal.FontBold = True
                            Else
                                pbcLnTotal.CurrentY = tmLnTCtrls(imLBCTCtrls + ilDate).fBoxY + ilPass * (fgBoxGridH + 15) - 45 '+ fgBoxInsetY
                                pbcLnTotal.Print tlCtrlArray.sShow
                            End If
                        End If
                    Next ilDate
                Next ilPass
                If (imLnTotalType = 2) Then
                    ilBox = UBound(tmLnTCtrls)
                    pbcLnTotal.ForeColor = BLUE
                    pbcLnTotal.Line (tmLnTCtrls(ilBox).fBoxX + fgBoxInsetX + tmLnTCtrls(ilBox).fBoxW / 2 - 45, tmLnTCtrls(ilBox).fBoxY - 15)-Step(0, tmLnTCtrls(ilBox).fBoxH)
                    pbcLnTotal.ForeColor = llColor
                End If
            End If
        End If
    End If
End Sub

Private Sub pbcLogo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcNumber_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim slStr As String

    If (imHdBoxNo = CNTRNOINDEX) And (imNoBoxNo = NOPROPINDEX) Then
        slStr = Trim$(edcShareDropDown.Text)
        If Not mOKID(slStr) Then
            edcShareDropDown.Text = slStr
            Exit Sub
        End If
    End If
    For ilBox = imLBCTCtrls To UBound(tmNoCtrls) Step 1
        If (X >= tmNoCtrls(ilBox).fBoxX) And (X <= tmNoCtrls(ilBox).fBoxX + tmNoCtrls(ilBox).fBoxW) Then
            If (Y >= tmNoCtrls(ilBox).fBoxY) And (Y <= tmNoCtrls(ilBox).fBoxY + tmNoCtrls(ilBox).fBoxH) Then
                If sgCntrScreen = "Orders" Then
                    If (ilBox = NOPROPINDEX) And (imStep1Index > 2) Then
                        Beep
                        Exit Sub
                    End If
                Else
                    If (imStep1Index > 1) And (ilBox = NOPROPINDEX) Then
                        Beep
                        Exit Sub
                    End If
                End If
                'Disallow contract # to be entered on new orders/proposal- use CCntrNo.Frm
                If (imStep1Index <= 1) And (ilBox = NOPROPINDEX) Then
                    Beep
                    Exit Sub
                End If
                If (ilBox = NOESTINDEX) And (tgSpf.sCEstNo <> "Y") Then
                    Beep
                    Exit Sub
                End If
                If (tgUrf(0).sRefResvType <> "I") And ((ilBox = NORESVADVTINDEX) Or (ilBox = NORESVORDERINDEX)) Then
                    Beep
                    Exit Sub
                End If
                If ((ilBox = NORESVORDERINDEX) And lbcResvAdvt.ListIndex <= 0) Then
                    Beep
                    Exit Sub
                End If
                If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) <> EDIAGYCODES) And ((ilBox = NOEDICLIENTCODEINDEX) Or (ilBox = NOEDIPRODUCTCODEINDEX)) Then
                'If ((Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) <> INVEXPORTPARAMETERS) And ((ilBox = NOINVPROJCODEINDEX) Or (ilBox = NOINVSMSNOINDEX)) Then
                    Beep
                    Exit Sub
                End If
                'If (sgCntrScreen = "Orders") And ((ilBox = NORESVINDEX) Or (ilBox = NODATEINDEX)) Then
                If (sgCntrScreen = "Orders") And (ilBox = NODATEINDEX) Then
                    Beep
                    Exit Sub
                End If
                mNoSetShow imNoBoxNo
                imNoBoxNo = ilBox
                mNoEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mNoSetFocus imNoBoxNo
End Sub

Private Sub pbcNumber_Paint()
    Dim ilBox As Integer
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single

    llColor = pbcNumber.ForeColor
    slFontName = pbcNumber.FontName
    flFontSize = pbcNumber.FontSize
    pbcNumber.ForeColor = BLUE
    pbcNumber.FontBold = False
    pbcNumber.FontSize = 7
    pbcNumber.FontName = "Arial"
    pbcNumber.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    If tgUrf(0).sRefResvType = "I" Then
        pbcNumber.CurrentX = tmNoCtrls(NORESVADVTINDEX).fBoxX + 15  'fgBoxInsetX
        pbcNumber.CurrentY = tmNoCtrls(NORESVADVTINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcNumber.Print "Reserved Advertiser"
        pbcNumber.CurrentX = tmNoCtrls(NORESVORDERINDEX).fBoxX + 15  'fgBoxInsetX
        pbcNumber.CurrentY = tmNoCtrls(NORESVORDERINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcNumber.Print "Reserved Order #"
    End If
    If tgSpf.sCEstNo = "Y" Then
        pbcNumber.CurrentX = tmNoCtrls(NOESTINDEX).fBoxX + 15  'fgBoxInsetX
        pbcNumber.CurrentY = tmNoCtrls(NOESTINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcNumber.Print "Agency Estimate #"
    End If
    If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES) Then   'EDI Parameters
        pbcNumber.CurrentX = tmNoCtrls(NOEDICLIENTCODEINDEX).fBoxX + 15  'fgBoxInsetX
        pbcNumber.CurrentY = tmNoCtrls(NOEDICLIENTCODEINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcNumber.Print "EDI Client Code"
        pbcNumber.CurrentX = tmNoCtrls(NOEDIPRODUCTCODEINDEX).fBoxX + 15  'fgBoxInsetX
        pbcNumber.CurrentY = tmNoCtrls(NOEDIPRODUCTCODEINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        pbcNumber.Print "EDI Product Code"
    End If
    'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS Then  'Invoice Export Parameters
    '    pbcNumber.CurrentX = tmNoCtrls(NOINVPROJCODEINDEX).fBoxX + 15  'fgBoxInsetX
    '    pbcNumber.CurrentY = tmNoCtrls(NOINVPROJCODEINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    '    pbcNumber.Print "Invoice Project Code"
    '    pbcNumber.CurrentX = tmNoCtrls(NOINVSMSNOINDEX).fBoxX + 15  'fgBoxInsetX
    '    pbcNumber.CurrentY = tmNoCtrls(NOINVSMSNOINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    '    pbcNumber.Print "Invoice SMS #"
    'End If
    pbcNumber.FontSize = flFontSize
    pbcNumber.FontName = slFontName
    pbcNumber.FontSize = flFontSize
    pbcNumber.ForeColor = llColor
    pbcNumber.FontBold = True

    For ilBox = imLBCTCtrls To UBound(tmNoCtrls) Step 1
        If ((ilBox = NORESVADVTINDEX) And (tgUrf(0).sRefResvType <> "I")) Or ((ilBox = NORESVORDERINDEX) And (tgUrf(0).sRefResvType <> "I")) Or ((ilBox = NOESTINDEX) And (tgSpf.sCEstNo <> "Y")) Or (((ilBox = NOEDICLIENTCODEINDEX) Or (ilBox = NOEDIPRODUCTCODEINDEX)) And ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) <> EDIAGYCODES)) Then
        'If ((ilBox = NORESVADVTINDEX) And (tgUrf(0).sRefResvType <> "I")) Or ((ilBox = NORESVORDERINDEX) And (tgUrf(0).sRefResvType <> "I")) Or ((ilBox = NOESTINDEX) And (tgSpf.sCEstNo <> "Y")) Or (((ilBox = NOINVPROJCODEINDEX) Or (ilBox = NOINVSMSNOINDEX)) And ((Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) <> INVEXPORTPARAMETERS)) Then
        Else
            pbcNumber.CurrentX = tmNoCtrls(ilBox).fBoxX + fgBoxInsetX
            pbcNumber.CurrentY = tmNoCtrls(ilBox).fBoxY + fgBoxInsetY
            pbcNumber.Print tmNoCtrls(ilBox).sShow
        End If
    Next ilBox
End Sub

Private Sub pbcOv_GotFocus()
    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) And (imRBInLnGridOrSum <> 1) Then
        mLnSetShow imLnBoxNo
    End If
End Sub

Private Sub pbcOv_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer

    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        'If pbcLineArrow.Visible Then
        '    pbcLineArrow.SetFocus   'pbcClickFocus.SetFocus
        'Else
            pbcClickFocus.SetFocus
        'End If
        Exit Sub
    End If
    If imOVType <> 2 Then
        If smAlterHidden = "C" Then
            If (X >= tmOV1Ctrls(OVCOPYINDEX).fBoxX) And (X <= tmOV1Ctrls(ilBox).fBoxX + tmOV1Ctrls(OVCOPYINDEX).fBoxW) Then
                If (Y >= tmOV1Ctrls(OVCOPYINDEX).fBoxY) And (Y <= tmOV1Ctrls(OVCOPYINDEX).fBoxY + tmOV1Ctrls(OVCOPYINDEX).fBoxH) Then
                Else
                    Beep
                    Exit Sub
                End If
            Else
                Beep
                Exit Sub
            End If
        End If
        'ACT1
        If (X >= tmOV1ACT1Info.fBoxX) And (X <= tmOV1ACT1Info.fBoxX + tmOV1ACT1Info.fBoxW) Then
            If (Y >= tmOV1ACT1Info.fBoxY) And (Y <= tmOV1ACT1Info.fBoxY + tmOV1ACT1Info.fBoxH) Then
                mOvSetShow imOVBoxNo
                imOVBoxNo = -1
                If edcAct1.Visible = True Then
                    edcAct1.Visible = False
                    Exit Sub
                End If
                mSetACTInfo edcAct1
                edcAct1.height = pbcHeader.height
                edcAct1.Left = pbcLine.Left + plcOv.Left + plcOv.Width / 2 - edcAct1.Width / 2
                edcAct1.Top = plcOv.Top - edcAct1.height
                edcAct1.Visible = True
                edcAct1.SetFocus
                Exit Sub
            End If
        End If
        edcAct1.Visible = False
        For ilBox = imLBCTCtrls To UBound(tmOV1Ctrls) Step 1
            If (X >= tmOV1Ctrls(ilBox).fBoxX) And (X <= tmOV1Ctrls(ilBox).fBoxX + tmOV1Ctrls(ilBox).fBoxW) Then
                If (Y >= tmOV1Ctrls(ilBox).fBoxY) And (Y <= tmOV1Ctrls(ilBox).fBoxY + tmOV1Ctrls(ilBox).fBoxH) Then
                    If (tgUrf(0).iRemoteUserID <= 0) And (((tgUrf(0).iSlfCode <= 0) And (tgSpf.sGUsePropSys = "N")) Or (tgUrf(0).sWorkToHold = "Y") Or (tgUrf(0).sWorkToOrder = "Y") Or (tgUrf(0).sCompToHold = "Y") Or (tgUrf(0).sCompToOrder = "Y") Or (tgUrf(0).sIncompToHold = "Y") Or (tgUrf(0).sIncompToOrder = "Y")) Then
                    Else
                        If (ilBox = OVHIGHINDEX) Or (ilBox = OVRANKINDEX) Then
                            Beep
                            Exit Sub
                        End If
                        If (tgSpf.sCPkEqual <> "Y") And (ilBox = OVRANKINDEX) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If ilBox = OVCOPYINDEX Then
                        If ((Asc(tgSpf.sUsingFeatures) And LIVECOPY) <> LIVECOPY) And ((Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) <> PROMOCOPY) Then 'Using Live Copy
                            Beep
                            Exit Sub
                        End If
                    End If
                    If ilBox = OVBBCLOSEINDEX Then
                        If ((Asc(tgSpf.sUsingFeatures6) And BBCLOSEST) = BBCLOSEST) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If (ilBox = ACT1STOREDTIMESINDEX) Or (ilBox = ACT1STOREDSPOTSINDEX) Or (ilBox = ACT1STOREDCLEARPCTINDEX) Or (ilBox = ACT1DAYPARTFILTERINDEX) Then
                        If (imOVBoxNo = ACT1LINEUPINDEX) And (edcDGDropDown.Text = "") Then
                            Beep
                            Exit Sub
                        End If
                        If (Trim$(smDGSave(15)) = "") And (imOVBoxNo <> ACT1LINEUPINDEX) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If plcPower.Visible <> True Then
                        If (tgClfCntr(imLnRowNo - 1).iInPast) Then
                            If (ilBox = OVWDINDEX) Or ((ilBox >= OVDAYSINDEX) And (ilBox <= OVDAYSINDEX + 6)) Or (ilBox = OVSTARTTIMEINDEX) Or (ilBox = OVENDTIMEINDEX) Then
                                Beep
                                Exit Sub
                            End If
                        End If
                    End If
                    If mIsLnGame(imLnRowNo) Then
                        If (ilBox = OVWDINDEX) Or ((ilBox >= OVDAYSINDEX) And (ilBox <= OVDAYSINDEX + 6)) Or (ilBox = OVSTARTTIMEINDEX) Or (ilBox = OVENDTIMEINDEX) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If (Not tgClfCntr(imLnRowNo - 1).iOverride) And ((ilBox = OVSTARTTIMEINDEX) Or (ilBox = OVENDTIMEINDEX)) Then
                        Beep
                        Exit Sub
                    End If
                    mOvSetShow imOVBoxNo
                    imOVBoxNo = ilBox
                    mOvEnableBox ilBox
                    Exit Sub
                End If
            End If
        Next ilBox
    Else
        For ilBox = imLBCTCtrls To UBound(tmOV2Ctrls) Step 1
            If (X >= tmOV2Ctrls(ilBox).fBoxX) And (X <= tmOV2Ctrls(ilBox).fBoxX + tmOV2Ctrls(ilBox).fBoxW) Then
                If (Y >= tmOV2Ctrls(ilBox).fBoxY) And (Y <= tmOV2Ctrls(ilBox).fBoxY + tmOV2Ctrls(ilBox).fBoxH) Then
                    If (tgClfCntr(imLnRowNo - 1).iInPast) Then
                        If ((ilBox >= OV2DAYSINDEX) And (ilBox <= OV2DAYSINDEX + 6)) Or (ilBox = OV2STARTTIMEINDEX) Or (ilBox = OV2ENDTIMEINDEX) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If (ilBox >= OV2DAYSINDEX) And (ilBox <= OV2DAYSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) Then
                        Beep
                        Exit Sub
                    End If
                    If ilBox <= OV2ENDTIMEINDEX Then
                        If ((Asc(tgSpf.sOverrideOptions) And SPPREFERREDDT) <> SPPREFERREDDT) Or (mIsLnGame(imLnRowNo)) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If (ilBox = OV2ENDTIMEINDEX) And (Trim$(smLnSave(26, imLnRowNo)) = "") Then
                        Beep
                        Exit Sub
                    End If
                    If ilBox = OV2ALLOCATIONINDEX Then
                        If (Asc(tgSpf.sOverrideOptions) And SPALLOCATION) <> SPALLOCATION Then
                            Beep
                            Exit Sub
                        End If
                        If (smLineType = "O") Or (smLineType = "A") Or (smLineType = "E") Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If ilBox = OV2SPLITINDEX Then
                        If Not mRegionAllowed(imLnRowNo) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If ilBox = OV2ACQUISITIONINDEX Then
                        If Not mUsingAcqCost() Then
                            Beep
                            Exit Sub
                        End If
                        If (smLineType = "O") Or (smLineType = "A") Or (smLineType = "E") Then
                            Beep
                            Exit Sub
                        End If
                        If Not mAllowedToChgAcqCost(imLnRowNo) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If ilBox = OV2SOLOINDEX Then
                        If (Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) <> SPSOLOAVAIL Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If ilBox = OV21STINDEX Then
                        If (Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) <> SP1STPOSITION Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    mOvSetShow imOVBoxNo
                    imOVBoxNo = ilBox
                    mOvEnableBox ilBox
                    Exit Sub
                End If
            End If
        Next ilBox
    End If
    mOvSetFocus imOVBoxNo
End Sub

Private Sub pbcOv_Paint()
    Dim ilBox As Integer
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilTotalSpots As Integer
    Dim ilDay As Integer
    Dim slStr As String
    Dim ilLoop As Integer
    Dim ilOvPaint As Integer

    'If tgUrf(0).iRemoteUserID <= 0 Then

        If (imRBInLnGridOrSum <> 1) And (plcPower.Visible = False) Then
        If imOVType <> 2 Then
            If (tgUrf(0).iRemoteUserID <= 0) And (((tgUrf(0).iSlfCode <= 0) And (tgSpf.sGUsePropSys = "N")) Or (tgUrf(0).sWorkToHold = "Y") Or (tgUrf(0).sWorkToOrder = "Y") Or (tgUrf(0).sCompToHold = "Y") Or (tgUrf(0).sCompToOrder = "Y") Or (tgUrf(0).sIncompToHold = "Y") Or (tgUrf(0).sIncompToOrder = "Y")) Then
                llColor = pbcOv.ForeColor
                slFontName = pbcOv.FontName
                flFontSize = pbcOv.FontSize
                pbcOv.ForeColor = BLUE
                pbcOv.FontBold = False
                pbcOv.FontSize = 7
                pbcOv.FontName = "Arial"
                pbcOv.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
                pbcOv.CurrentX = tmOV1Ctrls(OVHIGHINDEX).fBoxX + 15  'fgBoxInsetX
                pbcOv.CurrentY = tmOV1Ctrls(OVHIGHINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcOv.Print "HiPri"
                '1/2/18: Moved and title hard coded
                ''11/7/05
                'pbcOv.CurrentX = tmOV1Ctrls(OVCOPYINDEX).fBoxX + 15  'fgBoxInsetX
                'pbcOv.CurrentY = tmOV1Ctrls(OVCOPYINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                'pbcOv.Print "AudT"
                If (tgSpf.sCPkEqual = "Y") Then
                    pbcOv.CurrentX = tmOV1Ctrls(OVRANKINDEX).fBoxX + 15  'fgBoxInsetX
                    pbcOv.CurrentY = tmOV1Ctrls(OVRANKINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                    pbcOv.Print "Rank"
                End If
                If (tgSpf.sUsingBBs = "Y") Then
                    If ((Asc(tgSpf.sUsingFeatures6) And BBCLOSEST) = BBCLOSEST) Then
                        pbcOv.CurrentX = tmOV1Ctrls(OVBBOPENINDEX).fBoxX + 15  'fgBoxInsetX
                        pbcOv.CurrentY = tmOV1Ctrls(OVBBOPENINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcOv.Print "BB Len"
                    Else
                        pbcOv.CurrentX = tmOV1Ctrls(OVBBOPENINDEX).fBoxX + 15  'fgBoxInsetX
                        pbcOv.CurrentY = tmOV1Ctrls(OVBBOPENINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcOv.Print "BB Open Len"
                        pbcOv.CurrentX = tmOV1Ctrls(OVBBCLOSEINDEX).fBoxX + 15  'fgBoxInsetX
                        pbcOv.CurrentY = tmOV1Ctrls(OVBBCLOSEINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcOv.Print "BB Close Len"
                    End If
                End If
                pbcOv.FontSize = flFontSize
                pbcOv.FontName = slFontName
                pbcOv.FontSize = flFontSize
                pbcOv.ForeColor = llColor
                pbcOv.FontBold = True
            End If
            If tgSpf.sAllowDailyBuys = "Y" Then
                If imDGSave(2) = 0 Then
                    ilTotalSpots = 0
                    For ilDay = 0 To 6 Step 1
                        ilTotalSpots = ilTotalSpots + Val(smDGSave(3 + ilDay))
                    Next ilDay
                    slStr = Trim$(str$(ilTotalSpots))
                    gSetShow pbcOv, slStr, tmOV1Ctrls(OVSPOTTOTALINDEX)
                Else
                    slStr = ""
                    gSetShow pbcOv, slStr, tmOV1Ctrls(OVSPOTTOTALINDEX)
                End If
                gPaintArea pbcOv, tmOV1Ctrls(OVSPOTTOTALINDEX).fBoxX, tmOV1Ctrls(OVSPOTTOTALINDEX).fBoxY + fgOffset - 15, tmOV1Ctrls(OVSPOTTOTALINDEX).fBoxW - 15, fgBoxGridH, LIGHTYELLOW
            End If
        Else
            llColor = pbcOv.ForeColor
            slFontName = pbcOv.FontName
            flFontSize = pbcOv.FontSize
            pbcOv.ForeColor = BLUE
            pbcOv.FontBold = False
            pbcOv.FontSize = 7
            pbcOv.FontName = "Arial"
            pbcOv.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
            If ((Asc(tgSpf.sOverrideOptions) And SPPREFERREDDT) = SPPREFERREDDT) And (Not mIsLnGame(imLnRowNo)) Then
                For ilLoop = 0 To 6 Step 1
                    pbcOv.CurrentX = tmOV2Ctrls(OV2DAYSINDEX + ilLoop).fBoxX + 15  'fgBoxInsetX
                    pbcOv.CurrentY = tmOV2Ctrls(OV2DAYSINDEX + ilLoop).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                    Select Case ilLoop
                        Case 0
                            pbcOv.Print "Mo"
                        Case 1
                            pbcOv.Print "Tu"
                        Case 2
                            pbcOv.Print "We"
                        Case 3
                            pbcOv.Print "Th"
                        Case 4
                            pbcOv.Print "Fr"
                        Case 5
                            pbcOv.Print "Sa"
                        Case 6
                            pbcOv.Print "Su"
                    End Select
                    pbcOv.CurrentX = tmOV2Ctrls(OV2STARTTIMEINDEX).fBoxX + 15  'fgBoxInsetX
                    pbcOv.CurrentY = tmOV2Ctrls(OV2STARTTIMEINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                    pbcOv.Print "Start Time"
                    pbcOv.CurrentX = tmOV2Ctrls(OV2ENDTIMEINDEX).fBoxX + 15  'fgBoxInsetX
                    pbcOv.CurrentY = tmOV2Ctrls(OV2ENDTIMEINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                    pbcOv.Print "End Time"
                Next ilLoop
            End If
            If mRegionAllowed(imLnRowNo) Then  'Allocation
                pbcOv.CurrentX = tmOV2Ctrls(OV2SPLITINDEX).fBoxX + 15  'fgBoxInsetX
                pbcOv.CurrentY = tmOV2Ctrls(OV2SPLITINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcOv.Print "Region"
            End If
            If ((Asc(tgSpf.sOverrideOptions) And SPALLOCATION) = SPALLOCATION) And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then  'Allocation
                pbcOv.CurrentX = tmOV2Ctrls(OV2ALLOCATIONINDEX).fBoxX + 15  'fgBoxInsetX
                pbcOv.CurrentY = tmOV2Ctrls(OV2ALLOCATIONINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcOv.Print "Allocation %"
            End If
            If (mUsingAcqCost()) And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then   'Acquisition
                pbcOv.CurrentX = tmOV2Ctrls(OV2ACQUISITIONINDEX).fBoxX + 15  'fgBoxInsetX
                pbcOv.CurrentY = tmOV2Ctrls(OV2ACQUISITIONINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcOv.Print "Acquisition $'s"
            End If
            If (Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) = SPSOLOAVAIL Then  'Solo
                pbcOv.CurrentX = tmOV2Ctrls(OV2SOLOINDEX).fBoxX + 15  'fgBoxInsetX
                pbcOv.CurrentY = tmOV2Ctrls(OV2SOLOINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcOv.Print "Island"
            End If
            If (Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) = SP1STPOSITION Then  '1St
                pbcOv.CurrentX = tmOV2Ctrls(OV21STINDEX).fBoxX + 15  'fgBoxInsetX
                pbcOv.CurrentY = tmOV2Ctrls(OV21STINDEX).fBoxY - 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                pbcOv.Print "1st Position"
            End If
            pbcOv.FontSize = flFontSize
            pbcOv.FontName = slFontName
            pbcOv.FontSize = flFontSize
            pbcOv.ForeColor = llColor
            pbcOv.FontBold = True
        End If
    End If
    If imOVType <> 2 Then
        For ilBox = imLBCTCtrls To UBound(tmOV1Ctrls) Step 1
            If ((tgSpf.sAllowDailyBuys <> "Y") Or (plcPower.Visible = True)) And ((ilBox = OVWDINDEX) Or (ilBox = OVSPOTTOTALINDEX)) Then
            Else
                pbcOv.CurrentX = tmOV1Ctrls(ilBox).fBoxX + fgBoxInsetX
                pbcOv.CurrentY = tmOV1Ctrls(ilBox).fBoxY + fgBoxInsetY
                pbcOv.Print tmOV1Ctrls(ilBox).sShow
            End If
        Next ilBox
    Else
        For ilBox = imLBCTCtrls To UBound(tmOV2Ctrls) Step 1
            ilOvPaint = False
            If ilBox <= OV2ENDTIMEINDEX Then
                If ((Asc(tgSpf.sOverrideOptions) And SPPREFERREDDT) = SPPREFERREDDT) And (Not mIsLnGame(imLnRowNo)) Then
                    ilOvPaint = True
                End If
            End If
            If ilBox = OV2SPLITINDEX Then
                If mRegionAllowed(imLnRowNo) Then  'Allocation
                    ilOvPaint = True
                End If
            End If
            If ilBox = OV2ALLOCATIONINDEX Then
                If ((Asc(tgSpf.sOverrideOptions) And SPALLOCATION) = SPALLOCATION) And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then  'Allocation
                    ilOvPaint = True
                End If
            End If
            If ilBox = OV2ACQUISITIONINDEX Then
                If (mUsingAcqCost()) And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then   'Acquisition
                    ilOvPaint = True
                End If
            End If
            If ilBox = OV2SOLOINDEX Then
                If (Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) = SPSOLOAVAIL Then  'Solo
                    ilOvPaint = True
                End If
            End If
            If ilBox = OV21STINDEX Then
                If (Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) = SP1STPOSITION Then  '1 st
                    ilOvPaint = True
                End If
            End If
            If ilOvPaint Then
                pbcOv.CurrentX = tmOV2Ctrls(ilBox).fBoxX + fgBoxInsetX
                pbcOv.CurrentY = tmOV2Ctrls(ilBox).fBoxY + fgBoxInsetY
                pbcOv.Print tmOV2Ctrls(ilBox).sShow
            End If
        Next ilBox
    End If
End Sub

Private Sub pbcOVWD_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            pbcClickFocus.SetFocus
        Exit Sub
    End If
    For ilBox = OV2DAYSINDEX To OV2DAYSINDEX + 6 Step 1
        If (X >= tmDailyCtrls(ilBox).fBoxX) And (X <= tmDailyCtrls(ilBox).fBoxX + tmDailyCtrls(ilBox).fBoxW) Then
            If (Y >= tmDailyCtrls(ilBox).fBoxY) And (Y <= tmDailyCtrls(ilBox).fBoxY + tmDailyCtrls(ilBox).fBoxH) Then
                'If (ilBox >= OV2DAYSINDEX) And (ilBox <= OV2DAYSINDEX + 6) And (imLnSave(8, imLnRowNo) = 0) Then
                If (ilBox >= OV2DAYSINDEX) And (ilBox <= OV2DAYSINDEX + 6) Then
                    mOvSetShow imOVBoxNo
                    imOVBoxNo = ilBox
                    mOvEnableBox ilBox
                Else
                    Beep
                    Exit Sub
                End If
                Exit Sub
            End If
        End If
    Next ilBox
    mOvSetFocus imOVBoxNo
End Sub

Public Sub pbcOVWD_Paint(Index As Integer)
    Dim ilBox As Integer
    
    For ilBox = imLBCTCtrls To UBound(tmDailyCtrls) Step 1
        pbcOVWD(Index).CurrentX = tmDailyCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcOVWD(Index).CurrentY = tmDailyCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcOVWD(Index).Print tmDailyCtrls(ilBox).sShow
    Next ilBox
End Sub

Private Sub pbcPctTrade_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim slStr As String
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    For ilBox = imLBCTCtrls To UBound(tmPTCtrls) Step 1
        If (X >= tmPTCtrls(ilBox).fBoxX) And (X <= tmPTCtrls(ilBox).fBoxX + tmPTCtrls(ilBox).fBoxW) Then
            If (Y >= tmPTCtrls(ilBox).fBoxY) And (Y <= tmPTCtrls(ilBox).fBoxY + tmPTCtrls(ilBox).fBoxH) Then
                slStr = Trim$(smPctTrade)
                If Len(slStr) > 0 Then
                    If Val(slStr) = 0 Then
                        slStr = ""
                    End If
                End If
                If (ilBox = PTAGYCOMMINDEX) And ((slStr = "") Or (lbcAgency.ListIndex <= 1)) Then
                    Beep
                    ilBox = PTTRADEINDEX
                End If
                
                'L.Bianchi
                If (lbcAdvt.ListIndex > 0) Then
                        slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        ilRet = gBinarySearchAdf(Val(slCode))
                        If ilRet <> -1 Then
                            If (tgCommAdf(ilRet).sBillAgyDir = "D") Then
                                Beep
                                ilBox = PTTRADEINDEX
                            End If
                        End If
                End If
                
                mPTSetShow imPTBoxNo
                imPTBoxNo = ilBox
                mPTEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
End Sub

Private Sub pbcPctTrade_Paint()
    Dim ilBox As Integer
'    Dim llColor As Long

    For ilBox = imLBCTCtrls To UBound(tmPTCtrls) Step 1
        pbcPctTrade.CurrentX = tmPTCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcPctTrade.CurrentY = tmPTCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcPctTrade.Print tmPTCtrls(ilBox).sShow
    Next ilBox
End Sub

Private Sub pbcQtPrice_Click()
    If lbcQtPrice.Visible Then
        mAllSetShow 2
        If imDiffMode Then
            If cbcDifference.ListIndex > 0 Then
                Exit Sub
            End If
        End If
    Else
        mAllSetShow 2
        If imDiffMode Then
            If cbcDifference.ListIndex > 0 Then
                Exit Sub
            End If
        End If
        lbcQtPrice.Visible = Not lbcQtPrice.Visible
    End If
End Sub

Private Sub pbcRatio_Click()
    Dim ilBox As Integer
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        Exit Sub
    End If
    If imDBRatio = 0 Then
        pbcRatio.Cls
        imDBRatio = 1
        pbcRatio.CurrentX = -15
        pbcRatio.CurrentY = 0
        pbcRatio.Print "New Actual/Actual"
    Else
        pbcRatio.Cls
        imDBRatio = 0
        pbcRatio.CurrentX = -15
        pbcRatio.CurrentY = 0
        pbcRatio.Print "Actual/Rate Card"
    End If
    mDBSetShow imDBBoxNo
    imDBRowNo = -2
    imDBBoxNo = -1
    mDBSetShow imDB0BoxNo
    ilBox = 10
    imDB0BoxNo = ilBox
    mDBEnableBox ilBox
End Sub

Private Sub pbcRatio_Paint()
    If imDBRatio = 0 Then
        pbcRatio.CurrentX = -15
        pbcRatio.CurrentY = 0
        pbcRatio.Print "Actual/Rate Card"
    Else
        pbcRatio.CurrentX = -15
        pbcRatio.CurrentY = 0
        pbcRatio.Print "New Actual/Actual"
    End If
End Sub

Private Sub pbcRBDatesSpotsSTab_GotFocus(Index As Integer)
    Dim slStr As String
    Dim slvalue As String
    Dim ilRet As Integer

    If GetFocus() <> pbcRBDatesSpotsSTab(Index).HWnd Then
        Exit Sub
    End If
    Do
        If imRBDatesSpotsRow <= 0 Then
            If Index = 1 Then
                mSetRBEquals 4
                frcRBVehSpots.Visible = False
            End If
            Exit Sub
        End If
        imRBDatesSpotsRow = imRBDatesSpotsRow - 1
        'ilNoRows = lbcRBDatesSpots.Height \ fgListHtArial825
        If (imRBDatesSpotsRow < lbcRBDatesSpots(Index).TopIndex) Then
            lbcRBDatesSpots(Index).TopIndex = lbcRBDatesSpots(Index).TopIndex - 1
        End If
        If lbcRBDatesSpots(Index).Selected(imRBDatesSpotsRow) Then
            Exit Do
        End If
    Loop
    slStr = lbcRBDatesSpots(Index).List(imRBDatesSpotsRow)
    ilRet = gParseItem(slStr, 2, "|", slvalue)
    edcRBDatesSpots(Index).Text = slvalue
    edcRBDatesSpots(Index).Move lbcRBDatesSpots(Index).Left + imListField(2), lbcRBDatesSpots(Index).Top + (imRBDatesSpotsRow - lbcRBDatesSpots(Index).TopIndex) * fgListHtArial825 + 15
    edcRBDatesSpots(Index).Visible = True
    edcRBDatesSpots(Index).SetFocus
End Sub

Private Sub pbcRBDatesSpotsTab_GotFocus(Index As Integer)
    Dim slStr As String
    Dim slvalue As String
    Dim ilRet As Integer
    Dim ilNoRows As Integer

    If GetFocus() <> pbcRBDatesSpotsTab(Index).HWnd Then
        Exit Sub
    End If
    Do
        If imRBDatesSpotsRow >= lbcRBDatesSpots(Index).ListCount - 1 Then
            If Index = 1 Then
                mSetRBEquals 4
                frcRBVehSpots.Visible = False
            End If
            Exit Sub
        End If
        imRBDatesSpotsRow = imRBDatesSpotsRow + 1
        ilNoRows = lbcRBDatesSpots(Index).height \ fgListHtArial825
        If imRBDatesSpotsRow >= lbcRBDatesSpots(Index).TopIndex + ilNoRows Then
            lbcRBDatesSpots(Index).TopIndex = lbcRBDatesSpots(Index).TopIndex + 1
        End If
        If lbcRBDatesSpots(Index).Selected(imRBDatesSpotsRow) Then
            Exit Do
        End If
    Loop
    slStr = lbcRBDatesSpots(Index).List(imRBDatesSpotsRow)
    ilRet = gParseItem(slStr, 2, "|", slvalue)
    edcRBDatesSpots(Index).Text = slvalue
    edcRBDatesSpots(Index).Move lbcRBDatesSpots(Index).Left + imListField(2), lbcRBDatesSpots(Index).Top + (imRBDatesSpotsRow - lbcRBDatesSpots(Index).TopIndex) * fgListHtArial825 + 15
    edcRBDatesSpots(Index).Visible = True
    edcRBDatesSpots(Index).SetFocus
End Sub

Private Sub pbcRBVeh_GotFocus(Index As Integer)
    Dim ilBox As Integer
    Dim slStr As String

    If (imRBInLnGridOrSum = 1) And (Index = 1) And (imOVBoxNo >= OVDAYSINDEX) And (imOVBoxNo <= OVENDTIMEINDEX) Then
        Select Case imOVBoxNo
            Case -1
                imOVBoxNo = OVENDTIMEINDEX  'OVPREEMPTINDEX
                ilBox = OVENDTIMEINDEX  'OVPREEMPTINDEX
                mOvEnableBox ilBox
                Exit Sub
            Case OVSTARTTIMEINDEX
                slStr = edcDGDropDown.Text
                If slStr <> "" Then
                    If Not gValidTime(slStr) Then
                        Beep
                        edcDGDropDown.SetFocus
                        Exit Sub
                    End If
                    ilBox = OVENDTIMEINDEX
                    mOvSetShow imOVBoxNo
                    imOVBoxNo = ilBox
                    mOvEnableBox ilBox
                    Exit Sub
                Else
                End If
            Case OVENDTIMEINDEX
                slStr = edcDGDropDown.Text
                If slStr <> "" Then
                    If Not gValidTime(slStr) Then
                        Beep
                        edcDGDropDown.SetFocus
                        Exit Sub
                    End If
                End If
            Case Else
                ilBox = imOVBoxNo + 1
                mOvSetShow imOVBoxNo
                imOVBoxNo = ilBox
                mOvEnableBox ilBox
                Exit Sub
        End Select
    End If
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    mAllSetShow 0
End Sub

Private Sub pbcRBVeh_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRow As Integer
    Dim ilBox As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilRowNo As Integer
    Dim ilLoop As Integer
    Dim slDate As String
    Dim slvalue As String
    Dim slStr As String
    Dim ilRet As Integer

    If Index = 0 Then
        If UBound(tmPB1DP) = LBound(tmPB1DP) Then
            Exit Sub
        End If
    Else
        If UBound(tmRB1DP) = LBound(tmRB1DP) Then
            Exit Sub
        End If
    End If
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = Index
    'Check if sort field selected
    'For ilBox = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
    For ilBox = imLBCTCtrls To UBound(tmRBCtrls) Step 1
        If ((X >= tmRBCtrls(ilBox).fBoxX) And (X <= (tmRBCtrls(ilBox).fBoxX + tmRBCtrls(ilBox).fBoxW))) Then
            If (Y < tmRBCtrls(ilBox).fBoxY - 15) Then
                If (X >= tmRBCtrls(6).fBoxX) And ((sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH)) Then
                Else
                    If Index = 0 Then
                        mRateBarSort Index, ilBox - 1, imDetailSortIndex(), tmPB1DP()
                    Else
                        mRateBarSort Index, ilBox - 1, imSumSortIndex(), tmRB1DP()
                    End If
                    pbcRBVeh_Paint Index
                End If
                Exit Sub
            End If
        End If
    Next ilBox
    'Determine which field is selected
    ilStartRow = 1  'Top location
    ilEndRow = vbcRBVeh(Index).LargeChange + 1
    If Index = 0 Then
        If ilEndRow > UBound(tmPB1DP) Then
            ilEndRow = UBound(tmPB1DP)
        End If
    Else
        If ilEndRow > UBound(tmRB1DP) Then
            ilEndRow = UBound(tmRB1DP)
        End If
    End If
    For ilRow = ilStartRow To ilEndRow Step 1
        'For ilBox = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
        For ilBox = imLBCTCtrls To UBound(tmRBCtrls) Step 1
            If ((X >= tmRBCtrls(ilBox).fBoxX) And (X <= (tmRBCtrls(ilBox).fBoxX + tmRBCtrls(ilBox).fBoxW))) Then
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmRBCtrls(ilBox).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmRBCtrls(ilBox).fBoxY + tmRBCtrls(ilBox).fBoxH)) Then
                    ilRowNo = ilRow + vbcRBVeh(Index).Value
                    If ilBox = 1 Then
                        If Index = 0 Then
                            If (imRBDetailAnchorRow >= 0) And (Shift = 1) Then
                                If ilRowNo > imRBDetailAnchorRow Then
                                    For ilLoop = imRBDetailAnchorRow To ilRowNo Step 1
                                        tmPB1DP(ilLoop).iChk = tmPB1DP(imRBDetailAnchorRow).iChk
                                    Next ilLoop
                                Else
                                    For ilLoop = ilRowNo To imRBDetailAnchorRow Step 1
                                        tmPB1DP(ilLoop).iChk = tmPB1DP(imRBDetailAnchorRow).iChk
                                    Next ilLoop
                                End If
                                If tmPB1DP(imRBDetailAnchorRow).iChk = False Then
                                    imSetAll = False
                                    ckcRBGridAll.Value = vbUnchecked
                                    imSetAll = True
                                End If
                                imRBDetailAnchorRow = -1
                            Else
                                tmPB1DP(ilRowNo - 1).iChk = Not tmPB1DP(ilRowNo - 1).iChk
                                If tmPB1DP(ilRowNo - 1).iChk = False Then
                                    imSetAll = False
                                    ckcRBGridAll.Value = vbUnchecked
                                    imSetAll = True
                                End If
                                imRBDetailAnchorRow = ilRowNo - 1
                            End If
                        Else
                            tmRB1DP(ilRowNo - 1).iChk = Not tmRB1DP(ilRowNo - 1).iChk
                            If imRBView = 1 Then
                                For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                                    If (tmPB1DP(ilLoop).iVefCode = tmRB1DP(ilRowNo - 1).iVefCode) Then
                                        tmPB1DP(ilLoop).iChk = tmRB1DP(ilRowNo - 1).iChk
                                        imSetAll = False
                                        ckcRBGridAll.Value = vbUnchecked
                                        imSetAll = True
                                    End If
                                Next ilLoop
                            ElseIf imRBView = 2 Then
                                For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                                    If (tmPB1DP(ilLoop).iRdfCode = tmRB1DP(ilRowNo - 1).iRdfCode) Then
                                        tmPB1DP(ilLoop).iChk = tmRB1DP(ilRowNo - 1).iChk
                                        imSetAll = False
                                        ckcRBGridAll.Value = vbUnchecked
                                        imSetAll = True
                                    End If
                                Next ilLoop
                            End If
                        End If
                        mRBSum
                        Exit Sub
                    End If
                    If (ilBox = 2) Or ((ilBox = 3) And (Index = 0)) Or ((ilBox = 3) And (Index = 1) And (imRBView <> 2)) Or (ilBox = 6) Or (ilBox = 7) Then
                        If Index = 0 Then
                            tmPB1DP(ilRowNo - 1).iChk = True
                        Else
                            tmRB1DP(ilRowNo - 1).iChk = True
                        End If
                        mRBSum
                        Exit Sub
                    End If
                    If ((ilBox = 6) Or (ilBox = 7) Or (ilBox = 8) Or (ilBox = 9)) And ((sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH)) Then
                        If Index = 0 Then
                            tmPB1DP(ilRowNo - 1).iChk = True
                        Else
                            tmRB1DP(ilRowNo - 1).iChk = True
                        End If
                        mRBSum
                        Exit Sub
                    End If
                    'If ((ilBox = 5) Or (ilBox = 8) Or (ilBox = 9)) And (tgUrf(0).sChgPrices = "V") Then
                    If ((ilBox = 5) Or (ilBox = 8) Or (ilBox = 9)) And (Not mAllowedToChgSpotPrice(-1)) Then
                        If Index = 0 Then
                            tmPB1DP(ilRowNo - 1).iChk = True
                        Else
                            tmRB1DP(ilRowNo - 1).iChk = True
                        End If
                        mRBSum
                        Exit Sub
                    End If
                    If (ilBox = 3) And (Index = 1) And (imRBView = 2) Then
                        'Show overide area
                        mSetTmOVCtrl
                        imRBBox = ilBox
                        imRBRow = ilRowNo
                        mDPAllowedDays tmRB1DP(ilRowNo - 1).iRdfCode, imAllowedDays()
                        For ilLoop = 0 To 6 Step 1
                            imOvDays(ilLoop) = tmRB1DP(ilRowNo - 1).iOvDays(ilLoop)
                        Next ilLoop
                        If imOvDays(0) = -1 Then
                            For ilLoop = OVDAYSINDEX To OVDAYSINDEX + 6 Step 1
                                If imAllowedDays(ilLoop - OVDAYSINDEX + LBound(imAllowedDays)) Then
                                    slStr = "Yes"
                                    imOvDays(ilLoop - OVDAYSINDEX) = 0
                                Else
                                    slStr = "No"
                                    imOvDays(ilLoop - OVDAYSINDEX) = 1
                                End If
                                gSetShow pbcOv, slStr, tmOV1Ctrls(ilLoop)
                            Next ilLoop
                        Else
                            For ilLoop = OVDAYSINDEX To OVDAYSINDEX + 6 Step 1
                                If imOvDays(ilLoop - OVDAYSINDEX) = 0 Then
                                    slStr = "Yes"
                                Else
                                    slStr = "No"
                                End If
                                gSetShow pbcOv, slStr, tmOV1Ctrls(ilLoop)
                            Next ilLoop
                        End If
                        smDGSave(13) = Trim$(tmRB1DP(ilRowNo - 1).sOvStartTime)
                        smDGSave(14) = Trim$(tmRB1DP(ilRowNo - 1).sOvEndTime)
                        slStr = smDGSave(13)
                        gSetShow pbcOv, slStr, tmOV1Ctrls(OVSTARTTIMEINDEX)
                        slStr = smDGSave(14)
                        gSetShow pbcOv, slStr, tmOV1Ctrls(OVENDTIMEINDEX)
                        imOVType = 0
                        pbcOVWD(0).height = 705 '720
                        pbcOv.Width = pbcOVWD(0).Width
                        pbcOv.height = pbcOVWD(0).height
                        pbcOv.Picture = pbcOVWD(0).Picture
                        plcOv.height = pbcOv.height + 345
                        plcOv.Width = pbcOv.Width + 300
                        plcOv.Move plcPower.Left + frcRBSum.Left + pbcRBVeh(Index).Left + tmRBCtrls(ilBox).fBoxX + 30, plcPower.Top + frcRBSum.Top + pbcRBVeh(Index).Top + (ilRow - 1) * (fgBoxGridH + 15) + tmRBCtrls(ilBox).fBoxY + 30
                        pbcOv.Move plcOv.Left + 150, plcOv.Top + 225
                        plcOv.Visible = True
                        pbcOv.Visible = True
                        imDGSave(2) = 1 'Weekly
                        imOVBoxNo = OVENDTIMEINDEX
                        mOvEnableBox imOVBoxNo
                    Else
                        edcRB(imRBInLnGridOrSum).Move tmRBCtrls(ilBox).fBoxX, (ilRow - 1) * (fgBoxGridH + 15) + tmRBCtrls(ilBox).fBoxY, tmRBCtrls(ilBox).fBoxW, tmRBCtrls(ilBox).fBoxH - 15
                        imRBBox = ilBox
                        imRBRow = ilRowNo
                        If Index = 0 Then
                            If (imRBBox = 4) Or (imRBBox = 5) Or (imRBBox = 8) Or (imRBBox = 9) Then
                                tmPB1DP(imRBRow - 1).iChk = True
                                pbcRBVeh_Paint 0
                            End If
                            Select Case imRBBox
                                Case 4
                                    If (imRBMixedSpots) Or (tmPB1DP(imRBRow - 1).lMixStartDate > 0) Then
                                        If imRBRow - vbcRBVeh(0).Value < 6 Then
                                            frcRBVehSpots.Move pbcRBVeh(0).Left + edcRB(0).Left, pbcRBVeh(0).Top + edcRB(0).Top
                                        Else
                                            frcRBVehSpots.Move pbcRBVeh(0).Left + edcRB(0).Left, pbcRBVeh(0).Top + edcRB(0).Top - frcRBVehSpots.height + edcRB(0).height
                                        End If
                                        lbcRBDatesSpots(1).Clear
                                        If (tmPB1DP(imRBRow - 1).lMixStartDate > 0) Then
                                            slDate = Format$(tmPB1DP(imRBRow - 1).lMixStartDate, "m/d/yy")
                                            slStr = smRBMixDatesSpots(tmPB1DP(imRBRow - 1).iMixSpotIndex)
                                            ilLoop = 1
                                            Do
                                                ilRet = gParseItem(slStr, ilLoop, "|", slvalue)
                                                If ilRet <> CP_MSG_NONE Then
                                                    Exit Do
                                                End If
                                                If Left$(slvalue, 1) = "-" Then
                                                    lbcRBDatesSpots(1).AddItem slDate & "|" & Mid$(slvalue, 2)
                                                Else
                                                    lbcRBDatesSpots(1).AddItem slDate & "|" & slvalue
                                                    lbcRBDatesSpots(1).Selected(lbcRBDatesSpots(1).NewIndex) = True
                                                End If
                                                slDate = gIncOneWeek(slDate)
                                                ilLoop = ilLoop + 1
                                            Loop
                                        Else
                                            For ilLoop = 0 To lbcRBDatesSpots(0).ListCount - 1 Step 1
                                                lbcRBDatesSpots(1).AddItem lbcRBDatesSpots(0).List(ilLoop)
                                                If lbcRBDatesSpots(0).Selected(ilLoop) Then
                                                    lbcRBDatesSpots(1).Selected(lbcRBDatesSpots(1).NewIndex) = True
                                                End If
                                            Next ilLoop
                                        End If
                                        lbcRBDatesSpots(1).TopIndex = 0
                                        frcRBVehSpots.Visible = True
                                        Exit Sub
                                    Else
                                        edcRB(0).Text = Trim$(str$(tmPB1DP(imRBRow - 1).lNoSpots))
                                    End If

                                Case 5  'Price
                                    edcRB(0).Text = gLongToStrDec(tmPB1DP(imRBRow - 1).lAvgPrice \ 100, 0)
                                Case 8  'CPP
                                    edcRB(0).Text = Trim$(str$(tmPB1DP(imRBRow - 1).lCPP))
                                Case 9  'CPM
                                    edcRB(0).Text = gLongToStrDec(tmPB1DP(imRBRow - 1).lCPM, 2)
                            End Select
                        Else
                            Select Case imRBBox
                                Case 4
                                    edcRB(1).Text = Trim$(str$(tmRB1DP(imRBRow - 1).lNoSpots))
                                Case 5  'Price
                                    edcRB(1).Text = gLongToStrDec(tmRB1DP(imRBRow - 1).lAvgPrice \ 100, 0)
                                Case 8  'CPP
                                    edcRB(1).Text = Trim$(str$(tmRB1DP(imRBRow - 1).lCPP))
                                Case 9  'CPM
                                    edcRB(1).Text = gLongToStrDec(tmRB1DP(imRBRow - 1).lCPM, 2)
                            End Select
                        End If
                        edcRB(imRBInLnGridOrSum).Visible = True
                        edcRB(imRBInLnGridOrSum).SetFocus
                    End If
                    Exit Sub
                End If
            End If
        Next ilBox
    Next ilRow
End Sub

Private Sub pbcRBVeh_Paint(Index As Integer)
    Dim ilRow As Integer
    Dim ilBox As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilRet As Integer
    Dim slStr As String
    Dim slFont As String
    Dim llRatePop As Long
    Dim llNoWks As Long
    Dim llGrImp As Long
    'Dim llTotalCost As Long
    Dim dlTotalCost As Double 'TTP 10439 - Rerate 21,000,000
    Dim llGRP As Long
    Dim llCPP As Long
    Dim llCPM As Long
    Dim ilRating As Integer
    Dim llAvgAud As Long
    'Dim llTempGRP As Long
    Dim llNoSpots As Long
    Dim llFgColor As Long
    Dim tlPB1DP As PBDPGEN


    mPaintPowerBar Index
    
    On Error GoTo TotalCostErr:

    ilStartRow = vbcRBVeh(Index).Value  'Top location
    ilEndRow = vbcRBVeh(Index).Value + vbcRBVeh(Index).LargeChange
    If (Index = 1) And (imRBView = 1) Then
        For ilRow = ilStartRow To ilEndRow Step 1
            'For ilBox = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
            For ilBox = imLBCTCtrls To UBound(tmRBCtrls) Step 1
                If (ilBox = 2) Or (ilBox = 3) Or (ilBox = 6) Or (ilBox = 7) Or (((ilBox = 8) Or (ilBox = 9)) And ((sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH))) Then
                    gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, LIGHTYELLOW
                Else
                    gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, WHITE
                End If
            Next ilBox
        Next ilRow
    End If
    If (Index = 0) And ((sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH)) Then
        For ilRow = ilStartRow To ilEndRow Step 1
            'For ilBox = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
            For ilBox = imLBCTCtrls To UBound(tmRBCtrls) Step 1
                If (ilBox = 2) Or (ilBox = 3) Or (ilBox = 6) Or (ilBox = 7) Or (ilBox = 8) Or (ilBox = 9) Then
                    gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, LIGHTYELLOW
                Else
                    gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, WHITE
                End If
            Next ilBox
        Next ilRow
    End If
    If Index = 0 Then
        If UBound(tmPB1DP) = LBound(tmPB1DP) Then
            Exit Sub
        End If
    Else
        If UBound(tmRB1DP) = LBound(tmRB1DP) Then
            Exit Sub
        End If
    End If
    If Index = 0 Then
        If ilEndRow >= UBound(tmPB1DP) Then
            ilEndRow = UBound(tmPB1DP) - 1
        End If
    Else
        If ilEndRow >= UBound(tmRB1DP) Then
            ilEndRow = UBound(tmRB1DP) - 1
        End If
    End If
    slFont = pbcRBVeh(Index).FontName
    llFgColor = pbcRBVeh(Index).ForeColor
    For ilRow = ilStartRow To ilEndRow Step 1
        If Index = 0 Then
            tlPB1DP = tmPB1DP(ilRow)
        Else
            tlPB1DP = tmRB1DP(ilRow)
        End If
        pbcRBVeh(Index).FontName = slFont
        pbcRBVeh(Index).ForeColor = llFgColor
        If tlPB1DP.iStdPkg Then
            pbcRBVeh(Index).ForeColor = BLUE
        End If

        'pbcRBVeh(Index).FontBold = True
        If tlPB1DP.iChk Then
            'For ilBox = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
            For ilBox = imLBCTCtrls To UBound(tmRBCtrls) Step 1
                gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, GRAY  'WHITE
            Next ilBox
            pbcRBVeh(Index).FontName = "Monotype Sorts"
            pbcRBVeh(Index).FontBold = False
            pbcRBVeh(Index).CurrentX = tmRBCtrls(1).fBoxX + fgBoxInsetX - 30
            pbcRBVeh(Index).CurrentY = tmRBCtrls(1).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) + 15 '- 60'+ fgBoxInsetY
            pbcRBVeh(Index).Print " 4"
            pbcRBVeh(Index).FontName = slFont
            pbcRBVeh(Index).FontBold = True
        Else
            If Index = 0 Then
                'For ilBox = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
                For ilBox = imLBCTCtrls To UBound(tmRBCtrls) Step 1
                    If (ilBox = 2) Or (ilBox = 3) Or (ilBox = 6) Or (ilBox = 7) Or (((ilBox = 8) Or (ilBox = 9)) And ((sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And OFRESEARCH) <> OFRESEARCH))) Then
                        gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, LIGHTYELLOW
                    Else
                        gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15), tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 15, WHITE
                    End If
                Next ilBox
            End If
        End If
        'Vehicle Name
        ilRet = gParseItem(tlPB1DP.sVehName, 3, "|", slStr)
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(2)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(2).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(2).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(2).sShow
        'Daypart
        slStr = mSetRBDPShowName(tlPB1DP)   'Trim$(tlPB1DP.sDPName)
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(3)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(3).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(3).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(3).sShow
        'Number of Spots
        If ((tlPB1DP.iSpotChg) Or (tlPB1DP.lMixStartDate > 0)) And (Index = 0) Then
            pbcRBVeh(Index).ForeColor = MAGENTA
        End If
        slStr = Trim$(str$(tlPB1DP.lNoSpots))
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(4)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(4).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(4).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(4).sShow
        pbcRBVeh(Index).ForeColor = llFgColor
        If tlPB1DP.iStdPkg Then
            pbcRBVeh(Index).ForeColor = BLUE
        End If
        'Price
        slStr = gLongToStrDec(tlPB1DP.lAvgPrice, 2)
        gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(5)
        If Trim$(slStr) <> Trim$(tmRBCtrls(5).sShow) Then
            slStr = gLongToStrDec(tlPB1DP.lAvgPrice \ 100, 0)
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 0, slStr
            gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(5)
        End If
        pbcRBVeh(Index).CurrentX = tmRBCtrls(5).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(5).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(5).sShow
        'Rating
        If (sgCntrScreen <> "Orders") And ((Asc(tgSpf.sOptionFields) And OFRESEARCH) = OFRESEARCH) Then
            '10/28/14: Handle 2 place Rating
            'slStr = "Rating " & gIntToStrDec(tlPB1DP.iAvgRating, 1)
            If smCntr1or2PlaceRating <> "2" Then
                slStr = gIntToStrDec(tlPB1DP.iAvgRating, 1)
            Else
                slStr = gIntToStrDec(tlPB1DP.iAvgRating, 2)
            End If
            gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(6)
            pbcRBVeh(Index).CurrentX = tmRBCtrls(6).fBoxX + fgBoxInsetX
            pbcRBVeh(Index).CurrentY = tmRBCtrls(6).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            pbcRBVeh(Index).Print tmRBCtrls(6).sShow
        'Audience
            If tgSpf.sSAudData = "H" Then
                slStr = gLongToStrDec(tlPB1DP.lAvgAud, 1)
            ElseIf tgSpf.sSAudData = "N" Then
                slStr = gLongToStrDec(tlPB1DP.lAvgAud, 2)
            ElseIf tgSpf.sSAudData = "U" Then
                slStr = gLongToStrDec(tlPB1DP.lAvgAud, 3)
            Else
                slStr = Trim$(str$(tlPB1DP.lAvgAud))
            End If
            gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(7)
            pbcRBVeh(Index).CurrentX = tmRBCtrls(7).fBoxX + fgBoxInsetX
            pbcRBVeh(Index).CurrentY = tmRBCtrls(7).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            pbcRBVeh(Index).Print tmRBCtrls(7).sShow
            'CPP
            slStr = Trim$(str$(tlPB1DP.lCPP))
            gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(8)
            pbcRBVeh(Index).CurrentX = tmRBCtrls(8).fBoxX + fgBoxInsetX
            pbcRBVeh(Index).CurrentY = tmRBCtrls(8).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            pbcRBVeh(Index).Print tmRBCtrls(8).sShow
            'CPM
            slStr = gLongToStrDec(tlPB1DP.lCPM, 2)
            gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(9)
            pbcRBVeh(Index).CurrentX = tmRBCtrls(9).fBoxX + fgBoxInsetX
            pbcRBVeh(Index).CurrentY = tmRBCtrls(9).fBoxY + (ilRow - ilStartRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            pbcRBVeh(Index).Print tmRBCtrls(9).sShow
        End If
    Next ilRow

    mSetGridCount

    pbcRBVeh(Index).FontName = slFont
    pbcRBVeh(Index).ForeColor = llFgColor
    If Index <> 0 Then
        Exit Sub
    End If
    'pbcRBVeh(Index).FontBold = True
    'Get and show totals
    'For ilBox = LBound(tmRBCtrls) + 3 To UBound(tmRBCtrls) Step 1
    For ilBox = imLBCTCtrls + 3 To UBound(tmRBCtrls) Step 1
        gPaintArea pbcRBVeh(Index), tmRBCtrls(ilBox).fBoxX, tmRBCtrls(ilBox).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) + 30, tmRBCtrls(ilBox).fBoxW - 15, tmRBCtrls(ilBox).fBoxH - 45, LIGHTYELLOW
    Next ilBox
    llRatePop = -1
    'llTotalCost = 0
    dlTotalCost = 0 'TTP 10439 - Rerate 21,000,000
    llGrImp = 0
    llGRP = 0
    llNoSpots = 0
    If edcRBWks(2).Text = "" Then
        llNoWks = 0
    Else
        llNoWks = Val(edcRBWks(2).Text)
    End If
    'ilBox = 0
    ilBox = -1
    For ilRow = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
        'Removed population test 10/29/01 because premiere traffic netwrok has
        'packages may up from different markets (therefore different poluation) resulting
        'population set to zero.
        If tmPB1DP(ilRow).iChk Then 'And (tmPB1DP(ilRow).lPop > 0) Then
            ilBox = ilBox + 1
        End If
    Next ilRow
    'If ilBox >= 1 Then
    If ilBox >= 0 Then
        ReDim Preserve lgLnCost(0 To ilBox) As Long
        ReDim Preserve igLnAvgRating(0 To ilBox) As Integer
        ReDim Preserve lgLnGrImp(0 To ilBox) As Long
        ReDim Preserve lgLnGRP(0 To ilBox) As Long
        'ilBox = 0
        ilBox = -1
        For ilRow = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            If tmPB1DP(ilRow).iChk Then 'And (tmPB1DP(ilRow).lPop > 0) Then
                ilBox = ilBox + 1
                lgLnCost(ilBox) = tmPB1DP(ilRow).dTCost  'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lAvgPrice
                igLnAvgRating(ilBox) = tmPB1DP(ilRow).iAvgRating
                lgLnGrImp(ilBox) = tmPB1DP(ilRow).lGrImp 'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGrImp
                lgLnGRP(ilBox) = tmPB1DP(ilRow).lGRP   'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGRP
                llNoSpots = llNoSpots + tmPB1DP(ilRow).lTNoSpots  'ilNoSpots + llNoWks * tmPB1DP(ilRow).iNoSpots
                'llTotalCost = llTotalCost + tmPB1DP(ilRow).lTCost  'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lAvgPrice
                dlTotalCost = dlTotalCost + tmPB1DP(ilRow).dTCost  'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lAvgPrice'TTP 10439 - Rerate 21,000,000
                If llRatePop = -1 Then
                    llRatePop = tmPB1DP(ilRow).lPop
                Else
                    If llRatePop <> tmPB1DP(ilRow).lPop Then
                        llRatePop = 0
                    End If
                End If
            End If
        Next ilRow
        llFgColor = dlTotalCost
        'gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llNoSpots, llTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
        gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llNoSpots, dlTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
        dlTotalCost = llFgColor
    End If

    If ilBox > 0 Then
        slStr = Trim$(str$(llNoSpots))
    Else
        slStr = ""
    End If
    gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(4)
    pbcRBVeh(Index).CurrentX = tmRBCtrls(4).fBoxX + fgBoxInsetX
    pbcRBVeh(Index).CurrentY = tmRBCtrls(4).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) '+ 30'+ fgBoxInsetY
    pbcRBVeh(Index).Print tmRBCtrls(4).sShow
    'Cost
    If ilBox > 0 Then
        'slStr = gLongToStrDec(llTotalCost, 2)
        slStr = gDblToStrDec(dlTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
        gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(5)
        If Trim$(slStr) <> Trim$(tmRBCtrls(5).sShow) Then
            'slStr = gLongToStrDec(llTotalCost \ 100, 0)
            slStr = gDblToStrDec(dlTotalCost \ 100, 0) 'TTP 10439 - Rerate 21,000,000
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 0, slStr
        End If
    Else
        slStr = ""
    End If
    gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(5)
    pbcRBVeh(Index).CurrentX = tmRBCtrls(5).fBoxX + fgBoxInsetX
    pbcRBVeh(Index).CurrentY = tmRBCtrls(5).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) ' + 30'+ fgBoxInsetY
    pbcRBVeh(Index).Print tmRBCtrls(5).sShow
    If (sgCntrScreen <> "Orders") And ((Asc(tgSpf.sOptionFields) And OFRESEARCH) = OFRESEARCH) Then
        'GRP
        If ilBox > 0 Then
            slStr = gLongToStrDec(llGRP, 1)
        Else
            slStr = ""
        End If
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(6)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(6).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(6).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) ' + 30'+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(6).sShow
        'GrImp
        If ilBox > 0 Then
            If tgSpf.sSAudData = "H" Then
                slStr = gLongToStrDec(llGrImp, 1)
            ElseIf tgSpf.sSAudData = "N" Then
                slStr = gLongToStrDec(llGrImp, 2)
            ElseIf tgSpf.sSAudData = "U" Then
                slStr = gLongToStrDec(llGrImp, 3)
            Else
                slStr = Trim$(str$(llGrImp))
            End If
        Else
            slStr = ""
        End If
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(7)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(7).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(7).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) ' + 30'+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(7).sShow
        'CPP
        If ilBox > 0 Then
            slStr = gLongToStrDec(llCPP, 0)
        Else
            slStr = ""
        End If
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(8)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(8).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(8).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) ' + 30'+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(8).sShow
        'CPM
        If ilBox > 0 Then
            slStr = gLongToStrDec(llCPM, 2)
        Else
            slStr = ""
        End If
        gSetShow pbcRBVeh(Index), slStr, tmRBCtrls(9)
        pbcRBVeh(Index).CurrentX = tmRBCtrls(9).fBoxX + fgBoxInsetX
        pbcRBVeh(Index).CurrentY = tmRBCtrls(9).fBoxY + (vbcRBVeh(0).LargeChange + 1) * (fgBoxGridH + 15) ' + 30'+ fgBoxInsetY
        pbcRBVeh(Index).Print tmRBCtrls(9).sShow
    End If
    Exit Sub
TotalCostErr:
    mClearPB
    'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
    gExceedLimitMsg
    cmcPBCancel_Click
End Sub

Private Sub pbcRevenue_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
    If (Not imUpdateAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    For ilBox = imLBCTCtrls To UBound(tmRSCtrls) Step 1
        If (X >= tmRSCtrls(ilBox).fBoxX) And (X <= tmRSCtrls(ilBox).fBoxX + tmRSCtrls(ilBox).fBoxW) Then
            If (Y >= tmRSCtrls(ilBox).fBoxY) And (Y <= tmRSCtrls(ilBox).fBoxY + tmRSCtrls(ilBox).fBoxH) Then

                If (smRevSetName(ilBox - 1) = "") Then
                    Beep
                    mRSSetFocus imRSBoxNo
                    Exit Sub
                End If
                mRSSetShow imRSBoxNo
                imRSBoxNo = ilBox
                mRSEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mRSSetFocus imRSBoxNo
End Sub

Private Sub pbcRevenue_Paint()
    Dim ilBox As Integer
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer

    llColor = pbcRevenue.ForeColor
    slFontName = pbcRevenue.FontName
    flFontSize = pbcRevenue.FontSize
    pbcRevenue.ForeColor = BLUE
    pbcRevenue.FontBold = False
    pbcRevenue.FontSize = 7
    pbcRevenue.FontName = "Arial"
    pbcRevenue.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    For ilLoop = 0 To 4 Step 1
        pbcRevenue.CurrentX = tmRSCtrls(RSREV1INDEX + ilLoop).fBoxX + 15 'fgBoxInsetX
        pbcRevenue.CurrentY = tmRSCtrls(RSREV1INDEX + ilLoop).fBoxY - 15 '
        pbcRevenue.Print smRevSetName(ilLoop)
    Next ilLoop
    pbcRevenue.FontSize = flFontSize
    pbcRevenue.FontName = slFontName
    pbcRevenue.FontSize = flFontSize
    pbcRevenue.ForeColor = llColor
    pbcRevenue.FontBold = True
    For ilBox = imLBCTCtrls To UBound(tmRSCtrls) Step 1
        pbcRevenue.CurrentX = tmRSCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcRevenue.CurrentY = tmRSCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcRevenue.Print tmRSCtrls(ilBox).sShow
    Next ilBox
End Sub

Private Sub pbcSelect_GotFocus()
    'If pbcAir.Visible Then
    '    cmcAirCancel.SetFocus
    '    Exit Sub
    'End If
    If plcPower.Visible Then
        cmcPBCancel.SetFocus
        Exit Sub
    End If
End Sub

Private Sub pbcSelect_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim ilRet As Integer
    If imInSelect Then
        Exit Sub
    End If
    'If pbcAir.Visible Then
    '    cmcAirCancel.SetFocus
    '    Exit Sub
    'End If
    If plcPower.Visible Then
        cmcPBCancel.SetFocus
        Exit Sub
    End If
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
    For ilBox = imLBCTCtrls To UBound(tmStepCtrls) Step 1
        If (X >= tmStepCtrls(ilBox).fBoxX) And (X <= (tmStepCtrls(ilBox).fBoxX + tmStepCtrls(ilBox).fBoxW)) Then
            If (Y >= tmStepCtrls(ilBox).fBoxY) And (Y <= (tmStepCtrls(ilBox).fBoxY + tmStepCtrls(ilBox).fBoxH)) Then
                If (ilBox = STEP2INDEX) And (imStep1Index < 0) Then
                    Beep
                    Exit For
                End If
                If (ilBox = STEP3INDEX) And (imStep1Index < 0) Then
                    Beep
                    Exit For
                End If
                If plcDemoBar.Visible Then
                    'plcDemoBar.Visible = False
                    cmcDemoBar_Click
                End If
                If grdCPMBuy.Visible Then
                    mCPMSetShow
                    mSetBGColorWhite True
                End If
                mAllSetShow 5
                mStepSetShow imStepBoxNo
                If (ilBox = STEP1INDEX) Or (ilBox = STEP2INDEX) Then
                    'ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
                    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
                End If
                If (ilBox = STEP3INDEX) And (lbcStep(1).ListCount <= 0) Then
                    If lbcStep(1).ListCount <= 0 Then
                        mStep2IndexPop
                    End If
                End If
                imStepBoxNo = ilBox
                mStepEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    If imCEBoxNo > 0 Then
        mCESetFocus imCEBoxNo
    ElseIf imDMBoxNo > 0 Then
        mDmSetFocus imDMBoxNo
    ElseIf imNoBoxNo > 0 Then
        mNoSetFocus imNoBoxNo
    ElseIf imSPBoxNo > 0 Then
        mSPSetFocus imSPBoxNo
    ElseIf imHdBoxNo > 0 Then
        mSetFocus imHdBoxNo
    Else
        mStepSetFocus imStepBoxNo
    End If
End Sub

Public Sub pbcSelect_Paint()
    Dim ilBox As Integer
    mPaintStep
    For ilBox = imLBCTCtrls To UBound(tmStepCtrls) Step 1
        pbcSelect.CurrentX = tmStepCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcSelect.CurrentY = tmStepCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcSelect.Print tmStepCtrls(ilBox).sShow
    Next ilBox
End Sub

Private Sub pbcShareBudget_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilIndex As Integer
    Dim ilBox As Integer
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    For ilBox = imLBCTCtrls To UBound(tmSBCtrls) Step 1
        If (X >= tmSBCtrls(ilBox).fBoxX) And (X <= tmSBCtrls(ilBox).fBoxX + tmSBCtrls(ilBox).fBoxW) Then
            If (Y >= tmSBCtrls(ilBox).fBoxY) And (Y <= tmSBCtrls(ilBox).fBoxY + tmSBCtrls(ilBox).fBoxH) Then
                Select Case ilBox
                    Case SBYPCTINDEX, SBPCT1INDEX, SBPCT2INDEX, SBPCT3INDEX, SBPCT4INDEX, SBPCT5INDEX, SBPCT6INDEX
                        ilIndex = (ilBox - 1) \ 2
                        If smShareBudget(ilIndex) = "" Then
                            Beep
                            mSBSetFocus imSBBoxNo
                            Exit Sub
                        End If
                End Select
                mSBSetShow imSBBoxNo
                imSBBoxNo = ilBox
                mSBEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mSBSetFocus imSBBoxNo
End Sub

Private Sub pbcShareBudget_Paint()
    Dim ilBox As Integer

    For ilBox = imLBCTCtrls To UBound(tmSBCtrls) Step 1
        pbcShareBudget.CurrentX = tmSBCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcShareBudget.CurrentY = tmSBCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcShareBudget.Print tmSBCtrls(ilBox).sShow
    Next ilBox
End Sub

Private Sub pbcShareSTab_GotFocus()
    Dim ilBox As Integer
    Dim slStr As String
    Dim ilFound As Integer

    If GetFocus() <> pbcShareSTab.HWnd Then
        Exit Sub
    End If
    If (imHdBoxNo = CNTRNOINDEX) And (imNoBoxNo = NOPROPINDEX) Then
        slStr = Trim$(edcShareDropDown.Text)
        If Not mOKID(slStr) Then
            edcShareDropDown.Text = slStr
            Exit Sub
        End If
    End If
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If imNoBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            If (imNoBoxNo >= imLBCTCtrls) And (imNoBoxNo <= UBound(tmNoCtrls)) Then
                If mNoTestFields(imNoBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mNoEnableBox imNoBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = -1  'Set-right to left
            ilBox = imNoBoxNo
            Do
                ilFound = True
                Select Case ilBox   'imNoBoxNo
                    Case -1 'Tab from control prior to form area
                        imTabDirection = 0  'Set-Left to right
                        If smPropNo = "" Then
                            If (imStep1Index <= 1) Then
                                ilBox = NOESTINDEX
                            Else
                                ilBox = NOPROPINDEX
                            End If
                        Else
                            ilBox = NOESTINDEX
                        End If
                        If (ilBox = NOESTINDEX) And (tgSpf.sCEstNo <> "Y") Then
                            If sgCntrScreen = "Orders" Then
                                If tgUrf(0).sRefResvType = "I" Then
                                    ilBox = NORESVADVTINDEX
                                Else
                                    If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES) Then
                                        ilBox = NOEDICLIENTCODEINDEX
                                    'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS Then
                                    '    ilBox = NOINVPROJCODEINDEX
                                    Else
                                        If (imStep1Index <> 2) Then
                                            mNoSetShow imNoBoxNo
                                            imNoBoxNo = -1
                                            pbcHdTab.SetFocus
                                            Exit Sub
                                        Else
                                            ilBox = NOPROPINDEX
                                        End If
                                    End If
                                End If
                            Else
                                If tgUrf(0).sRefResvType = "I" Then
                                    ilBox = NORESVADVTINDEX
                                Else
                                    If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES) Then
                                        ilBox = NOEDICLIENTCODEINDEX
                                    'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS Then
                                    '    ilBox = NOINVPROJCODEINDEX
                                    Else
                                        ilBox = NODATEINDEX
                                    End If
                                End If
                            End If
                        End If
                    Case NOPROPINDEX ' (first control within header)
                        mNoSetShow imNoBoxNo
                        imNoBoxNo = -1
                        pbcHdSTab.SetFocus
                        Exit Sub
                    Case NOESTINDEX ' (first control within header)
                        If (imStep1Index <= 1) Or ((imStep1Index > 1) And (sgCntrScreen <> "Orders")) Then
                            mNoSetShow imNoBoxNo
                            imNoBoxNo = -1
                            pbcHdSTab.SetFocus
                            Exit Sub
                        Else
                            ilBox = ilBox - 1   'imNoBoxNo - 1
                        End If
                    Case NOEDICLIENTCODEINDEX
                    'Case NOINVPROJCODEINDEX
                        If tgUrf(0).sRefResvType = "I" Then
                            ilBox = NORESVADVTINDEX
                        Else
                            ilBox = NOESTINDEX
                        End If
                    Case NODATEINDEX
                        slStr = edcShareDropDown.Text
                        If slStr <> "" Then
                            If Not gValidDate(slStr) Then
                                Beep
                                edcShareDropDown.SetFocus
                                Exit Sub
                            End If
                        End If
                        If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES) Then
                            ilBox = NOEDIPRODUCTCODEINDEX
                        'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS Then
                        '    ilBox = NOINVSMSNOINDEX
                        Else
                            If tgUrf(0).sRefResvType = "I" Then
                                ilBox = NORESVADVTINDEX
                            Else
                                ilBox = NOESTINDEX
                            End If
                        End If
                    Case Else
                        ilBox = ilBox - 1   'imNoBoxNo - 1
                End Select
                If (ilBox = NOESTINDEX) And (tgSpf.sCEstNo <> "Y") Then
                    ilFound = False
                End If
            Loop While Not ilFound
            mNoSetShow imNoBoxNo
            imNoBoxNo = ilBox
            mNoEnableBox ilBox
        Case SPERSONINDEX   'Salesperson
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If imSPBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            Select Case imSPBoxNo
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                    If mSPersonBranch(0) Then
                        Exit Sub
                    End If
            End Select
            imTabDirection = -1  'Set-right to left
            Select Case imSPBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = 0  'Set-Left to right
                    ilBox = 1
                Case SPNAME1INDEX ' (first control within header)
                    mSPSetShow imSPBoxNo
                    imSPBoxNo = -1
                    pbcHdSTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imSPBoxNo - 1
            End Select
            mSPSetShow imSPBoxNo
            imSPBoxNo = ilBox
            mSPEnableBox ilBox
        Case COMPINDEX   'Competitive
            If Not imUpdateAllowed Then
                If imCEBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            If (imCEBoxNo = CECOMPINDEX) Or (imCEBoxNo = CECOMPINDEX + 1) Then
                If mMnfBranch(2, imCEBoxNo - CECOMPINDEX) Then
                    Exit Sub
                End If
            End If
            If (imCEBoxNo = CEEXCLINDEX) Or (imCEBoxNo = CEEXCLINDEX + 1) Then
                If mMnfBranch(3, imCEBoxNo - CEEXCLINDEX) Then
                    Exit Sub
                End If
            End If
            If (imCEBoxNo = CEBUSCATINDEX) Then
                If mMnfBranch(1, 0) Then
                    Exit Sub
                End If
            End If
            If (imCEBoxNo >= imLBCTCtrls) And (imCEBoxNo <= UBound(tmCECtrls)) Then
                If mCETestFields(imCEBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mCEEnableBox imCEBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = -1  'Set-right to left
            ilBox = imCEBoxNo
            Do
                ilFound = True
                Select Case ilBox   'imCEBoxNo
                    Case -1 'Tab from control prior to form area
                        imTabDirection = 0  'Set-Left to right
                        ilBox = 1
                        Case CEBUSCATINDEX
                            If tgSpf.sAExcl = "Y" Then
                                If lbcExcl(1).ListIndex <= 1 Then
                                    ilBox = CEEXCLINDEX
                                Else
                                    ilBox = CEEXCLINDEX + 1
                                End If
                            Else
                                If lbcComp(1).ListIndex <= 1 Then
                                    ilBox = CECOMPINDEX
                                Else
                                    ilBox = CECOMPINDEX + 1
                                End If
                            End If
                    Case CECOMPINDEX ' (first control within header)
                        mCESetShow imCEBoxNo
                        imCEBoxNo = -1
                        pbcHdSTab.SetFocus
                        Exit Sub
                    Case Else
                        ilBox = ilBox - 1   'imCEBoxNo - 1
                End Select
                If ((ilBox = CEEXCLINDEX) Or (ilBox = CEEXCLINDEX + 1)) And (tgSpf.sAExcl <> "Y") Then
                    ilFound = False
                End If
                If (ilBox = CEBUSCATINDEX) And ((Asc(tgSpf.sOptionFields) And OFBUSCAT) <> OFBUSCAT) Then
                    ilFound = False
                End If
                If (igRepNetChgAllowed) And (ilBox <> CECOMPINDEX) And (ilBox <> CECOMPINDEX + 1) And (ilBox <> CEBUSCATINDEX) Then
                    ilFound = False
                End If
            Loop While Not ilFound
            mCESetShow imCEBoxNo
            imCEBoxNo = ilBox
            mCEEnableBox ilBox
        Case SHAREINDEX '% Budget
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If imSBBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            Select Case imSPBoxNo
                Case SBYCOMPANYINDEX
                    If mShareBudgetBranch(0, imDoubleClickName, imBSMode, imSBBoxNo, imUpdateAllowed, smShareBudgetCodeTag()) Then
                        Exit Sub
                    End If
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                    If mShareBudgetBranch(1, imDoubleClickName, imBSMode, imSBBoxNo, imUpdateAllowed, smShareBudgetCodeTag()) Then
                        Exit Sub
                    End If
            End Select
            imTabDirection = -1  'Set-right to left
            Select Case imSBBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = 0  'Set-Left to right
                    ilBox = 1
                Case SBYCOMPANYINDEX ' (first control within header)
                    mSBSetShow imSBBoxNo
                    imSBBoxNo = -1
                    pbcHdSTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imSBBoxNo - 1
            End Select
            mSBSetShow imSBBoxNo
            imSBBoxNo = ilBox
            mSBEnableBox ilBox
        Case REVSETINDEX 'Revenue set
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                If imRSBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            If (imRSBoxNo >= imLBCTCtrls) And (imRSBoxNo <= UBound(tmRSCtrls)) Then
                If mRevSetBranch(imRSBoxNo - RSREV1INDEX, imDoubleClickName, imBSMode, imUpdateAllowed, smRevSetCodeTag(), imRSBoxNo) Then
                    Exit Sub
                End If
            End If
            If (imRSBoxNo >= imLBCTCtrls) And (imRSBoxNo <= UBound(tmRSCtrls)) Then
                If mRSTestFields(imRSBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mRSEnableBox imRSBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = -1  'Set-right to left
            Select Case imRSBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = 0  'Set-Left to right
                    ilBox = 1
                Case RSREV1INDEX ' (first control within header)
                    mRSSetShow imRSBoxNo
                    imRSBoxNo = -1
                    pbcHdSTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imRSBoxNo - 1
            End Select
            mRSSetShow imRSBoxNo
            imRSBoxNo = ilBox
            mRSEnableBox ilBox
        Case DEMOINDEX 'Demo Code
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If imDMBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            If (imDMBoxNo >= imLBCTCtrls) And (imDMBoxNo <= UBound(tmDmCtrls)) Then
                If mDmTestFields(imDMBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mDmEnableBox imDMBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = -1  'Set-right to left
            Select Case imDMBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = 0  'Set-Left to right
                    ilBox = 1
                Case DMCPPCPMINDEX ' (first control within header)
                    mDmSetShow imDMBoxNo
                    imDMBoxNo = -1
                    pbcHdSTab.SetFocus
                    Exit Sub
                Case DMDEMOINDEX
                    If tgSaf(0).sHideDemoOnBR = "Y" Then
                        ilBox = imDMBoxNo - 1
                    Else
                        ilBox = imDMBoxNo - 2
                    End If
                Case Else
                    ilBox = imDMBoxNo - 1
            End Select
            mDmSetShow imDMBoxNo
            imDMBoxNo = ilBox
            mDmEnableBox ilBox
        Case TRADEINDEX '% Trade
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                If imPTBoxNo <> -1 Then
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            End If
            imTabDirection = -1  'Set-right to left
            Select Case imPTBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = 0  'Set-Left to right
                    ilBox = 1
                Case PTTRADEINDEX ' (first control within header)
                    mPTSetShow imPTBoxNo
                    imPTBoxNo = -1
                    pbcHdSTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imPTBoxNo - 1
            End Select
            mPTSetShow imPTBoxNo
            imPTBoxNo = ilBox
            mPTEnableBox ilBox
    End Select
End Sub

Private Sub pbcShareTab_GotFocus()
    Dim ilBox As Integer
    Dim slStr As String
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilStart As Integer
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    
    If GetFocus() <> pbcShareTab.HWnd Then
        Exit Sub
    End If
    If (imHdBoxNo = CNTRNOINDEX) And (imNoBoxNo = NOPROPINDEX) Then
        slStr = Trim$(edcShareDropDown.Text)
        If Not mOKID(slStr) Then
            edcShareDropDown.Text = slStr
            Exit Sub
        End If
    End If
    Select Case imHdBoxNo 'Branch on box type (control)
        Case CNTRNOINDEX 'Contract number
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If (imNoBoxNo >= imLBCTCtrls) And (imNoBoxNo <= UBound(tmNoCtrls)) Then
                If imNoBoxNo = NOPROPINDEX Then
                    edcCntrNo.Text = edcShareDropDown.Text
                    If imStep1Index > 1 Then
                        If Not mGetNextCntrNo(hmCHF, lmChfRecPos, lmCntrChfCode) Then
                            edcShareDropDown.Text = edcCntrNo.Text
                            Exit Sub
                        End If
                    End If
                    edcShareDropDown.Text = edcCntrNo.Text
                End If
                If mNoTestFields(imNoBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mNoEnableBox imNoBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = 0  'Set-right to left
            ilBox = imNoBoxNo
            Do
                ilFound = True
                Select Case ilBox   'imNoBoxNo
                    Case -1 'Tab from control prior to form area
                        imTabDirection = -1  'Set-Left to right
                        If (sgCntrScreen = "Orders") Then
                            ilBox = NOESTINDEX
                        Else
                            ilBox = NODATEINDEX
                        End If
                    Case NOESTINDEX
                        If (sgCntrScreen = "Orders") Then
                            If tgUrf(0).sRefResvType = "I" Then
                                ilBox = NORESVADVTINDEX
                            Else
                                mNoSetShow imNoBoxNo
                                imNoBoxNo = -1
                                pbcHdTab.SetFocus
                                Exit Sub
                            End If
                        Else
                            If tgUrf(0).sRefResvType = "I" Then
                                ilBox = NORESVADVTINDEX
                            Else
                                ilBox = NODATEINDEX
                            End If
                        End If
                    Case NORESVADVTINDEX
                        If lbcResvAdvt.ListIndex <= 0 Then
                            If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES) Then
                                ilBox = NOEDICLIENTCODEINDEX
                            'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS Then
                            '    ilBox = NOINVPROJCODEINDEX
                            Else
                                If (sgCntrScreen = "Orders") Then
                                    mNoSetShow imNoBoxNo
                                    imNoBoxNo = -1
                                    pbcHdTab.SetFocus
                                    Exit Sub
                                Else
                                    ilBox = NODATEINDEX
                                End If
                            End If
                        Else
                            ilBox = ilBox + 1   'imNoBoxNo + 1
                        End If
                    Case NORESVORDERINDEX
                        If ((Asc(tgSaf(0).sFeatures6) And EDIAGYCODES) = EDIAGYCODES) Then
                            ilBox = NOEDICLIENTCODEINDEX
                        'If (Asc(smSpfUsingFeatures6) And INVEXPORTPARAMETERS) = INVEXPORTPARAMETERS Then
                        '    ilBox = NOINVPROJCODEINDEX
                        Else
                            If (sgCntrScreen = "Orders") Then
                                mNoSetShow imNoBoxNo
                                imNoBoxNo = -1
                                pbcHdTab.SetFocus
                                Exit Sub
                            Else
                                ilBox = NODATEINDEX 'ilBox + 1   'imNoBoxNo + 1
                            End If
                        End If
                    Case NOEDIPRODUCTCODEINDEX
                    'Case NOINVSMSNOINDEX
                        If (sgCntrScreen = "Orders") Then
                            mNoSetShow imNoBoxNo
                            imNoBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        Else
                            ilBox = ilBox + 1   'imNoBoxNo + 1
                        End If
                    Case NODATEINDEX ' (first control within header)
                        slStr = edcShareDropDown.Text
                        If slStr <> "" Then
                            If Not gValidDate(slStr) Then
                                Beep
                                edcShareDropDown.SetFocus
                                Exit Sub
                            End If
                        End If
                        mNoSetShow imNoBoxNo
                        imNoBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    Case Else
                        ilBox = ilBox + 1   'imNoBoxNo + 1
                End Select
                If (ilBox = NOESTINDEX) And (tgSpf.sCEstNo <> "Y") Then
                    ilFound = False
                End If
            Loop While Not ilFound
            mNoSetShow imNoBoxNo
            imNoBoxNo = ilBox
            mNoEnableBox ilBox
        Case SPERSONINDEX   'Salesperson
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            Select Case imSPBoxNo
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                    If mSPersonBranch(0) Then
                        Exit Sub
                    End If
            End Select
            imTabDirection = 0  'Set-left to right
            Select Case imSPBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = -1  'Set-right to left
                    ilBox = 1
                'Case SPNAME1INDEX, SPNAME2INDEX, SPNAME3INDEX, SPNAME4INDEX, SPNAME5INDEX, SPNAME6INDEX, SPNAME7INDEX, SPNAME8INDEX 'Name
                Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                    If imSPBoxNo = SPNAME1INDEX Then
                        ilStart = 1
                    Else
                        ilStart = 2
                    End If
                    If lbcSPerson(0).ListIndex < ilStart Then
                        'If remaining fields are blank- advance to Planner
                        ilFound = False
                        For ilLoop = imSPBoxNo + imSPNoCol To SPNAME1INDEX + 9 * imSPNoCol Step imSPNoCol
                            ilIndex = (ilLoop - 1) \ imSPNoCol
                            If imSlspIndex(ilIndex) > 1 Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If ilFound Then
                            ilBox = imSPBoxNo + 1
                        Else
                            'ilBox = SPPNAMEINDEX
                            mSPSetShow imSPBoxNo
                            imSPBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        End If
                    Else
                        ilBox = imSPBoxNo + 1
                    End If
                Case SPNAME1INDEX + 10 * imSPNoCol - 1
                    mSPSetShow imSPBoxNo
                    imSPBoxNo = -1
                    pbcHdTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imSPBoxNo + 1
            End Select
            mSPSetShow imSPBoxNo
            imSPBoxNo = ilBox
            mSPEnableBox ilBox
        Case COMPINDEX   'Competitive
            If Not imUpdateAllowed Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If (imCEBoxNo = CECOMPINDEX) Or (imCEBoxNo = CECOMPINDEX + 1) Then
                If mMnfBranch(2, imCEBoxNo - CECOMPINDEX) Then
                    Exit Sub
                End If
            End If
            If (imCEBoxNo = CEEXCLINDEX) Or (imCEBoxNo = CEEXCLINDEX + 1) Then
                If mMnfBranch(3, imCEBoxNo - CEEXCLINDEX) Then
                    Exit Sub
                End If
            End If
            If (imCEBoxNo = CEBUSCATINDEX) Then
                If mMnfBranch(1, 0) Then
                    Exit Sub
                End If
            End If
            If (imCEBoxNo >= imLBCTCtrls) And (imCEBoxNo <= UBound(tmCECtrls)) Then
                If mCETestFields(imCEBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mCEEnableBox imCEBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = 0  'Set-Left to right
            ilBox = imCEBoxNo
            Do
                ilFound = True
                Select Case ilBox   'imCEBoxNo
                    Case -1 'Shift tab from button
                        imTabDirection = -1  'Set-Right to left
                        ilBox = CEBUSCATINDEX
                        Case CECOMPINDEX
                            If lbcComp(0).ListIndex <= 1 Then
                                If lbcComp(1).ListIndex <= 1 Then
                                    If tgSpf.sAExcl = "Y" Then
                                        ilBox = CEEXCLINDEX
                                    Else
                                        ilBox = CEBUSCATINDEX
                                    End If
                                Else
                                    ilBox = ilBox + 1   'imCEBoxNo + 1
                                End If
                            Else
                                ilBox = ilBox + 1   'imCEBoxNo + 1
                            End If
                    Case CECOMPINDEX + 1
                        If tgSpf.sAExcl = "Y" Then
                            ilBox = CEEXCLINDEX
                        Else
                            ilBox = CEBUSCATINDEX
                        End If
                    Case CEEXCLINDEX
                        If lbcExcl(0).ListIndex <= 1 Then
                            If lbcExcl(1).ListIndex <= 1 Then
                                ilBox = CEBUSCATINDEX
                            Else
                                ilBox = ilBox + 1   'imCEBoxNo + 1
                            End If
                        Else
                            ilBox = ilBox + 1   'imCEBoxNo + 1
                        End If
                    Case CEBUSCATINDEX
                        mCESetShow imCEBoxNo
                        imCEBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    Case Else
                        ilBox = ilBox + 1   'imCEBoxNo + 1
                End Select
                If ((ilBox = CEEXCLINDEX) Or (ilBox = CEEXCLINDEX + 1)) And (tgSpf.sAExcl <> "Y") Then
                    ilFound = False
                End If
                If (ilBox = CEBUSCATINDEX) And ((Asc(tgSpf.sOptionFields) And OFBUSCAT) <> OFBUSCAT) Then
                    ilFound = False
                End If
                If (igRepNetChgAllowed) And (ilBox <> CECOMPINDEX) And (ilBox <> CECOMPINDEX + 1) And (ilBox <> CEBUSCATINDEX) Then
                    ilFound = False
                End If
            Loop While Not ilFound
            mCESetShow imCEBoxNo
            imCEBoxNo = ilBox
            mCEEnableBox ilBox
        Case SHAREINDEX '% Budget
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            Select Case imSBBoxNo
                Case SBYCOMPANYINDEX
                    If mShareBudgetBranch(0, imDoubleClickName, imBSMode, imSBBoxNo, imUpdateAllowed, smShareBudgetCodeTag()) Then
                        Exit Sub
                    End If
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                    If mShareBudgetBranch(1, imDoubleClickName, imBSMode, imSBBoxNo, imUpdateAllowed, smShareBudgetCodeTag()) Then
                        Exit Sub
                    End If
            End Select
            imTabDirection = 0  'Set-left to right
            Select Case imSBBoxNo
                Case -1 'Tab from control prior to form area
                    imTabDirection = -1  'Set-right to left
                    ilBox = SBYPCTINDEX
                Case SBYCOMPANYINDEX
                    If lbcShareBudget(0).ListIndex < 2 Then
                        'If remaining fields are blank- advance to Planner
                        ilFound = False
                        For ilLoop = imSBBoxNo + 2 To SBCOMPANY6INDEX Step 2
                            ilIndex = ilLoop \ 2
                            If imShareBudgetIndex(ilIndex) > 1 Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If ilFound Then
                            ilBox = imSBBoxNo + 1
                        Else
                            mSBSetShow imSBBoxNo
                            imSBBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        End If
                    Else
                        ilBox = imSBBoxNo + 1
                    End If
                Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                    If lbcShareBudget(1).ListIndex < 2 Then
                        'If remaining fields are blank- advance to Planner
                        ilFound = False
                        For ilLoop = imSBBoxNo + 2 To SBCOMPANY6INDEX Step 2
                            ilIndex = ilLoop \ 2
                            If imShareBudgetIndex(ilIndex) > 1 Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If ilFound Then
                            ilBox = imSBBoxNo + 1
                        Else
                            mSBSetShow imSBBoxNo
                            imSBBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        End If
                    Else
                        ilBox = imSBBoxNo + 1
                    End If
                Case SBPCT6INDEX ' (first control within header)
                    mSBSetShow imSPBoxNo
                    imSBBoxNo = -1
                    pbcHdTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imSBBoxNo + 1
            End Select
            mSBSetShow imSBBoxNo
            imSBBoxNo = ilBox
            mSBEnableBox ilBox
        Case REVSETINDEX 'Revenue set
            'If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
            If (Not imUpdateAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If mRevSetBranch(imRSBoxNo - RSREV1INDEX, imDoubleClickName, imBSMode, imUpdateAllowed, smRevSetCodeTag(), imRSBoxNo) Then
                Exit Sub
            End If
            If (imRSBoxNo >= imLBCTCtrls) And (imRSBoxNo <= UBound(tmRSCtrls)) Then
                If mRSTestFields(imRSBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mRSEnableBox imRSBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = 0  'Set-Left to right
            Select Case imRSBoxNo
                Case -1 'Shift tab from button
                    imTabDirection = -1  'Set-Right to left
                    ilBox = 1
                Case RSREV5INDEX
                    mRSSetShow imRSBoxNo
                    imRSBoxNo = -1
                    pbcHdTab.SetFocus
                    Exit Sub
                Case Else
                    ilFound = False
                    For ilLoop = imRSBoxNo + 1 To RSREV5INDEX Step 1
                        If (smRevSetName(ilLoop - 1) <> "") Then
                            ilBox = ilLoop
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        mRSSetShow imRSBoxNo
                        imRSBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    End If
            End Select
            mRSSetShow imRSBoxNo
            imRSBoxNo = ilBox
            mRSEnableBox ilBox
        Case DEMOINDEX 'Demo Code
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If (imDMBoxNo >= imLBCTCtrls) And (imDMBoxNo <= UBound(tmDmCtrls)) Then
                If mDmTestFields(imDMBoxNo, ALLMANDEFINED + NOMSG) = NO Then
                    Beep
                    mDmEnableBox imDMBoxNo
                    Exit Sub
                End If
            End If
            imTabDirection = 0  'Set-Left to right
            Select Case imDMBoxNo
                Case -1 'Shift tab from button
                    imTabDirection = -1  'Set-Right to left
                    If imCppCpm = 0 Then
                        ilBox = DMCPPCPMINDEX
                    Else
                        ilBox = DMVALUEINDEX + 2 * (tgSpf.iATargets - 1)
                    End If
                Case DMCPPCPMINDEX
                    If imCppCpm = 0 Then
                        If (tgSaf(0).sHideDemoOnBR <> "Y") Then
                            mDmSetShow imDMBoxNo
                            imDMBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        End If
                    End If
                    If (tgSaf(0).sHideDemoOnBR <> "Y") Then
                        ilBox = imDMBoxNo + 2
                    Else
                        ilBox = imDMBoxNo + 1
                    End If
                Case DMHIDEDEMOINDEX
                    If imCppCpm = 0 Then
                        mDmSetShow imDMBoxNo
                        imDMBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    End If
                    ilBox = imDMBoxNo + 1
                Case DMDEMOINDEX
                    If lbcDemo(0).ListIndex = 0 Then
                        smTarget(0) = ""
                        If tgSpf.iATargets <= 1 Then
                            mDmSetShow imDMBoxNo
                            imDMBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        Else
                            ilBox = DMDEMOINDEX + 2
                        End If
                    Else
                        ilBox = imDMBoxNo + 1
                    End If
                Case DMDEMOINDEX + 2
                    If lbcDemo(1).ListIndex = 0 Then
                        smTarget(1) = ""
                        If tgSpf.iATargets <= 2 Then
                            mDmSetShow imDMBoxNo
                            imDMBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        Else
                            ilBox = DMDEMOINDEX + 4
                        End If
                    Else
                        ilBox = imDMBoxNo + 1
                    End If
                Case DMDEMOINDEX + 4
                    If lbcDemo(2).ListIndex = 0 Then
                        smTarget(2) = ""
                        If tgSpf.iATargets <= 3 Then
                            mDmSetShow imDMBoxNo
                            imDMBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        Else
                            ilBox = DMDEMOINDEX + 6
                        End If
                    Else
                        ilBox = imDMBoxNo + 1
                    End If
                Case DMDEMOINDEX + 6
                    If lbcDemo(3).ListIndex = 0 Then
                        smTarget(3) = ""
                        mDmSetShow imDMBoxNo
                        imDMBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    Else
                        ilBox = imDMBoxNo + 1
                    End If
                Case DMVALUEINDEX + 2 * (tgSpf.iATargets - 1)
                    mDmSetShow imDMBoxNo
                    imDMBoxNo = -1
                    pbcHdTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imDMBoxNo + 1
            End Select
            mDmSetShow imDMBoxNo
            imDMBoxNo = ilBox
            mDmEnableBox ilBox
        Case TRADEINDEX '% Trade
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            imTabDirection = 0  'Set-Left to right
            Select Case imPTBoxNo
                Case -1 'Shift tab from button
                    imTabDirection = -1  'Set-Right to left
                    slStr = Trim$(smPctTrade)
                    If Len(slStr) > 0 Then
                        If Val(slStr) = 0 Then
                            ilBox = PTTRADEINDEX
                        Else
                            ilBox = PTAGYCOMMINDEX
                        End If
                    Else
                        ilBox = PTTRADEINDEX
                    End If
                Case PTTRADEINDEX
                    'L.Bianchi
                    If (lbcAdvt.ListIndex > 0) Then
                        slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        ilRet = gBinarySearchAdf(Val(slCode))
                        If ilRet <> -1 Then
                            If (tgCommAdf(ilRet).sBillAgyDir = "D") Then
                                mPTSetShow imPTBoxNo
                                imPTBoxNo = -1
                                pbcHdTab.SetFocus
                                Exit Sub
                            End If
                        End If
                    End If
                    
                    If (lbcAgency.ListIndex <= 1) Then  'Direct or not defined
                        mPTSetShow imPTBoxNo
                        imPTBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    End If
                    slStr = Trim$(edcShareDropDown.Text)
                    If Len(slStr) > 0 Then
                        If Val(slStr) = 0 Then
                            mPTSetShow imPTBoxNo
                            imPTBoxNo = -1
                            pbcHdTab.SetFocus
                            Exit Sub
                        Else
                            ilBox = PTAGYCOMMINDEX
                        End If
                    Else
                        mPTSetShow imPTBoxNo
                        imPTBoxNo = -1
                        pbcHdTab.SetFocus
                        Exit Sub
                    End If
                Case PTAGYCOMMINDEX
                    mPTSetShow imPTBoxNo
                    imPTBoxNo = -1
                    pbcHdTab.SetFocus
                    Exit Sub
                Case Else
                    ilBox = imPTBoxNo + 1
            End Select
            mPTSetShow imPTBoxNo
            imPTBoxNo = ilBox
            mPTEnableBox ilBox
    End Select
End Sub

Private Sub pbcSPerson_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilIndex As Integer
    Dim ilBox As Integer
    If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    'For ilBox = LBound(tmSPCtrls) To UBound(tmSPCtrls) Step 1
    For ilBox = imLBCTCtrls To UBound(tmSPCtrls) Step 1
        If (X >= tmSPCtrls(ilBox).fBoxX) And (X <= tmSPCtrls(ilBox).fBoxX + tmSPCtrls(ilBox).fBoxW) Then
            If (Y >= tmSPCtrls(ilBox).fBoxY) And (Y <= tmSPCtrls(ilBox).fBoxY + tmSPCtrls(ilBox).fBoxH) Then
                Select Case ilBox
                    Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                    Case Else
                        ilIndex = (ilBox - 1) \ imSPNoCol
                        If smSlspName(ilIndex) = "" Then
                            Beep
                            mSPSetFocus imSPBoxNo
                            Exit Sub
                        End If
                End Select
                mSPSetShow imSPBoxNo
                imSPBoxNo = ilBox
                mSPEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mSPSetFocus imSPBoxNo
End Sub

Private Sub pbcSPerson_Paint()
    Dim ilBox As Integer
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer
    Dim ilGp As Integer
    Dim slComm As String
    ReDim slTComm(0 To 9) As String

    llColor = pbcSPerson.ForeColor
    slFontName = pbcSPerson.FontName
    flFontSize = pbcSPerson.FontSize
    pbcSPerson.ForeColor = BLUE
    pbcSPerson.FontBold = False
    pbcSPerson.FontSize = 7
    pbcSPerson.FontName = "Arial"
    pbcSPerson.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    If tgSpf.sSubCompany = "Y" Then
        pbcSPerson.CurrentX = tmSPCtrls(2).fBoxX + 15
        pbcSPerson.CurrentY = 15
        pbcSPerson.Print "Sub-Company"
        pbcSPerson.CurrentX = tmSPCtrls(3).fBoxX + 15
        pbcSPerson.CurrentY = 15
        pbcSPerson.Print "Revenue"
        pbcSPerson.CurrentX = tmSPCtrls(3).fBoxX + 15
        pbcSPerson.Print "Share %"
    ElseIf tgSpf.sCommByCntr = "Y" Then
        pbcSPerson.CurrentX = tmSPCtrls(2).fBoxX + 15
        pbcSPerson.CurrentY = 15
        pbcSPerson.Print "Commission"
        pbcSPerson.CurrentX = tmSPCtrls(2).fBoxX + 15
        pbcSPerson.Print "%"
        pbcSPerson.CurrentX = tmSPCtrls(3).fBoxX + 15
        pbcSPerson.CurrentY = 15
        pbcSPerson.Print "Rev/Comm"
        pbcSPerson.CurrentX = tmSPCtrls(3).fBoxX + 15
        pbcSPerson.Print "Share %"
    Else
        pbcSPerson.CurrentX = tmSPCtrls(2).fBoxX + 15
        pbcSPerson.CurrentY = 15
        pbcSPerson.Print "Rev/Comm"
        pbcSPerson.CurrentX = tmSPCtrls(2).fBoxX + 15
        pbcSPerson.Print "Share %"
    End If
    pbcSPerson.FontSize = flFontSize
    pbcSPerson.FontName = slFontName
    pbcSPerson.FontSize = flFontSize
    pbcSPerson.ForeColor = llColor
    pbcSPerson.FontBold = True

    If tgSpf.sSubCompany = "Y" Then
        For ilLoop = 0 To 9 Step 1
            slTComm(ilLoop) = ""
        Next ilLoop
        For ilGp = 0 To 9 Step 1
            If Trim$(smSlspField2(ilGp)) <> "" Then
                slComm = "0.0"
                ilBox = ilGp
                For ilLoop = 0 To 9 Step 1
                    If imSlspIndex(ilLoop) >= 2 Then
                        If StrComp(smSlspField2(ilGp), smSlspField2(ilLoop), 1) = 0 Then
                            If ilLoop < ilGp Then
                                ilBox = -1
                                Exit For
                            End If
                            slComm = gAddStr(slComm, smSlspField4(ilLoop))
                            ilBox = ilLoop
                        End If
                    End If
                Next ilLoop
                If ilBox >= 0 Then
                    slTComm(ilBox) = slComm
                End If
            End If
        Next ilGp
    End If
    ilGp = imSPNoCol
    'For ilBox = LBound(tmSPCtrls) To UBound(tmSPCtrls) Step 1
    For ilBox = imLBCTCtrls To UBound(tmSPCtrls) Step 1
        pbcSPerson.CurrentX = tmSPCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcSPerson.CurrentY = tmSPCtrls(ilBox).fBoxY - 15
        pbcSPerson.Print tmSPCtrls(ilBox).sShow
        If tgSpf.sSubCompany = "Y" Then
            If ilBox = ilGp Then
                pbcSPerson.CurrentX = tmSPCtrls(ilBox).fBoxX + tmSPCtrls(ilBox).fBoxW + fgBoxInsetX + 30
                pbcSPerson.CurrentY = tmSPCtrls(ilBox).fBoxY - 15
                pbcSPerson.Print slTComm((ilBox - 1) \ imSPNoCol)
                ilGp = ilGp + imSPNoCol
            End If
        End If
    Next ilBox
End Sub

Private Sub pbcStepSTab_GotFocus()
    Dim ilBox As Integer
    If (GetFocus() <> pbcStepSTab.HWnd) Then
        Exit Sub
    End If
    If Not imFirstTimeStep Then
        Exit Sub
    End If
    If imInSelect Then
        Exit Sub
    End If
    If imDeactivated Then
        imDeactivated = False
        cmcCancel.SetFocus
        Exit Sub
    End If
    imTabDirection = -1  'Set-Right to left
    mAllSetShow 5
    If (imStepBoxNo >= imLBCTCtrls) And (imStepBoxNo <= UBound(tmStepCtrls)) Then
        If mStepTestFields(imStepBoxNo, ALLMANDEFINED + NOMSG) = NO Then
            Beep
            mStepEnableBox imStepBoxNo
            Exit Sub
        End If
    End If
    Select Case imStepBoxNo
        Case -1
            imTabDirection = 0  'Set-Left to right
            ilBox = STEP1INDEX
            mSetCommands
        Case 1 'Task
            Exit Sub
        Case Else
            ilBox = imStepBoxNo - 1
    End Select
    mStepSetShow imStepBoxNo
    imStepBoxNo = ilBox
    mStepEnableBox ilBox
End Sub

Private Sub pbcStepSTab_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcStepTab_GotFocus()
    Dim ilBox As Integer
    If GetFocus() <> pbcStepTab.HWnd Then
        Exit Sub
    End If
    If Not imFirstTimeStep Then
        Exit Sub
    End If
    If imInSelect Then
        Exit Sub
    End If
    imTabDirection = 0  'Set-Left to right
    mAllSetShow 5
    If (imStepBoxNo >= imLBCTCtrls) And (imStepBoxNo <= UBound(tmStepCtrls)) Then
        If mStepTestFields(imStepBoxNo, ALLMANDEFINED + NOMSG) = NO Then
            Beep
            mStepEnableBox imStepBoxNo
            Exit Sub
        End If
    End If
    Select Case imStepBoxNo
        Case -1
            imTabDirection = -1  'Set-Right to left
            ilBox = STEP1INDEX
            mSetCommands
        Case STEP3INDEX 'Task
            If tmcClick.Enabled Then
                mSelectChange
            End If
            If pbcHdSTab.Enabled Then
                mStepSetShow imStepBoxNo
                imFirstTimeStep = False
                imStepBoxNo = -1
                pbcHdSTab.SetFocus
            Else
                edcStepDropDown.SetFocus
            End If
            Exit Sub
        Case Else
            ilBox = imStepBoxNo + 1
    End Select
    mStepSetShow imStepBoxNo
    imStepBoxNo = ilBox
    mStepEnableBox ilBox
End Sub

Private Sub pbcStepTab_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub pbcSumType_KeyPress(Index As Integer, KeyAscii As Integer)
    If Index = 3 Then
        If lmCPMEnableCol = CPMPRICETYPE Then
            If KeyAscii = Asc("F") Or (KeyAscii = Asc("f")) Then
                grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE) = "Flat Rate"
                imCPMChg = True
            ElseIf KeyAscii = Asc("C") Or (KeyAscii = Asc("c")) Then
                grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE) = "CPM"
                imCPMChg = True
            End If
            If KeyAscii = Asc(" ") Then
                If (Trim$(grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE)) = "") Or (Trim$(grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE)) = "Flat Rate") Then
                    grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE) = "CPM"
                Else
                    grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE) = "Flat Rate"
                End If
                imCPMChg = True
            End If
            pbcSumType(3).Cls
            pbcSumType_Paint 3
        End If
    End If
End Sub

Private Sub pbcSumType_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRowNo As Integer
    Dim ilSvLnRowNo As Integer
    Dim ilSvLnBoxNo As Integer
    Dim slStr As String
    Dim ilMax As Integer
    
    If grdCPMBuy.Visible And Index = 2 Then
        'Switch sort
        grdCPMBuy.Redraw = False
        gSetMousePointer grdCPMBuy, grdCPMBuy, vbHourglass
        grdCPMBuy.Col = grdCPMBuy.MouseCol
        If imCPMSortMethod = 0 Then
            'grdCPMBuy.TextMatrix(0, CPMID) = "ID-#"
            imCPMSortMethod = 1
            gCPMSort True
        Else
            'grdCPMBuy.TextMatrix(0, CPMID) = "ID-Std"
            imCPMSortMethod = 0
            gCPMSort False
        End If
        pbcSumType(2).Cls
        pbcSumType_Paint 2
        gSetMousePointer grdCPMBuy, grdCPMBuy, vbDefault
        grdCPMBuy.Redraw = True
        Exit Sub
    End If
    If grdCPMBuy.Visible And Index = 3 Then
        grdCPMBuy.Redraw = False
        gSetMousePointer grdCPMBuy, grdCPMBuy, vbHourglass
        If (Trim$(grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE)) = "") Or (Trim$(grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE)) = "Flat Rate") Then
            grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE) = "CPM"
        Else
            grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE) = "Flat Rate"
        End If
        imCPMChg = True
        pbcSumType(3).Cls
        pbcSumType_Paint 3
        gSetMousePointer grdCPMBuy, grdCPMBuy, vbDefault
        grdCPMBuy.Redraw = True
        Exit Sub
    End If
    If Index = 0 Then
        If imSumType = 0 Then
            pbcSumType(0).Cls
            imSumType = 1
            pbcSumType(0).CurrentX = -15
            pbcSumType(0).CurrentY = 0
            pbcSumType(0).Print "Package"
        Else
            pbcSumType(0).Cls
            imSumType = 0
            pbcSumType(0).CurrentX = -15
            pbcSumType(0).CurrentY = 0
            pbcSumType(0).Print "Hidden"
        End If
        pbcDemoBar(2).Cls
        pbcDemoBar(3).Cls
        mSummary
        'DoEvents
        If imDBTotals = 5 Then
            pbcDemoBar_Paint 2
        Else
            pbcDemoBar_Paint 3
        End If
    Else
        If imDiffMode Then
            If cbcDifference.ListIndex > 0 Then
                Exit Sub
            End If
        End If
        Screen.MousePointer = vbHourglass
        'If ((imLnBoxNo >= WKSPOTSINDEX) And (imLnBoxNo <= WKSPOTSINDEX + 12)) Or (imLnBoxNo = PRICEINDEX) Then
        '    mSetTotalsFrmWks
        'End If
        ilSvLnBoxNo = imLnBoxNo
       '10843 remove dead code
'        If tgSpf.sCLnStdQt = "Y" Then
'            mAllSetShow 8
'            'If imLnBoxNo = PRICEINDEX Then
'                mLnSetShow imLnBoxNo
'            '    imLnBoxNo = -1
'            'End If
'            If imLnTotalType < 0 Then
'                imLnTotalType = 0
'            Else
'                imLnTotalType = imLnTotalType + 1
'                If imLnTotalType >= lbcQtPrice.ListCount Then
'                    imLnTotalType = 0
'                End If
'            End If
'            lacPrice(0).Caption = lbcQtPrice.List(imLnTotalType)
'            If imLnTotalType > 1 Then
'                'pbcLine_MouseUp 0, 0, CSng(lmLnHotSpot(3, 1)), CSng(lmLnHotSpot(3, 2))
'                imHSCurWkNo = 13 * (imLnTotalType - 2) + 1
'            End If
'            imInQtPrice = True
'            lbcQtPrice.ListIndex = imLnTotalType
'            imInQtPrice = False
'        Else
            'If imLnBoxNo = PRICEINDEX Then
                mLnSetShow imLnBoxNo
            '    imLnBoxNo = -1
            'End If
            'If (sgCntrScreen <> "Orders") And ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (tgSpf.sGUsePropSys = "Y") Then
            If (sgCntrScreen <> "Orders") And ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (tgSpf.sGUsePropSys = "Y") Then
                If imLnTotalType = 0 Then
                    imLnTotalType = 1
                    lacPrice(0).Caption = "Total Price"    ' & sgLF & sgCR & "Price"
                ElseIf imLnTotalType = 1 Then
                    imLnTotalType = 2
                    lacPrice(0).Caption = "Research"    ' & sgLF & sgCR & "Price"
                Else
                    imLnTotalType = 0
                    lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
                End If
                If imLnTotalType <> 2 Then
                    lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
                    pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
                Else
                    lacPrice(0).height = tmLnCtrls(SPOTSINDEX).fBoxY / 2 + 15
                    pbcSumType(1).height = tmLnCtrls(SPOTSINDEX).fBoxY / 2 + 15
                    mResearchSubTitles
                End If
            Else
                lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
                pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
                If imLnTotalType = 0 Then
                    imLnTotalType = 1
                    lacPrice(0).Caption = "Total Price"    ' & sgLF & sgCR & "Price"
                Else
                    imLnTotalType = 0
                    lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
                End If
            End If
            pbcSumType(1).Cls
            pbcSumType_Paint 1
        'End If
        pbcLine.Cls
        ilSvLnRowNo = imLnRowNo
        ilMax = UBound(tgClfCntr) - 1
        If tgClfCntr(UBound(tgClfCntr)).iFirstCff >= 0 Then
            ilMax = UBound(tgClfCntr)
        End If
        For ilRowNo = LBound(tgClfCntr) + 1 To ilMax + 1 Step 1
            imLnRowNo = ilRowNo
            'mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf
            'If (tgClfCntr(imLnRowNo - 1).iSPChg = False) Or (tgUrf(0).sUseComputeCMC <> "I") Then
                mGetLnPriceInfo imLnRowNo, slStr, imLnTotalType, PRICEINDEX
            'End If
        Next ilRowNo
        'If ((tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10)) And (tgSpf.sGUsePropSys = "Y") And (imLnTotalType = 2) Then
        If ((tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH))) And (tgSpf.sGUsePropSys = "Y") And (imLnTotalType = 2) Then
            mSummary
            lacAudTotals_Click
            pbcLnTotal_Paint
        End If
        mCntrTotal
        imLnRowNo = ilSvLnRowNo
       '10843 remove dead code
'        If tgSpf.sCLnStdQt = "Y" Then
'            pbcLnTotal.Cls
'            pbcLnDates.Cls
'            pbcLine.Cls
'            pbcLine_Paint
'            pbcLnTotal_Paint
'            pbcLnDates_Paint
'            If plcDemoBar.Visible Then
'                mBuildWkInfo True, False, False
'                pbcDemoBar(1).Cls
'                pbcDemoBar_Paint 1
'            End If
'        Else
            pbcLine_Paint
   '     End If
        If ((imLnBoxNo >= imLBCTCtrls) And (imLnBoxNo <= UBound(tmLnCtrls))) And (ilSvLnBoxNo <> PRICEINDEX) Then
            imLnBoxNo = ilSvLnBoxNo
            mLnEnableBox imLnBoxNo
        '10843 remove dead code
'        ElseIf (ilSvLnBoxNo = PRICEINDEX) And (imLnTotalType >= 2) And (tgSpf.sCLnStdQt = "Y") Then
'            imLnBoxNo = ilSvLnBoxNo
'            mLnEnableBox imLnBoxNo
        '10843 remove dead code
       ' ElseIf (ilSvLnBoxNo = PRICEINDEX) And (tgSpf.sCLnStdQt <> "Y") Then
        ElseIf (ilSvLnBoxNo = PRICEINDEX) Then
            imLnBoxNo = ilSvLnBoxNo
            mLnEnableBox imLnBoxNo
        ElseIf imStepBoxNo >= imLBCTCtrls And imStepBoxNo <= UBound(tmStepCtrls) Then
            mStepSetFocus imStepBoxNo
        Else
        '10842 (?)
On Error Resume Next
            '10843 remove dead code
'            If (tgSpf.sCLnStdQt = "Y") Then
'                If (pbcQTPrice.Enabled) And (pbcQTPrice.Visible) Then
'                    pbcQTPrice.SetFocus
'                Else
'                    cmcCancel.SetFocus
'                End If
'            Else
                cmcCancel.SetFocus
            End If
        'End If
On Error GoTo 0
        mSetCommands    'incase demo bar shown it it shouldn't be shown
        Screen.MousePointer = vbDefault
    End If
    Screen.MousePointer = vbDefault
End Sub

Public Sub pbcSumType_Paint(Index As Integer)
    If grdCPMBuy.Visible And Index = 2 Then
        If imCPMSortMethod = 0 Then
            pbcSumType(Index).CurrentX = -15
            pbcSumType(Index).CurrentY = 0
            pbcSumType(Index).Print "Std Sort"
        Else
            pbcSumType(Index).CurrentX = -15
            pbcSumType(Index).CurrentY = 0
            pbcSumType(Index).Print "# Sort"
        End If
        Exit Sub
    End If
    If grdCPMBuy.Visible And Index = 3 Then
        pbcSumType(Index).CurrentX = 15
        pbcSumType(Index).CurrentY = -30
        pbcSumType(Index).Print grdCPMBuy.TextMatrix(lmCPMEnableRow, CPMPRICETYPE)
        Exit Sub
    End If
    If Index = 0 Then
        If imSumType = 0 Then
            pbcSumType(0).CurrentX = -15
            pbcSumType(0).CurrentY = 0
            pbcSumType(0).Print "Hidden"
        Else
            pbcSumType(0).CurrentX = -15
            pbcSumType(0).CurrentY = 0
            pbcSumType(0).Print "Package"
        End If
    Else
        If imLnTotalType = 1 Then
            'pbcSumType(1).CurrentX = -15
            pbcSumType(1).CurrentX = (pbcSumType(1).Width - pbcSumType(1).TextWidth("Total Price")) / 2
            pbcSumType(1).CurrentY = 0
            pbcSumType(1).Print "Total Price"
        ElseIf imLnTotalType = 2 Then
            pbcSumType(1).CurrentX = (pbcSumType(1).Width - pbcSumType(1).TextWidth("Research")) / 2
            pbcSumType(1).CurrentY = -15
            pbcSumType(1).Print "Research"
        Else
            pbcSumType(1).CurrentX = (pbcSumType(1).Width - pbcSumType(1).TextWidth("Average Price")) / 2
            pbcSumType(1).CurrentY = 0
            pbcSumType(1).Print "Average Price"
        End If
    End If
End Sub

Private Sub pbcTme_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRowNo As Integer
    Dim ilColNo As Integer
    Dim flX As Single
    Dim flY As Single
    Dim ilMaxCol As Integer
    imcTmeInv.Visible = False
    flY = fgPadMinY
    For ilRowNo = 1 To 5 Step 1
        If (Y >= flY) And (Y <= flY + fgPadDeltaY) Then
            flX = fgPadMinX
            If ilRowNo = 4 Then
                ilMaxCol = 2
            Else
                ilMaxCol = 3
            End If
            For ilColNo = 1 To ilMaxCol Step 1
                If (X >= flX) And (X <= flX + fgPadDeltaX) Then
                    imcTmeInv.Move flX, flY
                    imcTmeInv.Visible = True
                    imcTmeOutline.Move flX - 15, flY - 15
                    imcTmeOutline.Visible = True
                    Exit Sub
                End If
                flX = flX + fgPadDeltaX
            Next ilColNo
        End If
        flY = flY + fgPadDeltaY
    Next ilRowNo
End Sub

Private Sub pbcTme_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRowNo As Integer
    Dim ilColNo As Integer
    Dim flX As Single
    Dim flY As Single
    Dim slKey As String
    Dim ilMaxCol As Integer
    imcTmeInv.Visible = False
    flY = fgPadMinY
    For ilRowNo = 1 To 5 Step 1
        If (Y >= flY) And (Y <= flY + fgPadDeltaY) Then
            flX = fgPadMinX
            If ilRowNo = 4 Then
                ilMaxCol = 2
            Else
                ilMaxCol = 3
            End If
            For ilColNo = 1 To ilMaxCol Step 1
                If (X >= flX) And (X <= flX + fgPadDeltaX) Then
                    imcTmeInv.Move flX, flY
                    imcTmeOutline.Move flX - 15, flY - 15
                    imcTmeOutline.Visible = True
                    Select Case ilRowNo
                        Case 1
                            Select Case ilColNo
                                Case 1
                                    slKey = "7"
                                Case 2
                                    slKey = "8"
                                Case 3
                                    slKey = "9"
                            End Select
                        Case 2
                            Select Case ilColNo
                                Case 1
                                    slKey = "4"
                                Case 2
                                    slKey = "5"
                                Case 3
                                    slKey = "6"
                            End Select
                        Case 3
                            Select Case ilColNo
                                Case 1
                                    slKey = "1"
                                Case 2
                                    slKey = "2"
                                Case 3
                                    slKey = "3"
                            End Select
                        Case 4
                            Select Case ilColNo
                                Case 1
                                    slKey = "0"
                                Case 2
                                    slKey = "00"
                            End Select
                        Case 5
                            Select Case ilColNo
                                Case 1
                                    slKey = ":"
                                Case 2
                                    slKey = "AM"
                                Case 3
                                    slKey = "PM"
                            End Select
                    End Select
                    If (imLnBoxNo <> OV1INDEX) And (imLnBoxNo <> OV2INDEX) Then
                        '11/2/19: Moved to CFlight form
                        'Select Case imDGBoxNo
                        '    Case DGOVSTARTINDEX
                        '        imBypassFocus = True    'Don't change select text
                        '        edcDGDropDown.SetFocus
                        '        'SendKeys slKey
                        '        gSendKeys edcDGDropDown, slKey
                        '    Case DGOVENDINDEX
                        '        imBypassFocus = True    'Don't change select text
                        '        edcDGDropDown.SetFocus
                        '        'SendKeys slKey
                        '        gSendKeys edcDGDropDown, slKey
                        'End Select
                    Else
                        If imOVType <> 2 Then
                            '11/2/19: Moved to CFlight form
                            'Select Case imOVBoxNo
                            '    Case OVSTARTTIMEINDEX
                            '        imBypassFocus = True    'Don't change select text
                            '        edcDGDropDown.SetFocus
                            '        'SendKeys slKey
                            '        gSendKeys edcDGDropDown, slKey
                            '    Case OVENDTIMEINDEX
                            '        imBypassFocus = True    'Don't change select text
                            '        edcDGDropDown.SetFocus
                            '        'SendKeys slKey
                            '        gSendKeys edcDGDropDown, slKey
                            'End Select
                        Else
                            Select Case imOVBoxNo
                                Case OV2STARTTIMEINDEX
                                    imBypassFocus = True    'Don't change select text
                                    edcDGDropDown.SetFocus
                                    'SendKeys slKey
                                    gSendKeys edcDGDropDown, slKey
                                Case OV2ENDTIMEINDEX
                                    imBypassFocus = True    'Don't change select text
                                    edcDGDropDown.SetFocus
                                    'SendKeys slKey
                                    gSendKeys edcDGDropDown, slKey
                            End Select
                        End If
                    End If
                    Exit Sub
                End If
                flX = flX + fgPadDeltaX
            Next ilColNo
        End If
        flY = flY + fgPadDeltaY
    Next ilRowNo
End Sub

Private Sub plcHeader_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub plcHeader_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub plcLine_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub plcLine_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub plcOv_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub plcPower_Click()
    mOvSetShow imOVBoxNo
    imOVBoxNo = -1
    plcOv.Visible = False
    pbcOv.Visible = False
    mRBSetShow True
    imRBInLnGridOrSum = -1
    mAllSetShow 0
End Sub

Private Sub plcScreen_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub plcScreen_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub plcSelect_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub plcSelect_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If tmcDrag.Enabled Then
        imDragType = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub plcTme_Click()
    pbcClickFocus.SetFocus
End Sub

Private Sub tmcClick_Timer()
    tmcClick.Enabled = False
    If imInTseLine Then
        imInTseLine = False
        Exit Sub
    End If
    If grdCPMBuy.Visible Then
        gCPMDropdown 5
    End If
    If imSelectDelay Or imSelectUpdate Then
        imSelectDelay = False
        imLoadingContract = True
        mSelectChange
        '8723 if put in an order, set to 'changed'
        mFileMakerSetToChange
        imLoadingContract = False
    Else
        Select Case imHdBoxNo
            Case POTINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcPot, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case ADVTINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcAdvt, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case PRODUCTINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcProd, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case SHTTITLEINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcShtTitle, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case AGENCYINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcAgency, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case SPERSONINDEX
                imLbcArrowSetting = False
                Select Case imSPBoxNo
                    Case SPNAME1INDEX, SPNAME1INDEX + imSPNoCol, SPNAME1INDEX + 2 * imSPNoCol, SPNAME1INDEX + 3 * imSPNoCol, SPNAME1INDEX + 4 * imSPNoCol, SPNAME1INDEX + 5 * imSPNoCol, SPNAME1INDEX + 6 * imSPNoCol, SPNAME1INDEX + 7 * imSPNoCol, SPNAME1INDEX + 8 * imSPNoCol, SPNAME1INDEX + 9 * imSPNoCol
                        gProcessLbcClick lbcSPerson(0), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case SPNAME1INDEX + 2, SPNAME1INDEX + imSPNoCol + 2, SPNAME1INDEX + 2 * imSPNoCol + 2, SPNAME1INDEX + 3 * imSPNoCol + 2, SPNAME1INDEX + 4 * imSPNoCol + 2, SPNAME1INDEX + 5 * imSPNoCol + 2, SPNAME1INDEX + 6 * imSPNoCol + 2, SPNAME1INDEX + 7 * imSPNoCol + 2, SPNAME1INDEX + 8 * imSPNoCol + 2, SPNAME1INDEX + 9 * imSPNoCol + 2
                        If tgSpf.sCommByCntr <> "Y" Then
                            gProcessLbcClick lbcVehGp6, edcShareDropDown, imChgMode, imLbcArrowSetting
                        End If
                End Select
            Case COMPINDEX
                imLbcArrowSetting = False
                Select Case imCEBoxNo
                    Case CECOMPINDEX
                        gProcessLbcClick lbcComp(0), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case CECOMPINDEX + 1
                        gProcessLbcClick lbcComp(1), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case CEEXCLINDEX
                        gProcessLbcClick lbcExcl(0), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case CEEXCLINDEX + 1
                        gProcessLbcClick lbcExcl(1), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case CEBUSCATINDEX
                        gProcessLbcClick lbcBusCat, edcShareDropDown, imChgMode, imLbcArrowSetting
                End Select
            Case BUYERINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcBuyer, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case SHAREINDEX
                imLbcArrowSetting = False
                Select Case imSBBoxNo
                    Case SBYCOMPANYINDEX
                        gProcessLbcClick lbcShareBudget(0), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case SBCOMPANY1INDEX, SBCOMPANY2INDEX, SBCOMPANY3INDEX, SBCOMPANY4INDEX, SBCOMPANY5INDEX, SBCOMPANY6INDEX
                        gProcessLbcClick lbcShareBudget(1), edcShareDropDown, imChgMode, imLbcArrowSetting
                End Select
            Case MERCHINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcComment(0), edcHdDropDown, imChgMode, imLbcArrowSetting
            Case PROMOINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcComment(0), edcHdDropDown, imChgMode, imLbcArrowSetting
            Case REVSETINDEX
                imLbcArrowSetting = False
                Select Case imRSBoxNo
                    Case RSREV1INDEX
                        gProcessLbcClick lbcRevSet(0), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case RSREV2INDEX
                        gProcessLbcClick lbcRevSet(1), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case RSREV3INDEX
                        gProcessLbcClick lbcRevSet(2), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case RSREV4INDEX
                        gProcessLbcClick lbcRevSet(3), edcShareDropDown, imChgMode, imLbcArrowSetting
                    Case RSREV5INDEX
                        gProcessLbcClick lbcRevSet(4), edcShareDropDown, imChgMode, imLbcArrowSetting
                End Select
            Case SEGINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcSeg, edcHdDropDown, imChgMode, imLbcArrowSetting
            Case DEMOINDEX
            Case INTCOMMINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcComment(0), edcHdDropDown, imChgMode, imLbcArrowSetting
            Case CANCLAUSEINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcComment(0), edcHdDropDown, imChgMode, imLbcArrowSetting
            Case CHGREASONINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcComment(0), edcHdDropDown, imChgMode, imLbcArrowSetting
            Case OTHERCOMMINDEX
                imLbcArrowSetting = False
                gProcessLbcClick lbcComment(0), edcHdDropDown, imChgMode, imLbcArrowSetting
        End Select
        Select Case imLnBoxNo
            Case LINECOMMINDEX
                imLbcArrowSetting = False
                If cmcLnDropDown.Visible Then
                    If Not edcLNDropDown.Visible Then
                        edcLNDropDown.Visible = True
                    End If
                    gProcessLbcClick lbcComment(1), edcLNDropDown, imChgMode, imLbcArrowSetting
                End If
            Case OV2INDEX
                If imOVBoxNo = OV2SPLITINDEX Then
                    imLbcArrowSetting = False
                    If Not edcDGDropDown.Visible Then
                        edcDGDropDown.Visible = True
                    End If
                    gProcessLbcClick lbcRegion, edcDGDropDown, imChgMode, imLbcArrowSetting
                End If
        End Select
    End If
    pbcEatTab(1).Enabled = False
    pbcEatTab(0).Enabled = False
End Sub

Private Sub tmcDelay_Timer()
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim ilRet As Integer
    Dim ilIndex As Integer
    Dim slCode As String
    Dim ilLineNo As Integer
    Dim ilRow As Integer
    Dim ilChg As Integer
    Dim slLineType As String
    Dim ilPkLineRow As Integer
    Dim ilPass As Integer
    Dim slStr As String
    Dim ilPos As Integer
    Dim slMess As String
    Dim ilVpfIndex As Integer
    Dim slMedium As String
    Dim slSQLQuery As String
    Dim rst_Pcf As ADODB.Recordset
    
    tmcDelay.Enabled = False
    plcCalendar.Visible = False
    If imDelaySrce = 0 Then
        imDelaySrce = -1
        If (Trim$(smPowerCaption) <> "Rate Bar") Then
'            mPopPBDaypart
        Else
            mPopRBDaypart
        End If
    ElseIf imDelaySrce = 1 Then
        mPopPBVehicle
    ElseIf imDelaySrce = 2 Then 'Rate Bar generation
        imDelaySrce = -1
        
        '2/25/21: Changed Mix Air Time... To Ad Server Tab View Only.
        '         On the rate bar, air time, Podcast vehicles and std packages populated. CPM Packages excluded
        '
        'If (Asc(tgSaf(0).sFeatures8) And PODADSERVERVIEWONLY) <> PODADSERVERVIEWONLY Then
        '    slMedium = ""
        '    For ilLoop = 0 To lbcRBVehicle.ListCount - 1 Step 1
        '        If Contract.lbcRBVehicle.Selected(ilLoop) Then
        '            For ilIndex = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
        '                If Trim$(tgMVef(ilIndex).sName) = lbcRBVehicle.List(ilLoop) Then
        '                    If tgMVef(ilIndex).sType = "P" Then
        '                        slSQLQuery = "Select pvfType from pvf_Package_Vehicle where pvfCode = " & tgMVef(ilIndex).lPvfCode
        '                        Set rst_Pcf = gSQLSelectCall(slSQLQuery)
        '                        If Not rst_Pcf.EOF Then
        '                            If rst_Pcf!pvfType = "M" Then
        '                                MsgBox " Mixture of Air Time and Podcast vehicles not allowed", vbOKOnly + vbInformation, "Message"
        '                                Exit Sub
        '                            End If
        '                            If slMedium = "" Then
        '                                If Trim$(rst_Pcf!pvfType) = "" Then
        '                                    slMedium = "A"
        '                                Else
        '                                    slMedium = rst_Pcf!pvfType
        '                                End If
        '                            Else
        '                                If rst_Pcf!pvfType <> "A" And Trim$(rst_Pcf!pvfType) <> "" Then
        '                                    If slMedium = "S" Then
        '                                        MsgBox " Mixture of Air Time and Podcast vehicles not allowed", vbOKOnly + vbInformation, "Message"
        '                                        Exit Sub
        '                                    End If
        '                                Else
        '                                    If slMedium = "A" Then
        '                                        MsgBox " Mixture of Air Time and Podcast vehicles not allowed", vbOKOnly + vbInformation, "Message"
        '                                        Exit Sub
        '                                    End If
        '                                End If
        '                            End If
        '                        End If
        '                        rst_Pcf.Close
        '                    Else
        '                        ilVpfIndex = gBinarySearchVpf(tgMVef(ilIndex).iCode)
        '                        If ilVpfIndex <> -1 Then
        '                            If slMedium = "" Then
        '                                If (tgVpf(ilVpfIndex).sGMedium <> "P") Then 'And (tgVpf(ilVpfIndex).sGMedium <> "M") Then
        '                                    slMedium = "A"
        '                                Else
        '                                    slMedium = "S"
        '                                End If
        '                            Else
        '                                If (tgVpf(ilVpfIndex).sGMedium <> "P") Then 'And (tgVpf(ilVpfIndex).sGMedium <> "M") Then
        '                                    If slMedium = "S" Then
        '                                        MsgBox " Mixture of Air Time and Podcast vehicles not allowed", vbOKOnly + vbInformation, "Message"
        '                                        Exit Sub
        '                                    End If
        '                                Else
        '                                    If slMedium = "A" Then
        '                                        MsgBox " Mixture of Air Time and Podcast vehicles not allowed", vbOKOnly + vbInformation, "Message"
        '                                        Exit Sub
        '                                    End If
        '                                End If
        '                            End If
        '                        End If
        '                    End If
        '                End If
        '            Next ilIndex
        '        End If
        '    Next ilLoop
        'End If
        
        mPopPBRates 0, hmLcf, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, hmPvf, 0, imDGSave()
        imPBSpots = edcRBWks(3).Text
        imPBFactor = edcPBFactor.Text

        imPBMnfDemo = 0
        If lbcDaypart.ListIndex >= 0 Then
            'Find matching name
            If (lbcDemo(0).ListIndex >= 1) Or (lbcDemo(1).ListIndex >= 1) Or (lbcDemo(2).ListIndex >= 1) Or (lbcDemo(3).ListIndex >= 1) Then
                'ilIndex = lbcDemo(lbcDaypart.ListIndex).ListIndex
                ilIndex = lbcDemo(imDemoMap(lbcDaypart.ListIndex)).ListIndex
                slNameCode = tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            Else
                ilIndex = lbcDaypart.ListIndex
                slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            End If
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            imPBMnfDemo = Val(slCode)
        Else
            If lbcDemo(0).ListIndex >= 1 Then
                lbcDaypart.ListIndex = 0
                If (lbcDemo(0).ListIndex >= 1) Or (lbcDemo(1).ListIndex >= 1) Or (lbcDemo(2).ListIndex >= 1) Or (lbcDemo(3).ListIndex >= 1) Then
                    slNameCode = tgDemoCode(lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(Contract!lbcDemo(0).ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    imPBMnfDemo = Val(slCode)
                Else
                    slNameCode = tgDemoCode(lbcDaypart.ListIndex).sKey 'Traffic!lbcDemoCode.List(Contract!lbcDemo(0).ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    imPBMnfDemo = Val(slCode)
                End If
            End If
        End If

        imSettingValue = True
        vbcRBVeh(0).Min = LBound(tmPB1DP)
        imSettingValue = True
        If UBound(tmPB1DP) <= vbcRBVeh(0).LargeChange + 1 Then
            vbcRBVeh(0).Max = LBound(tmPB1DP)
        Else
            vbcRBVeh(0).Max = UBound(tmPB1DP) - vbcRBVeh(0).LargeChange - 1
        End If
        imSettingValue = True
        vbcRBVeh(0).Value = vbcRBVeh(0).Min
        imSettingValue = False
        If (imDetailSortIndex(1) <> 0) Or (imDetailSortIndex(0) <> 0) Then
            'Save index as the click event will age listindex
            ilIndex = imDetailSortIndex(0) - 1
            For ilLoop = LBound(imDetailSortIndex) To UBound(imDetailSortIndex) - 1 Step 1
                imDetailSortIndex(ilLoop) = imDetailSortIndex(ilLoop + 1)
            Next ilLoop
            mRateBarSort 0, ilIndex, imDetailSortIndex(), tmPB1DP()
        Else
            For ilLoop = LBound(imDetailSortIndex) To UBound(imDetailSortIndex) - 1 Step 1
                imDetailSortIndex(ilLoop) = 0
            Next ilLoop
            'Use Daypart within vehicle
            imDetailSortIndex(LBound(imDetailSortIndex)) = 3
            mRateBarSort 0, 1, imDetailSortIndex(), tmPB1DP()
        End If
        pbcRBVeh_Paint 0
        imSettingValue = True
        vbcRBVeh(1).Min = LBound(tmRB1DP)
        imSettingValue = True
        If UBound(tmRB1DP) <= vbcRBVeh(1).LargeChange + 1 Then
            vbcRBVeh(1).Max = LBound(tmRB1DP)
        Else
            vbcRBVeh(1).Max = UBound(tmRB1DP) - vbcRBVeh(1).LargeChange - 1
        End If
        imSettingValue = True
        vbcRBVeh(1).Value = vbcRBVeh(1).Min
        imSettingValue = False
        If (imSumSortIndex(1) <> 0) Or (imSumSortIndex(0) <> 0) Then
            'Save index as the click event will age listindex
            ilIndex = imSumSortIndex(0) - 1
            For ilLoop = LBound(imSumSortIndex) To UBound(imSumSortIndex) - 1 Step 1
                imSumSortIndex(ilLoop) = imSumSortIndex(ilLoop + 1)
            Next ilLoop
            mRateBarSort 1, ilIndex, imSumSortIndex(), tmRB1DP()
        Else
            For ilLoop = LBound(imSumSortIndex) To UBound(imSumSortIndex) - 1 Step 1
                imSumSortIndex(ilLoop) = 0
            Next ilLoop
            'Use Daypart within vehicle
            imSumSortIndex(LBound(imSumSortIndex)) = 3
            mRateBarSort 1, 1, imSumSortIndex(), tmRB1DP()
        End If
        pbcRBVeh_Paint 1
        If UBound(tmPB1DP) > LBound(tmPB1DP) Then
            Contract.cbcRBView.Visible = True
        Else
            Contract.cbcRBView.Visible = False
        End If
        Screen.MousePointer = vbDefault
    ElseIf imDelaySrce = 3 Then
        On Error GoTo edcLineNoErr
        tmcDelay.Interval = 4000
        imBypassLnPaint = True
        If grdCPMBuy.Visible Then
            slStr = UCase$(edcLineNo(1).Text)
        Else
            slStr = UCase$(edcLineNo(0).Text)
        End If
        'ilPos = InStr(1, slStr, "S")
        'If ilPos > 0 Then
        '    bgSortByLineNo = Not bgSortByLineNo
        '    If ilPos = 1 Then
        '        slStr = Mid(slStr, ilPos + 1)
        '    Else
        '        slStr = Left$(slStr, ilPos - 1)
        '    End If
        '    mResortLines hmMnf
        '    If slStr = "" Then
        '        imBypassLnPaint = False
        '        pbcLine_Paint
        '    End If
        'End If
        ilLineNo = Val(slStr)   'Val(edcLineNo(0).Text)
        If ilLineNo = 0 Then
            Exit Sub
        End If
        If grdCPMBuy.Visible Then
            gCPMLineNo ilLineNo
            imBypassLnPaint = False
            Exit Sub
        End If
        ilPass = 0
        Do
            For ilRow = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
                slLineType = mGetLineType(ilRow + 1)
                If (slLineType = "A") Or (slLineType = "O") Or (slLineType = "E") Then
                    ilPkLineRow = ilRow
                End If
                If (ilLineNo = tgClfCntr(ilRow).ClfRec.iLine) Then
                    If (tgClfCntr(ilRow).bShowLine) Then
                        If vbcLines.Min >= 0 Then
                            vbcLines.Value = vbcLines.Min
                            For ilChg = 1 To ilRow Step 1
                                If tgClfCntr(ilChg).bShowLine Then
                                    If vbcLines.Value < vbcLines.Max Then
                                        vbcLines.Value = vbcLines.Value + 1
                                    Else
                                        Exit For
                                    End If
                                End If
                            Next ilChg
                        End If
                        imBypassLnPaint = False
                        pbcLine_Paint
                        imLnRowNo = ilRow + 1
                        'imMoveLnRowNo = mFindPaintLnRowNo(imLnRowNo)
                        'mSetArrowFrame
                        mPaintLnBkgd imLnRowNo, GRAY
                        Exit Do
                    Else
                        tgClfCntr(ilPkLineRow).bPkExpanded = True
                        mResetShowLine ilPkLineRow + 1, True
                        'mBuildMapLinePaint
                        mSetLineScroll True, False
                    End If
                    Exit For
                End If
            Next ilRow
            ilPass = ilPass + 1
        Loop While ilPass <= 1
        imBypassLnPaint = False
    ElseIf imDelaySrce = 4 Then 'Done pressed
        If plcDemoBar.Visible Then  'Hide demo bar
            cmcDemoBar_Click
        End If
        If (imCreditRestr = 1) And ((imStep1Index = 0) Or (imStep1Index = 1)) Then
            mTerminate
        Else
            If mSaveRecChg(True) = False Then
                If imTerminate Then
                    cmcCancel_Click
                    Exit Sub
                End If
                If imHdBoxNo > 0 Then
                    mEnableBox imHdBoxNo
                Else
                    mLnEnableBox imLnBoxNo
                End If
                Exit Sub
            End If
            ''ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
            'ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
            mTerminate
        End If
    ElseIf imDelaySrce = 5 Then 'Cancel pressed
        If imUpdateAllowed Then
            If cmcUpdate.Enabled = True Then
                If imStep1Index > 1 Then
                    slMess = "Cancel changes to " & edcCntrNo.Text
                Else
                    If (sgCntrScreen <> "Orders") Then
                        slMess = "Cancel Creation of Proposal"
                    Else
                        slMess = "Cancel New Order"
                    End If
                End If
                ilRet = MsgBox(slMess, vbYesNo + vbQuestion, "Cancel")
                If ilRet = vbNo Then
                    Exit Sub
                End If
            End If
        End If
        'ilRet = btrUnlock(hmChf, BTRV_UNLOCK_MULTIPLE)
        ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
        If plcDemoBar.Visible Then  'Hide demo bar
            cmcDemoBar_Click
        End If
        mTerminate
    
'    ElseIf imDelaySrce = 10 Then 'tscLine
'        'To switch tab: tscLine.Tabs(3).Selected = True
'        Dim ilClf As Integer
'        Dim ilVef As Integer
'        'Dim slStr As String
'
'        Screen.MousePointer = vbHourglass
'        imInTseLine = True
'        DoEvents
'        If (tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Then
'            bmInAvailTab = True
'        End If
'        mAllSetShow 3
'    '    If plcLine.Visible Then
'    '        mAllSetShow 0
'    '        plcLine.Visible = False
'    '        pbcLine.Visible = False
'    '        pbcLnTotal.Visible = False
'    '        vbcLines.Visible = False
'    '        pbcLnSTab.Visible = False
'    '        pbcLnTab.Visible = False
'    '    End If
'        If udcCBill.Visible Then
'            udcCBill.Action 5
'            udcCBill.Visible = False
'            If igPkgChgd = YES Then
'                tmHdCtrls(BILLCYCLEINDEX).iChg = True
'                mSetCommands
'            End If
'            'Screen.MousePointer = vbDefault    'Default
'            mPkgTotal
'            mCntrTotal
'        '5/5/15: Disallow installment if not in balance
'        ElseIf tscLine.SelectedItem.Index = 7 Then
'            mPkgTotal
'            mCntrTotal
'        End If
'        If udcCGameInv.Visible Then
'            udcCGameInv.Action 5
'            udcCGameInv.Visible = False
'            mPkgTotal
'            mCntrTotal
'        End If
'        If udcCDigital.Visible Then
'            udcCDigital.Action 5
'            udcCDigital.Visible = False
'        End If
'        Screen.MousePointer = vbHourglass
'        If Not mTscLineTabOk() Then
'            bmInAvailTab = False
'            Set tscLine.SelectedItem = tscLine.Tabs.Item(imTscLineIndex)
'            Exit Sub
'        End If
'        If plcLine.Visible Then
'            mAllSetShow 0
'            plcLine.Visible = False
'            pbcLine.Visible = False
'            pbcLnTotal.Visible = False
'            vbcLines.Visible = False
'            pbcLnSTab.Visible = False
'            pbcLnTab.Visible = False
'        End If
'        DoEvents
'        '12/5/19:Hide demo bar
'        If tscLine.SelectedItem.Index <> 4 Then
'            If plcDemoBar.Visible Then
'                cmcDemoBar_Click
'                If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
'                    lacAudTotals_Click
'                End If
'            ElseIf tscLine.SelectedItem.Index >= 8 And imTscLineIndex = 4 Then
'                If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
'                    lacAudTotals_Click
'                End If
'            End If
'        End If
'        'mSetLineArea
'        If tscLine.SelectedItem.Index < 8 Then
'            If imLnTotalType = 2 Then
'                imLnTotalType = 0
'                mReSetLinePrice
'                lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
'                lacPrice(0).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                pbcSumType(1).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                pbcSumType(1).Cls
'                pbcSumType_Paint (1)
'            End If
'            lmToolTipNext = -1
'            imToolTipWeekIndex = -1
'        Else
'            If imLnTotalType <> 2 Then
'                If (sgCntrScreen <> "Orders") Then
'                    If imLnTotalType = 1 Then
'                        imLnTotalType = 2
'                        mReSetLinePrice
'                    Else
'                        imLnTotalType = 2
'                    End If
'                    lacPrice(0).Caption = "Research"  ' & sgLF & sgCR & "Price"
'                    lacPrice(0).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                    pbcSumType(1).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                    pbcSumType(1).Cls
'                    pbcSumType_Paint (1)
'                Else
'                    imLnTotalType = 0
'                    mReSetLinePrice
'                    lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
'                    lacPrice(0).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                    pbcSumType(1).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                    pbcSumType(1).Cls
'                    pbcSumType_Paint (1)
'                End If
'            End If
'        End If
'        Select Case tscLine.SelectedItem.Index
'            Case 1  'Multi-Media
'                igDirAdvt = False
'                If tmAdf.sBillAgyDir = "D" Then
'                    igDirAdvt = True
'                End If
'                igUpdateAllowed = imUpdateAllowed
'                If igRepNetChgAllowed Then
'                    igUpdateAllowed = False
'                End If
'                igGameSchdVefCode = 0
'                If imLnRowNo > 0 Then
'                    smLineType = mGetLineType(imLnRowNo)
'                    If (smLineType <> "H") And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
'                        igGameSchdVefCode = imCntrVefCode
'                    End If
'                End If
'                udcCGameInv.Action 2
'                udcCGameInv.Visible = True
'                Screen.MousePointer = vbDefault
'            Case 2  'Digital
'                If (Asc(tgSpf.sUsingFeatures6) And DIGITALCONTENT) = DIGITALCONTENT Then 'Using Live Log
'                    igUpdateAllowed = imUpdateAllowed
'                    If igRepNetChgAllowed Then
'                        igUpdateAllowed = False
'                    End If
'                    udcCDigital.Action 2
'                    udcCDigital.Visible = True
'                    Screen.MousePointer = vbDefault
'                End If
'            Case 3  'NTR
'                mCBill_Call
'            Case 4  'Air Time
'                plcLine.Visible = True
'                pbcLine.Visible = True
'                pbcLnTotal.Visible = True
'                vbcLines.Visible = True
'                pbcLnSTab.Visible = True
'                pbcLnTab.Visible = True
'            Case 5  'Merchandising
'                mCBill_Call
'            Case 6  'Promotional
'                mCBill_Call
'            Case 7  'Installment
'                If ((Asc(tgSpf.sSportInfo) And USINGSPORTS) = USINGSPORTS) And ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
'                    If (UBound(tgFBSbf) <= LBound(tgFBSbf)) Then
'                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'                            ilVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
'                            If ilVef <> -1 Then
'                                If tgMVef(ilVef).sType = "G" Then
'                                    imInTseLine = False
'                                    Screen.MousePointer = vbDefault    'Default
'                                    MsgBox "Sports and Installment disallowed when using Revenue By Events on the same contract", vbOKOnly + vbExclamation, "Warning"
'                                    Exit Sub
'                                End If
'                            End If
'                        Next ilClf
'                    End If
'                End If
'                If lbcBillCycle.ListIndex < 0 Then
'                    If lbcBillCycle.ListCount <= 1 Then
'                        lbcBillCycle.ListIndex = 0
'                    Else
'                        If lbcBillCycle.ListIndex < 0 Then
'                            lbcBillCycle.ListIndex = mBillingCycle() 'Determine initial billing cycle
'                        End If
'                    End If
'                End If
'                'If lbcBillCycle.ListIndex >= 1 Then
'                '    Screen.MousePointer = vbDefault    'Default
'                '    MsgBox "Installment only allowed when Standard Billing cycle selected", vbOKOnly + vbExclamation, "Warning"
'                '    Exit Sub
'                'End If
'                If lbcBillCycle.ListIndex < 0 Then
'                    slStr = ""
'                Else
'                    slStr = lbcBillCycle.List(lbcBillCycle.ListIndex)
'                    If Left(slStr, 1) <> "S" Then
'                        imInTseLine = False
'                        Screen.MousePointer = vbDefault    'Default
'                        MsgBox "Installment only allowed when Standard Billing cycle selected", vbOKOnly + vbExclamation, "Warning"
'                        Exit Sub
'                    End If
'                End If
'                '5/5/15: Disallow installment if not in balance
'                If imTotColor <> 2 Then
'                    imInTseLine = False
'                    Screen.MousePointer = vbDefault    'Default
'                    MsgBox "Gross Amount and Total Line Amount plus NTR not in Balance", vbOKOnly + vbExclamation, "Warning"
'                    Exit Sub
'                End If
'                mCBill_Call
'            Case 8  'Avails
'                If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
'                    'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
'                       If bmViewedAvailTab = False And bmViewedProtectionTab = False And imLoadingForm = False Then
'                            mAvailTab
'                            If bmViewedResearchTab = False Then
'                                mResearchForTabs VEHINDEX, DPINDEX
'                            End If
'                        End If
'                        plcLine.Visible = True
'                        pbcLine.Visible = True
'                        pbcLnTotal.Visible = True
'                        vbcLines.Visible = True
'                        pbcLnSTab.Visible = True
'                        pbcLnTab.Visible = True
'                        bmInAvailTab = False
'                        bmViewedAvailTab = True
'                    'End If
'                End If
'            Case 9  'Protection
'                If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
'                    'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
'                        If bmViewedAvailTab = False And bmViewedProtectionTab = False Then
'                            mAvailTab
'                            If bmViewedResearchTab = False Then
'                                mResearchForTabs VEHINDEX, DPINDEX
'                            End If
'                        End If
'                        plcLine.Visible = True
'                        pbcLine.Visible = True
'                        pbcLnTotal.Visible = True
'                        vbcLines.Visible = True
'                        pbcLnSTab.Visible = True
'                        pbcLnTab.Visible = True
'                        bmInAvailTab = False
'                        bmViewedProtectionTab = True
'                    'End If
'                End If
'            Case 10 'Research
'                If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
'                    'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
'                        lacAudTotals_Click
'                        If bmViewedAvailTab = False And bmViewedProtectionTab = False And bmViewedResearchTab = False Then
'                            mResearchForTabs VEHINDEX, DPINDEX
'                        End If
'                        mGetMajorityPopulation
'                        plcLine.Visible = True
'                        pbcLine.Visible = True
'                        pbcLnTotal.Visible = True
'                        vbcLines.Visible = True
'                        pbcLnSTab.Visible = True
'                        pbcLnTab.Visible = True
'                        bmViewedResearchTab = True
'                    'End If
'                End If
'        End Select
'        mSetLineArea
'        mSetCommands
'        imTscLineIndex = tscLine.SelectedItem.Index
'        imInTseLine = False
'        Screen.MousePointer = vbDefault
'        If Not bmInCancel Then
'            tmcClick.Enabled = True
'        End If
    End If
    Exit Sub
edcLineNoErr:
    imBypassLnPaint = False
    pbcLine_Paint
End Sub

Private Sub tmcDrag_Timer()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilBox As Integer
    Dim ilRowNo As Integer
    Dim slLineType As String
    Select Case imDragType
        Case 0  'Start Drag
            imDragType = -1
            tmcDrag.Enabled = False
            If (Not imUpdateAllowed) Or (igRepNetChgAllowed) Then
                imDragBoxNo = -1
                Exit Sub
            End If
            If ((sgCntrScreen = "Orders") And (imStep1Index = 3)) Or ((sgCntrScreen <> "Orders") And (imStep1Index = 5)) Then
                'Disallow any line changes 7/2/98- Jim
                imDragBoxNo = -1
                Exit Sub
            End If
            ilCompRow = vbcLines.LargeChange + 1
            If UBound(tgClfCntr) + 1 > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = UBound(tgClfCntr) + 1
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(VEHINDEX).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmLnCtrls(VEHINDEX).fBoxY + tmLnCtrls(VEHINDEX).fBoxH)) Then
                    imDragBoxNo = -1
                    For ilBox = imLBCTCtrls To UBound(tmLnCtrls) Step 1
                        If (fmDragX >= tmLnCtrls(ilBox).fBoxX) And (fmDragX <= (tmLnCtrls(ilBox).fBoxX + tmLnCtrls(ilBox).fBoxW)) Then
                            imDragBoxNo = ilBox
                            Exit For
                        End If
                    Next ilBox
                    If imDragBoxNo = -1 Then
                        Exit Sub
                    End If
                    ilRowNo = ilRow + vbcLines.Value
                    slLineType = mGetLineType(ilRowNo)
                    'Allow C.B.S lines to be trash if no spots exist for the line
                    If ((imDragBoxNo >= WKSPOTSINDEX) And (imDragBoxNo <= WKSPOTSINDEX + 12)) Then
                        If (tgClfCntr(ilRowNo - 1).iCancel) Or (tgClfCntr(ilRowNo - 1).iFirstCff < 0) Or (mIsLnGame(ilRowNo)) Then
                            Exit Sub
                        End If
                    Else
                    End If
                    mAllSetShow 2
                    mLnSetShow imLnBoxNo
                    imLnBoxNo = -1
                    imLnRowNo = ilRowNo
                    laclnFrame.DragIcon = IconTraf!imcIconStd.DragIcon
                    '10/20/15: Fixed where drag appears
                    If ((imDragBoxNo >= WKSPOTSINDEX) And (imDragBoxNo <= WKSPOTSINDEX + 12)) Then
                        'laclnFrame.Move tmLnCtrls(WKSPOTSINDEX).fBoxX, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, tmLnCtrls(SPOTSINDEX).fBoxX - tmLnCtrls(WKSPOTSINDEX).fBoxX
                        laclnFrame.Move fmDragX, fmDragY, tmLnCtrls(SPOTSINDEX).fBoxX - tmLnCtrls(WKSPOTSINDEX).fBoxX
                    Else
                        'laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
                        laclnFrame.Move fmDragX, fmDragY, pbcLine.Width
                    End If
                    'If gInvertArea call then remove visible setting
                    'lacLnFrame.Visible = True
                    pbcLineArrow.Move pbcLineArrow.Left, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
                    pbcLineArrow.Visible = True
                    imcTrash.Enabled = True
                    laclnFrame.Drag vbBeginDrag
                    laclnFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
            Next ilRow
        Case 1  'scroll up
        Case 2  'Scroll down
    End Select
End Sub

Private Sub tmcLnTab_Timer()
    'To switch tab: tscLine.Tabs(3).Selected = True
    Dim ilClf As Integer
    Dim ilVef As Integer
    Dim ilVpf As Integer
    Dim slStr As String
    Dim llRow As Long
    Dim ilSvTabMapIndex As Integer
    Dim ilIndex As Integer
    
    Screen.MousePointer = vbDefault
    tmcLnTab.Enabled = False
    If imInTseLine = True Then
        Exit Sub
    End If
    If imInSave Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    On Error Resume Next
    pbcClickFocus.SetFocus      'Place here to aviod a timing issue
    On Error GoTo 0
    imInTseLine = True
    ilSvTabMapIndex = igTabMapIndex
    DoEvents
    'If (tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Then
    If (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Then
        bmInAvailTab = True
    End If
    mAllSetShow 3
'    If plcLine.Visible Then
'        mAllSetShow 0
'        plcLine.Visible = False
'        pbcLine.Visible = False
'        pbcLnTotal.Visible = False
'        vbcLines.Visible = False
'        pbcLnSTab.Visible = False
'        pbcLnTab.Visible = False
'    End If
    If udcCBill.Visible Then
        udcCBill.Action 5
        udcCBill.Visible = False
        If igPkgChgd = YES Then
            tmHdCtrls(BILLCYCLEINDEX).iChg = True
            mSetCommands
        End If
        'Screen.MousePointer = vbDefault    'Default
        mPkgTotal
        mCntrTotal
    '5/5/15: Disallow installment if not in balance
    'ElseIf tscLine.SelectedItem.Index = 7 Then
    ElseIf tscLine.SelectedItem.Index = imTabMap(TABINSTALL) Then
        mPkgTotal
        mCntrTotal
    End If
    If udcCGameInv.Visible Then
        udcCGameInv.Action 5
        udcCGameInv.Visible = False
        mPkgTotal
        mCntrTotal
    End If
    If udcCDigital.Visible Then
        udcCDigital.Action 5
        udcCDigital.Visible = False
    End If
    Screen.MousePointer = vbHourglass
    If Not mTscLineTabOk() Then
        bmInAvailTab = False
        imInTseLine = False
        Screen.MousePointer = vbDefault    'Default
        Set tscLine.SelectedItem = tscLine.Tabs.item(imTscLineIndex)
        Exit Sub
    End If
    If plcLine.Visible Then
        mAllSetShow 0
        plcLine.Visible = False
        pbcLine.Visible = False
        pbcLnTotal.Visible = False
        vbcLines.Visible = False
        pbcLnSTab.Visible = False
        pbcLnTab.Visible = False
    End If
    If grdCPMBuy.Visible = True Then
        pbcSumType(2).Visible = False
        cmcPackage(1).Visible = False
        cmcTerminate(1).Visible = False
        edcLineNo(1).Visible = False
        edcLineNo(2).Visible = False
        edcLineNo(3).Visible = False
        edcLineNo(4).Visible = False
        edcLineNo(5).Visible = False
        mSetBGColorWhite True
        mCPMSetShow
        On Error Resume Next
        pbcClickFocus.SetFocus
        On Error GoTo 0
        'grdCPMBuy.Visible = False
        Contract.pbcLineArrow.BackColor = lmAirTimeArrowBackColor
        Contract.pbcLineArrow.Picture = IconTraf!imcArrow.Picture
    End If

    DoEvents
    '12/5/19:Hide demo bar
    'If tscLine.SelectedItem.Index <> 4 Then
    If tscLine.SelectedItem.Index <> imTabMap(TABAIRTIME) Then
        If plcDemoBar.Visible Then
            cmcDemoBar_Click
            If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
                lacAudTotals_Click
            End If
        'ElseIf tscLine.SelectedItem.Index >= 8 And imTscLineIndex = 4 Then
        ElseIf tscLine.SelectedItem.Index >= imTabMap(TABAVAIL) And imTscLineIndex = imTabMap(TABAIRTIME) Then
            If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
                lacAudTotals_Click
            End If
        End If
    End If
    'mSetLineArea
    'If tscLine.SelectedItem.Index < 8 Then
    If tscLine.SelectedItem.Index <= imTabMap(TABINSTALL) Then
        If imLnTotalType = 2 Then
            imLnTotalType = 0
            mReSetLinePrice
            lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
            lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
            pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
            pbcSumType(1).Cls
            pbcSumType_Paint (1)
        End If
        lmToolTipNext = -1
        imToolTipWeekIndex = -1
    Else
        If imLnTotalType <> 2 Then
            If (sgCntrScreen <> "Orders") Then
                If imLnTotalType = 1 Then
                    imLnTotalType = 2
                    mReSetLinePrice
                Else
                    imLnTotalType = 2
                End If
                lacPrice(0).Caption = "Research"  ' & sgLF & sgCR & "Price"
                lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
                pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
                pbcSumType(1).Cls
                pbcSumType_Paint (1)
            Else
                imLnTotalType = 0
                mReSetLinePrice
                lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
                lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
                pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
                pbcSumType(1).Cls
                pbcSumType_Paint (1)
            End If
        End If
    End If
    Select Case tscLine.SelectedItem.Index
        Case imTabMap(TABMULTIMEDIA)    '1  'Multi-Media
            igDirAdvt = False
            If tmAdf.sBillAgyDir = "D" Then
                igDirAdvt = True
            End If
            igUpdateAllowed = imUpdateAllowed
            If igRepNetChgAllowed Then
                igUpdateAllowed = False
            End If
            igGameSchdVefCode = 0
            If imLnRowNo > 0 Then
                smLineType = mGetLineType(imLnRowNo)
                If (smLineType <> "H") And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
                    igGameSchdVefCode = imCntrVefCode
                End If
            End If
            udcCGameInv.Action 2
            udcCGameInv.Visible = True
            Screen.MousePointer = vbDefault
        'Case 2  'Digital
        '    If (Asc(tgSpf.sUsingFeatures6) And DIGITALCONTENT) = DIGITALCONTENT Then 'Using Live Log
        '        igUpdateAllowed = imUpdateAllowed
        '        If igRepNetChgAllowed Then
        '            igUpdateAllowed = False
        '        End If
        '        udcCDigital.Action 2
        '        udcCDigital.Visible = True
        '        Screen.MousePointer = vbDefault
        '    End If
        Case imTabMap(TABNTR)    '3  'NTR
            mCBill_Call
        Case imTabMap(TABAIRTIME)    '4  'Air Time
            If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) <> PODAIRTIME) And ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
                MsgBox "To enable Air Time and/or Podcast Spots, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                grdCPMBuy.Visible = False
                imInTseLine = False
                Screen.MousePointer = vbDefault    'Default
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            ilIndex = lbcType.ListIndex
            If ilIndex < 0 Then
                'slStr = lbcType.List(0) 'Standard
                slStr = ""  'Don't set as undo will not come on
            Else
                slStr = lbcType.List(ilIndex)
            End If
'            If (slStr <> "Standard") And (slStr <> "") Then
'                MsgBox "Air Time and Podcast Spot buys only Allowed with Standard Contract Buys", vbOKOnly + vbExclamation, "Information"
'                imInTseLine = False
'                Screen.MousePointer = vbDefault    'Default
'                pbcClickFocus.SetFocus
'                Exit Sub
'            End If
            '9/10/21: Luigi - Mix Air Time... Changed to Ad Server View Tab only
            'If contract contains Ad Server rows, must be in view mode if Ad Server View Tab only checked.
'            If (slStr <> "Standard") And (slStr <> "") And (Asc(tgSaf(0).sFeatures8) And PODADSERVERVIEWONLY) = PODADSERVERVIEWONLY Then
'                If ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
'                    'Check if airtime spots purchased
'                    For llRow = grdCPMBuy.FixedRows To grdCPMBuy.Rows - 1 Step 1
'                        If (grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
'                            MsgBox "Mixture of Air Time and Podcast CPM buys not Allowed, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
'                            imInTseLine = False
'                            Screen.MousePointer = vbDefault    'Default
'                            pbcClickFocus.SetFocus
'                            Exit Sub
'                        End If
'                    Next llRow
'                End If
'            End If
            plcLine.Visible = True
            pbcLine.Visible = True
            pbcLnTotal.Visible = True
            vbcLines.Visible = True
            pbcLnSTab.Visible = True
            pbcLnTab.Visible = True
        Case imTabMap(TABPODCASTCPM)    'Podcast CPM
            If (Asc(tgSaf(0).sFeatures8) And PODADSERVER) <> PODADSERVER Then
                '10527
                'MsgBox "To enable Podcast Ad Server, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                MsgBox "To enable Digital, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                imInTseLine = False
                Screen.MousePointer = vbDefault    'Default
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            'If (Asc(tgSaf(0).sFeatures8) And PODADSERVERVIEWONLY) = PODADSERVERVIEWONLY Then
            '    'Check if airtime spots purchased
            '    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            '        ilVpf = gBinarySearchVpf(tgClfCntr(ilClf).ClfRec.iVefCode)
            '        If ilVpf <> -1 Then
            '            If (tgVpf(ilVpf).sGMedium <> "P") Then 'And (tgVpf(ilVpf).sGMedium <> "M") Then
            '                MsgBox "Mixture of Air Time and Podcast buys not Allowed, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
            '                imInTseLine = False
            '                Screen.MousePointer = vbDefault    'Default
            '                pbcClickFocus.SetFocus
            '                Exit Sub
            '            End If
            '        End If
            '    Next ilClf
            'End If
            If (Asc(tgSaf(0).sFeatures8) And PODADSERVERVIEWONLY) = PODADSERVERVIEWONLY Then
                If ((sgCntrScreen = "Orders") And (imStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (imStep1Index >= 6)) Then
                Else
                    '10527
                   ' MsgBox "View Mode only Allowed with Ad Server Tab", vbOKOnly + vbExclamation, "Information"
                    MsgBox "View Mode only Allowed with Digital Tab", vbOKOnly + vbExclamation, "Information"
                    imInTseLine = False
                    Screen.MousePointer = vbDefault    'Default
                    pbcClickFocus.SetFocus
                    Exit Sub
                End If
            End If
            pbcSumType(2).Visible = True
            cmcPackage(1).Visible = True
            cmcTerminate(1).Visible = True
            pbcLnSTab.Visible = True
            pbcLnTab.Visible = True
            grdCPMBuy.Visible = True
            edcLineNo(1).Visible = True
            edcLineNo(2).Visible = True
            If bmFlatRateExist Then
                edcLineNo(3).Visible = False
            Else
                edcLineNo(3).Visible = True
            End If
            edcLineNo(4).Visible = True
            edcLineNo(5).Visible = True
            Contract.pbcLineArrow.BackColor = vbButtonFace
            Contract.pbcLineArrow.Picture = IconTraf!imcArrow.Picture
            pbcLbcVehicle.ZOrder vbBringToFront
            grdCPMBuy.Redraw = True
        Case imTabMap(TABMERCH)    '5  'Merchandising
            mCBill_Call
        Case imTabMap(TABPROMO)    '6  'Promotional
            mCBill_Call
        Case imTabMap(TABINSTALL)    '7  'Installment
            If ((Asc(tgSpf.sSportInfo) And USINGSPORTS) = USINGSPORTS) And ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                If (UBound(tgFBSbf) <= LBound(tgFBSbf)) Then
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        ilVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                        If ilVef <> -1 Then
                            If tgMVef(ilVef).sType = "G" Then
                                imInTseLine = False
                                Screen.MousePointer = vbDefault    'Default
                                MsgBox "Sports and Installment disallowed when using Revenue By Events on the same contract", vbOKOnly + vbExclamation, "Warning"
                                Exit Sub
                            End If
                        End If
                    Next ilClf
                End If
            End If
            If lbcBillCycle.ListIndex < 0 Then
                If lbcBillCycle.ListCount <= 1 Then
                    lbcBillCycle.ListIndex = 0
                Else
                    If lbcBillCycle.ListIndex < 0 Then
                        lbcBillCycle.ListIndex = mBillingCycle() 'Determine initial billing cycle
                    End If
                End If
            End If
            'If lbcBillCycle.ListIndex >= 1 Then
            '    Screen.MousePointer = vbDefault    'Default
            '    MsgBox "Installment only allowed when Standard Billing cycle selected", vbOKOnly + vbExclamation, "Warning"
            '    Exit Sub
            'End If
            If lbcBillCycle.ListIndex < 0 Then
                slStr = ""
            Else
                slStr = lbcBillCycle.List(lbcBillCycle.ListIndex)
                If Left(slStr, 1) <> "S" Then
                    imInTseLine = False
                    Screen.MousePointer = vbDefault    'Default
                    MsgBox "Installment only allowed when Standard Billing cycle selected", vbOKOnly + vbExclamation, "Warning"
                    Exit Sub
                End If
            End If
            '5/5/15: Disallow installment if not in balance
            If imTotColor <> 2 Then
                imInTseLine = False
                Screen.MousePointer = vbDefault    'Default
                MsgBox "Gross Amount and Total Line Amount plus NTR not in Balance", vbOKOnly + vbExclamation, "Warning"
                Exit Sub
            End If
            mCBill_Call
        Case imTabMap(TABAVAIL)    '8  'Avails
            If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) <> PODAIRTIME) And ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
                MsgBox "To enable Air Time and/or Podcast Spots, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                grdCPMBuy.Visible = False
                imInTseLine = False
                Screen.MousePointer = vbDefault    'Default
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            '10843 remove dead code
          '  If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
                   If bmViewedAvailTab = False And bmViewedProtectionTab = False And imLoadingForm = False Then
                        mAvailTab
                        If bmViewedResearchTab = False Then
                            mResearchForTabs VEHINDEX, DPINDEX
                        End If
                    End If
                    plcLine.Visible = True
                    pbcLine.Visible = True
                    pbcLnTotal.Visible = True
                    vbcLines.Visible = True
                    pbcLnSTab.Visible = True
                    pbcLnTab.Visible = True
                    bmInAvailTab = False
                    bmViewedAvailTab = True
                'End If
            'End If
        Case imTabMap(TABPROTECTION)    '9  'Protection
            If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) <> PODAIRTIME) And ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
                MsgBox "To enable Air Time and/or Podcast Spots, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                grdCPMBuy.Visible = False
                imInTseLine = False
                Screen.MousePointer = vbDefault    'Default
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            '10843 remove dead code
           ' If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
                    If bmViewedAvailTab = False And bmViewedProtectionTab = False Then
                        mAvailTab
                        If bmViewedResearchTab = False Then
                            mResearchForTabs VEHINDEX, DPINDEX
                        End If
                    End If
                    plcLine.Visible = True
                    pbcLine.Visible = True
                    pbcLnTotal.Visible = True
                    vbcLines.Visible = True
                    pbcLnSTab.Visible = True
                    pbcLnTab.Visible = True
                    bmInAvailTab = False
                    bmViewedProtectionTab = True
                'End If
           ' End If
        Case imTabMap(TABRESEARCH)    '10 'Research
            If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) <> PODAIRTIME) And ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
                MsgBox "To enable Air Time and/or Podcast Spots, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                grdCPMBuy.Visible = False
                imInTseLine = False
                Screen.MousePointer = vbDefault    'Default
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            '10843 remove dead code
'            If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
                    lacAudTotals_Click
                    If bmViewedAvailTab = False And bmViewedProtectionTab = False And bmViewedResearchTab = False Then
                        mResearchForTabs VEHINDEX, DPINDEX
                    End If
                    mGetMajorityPopulation
                    plcLine.Visible = True
                    pbcLine.Visible = True
                    pbcLnTotal.Visible = True
                    vbcLines.Visible = True
                    pbcLnSTab.Visible = True
                    pbcLnTab.Visible = True
                    bmViewedResearchTab = True
                'End If
           ' End If
    End Select
    mSetLineArea
    mSetCommands
    imTscLineIndex = tscLine.SelectedItem.Index
    imInTseLine = False
    igTabMapIndex = 0
    If tscLine.SelectedItem.Index = imTabMap(TABPODCASTCPM) Then
        igTabMapIndex = 1
    Else
        grdCPMBuy.Visible = False
    End If
    If ilSvTabMapIndex <> igTabMapIndex Then
        If tscLine.SelectedItem.Index = imTabMap(TABAIRTIME) Then
            pbcLine_Paint
        End If
    End If
    Screen.MousePointer = vbDefault
    If Not bmInCancel Then
        tmcClick.Enabled = True
    End If
End Sub

Private Sub tscLine_BeforeClick(Cancel As Integer)
    Dim ilClf As Integer
    Dim slLineType As String
    Dim ilDP As Integer
    Dim ilRdfCode As Integer
    
    Select Case tscLine.SelectedItem.Index
        Case imTabMap(TABMULTIMEDIA)    '1  'Multi-Media
        'Case 2  'Digital
        '    If (Asc(tgSpf.sUsingFeatures6) And DIGITALCONTENT) = DIGITALCONTENT Then 'Using Live Log
        '    End If
        Case imTabMap(TABNTR)    '3  'NTR
            If Not udcCBill.Verify() Then
                Cancel = True
            End If
        Case imTabMap(TABAIRTIME)    '4  'Air Time
        Case imTabMap(TABPODCASTCPM)    'Podcast CPM
        Case imTabMap(TABMERCH)    '5  'Merchandising
            If Not udcCBill.Verify() Then
                Cancel = True
            End If
        Case imTabMap(TABPROMO)    '6  'Promotional
            If Not udcCBill.Verify() Then
                Cancel = True
            End If
        Case imTabMap(TABINSTALL)    '7  'Installment
        Case imTabMap(TABAVAIL)    '8  'Avails
        Case imTabMap(TABPROTECTION)    '9  'Protection
        Case imTabMap(TABRESEARCH)    '10 'Research
    End Select
End Sub

Private Sub tscLine_Click()
    tmcLnTab.Interval = 50
    tmcLnTab.Enabled = True
    Exit Sub
'    'To switch tab: tscLine.Tabs(3).Selected = True
'    Dim ilClf As Integer
'    Dim ilVef As Integer
'    Dim slStr As String
'
'    Screen.MousePointer = vbHourglass
'    imInTseLine = True
'    DoEvents
'    If (tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Then
'        bmInAvailTab = True
'    End If
'    mAllSetShow 3
''    If plcLine.Visible Then
''        mAllSetShow 0
''        plcLine.Visible = False
''        pbcLine.Visible = False
''        pbcLnTotal.Visible = False
''        vbcLines.Visible = False
''        pbcLnSTab.Visible = False
''        pbcLnTab.Visible = False
''    End If
'    If udcCBill.Visible Then
'        udcCBill.Action 5
'        udcCBill.Visible = False
'        If igPkgChgd = YES Then
'            tmHdCtrls(BILLCYCLEINDEX).iChg = True
'            mSetCommands
'        End If
'        'Screen.MousePointer = vbDefault    'Default
'        mPkgTotal
'        mCntrTotal
'    '5/5/15: Disallow installment if not in balance
'    ElseIf tscLine.SelectedItem.Index = 7 Then
'        mPkgTotal
'        mCntrTotal
'    End If
'    If udcCGameInv.Visible Then
'        udcCGameInv.Action 5
'        udcCGameInv.Visible = False
'        mPkgTotal
'        mCntrTotal
'    End If
'    If udcCDigital.Visible Then
'        udcCDigital.Action 5
'        udcCDigital.Visible = False
'    End If
'    Screen.MousePointer = vbHourglass
'    If Not mTscLineTabOk() Then
'        bmInAvailTab = False
'        Set tscLine.SelectedItem = tscLine.Tabs.Item(imTscLineIndex)
'        Exit Sub
'    End If
'    If plcLine.Visible Then
'        mAllSetShow 0
'        plcLine.Visible = False
'        pbcLine.Visible = False
'        pbcLnTotal.Visible = False
'        vbcLines.Visible = False
'        pbcLnSTab.Visible = False
'        pbcLnTab.Visible = False
'    End If
'    DoEvents
'    '12/5/19:Hide demo bar
'    If tscLine.SelectedItem.Index <> 4 Then
'        If plcDemoBar.Visible Then
'            cmcDemoBar_Click
'            If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
'                lacAudTotals_Click
'            End If
'        ElseIf tscLine.SelectedItem.Index >= 8 And imTscLineIndex = 4 Then
'            If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
'                lacAudTotals_Click
'            End If
'        End If
'    End If
'    'mSetLineArea
'    If tscLine.SelectedItem.Index < 8 Then
'        If imLnTotalType = 2 Then
'            imLnTotalType = 0
'            mReSetLinePrice
'            lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
'            lacPrice(0).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'            pbcSumType(1).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'            pbcSumType(1).Cls
'            pbcSumType_Paint (1)
'        End If
'        lmToolTipNext = -1
'        imToolTipWeekIndex = -1
'    Else
'        If imLnTotalType <> 2 Then
'            If (sgCntrScreen <> "Orders") Then
'                If imLnTotalType = 1 Then
'                    imLnTotalType = 2
'                    mReSetLinePrice
'                Else
'                    imLnTotalType = 2
'                End If
'                lacPrice(0).Caption = "Research"  ' & sgLF & sgCR & "Price"
'                lacPrice(0).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                pbcSumType(1).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                pbcSumType(1).Cls
'                pbcSumType_Paint (1)
'            Else
'                imLnTotalType = 0
'                mReSetLinePrice
'                lacPrice(0).Caption = "Average Price"  ' & sgLF & sgCR & "Price"
'                lacPrice(0).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                pbcSumType(1).Height = tmLnCtrls(DPINDEX).fBoxY - 15
'                pbcSumType(1).Cls
'                pbcSumType_Paint (1)
'            End If
'        End If
'    End If
'    Select Case tscLine.SelectedItem.Index
'        Case 1  'Multi-Media
'            igDirAdvt = False
'            If tmAdf.sBillAgyDir = "D" Then
'                igDirAdvt = True
'            End If
'            igUpdateAllowed = imUpdateAllowed
'            If igRepNetChgAllowed Then
'                igUpdateAllowed = False
'            End If
'            igGameSchdVefCode = 0
'            If imLnRowNo > 0 Then
'                smLineType = mGetLineType(imLnRowNo)
'                If (smLineType <> "H") And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
'                    igGameSchdVefCode = imCntrVefCode
'                End If
'            End If
'            udcCGameInv.Action 2
'            udcCGameInv.Visible = True
'            Screen.MousePointer = vbDefault
'        Case 2  'Digital
'            If (Asc(tgSpf.sUsingFeatures6) And DIGITALCONTENT) = DIGITALCONTENT Then 'Using Live Log
'                igUpdateAllowed = imUpdateAllowed
'                If igRepNetChgAllowed Then
'                    igUpdateAllowed = False
'                End If
'                udcCDigital.Action 2
'                udcCDigital.Visible = True
'                Screen.MousePointer = vbDefault
'            End If
'        Case 3  'NTR
'            mCBill_Call
'        Case 4  'Air Time
'            plcLine.Visible = True
'            pbcLine.Visible = True
'            pbcLnTotal.Visible = True
'            vbcLines.Visible = True
'            pbcLnSTab.Visible = True
'            pbcLnTab.Visible = True
'        Case 5  'Merchandising
'            mCBill_Call
'        Case 6  'Promotional
'            mCBill_Call
'        Case 7  'Installment
'            If ((Asc(tgSpf.sSportInfo) And USINGSPORTS) = USINGSPORTS) And ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
'                If (UBound(tgFBSbf) <= LBound(tgFBSbf)) Then
'                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'                        ilVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
'                        If ilVef <> -1 Then
'                            If tgMVef(ilVef).sType = "G" Then
'                                imInTseLine = False
'                                Screen.MousePointer = vbDefault    'Default
'                                MsgBox "Sports and Installment disallowed when using Revenue By Events on the same contract", vbOKOnly + vbExclamation, "Warning"
'                                Exit Sub
'                            End If
'                        End If
'                    Next ilClf
'                End If
'            End If
'            If lbcBillCycle.ListIndex < 0 Then
'                If lbcBillCycle.ListCount <= 1 Then
'                    lbcBillCycle.ListIndex = 0
'                Else
'                    If lbcBillCycle.ListIndex < 0 Then
'                        lbcBillCycle.ListIndex = mBillingCycle() 'Determine initial billing cycle
'                    End If
'                End If
'            End If
'            'If lbcBillCycle.ListIndex >= 1 Then
'            '    Screen.MousePointer = vbDefault    'Default
'            '    MsgBox "Installment only allowed when Standard Billing cycle selected", vbOKOnly + vbExclamation, "Warning"
'            '    Exit Sub
'            'End If
'            If lbcBillCycle.ListIndex < 0 Then
'                slStr = ""
'            Else
'                slStr = lbcBillCycle.List(lbcBillCycle.ListIndex)
'                If Left(slStr, 1) <> "S" Then
'                    imInTseLine = False
'                    Screen.MousePointer = vbDefault    'Default
'                    MsgBox "Installment only allowed when Standard Billing cycle selected", vbOKOnly + vbExclamation, "Warning"
'                    Exit Sub
'                End If
'            End If
'            '5/5/15: Disallow installment if not in balance
'            If imTotColor <> 2 Then
'                imInTseLine = False
'                Screen.MousePointer = vbDefault    'Default
'                MsgBox "Gross Amount and Total Line Amount plus NTR not in Balance", vbOKOnly + vbExclamation, "Warning"
'                Exit Sub
'            End If
'            mCBill_Call
'        Case 8  'Avails
'            If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
'                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
'                   If bmViewedAvailTab = False And bmViewedProtectionTab = False And imLoadingForm = False Then
'                        mAvailTab
'                        If bmViewedResearchTab = False Then
'                            mResearchForTabs VEHINDEX, DPINDEX
'                        End If
'                    End If
'                    plcLine.Visible = True
'                    pbcLine.Visible = True
'                    pbcLnTotal.Visible = True
'                    vbcLines.Visible = True
'                    pbcLnSTab.Visible = True
'                    pbcLnTab.Visible = True
'                    bmInAvailTab = False
'                    bmViewedAvailTab = True
'                'End If
'            End If
'        Case 9  'Protection
'            If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
'                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
'                    If bmViewedAvailTab = False And bmViewedProtectionTab = False Then
'                        mAvailTab
'                        If bmViewedResearchTab = False Then
'                            mResearchForTabs VEHINDEX, DPINDEX
'                        End If
'                    End If
'                    plcLine.Visible = True
'                    pbcLine.Visible = True
'                    pbcLnTotal.Visible = True
'                    vbcLines.Visible = True
'                    pbcLnSTab.Visible = True
'                    pbcLnTab.Visible = True
'                    bmInAvailTab = False
'                    bmViewedProtectionTab = True
'                'End If
'            End If
'        Case 10 'Research
'            If tgSpf.sCLnStdQt <> "Y" Then  'disallow avails/protectiona nd research tab if using Quarters. Problem is that both use imLnTotalType value 2
'                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName And bgInternalGuide) Then
'                    lacAudTotals_Click
'                    If bmViewedAvailTab = False And bmViewedProtectionTab = False And bmViewedResearchTab = False Then
'                        mResearchForTabs VEHINDEX, DPINDEX
'                    End If
'                    mGetMajorityPopulation
'                    plcLine.Visible = True
'                    pbcLine.Visible = True
'                    pbcLnTotal.Visible = True
'                    vbcLines.Visible = True
'                    pbcLnSTab.Visible = True
'                    pbcLnTab.Visible = True
'                    bmViewedResearchTab = True
'                'End If
'            End If
'    End Select
'    mSetLineArea
'    mSetCommands
'    imTscLineIndex = tscLine.SelectedItem.Index
'    imInTseLine = False
'    Screen.MousePointer = vbDefault
'    If Not bmInCancel Then
'        tmcClick.Enabled = True
'    End If
End Sub


Private Sub tscLine_GotFocus()
    'If Contract.grdCPMBuy.Visible Then
    '    mSetBGColorWhite True
    '    mCPMSetShow
    'End If
    mAllSetShow 0
End Sub

Private Sub udcCBill_NTRDollars(slNTRTotal As String)
    tmHdCtrls(BILLCYCLEINDEX).iChg = True
    mSetCommands
    smIBCTotal = slNTRTotal
    mCntrTotal
End Sub

Private Sub udcCBill_GotFocus()
    mAllSetShow 3   'Required here and in tscCBill_click
End Sub

Private Sub udcCBill_SetSave(ilStatus As Integer)
    If ilStatus Then
        imNTRChg = True
    End If
    mSetCommands
End Sub

Private Sub udcCDigital_GotFocus()
    mAllSetShow 3   'Required here and in tscCBill_click
End Sub

Private Sub udcCGameInv_GotFocus()
    mAllSetShow 3   'Required here and in tscCBill_click
End Sub

Private Sub udcCGameInv_SetSave(ilStatus As Integer)
    If ilStatus Then
        imGameInvChg = True
        mSetCommands
    End If
End Sub

Private Sub vbcLines_Change()
    Dim ilPaintLnRowNo As Integer

    ilPaintLnRowNo = imPaintLnRowNo
    If imSettingValue Then
        pbcLine.Cls
        imPaintLnRowNo = -1
        pbcLine_Paint
        imSettingValue = False
    Else
        'mLnSetShow imLnBoxNo
        'pbcLine.Cls
        If imLnBoxNo >= 0 Then
            mAllSetShow 0
        'Else
        '    pbcLine.Cls
        End If
        pbcLine.Cls
        imPaintLnRowNo = -1
        pbcLine_Paint
        mLnEnableBox imLnBoxNo
    End If
    imPaintLnRowNo = ilPaintLnRowNo
    'vbcLines.SetFocus
End Sub

Private Sub vbcLines_GotFocus()
    mAllSetShow 0
    gCtrlGotFocus ActiveControl
End Sub

Private Sub vbcRBVeh_Change(Index As Integer)
    If imSettingValue Then
        imSettingValue = False
    Else
        pbcRBVeh(Index).Cls
        pbcRBVeh_Paint Index
        imSettingValue = False
    End If
End Sub

Private Sub vbcRBVeh_GotFocus(Index As Integer)
    gCtrlGotFocus ActiveControl
End Sub

Private Sub vbcRBVeh_Scroll(Index As Integer)
    vbcRBVeh_Change Index
End Sub

Private Sub vbcSummary_Change()
    If imDBTotals = 5 Then
        pbcDemoBar(2).Cls
        pbcDemoBar_Paint 2
    Else
        pbcDemoBar(3).Cls
        pbcDemoBar_Paint 3
    End If
End Sub

Private Sub plcOv_Paint()
    plcOv.CurrentX = 0
    plcOv.CurrentY = 0
    plcOv.Print "Override"
End Sub

Private Sub plcComment_Paint()
    plcComment.CurrentX = 0
    plcComment.CurrentY = 0
    plcComment.Print "Comment"
End Sub

Private Sub plcShare_Paint()
    plcShare.Cls
    plcShare.CurrentX = 0
    plcShare.CurrentY = 0
    plcShare.Print smShareCaption
End Sub

Private Sub plcLine_Paint()
    'plcLine.CurrentX = 0
    'plcLine.CurrentY = 0
    'plcLine.Print "Air Time"
End Sub

Private Sub plcPower_Paint()
    plcPower.Cls
    If Trim$(smPowerCaption) = "Rate Bar" Then
        plcPower.CurrentX = (Contract.plcPower.Width - Contract.plcPower.TextWidth(smPowerCaption)) / 2
    Else
'        plcPower.CurrentX = 0
    End If
    plcPower.CurrentY = 0
    plcPower.Print "Speed Bar"  'smPowerCaption
End Sub

Private Sub plcDemoBar_Paint()
    plcDemoBar.CurrentX = 0
    plcDemoBar.CurrentY = 0
    plcDemoBar.Print "Demo Bar"
End Sub

Private Sub mGenRBDates()
    Dim slStartDate As String
    Dim llStartDate As Long
    Dim slEndDate As String
    Dim llEndDate As Long
    Dim llDate As Long
    Dim slDate As String
    Dim ilNoOn As Integer
    Dim ilNoOff As Integer
    Dim ilOn As Integer
    Dim ilOff As Integer
    Dim ilCycle As Integer  '0=On; 1=Off
    Dim slStr As String
    Dim ilNoSpots As Integer
    Dim ilFound As Integer
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim ilWeeksChgd As Integer

    ilWeeksChgd = False
    slStartDate = edcPBDate(0).Text
    If Not gValidDate(slStartDate) Then
        'lbcRBDatesSpots.Clear
        'pbcLbcRBDatesSpots.Cls
        Exit Sub
    End If
    slEndDate = edcPBDate(1).Text
    If Not gValidDate(slEndDate) Then
        'lbcRBDatesSpots.Clear
        'pbcLbcRBDatesSpots.Cls
        Exit Sub
    End If
    slStr = edcRBWks(0).Text
    If slStr = "" Then
        'lbcRBDatesSpots.Clear
        'pbcLbcRBDatesSpots.Cls
        Exit Sub
    End If
    ilOn = Val(slStr)
    If ilOn = 0 Then
        'lbcRBDatesSpots.Clear
        'pbcLbcRBDatesSpots.Cls
        Exit Sub
    End If
    If imINRBPBCPaint Then
        Exit Sub
    End If
    imINRBPBCPaint = True
    slStartDate = gObtainPrevMonday(slStartDate)
    llStartDate = gDateValue(slStartDate)
    slEndDate = gObtainNextSunday(slEndDate)
    llEndDate = gDateValue(slEndDate)
    slStr = edcRBWks(0).Text
    slStr = edcRBWks(1).Text
    ilOff = Val(slStr)
    slStr = edcRBWks(3).Text
    ilNoSpots = Val(slStr)
    'lbcRBDateSpot.ListItems.Clear
    ilNoOn = 0
    ilNoOff = 0
    ilCycle = 0
    imResetSelection = 0
    For llDate = llStartDate To llEndDate Step 7
        slDate = Format$(llDate, "m/d/yy")
        ilFound = False
        ilIndex = 0
        For ilLoop = 0 To lbcRBDatesSpots(0).ListCount - 1 Step 1
            ilIndex = ilLoop
            slStr = lbcRBDatesSpots(0).List(ilLoop)
            ilRet = gParseItem(slStr, 1, "|", slStr)
            If llDate = gDateValue(slStr) Then
                ilFound = True
                Exit For
            ElseIf llDate < gDateValue(slStr) Then
                Exit For
            End If
            If ilLoop = lbcRBDatesSpots(0).ListCount - 1 Then
                ilIndex = ilLoop + 1
                Exit For
            End If
        Next ilLoop
        If Not ilFound Then
            lbcRBDatesSpots(0).AddItem slDate & "|" & Trim$(str$(ilNoSpots)), ilIndex
            ilIndex = lbcRBDatesSpots(0).NewIndex
            ilWeeksChgd = True
        End If
        If ilCycle = 0 Then
            ilNoOn = ilNoOn + 1
            If ilNoOn >= ilOn Then
                If ilOff > 0 Then
                    ilCycle = 1
                Else
                    ilCycle = 0
                End If
                ilNoOn = 0
            End If
            If Not ilFound Then
                If Not lbcRBDatesSpots(0).Selected(ilIndex) Then
                    ilWeeksChgd = True
                End If
                lbcRBDatesSpots(0).Selected(ilIndex) = True
            End If
        Else
            If Not ilFound Then
                If lbcRBDatesSpots(0).Selected(ilIndex) Then
                    ilWeeksChgd = True
                End If
                lbcRBDatesSpots(0).Selected(ilIndex) = False
            End If
            ilNoOff = ilNoOff + 1
            If ilNoOff >= ilOff Then
                ilCycle = 0
                ilNoOff = 0
            End If
        End If
    Next llDate
    ilLoop = 0
    Do While ilLoop < lbcRBDatesSpots(0).ListCount
        slStr = lbcRBDatesSpots(0).List(ilLoop)
        ilRet = gParseItem(slStr, 1, "|", slStr)
        If (gDateValue(slStr) < llStartDate) Or (gDateValue(slStr) > llEndDate) Then
            lbcRBDatesSpots(0).RemoveItem ilLoop
            ilWeeksChgd = True
        Else
            ilLoop = ilLoop + 1
        End If
    Loop
    If ilWeeksChgd Then
        For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
            tmPB1DP(ilLoop).iAudSet = False
        Next ilLoop
    End If
    mSetMixedSpotFlag
    imINRBPBCPaint = False
    pbcLbcRBDatesSpots(0).Cls
    lbcRBDatesSpots(0).TopIndex = 0
    pbclbcRBDatesSpots_Paint 0
End Sub

Private Sub mSetRBEquals(ilType As Integer)
    Dim ilIndex As Integer
    Dim ilLoop As Integer

    Screen.MousePointer = vbHourglass
    If ilType = 2 Then
        mPopPBRates ilType, hmLcf, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, hmPvf, imPBFactor, imDGSave()
    Else
        mPopPBRates ilType, hmLcf, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, hmPvf, 0, imDGSave()
    End If
    Screen.MousePointer = vbHourglass
    If ilType <> 4 Then
        If (imDetailSortIndex(1) <> 0) Or (imDetailSortIndex(0) <> 0) Then
            'Save index as the click event will age listindex
            ilIndex = imDetailSortIndex(0) - 1
            For ilLoop = LBound(imDetailSortIndex) To UBound(imDetailSortIndex) - 1 Step 1
                imDetailSortIndex(ilLoop) = imDetailSortIndex(ilLoop + 1)
            Next ilLoop
            mRateBarSort 0, ilIndex, imDetailSortIndex(), tmPB1DP()
        Else
            For ilLoop = LBound(imDetailSortIndex) To UBound(imDetailSortIndex) - 1 Step 1
                imDetailSortIndex(ilLoop) = 0
            Next ilLoop
            'Use Daypart within vehicle
            imDetailSortIndex(LBound(imDetailSortIndex)) = 3
            mRateBarSort 0, 1, imDetailSortIndex(), tmPB1DP()
        End If
    End If
    If (imRBView = 1) Or (imRBView = 2) Then
        If (imSumSortIndex(1) <> 0) Or (imSumSortIndex(0) <> 0) Then
            'Save index as the click event will age listindex
            ilIndex = imSumSortIndex(0) - 1
            For ilLoop = LBound(imSumSortIndex) To UBound(imSumSortIndex) - 1 Step 1
                imSumSortIndex(ilLoop) = imSumSortIndex(ilLoop + 1)
            Next ilLoop
            mRateBarSort 1, ilIndex, imSumSortIndex(), tmRB1DP()
        Else
            For ilLoop = LBound(imSumSortIndex) To UBound(imSumSortIndex) - 1 Step 1
                imSumSortIndex(ilLoop) = 0
            Next ilLoop
            'Use Daypart within vehicle
            imSumSortIndex(LBound(imSumSortIndex)) = 3
            mRateBarSort 1, 1, imSumSortIndex(), tmRB1DP()
        End If
    End If
    pbcRBVeh(0).Cls
    pbcRBVeh_Paint 0
    pbcRBVeh(1).Cls
    pbcRBVeh_Paint 1
    mPBSetCommands
    Screen.MousePointer = vbDefault
End Sub

Private Sub mSetMixDatesSpots()
    Dim slStr As String
    Dim ilLoop As Integer
    Dim slvalue As String
    Dim ilRet As Integer
    Dim slDate As String

    'If imRBBox < LBound(tmRBCtrls) Or imRBBox > UBound(tmRBCtrls) Then
    If imRBBox < imLBCTCtrls Or imRBBox > UBound(tmRBCtrls) Then
        Exit Sub
    End If
    If imRBRow < 0 Then
        Exit Sub
    End If
    If tmPB1DP(imRBRow - 1).lMixStartDate <= 0 Then
        tmPB1DP(imRBRow - 1).iMixSpotIndex = UBound(smRBMixDatesSpots)
        ReDim Preserve smRBMixDatesSpots(0 To UBound(smRBMixDatesSpots) + 1) As String
    End If
    slStr = lbcRBDatesSpots(1).List(0)
    ilRet = gParseItem(slStr, 1, "|", slDate)
    tmPB1DP(imRBRow - 1).lMixStartDate = gDateValue(slDate)
    smRBMixDatesSpots(tmPB1DP(imRBRow - 1).iMixSpotIndex) = ""
    For ilLoop = 0 To lbcRBDatesSpots(1).ListCount - 1 Step 1
        slStr = lbcRBDatesSpots(1).List(ilLoop)
        ilRet = gParseItem(slStr, 2, "|", slvalue)
        slvalue = Trim$(slvalue)
        If lbcRBDatesSpots(1).Selected(ilLoop) Then
            smRBMixDatesSpots(tmPB1DP(imRBRow - 1).iMixSpotIndex) = smRBMixDatesSpots(tmPB1DP(imRBRow - 1).iMixSpotIndex) & slvalue & "|"
        Else
            smRBMixDatesSpots(tmPB1DP(imRBRow - 1).iMixSpotIndex) = smRBMixDatesSpots(tmPB1DP(imRBRow - 1).iMixSpotIndex) & "-" & slvalue & "|"
        End If
    Next ilLoop
End Sub

Private Sub mSetMixedSpotFlag()
    Dim ilLoop As Integer
    Dim ilTest As Integer
    Dim slStr As String
    Dim ilRet As Integer
    Dim slTest As String
    Dim slvalue As String

    imRBMixedSpots = False
    For ilLoop = 0 To lbcRBDatesSpots(0).ListCount - 2 Step 1
        If lbcRBDatesSpots(0).Selected(ilLoop) Then
            slStr = lbcRBDatesSpots(0).List(ilLoop)
            ilRet = gParseItem(slStr, 2, "|", slTest)
            For ilTest = ilLoop + 1 To lbcRBDatesSpots(0).ListCount - 1 Step 1
                If lbcRBDatesSpots(0).Selected(ilTest) Then
                    slStr = lbcRBDatesSpots(0).List(ilLoop + 1)
                    ilRet = gParseItem(slStr, 2, "|", slvalue)
                    If Val(slTest) <> Val(slvalue) Then
                        imRBMixedSpots = True
                        Exit Sub
                    End If
                End If
            Next ilTest
        End If
    Next ilLoop
End Sub

Public Sub mRBSum()
    Dim ilIndex As Integer
    Dim ilLoop As Integer

    If mRBSummary() = False Then
        Screen.MousePointer = vbDefault
        Contract.mClearPB
        'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
        gExceedLimitMsg
        Contract.cmcPBCancel_Click
        Exit Sub
    End If
    If (imSumSortIndex(1) <> 0) Or (imSumSortIndex(0) <> 0) Then
        'Save index as the click event will age listindex
        ilIndex = imSumSortIndex(0) - 1
        For ilLoop = LBound(imSumSortIndex) To UBound(imSumSortIndex) - 1 Step 1
            imSumSortIndex(ilLoop) = imSumSortIndex(ilLoop + 1)
        Next ilLoop
        mRateBarSort 1, ilIndex, imSumSortIndex(), tmRB1DP()
    Else
        For ilLoop = LBound(imSumSortIndex) To UBound(imSumSortIndex) - 1 Step 1
            imSumSortIndex(ilLoop) = 0
        Next ilLoop
        'Use Daypart within vehicle
        imSumSortIndex(LBound(imSumSortIndex)) = 3
        mRateBarSort 1, 1, imSumSortIndex(), tmRB1DP()
    End If
    pbcRBVeh(0).Cls
    pbcRBVeh_Paint 0
    pbcRBVeh(1).Cls
    pbcRBVeh_Paint 1
    mPBSetCommands
End Sub

Private Sub mSetRBOverrides(tlPB1DP As PBDPGEN)
    Dim ilFound As Integer
    Dim ilDay As Integer

    tlPB1DP.iAudSet = False
    ilFound = False
    For ilDay = 0 To 6 Step 1
        If imOvDays(ilDay) <> -1 Then
            ilFound = True
        End If
    Next ilDay
    If ilFound Then
        ilFound = False
        For ilDay = 0 To 6 Step 1
            If ((imOvDays(ilDay) = 0) And (imAllowedDays(ilDay + LBound(imAllowedDays)) = False)) Or ((imOvDays(ilDay) = 1) And (imAllowedDays(ilDay + LBound(imAllowedDays)) = True)) Then
                ilFound = True
            End If
        Next ilDay
        If ilFound Then
            For ilDay = 0 To 6 Step 1
                tlPB1DP.iOvDays(ilDay) = imOvDays(ilDay)
            Next ilDay
        Else
            For ilDay = 0 To 6 Step 1
                tlPB1DP.iOvDays(ilDay) = -1
            Next ilDay
        End If
    Else
        For ilDay = 0 To 6 Step 1
            tlPB1DP.iOvDays(ilDay) = -1
        Next ilDay
    End If
    'Set Start Time
    If Trim$(smDGSave(13)) <> "" Then
        If gValidTime(smDGSave(13)) Then
            tlPB1DP.sOvStartTime = smDGSave(13)
            If Trim$(smDGSave(14)) <> "" Then
                If gValidTime(smDGSave(14)) Then
                    tlPB1DP.sOvEndTime = smDGSave(14)
                    If Trim$(smDGSave(14)) <> "" Then
                    Else
                        tlPB1DP.sOvStartTime = ""
                        tlPB1DP.sOvEndTime = ""
                    End If
                Else
                    tlPB1DP.sOvStartTime = ""
                    tlPB1DP.sOvEndTime = ""
                End If
            Else
                tlPB1DP.sOvStartTime = ""
                tlPB1DP.sOvEndTime = ""
            End If
        Else
            tlPB1DP.sOvStartTime = ""
            tlPB1DP.sOvEndTime = ""
        End If
    Else
        tlPB1DP.sOvStartTime = ""
        tlPB1DP.sOvEndTime = ""
    End If
End Sub

Public Sub mSetTmOVCtrl()
    Dim ilLoop As Integer

    If (tgSpf.sAllowDailyBuys = "Y") And (plcPower.Visible = False) Then
        'gSetCtrl tmOV1Ctrls(OVWDINDEX), 30, 30, 1935, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVWDINDEX), 15, 15, 1935, fgBoxStH
        tmOV1Ctrls(OVWDINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVSPOTTOTALINDEX), 1980, tmOV1Ctrls(OVWDINDEX).fBoxY, 750, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVSPOTTOTALINDEX), 1965, tmOV1Ctrls(OVWDINDEX).fBoxY, 750, fgBoxStH
        tmOV1Ctrls(OVSPOTTOTALINDEX).iReq = False
        For ilLoop = 0 To 6 Step 1
            'gSetCtrl tmOV1Ctrls(OVDAYSINDEX + ilLoop), 30 + 390 * ilLoop, tmOV1Ctrls(OVWDINDEX).fBoxY + fgStDeltaY, 375, fgBoxStH
            gSetCtrl tmOV1Ctrls(OVDAYSINDEX + ilLoop), 15 + 390 * ilLoop, tmOV1Ctrls(OVWDINDEX).fBoxY + fgStDeltaY, 375, fgBoxStH
            tmOV1Ctrls(OVDAYSINDEX + ilLoop).iReq = False
        Next ilLoop
        'gSetCtrl tmOV1Ctrls(OVSTARTTIMEINDEX), 30, tmOV1Ctrls(OVDAYSINDEX).fBoxY + fgStDeltaY, 765, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVSTARTTIMEINDEX), 15, tmOV1Ctrls(OVDAYSINDEX).fBoxY + fgStDeltaY, 765, fgBoxStH
        tmOV1Ctrls(OVSTARTTIMEINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVENDTIMEINDEX), 810, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 765, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVENDTIMEINDEX), 795, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 765, fgBoxStH
        tmOV1Ctrls(OVENDTIMEINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVCOPYINDEX), 1590, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        'If ((Asc(tgSpf.sUsingFeatures8) And LRMANDATORY) = LRMANDATORY) And (((Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY) Or ((Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY)) Then
        '    tmOV1Ctrls(OVCOPYINDEX).iReq = True
        'Else
        '    tmOV1Ctrls(OVCOPYINDEX).iReq = False
        'End If
        'gSetCtrl tmOV1Ctrls(OVHIGHINDEX), 1980, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVHIGHINDEX), 1965, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        tmOV1Ctrls(OVHIGHINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVPREEMPTINDEX), 30, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY + fgStDeltaY, 1350, fgBoxStH
        'tmOV1Ctrls(OVPREEMPTINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVRANKINDEX), 2370, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVRANKINDEX), 2355, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        tmOV1Ctrls(OVHIGHINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVBBOPENINDEX), 30, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVBBOPENINDEX), 15, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1Ctrls(OVBBOPENINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVBBCLOSEINDEX), 915, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVBBCLOSEINDEX), 900, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 870, fgBoxStH
        tmOV1Ctrls(OVBBCLOSEINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVCOPYINDEX), 1800, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 885, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVCOPYINDEX), 1785, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 885, fgBoxStH
        If ((Asc(tgSpf.sUsingFeatures8) And LRMANDATORY) = LRMANDATORY) And (((Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY) Or ((Asc(tgSpf.sUsingFeatures3) And PROMOCOPY) = PROMOCOPY)) Then
            tmOV1Ctrls(OVCOPYINDEX).iReq = True
        Else
            tmOV1Ctrls(OVCOPYINDEX).iReq = False
        End If
        
        'ACT1
        gSetCtrl tmOV1ACT1Info, 15, tmOV1Ctrls(OVBBOPENINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1ACT1Info.iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1LINEUPINDEX), 30, tmOV1Ctrls(OVBBOPENINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1LINEUPINDEX), 900, tmOV1Ctrls(OVBBOPENINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1Ctrls(ACT1LINEUPINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1STOREDTIMESINDEX), 915, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1STOREDTIMESINDEX), 1785, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY, 940, fgBoxStH
        tmOV1Ctrls(ACT1STOREDTIMESINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1STOREDSPOTSINDEX), 1800, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY, 885, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1STOREDSPOTSINDEX), 15, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1Ctrls(ACT1STOREDSPOTSINDEX).iReq = False
        
        'gSetCtrl tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX), 30, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX), 900, tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxY, 870, fgBoxStH
        tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1DAYPARTFILTERINDEX), 915, tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX).fBoxY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1DAYPARTFILTERINDEX), 1785, tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxY, 940, fgBoxStH
        tmOV1Ctrls(ACT1DAYPARTFILTERINDEX).iReq = False
        
    Else
        'Days Used in Speed Bar
        gSetCtrl tmOV1Ctrls(OVWDINDEX), 0, 0, 0, 0
        tmOV1Ctrls(OVWDINDEX).iReq = False
        gSetCtrl tmOV1Ctrls(OVSPOTTOTALINDEX), 0, 0, 0, 0
        tmOV1Ctrls(OVSPOTTOTALINDEX).iReq = False
        For ilLoop = 0 To 6 Step 1
            'gSetCtrl tmOV1Ctrls(OVDAYSINDEX + ilLoop), 30 + 390 * ilLoop, 30, 375, fgBoxStH
            gSetCtrl tmOV1Ctrls(OVDAYSINDEX + ilLoop), 15 + 390 * ilLoop, 30, 375, fgBoxStH
            tmOV1Ctrls(OVDAYSINDEX + ilLoop).iReq = False
        Next ilLoop
        'gSetCtrl tmOV1Ctrls(OVSTARTTIMEINDEX), 30, tmOV1Ctrls(OVDAYSINDEX).fBoxY + fgStDeltaY, 765, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVSTARTTIMEINDEX), 15, tmOV1Ctrls(OVDAYSINDEX).fBoxY + fgStDeltaY, 765, fgBoxStH
        tmOV1Ctrls(OVSTARTTIMEINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVENDTIMEINDEX), 810, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 765, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVENDTIMEINDEX), 795, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 765, fgBoxStH
        tmOV1Ctrls(OVENDTIMEINDEX).iReq = False
        '1/2/18: Moved to BB row
        'gSetCtrl tmOV1Ctrls(OVCOPYINDEX), 1590, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        'If (Asc(tgSpf.sUsingFeatures8) And LRMANDATORY) = LRMANDATORY Then
        '    tmOV1Ctrls(OVCOPYINDEX).iReq = True
        'Else
        '    tmOV1Ctrls(OVCOPYINDEX).iReq = False
        'End If
        'gSetCtrl tmOV1Ctrls(OVHIGHINDEX), 1980, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVHIGHINDEX), 1965, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        tmOV1Ctrls(OVHIGHINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVPREEMPTINDEX), 30, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY + fgStDeltaY, 1350, fgBoxStH
        'tmOV1Ctrls(OVPREEMPTINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVRANKINDEX), 2370, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVRANKINDEX), 2355, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY, 375, fgBoxStH
        tmOV1Ctrls(OVHIGHINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVBBOPENINDEX), 30, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVBBOPENINDEX), 15, tmOV1Ctrls(OVSTARTTIMEINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1Ctrls(OVBBOPENINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVBBCLOSEINDEX), 915, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVBBCLOSEINDEX), 900, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 870, fgBoxStH
        tmOV1Ctrls(OVBBCLOSEINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(OVCOPYINDEX), 1800, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 885, fgBoxStH
        gSetCtrl tmOV1Ctrls(OVCOPYINDEX), 1785, tmOV1Ctrls(OVBBOPENINDEX).fBoxY, 885, fgBoxStH
        If (Asc(tgSpf.sUsingFeatures8) And LRMANDATORY) = LRMANDATORY Then
            tmOV1Ctrls(OVCOPYINDEX).iReq = True
        Else
            tmOV1Ctrls(OVCOPYINDEX).iReq = False
        End If
        
        'ACT1
        gSetCtrl tmOV1ACT1Info, 15, tmOV1Ctrls(OVBBOPENINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1ACT1Info.iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1LINEUPINDEX), 30, tmOV1Ctrls(OVBBOPENINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1LINEUPINDEX), 900, tmOV1Ctrls(OVBBOPENINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1Ctrls(ACT1LINEUPINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1STOREDTIMESINDEX), 915, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1STOREDTIMESINDEX), 1785, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY, 940, fgBoxStH
        tmOV1Ctrls(ACT1STOREDTIMESINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1STOREDSPOTSINDEX), 1800, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY, 885, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1STOREDSPOTSINDEX), 15, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        tmOV1Ctrls(ACT1STOREDSPOTSINDEX).iReq = False
        
        'gSetCtrl tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX), 30, tmOV1Ctrls(ACT1LINEUPINDEX).fBoxY + fgStDeltaY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX), 900, tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxY, 870, fgBoxStH
        tmOV1Ctrls(ACT1STOREDCLEARPCTINDEX).iReq = False
        'gSetCtrl tmOV1Ctrls(ACT1DAYPARTFILTERINDEX), 915, tmOV1Ctrls(ACT1DAYPARTFILTERINDEX).fBoxY, 870, fgBoxStH
        gSetCtrl tmOV1Ctrls(ACT1DAYPARTFILTERINDEX), 1785, tmOV1Ctrls(ACT1STOREDSPOTSINDEX).fBoxY, 940, fgBoxStH
        tmOV1Ctrls(ACT1DAYPARTFILTERINDEX).iReq = False
        
    End If
End Sub

Public Sub mSetTmOV2Ctrl()
    Dim ilLoop As Integer

    If imTerminate Then
        Exit Sub
    End If
    imShowOV2 = -1
    For ilLoop = 0 To 6 Step 1
        gSetCtrl tmDailyCtrls(OV2DAYSINDEX + ilLoop), 30 + 390 * ilLoop, 30, 375, fgBoxStH
    Next ilLoop
    If ((Asc(tgSpf.sOverrideOptions) And SPPREFERREDDT) = SPPREFERREDDT) And (Not mIsLnGame(imLnRowNo)) Then
        For ilLoop = 0 To 6 Step 1
            gSetCtrl tmOV2Ctrls(OV2DAYSINDEX + ilLoop), 630 + 390 * ilLoop, 30, 375, fgBoxStH
            tmOV2Ctrls(OV2DAYSINDEX + ilLoop).iReq = False
        Next ilLoop
        gSetCtrl tmOV2Ctrls(OV2STARTTIMEINDEX), 630, tmOV2Ctrls(OV2DAYSINDEX).fBoxY + fgStDeltaY, 765, fgBoxStH
        tmOV2Ctrls(OV2STARTTIMEINDEX).iReq = False
        gSetCtrl tmOV2Ctrls(OV2ENDTIMEINDEX), 1410, tmOV2Ctrls(OV2STARTTIMEINDEX).fBoxY, 765, fgBoxStH
        tmOV2Ctrls(OV2ENDTIMEINDEX).iReq = False
        If imLnRowNo > 0 Then
            If Not (tgClfCntr(imLnRowNo - 1).iInPast) Then
                imShowOV2 = OV2ENDTIMEINDEX
            End If
        End If
    Else
        For ilLoop = 0 To 6 Step 1
            gSetCtrl tmOV2Ctrls(OV2DAYSINDEX + ilLoop), 0, 0, 0, 0
            tmOV2Ctrls(OV2DAYSINDEX + ilLoop).iReq = False
        Next ilLoop
        gSetCtrl tmOV2Ctrls(OV2STARTTIMEINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV2STARTTIMEINDEX).iReq = False
        gSetCtrl tmOV2Ctrls(OV2ENDTIMEINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV2ENDTIMEINDEX).iReq = False
    End If
    If mRegionAllowed(imLnRowNo) Then  'Allocation
        gSetCtrl tmOV2Ctrls(OV2SPLITINDEX), 2190, 30 + fgStDeltaY, 1155, fgBoxStH
        tmOV2Ctrls(OV2SPLITINDEX).iReq = False
        imShowOV2 = OV2SPLITINDEX
    Else
        gSetCtrl tmOV2Ctrls(OV2SPLITINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV2SPLITINDEX).iReq = False
    End If
    If (imLnRowNo > 0) And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
        If (Asc(tgSpf.sOverrideOptions) And SPALLOCATION) = SPALLOCATION Then  'Allocation
            gSetCtrl tmOV2Ctrls(OV2ALLOCATIONINDEX), 30, 30 + 2 * fgStDeltaY, 780, fgBoxStH
            tmOV2Ctrls(OV2ALLOCATIONINDEX).iReq = False
            imShowOV2 = OV2ALLOCATIONINDEX
        Else
            gSetCtrl tmOV2Ctrls(OV2ALLOCATIONINDEX), 0, 0, 0, 0
            tmOV2Ctrls(OV2ALLOCATIONINDEX).iReq = False
        End If
    Else
        gSetCtrl tmOV2Ctrls(OV2ALLOCATIONINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV2ALLOCATIONINDEX).iReq = False
    End If
    If (imLnRowNo > 0) And (smLineType <> "O") And (smLineType <> "A") And (smLineType <> "E") Then
        If mUsingAcqCost() Then  'Acquisition
            gSetCtrl tmOV2Ctrls(OV2ACQUISITIONINDEX), 825, 30 + 2 * fgStDeltaY, 1020, fgBoxStH
            tmOV2Ctrls(OV2ACQUISITIONINDEX).iReq = False
            If mAllowedToChgAcqCost(imLnRowNo) Then
                imShowOV2 = OV2ACQUISITIONINDEX
            End If
        Else
            gSetCtrl tmOV2Ctrls(OV2ACQUISITIONINDEX), 0, 0, 0, 0
            tmOV2Ctrls(OV2ACQUISITIONINDEX).iReq = False
        End If
    Else
        gSetCtrl tmOV2Ctrls(OV2ACQUISITIONINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV2ACQUISITIONINDEX).iReq = False
    End If
    If (Asc(tgSpf.sOverrideOptions) And SPSOLOAVAIL) = SPSOLOAVAIL Then  'Solo
        gSetCtrl tmOV2Ctrls(OV2SOLOINDEX), 1860, 30 + 2 * fgStDeltaY, 705, fgBoxStH
        tmOV2Ctrls(OV2SOLOINDEX).iReq = False
        imShowOV2 = OV2SOLOINDEX
    Else
        gSetCtrl tmOV2Ctrls(OV2SOLOINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV2SOLOINDEX).iReq = False
    End If
    If (Asc(tgSpf.sOverrideOptions) And SP1STPOSITION) = SP1STPOSITION Then  '1St
        gSetCtrl tmOV2Ctrls(OV21STINDEX), 2580, 30 + 2 * fgStDeltaY, 765, fgBoxStH
        tmOV2Ctrls(OV21STINDEX).iReq = False
        imShowOV2 = OV21STINDEX
    Else
        gSetCtrl tmOV2Ctrls(OV21STINDEX), 0, 0, 0, 0
        tmOV2Ctrls(OV21STINDEX).iReq = False
    End If
End Sub

Public Function mOV2Defined(ilRowNo As Integer) As String
    Dim ilDay As Integer

    mOV2Defined = ""
    'If (Asc(tgSpf.sOverrideOptions) And &H8) = &H8 Then
        If imLnSave(24, ilRowNo) <> -1 Then
            mDPAllowedDays imLnSave(1, ilRowNo), imAllowedDays()
            For ilDay = 0 To 6 Step 1
                'If (imLnSave(24 + ilDay, ilRowNo) <> imLnSave(12 + ilDay, ilRowNo)) And (imLnSave(24 + ilDay, ilRowNo) <> -1) Then
                If (imLnSave(24 + ilDay, ilRowNo) <> imLnSave(12 + ilDay, ilRowNo)) And (imLnSave(12 + ilDay, ilRowNo) <> 2) And (imLnSave(24 + ilDay, ilRowNo) <> -1) Then
                    mOV2Defined = "*"
                    Exit Function
                End If
            Next ilDay
        End If
        If Trim$(smLnSave(25, ilRowNo)) <> "" Then
            mOV2Defined = "*"
            Exit Function
        End If
    'End If
    'If (Asc(tgSpf.sOverrideOptions) And &H1) = &H1 Then  'Allocation
        If Trim$(smLnSave(27, ilRowNo)) <> "" Then
            'If gStrDecToLong(smLnSave(27, ilRowNo), 2) <> 0 Then
                mOV2Defined = "*"
                Exit Function
            'End If
        End If
    'End If
    'If (Asc(tgSpf.sOverrideOptions) And &H2) = &H2 Then  'Acquisition
        If Trim$(smLnSave(24, ilRowNo)) <> "" Then
            'If gStrDecToLong(smLnSave(24, ilRowNo), 2) <> 0 Then
                mOV2Defined = "*"
                Exit Function
            'End If
        End If
    'End If
    'If (Asc(tgSpf.sOverrideOptions) And &H10) = &H10 Then  'Solo
        If imLnSave(23, ilRowNo) = 0 Then
            mOV2Defined = "*"
        End If
    'End If
    'If (Asc(tgSpf.sOverrideOptions) And &H4) = &H4 Then  '1St
        If imLnSave(22, ilRowNo) = 0 Then
            mOV2Defined = "*"
        End If
    'End If
End Function

Private Sub mOV2MoveCtrlToRec(ilRowNo As Integer, tlClf As CLF)
    Dim ilDay As Integer
    Dim ilDaysMatch As Integer
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String

    For ilDay = 0 To 6 Step 1
        tlClf.sPrefDays(ilDay) = ""
    Next ilDay
    gPackTime "", tlClf.iPrefStartTime(0), tlClf.iPrefStartTime(1)
    gPackTime "", tlClf.iPrefEndTime(0), tlClf.iPrefEndTime(1)
    'If (Asc(tgSpf.sOverrideOptions) And &H8) = &H8 Then
        If (imLnSave(24, ilRowNo) <> -1) And (imLnSave(8, ilRowNo) = 1) Then
            ilDaysMatch = True
            For ilDay = 0 To 6 Step 1
                If imLnSave(12 + ilDay, ilRowNo) <> imLnSave(24 + ilDay, ilRowNo) Then
                    ilDaysMatch = False
                    Exit For
                End If
            Next ilDay
            If Not ilDaysMatch Then
                For ilDay = 0 To 6 Step 1
                    If imLnSave(24 + ilDay, ilRowNo) = 0 Then
                        tlClf.sPrefDays(ilDay) = "Y"
                    Else
                        tlClf.sPrefDays(ilDay) = "N"
                    End If
                Next ilDay
            End If
        End If
        gPackTime smLnSave(25, ilRowNo), tlClf.iPrefStartTime(0), tlClf.iPrefStartTime(1)
        gPackTime smLnSave(26, ilRowNo), tlClf.iPrefEndTime(0), tlClf.iPrefEndTime(1)
    'End If
    tlClf.lRafCode = 0
    gFindMatch smLnSave(28, ilRowNo), 0, lbcRegion
    If gLastFound(lbcRegion) > 1 Then
        slNameCode = tmRegionCode(gLastFound(lbcRegion) - 2).sKey
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        tlClf.lRafCode = Val(slCode)
    End If
    tlClf.sOV2DefinedBits = Chr(&H0)
    tlClf.iPctAllocation = 0
    'If (Asc(tgSpf.sOverrideOptions) And &H1) = &H1 Then  'Allocation
        If Trim$(smLnSave(27, ilRowNo)) <> "" Then
            tlClf.iPctAllocation = gStrDecToInt(smLnSave(27, ilRowNo), 2)
            tlClf.sOV2DefinedBits = Chr(Asc(tlClf.sOV2DefinedBits) Or LNALLOCATION)
        End If
    'End If
    tlClf.lAcquisitionCost = 0
    'If (Asc(tgSpf.sOverrideOptions) And &H2) = &H2 Then  'Acquisition
        If Trim$(smLnSave(24, ilRowNo)) <> "" Then
            tlClf.lAcquisitionCost = gStrDecToLong(smLnSave(24, ilRowNo), 2)
            tlClf.sOV2DefinedBits = Chr(Asc(tlClf.sOV2DefinedBits) Or LNACQUISITION)
        End If
    'End If
    tlClf.sSoloAvail = ""
    'If (Asc(tgSpf.sOverrideOptions) And &H10) = &H10 Then  'Solo
        If imLnSave(23, ilRowNo) = 0 Then
            tlClf.sSoloAvail = "Y"
        ElseIf imLnSave(23, ilRowNo) = 1 Then
            tlClf.sSoloAvail = "N"
        End If
    'End If
    tlClf.iPosition = 0
    'If (Asc(tgSpf.sOverrideOptions) And &H4) = &H4 Then  '1St
        If imLnSave(22, ilRowNo) = 0 Then
            tlClf.iPosition = 1
        End If
        If (imLnSave(22, ilRowNo) = 0) Or (imLnSave(22, ilRowNo) = 1) Then
            tlClf.sOV2DefinedBits = Chr(Asc(tlClf.sOV2DefinedBits) Or LN1STPOSITION)
        End If
    'End If
End Sub

Private Sub mLnVehPaint(lbcVehicle As ListBox, ilPkVeh As Integer)
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilLinesEnd As Integer
    Dim llWidth As Long
    Dim llFgColor As Long
    '5/18/19
    Dim slNameCode As String
    Dim ilVefCode As Integer
    Dim ilVef As Integer
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilVpfIndex As Integer
    Dim slMedium As String
    Dim blOk As Boolean

    pbcLbcVehicle.Move lbcVehicle.Left + 15, lbcVehicle.Top + 15, pbcLbcVehicle.Width - 30, lbcVehicle.height - 30 '2115, 1560
    ilLinesEnd = lbcVehicle.TopIndex + lbcVehicle.height \ fgListHtArial825
    If ilLinesEnd > lbcVehicle.ListCount Then
        ilLinesEnd = lbcVehicle.ListCount
    End If
    If lbcVehicle.ListCount <= lbcVehicle.height \ fgListHtArial825 Then
        llWidth = lbcVehicle.Width - 30
    Else
        llWidth = lbcVehicle.Width - igScrollBarWidth - 30
    End If
    pbcLbcVehicle.Width = llWidth
    pbcLbcVehicle.Cls
    llFgColor = pbcLbcVehicle.ForeColor
    For ilLoop = lbcVehicle.TopIndex To ilLinesEnd - 1 Step 1
        blOk = True
        If grdCPMBuy.Visible Then
            If ilPkVeh Then
                If ilLoop > UBound(tgCPMPkVeh) - 1 Then
                    blOk = False
                Else
                    If Trim$(tgCPMPkVeh(ilLoop).sKey) = "" Then
                        blOk = False
                    End If
                End If
            Else
                If ilLoop > UBound(tmVehicleCode2) - 1 Then
                    blOk = False
                Else
                    If Trim$(tmVehicleCode2(ilLoop).sKey) = "" Then
                        blOk = False
                    End If
                End If
            End If
        Else
            If ilPkVeh Then
                If ilLoop > UBound(tgPackVeh) - 1 Then
                    blOk = False
                Else
                    If Trim$(tgPackVeh(ilLoop).sKey) = "" Then
                        blOk = False
                    End If
                End If
            Else
                If ilLoop > UBound(tmVehicleCode) - 1 Then
                    blOk = False
                Else
                    If Trim$(tmVehicleCode(ilLoop).sKey) = "" Then
                        blOk = False
                    End If
                End If
            End If
        End If
        If blOk Then
            pbcLbcVehicle.ForeColor = llFgColor
            If lbcVehicle.Selected(ilLoop) Then
                gPaintArea pbcLbcVehicle, CSng(0), CSng((ilLoop - lbcVehicle.TopIndex) * fgListHtArial825), CSng(pbcLbcVehicle.Width), CSng(fgListHtArial825) - 15, vbHighlight 'WHITE
                pbcLbcVehicle.ForeColor = vbWhite
            Else
                If grdCPMBuy.Visible Then
                    If ilPkVeh Then
                        slStr = tgCPMPkVeh(ilLoop).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    Else
                        slStr = tmVehicleCode2(ilLoop).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    End If
                Else
                    If Not ilPkVeh Then
                        slStr = tmVehicleCode(ilLoop).sKey
                    Else
                        slStr = tgPackVeh(ilLoop).sSortChar
                    End If
                End If
                If Left$(slStr, 1) = "A" Then
                    pbcLbcVehicle.ForeColor = vbBlue
                Else
                    pbcLbcVehicle.ForeColor = vbBlack
                End If
            End If
            '5/28/19: Show dormant vehicles in red
            'slNameCode = tmVehicleCode(ilLoop).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
            'ilRet = gParseItem(slNameCode, 2, "\", slCode)
            'ilVefCode = CInt(slCode)
            If grdCPMBuy.Visible Then
                If ilPkVeh Then
                    slNameCode = tgCPMPkVeh(ilLoop).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVefCode = CInt(slCode)
                Else
                    slNameCode = tmVehicleCode2(ilLoop).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVefCode = CInt(slCode)
                End If
            Else
                If Not ilPkVeh Then
                    slNameCode = tmVehicleCode(ilLoop).sKey
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVefCode = CInt(slCode)
                Else
                    ilVefCode = tgPackVeh(ilLoop).iCode
                End If
            End If
            ilVef = gBinarySearchDormantVef(ilVefCode)
            If ilVef <> -1 Then
                pbcLbcVehicle.ForeColor = vbRed
            End If
            
            pbcLbcVehicle.CurrentX = 15
            pbcLbcVehicle.CurrentY = (ilLoop - lbcVehicle.TopIndex) * fgListHtArial825 + 15
            slStr = lbcVehicle.List(ilLoop)
            gAdjShowLen pbcLbcVehicle, slStr, pbcLbcVehicle.Width
            slMedium = ""
            ilVpfIndex = gBinarySearchVpf(ilVefCode)
            If ilVpfIndex <> -1 Then
                slMedium = tgVpf(ilVpfIndex).sGMedium
            End If
            'If (slMedium = "P") Or (slMedium = "M") Or (grdCPMBuy.Visible) Then
            If (slMedium = "P") Or (grdCPMBuy.Visible) Then
                pbcLbcVehicle.FontItalic = True
            Else
                pbcLbcVehicle.FontItalic = False
            End If
            pbcLbcVehicle.Print slStr
            pbcLbcVehicle.ForeColor = llFgColor
        End If
    Next ilLoop
    pbcLbcVehicle.FontItalic = False
End Sub

Public Function mEnableGame() As Integer
    Dim ilNoWkDays(0 To 6) As Integer

    mEnableGame = False
    igGameReturn = False
    igGameInvReturn = False
    If mIsLnGame(imLnRowNo) Then
        igUpdateAllowed = imUpdateAllowed
        If igRepNetChgAllowed Then
            igUpdateAllowed = False
        End If
        CGameSch.Show vbModal
        If (igGameReturn) Or (igGameInvReturn) Then
            'mInitLnTotals imLnRowNo, imLnTotalType, PRICEINDEX
            mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
            mSetLnTotals imLnRowNo
            mCntrTotal
            imLnChg = True
            pbcLine.Cls
            pbcLine_Paint
        End If
        edcLNDropDown.Text = "P"
        pbcLnTab.SetFocus
        mEnableGame = True
        Exit Function
    End If
End Function

Public Function mUsingAcqCost() As Integer
    mUsingAcqCost = False
    If (Asc(tgSpf.sUsingFeatures2) And BARTER) = BARTER Then
        mUsingAcqCost = True
        Exit Function
    End If
End Function

Public Sub mSetDefAcqCost(ilLen As Integer)
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilVef As Integer
    Dim ilRet As Integer
    Dim slVefType As String
    Dim llRif As Long
    Dim slDollarAdj As String
    Dim slIndexAdj As String
    Dim blAdjMade As Boolean

    slVefType = ""
    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
    If imTerminate Then
        Exit Sub
    End If
    If imVpfIndex >= 0 Then
        ilVef = gBinarySearchVef(imCntrVefCode)
        If ilVef <> -1 Then
            '5/4/20: The handling of the Acq adjustment by spot length is not consistent
            '        It is added only with vehicle type C or S but in the contract when clicking in the acq override field, it is testing for Vehicle type R
            '        see mSetDefAcqCost and mAcqCostPop
            '        Acq Cost adjustment record type is method I, whereas the commission record method is N
            '        The code to get the adj record is in error. Date should be set to 1/1/1970 and use a getEqual
            slVefType = tgMVef(ilVef).sType
            If (slVefType <> "R") And (slVefType <> "C") And (slVefType <> "S") Then
                Exit Sub
            End If
        Else
            Exit Sub
        End If
    End If
    If Trim$(smLnSave(24, imLnRowNo)) <> "" Then
        Exit Sub
    End If
    If (ilLen <= 0) Then
        Exit Sub
    End If
    If imVpfIndex >= 0 Then
        If slVefType = "R" Then
            '5/4/20: The handling of the Acq adjustment by spot length is not consistent
            '        It is added only with vehicle type C or S but in the contract when clicking in the acq override field, it is testing for Vehicle type R
            '        see mSetDefAcqCost and mAcqCostPop
            '        Acq Cost adjustment record type is method I, whereas the commission record method is N
            '        The code to get the adj record is in error. Date should be set to 1/1/1970 and use a getEqual
            tmVbfSrchKey1.iVefCode = imCntrVefCode
            gPackDateLong lmNowDate, tmVbfSrchKey1.iStartDate(0), tmVbfSrchKey1.iStartDate(1)
            ilRet = btrGetLessOrEqual(hmVbf, tmVbf, imVBfRecLen, tmVbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            If (ilRet = BTRV_ERR_NONE) And (tmVbf.iVefCode = imCntrVefCode) And (tmVbf.sMethod <> "N") Then
                For ilLoop = LBound(tmVbf.iSpotLen) To UBound(tmVbf.iSpotLen) Step 1
                    If tmVbf.iSpotLen(ilLoop) <> ilLen Then
                        smLnSave(24, imLnRowNo) = gLongToStrDec(tmVbf.lDefAcqCost(ilLoop), 2)
                        Exit Sub
                    End If
                Next ilLoop
            End If
        ElseIf (slVefType = "C") Or (slVefType = "S") Then
            For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                If (tgMRif(llRif).iRcfCode = tmRcf.iCode) And (tgMRif(llRif).iVefCode = imCntrVefCode) And (tgMRif(llRif).iRdfCode = imLnSave(1, imLnRowNo)) Then
                    smLnSave(24, imLnRowNo) = gLongToStrDec(tgMRif(llRif).lAcquisitionCost, 2)
                    '5/4/20: The handling of the Acq adjustment by spot length is not consistent
                    '        It is added only with vehicle type C or S but in the contract when clicking in the acq override field, it is testing for Vehicle type R
                    '        see mSetDefAcqCost and mAcqCostPop
                    '        Acq Cost adjustment record type is method I, whereas the commission record method is N
                    '        The code to get the adj record is in error. Date should be set to 1/1/1970 and use a getEqual
                    'The Retrieval of the record here is correct.  In mAcqCostPop is in error
                    blAdjMade = False
                    tmVbfSrchKey1.iVefCode = imCntrVefCode
                    gPackDate "1/1/1970", tmVbfSrchKey1.iStartDate(0), tmVbfSrchKey1.iStartDate(1)
                    ilRet = btrGetEqual(hmVbf, tmVbf, imVBfRecLen, tmVbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                    If (ilRet = BTRV_ERR_NONE) Then
                        For ilLoop = LBound(tmVbf.iSpotLen) To UBound(tmVbf.iSpotLen) Step 1
                            If tmVbf.iSpotLen(ilLoop) = ilLen Then
                                If tmVbf.lDefAcqCost(ilLoop) > 0 Then
                                    slIndexAdj = gLongToStrDec(tmVbf.lDefAcqCost(ilLoop), 2)
                                    smLnSave(24, imLnRowNo) = gMulStr(smLnSave(24, imLnRowNo), slIndexAdj)
                                    blAdjMade = True
                                    Exit For
                                End If
                            End If
                        Next ilLoop
                    End If
                    If blAdjMade Then
                        Exit For
                    End If
                    ilIndex = -1
                    If ilLen > 0 Then
                        For ilLoop = LBound(tmRcf.iLen) To UBound(tmRcf.iLen) Step 1
                            If tmRcf.iLen(ilLoop) = ilLen Then
                                ilIndex = ilLoop
                                Exit For
                            End If
                        Next ilLoop
                    End If
                    If ilIndex <> -1 Then
                        Select Case tmRcf.sUseLen
                            Case "D"    'Delta
                                slDollarAdj = gLongToStrDec(tmRcf.lValue(ilIndex), 2)
                                smLnSave(24, imLnRowNo) = gAddStr(smLnSave(24, imLnRowNo), slDollarAdj)
                            Case "I"    'Index
                                slIndexAdj = gLongToStrDec(tmRcf.lValue(ilIndex), 2)
                                smLnSave(24, imLnRowNo) = gMulStr(smLnSave(24, imLnRowNo), slIndexAdj)
                        End Select
                    End If
                    
                    Exit For
                End If
            Next llRif
        End If
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPopulate                       *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate advertiser regions    *
'*                      list box if required           *
'*                                                     *
'*******************************************************
Public Sub mPopRegion()
'
'   mPopulate
'   Where:
'
    Dim ilRet As Integer
    Dim ilIncludeDormant As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilAdfCode As Integer

    If lbcAdvt.ListIndex >= 1 Then
        slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        slCode = Trim$(slCode)
        ilAdfCode = Val(slCode)
        ilIncludeDormant = False
        'ilRet = gPopRegionBox(Contract, ilAdfCode, "N", ilIncludeDormant, lbcRegion, tmRegionCode(), smRegionCodeTag)
        ilRet = gPopRegionBox(Contract, -1, "N", ilIncludeDormant, lbcRegion, tmRegionCode(), smRegionCodeTag)
        If ilRet <> CP_MSG_NOPOPREQ Then
            On Error GoTo mPopulateErr
            gCPErrorMsg ilRet, "mPopRegion (gPopRegionBox)", Contract
            On Error GoTo 0
            lbcRegion.AddItem "[None]", 0
            lbcRegion.AddItem "[New]", 0  'Force as first item on list
        End If
    End If
    Exit Sub
mPopulateErr:
    On Error GoTo 0
    imTerminate = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSplitBranch                    *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      advertiser Short title and     *
'*                      process communication back from*
'*                      advertiser short title         *
'*******************************************************
Public Function mSplitBranch() As Integer

'
'   ilRet = mSplitBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilUpdateAllowed As Integer
    Dim slRegionName As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilTest As Integer
    Dim ilVefCode As Integer
    Dim slLineType As String
    Dim slDate As String
    Dim ilVef As Integer
    Dim ilAVef As Integer
    Dim tlVef As VEF
    ReDim ilAVefCode(0 To 0) As Integer
    If (igRepNetChgAllowed) Then
        imDoubleClickName = False
        mSplitBranch = False
        Exit Function
    End If
    If ((Not imDoubleClickName) And (edcDGDropDown.Text <> "[New]")) Or (lbcAdvt.ListIndex <= 0) Then
        imDoubleClickName = False
        mSplitBranch = False
        Exit Function
    End If
    If edcShareDropDown.Text = "[New]" Then
        sgSplitNetworkName = ""
    Else
        sgSplitNetworkName = edcDGDropDown.Text
    End If
    slNameCode = tmCntAdvertiser(lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    slCode = Trim$(slCode)
    igAdfCode = Val(slCode)
    ilUpdateAllowed = imUpdateAllowed
    igSplitType = 1
    igSplitChgd = False
    ReDim igSplitLnVefCode(0 To 0) As Integer
    'Include last row as it might be partically filled
    For ilLoop = 0 To UBound(tgClfCntr) Step 1
        If Trim$(smLnSave(1, ilLoop + 1)) <> "" Then
            slLineType = mGetLineType(ilLoop + 1)
            mVehPop False
            If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
                gFindMatch smLnSave(1, ilLoop + 1), 0, lbcLnVehicle(igTabMapIndex)
                If gLastFound(lbcLnVehicle(igTabMapIndex)) >= 0 Then
                    slNameCode = tmVehicleCode(gLastFound(lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVefCode = CInt(slCode)
                    ilVef = gBinarySearchVef(ilVefCode)
                    If ilVef <> -1 Then
                        If tgMVef(ilVef).sType = "S" Then
                            tlVef = tgMVef(ilVef)
                            slDate = Format$(gNow(), "m/d/yy")
                            gBuildLinkArray hmVLF, tlVef, slDate, ilAVefCode()
                        Else
                            ReDim ilAVefCode(0 To 1) As Integer
                            ilAVefCode(0) = ilVefCode
                        End If
                        For ilAVef = 0 To UBound(ilAVefCode) - 1 Step 1
                            ilFound = False
                            For ilTest = 0 To UBound(igSplitLnVefCode) - 1 Step 1
                                If igSplitLnVefCode(ilTest) = ilAVefCode(ilAVef) Then
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilTest
                            If Not ilFound Then
                                igSplitLnVefCode(UBound(igSplitLnVefCode)) = ilAVefCode(ilAVef)
                                ReDim Preserve igSplitLnVefCode(0 To UBound(igSplitLnVefCode) + 1) As Integer
                            End If
                        Next ilAVef
                    End If
                End If
            End If
        End If
    Next ilLoop
    NetworkSplit.Show vbModal
    If igSplitChgd Then
        imLnChg = True
    End If
    slRegionName = sgDoneMsg
    imDoubleClickName = False
    mSplitBranch = True
    imUpdateAllowed = ilUpdateAllowed
    gShowBranner imUpdateAllowed
    lbcRegion.Clear
    smRegionCodeTag = ""
    mPopRegion
    If imTerminate Then
        mSplitBranch = False
        Exit Function
    End If
    lbcRegion.height = gListBoxHeight(lbcRegion.ListCount, 5)
    If lbcRegion.Top + lbcRegion.height >= cmcUpdate.Top + cmcUpdate.height Then
        lbcRegion.Move lbcRegion.Left, edcDGDropDown.Top - lbcRegion.height
    End If
    gFindMatch slRegionName, 0, lbcRegion
    If gLastFound(lbcShtTitle) >= 0 Then
        imChgMode = True
        lbcRegion.ListIndex = gLastFound(lbcRegion)
        edcDGDropDown.Text = lbcRegion.List(lbcRegion.ListIndex)
        imChgMode = False
        mSplitBranch = False
    Else
        If sgSplitNetworkName = "" Then
            imChgMode = True
            lbcRegion.ListIndex = -1
            edcDGDropDown.Text = ""
            imChgMode = False
        End If
        edcDGDropDown.SetFocus
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

Public Sub mSetOv2Flag(ilLnRowNo As Integer)
    Dim slLineType As String
    Dim ilPkLineNo As Integer
    Dim ilClf As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer

    If ilLnRowNo <= 0 Then
        Exit Sub
    End If
    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType = "A") Or (slLineType = "O") Or (slLineType = "E") Then
        ilPkLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilLoop).iLineNo = ilPkLineNo) Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                             smLnShow(OV2INDEX, ilClf + 1) = mOV2Defined(ilClf + 1)
                             Exit For
                        End If
                    Next ilClf
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
                Exit For
            End If
        Next ilLoop
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mLenPop                         *
'*                                                     *
'*             Created:7/21/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection length  *
'*                      box                            *
'*                                                     *
'*******************************************************
Private Sub mAcqCostPop()
    'Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilVef As Integer
    Dim ilRet As Integer

    If smLnSave(1, imLnRowNo) = "" Then
        Exit Sub
    End If
    mCVehOptIndex imLnRowNo, imCntrVefCode, imVpfIndex, imTerminate
    If imTerminate Then
        Exit Sub
    End If
    ilFound = False
    lbcAcqCost.Clear
    If imVpfIndex >= 0 Then
        ilVef = gBinarySearchVef(imCntrVefCode)
        If ilVef <> -1 Then
            '5/4/20: The handling of the Acq adjustment by spot length is not consistent
            '        It is added only with vehicle type C or S but in the contract when clicking in the acq override field, it is testing for Vehicle type R
            '        see mSetDefAcqCost and mAcqCostPop
            '        Acq Cost adjustment record type is method I, whereas the commission record method is N
            If tgMVef(ilVef).sType <> "R" Then
                Exit Sub
            End If
        Else
            Exit Sub
        End If
    End If
    If imVpfIndex >= 0 Then
        '5/4/20: The handling of the Acq adjustment by spot length is not consistent
        '        It is added only with vehicle type C or S but in the contract when clicking in the acq override field, it is testing for Vehicle type R
        '        see mSetDefAcqCost and mAcqCostPop
        '        Acq Cost adjustment record type is method I, whereas the commission record method is N
        '        The code to get the adj record is in error. Date should be set to 1/1/1970 and use a getEqual
        tmVbfSrchKey1.iVefCode = imCntrVefCode
        gPackDateLong lmNowDate, tmVbfSrchKey1.iStartDate(0), tmVbfSrchKey1.iStartDate(1)
        ilRet = btrGetLessOrEqual(hmVbf, tmVbf, imVBfRecLen, tmVbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        If (ilRet = BTRV_ERR_NONE) And (tmVbf.iVefCode = imCntrVefCode) And (tmVbf.sMethod <> "N") Then
            For ilLoop = LBound(tmVbf.iSpotLen) To UBound(tmVbf.iSpotLen) Step 1
                If tmVbf.iSpotLen(ilLoop) <> 0 Then
                    lbcAcqCost.AddItem Trim$(str$(tmVbf.iSpotLen(ilLoop))) & "s: " & gLongToStrDec(tmVbf.lDefAcqCost(ilLoop), 2)
                    lbcAcqCost.ItemData(lbcAcqCost.NewIndex) = gLongToStrDec(tmVbf.lDefAcqCost(ilLoop), 2)
                End If
            Next ilLoop
        End If
    End If
End Sub

Public Function mChgPriceQuestion(ilLnRowNo As Integer, slPrice As String) As Integer
    Dim llEndPrevPeriod As Long
    Dim ilFutureOnly As Integer
    Dim llDate As Long

    gUnpackDateLong tgSpf.iRPRP(0), tgSpf.iRPRP(1), llEndPrevPeriod
    gUnpackDateLong tgClfCntr(ilLnRowNo - 1).ClfRec.iStartDate(0), tgClfCntr(ilLnRowNo - 1).ClfRec.iStartDate(1), llDate

    ilFutureOnly = True
    If (llEndPrevPeriod >= llDate) And (llEndPrevPeriod > 0) And (llDate > 0) Then
        ilFutureOnly = False
    End If

    tgClfCntr(ilLnRowNo - 1).iChgBilledPrice = False
    sgGenMsg = "Price in each week will be changed to " & slPrice & sgCR & sgLF & sgCR & sgLF & "Note: The average price will be determined from the billed and unbilled weeks"
    igEditBox = 0
    igDefCMC = 0
    If (tgUrf(0).sChgLnBillPrice = "I") And ((Asc(tgSpf.sUsingFeatures4) And CHGBILLEDPRICE) = CHGBILLEDPRICE) And (tgUrf(0).sChgPrices <> "V") Then
        sgCMCTitle(0) = "Change Unbilled Weeks"
        If ilFutureOnly Then
            sgCMCTitle(1) = "Change All Weeks"
        Else
            sgCMCTitle(1) = "Change Allowed Weeks"
        End If
        sgCMCTitle(2) = "Cancel"
        sgCMCTitle(3) = ""
        GenMsg.Show vbModal
        If igAnsCMC = 0 Then
            mChgPriceQuestion = vbYes
        ElseIf igAnsCMC = 1 Then
            tgClfCntr(ilLnRowNo - 1).iChgBilledPrice = True
            mChgPriceQuestion = vbYes
        Else
            mChgPriceQuestion = vbNo
        End If
    Else
        sgCMCTitle(0) = "Change Unbilled Weeks"
        sgCMCTitle(1) = "Cancel"
        sgCMCTitle(2) = ""
        sgCMCTitle(3) = ""
        GenMsg.Show vbModal
        If igAnsCMC = 0 Then
            mChgPriceQuestion = vbYes
        Else
            mChgPriceQuestion = vbNo
        End If
    End If
End Function

Public Sub mPaintLnDates()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilFillStyle As Integer
    Dim llFillColor As Long


    llColor = pbcLnDates.ForeColor
    slFontName = pbcLnDates.FontName
    flFontSize = pbcLnDates.FontSize
    ilFillStyle = pbcLnDates.FillStyle
    llFillColor = pbcLnDates.FillColor
    pbcLnDates.ForeColor = BLUE
    pbcLnDates.FontBold = False
    pbcLnDates.FontSize = 7
    pbcLnDates.FontName = "Arial"
    pbcLnDates.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    'pbcLnDates.Line (tmLnDCtrls(1).fBoxX - 15, tmLnDCtrls(1).fBoxY - 15)-Step(tmLnDCtrls(1).fBoxW + 15, tmLnCtrls(1).fBoxH + 15), BLUE, B
    pbcLnDates.FillStyle = 0 'Solid
    pbcLnDates.FillColor = LIGHTYELLOW
    pbcLnDates.Line (tmLnDCtrls(1).fBoxX - 15, 15)-Step(tmLnDCtrls(1).fBoxW + 15, pbcLnDates.height), BLUE, B
    pbcLnDates.CurrentX = tmLnDCtrls(1).fBoxX + 15  'fgBoxInsetX
    pbcLnDates.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLnDates.Print "All Dates & Weeks"
    pbcLnDates.Line (tmLnDCtrls(2).fBoxX - 15, 15)-Step(tmLnDCtrls(2).fBoxW + 15, pbcLnDates.height), BLUE, B
    pbcLnDates.CurrentX = tmLnDCtrls(2).fBoxX + 15  'fgBoxInsetX
    pbcLnDates.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcLnDates.Print "Line Dates & Weeks"
    pbcLnDates.FillStyle = ilFillStyle
    pbcLnDates.FillColor = llFillColor
    pbcLnDates.FontSize = flFontSize
    pbcLnDates.FontName = slFontName
    pbcLnDates.FontSize = flFontSize
    pbcLnDates.ForeColor = llColor
    pbcLnDates.FontBold = True
End Sub

Public Sub mPaintLnTotal()
    Dim ilLoop As Integer
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilFillStyle As Integer
    Dim llFillColor As Long
    Dim ilRow As Integer

    llColor = pbcLnTotal.ForeColor
    slFontName = pbcLnTotal.FontName
    flFontSize = pbcLnTotal.FontSize
    ilFillStyle = pbcLnTotal.FillStyle
    llFillColor = pbcLnTotal.FillColor

    pbcLnTotal.ForeColor = BLUE
    pbcLnTotal.FontBold = False
    pbcLnTotal.FontSize = 7
    pbcLnTotal.FontName = "Arial"
    pbcLnTotal.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    For ilLoop = imLBCTCtrls To UBound(tmLnTCtrls) Step 1
        pbcLnTotal.FillStyle = 0 'Solid
        pbcLnTotal.FillColor = LIGHTYELLOW
        'pbcLnTotal.Line (tmLnTCtrls(ilLoop).fBoxX - 15, 15)-Step(tmLnTCtrls(ilLoop).fBoxW + 15, tmLnTCtrls(ilLoop).fBoxH + 15), BLUE, B
        pbcLnTotal.Line (tmLnTCtrls(ilLoop).fBoxX - 15, 15)-Step(tmLnTCtrls(ilLoop).fBoxW + 15, tmLnTCtrls(ilLoop).fBoxH), BLUE, B
        pbcLnTotal.FillStyle = ilFillStyle
        pbcLnTotal.FillColor = llFillColor
    Next ilLoop
    'If (tscLine.SelectedItem.Index = 8) Or (tscLine.SelectedItem.Index = 9) Or (tscLine.SelectedItem.Index = 10) Then
    If (tscLine.SelectedItem.Index = imTabMap(TABAVAIL)) Or (tscLine.SelectedItem.Index = imTabMap(TABPROTECTION)) Or (tscLine.SelectedItem.Index = imTabMap(TABRESEARCH)) Then
        For ilRow = 1 To 3 Step 1
            For ilLoop = imLBCTCtrls To UBound(tmLnTCtrls) - 2 Step 1
                pbcLnTotal.FillStyle = 0 'Solid
                pbcLnTotal.FillColor = LIGHTYELLOW
                pbcLnTotal.Line (tmLnTCtrls(ilLoop).fBoxX - 15, ilRow * fgBoxGridH + 15)-Step(tmLnTCtrls(ilLoop).fBoxW + 15, tmLnTCtrls(ilLoop).fBoxH + 15), BLUE, B
                pbcLnTotal.FillStyle = ilFillStyle
                pbcLnTotal.FillColor = llFillColor
            Next ilLoop
        Next ilRow
    End If
    pbcLnTotal.FontSize = flFontSize
    pbcLnTotal.FontName = slFontName
    pbcLnTotal.FontSize = flFontSize
    pbcLnTotal.ForeColor = llColor
    pbcLnTotal.FontBold = True
End Sub

Public Sub mPaintStep()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilFillStyle As Integer
    Dim llFillColor As Long


    llColor = pbcSelect.ForeColor
    slFontName = pbcSelect.FontName
    flFontSize = pbcSelect.FontSize
    ilFillStyle = pbcSelect.FillStyle
    llFillColor = pbcSelect.FillColor
    pbcSelect.ForeColor = BLUE
    pbcSelect.FontBold = False
    pbcSelect.FontSize = 7
    pbcSelect.FontName = "Arial"
    pbcSelect.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    'pbcSelect.Line (tmStepCtrls(1).fBoxX - 15, tmStepCtrls(1).fBoxY - 15)-Step(tmStepCtrls(1).fBoxW + 15, tmLnCtrls(1).fBoxH + 15), BLUE, B
    pbcSelect.Line (tmStepCtrls(1).fBoxX - 15, tmStepCtrls(1).fBoxY - 15)-Step(tmStepCtrls(1).fBoxW + 15, tmStepCtrls(1).fBoxH + 15), BLUE, B
    pbcSelect.CurrentX = tmStepCtrls(1).fBoxX + 15  'fgBoxInsetX
    pbcSelect.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcSelect.Print "Step 1: Select Task"
    pbcSelect.Line (tmStepCtrls(2).fBoxX - 15, tmStepCtrls(2).fBoxY - 15)-Step(tmStepCtrls(2).fBoxW + 15, tmStepCtrls(2).fBoxH + 15), BLUE, B
    pbcSelect.CurrentX = tmStepCtrls(2).fBoxX + 15  'fgBoxInsetX
    pbcSelect.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcSelect.Print "Step 2: Select Advertiser"
    pbcSelect.Line (tmStepCtrls(3).fBoxX - 15, tmStepCtrls(3).fBoxY - 15)-Step(tmStepCtrls(3).fBoxW + 15, tmStepCtrls(3).fBoxH + 15), BLUE, B
    pbcSelect.CurrentX = tmStepCtrls(3).fBoxX + 15  'fgBoxInsetX
    pbcSelect.CurrentY = 15 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    pbcSelect.Print "Step 3: Select Number"
    pbcSelect.FillStyle = ilFillStyle
    pbcSelect.FillColor = llFillColor
    pbcSelect.FontSize = flFontSize
    pbcSelect.FontName = slFontName
    pbcSelect.FontSize = flFontSize
    pbcSelect.ForeColor = llColor
    pbcSelect.FontBold = True

End Sub

Private Sub mPaintPowerBar(ilIndex As Integer)
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer
    Dim llTop As Long
    Dim ilFillStyle As Integer
    Dim llFillColor As Long
    Dim ilLineCount As Integer

    llColor = pbcRBVeh(ilIndex).ForeColor
    slFontName = pbcRBVeh(ilIndex).FontName
    flFontSize = pbcRBVeh(ilIndex).FontSize
    ilFillStyle = pbcRBVeh(ilIndex).FillStyle
    llFillColor = pbcRBVeh(ilIndex).FillColor
    pbcRBVeh(ilIndex).ForeColor = BLUE
    pbcRBVeh(ilIndex).FontBold = False
    pbcRBVeh(ilIndex).FontSize = 7
    pbcRBVeh(ilIndex).FontName = "Arial"
    pbcRBVeh(ilIndex).FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    ilLineCount = 0
    llTop = tmRBCtrls(1).fBoxY
    Do
        'For ilLoop = LBound(tmRBCtrls) To UBound(tmRBCtrls) Step 1
        For ilLoop = imLBCTCtrls To UBound(tmRBCtrls) Step 1
            If ilLineCount = 0 Then
                pbcRBVeh(ilIndex).FillStyle = 0 'Solid
                pbcRBVeh(ilIndex).FillColor = LIGHTBLUE
                pbcRBVeh(ilIndex).Line (tmRBCtrls(ilLoop).fBoxX - 15, 15)-Step(tmRBCtrls(ilLoop).fBoxW + 15, tmRBCtrls(ilLoop).fBoxH + 15), BLUE, B
                pbcRBVeh(ilIndex).FillStyle = ilFillStyle
                pbcRBVeh(ilIndex).FillColor = llFillColor
            End If
            If (llTop + tmRBCtrls(1).fBoxH + 15 + tmRBCtrls(1).fBoxH < pbcRBVeh(ilIndex).height) Or (ilIndex = 1) Then
                If (ilLoop = 2) Or (ilLoop = 6) Or (ilLoop = 7) Then
                    pbcRBVeh(ilIndex).FillStyle = 0 'Solid
                    pbcRBVeh(ilIndex).FillColor = LIGHTYELLOW
                End If
                pbcRBVeh(ilIndex).Line (tmRBCtrls(ilLoop).fBoxX - 15, llTop - 15)-Step(tmRBCtrls(ilLoop).fBoxW + 15, tmRBCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = 2) Or (ilLoop = 6) Or (ilLoop = 7) Then
                    pbcRBVeh(ilIndex).FillStyle = ilFillStyle
                    pbcRBVeh(ilIndex).FillColor = llFillColor
                End If
            Else
                If ilLoop >= 4 Then
                    pbcRBVeh(ilIndex).FillStyle = 0 'Solid
                    pbcRBVeh(ilIndex).FillColor = LIGHTYELLOW
                    pbcRBVeh(ilIndex).Line (tmRBCtrls(ilLoop).fBoxX - 15, llTop - 15)-Step(tmRBCtrls(ilLoop).fBoxW + 15, tmRBCtrls(ilLoop).fBoxH + 15), BLUE, B
                    pbcRBVeh(ilIndex).FillStyle = ilFillStyle
                    pbcRBVeh(ilIndex).FillColor = llFillColor
                End If
            End If
            If ilLineCount = 0 Then
                pbcRBVeh(ilIndex).CurrentX = tmRBCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcRBVeh(ilIndex).CurrentY = 15
                Select Case ilLoop
                    Case 1
                        pbcRBVeh(ilIndex).FontName = "Monotype Sorts"
                        pbcRBVeh(ilIndex).FontBold = False
                        pbcRBVeh(ilIndex).CurrentX = tmRBCtrls(1).fBoxX + fgBoxInsetX - 30
                        pbcRBVeh(ilIndex).CurrentY = 45
                        pbcRBVeh(ilIndex).Print " 4"
                        pbcRBVeh(ilIndex).FontName = slFontName
                        pbcRBVeh(ilIndex).FontBold = True
                    Case 2
                        pbcRBVeh(ilIndex).Print "Vehicle"
                    Case 3
                        pbcRBVeh(ilIndex).Print "Daypart"
                    Case 4
                        pbcRBVeh(ilIndex).Print "Spots"
                    Case 5
                        pbcRBVeh(ilIndex).Print "Price"
                End Select
                If (sgCntrScreen <> "Orders") And ((Asc(tgSpf.sOptionFields) And OFRESEARCH) = OFRESEARCH) Then
                    Select Case ilLoop
                        Case 6
                            pbcRBVeh(ilIndex).Print "Rating"
                        Case 7
                            pbcRBVeh(ilIndex).Print "Audience"
                        Case 8
                            pbcRBVeh(ilIndex).Print "CPP"
                        Case 9
                            pbcRBVeh(ilIndex).Print "CPM"
                    End Select
                End If
            End If
        Next ilLoop
        ilLineCount = ilLineCount + 1
        llTop = llTop + tmRBCtrls(1).fBoxH + 15
    Loop While llTop + tmRBCtrls(1).fBoxH < pbcRBVeh(ilIndex).height
    If ilIndex = 0 Then
        vbcRBVeh(ilIndex).LargeChange = ilLineCount - 2
    Else
        vbcRBVeh(ilIndex).LargeChange = ilLineCount - 1
    End If
    pbcRBVeh(ilIndex).FontSize = flFontSize
    pbcRBVeh(ilIndex).FontName = slFontName
    pbcRBVeh(ilIndex).FontSize = flFontSize
    pbcRBVeh(ilIndex).ForeColor = llColor
    pbcRBVeh(ilIndex).FontBold = True
End Sub

Private Sub mCBill_Call()
    mMoveCtrlToRec True
    If Not mMoveLnCtrlToRec(False) Then
        mActiveLnTab
        DoEvents
        If imHdBoxNo > 0 Then
            If plcDemoBar.Visible Then  'Hide demo bar
                cmcDemoBar_Click
            End If
            mEnableBox imHdBoxNo
        Else
            mLnEnableBox imLnBoxNo
        End If
        Exit Sub
    End If
    'Screen.MousePointer = vbHourGlass  'Wait
    igUpdateAllowed = imUpdateAllowed
    If igRepNetChgAllowed Then
        igUpdateAllowed = False
    End If
    igPkgChgd = NO
    igDirAdvt = False
    If tmAdf.sBillAgyDir = "D" Then
        igDirAdvt = True
    End If
    'udcCBill.Visible = True
    'JW - 10/13/2022 fix per Jason Email: v81 TTP 10438 Thu 10/13/22 8:38 AM
    mVehPop False
    udcCBill.Action 2
    udcCBill.Visible = True
    Screen.MousePointer = vbDefault
End Sub

Private Sub mEnableCBill()
    Dim slStr As String
    Dim ilEnabled As Integer
    Dim ilAirTimeNTRConflict As Integer
    Dim ilRepDef As Integer

    'If tscLine.SelectedItem.Index = 3 Then
    If tscLine.SelectedItem.Index = imTabMap(TABNTR) Then
        If tgSpf.sUsingNTR = "Y" Then
            udcCBill.Enabled = True
        Else
            udcCBill.Enabled = False
        End If
    'ElseIf tscLine.SelectedItem.Index = 5 Then
    ElseIf tscLine.SelectedItem.Index = imTabMap(TABMERCH) Then
        'udcCBill.Enabled = False
        ilEnabled = False
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                If (tgSpf.sRUseMerch = "Y") And (Trim$(smComment(0)) <> "") Then  'Merchandising
                    'udcCBill.Enabled = True
                    ilEnabled = True
                End If
            End If
        End If
        udcCBill.Enabled = ilEnabled
    'ElseIf tscLine.SelectedItem.Index = 6 Then
    ElseIf tscLine.SelectedItem.Index = imTabMap(TABPROMO) Then
        'udcCBill.Enabled = False
        ilEnabled = False
        If lbcStatus.ListIndex >= 0 Then
            slStr = lbcStatus.List(lbcStatus.ListIndex)
            If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                If (tgSpf.sRUsePromo = "Y") And (Trim$(smComment(1)) <> "") Then  'Promotion
                    'udcCBill.Enabled = True
                    ilEnabled = True
                End If
            End If
        End If
        udcCBill.Enabled = ilEnabled
    'ElseIf tscLine.SelectedItem.Index = 7 Then
    ElseIf tscLine.SelectedItem.Index = imTabMap(TABINSTALL) Then
        ilAirTimeNTRConflict = mAirTimeNTRConflict()
        ilRepDef = mAnyRepWithCntr()
        If (ilAirTimeNTRConflict = 0) And (Not ilRepDef) And ((Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) = INSTALLMENT) And ((imAllowCashTradeChgs) Or (UBound(tgFBSbf) > LBound(tgFBSbf))) And ((UBound(tgClfCntr) >= 1) Or (UBound(tgIBSbf) > LBound(tgIBSbf))) Then
            udcCBill.Enabled = True
        Else
            udcCBill.Enabled = False
        End If
    Else
        udcCBill.Enabled = True
    End If
End Sub

Public Sub mActiveLnTab(Optional blStartUp As Boolean = False)
    'If ((Asc(tgSaf(0).sFeatures6) And ADVANCEAVAILS) = ADVANCEAVAILS) And (tgUrf(0).sAdvanceAvails = "I") Then
    If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) = PODAIRTIME) Or ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) = PODSPOTS) Then
        If (tgSaf(0).sAdvanceAvail = "Y") And (tgUrf(0).sAdvanceAvails = "I") Then
            '10843 remove dead code
'            If tgSpf.sCLnStdQt = "Y" Then
'                'If (tscLine.SelectedItem.Index <> 4) Then
'                '    Set tscLine.SelectedItem = tscLine.Tabs.Item(4)
'                If (tscLine.SelectedItem.Index <> imTabMap(TABAIRTIME)) Then
'                    Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABAIRTIME))
'                    If blStartUp Then
'                        tmcLnTab.Enabled = False
'                        tmcLnTab_Timer
'                        pbcLine.Cls
'                        pbcLine_Paint
'                    End If
'                End If
'                'imTscLineIndex = 4
'                imTscLineIndex = imTabMap(TABAIRTIME)
'            Else
                'If (tscLine.SelectedItem.Index <> 8) Then
                '    Set tscLine.SelectedItem = tscLine.Tabs.Item(8)
                If (tscLine.SelectedItem.Index <> imTabMap(TABAVAIL)) Then
                    Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABAVAIL))
                    If blStartUp Then
                        tmcLnTab.Enabled = False
                        tmcLnTab_Timer
                        pbcLine.Cls
                        pbcLine_Paint
                    End If
                End If
                'imTscLineIndex = 8
                imTscLineIndex = imTabMap(TABAVAIL)
           ' End If
        Else
            'If (tscLine.SelectedItem.Index <> 4) Then
            '    Set tscLine.SelectedItem = tscLine.Tabs.Item(4)
            'End If
            If (tscLine.SelectedItem.Index <> imTabMap(TABAIRTIME)) Then
                Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABAIRTIME))
            End If
        End If
    Else
        If (Asc(tgSaf(0).sFeatures8) And PODADSERVER) = PODADSERVER Then
            Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABPODCASTCPM))
        Else
            Set tscLine.SelectedItem = tscLine.Tabs.item(imTabMap(TABNTR))
        End If
    End If
    mSetTabColors False
    DoEvents
End Sub

Public Sub mSetTabColors(ilInitTab As Integer)
     'Program: Paint and from menu select Image->Attribute, then width 86 by height 13
    '    Set custom color to Grey R=236; G=233; B=216
    '    Create Title in Black (back to Color and click on back) and center
    '    Zoom
    '    Back to color and click on custom grey color
    '    Fill in
    '    Save bmp
    '    Repeat for Green lettering
    'Add image control
    '    Add bmp to image control (black, then green)
    '
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilRepaintTabs As Integer
    Dim llColor As Long
    'Dim ilcListImage As ListImage
    
    On Error GoTo mSetTabColorErr
    ilRepaintTabs = False
    For ilLoop = 0 To 11 Step 1
        llColor = vbBlack   'vbBlue
        Select Case ilLoop + 1
            Case imTabMap(TABMULTIMEDIA)   '0  'Multi-Media
                If UBound(tgMsfCntr) > 0 Then
                    llColor = DARKGREEN    'vbBlue
                End If
            Case imTabMap(TABNTR)   '1  'NTR
                If (UBound(tgIBSbf) > LBound(tgIBSbf)) Then
                    llColor = DARKGREEN    'vbBlue
                Else
                    'If tscLine.SelectedItem.Index = 3 Then
                    If tscLine.SelectedItem.Index = imTabMap(TABNTR) Then
                        If udcCBill.NTRDataExist() Then
                            llColor = DARKGREEN    'vbBlue
                        End If
                    End If
                End If
            Case imTabMap(TABAIRTIME)   '2  'Air Time
                If (UBound(tgClfCntr) >= 1) Then
                    llColor = DARKGREEN    'vbBlue  'vbBlue
                End If
            Case imTabMap(TABPODCASTCPM)   'Podcast Ad Server
                'Changed test since flat rate will have blank for cpmcpmvalue. Using the same test as in AddPcf (save)
                'If (Trim$(grdCPMBuy.TextMatrix(grdCPMBuy.FixedRows, CPMCPMVALUE)) <> "") Then
                If (Contract.grdCPMBuy.TextMatrix(grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(grdCPMBuy.FixedRows, CPMDAYPART) <> "") Then
                    llColor = DARKGREEN    'vbBlue  'vbBlue
                End If
            Case imTabMap(TABMERCH)   'Merchandising
                If (UBound(tgMBSbf) > LBound(tgMBSbf)) Then
                    llColor = DARKGREEN    'vbBlue
                Else
                    'If tscLine.SelectedItem.Index = 5 Then
                    If tscLine.SelectedItem.Index = imTabMap(TABMERCH) Then
                        If udcCBill.MerchandisingDataExist() Then
                            llColor = DARKGREEN    'vbBlue
                        End If
                    End If
                End If
            Case imTabMap(TABPROMO)   'Promotional
                If (UBound(tgPBSbf) > LBound(tgPBSbf)) Then
                    llColor = DARKGREEN    'vbBlue
                Else
                    'If tscLine.SelectedItem.Index = 6 Then
                    If tscLine.SelectedItem.Index = imTabMap(TABPROMO) Then
                        If udcCBill.PromotionalDataExist() Then
                            llColor = DARKGREEN    'vbBlue
                        End If
                    End If
                End If
            Case imTabMap(TABINSTALL)   'Installment
                If (UBound(tgFBSbf) > LBound(tgFBSbf)) Then
                    llColor = DARKGREEN    'vbBlue
                Else
                    'If tscLine.SelectedItem.Index = 7 Then
                    If tscLine.SelectedItem.Index = imTabMap(TABINSTALL) Then
                        If udcCBill.InstallmentDataExist Then
                            llColor = DARKGREEN    'vbBlue
                        End If
                    End If
                End If
            Case imTabMap(TABAVAIL)   'Avails
                'If bmViewedAvailTab And tscLine.SelectedItem.Index = 8 Then
                'If tscLine.SelectedItem.Index = 8 Then
                If tscLine.SelectedItem.Index = imTabMap(TABAVAIL) Then
                    llColor = BLUE  'DARKGREEN
                End If
            Case imTabMap(TABPROTECTION)   'Protection
                'If bmViewedProtectionTab And tscLine.SelectedItem.Index = 9 Then
                'If tscLine.SelectedItem.Index = 9 Then
                If tscLine.SelectedItem.Index = imTabMap(TABPROTECTION) Then
                    llColor = BLUE  'DARKGREEN
                End If
            Case imTabMap(TABRESEARCH)   'Research
                'If bmViewedResearchTab And tscLine.SelectedItem.Index = 10 Then
                'If tscLine.SelectedItem.Index = 10 Then
                If tscLine.SelectedItem.Index = imTabMap(TABRESEARCH) Then
                    llColor = BLUE  'DARKGREEN
                End If
        End Select
        If lmTabColor(ilLoop) <> llColor Then
            ilRepaintTabs = True
            lmTabColor(ilLoop) = llColor
        End If
    Next ilLoop
    If Not ilInitTab Then
        If Not ilRepaintTabs Then
            Exit Sub
        End If
    End If
    
    Set tscLine.ImageList = Traffic!imcTabColor
    For ilLoop = 0 To 10 Step 1
        If imTabMap(ilLoop + 1) > 0 Then
            If lmTabColor(ilLoop) = vbBlack Then
                tscLine.Tabs(ilLoop + 1).Image = 2 * (ilLoop + 1) - 1
            Else
                tscLine.Tabs(ilLoop + 1).Image = 2 * (ilLoop + 1)
            End If
        End If
    Next ilLoop
    Exit Sub
mSetTabColorErr:
    Resume Next
        
End Sub

Public Function mPopRBBooks() As Integer
    Dim ilRet As Integer
    Dim ilVefCode As Integer
    Dim ilSort As Integer
    Dim ilShow As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilLoop As Integer
    
    ReDim imRBDnfCode(0 To 0) As Integer
    ilVefCode = 0
    ilSort = 1  'sort by date, then book name
    ilShow = 1  'show book name, then date
    ilRet = gPopBookNameBox(Contract, 0, 0, ilVefCode, ilSort, ilShow, lbcRBBookName, tmRBBookname(), smRBBooknameTag)
    For ilLoop = 0 To lbcRBBookName.ListCount - 1 Step 1
        slNameCode = tmRBBookname(ilLoop).sKey
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        lbcRBBookName.ItemData(ilLoop) = Val(slCode)
    Next ilLoop
    lbcRBBookName.ListIndex = -1
    mPopRBBooks = True
End Function

Private Function mIsChanged() As Boolean
    Dim ilRes As Integer
    Dim slMess As String
    Dim ilAltered As Integer
    Dim ilTest As Integer
    Dim blRet As Boolean
    
    blRet = False
    ilAltered = gAnyFieldChgd(tmHdCtrls(), TESTALLCTRLS)
    'Force as if altered if Planner so "Comlete" can be sent back without requiring changes
    If (tgUrf(0).iRemoteUserID <= 0) And (tgUrf(0).iSlfCode <= 0) And (sgCntrScreen <> "Orders") And (imStep1Index = 2) And (tgSpf.sGUsePropSys = "Y") And (smOrigStatus = "C") And ((tgUrf(0).sWorkToHold = "Y") Or (tgUrf(0).sWorkToOrder = "Y") Or (tgUrf(0).sCompToHold = "Y") Or (tgUrf(0).sCompToOrder = "Y") Or (tgUrf(0).sIncompToHold = "Y") Or (tgUrf(0).sIncompToOrder = "Y")) Then
        ilAltered = YES
    End If
    ilTest = mTestFields(TESTALLCTRLS, ALLMANBLANK + NOMSG)
    If (ilTest = NO) Or imLnChg Then
        '10910 added attachment
        If (ilAltered = YES) Or imLnChg Or imNTRChg Or imCPMChg Or imGameInvChg Or bgContractAttachments_Changed Then
            blRet = True
        End If
    End If
    mIsChanged = blRet
End Function

Public Sub mPopBillCycle(ilForceCalendar As Integer, blTestBillCycle As Boolean)
    Dim llLastStdDate As Long
    Dim llLastCalDate As Long
    Dim llLastWkDate As Long
    Dim llCntrStartDate As Long
    lbcBillCycle.Clear
    If (tgUrf(0).iSlfCode <= 0) And (tgUrf(0).iRemoteUserID <= 0) Then
        If blTestBillCycle Then
            gUnpackDateLong tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), llLastStdDate
            gUnpackDateLong tgSpf.iBLastCalMnth(0), tgSpf.iBLastCalMnth(1), llLastCalDate
            gUnpackDateLong tgSaf(0).iBLastWeeklyDate(0), tgSaf(0).iBLastWeeklyDate(1), llLastWkDate
            gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llCntrStartDate
            If tgChfCntr.sBillCycle <> "C" And tgChfCntr.sBillCycle <> "W" Then
                lbcBillCycle.AddItem "Std B'cast"   '"Broadcast"
            Else
                If (tgChfCntr.sBillCycle = "C") Then
                    If llCntrStartDate > llLastCalDate Then
                        lbcBillCycle.AddItem "Std B'cast"
                    End If
                End If
                If (tgChfCntr.sBillCycle = "W") Then
                    If llCntrStartDate > llLastWkDate Then
                        lbcBillCycle.AddItem "Std B'cast"
                    End If
                End If
            End If
            If (tgChfCntr.sBillCycle = "C") Or (ilForceCalendar) Then
                lbcBillCycle.AddItem "Calendar"
            Else
                If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
                    If llCntrStartDate > llLastCalDate Then
                        lbcBillCycle.AddItem "Calendar"
                    End If
                End If
            End If
            If tgChfCntr.sBillCycle = "W" Then
                lbcBillCycle.AddItem "Weekly"
            Else
                If ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) = WEEKLYBILL) Then
                    If llCntrStartDate > llLastWkDate Then
                        lbcBillCycle.AddItem "Weekly"
                    End If
                End If
            End If
        Else
            lbcBillCycle.AddItem "Std B'cast"   '"Broadcast"
            '8/16/12: Handle case where contract was set as Calendar but is not allowed at this time
            'If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
            If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Or (ilForceCalendar) Then
                lbcBillCycle.AddItem "Calendar"
            End If
            If ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) = WEEKLYBILL) Then
                lbcBillCycle.AddItem "Weekly"
            End If
        End If
    Else
        lbcBillCycle.AddItem "Std B'cast"   '"Broadcast"
    End If
End Sub

Private Function mAddDormantSlf() As Integer
    '5/18/12: Only include dormant salesperson if referenced in contract
    Dim ilRet As Integer
    Dim ilSlf As Integer
    Dim blFound As Boolean
    Dim slCode As String
    Dim slRecCode As String
    Dim slNameCode As String
    Dim blReloadList As Boolean
    Dim llLen As Long
    Dim slName As String
    Dim llLoop As Long
    Dim ilTest As Integer
    
    mAddDormantSlf = False
    If Not bmCheckSlfDormant Then
        Exit Function
    End If
    If imStep1Index = 0 Then
        bmCheckSlfDormant = False
        Exit Function
    ElseIf imStep1Index = -1 Then
        If sgCntrScreen <> "Orders" Then
            bmCheckSlfDormant = False
            Exit Function
        End If
    End If
    If tgChfCntr.lCode <= 0 Then
        Exit Function
    End If
    blReloadList = False
    For ilTest = 0 To 9 Step 1
        slRecCode = Trim$(str$(tgChfCntr.iSlfCode(ilTest)))
        If tgChfCntr.iSlfCode(ilTest) <> 0 Then
            blFound = False
            For llLoop = 0 To UBound(tmCntSalesperson) - 1 Step 1  'Traffic!lbcSalesperson.ListCount - 1 Step 1
                slNameCode = tmCntSalesperson(llLoop).sKey 'Traffic!lbcSalesperson.List(llLoop)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                If slRecCode = slCode Then
                    blFound = True
                    Exit For
                End If
            Next llLoop
            If Not blFound Then
                ilSlf = gBinarySearchSlf(tgChfCntr.iSlfCode(ilTest))
                'If ilSlf <> 0 Then
                If ilSlf <> -1 Then
                    blReloadList = True
                    If igSlfFirstNameFirst Then
                        slName = Trim$(tgMSlf(ilSlf).sFirstName) & " " & Trim$(tgMSlf(ilSlf).sLastName)
                    Else
                        slName = Trim$(tgMSlf(ilSlf).sLastName) & ", " & Trim$(tgMSlf(ilSlf).sFirstName)
                    End If
                    Do While Len(slName) < Len(tgMSlf(ilSlf).sFirstName) + Len(tgMSlf(ilSlf).sLastName) + 2
                        slName = slName & " "
                    Loop
                    slName = slName & "\" & Trim$(str$(tgMSlf(ilSlf).iCode))
                    tmCntSalesperson(UBound(tmCntSalesperson)).sKey = slName
                    ReDim Preserve tmCntSalesperson(0 To UBound(tmCntSalesperson) + 1) As SORTCODE
                End If
            End If
        End If
    Next ilTest
    If blReloadList Then
        lbcSPerson(0).Clear
        If UBound(tmCntSalesperson) - 1 > 0 Then
            ArraySortTyp fnAV(tmCntSalesperson(), 0), UBound(tmCntSalesperson), 0, LenB(tmCntSalesperson(0)), 0, LenB(tmCntSalesperson(0).sKey), 0
        End If
        llLen = 0
        For llLoop = 0 To UBound(tmCntSalesperson) - 1 Step 1
            slNameCode = tmCntSalesperson(llLoop).sKey    'lbcMster.List(llLoop)
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            If ilRet <> CP_MSG_NONE Then
                Exit For
            End If
            slName = Trim$(slName)
            If Not gOkAddStrToListBox(slName, llLen, True) Then
                Exit For
            End If
            lbcSPerson(0).AddItem slName  'Add ID to list box
        Next llLoop
        mAddDormantSlf = True
    End If
    bmCheckSlfDormant = False
    Exit Function
End Function

Private Sub mUndoLines()
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    
    pbcLine.Cls
    mPaintLnTitle
    pbcLnTotal.Cls
    pbcLnDates.Cls
    pbcDemoBar(0).Cls
    pbcDemoBar(1).Cls
    ReDim tgIBSbf(0 To 0) As SBFLIST
    tgIBSbf(0).iStatus = -1 'Not Used
    tgIBSbf(0).lRecPos = 0
    '10833
    ReDim tgMBSbf(0 To 0) As SBFLIST
    tgMBSbf(0).iStatus = -1 'Not Used
    tgMBSbf(0).lRecPos = 0
    ReDim tgPBSbf(0 To 0) As SBFLIST
    tgPBSbf(0).iStatus = -1 'Not Used
    tgPBSbf(0).lRecPos = 0
    ReDim tgFBSbf(0 To 0) As SBFLIST
    tgFBSbf(0).iStatus = -1 'Not Used
    tgFBSbf(0).lRecPos = 0
    ReDim tgClfCntr(0 To 0) As CLFLIST
    tgClfCntr(0).iStatus = -1 'Not Used
    tgClfCntr(0).lRecPos = 0
    tgClfCntr(0).iFirstCff = -1
    tgClfCntr(0).iFirstCgf = -1
    tgClfCntr(0).lFirstAvail = -1
    ReDim tgCffCntr(0 To 0) As CFFLIST
    tgCffCntr(0).iStatus = -1 'Not Used
    tgCffCntr(0).lRecPos = 0
    tgCffCntr(0).iNextCff = -1
    imLastCffUsed = 0
    ReDim tgCgfCntr(0 To 0) As CGFLIST
    tgCgfCntr(0).iStatus = -1 'Not Used
    tgCgfCntr(0).iNextCgf = -1
    ReDim tgMsfCntr(0 To 0) As MSFLIST
    tgMsfCntr(0).iStatus = -1 'Not Used
    tgMsfCntr(0).iFirstMgf = -1
    tgMsfCntr(0).iCxfIndex = -1
    ReDim tgMgfCntr(0 To 0) As MGFLIST
    tgMgfCntr(0).iStatus = -1
    ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
    tgLnAvailInfo(0).lNextIndex = -1
    ReDim sgMsfCntrCxf(0 To 0) As String
    ReDim smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
    ReDim imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim smLnShow(0 To LINECOMMINDEX, 0 To UBound(tgClfCntr) + 1) As String
    ReDim smAirShow(0 To 14, 0 To 1) As String
    ReDim smAirSave(0 To 13, 0 To 1) As String
    ReDim imAirSave(0 To 2, 0 To 1) As Integer
    For ilIndex = 1 To UBound(tgClfCntr) + 1 Step 1
        For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            imLnSave(ilLoop, ilIndex) = -1
        Next ilLoop
        smLnSave(19, ilIndex) = "1.00"
    Next ilIndex
    For ilLoop = imLBCTCtrls To UBound(tmLnDCtrls) Step 1
        tmLnDCtrls(2).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmLnTCtrls) Step 1
        tmLnTCtrls(ilLoop).sShow = ""
    Next ilLoop
    ReDim smLnComment(0 To UBound(tgClfCntr) + 1) As String
    ReDim smLnInitComment(0 To UBound(tgClfCntr) + 1) As String
    ReDim imLnCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim imLnInitCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
    ReDim tmWkInfo(0 To 1) As WKINFO
    tmWkInfo(1).iNextIndex = -1
    ReDim tgPackVeh(0 To 0) As PACKVEH
    ReDim tgPackDP(0 To 0) As PACKDP
    ReDim tgPackLn(0 To 0) As PACKLN
    ReDim lgDeletedPcfCode(0 To 0) As Long
    pbcHeader_Paint
    mSetCommands
    imHdBoxNo = -1
    imInFlightScreen = False
    lmHSStartDate = -1
    imHSStartWkNo = 0
    imHSEndWkNo = 0
    imHSCurWkNo = 0
    mCntrTotal
    mVehPop True    'Rebuild tgPackVeh
    'vbcLines.Min = LBound(tgClfCntr)
    'If UBound(tgClfCntr) <= vbcLines.LargeChange Then
    '    vbcLines.Max = LBound(tgClfCntr)
    'Else
    '    vbcLines.Max = UBound(tgClfCntr) - vbcLines.LargeChange
    'End If
    mSetLineScroll True, False
    'pbcHdSTab.SetFocus
    pbcClickFocus.SetFocus
End Sub

'9/11/14: Disallow Installment and Sports vehicles if using Revenue By Events
Public Function mRevneueByEventOk() As Integer
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilVef As Integer
    
    mRevneueByEventOk = True
    If (Asc(tgSpf.sSportInfo) And USINGSPORTS) <> USINGSPORTS Then
        Exit Function
    End If
    If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) <> INSTALLMENT Then
        Exit Function
    End If
    If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) <> EVENTREVENUE) Then
        Exit Function
    End If
    
    For ilLoop = LBound(tgFBSbf) To UBound(tgFBSbf) - 1 Step 1
        If (tgFBSbf(ilLoop).iStatus >= 0) And (tgFBSbf(ilLoop).iStatus <= 1) Then
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                ilVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                If ilVef <> -1 Then
                    If tgMVef(ilVef).sType = "G" Then
                        Screen.MousePointer = vbDefault    'Default
                        MsgBox "Sports and Installment disallowed when using Revenue By Events on the same contract", vbOKOnly + vbExclamation, "Warning"
                        mRevneueByEventOk = False
                        Exit Function
                    End If
                End If
            Next ilClf
        End If
    Next ilLoop
End Function

'12/16/14: Add Hide/Show Hidden Lines
Private Sub mResetShowLine(ilRowNo As Integer, blSetValue As Boolean)
    Dim ilPkLineNo As Integer
    Dim slLineType As String
    Dim ilClf As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    
    slLineType = mGetLineType(ilRowNo)
    If (slLineType = "A") Or (slLineType = "O") Or (slLineType = "E") Then
        If plcDemoBar.Visible Then  'Hide demo bar
            cmcDemoBar_Click
        End If
        ilPkLineNo = tgClfCntr(ilRowNo - 1).ClfRec.iLine
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilLoop).iLineNo = ilPkLineNo) Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                            tgClfCntr(ilClf).bShowLine = blSetValue
                             Exit For
                        End If
                    Next ilClf
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
                Exit For
            End If
        Next ilLoop
    End If
End Sub

Public Sub mSetArrowFrame()
    pbcLineArrow.Visible = False
    If (imMoveLnRowNo >= vbcLines.Value + 1) And (imMoveLnRowNo < vbcLines.Value + vbcLines.LargeChange + 2) Then
        laclnFrame.Move 0, tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) - 30, pbcLine.Width
        'lacLnFrame.Visible = True
        'pbcLineArrow.Move pbcLineArrow.Left, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
        pbcLineArrow.Move 15, plcLine.Top + tmLnCtrls(VEHINDEX).fBoxY + (imMoveLnRowNo - vbcLines.Value - 1) * (fgBoxGridH + 15) + 435
        mPaintLnBkgd mRemapRowNo(imMoveLnRowNo), GRAY
        pbcLineArrow.Visible = True
    End If
End Sub

Private Sub mPaintLnBkgd(ilLnRowNo As Integer, llBkgdColor As Long)
    If ilLnRowNo = -1 Then
        Exit Sub
    End If
    imCurrHightLightLnRowNo = ilLnRowNo
    pbcLine_Paint
    imPrevHightLightLnRowNo = imCurrHightLightLnRowNo
    imCurrHightLightLnRowNo = -1
    Exit Sub
End Sub

Public Sub mSetLineScroll(blBuildMapLinePaint As Boolean, blSetScrollValue As Boolean)
    If Not bgHideHiddenLines Then
        vbcLines.Min = LBound(tgClfCntr)
        If UBound(tgClfCntr) <= vbcLines.LargeChange Then
            vbcLines.Max = LBound(tgClfCntr)
        Else
            'can't get past this screen--won't show blank page
            vbcLines.Max = UBound(tgClfCntr) - vbcLines.LargeChange
        End If
    Else
        If blBuildMapLinePaint Then
            mBuildMapLinePaint
        End If
        'tgMapLinePaint is what is displayed
        vbcLines.Min = LBound(tgMapLinePaint)
        If UBound(tgMapLinePaint) <= vbcLines.LargeChange Then
            vbcLines.Max = LBound(tgMapLinePaint)
        Else
            vbcLines.Max = UBound(tgMapLinePaint) - vbcLines.LargeChange
        End If
    End If
    If blSetScrollValue Then
        vbcLines.Value = vbcLines.Min
    End If
End Sub

Private Sub mCreateLines(ilSource As Integer, ilDays() As Integer, slLen() As String, ilDGSave() As Integer)
    Dim ilLoop As Integer
    Dim ilLen As Integer
    Dim ilVpfIndex As Integer
    Dim ilFound As Integer
    Dim ilFdLen As Integer
    Dim ilVehLen As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim ilRdf As Integer
    Dim slStr As String
    Dim slDate As String
    Dim llDate As Long
    Dim slvalue As String
    Dim ilIndex As Integer
    Dim llSpotCount As Long
    Dim slNameCode As String
    Dim slCode As String
    Dim ilDay As Integer
    Dim ilRet As Integer
    Dim slPrice As String
    Dim llWkPrice As Long
    Dim ilRCPrice As Integer
    Dim ilRBDnfCode As Integer
    
    ReDim tmLnPBDPGen(LBound(tmPBDPGen) To UBound(tmPBDPGen)) As PBDPGEN
    For ilLoop = LBound(tmPBDPGen) To UBound(tmPBDPGen) - 1 Step 1
        tmLnPBDPGen(ilLoop) = tmPBDPGen(ilLoop)
    Next ilLoop
    Screen.MousePointer = vbHourglass
    For ilLoop = LBound(tmLnPBDPGen) To UBound(tmLnPBDPGen) - 1 Step 1
        ilVpfIndex = gVpfFind(Contract, tmLnPBDPGen(ilLoop).iVefCode)
        For ilLen = 0 To UBound(slLen) - 1 Step 1
            Screen.MousePointer = vbHourglass
            ilFound = False
            ilFdLen = Val(slLen(ilLen))
            For ilVehLen = LBound(tgVpf(ilVpfIndex).iSLen) To UBound(tgVpf(ilVpfIndex).iSLen) Step 1
                If tgVpf(ilVpfIndex).iSLen(ilVehLen) <> 0 Then
                    If tgVpf(ilVpfIndex).iSLen(ilVehLen) <> 0 Then
                        If tgVpf(ilVpfIndex).iSLen(ilVehLen) = ilFdLen Then
                            ilFound = True
                            Exit For
                        End If
                    End If
                End If
            Next ilVehLen
            If ilFound Then
                ReDim Preserve tgClfCntr(0 To UBound(tgClfCntr) + 1) As CLFLIST
                ReDim Preserve smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
                ReDim Preserve imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
                ReDim Preserve smLnShow(0 To LINECOMMINDEX, 0 To UBound(tgClfCntr) + 1) As String
                ReDim Preserve smLnComment(0 To UBound(tgClfCntr) + 1) As String
                ReDim Preserve smLnInitComment(0 To UBound(tgClfCntr) + 1) As String
                ReDim Preserve imLnCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
                ReDim Preserve imLnInitCommShowOn(0 To 4, 0 To UBound(tgClfCntr) + 1) As Integer
                imLnRowNo = UBound(tgClfCntr) 'ilLineNo - 1    'Init line area to be filled
                mInitNewLine
                Screen.MousePointer = vbHourglass
                smLineType = ""
                tgClfCntr(imLnRowNo).ClfRec.iLine = 0
                imLnRowNo = UBound(tgClfCntr) - 1 'ilLineNo    'Init line area not used first
                mInitNewLine
                Screen.MousePointer = vbHourglass
                tgClfCntr(imLnRowNo).iStatus = 0
                If ilSource = 1 Then
                    igLnMakingPack(UBound(igLnMakingPack)) = tgClfCntr(imLnRowNo).ClfRec.iLine
                    ReDim Preserve igLnMakingPack(0 To UBound(igLnMakingPack) + 1) As Integer
                End If
                imLnChg = True
                imComputeReq = True

                imLnRowNo = UBound(tgClfCntr)
                tgClfCntr(imLnRowNo - 1).iPriceSet = 1
                tgClfCntr(imLnRowNo - 1).iSPChg = True
                igLnSPChg = True
                'Set values into line area
                imLnBoxNo = VEHINDEX
                edcLNDropDown.MaxLength = 0
                edcLNDropDown.Text = Trim$(tmLnPBDPGen(ilLoop).sVehName)  'lbcAllVehicle.List(ilVeh)
                edcLnDropDown_Change
                mLnSetShow imLnBoxNo
                Screen.MousePointer = vbHourglass
                imLnBoxNo = DPINDEX
                edcLNDropDown.MaxLength = 0
                edcLNDropDown.Text = mMakePrgName(tmLnPBDPGen(ilLoop).iRdfCode)   'Trim$(tmPBDPGen(ilLoop).sDPName)    'lbcDaypart.List(ilDP)
                edcLnDropDown_Change
                mLnSetShow imLnBoxNo
                Screen.MousePointer = vbHourglass
                imLnSave(2, imLnRowNo) = -1 'Buy type 0=Program; 1=Time
                imLnSave(3, imLnRowNo) = 0  'BB: N/A
                imLnSave(4, imLnRowNo) = 0  'Time override
                smLnSave(2, imLnRowNo) = ""
                smLnSave(3, imLnRowNo) = ""
                smDGSave(13) = ""
                smDGSave(14) = ""
                imLnSave(5, imLnRowNo) = 0  'Unique Spot Types: N/A
                imLnBoxNo = LENINDEX
                edcLNDropDown.Text = slLen(ilLen)   'Trim$(Str$(lbcLength.List(ilLen)))
                edcLnDropDown_Change
                mLnSetShow imLnBoxNo
                Screen.MousePointer = vbHourglass
                imLnBoxNo = PRICEINDEX
                '4/15/19: Default obtained from vehicle option
                'imLnSave(31, imLnRowNo) = 1
                imLnSave(31, imLnRowNo) = -1
                'If rbcPBPreempt(1).Value Then
                    imLnSave(6, imLnRowNo) = 1
                'Else
                '    imLnSave(6, imLnRowNo) = 0
                'End If
                imDGSave(2) = 1 'Weekly buy
                imDGSave(3) = imLnSave(6, imLnRowNo)
                imDGSave(7) = imLnSave(31, imLnRowNo)
                slStartDate = edcPBDate(0).Text
                slEndDate = edcPBDate(1).Text
                llStartDate = gDateValue(slStartDate)
                llEndDate = gDateValue(slEndDate)
                slStr = mGetLineType(imLnRowNo)
                If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                    mDPAllowedDays imLnSave(1, imLnRowNo), imAllowedDays()
                Else
                    For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                        If StrComp(smLnSave(20, imLnRowNo), Trim$(tgMRdf(ilRdf).sName), 1) = 0 Then
                            mDPAllowedDays tgMRdf(ilRdf).iCode, imAllowedDays()
                            Exit For
                        End If
                    Next ilRdf
                End If
                If (Trim$(smPowerCaption) = "Rate Bar") Then
                    If tmLnPBDPGen(ilLoop).iOvDays(0) <> -1 Then
                        For ilDay = 0 To 6 Step 1
                            If (tmLnPBDPGen(ilLoop).iOvDays(ilDay) = 0) And (imAllowedDays(ilDay + LBound(imAllowedDays))) Then
                                ilDays(ilDay) = 1
                            Else
                                ilDays(ilDay) = 0
                            End If
                        Next ilDay
                    Else
                        For ilDay = 0 To 6 Step 1
                            If (imAllowedDays(ilDay + LBound(imAllowedDays))) Then
                                ilDays(ilDay) = 1
                            Else
                                ilDays(ilDay) = 0
                            End If
                        Next ilDay
                    End If
                    If (Trim$(tmLnPBDPGen(ilLoop).sOvStartTime) <> "") And (Trim$(tmLnPBDPGen(ilLoop).sOvEndTime) <> "") Then
                        smDGSave(13) = Trim$(tmLnPBDPGen(ilLoop).sOvStartTime)
                        smDGSave(14) = Trim$(tmLnPBDPGen(ilLoop).sOvEndTime)
                    Else
                        smDGSave(13) = ""
                        smDGSave(14) = ""
                    End If
                Else
                End If
                If (Trim$(smPowerCaption) = "Rate Bar") Then
                    If (tmLnPBDPGen(ilLoop).lMixStartDate > 0) Then
                        slDate = Format$(tmLnPBDPGen(ilLoop).lMixStartDate, "m/d/yy")
                        slStr = smRBMixDatesSpots(tmLnPBDPGen(ilLoop).iMixSpotIndex)
                        ilIndex = 1
                        Do
                            ilRet = gParseItem(slStr, ilIndex, "|", slvalue)
                            If ilRet <> CP_MSG_NONE Then
                                Exit Do
                            End If
                            If Left$(slvalue, 1) = "-" Then
                                llSpotCount = 0
                            Else
                                llSpotCount = Val(slvalue)
                            End If
                            If llSpotCount > 0 Then
                                llDate = gDateValue(slDate)
                                mAddWeek imLastCffUsed, imLnRowNo, llDate, "W", llSpotCount, ilDays()
                            End If
                            slDate = gIncOneWeek(slDate)
                            ilIndex = ilIndex + 1
                        Loop
                    Else
                        For ilIndex = 0 To lbcRBDatesSpots(0).ListCount - 1 Step 1
                            If lbcRBDatesSpots(0).Selected(ilIndex) Then
                                slNameCode = lbcRBDatesSpots(0).List(ilIndex)
                                ilRet = gParseItem(slNameCode, 1, "|", slDate)
                                ilRet = gParseItem(slNameCode, 2, "|", slCode)
                                If tmLnPBDPGen(ilLoop).iSpotChg Then
                                    llSpotCount = tmLnPBDPGen(ilLoop).lNoSpots
                                Else
                                    If Trim$(slCode) <> "" Then
                                        llSpotCount = Val(slCode)
                                    Else
                                        llSpotCount = 0
                                    End If
                                End If
                            Else
                                llSpotCount = 0
                            End If
                            If llSpotCount > 0 Then
                                llDate = gDateValue(slDate)
                                mAddWeek imLastCffUsed, imLnRowNo, llDate, "W", llSpotCount, ilDays()
                            End If
                        Next ilIndex
                    End If
                Else
                End If
                mGetFlightDays imLnRowNo, imOvDays()
                '10344 smDGSave and others not saved
                mSetActOneDGInfo imLnRowNo
                imLnBoxNo = OV1INDEX
                mLnSetShow imLnBoxNo
                Screen.MousePointer = vbHourglass
                'imAirCancel = False
                'mFlightReturn
                imLnBoxNo = -1  'PRICEINDEX
                If (Trim$(smPowerCaption) = "Rate Bar") Then
                    tgClfCntr(imLnRowNo - 1).iPriceSet = 2
                    slPrice = gLongToStrDec(tmLnPBDPGen(ilLoop).lAvgPrice, 2)
                    ilRCPrice = True
                    For llDate = llStartDate To llEndDate Step 7
                        slDate = Format$(llDate, "m/d/yy")
                        llWkPrice = mComputeRCWkPrice(tmRcf.iCode, tmLnPBDPGen(ilLoop).iRdfCode, slDate, tmLnPBDPGen(ilLoop).iVefCode, -1) * 100
                        If llWkPrice > 0 Then
                            slStr = mRCPriceAdjust(tmRcf, llWkPrice, False, imLnRowNo, ilDGSave(), 0, 0, Val(smLnSave(16, imLnRowNo)), llSpotCount, ilDays(), tmLnPBDPGen(ilLoop).iRdfCode)
                            slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                            llWkPrice = gStrDecToLong(slStr, 0)
                        End If
                        If tmLnPBDPGen(ilLoop).lAvgPrice <> llWkPrice Then
                            ilRCPrice = False
                            Exit For
                        End If
                    Next llDate
                    If ilRCPrice Then
                        slPrice = lbcPriceType(0).List(1)
                    Else
                        slPrice = gLongToStrDec(tmLnPBDPGen(ilLoop).lAvgPrice, 2)
                    End If
                    mSetFlightPrice slPrice, False
                    tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode = 0
                    For ilRBDnfCode = UBound(imRBDnfCode) - 1 To LBound(imRBDnfCode) Step -1
                        If mRBVehBookExist(hmDrf, imRBDnfCode(ilRBDnfCode), tgClfCntr(imLnRowNo - 1).ClfRec.iVefCode) Then
                            tgClfCntr(imLnRowNo - 1).ClfRec.iDnfCode = imRBDnfCode(ilRBDnfCode)
                            Exit For
                        End If
                    Next ilRBDnfCode
                Else
                End If
                If mChkForStdPkg(imLnRowNo) = False Then
                    mClearCtrlFields
                    mTerminate
                    Exit Sub
                End If
                Screen.MousePointer = vbHourglass
                'ilLineNo = ilLineNo + 1
            End If
        Next ilLen
    Next ilLoop
End Sub

Private Sub mSTabNextBoxNo(ilFound As Integer, ilLastBox As Integer, ilLnBoxNo As Integer, ilBox As Integer, ilDailySpots() As Integer)
    Dim llLnStartDate As Long
    Dim llAllowedChgWkStartDate As Long
    Dim llDate As Long
    Dim slWDFlag As String
    
    mDBSetShow imDBBoxNo
    ilFound = -1
    ilLastBox = -1
    ilLnBoxNo = WKSPOTSINDEX + imDBBoxNo - 1
    If ilLnBoxNo = WKSPOTSINDEX Then
        ''pbcDemoBar_MouseUp 1, 0, 0, CSng(lmLnHotSpot(3, 1) + 1220), CSng(lmLnHotSpot(3, 2))
        'pbcDemoBar_MouseUp 1, 0, 0, CSng(lmDBHotSpot(2, 1) - 2235 + 5), CSng(lmDBHotSpot(2, 2))
        pbcDemoBar_MouseUp 1, 0, 0, CSng(lmDBHotSpot(2, 1)), CSng(lmDBHotSpot(2, 2))
        ilLnBoxNo = SPOTSINDEX
    End If
    If ilLnBoxNo > WKSPOTSINDEX Then
        llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
        llAllowedChgWkStartDate = mLnDate(imLnRowNo, smLnLLD, 0)
        If llAllowedChgWkStartDate <= tgClfCntr(imLnRowNo - 1).lEndBilledDate Then
            llAllowedChgWkStartDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate + 1
        End If
        ilBox = ilLnBoxNo - 1
        Do While ilBox >= WKSPOTSINDEX
            llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
            If (llAllowedChgWkStartDate <= llDate) Then     'And (llDate >= gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))) And ((llDate <= gDateValue(gObtainNextSunday(smLnSave(15, imLnRowNo))))) Then
                'ilFound = ilBox - WKSPOTSINDEX + 1
                'Exit Do
                If (imDBRowNo = 3) Or (imDBRowNo = 5) Then
                    imWkCff = mGetFlightSpotsDays(imLnRowNo, llDate, imOvDays(), lmWkSpots, imWkDays(), slWDFlag, ilDailySpots())
                    If imLnSave(8, imLnRowNo) = 0 Then
                        If lmWkSpots > 0 Then
                            ilFound = ilBox - WKSPOTSINDEX + 1
                            Exit Do
                        End If
                    Else
                        If lmWkSpots > 0 Then
                            ilFound = ilBox - WKSPOTSINDEX + 1
                            Exit Do
                        End If
                    End If
                Else
                    ilFound = ilBox - WKSPOTSINDEX + 1
                    Exit Do
                End If
            End If
            ilBox = ilBox - 1
        Loop
    End If
End Sub

Public Sub mNextAllowedWeek(ilFound As Integer, ilBox As Integer, llAllowedChgWkStartDate As Long, llDate As Long)
    'Skip to next allowed week
    mLnSetShow imLnBoxNo
    ilFound = -1
    smLineType = mGetLineType(imLnRowNo)
    If smLnSave(14, imLnRowNo) = "" Then
        If smLineType = "A" Then
            ilFound = LINECOMMINDEX
        Else
            ilFound = imLnBoxNo + 1
            If ilFound < WKSPOTSINDEX Then
                ilFound = WKSPOTSINDEX
            End If
        End If
    Else
        If smLineType = "A" Then
            ilFound = LINECOMMINDEX
        Else
            'llLnStartDate = gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))
            llAllowedChgWkStartDate = mLnDate(imLnRowNo, smLnLLD, 0)
            If llAllowedChgWkStartDate <= tgClfCntr(imLnRowNo - 1).lEndBilledDate Then
                llAllowedChgWkStartDate = tgClfCntr(imLnRowNo - 1).lEndBilledDate + 1
            End If
            ilBox = imLnBoxNo + 1
            If ilBox < WKSPOTSINDEX Then
                ilBox = WKSPOTSINDEX
            End If
            Do While ilBox <= WKSPOTSINDEX + 12
                llDate = lmHSStartDate + 7 * (imHSCurWkNo + ilBox - WKSPOTSINDEX - 1)
                'If (llAllowedChgWkStartDate <= llDate) And (llDate >= gDateValue(gObtainPrevMonday(smLnSave(14, imLnRowNo)))) And ((llDate <= gDateValue(gObtainNextSunday(smLnSave(15, imLnRowNo))))) Then
                If (llAllowedChgWkStartDate <= llDate) Then
                    ilFound = ilBox
                    Exit Do
                End If
                ilBox = ilBox + 1
            Loop
            If ilFound <= 0 Then
                ilFound = LINECOMMINDEX
                If plcDemoBar.Visible Then
                    imDBBoxNo = -1
                End If
            End If
        End If
    End If
End Sub

Private Sub mUnfreezeCalc()
    Dim ilClf As Integer
    Dim slPrice As String
    Dim slStr As String
    
    Screen.MousePointer = vbHourglass
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If tgClfCntr(ilClf).sLineChgd = "Y" Then
            imLnRowNo = ilClf + 1
            mLnTotals imLnRowNo, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
            mSetLnTotals imLnRowNo
        End If
    Next ilClf
    pbcLine.Cls
    pbcLnTotal.Cls
    pbcLnDates.Cls
    mCntrTotal
    pbcLine_Paint
    Screen.MousePointer = vbDefault
End Sub

Public Function mAllowedToChgAcqCost(ilLnRowNo As Integer) As Boolean
    mAllowedToChgAcqCost = True
    If mUsingAcqCost() Then
        If tgUrf(0).sChgAcq <> "I" Then
            mAllowedToChgAcqCost = False
            Exit Function
        End If
    Else
        mAllowedToChgAcqCost = False
    End If
    'If ilLnRowNo >= 0 Then
    If ilLnRowNo > 0 Then
        If (tgClfCntr(ilLnRowNo - 1).iInPast) And (tgClfCntr(ilLnRowNo - 1).lEndBilledDate > 0) And (tgClfCntr(ilLnRowNo - 1).iAcqCostSpotRate = 2) Then
            mAllowedToChgAcqCost = False
        End If
    End If
End Function

Public Function mAllowedToChgSpotPrice(ilLnRowNo As Integer) As Boolean
    mAllowedToChgSpotPrice = True
    If tgUrf(0).sChgPrices <> "I" Then
        mAllowedToChgSpotPrice = False
    End If
    'If ilLnRowNo >= 0 Then
    If ilLnRowNo > 0 Then
        If (tgClfCntr(ilLnRowNo - 1).iInPast) And (tgClfCntr(ilLnRowNo - 1).lEndBilledDate > 0) And (tgClfCntr(ilLnRowNo - 1).iAcqCostSpotRate = 2) Then
            mAllowedToChgSpotPrice = False
        End If
    End If
End Function

'Dan 8364
Private Sub mLoadExportFacts()
    With tgExportFacts
        .hmDef = hmDef
        .hmDpf = hmDpf
        .hmDrf = hmDrf
        .hmMnf = hmMnf
        .hmRaf = hmRaf
        .hmCHF = hmCHF
        .hmClf = hmClf
        .imChgMode = imChgMode
        .imCppCpm = imCppCpm
        .imCPriDemoRating = imCPriDemoRating
        .imMnfRecLen = imMnfRecLen
        .imStep1Index = imStep1Index
        .imTerminate = imTerminate
        .imVefCode = imCntrVefCode
        .imVpfIndex = imVpfIndex
        .lmCPriDemoCPM = lmCPriDemoCPM
        .lmCPriDemoCPP = lmCPriDemoCPP
        .lmCPriDemoGrImp = lmCPriDemoGrImp
      '  .tmAgfsName = tmAgf.sName
        .tmMnf = tmMnf
        .tmMnfSrchKey = tmMnfSrchKey
        .tmRegionCode = tmRegionCode
        .smAgencyXMLPath = smAgencyXMLPath
        .smStationXMLWOPath = smStationXMLWOPath
        .imLB1Or2 = imLB1Or2
        .smLnSave = smLnSave
        .imDiffMode = imDiffMode
      '  .tmAgfSCntrAddr = tmAgf.sCntrAddr
        .smStationXMLBasePath = smStationXMLBasePath
    End With
    tgExportAgf = tmAgf
End Sub

Private Sub mInitFileMaker()
'8723
    If ogContractCreator.CreationUser = Filemaker Then
        If ogContractCreator.ContractToProcess = Order Then
            imChgMode = True
            If lbcStep(0).List(2) = "Revise an Existing Hold or Order" Then
                lbcStep(0).ListIndex = 2
            Else
                lbcStep(0).ListIndex = lbcStep(0).ListCount - 1
            End If
            imStepBoxNo = STEP1INDEX
            edcStepDropDown_Change
            mStepSetShow imStepBoxNo
            DoEvents
            imStepBoxNo = STEP2INDEX
            mStep2IndexPop
            lbcStep(1).ListIndex = 0    'by number
            edcStepDropDown_Change
            mStepSetShow imStepBoxNo
            DoEvents
            imStepBoxNo = STEP3INDEX
            edcStepDropDown.Text = ogContractCreator.ContractNumber
            mStepSetShow imStepBoxNo
            pbcSelect_Paint
            imChgMode = False
        End If
    End If
End Sub

Private Sub mFileMakerSetToChange()
    Dim ilLoop As Integer
    
    If ogContractCreator.CreationUser = Filemaker And ogContractCreator.ContractToProcess = Order Then
        For ilLoop = 1 To UBound(tmHdCtrls) Step 1
            tmHdCtrls(ilLoop).iChg = True
        Next
        mSetCommands
    End If
End Sub

'Public Function mObtainAct1LineupDefault(slVehicleName As String)
'removed 10256
'    Dim ilVefCode As Integer
'    Dim ilRet As Integer
'    Dim ilVff As Integer
'    Dim slNameCode As String
'    Dim slCode As String
'
'    mObtainAct1LineupDefault = ""
'    If Not bmAct1PackageEnable Then
'        Exit Function
'    End If
'    gFindMatch Trim$(slVehicleName), 0, lbcLnVehicle(igTabMapIndex)
'    If gLastFound(lbcLnVehicle(igTabMapIndex)) < 0 Then
'        ilVefCode = 0
'    Else
'        slNameCode = tmVehicleCode(gLastFound(lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
'        ilRet = gParseItem(slNameCode, 2, "\", slCode)
'        ilVefCode = CInt(slCode)
'    End If
'    If ilVefCode > 0 Then
'        ilVff = gBinarySearchVff(ilVefCode)
'        If ilVff <> -1 Then
'            mObtainAct1LineupDefault = tgVff(ilVff).sACT1LineupCode
'        End If
'    End If
'End Function

Private Sub mSetLineArea()
    Dim ilIndex As Integer
    
    If lmPlcLineHeight <= 0 Then
        Exit Sub
    End If
    ilIndex = tscLine.SelectedItem.Index
    'If (tgSpf.sGUsePropSys <> "Y") Or (sgCntrScreen = "Orders") Or (ilIndex < 8) Then
    If (tgSpf.sGUsePropSys <> "Y") Or (sgCntrScreen = "Orders") Or (ilIndex < imTabMap(TABAVAIL)) Or (imTabMap(TABAVAIL) = -1) Then
        ilIndex = imTabMap(TABAIRTIME)  '4
    End If
    
    Select Case ilIndex 'tscLine.SelectedItem.Index
        Case imTabMap(TABAIRTIME)   '4      'Air Time
            plcLine.height = lmPlcLineHeight
            pbcLine.height = lmPbcLineHeight '+ 15
            pbcLnTotal.height = CInt(fgBoxGridH) + 30
            pbcLnTotal.Top = pbcLine.Top + pbcLine.height - 45
        Case imTabMap(TABAVAIL), imTabMap(TABPROTECTION) '8, 9   'Avails and protection
            plcLine.height = lmPlcLineHeight - 3 * (CInt(fgBoxGridH) + 15)
            pbcLine.height = lmPbcLineHeight - 3 * (CInt(fgBoxGridH) + 15)
            pbcLnTotal.height = 4 * (CInt(fgBoxGridH) + 15)
            pbcLnTotal.Top = pbcLine.Top + pbcLine.height - 30
        Case imTabMap(TABRESEARCH)  '10     'Research
            'plcLine.Height = lmPlcLineHeight
            'pbcLine.Height = lmPbcLineHeight '+ 15
            'pbcLnTotal.Height = CInt(fgBoxGridH) + 30
            'pbcLnTotal.Top = pbcLine.Top + pbcLine.Height - 45
            plcLine.height = lmPlcLineHeight - 3 * (CInt(fgBoxGridH) + 15)
            pbcLine.height = lmPbcLineHeight - 3 * (CInt(fgBoxGridH) + 15)
            pbcLnTotal.height = 4 * (CInt(fgBoxGridH) + 15)
            pbcLnTotal.Top = pbcLine.Top + pbcLine.height - 30
    End Select
    vbcLines.height = pbcLine.height + pbcLnTotal.height
    pbcLine_Paint   'This will call mPaintLnTitle and set vbcLines.LargeChange
    
End Sub

Private Sub mResearchSubTitles()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim llFillColor As Long
    Dim ilLineCount As Integer

    imResearchTogglePriceLeft = tmLnCtrls(PRICEINDEX).fBoxW / 2
    imResearchTogglePriceWidth = tmLnCtrls(PRICEINDEX).fBoxW / 2
    If tscLine.Tabs.Count < 8 Then      '10 Then
        lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
        pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
        Exit Sub
    End If
    If imLnTotalType <> 2 Then
        lacPrice(0).height = tmLnCtrls(DPINDEX).fBoxY - 15
        pbcSumType(1).height = tmLnCtrls(DPINDEX).fBoxY - 15
        Exit Sub
    Else
        lacPrice(0).height = tmLnCtrls(SPOTSINDEX).fBoxY / 2 + 15
        pbcSumType(1).height = tmLnCtrls(SPOTSINDEX).fBoxY / 2 + 15
    End If
    llColor = pbcLine.ForeColor
    slFontName = pbcLine.FontName
    flFontSize = pbcLine.FontSize
    llFillColor = pbcLine.FillColor
    pbcLine.ForeColor = BLUE
    pbcLine.FontBold = False
    pbcLine.FontSize = 7
    pbcLine.FontName = "Arial"
    pbcLine.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    'pbcLine.CurrentX = tmLnCtrls(PRICEINDEX).fBoxX + fgBoxInsetX
    'pbcLine.CurrentY = tmLnCtrls(SPOTSINDEX).fBoxY / 2
    pbcLine.CurrentX = tmLnCtrls(SPOTSINDEX).fBoxX + 15  'fgBoxInsetX
    pbcLine.CurrentY = tmLnCtrls(SPOTSINDEX).fBoxY / 2 '+ (ilRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
    If imCppCpm = 2 Then
        pbcLine.Print "GRP"
    Else
        pbcLine.Print "GrImp"
    End If
    'pbcLine.CurrentX = tmLnCtrls(PRICEINDEX).fBoxX + fgBoxInsetX + tmLnCtrls(PRICEINDEX).fBoxW / 2
    'pbcLine.CurrentY = tmLnCtrls(SPOTSINDEX).fBoxY / 2
    pbcLine.CurrentX = tmLnCtrls(PRICEINDEX).fBoxX + fgBoxInsetX
    pbcLine.CurrentY = tmLnCtrls(SPOTSINDEX).fBoxY / 2
    If imCppCpm = 2 Then
        pbcLine.Print "CPP"
    Else
        pbcLine.Print "CPM"
    End If
    pbcLine.CurrentX = tmLnCtrls(PRICEINDEX).fBoxX + fgBoxInsetX + imResearchTogglePriceLeft
    pbcLine.CurrentY = tmLnCtrls(SPOTSINDEX).fBoxY / 2
    pbcLine.Print "Avg Price"
    pbcLine.FontSize = flFontSize
    pbcLine.FontName = slFontName
    pbcLine.FontSize = flFontSize
    pbcLine.ForeColor = llColor
    pbcLine.FontBold = True

End Sub

Private Function mDaypartGroupExist() As Boolean
    Dim ilRowNo As Integer
    Dim ilRdf As Integer
    Dim ilRdfCode As Integer
    Dim slLineType As String
    Dim ilLoop As Integer
    
    mDaypartGroupExist = False
    For ilRowNo = imLB1Or2 To UBound(smLnSave, LINEBOUNDINDEX) - 1 Step 1
        ilRdfCode = -1
        slLineType = mGetLineType(ilRowNo)
        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
            ilRdfCode = imLnSave(1, ilRowNo)
        Else
            For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                If StrComp(smLnSave(20, ilRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                    ilRdfCode = tgMRdf(ilLoop).iCode
                    Exit For
                End If
            Next ilLoop
        End If
        ilRdf = gBinarySearchRdf(ilRdfCode)
        If ilRdf <> -1 Then
            If tgMRdf(ilRdf).iDPGroupMnfCode > 0 Then
                mDaypartGroupExist = True
                Exit Function
            End If
        End If
    Next ilRowNo
End Function

Private Sub mReSetLinePrice()
    Dim ilClf As Integer
    Dim slStr As String
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        'If (mGetLineType(ilClf + 1) <> "H") Then    'And (tgUrf(0).sUseComputeCMC <> "I") Then
            mLnTotals ilClf + 1, imLnTotalType, PRICEINDEX, hmDrf, hmMnf, hmDpf, hmDef, hmRaf, tmRegionCode(), "N", imNoWkDays()
            mGetLnPriceInfo ilClf + 1, slStr, imLnTotalType, PRICEINDEX     'Formats Price within Show
        'End If
    Next ilClf
    mCntrTotal
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mAdjDates                       *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Adjust dates so dates are only *
'*                      days that have spots           *
'*                                                     *
'*******************************************************
Public Sub mAdjDates(ilFlightNo As Integer)
    Dim ilDay As Integer
    Dim slDate As String
    Dim ilAdjDates As Integer
    'This code works but ABC doesn't want this feature
    'If line dates are mon thur sun and only buying
    'wed and thur, this code will change the start
    'and end dates to be wed and thur respectively.
    '(multi weeks long are also changed)
    'Might want a table question for this feature
    'to be added later- set ilAdjDates
    ilAdjDates = False
    'Advance start date if required
    slDate = smAirSave(1, ilFlightNo)
    If ilAdjDates Then
        If (smAirSave(13, ilFlightNo) = "N") Or ((smAirSave(13, ilFlightNo) = "Y") And (smAirSave(13, ilFlightNo + 1) = "Y")) Then
            Do While gWeekDayStr(slDate) <> 0  '0=Monday
                slDate = gDecOneDay(slDate)
            Loop
            ilDay = 0
            Do While ((smAirSave(4 + ilDay, ilFlightNo) = "N") Or (smAirSave(4 + ilDay, ilFlightNo) = "") Or (smAirSave(4 + ilDay, ilFlightNo) = "0"))
                slDate = gIncOneDay(slDate)
                ilDay = ilDay + 1
                If ilDay > 6 Then
                    slDate = smAirSave(1, ilFlightNo)
                    Exit Do
                End If
            Loop
        End If
    End If
    smAirSave(1, ilFlightNo) = slDate
    slDate = gAddDayToDate(slDate)
    'gSetShow pbcAirWk, slDate, tmAirCtrls(WEEKSTARTDATEINDEX)
    'smAirShow(WEEKSTARTDATEINDEX, ilFlightNo) = tmAirCtrls(WEEKSTARTDATEINDEX).sShow
    'Decrement end date if required
    slDate = smAirSave(2, ilFlightNo)
    If ilAdjDates Then
        If (smAirSave(13, ilFlightNo) = "N") Or ((smAirSave(13, ilFlightNo) = "Y") And (smAirSave(13, ilFlightNo + 1) <> "Y")) Then
            Do While gWeekDayStr(slDate) <> 6  '6=Sunday
                slDate = gIncOneDay(slDate)
            Loop
            ilDay = 6
            Do While ((smAirSave(4 + ilDay, ilFlightNo) = "N") Or (smAirSave(4 + ilDay, ilFlightNo) = "") Or (smAirSave(4 + ilDay, ilFlightNo) = "0"))
                slDate = gDecOneDay(slDate)
                ilDay = ilDay - 1
                If ilDay < 0 Then
                    slDate = smAirSave(2, ilFlightNo)
                    Exit Do
                End If
            Loop
        End If
    End If
    smAirSave(2, ilFlightNo) = slDate
    slDate = gAddDayToDate(slDate)
    'gSetShow pbcAirWk, slDate, tmAirCtrls(WEEKENDDATEINDEX)
    'smAirShow(WEEKENDDATEINDEX, ilFlightNo) = tmAirCtrls(WEEKENDDATEINDEX).sShow
End Sub

Private Function mTscLineTabOk() As Boolean
    Dim ilClf As Integer
    Dim slLineType As String
    Dim ilDP As Integer
    Dim ilRdfCode As Integer
    
    mTscLineTabOk = True
    Select Case tscLine.SelectedItem.Index
        Case imTabMap(TABMULTIMEDIA)    '1  'Multi-Media
        'Case 2  'Digital
        Case imTabMap(TABNTR)   '3  'NTR
        Case imTabMap(TABAIRTIME) '4  'Air Time
            If ((Asc(tgSaf(0).sFeatures8) And PODAIRTIME) <> PODAIRTIME) And ((Asc(tgSaf(0).sFeatures8) And PODSPOTS) <> PODSPOTS) Then
                MsgBox "To enable Air Time and/or Podcast Spots, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                mTscLineTabOk = False
            End If
        Case imTabMap(TABPODCASTCPM) 'Podcast CPM
            If (Asc(tgSaf(0).sFeatures8) And PODADSERVER) <> PODADSERVER Then
                '10527
                'MsgBox "To enable Podcast Ad Server, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                MsgBox "To enable Digital, contact Counterpoint", vbOKOnly + vbExclamation, "Information"
                mTscLineTabOk = False
            Else
                If (UBound(tgFBSbf) > LBound(tgFBSbf)) Then
                    '10527
'                    MsgBox "Mixture of Ad Server and Installment Bill not Allowed", vbOKOnly + vbExclamation, "Information"
                    MsgBox "Mixture of Digital and Installment Bill not Allowed", vbOKOnly + vbExclamation, "Information"
                    mTscLineTabOk = False
                End If
            End If
        Case imTabMap(TABMERCH) '5  'Merchandising
        Case imTabMap(TABPROMO) '6  'Promotional
        Case imTabMap(TABINSTALL)   '7  'Installment
            If (grdCPMBuy.TextMatrix(grdCPMBuy.FixedRows, CPMVEHICLE) <> "") And (grdCPMBuy.TextMatrix(grdCPMBuy.FixedRows, CPMDAYPART) <> "") Then
                '10527
               ' MsgBox "Mixture of Ad Server and Installment Bill not Allowed", vbOKOnly + vbExclamation, "Information"
                MsgBox "Mixture of Digital and Installment Bill not Allowed", vbOKOnly + vbExclamation, "Information"
                mTscLineTabOk = False
            End If
        Case imTabMap(TABAVAIL) '8  'Avails
            'TTP 10494 - Contract screen: advanced avails tabs hanging when view mode of contracts/proposals with multiple versions
            'If cbcDifference.ListCount > 0 Then
            '    mTscLineTabOk = False
            'End If
        Case imTabMap(TABPROTECTION)    '9  'Protection
            'If cbcDifference.ListCount > 0 Then
            '    mTscLineTabOk = False
            'End If
        Case imTabMap(TABRESEARCH)  '10 'Research
            'If cbcDifference.ListCount > 0 Then
            '    mTscLineTabOk = False
            'Else
                'Check that all lines created, if not disallow
                ilClf = UBound(tgClfCntr) - 1
                If Trim$(smLnSave(1, UBound(tgClfCntr) + 1)) <> "" Then
                    ilClf = UBound(tgClfCntr)
                End If
                If ilClf < 0 Then
                    ilClf = 0
                End If
                slLineType = mGetLineType(ilClf + 1, False, True)
                If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
                    ilRdfCode = imLnSave(1, ilClf + 1)
                Else
                    ilRdfCode = 0
                    For ilDP = LBound(tgPackDP) To UBound(tgPackDP) - 1 Step 1
                        If StrComp(Trim$(smLnSave(20, ilClf + 1)), Trim$(tgPackDP(ilDP).sName), 1) = 0 Then
                            If tgPackDP(ilDP).iCode <> 0 Then
                                ilRdfCode = tgPackDP(ilDP).iCode
                                Exit For
                            End If
                        End If
                    Next ilDP
                End If
                '                 spots defined            daypart defined          spot length                       total price
                If (tgClfCntr(ilClf).iFirstCff < 0) Or (ilRdfCode <= 0) Or (smLnSave(16, ilClf + 1) = "") Or (smLnSave(18, ilClf + 1) = "") Then
                    mTscLineTabOk = False
                End If
            'End If
    End Select
End Function

'L.Bianchi
Public Sub mSetCpmInfo(Optional ilSet As Integer)
    Dim slStr As String
    Dim slStr1 As String
    Dim slGrImp As String
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim ilCpm As Currency
    lacTotalCpmInfo.Visible = False
    lacAdServerCpmInfo.Visible = False
    slStr = gDivStr(gMulStr(Trim$(Contract.edcLineNo(4).Text), "1000.00"), Trim$(Contract.edcLineNo(2).Text))
    slStr1 = UCase(lacAudTotals.Caption)
    ilPos1 = InStr(1, slStr1, "GRIMP:")
    ilPos2 = InStr(1, slStr1, "CPP:")
    slGrImp = Trim$(Mid(slStr1, ilPos1 + 6, ilPos2 - (ilPos1 + 6)))
    If smTotalDollars <> "0.00" And slStr <> ".00" And slGrImp <> "" And slGrImp <> "0" Then
        If tgSpf.sSAudData = "T" Then
            slGrImp = gMulStr(slGrImp, "1000")
        ElseIf tgSpf.sSAudData = "H" Then
            slGrImp = gMulStr(slGrImp, "100")
        ElseIf tgSpf.sSAudData = "N" Then
            slGrImp = gMulStr(slGrImp, "10")
        End If
        
        ilCpm = (1000 * CCur(smTotalDollars)) / (CCur(slGrImp) + CCur(Trim$(Contract.edcLineNo(2).Text)))
        slStr1 = gRoundStr(CStr(ilCpm), slStr1, 2)
        lacTotalCpmInfo.Caption = "Total CPM: " & slStr1
        If ilSet Then
            lacTotalCpmInfo.ForeColor = Red
        Else
            lacTotalCpmInfo.ForeColor = BLACK
        End If
        '10527
        'Contract.lacAdServerCpmInfo.Caption = "Ad Server CPM: " & slStr
        Contract.lacAdServerCpmInfo.Caption = "Digital CPM: " & slStr
        lacTotalCpmInfo.Move Contract.lacPayInfo.Left + Contract.lacPayInfo.Width - Contract.lacTotalCpmInfo.Width, Contract.lacPayInfo.Top + Contract.lacPayInfo.height + 15
        Contract.lacAdServerCpmInfo.Move lacTotalCpmInfo.Left - 15 - Contract.lacAdServerCpmInfo.Width, Contract.lacPayInfo.Top + Contract.lacPayInfo.height + 15
        Contract.lacAudTotals.Move Contract.lacAdServerCpmInfo.Left - 15 - Contract.lacAudTotals.Width, Contract.lacPayInfo.Top + Contract.lacPayInfo.height + 15
        Contract.lacAdServerCpmInfo.Visible = True
        lacTotalCpmInfo.Visible = True
    Else
        If slStr = ".00" Then
            Contract.lacAudTotals.Move Contract.lacPayInfo.Left + Contract.lacPayInfo.Width - Contract.lacAudTotals.Width, Contract.lacPayInfo.Top + Contract.lacPayInfo.height + 15 'lacAudTotals.Top + llAdjTop '- 30
        Else
            '10527
            'Contract.lacAdServerCpmInfo.Caption = "Ad Server CPM: " & slStr
            Contract.lacAdServerCpmInfo.Caption = "Digital CPM: " & slStr
            Contract.lacAdServerCpmInfo.Move Contract.lacPayInfo.Left + Contract.lacPayInfo.Width - Contract.lacAdServerCpmInfo.Width, Contract.lacPayInfo.Top + Contract.lacPayInfo.height + 15
            Contract.lacAdServerCpmInfo.Visible = True
            Contract.lacAudTotals.Move Contract.lacAdServerCpmInfo.Left - 15 - Contract.lacAudTotals.Width, Contract.lacPayInfo.Top + Contract.lacPayInfo.height + 15
        End If
    End If
    
    If (sgCntrScreen = "Orders") Then
         lacTotalCpmInfo.Visible = False
        lacAdServerCpmInfo.Visible = False
    End If
End Sub

Private Sub mSetActOneDGInfo(ilLn As Integer)
    smDGSave(15) = smLnSave(29, ilLn)
    imDGSave(8) = imLnSave(32, ilLn)
    imDGSave(9) = imLnSave(33, ilLn)
    imDGSave(10) = imLnSave(34, ilLn)
    imDGSave(11) = imLnSave(35, ilLn)

End Sub

Private Sub mHandleSetFocusPicBox(myPicBox As PictureBox)
    '10423
    On Error Resume Next
    myPicBox.SetFocus
End Sub

Private Sub mHandleSetFocusTextBox(myTextBox As TextBox)
    '10423
    On Error Resume Next
    myTextBox.SetFocus
End Sub


