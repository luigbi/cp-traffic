Attribute VB_Name = "CONTRACTSUBS"

' Copyright 1993 Counterpoint Software, Inc. All rights reserved.
' Proprietary Software, Do not copy
'
' File Name: Contract.BAS
'
' Release: 1.0
'
' Description:
'   This file contains the extra record definitions for contracts
Option Explicit
Public lmLastWkDateAdded As Long
Public imLastLnDateAdded  As Integer
Public igTabMapIndex As Integer '0=Air time tab; 1= Podcast CPM tab

Public hmPassChf As Integer
Public igRepNetChgAllowed As Integer
'10/27/14: 1 or 2 place rating
Public smCntr1or2PlaceRating As String
Dim tmChf As CHF    'Used when updating only to eliminate conflict
Dim tmChfSrchKey As LONGKEY0  'CHF key record image
Dim tmChfSrchKey1 As CHFKEY1  'CHF key record image (contract #)
Dim tmClfSrchKey As CLFKEY0  'CLF key record image
Public tmRcf As RCF
Public tmDiffChf As CHF
Public tmDiffClf() As CLFLIST
Public tmDiffCff() As CFFLIST
Public tmDiffCgf() As CGFLIST
Public tmDiffMsf() As MSFLIST
Public tmDiffMgf() As MGFLIST
Public smSyncDate As String
Public smSyncTime As String

Public tmVehGp6Code() As SORTCODE
Public smVehGp6CodeTag As String
Public tmProdCode() As SORTCODE
Public smProdCodeTag As String

Public bmLnChgRegenResearch As Boolean

Public lmMajorityPopulation As Long
Public bmMixturePopulationMsgShown As Boolean

'Avail Summary File
Dim tmAsf As ASF
Dim imAsfRecLen As Integer        'Asf record length
Dim tmRUISrchKey As INTKEY0
'Spot file
Dim tmSdf As SDF            'SDF record image
Dim tmSdfSrchKey0 As SDFKEY0 'SDF key record image (agency)
Dim tmSdfSrchKey2 As SDFKEY2 'SDF key record image (advt)
Dim tmSdfSrchKey3 As LONGKEY0 'SDF key record image (code)
Dim imSdfRecLen As Integer     'SDF record length
Dim tmSmf As SMF
Dim tmSmfSrchKey0 As SMFKEY0 'SDF key record image (agency)
Dim imSmfRecLen As Integer     'SDF record length

Dim tmSdfExtSort() As SDFEXTSORT
Dim tmSdfExt() As SDFEXT

Dim tmMnf As MNF            'MNF record image
Dim tmMnfSrchKey As INTKEY0 'MNF key record image
Dim imMnfRecLen As Integer     'MNF record length
'Delete
Dim tmDsf As DSF            'DSF record image
Dim imDsfRecLen As Integer      'DSF record length
'Agency
Dim tmAgf As AGF            'AGF record image
Dim tmAgfSrchKey As INTKEY0 'AGF key record image
Dim imAgfRecLen As Integer     'AGF record length
Dim tmAdfSrchKey As INTKEY0 'ADF key record image
Dim tmCxf As CXF            'CXF record image
Dim tmCxfSrchKey As LONGKEY0  'CXF key record image
Dim tmSbf As SBF
Dim imSbfRecLen As Integer
Dim tmSbfSrchKey0 As SBFKEY0    'SBF key record image
Dim tmSbfSrchKey1 As LONGKEY0
Dim tmCSbf() As SBF     'Used when swapping
Dim tmPSbf() As SBF     'Used when swapping
'MultiMedia
Dim tmMsf As MSF
Dim imMsfRecLen As Integer
Dim tmMsfSrchKey0 As LONGKEY0
Dim tmMsfSrchKey2 As MSFKEY2
Dim tmMgf As MGF
Dim imMgfRecLen As Integer     'CGF record length
Dim tmMgfSrchKey1 As MGFKEY1

Dim tmCMsf() As MSF     'Used when swapping
Dim tmPMsf() As MSF     'Used when swapping
Dim tmVefSrchKey As INTKEY0 'VEF key record image
Dim tmVefSrchKey3 As VEFKEY3 'VEF key record image
Dim tmRvf As RVF
Dim tmRvfSrchKey1 As RVFKEY1    'Advertiser
Dim imRvfRecLen As Integer
Dim tmRvfSrchKey2 As LONGKEY0
Dim tmRvfSrchKey4 As RVFKEY4

Dim tmPvf As PVF
Dim tmTPvf As PVF
Dim tmPvfSrchKey As LONGKEY0
Dim imPvfRecLen As Integer

Dim tmGhf As GHF        'GHF record image
Dim tmGhfSrchKey1 As GHFKEY1    'GHF key record image
Dim imGhfRecLen As Integer        'GHF record length

Dim tmGsf() As GSF        'GSF record image
Dim tmGsfSrchKey1 As GSFKEY1    'GSF key record image
Dim imGsfRecLen As Integer        'GSF record length

'Spot summary
'Dim hmSsf As Integer        'Spot summary file handle
Dim tmSsf As SSF               'SSF record image
Dim tmSsfSrchKey As SSFKEY0 'SSF key record image
Dim tmSsfSrchKey2 As SSFKEY2 'SSF key record image
Dim imSsfRecLen As Integer  'SSF record length
Dim tmProg As PROGRAMSS
Dim tmAvail As AVAILSS
Dim tmSpot As CSPOTSS
'Dim tmBBSpot As BBSPOTSS
'Dim tmProgTest As PROGRAMSS
'Dim tmAvailTest As AVAILSS
'Dim tmSpotTest As CSPOTSS
'Dim tmBBSpotTest As BBSPOTSS
'Library
Dim tmLcf As LCF
Dim imLcfRecLen As Integer
Dim tmLcfSrchKey As LCFKEY0     'LCF key record image
'Public tmRec As LPOPREC
'week index was 1 to 53
Type WKINFO
    iNextIndex As Integer
    lSpotCount(0 To 52) As Long  'Spot count by week
    iWkType(0 To 52) As Integer     '0=Daily; 1=Weekly
    iAvail(0 To 52) As Integer
    lActPrice(0 To 52) As Long
    lRCPrice(0 To 52) As Long
    lAvgAud(0 To 52) As Long
    lGRP(0 To 52) As Long
    lGrImp(0 To 52) As Long
    lPopEst(0 To 52) As Long
    lHSStartDate As Long
End Type

Type PkWkInfo
    lDate As Long
    lSpotCount As Long
    lActPrice As Long
    lAvgAud As Long
    lGRP As Long
    lGrImp As Long
    lPopEst As Long
End Type
Type WKAUD
    iLineNo As Integer
    lWkDate As Long
    lSpotCount As Long
    lSpotPrice As Long
    lAvgAud As Long
    lPop As Long
    lPopEst As Long
End Type
Type WKSUM
    lWkDate As Long
    lSpots As Long
    lGRP As Long
    lGrImp As Long
    lCPM As Long
    lCPP As Long
    'lCost As Long
    dCost As Double 'TTP 10439 - Rerate 21,000,000
    lAvgAud As Long
End Type
Type PBDPGEN
    sKey As String * 220
    iRdfCode As Integer
    sVehName As String * 50     'GpSort|VehSort|VehName
    sDPName As String * 100
    iVefCode As Integer
    lNoSpots As Long
    lAvgPrice As Long
    iAvgRating As Integer
    lAvgAud As Long
    lCPP As Long
    lCPM As Long
    lPop As Long
    iChk As Integer 'False=Not selected; True
    iStdPkg As Integer  'False=Not a std pkage; True=Std Package
    lGrImp As Long  'Gross Impression for Std Pkg
    lGRP As Long    'GRP for std pkg
    lPopEst As Long
    'lTCost As Long
    dTCost As Double 'TTP 10439 - Rerate 21,000,000
    lTNoSpots As Long
    iDelFlag As Integer 'Used in mPopRBRates to determine if item still Ok
    lOrigAvgPrice As Long   'Used to adjust hidden line prices
    iSpotChg As Integer     'True if spot value set in grid by user
    lMixStartDate As Long
    iMixSpotIndex As Integer
    iAudSet As Integer      'True is audience set; false if audience needs to be computed
    iOvDays(0 To 6) As Integer  'Override days
    sOvStartTime As String * 11 'Override start time
    sOvEndTime As String * 11   'Override end time
End Type
Public imRBDnfCode() As Integer
Type PACKVEH
    sKey As String * 50
    sSortChar As String * 1
    sName As String * 40
    'iState As Integer   '0=New; 1=Old
    iCode As Integer
End Type
Type PACKDP
    sKey As String * 100
    sName As String * 20
    'iState As Integer   '0=New; 1=Old
    iCode As Integer
End Type
Type PACKLN
    sType As String * 1 'Package Type (A=Aired {Parent}; O=Ordered {Parent}; H=Hidden {Child})
    iLineNo As Integer  'Line number of line
    iIndex As Integer   'First Child index if Type = A or O; Next Child Index if Type = C
    sVehName As String * 40
    sDPName As String * 20
    iMnfVehGp3Mkt As Integer
    'iAlter As Integer
    sAlter As String * 1    'Allowed to alter hidden (N=No; Y=Yes; C=Comment only)
    sAlterName As String * 1    'Allowed to alter pack name (N=No; Y=Yes)
    iStdPkg As Integer  'True = standard package; False = Dynamic package
    sSource As String * 1   'A=Air Time/Podacst Spots; C=Podcast CPM
End Type
Type RVFMPREC
    iStatus As Integer  '0=Match not Found; 1=Match found and updated
    sCashTrade As String * 1
    iVefCode As Integer
    iTranDate(0 To 1) As Integer
    sAmount As String * 12
    lRecPos As Long
    iHandle As Integer  '0=Rvf; 1=Phf
    lCode As Long
End Type
Type RATEDGP
    iMnfVehGp5Rsch As Integer
    sRated As String * 1
End Type
Type FLWKINFO
    lDate As Long   'Week date
    iSpots As Integer   'Week number of spots
    iStatus As Integer  '-1=deleted; 1=added
End Type
Type RCSORT
    iRcfCode As Integer
    lStartDate As Long
    lRifIndex As Long
End Type
Type SBFMAP
    sType As String * 1
    lOldSbdCode As Long
    lNewSbdCode As Long
    iFound As Integer
End Type

Type PROPGAMEINFO
    lCntrNo As Long
    iGameNo As Integer
    i30NoSpotsOrdered As Integer
    i30NoSpotsProp As Integer
    i60NoSpotsOrdered As Integer
    i60NoSpotsProp As Integer
    iMnfPotnType As Integer
    iCntRevNo As Integer
    iPropVer As Integer
End Type

Type MEDIAINVINFO
    lCntrNo As Long
    lChfCode As Long
    iIhfCode As Integer
    iGameNo As Integer
    iNoUnitsOrdered As Integer
    iNoUnitsProp As Integer
    iMnfPotnType As Integer
    iCntRevNo As Integer
    iPropVer As Integer
End Type

'Rate Bar
Public smPowerCaption As String
Public imPBRdfCode() As Integer
Public tmPB1DP() As PBDPGEN  'Selected vehicle with unique Rdf
Public tmRB1DP() As PBDPGEN  'Used to save the base values from tmPB1DP when used with Rate Bar
Public tmPBDPGen() As PBDPGEN 'Daypart selected
Public imRBMixedSpots As Integer    'True indicates that spots very by week
Public smRBMixDatesSpots() As String
Public smPBDPStamp As String
Public smChkPBDPStamp As String
Public smChkPBVehStamp As String
Public smChkRBLenStamp As String
Public imRBView As Integer '0=Specification; 1= Vehicle Summary; 2= Daypart Summary
Public tmSvChk() As FLWKINFO   'Une iSpot for iRdfCode and iStatus for iVefCode of tmPB1DP Chk = true
'Dim imAllowedDays(1 To 7) As Integer    'Composite of allowed days from program
Dim imAllowedDays(0 To 6) As Integer    'Composite of allowed days from program
'Package vehicle file
Dim lmPvfCode() As Long
Dim imPvfSpotAdj() As Integer
Public tmRvfMPRec() As RVFMPREC
Public smOrigNTRDefined As String
Public smOrigStatus As String
Public smHdSave(0 To 3) As String   '1=Gross; 2=Guar; 3=Prod Tag

Global Const FIELDBOUNDINDEX = 1
Global Const LINEBOUNDINDEX = 2
Public smLnSave() As String    'Values saved for lines(1= Vehicle; 2=StartTime or # Games; 3=End Time or # Game spots ordered;
                            ' 4= Break #; 5= Position #; 6=# spots/wk; 7-13=Daily spots; 14=Start Date
                            ' 15= End Date; 16= spot length; 17= Price/spot; 18=Total Price; 19=D.B. Index;
                            '20=Daypart name for Package; 21=New week price; 22=New week Type; 23=Total number of spots
                            '24 = Acquisition Cost; 25 = Preferred Start Time; 26 = Preferred End Time; 27 = Allocation; 28=Region Name
Public imLnSave() As Integer   'Values saved for lines( 1=RdfCode; 2=Buy Type Index; 3=BB List Index; 4=Override Index (0=N/A,
                            '1=Time, 2=Break #, 3=Break & Position);
                            ' 5=Extra Spot Index; 6=High Priority Index(0=Yes; 1=No); 7=Price Type List Index;
                            ' 8=imDGSave(2):Daily(0)/Weekly(1)/Daily %(2)/Weekly%(3); 9=All weeks (True or False)
                            '10=Week Info Index (WKINFO); 11=not used; 12-18=imOvDays(0=True; 1=False); 19 = Rank (Priority)
                            '20=BB Open Length; 21 = BB Close Length;  22 = 1 St Position (0=True; 1=False);
                            '23 = Solo Avail (0=True; 1=False); 24-30 = Preferred Days (0=True; 1=False); 31=Live Copy(0=Live Cmml; 1=Rec Cmml; 2=Live Promo; 3=Rec Promo)
Public imOrigPkDailySpots(0 To 6) As Integer
Dim smSvLnSave() As String
Dim imSvLnSave() As Integer
Public imLB1Or2 As Integer
Public smLnShow() As String    'Show values for lines
Public smAirSave() As String   'Values saved for lines, Index:1=Start Date, 2= End date, 3=Spots/Wk,
                            '4-10=Daily, 11=Price; 12=Rate Card Price; 13=Split week;
                            'For mSetDate to determine if flights can be combined split must be at end
Public imAirSave() As Integer  'Index:1=Air(0=Yes; 1=No); 2=Daily(0)/Weekly(1)
Public smAirShow() As String   'Show values for lines
Public smLnSumShow() As String  'Line Summary Table
Public smWkSumShow() As String  'Week Summary Show
Public smQSumShow() As String   'Quarterly Summary
Public smVSumShow() As String   'Quarterly Summary
Public smDPSumShow() As String   'Quarterly Summary(1=Daypart Name;2-GRP;3=%GRP;4=GrImp;5=%GrImp;6=CPM;7=Avg Price;9=Total Cost;10=LnRowNo;11=LineType;12=Daypart selected(F or T)
Public smVDSumShow() As String   'Quarterly Summary
Public smOVDSumValue() As String
Public imOVDGenerated As Integer 'True=Orig VD generated; False=Need to create Orig VD
Public smTSumShow() As String 'Total Sum
Public smTOVDSumValue() As String
Public imToggleCPPCPM As Integer    '0=CPP; 1=CPM
Public tmWkInfo() As WKINFO    'Bucket values for weeks
Public tmPkWkInfo() As WKINFO    'Bucket values for weeks
Public tmFlWkInfo() As FLWKINFO 'Air flight week information
Public smLnComment() As String 'Line Comments
Public smLnInitComment() As String 'Initial Line Comments
Public imLnCommShowOn() As Integer 'Right Index: Line
                                'Left Index: 0 on Proposal(0=Y, 1=No); 1 Order (0=Y, 1=N); 2 Spots (0=Y, 1=N)
                                            '3 Invoices (0=Y, 1=N); 4 Insertion (0=Yes; 1=No)
Public imLnInitCommShowOn() As Integer 'Right Index: 0=Merch; 1=Promotion; 2=internal; 3=Cancel; 4=Change; 5=Other
                                    'Left Index: 0 on Proposal(0=Y, 1=No); 1 Order (0=Y, 1=N); 2 Spots (0=Y, 1=N)
                                            '3 Invoices (0=Y, 1=N); 4 Insertion

Public smCPMComment() As String 'CPM Row Comments
Public smCPMInitComment() As String 'Initial CPM Comments
Public imCPMCommShowOn() As Integer 'Right Index: Row
                                'Left Index: 0 on Proposal(0=Y, 1=No); 1 Order (0=Y, 1=N); 2 Spots (0=Y, 1=N)
                                            '3 Invoices (0=Y, 1=N); 4 Insertion (0=Yes; 1=No)
Public imCPMInitCommShowOn() As Integer 'Right Index: Row
                                    'Left Index: 0 on Proposal(0=Y, 1=No); 1 Order (0=Y, 1=N); 2 Spots (0=Y, 1=N)
                                            '3 Invoices (0=Y, 1=N); 4 Insertion
Public imBypassEPriceComp As Integer    'Bypass Equal Price Computation- Only set in SaveRec
Public imAllowCashTradeChgs As Integer 'True = Allow the percentage of cash/trade to be altered
Public smRvfTypeI_Adj As String          'Sum of AN and W- for Install contracts (rvfType = "I")
Public smRvfTypeA_Adj As String          'Sum of AN and W- for Install contracts (rvfType = "A")
Public imLastCffUsed As Integer
Public imShowDiff As Integer
Public hmCtrPrtChf As Integer
Public hmCtrPrtClf As Integer
Public hmCtrPrtCff As Integer
Public smSnapshot As String * 1     'S = snapshot (not saved, P = Snapshot from previous version, C = snapshot from current version,
                    'blank = printed from Reports
Public tmStep3Code() As SORTCODE
Public smStep3CodeTag As String

Public tmVehicleCode() As SORTCODE
Public smVehicleCodeTag As String

Public tmVehicleCode1() As SORTCODE
Public smVehicleCodeTag1 As String

Public tmVehicleCode2() As SORTCODE
Public smVehicleCodeTag2 As String

Public tmCntAdvertiser() As SORTCODE
Public smCntAdvertiserTag As String

Public tmCntAgency() As SORTCODE
Public smCntAgencyTag As String

Public tmCntSalesperson() As SORTCODE
Public smCntSalespersonTag As String

Public tmCntRateCard() As SORTCODE
Public smCntRateCardTag As String

Public tmCntBuyerCode() As SORTCODE
Public smCntBuyerCodeTag As String

Public tmRCSort() As RCSORT     'Rate card sort by Start Date
'Public tmVehGp5Code() As SORTCODE
'Public smVehGp5CodeTag As String
Public tmRatedGp() As RATEDGP
'Public tmVehGp6Code() As SORTCODE
'Public smVehGp6CodeTag As String
Public tmCommentCode0() As SORTCODE
Public tmCommentCode1() As SORTCODE
Public tmCommentCode2() As SORTCODE
Public tmCommentCode3() As SORTCODE
Public tmCommentCode4() As SORTCODE
Public tmCommentCode5() As SORTCODE
Public tmCommentCode6() As SORTCODE
Public tmCommentCode7() As SORTCODE
Public tmShareBudgetCode0() As SORTCODE
Public tmShareBudgetCode1() As SORTCODE
Public smShareBudgetCodeTag(0 To 1) As String
Public tmRevSetCode0() As SORTCODE
Public tmRevSetCode1() As SORTCODE
Public tmRevSetCode2() As SORTCODE
Public tmRevSetCode3() As SORTCODE
Public tmRevSetCode4() As SORTCODE
Public smRevSetCodeTag(0 To 4) As String

Public imLBCTCtrls As Integer
'Contract Header Field Areas
'Public tmHdCtrls(1 To 32)  As FIELDAREA
'Public tmHdCtrls(0 To 32)  As FIELDAREA
'10910-show 10967-show
Public tmHdCtrls(0 To 34)  As FIELDAREA
'Public tmNoCtrls(1 To 7) As FIELDAREA
Public tmNoCtrls(0 To 7) As FIELDAREA
Public tmSPCtrls() As FIELDAREA  'was 1 to 20
'Public tmDmCtrls(1 To 10) As FIELDAREA
Public tmDmCtrls(0 To 10) As FIELDAREA
'Public tmCECtrls(1 To 5) As FIELDAREA
Public tmCECtrls(0 To 5) As FIELDAREA
'Public tmPTCtrls(1 To 2) As FIELDAREA
Public tmPTCtrls(0 To 2) As FIELDAREA
'Public tmSBCtrls(1 To 14) As FIELDAREA
Public tmSBCtrls(0 To 14) As FIELDAREA
'Public tmRSCtrls(1 To 5) As FIELDAREA
Public tmRSCtrls(0 To 5) As FIELDAREA
Public lmChfRecPos As Long
Public lmCntrChfCode As Long
'Contract Line Field Areas
'Public tmLnCtrls(1 To 21)  As FIELDAREA
Public tmLnCtrls(0 To 21)  As FIELDAREA
'Public tmOV1Ctrls(1 To 16) As FIELDAREA
'Public tmOV1Ctrls(0 To 16) As FIELDAREA
Public tmOV1Ctrls(0 To 21) As FIELDAREA
Public tmOV1ACT1Info As FIELDAREA
'Public tmOV2Ctrls(1 To 14) As FIELDAREA
Public tmOV2Ctrls(0 To 14) As FIELDAREA
'Public tmAirCtrls(1 To 14) As FIELDAREA
Public tmAirCtrls(0 To 14) As FIELDAREA
'Public tmFTCtrls(1 To 3) As FIELDAREA 'Index: 1=Number of air weeks; 2=# spots; 3=cost
Public tmFTCtrls(0 To 3) As FIELDAREA 'Index: 1=Number of air weeks; 2=# spots; 3=cost
'Public tmDFTCtrls(1 To 11) As FIELDAREA     'Demo flight totals area
Public tmDFTCtrls(0 To 11) As FIELDAREA     'Demo flight totals area
'Public tmLnTCtrls(1 To 15)  As FIELDAREA   'Line totals
Public tmLnTCtrls(0 To 15)  As FIELDAREA   'Line totals
'Public tmLnDCtrls(1 To 2)  As FIELDAREA   'Line Dates
Public tmLnDCtrls(0 To 2)  As FIELDAREA   'Line Dates
'Public tmDailyCtrls(1 To 7) As FIELDAREA
Public tmDailyCtrls(0 To 7) As FIELDAREA
'Public tmSumCtrls(1 To 11) As FIELDAREA
Public tmSumCtrls(0 To 11) As FIELDAREA
Public imHdBoxNo As Integer    'Current CHF Box
Public imNoBoxNo As Integer
Public imSPBoxNo As Integer
Public imDMBoxNo As Integer
Public imCEBoxNo As Integer    'Current CHF Box
Public imLnBoxNo As Integer    'Current CLF Box
Public imOVBoxNo As Integer
Public imOVType As Integer      '1=OV1;2=OV2
Public imAirBoxNo As Integer    'Current CFF Box
Public imLnRowNo As Integer    'Current line row number
Public imMoveLnRowNo As Integer
Public imSvLnRowNo As Integer    'Save Current line row number when starting flight box
Public imAirRowNo As Integer    'Current Date row number
Public imPTBoxNo As Integer    'Pct Trade Box
Public imRSBoxNo As Integer
Public imSBBoxNo As Integer
Public imDBRowNo As Integer
Public imDBBoxNo As Integer
Public imDB0BoxNo As Integer
Public imDemoMap(0 To 3) As Integer  'Map lbcDBDemo to lbcDemo index
'Demo Bar
'Public tmDBCtrls(1 To 12) As FIELDAREA     'Demo bar top area
Public tmDBCtrls(0 To 12) As FIELDAREA     'Demo bar top area
'Public tmDBSCCtrls(1 To 13) As FIELDAREA   'Demo bar spot count line
Public tmDBSCCtrls(0 To 13) As FIELDAREA   'Demo bar spot count line
'Public tmDBAvCtrls(1 To 13) As FIELDAREA   'Demo bar avail line
Public tmDBAvCtrls(0 To 13) As FIELDAREA   'Demo bar avail line
'Public tmDBAPCtrls(1 To 13) As FIELDAREA   'Demo bar Actual Price
Public tmDBAPCtrls(0 To 13) As FIELDAREA   'Demo bar Actual Price
'Public tmDBRCPCtrls(1 To 13) As FIELDAREA  'Demo bar Rate Card Price
Public tmDBRCPCtrls(0 To 13) As FIELDAREA  'Demo bar Rate Card Price
'Public tmDBRCtrls(1 To 13) As FIELDAREA  'Demo bar Ratios Price
Public tmDBRCtrls(0 To 13) As FIELDAREA  'Demo bar Ratios Price
'Public tmDBGRPCtrls(1 To 13) As FIELDAREA  'Demo bar GRP
Public tmDBGRPCtrls(0 To 13) As FIELDAREA  'Demo bar GRP
'Public tmDBGICtrls(1 To 13) As FIELDAREA   'Demo bar GrImp
Public tmDBGICtrls(0 To 13) As FIELDAREA   'Demo bar GrImp
'Public tmDBAvgCtrls(1 To 2) As FIELDAREA   'Avg Rating; Avg Audience
Public tmDBAvgCtrls(0 To 2) As FIELDAREA   'Avg Rating; Avg Audience
Public imDBRatio As Integer    '0=Actual/Rate Card; 1=Old Actual/Actual
Public imDBTotals As Integer   '0=Line Totals; 1=Contract Totals; 2=Vehicle Total; 3=Daypart Total; 4=Package Totals
Public imSumType As Integer '0=Hidden Line; 1=Package lines
'Override
Public imOvDays(0 To 6) As Integer  '0=Yes; 0=No; 2=Leave (Mix)
Public imInitOvDays(0 To 6) As Integer  '0=Yes; 1=No; 2=Leave (Mix)
Public imSvOvDays(0 To 6) As Integer
'Preferred
Public imSvOv2Days(0 To 6) As Integer
'Hot Spots
'Public lmLnHotSpot(1 To 4, 1 To 4) As Integer
Public lmLnHotSpot(0 To 4, 0 To 4) As Long   '0 not used
'Public lmDBHotSpot(1 To 4, 1 To 4) As Integer
Public lmDBHotSpot(0 To 4, 0 To 4) As Long
Public imInHotSpot As Integer      'True if within Hot Spot
Public imHSStartWkNo As Integer    'Start Week Number of dates
Public imHSEndWkNo As Integer      'End Week number of dates
Public imHSCurWkNo As Integer      'Current Left most week number
Public lmHSStartDate As Long
Public imSvHSStartWkNo As Integer    'Start Week Number of dates
Public imSvHSEndWkNo As Integer      'End Week number of dates
Public imSvHSCurWkNo As Integer      'Current Left most week number
Public lmSvHSStartDate As Long
Public smSlspName(0 To 9) As String    'Salesperson name, saved to determine if changed
Public smInitSlspName(0 To 9) As String    'Salesperson name, saved to determine if changed
Public imSlspIndex(0 To 9) As Integer    'Index for lbc----, saved to determine if changed
Public smSlspField2(0 To 9) As String    'Index for lbc----, saved to determine if changed
Public smInitSlspField2(0 To 9) As String    'Index for lbc----, saved to determine if changed
Public smSlspField3(0 To 9) As String    'Index for lbc----, saved to determine if changed
Public smInitSlspField3(0 To 9) As String    'Index for lbc----, saved to determine if changed
Public smSlspField4(0 To 9) As String    'Index for lbc----, saved to determine if changed
Public smInitSlspField4(0 To 9) As String    'Index for lbc----, saved to determine if changed
'Global smSlspField5(0 To 9) As String    'Index for lbc----, saved to determine if changed
'Global smInitSlspField5(0 To 9) As String    'Index for lbc----, saved to determine if changed
Public smComp(0 To 1) As String    'Competitive name, saved to determine if changed
Public smComp0 As String
Public smComp1 As String
Public smExcl(0 To 1) As String      'Exclusion name, saved to determine if changed
Public smBusCat As String          'Business categories, saved to determine if changed
Public smSvDemo(0 To 3) As String  'Demo, saved to determine if changed
Public smSvTarget(0 To 3) As String  'Demo targets, saved to determine if changed
Public smTarget(0 To 3) As String    'Demo targets
Public smOrigBuyer As String
Public smBuyer As String
Public imShareBudgetIndex(0 To 6) As Integer    'Index for lbc----, saved to determine if changed
Public smShareBudget(0 To 6) As String     'Share Budget name, saved to determine if changed
Public smInitShareBudget(0 To 6) As String     'Share Budget name, saved to determine if changed
Public smShareBudgetPct(0 To 6) As String    '%
Public smInitShareBudgetPct(0 To 6) As String    '%, saved to determine if changed
Public smRevSet(0 To 4) As String     'Revenue sets name, saved to determine if changed
Public smRevSetName(0 To 4) As String     'Revenue set names, shown at top of input area
Public smRateCard As String    'Rate Card name, saved to determine if changed
Public smPctTrade As String
Public smComment(0 To 5) As String 'Index: 0=Merch; 1=Promotion; 2=internal; 3=Cancel; 4=Change; 5=Other
Public smInitComment(0 To 5) As String 'Index: 0=Merch; 1=Promotion; 2=internal; 3=Cancel; 4=Change; 5=Other
Public imCommShowOn(0 To 5, 0 To 4) As Integer 'Left Index: 0=Merch; 1=Promotion; 2=internal; 3=Cancel; 4=Change; 5=Other
                                            'Right Index: 0 on Proposal(0=Y, 1=No); 1 Order (0=Y, 1=N); 2 Spots (0=Y, 1=N)
                                            '3 Invoices (0=Y, 1=N); 4 Insertion (0=Y, 1=N), only asked with Other
Public imInitCommShowOn(0 To 5, 0 To 4) As Integer 'Left Index: 0=Merch; 1=Promotion; 2=internal; 3=Cancel; 4=Change; 5=Other
                                            'Right Index: 0 on Proposal(0=Y, 1=No); 1 Order (0=Y, 1=N); 2 Spots (0=Y, 1=N)
                                            '3 Invoices (0=Y, 1=N); 4 Insertion (0=Y, 1=N), only asked with Other
Public imFromExtRevNo As Integer
Public imToExtRevNo As Integer
Public igPriDemoMnfDemo As Integer
'Demo values for Contract totals
Public lgWkSpotCount() As Long
Public lgWkActPrice() As Long
Public lgWkRCPrice() As Long
Public lgWkAvgAud() As Long
Public lgWkPopEst() As Long
Public igWkRating() As Integer
Public lgWkGRImp() As Long
Public lgWkGRP() As Long
Public igLnSPChg As Integer   'True = Spots or Price changed without recompute press
                            'Don't show totals
Public lgLnCost() As Long
Public igLnAvgRating() As Integer
Public lgLnGrImp() As Long
Public lgLnGRP() As Long
Public lgRCLnCost() As Long
Public igRCLnAvgRating() As Integer
Public lgRCLnGrImp() As Long
Public lgRCLnGRP() As Long
Public tgWkAud() As WKAUD
Public tgWkSum() As WKSUM
Public igLnDupl() As Integer        'Line #'s duplicated
Public tgPackVeh() As PACKVEH
Public tgPackDP() As PACKDP
Public tgPackLn() As PACKLN
Public igPackLnNo As Integer
Public igLnMakingPack() As Integer
Public igPackByWkAvg As Integer         'True- Average prices by Week; False- Average prices across contract
Dim tmSvPackVeh() As PACKVEH
Dim tmSvPackDP() As PACKDP
Dim tmSvPackLn() As PACKLN
Public sgTmpLnSave() As String
Public igTmpLnSave() As Integer
Public sgTmpLnShow() As String
Public sgTmpLnComment() As String
Public sgTmpLnInitComment() As String
Public igTmpLnCommShowOn() As Integer
Public igTmpLnInitCommShowOn() As Integer
'Daypart Area
Public igDPNameCallSource As Integer
Public sgDPName As String
Public igShowHelpMsg As Integer
Public igDPAltered As Integer
Public igVefCode As Integer
Public tgDelClf() As CLFLIST
Public lmPjfRecPos() As Long
'Short Title Pass area
Type CSHTTITLE
    sKey As String * 35
    iVefCode As Integer
    lSifCode As Long
    sShortTitle As String * 15
End Type

'12/18/17: Break out NTR separate from Air Time
Public bgBreakoutNTR As Boolean
Type INSTALLBILLINFO
    sKey As String * 100    'Vehicle, the Date or Date, Then Vehicle
    sVehName As String * 40
    iVefCode As Integer
    '12/18/17: Break out NTR separate from Air Time
    iMnfItem As Integer     'NTR type
    sMnfItem As String * 20
    lBillDate As Long
    lBillDollars As Long      'Dollar amount already invoiced or amount to be billed
    lAirOrderedDollars As Long     'Air time plus NTR ordered amount
    lNTROrderedDollars As Long     'Air time plus NTR ordered amount
    sBilledFlag As String * 1
    sType As String * 1         'B=Both; O=Ordered; I = Invoiced
End Type

Type INSTALLVEHINFO
    '12/18/17: Break out NTR separate from Air Time
    sKey As String * 10         'Vefcode+mnfItem
    iVefCode As Integer
    iMnfItem As Integer         'NTR type
    lBilledDollars As Long      'Total Dollar amount already invoiced
    lOrderedDollars As Long     'Air time plus NTR ordered amount
    lTotalBillDollars As Long     'Dollars amount already invoiced plus amount to be billed
End Type

Public tmInstallBillInfo() As INSTALLBILLINFO
Public tmInstallVehInfo() As INSTALLVEHINFO

Public igAdfCode As Integer
Public igSplitType As Integer   '0=Split Copy; 1=Split Network
Public igIncludeDormantSplits As Integer    'True or False
Public igSplitChgd As Integer   'True or False
Public lgSplitModelCodeRaf As Long 'Mode from
Public igSplitModelReturn As Integer   '0=Cancel; 1=Model
Public lgNewRafCntr() As Long
Public igSplitLnVefCode() As Integer
Public sgSplitNetworkName As String
Public tgCShtTitle() As CSHTTITLE
Dim lmQStartDate() As Long
Dim lmQEndDate() As Long
Dim imInTSummary As Integer
Public igVer0LineNo() As Integer 'N/C Line Numbers which are not created with original version

Public igFreezeState As Integer '0=Unfreeze Calculation; 1= Freeze Calculation
Public bgSortByLineNo As Boolean    'Sort by Line number (Major sort by standard Line  # and Package Line #, Minor sort hidden lines within package line numbers


Public lmResearchTabBNWidth As Single
Public lmResearchTabPOPLeft As Single
Public lmResearchTabPOPWidth As Single
Public imResearchTogglePriceLeft As Single
Public imResearchTogglePriceWidth As Single



Dim tmSbfMap() As SBFMAP
Dim lmRvfCode() As Long     'RVF records swapped, used in mAddSbfRec

'Dim hmPcf As Integer
Dim tmPcf As PCF
Dim imPcfRecLen As Integer
Dim tmPcfSrchKey0 As LONGKEY0
Dim tmPcfSrchKey2 As PCFKEY2    'SBF key record image
Dim tmCPcf() As PCF     'Used when swapping
Dim tmPPcf() As PCF     'Used when swapping

Const CECOMPINDEX = 1
Const CEEXCLINDEX = 3
Const CEBUSCATINDEX = 5
'' XML Web Service Functions-- Dan proposal xml
'Type CSIRspGetXMLStatus
'    sStatus As String * 2048
'End Type
'6807 6865
''Declare Function csiXMLStart Lib "csi_utils.dll" (ByVal slIni$, ByVal slSection$, ByVal slType$, ByVal slFileName$, ByVal slLineEndChar$) As Integer
'Declare Function csiXMLStart Lib "csi_utils.dll" (ByVal slIni$, ByVal slSection$, ByVal slType$, ByVal slFileName$, ByVal slLineEndChar$, ByVal slXmlErrorResponseFile$) As Integer
'Declare Function csiXMLSetMethod Lib "csi_utils.dll" (ByVal slMethodName$, ByVal slTableName$, ByVal slTransmissionID$, ByVal slSchemaName$) As Integer
'Declare Function csiXMLData Lib "csi_utils.dll" (ByVal slType$, ByVal slTag$, ByVal slvalue$) As Integer
'Declare Function csiXMLDataEx Lib "csi_utils.dll" (ByVal slType$) As Integer
'Declare Function csiXMLWrite Lib "csi_utils.dll" (ByVal FlushQueue As Long) As Integer
'Declare Function csiXMLEnd Lib "csi_utils.dll" () As Integer
'Declare Function csiXMLStatus Lib "csi_utils.dll" (ByRef sStatus As CSIRspGetXMLStatus) As Integer

'Help contract header area- CHF
'Const CHFCNTRFILTER = 1
'Const CHFCNTRSELECT = 2
'Const CHFTYPE = 3   'Thru 15
'Const CHFDATE = 16
'Const CHFCNTRNO = 17
'Const CHFREVNO = 18
'Const CHFADVT = 19
'Const CHFPROD = 20
'Const CHFAGENCY = 21
'Const CHFSALESP = 22
'Const CHFCOMP1 = 23
'Const CHFBUYER = 24
'Const CHFBUYERPH = 25
'Const CHFSHPRICE = 26
'Const CHFBUDGET = 27
'Const CHFREVBRK = 28
'Const CHFDEMOTYPE = 29
'Const CHFDEMOCAT1 = 30
'Const CHFDEMOAMT1 = 31
'Const CHFDEMOCAT2 = 32
'Const CHFDEMOAMT2 = 33
'Const CHFPCTTRADE = 34
'Const CHFRATECARD = 35
'Const CHFTOTGROSS = 36
'Const CHFBILLCYCLE = 37 'Thru 42
'Const CHFBTTERM = 43
'Const CHFBTSCHED = 44
'Const CHFBTAVAILS = 45
'Const CHFBTUPDATE = 46
'Const CHFBTDONE = 47
'Const CHFBTCANCEL = 48
'Const CHFBTSPBILL = 49
'Const CHFBTREVERT = 50
'Const CHFBTSCHHLD = 51
'Const CHFBTREPT = 52
'Const CHFTOTSR = 53
'Const CHFTOTSY = 54
'Const CHFTOTSG = 55
'Const CHFCREDITR = 56
'Const CHFCREDITY = 57
'Const CHFCREDITG = 58
'Const CHFSTATSR = 59
'Const CHFSTATSY = 60
'Const CHFSTATSG = 69
'Const CHFINVGROUP = 62  'thru 64
'Const CHFPROPFILTER = 65
'Const CHFPROPSELECT = 66
'Const CHFCOMP2 = 67
'Const CHFPRODTAG = 68
'Const CHFCOMMENT = 69
'Help Contract Line area- CLF
'Const CLFLINENO = 1
'Const CLFVEHICLE = 2
'Const CLFPROGRAM = 3
'Const CLFTIMEALLOWED = 4
'Const CLFTIMENOT = 5
'Const CLFSTARTDAY = 6
'Const CLFSTARTDATE = 7
'Const CLFNOWKS = 8
'Const CLFENDDAY = 9
'Const CLFENDDATE = 10
'Const CLFRUNEVERY = 11
'Const CLFGAMEDAYS = 12
'Const CLFWEEKLY = 13
'Const CLFDAILY = 14
'Const CLFBTGENALL = 15
'Const CLFBTGENNEW = 16
'Const CLFFLTAIRWK = 17
'Const CLFFLTWKNO = 18
'Const CLFFLTWKST = 19
'Const CLFFLTWKEND = 20
'Const CLFFLTGAMEDAYS = 21
'Const CLFFLTWEEKLY = 22
'Const CLFFLTDAILY = 23
'Const CLFCALMO = 24
'Const CLFCALYR = 25
'Const CLFCALENDAR = 26
'Const CLFBTFLTDONE = 27
'Const CLFBTFLTCANCEL = 28
'Const CLFLENGTH = 29
'Const CLFSPOTPRICE = 30
'Const CLFGRIDBOX = 31
'Const CLFBILLBOARD = 32 'Thru 36
'Const CLFNOGAMES = 37
'Const CLFNOGAMESPOTS = 38
'Const CLFSPOTSWK = 39
'Const CLFSPOTSWKGAME = 40
'Const CLFFLTSPTWK = 41
'Const CLFFLTSPTWKGAME = 42
'Const CLFPRICESTAT = 43
'dan M 4/27/2011 proposal xml
''D.S. 5/30/18 below moved to ContractXML
'Public Function gXMLNameFilter(slInName As String) As String
'    Dim slName As String
'    Dim ilPos As Integer
'    Dim ilStartPos As Integer
'    Dim ilFound As Integer
'
'    slName = slInName
'    'Remove " and '
'    ilStartPos = 1
'    Do
'        ilFound = False
'        ilPos = InStr(ilStartPos, slName, "&", 1)
'        If ilPos > 0 Then
'            slName = Left$(slName, ilPos - 1) & "&amp;" & Mid$(slName, ilPos + 1)
'            ilStartPos = ilPos + Len("&amp;")
'            ilFound = True
'        End If
'    Loop While ilFound
'    Do
'        ilFound = False
'        ilPos = InStr(1, slName, "<", 1)
'        If ilPos > 0 Then
'            slName = Left$(slName, ilPos - 1) & "&lt;" & Mid$(slName, ilPos + 1)
'            ilFound = True
'        End If
'    Loop While ilFound
'    Do
'        ilFound = False
'        ilPos = InStr(1, slName, ">", 1)
'        If ilPos > 0 Then
'            slName = Left$(slName, ilPos - 1) & "&gt;" & Mid$(slName, ilPos + 1)
'            ilFound = True
'        End If
'    Loop While ilFound
'    Do
'        ilFound = False
'        ilPos = InStr(1, slName, "'", 1)
'        If ilPos > 0 Then
'            slName = Left$(slName, ilPos - 1) & "&apos;" & Mid$(slName, ilPos + 1)
'            ilFound = True
'        End If
'    Loop While ilFound
'    Do
'        ilFound = False
'        ilPos = InStr(1, slName, """", 1)
'        If ilPos > 0 Then
'            slName = Left$(slName, ilPos - 1) & "&quot;" & Mid$(slName, ilPos + 1)
'            ilFound = True
'        End If
'    Loop While ilFound
'    gXMLNameFilter = Trim$(slName)
'End Function

Function mGetDailySpots(ilLnRowNo As Integer, llDate As Long, llSpotCount As Long, ilDailySpots() As Integer) As Integer
'
'   ilLnRowNo(I)- Line Row Number
'   llDate(I)- Date to obtain flight spots for
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llFlMoStartDate As Long
    Dim llFlSuEndDate As Long
    Dim ilNoSpots As Integer
    ilNoSpots = 0
    For ilLoop = 0 To 6 Step 1
        ilDailySpots(ilLoop) = 0
    Next ilLoop
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            If tgCffCntr(ilCff).CffRec.sDyWk <> "D" Then
                mGetDailySpots = -2
                Exit Function
            End If
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If llFlEndDate < llFlStartDate Then
                Exit Do
            End If
            llFlMoStartDate = llFlStartDate
            Do While gWeekDayLong(llFlMoStartDate) <> 0
                llFlMoStartDate = llFlMoStartDate - 1
            Loop
            llFlSuEndDate = llFlEndDate
            Do While gWeekDayLong(llFlSuEndDate) <> 6
                llFlSuEndDate = llFlSuEndDate + 1
            Loop

            If (llDate >= llFlMoStartDate) And (llDate <= llFlSuEndDate) Then
                For ilLoop = 0 To 6 Step 1
                    ilNoSpots = ilNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                    ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                Next ilLoop
                If ilNoSpots > 0 Then
                    llSpotCount = ilNoSpots
                    mGetDailySpots = ilCff
                    Exit Function
                Else
                    Exit Do
                End If
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    'Check if daily defined, use any week as all weeks are to be the same
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'Set daily flag was all week will be the same.  Set here incase no week found
            For ilLoop = 0 To 6 Step 1
                ilNoSpots = ilNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
            Next ilLoop
            If ilNoSpots > 0 Then
                llSpotCount = ilNoSpots
                mGetDailySpots = -1
                Exit Function
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    llSpotCount = 0
    mGetDailySpots = -1
End Function

Sub mAddMissingLnVehicle(ilVefDormantAdd As Integer)
    Dim ilLoop As Integer
    Dim ilTest As Integer
    Dim ilFound As Integer
    Dim slLineType As String
    Dim slNameCode As String
    Dim slCode As String
    Dim slName As String
    Dim ilVef As Integer
    Dim ilRet As Integer
    For ilLoop = 0 To UBound(tgClfCntr) - 1 Step 1
        slLineType = mGetLineType(ilLoop + 1)
        ilFound = False
        If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
            For ilTest = 0 To UBound(tmVehicleCode) - 1 Step 1  'lbcVehicle.ListCount - 1 Step 1
                slNameCode = tmVehicleCode(ilTest).sKey    'lbcVehicle.List(ilTest)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                If tgClfCntr(ilLoop).ClfRec.iVefCode = Val(slCode) Then
                    ilFound = True
                    Exit For
                End If
            Next ilTest
            If Not ilFound Then
                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                '    If tgClfCntr(ilLoop).ClfRec.iVefCode = tgMVef(ilVef).iCode Then
                    ilVef = gBinarySearchVef(tgClfCntr(ilLoop).ClfRec.iVefCode)
                    If ilVef <> -1 Then
                        slName = "999" & "|" & "999" & "|" & tgMVef(ilVef).sName & "\" & Trim$(str$(tgMVef(ilVef).iCode))
                        tmVehicleCode(UBound(tmVehicleCode)).sKey = slName
                        ReDim Preserve tmVehicleCode(0 To UBound(tmVehicleCode) + 1) As SORTCODE
                        Contract.lbcLnVehicle(igTabMapIndex).AddItem Trim$(tgMVef(ilVef).sName)
                        ilVefDormantAdd = True
                        'Exit For
                    End If
                'Next ilVef
            End If
        End If
    Next ilLoop
End Sub

Sub mAddSbfRec(hlSbf As Integer, hlRvf As Integer, hlPhf As Integer, ilTerminate As Integer)

'
'   iRet = mAddSbfRec()
'   Where:
'       iRet (O)- True if updated or added, False if not updated or added
'
    Dim ilLoop As Integer   'For loop control
    Dim ilFile As Integer
    Dim hlFile As Integer
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim ilSbfRecLen As Integer
    Dim llSbfRecPos As Long
    Dim llSbfCode As Long
    Dim slMsg As String
    Dim tlSbf As SBF
    Dim slNowDate As String
    Dim ilRvf As Integer
    Dim slStr As String
    Dim slStr2 As String
    Dim slDate As String
    Dim ilFound As Integer
    Dim ilRvfFound As Integer
    '10289
    Dim slSql As String
    '10736
    Dim dlSBFBilling As Dictionary

    slNowDate = Format$(gNow(), "m/d/yy")
    ilSbfRecLen = Len(tlSbf)
    ilTerminate = False
    ReDim tmSbfMap(0 To 0) As SBFMAP
    'Installment Billing
    '10443 remove all records
    '10736 save before removal
    Set dlSBFBilling = mGetSBFBilling(tgChfCntr.lCode, "F")
    slSql = "delete from SBF_Special_Billing where sbfChfCode = " & tgChfCntr.lCode & " AND sbftrantype = 'F'"
    gSQLWaitNoMsgBox slSql, False
    For ilLoop = LBound(tgFBSbf) To UBound(tgFBSbf) - 1 Step 1
        If tgFBSbf(ilLoop).iStatus >= 0 Then
            llSbfCode = tgFBSbf(ilLoop).SbfRec.lCode
            Do  'Loop until record updated or added
                'If (tgFBSbf(ilLoop).iStatus = 0) And (Contract.lbcBillCycle.ListIndex > 1) Then 'New selected
                If (tgFBSbf(ilLoop).iStatus = 0) Then  'New selected
                    tgFBSbf(ilLoop).SbfRec.lCode = 0
                    tgFBSbf(ilLoop).SbfRec.iCalCarryBonus = 0
                    tgFBSbf(ilLoop).SbfRec.lChfCode = tgChfCntr.lCode
                    tgFBSbf(ilLoop).SbfRec.iUrfCode = tgUrf(0).iCode 'Use first record retained for user
                    tgFBSbf(ilLoop).SbfRec.sTranType = "F"  'Fixed price not invoiced
                    tgFBSbf(ilLoop).SbfRec.sBarterPaid = "N"
                    tgFBSbf(ilLoop).SbfRec.lAcquisitionCost = 0
                    ilRet = btrInsert(hlSbf, tgFBSbf(ilLoop).SbfRec, ilSbfRecLen, INDEXKEY0)
                    slMsg = "mAddSbfRec (btrInsert: Fixed Price)"
                Else 'Old record-Update
                    slMsg = "mAddSbfRec (btrGetEqual: Fixed Price)"
                    'ilRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, tgFBSbf(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    tmSbfSrchKey1.lCode = llSbfCode
                    ilRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    'tmRec = tlSbf
                    'ilRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
                    'tlSbf = tmRec
                    'On Error GoTo mAddSbfRecErr
                    'gBtrvErrorMsg ilRet, slMsg, Contract
                    'On Error GoTo 0
                    '10736 tlSbf not set above in the rare case
                    If ilRet <> BTRV_ERR_NONE Then
                        If dlSBFBilling.Exists(llSbfCode) Then
                            tlSbf.lCode = llSbfCode
                            tlSbf.sBilled = dlSBFBilling(llSbfCode)
                        End If
                    End If
                    If (tgFBSbf(ilLoop).iStatus = 2) Then   'Or (Contract.lbcBillCycle.ListIndex < 2) Then
                        '10443 deletion moved to above
'                        If tlSbf.lChfCode = tgChfCntr.lCode Then
'                            ilRet = btrGetPosition(hlSbf, llSbfRecPos)
'                            Do
'                                ilRet = btrDelete(hlSbf)
'                                If ilRet = BTRV_ERR_CONFLICT Then
'                                    'ilCRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, llSbfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'                                    tmSbfSrchKey1.lCode = llSbfCode
'                                    ilCRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
'                                    'tmRec = tlSbf
'                                    'ilCRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
'                                    'tlSbf = tmRec
'                                End If
'                            Loop While ilRet = BTRV_ERR_CONFLICT
'                            slMsg = "mAddSbfRec (btrDelete: Fixed Price)"
'                        Else
'                            ilRet = BTRV_ERR_NONE
'                        End If
                        ilRet = BTRV_ERR_NONE
                    Else
                        'tlSbf1 = tlSbf
                        'tlSbf2 = tgFBSbf(ilLoop).SbfRec
                        'If StrComp(tlSbf1.sChar, tlSbf2.sChar, 0) <> 0 Then
                            tgFBSbf(ilLoop).SbfRec.lCode = 0
                            tgFBSbf(ilLoop).SbfRec.iCalCarryBonus = 0
                            tgFBSbf(ilLoop).SbfRec.lChfCode = tgChfCntr.lCode
                            tgFBSbf(ilLoop).SbfRec.iUrfCode = tgUrf(0).iCode 'Use first record retained for user
                            '10443 deletion moved to above
'                            If tlSbf.lChfCode = tgChfCntr.lCode Then
'                                ilRet = btrGetPosition(hlSbf, llSbfRecPos)
'                                Do
'                                    ilRet = btrDelete(hlSbf)
'                                    If ilRet = BTRV_ERR_CONFLICT Then
'                                        'ilCRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, llSbfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'                                        tmSbfSrchKey1.lCode = llSbfCode
'                                        ilCRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
'                                        'tmRec = tlSbf
'                                        'ilCRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
'                                        'tlSbf = tmRec
'                                    End If
'                                Loop While ilRet = BTRV_ERR_CONFLICT
'                            End If
                            tgFBSbf(ilLoop).SbfRec.sBarterPaid = "N"
                            tgFBSbf(ilLoop).SbfRec.lAcquisitionCost = 0
                            ilRet = btrInsert(hlSbf, tgFBSbf(ilLoop).SbfRec, ilSbfRecLen, INDEXKEY0)
                            slMsg = "mAddSbfRec (btrInsert: Fixed Price)"
                            If tlSbf.sBilled = "Y" Then
                                tmSbfMap(UBound(tmSbfMap)).sType = "F"
                                tmSbfMap(UBound(tmSbfMap)).lOldSbdCode = tlSbf.lCode
                                tmSbfMap(UBound(tmSbfMap)).lNewSbdCode = tgFBSbf(ilLoop).SbfRec.lCode
                                tmSbfMap(UBound(tmSbfMap)).iFound = False
                                ReDim Preserve tmSbfMap(0 To UBound(tmSbfMap) + 1) As SBFMAP
                            End If
                        'Else
                        '    ilRet = BTRV_ERR_NONE
                        'End If
                    End If
                End If
            Loop While ilRet = BTRV_ERR_CONFLICT
            On Error GoTo mAddSbfRecErr
            gBtrvErrorMsg ilRet, slMsg, Contract
            On Error GoTo 0
        End If
    Next ilLoop
    If smOrigNTRDefined = "Y" Then
        tgChfCntr.sNTRDefined = "Y"
    Else
        tgChfCntr.sNTRDefined = "N"
    End If
    'NTR Billing
    '10289 remove all records
    '10736 save before removal
    Set dlSBFBilling = mGetSBFBilling(tgChfCntr.lCode, "I")
    slSql = "delete from SBF_Special_Billing where sbfChfCode = " & tgChfCntr.lCode & " AND sbftrantype = 'I'"
    gSQLWaitNoMsgBox slSql, False
     For ilLoop = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
        If tgIBSbf(ilLoop).iStatus >= 0 Then
            llSbfCode = tgIBSbf(ilLoop).SbfRec.lCode
            Do  'Loop until record updated or added
                If tgIBSbf(ilLoop).iStatus = 0 Then 'New selected
                    tgIBSbf(ilLoop).SbfRec.lCode = 0
                    tgIBSbf(ilLoop).SbfRec.iCalCarryBonus = 0
                    tgIBSbf(ilLoop).SbfRec.lChfCode = tgChfCntr.lCode
                    tgIBSbf(ilLoop).SbfRec.iUrfCode = tgUrf(0).iCode 'Use first record retained for user
                    tgIBSbf(ilLoop).SbfRec.sTranType = "I"  'Item billing not invoiced
                    tgIBSbf(ilLoop).SbfRec.sBarterPaid = "N"
                    ilRet = btrInsert(hlSbf, tgIBSbf(ilLoop).SbfRec, ilSbfRecLen, INDEXKEY0)
                    tgChfCntr.sNTRDefined = "Y"
                    slMsg = "mAddSbfRec (btrInsert: Item Billing)"
                Else 'Old record-Update
                    slMsg = "mAddSbfRec (btrGetEqual: Item Billing)"
                    'ilRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, tgIBSbf(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    tmSbfSrchKey1.lCode = llSbfCode
                    ilRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    'tmRec = tlSbf
                    'ilRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
                    'tlSbf = tmRec
                    'On Error GoTo mAddSbfRecErr
                    'gBtrvErrorMsg ilRet, slMsg, Contract
                    'On Error GoTo 0
                    '10736 tlSbf not set above in the rare case
                    If ilRet <> BTRV_ERR_NONE Then
                        If dlSBFBilling.Exists(llSbfCode) Then
                            tlSbf.lCode = llSbfCode
                            tlSbf.sBilled = dlSBFBilling(llSbfCode)
                        End If
                    End If
                    If tgIBSbf(ilLoop).iStatus = 2 Then
                        '10289 deleting happens above
'                        If tlSbf.lChfCode = tgChfCntr.lCode Then
'                            tgChfCntr.sNTRDefined = "Y"
'                            ilRet = btrGetPosition(hlSbf, llSbfRecPos)
'                            Do
'                                ilRet = btrDelete(hlSbf)
'                                If ilRet = BTRV_ERR_CONFLICT Then
'                                    'ilCRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, llSbfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'                                    tmSbfSrchKey1.lCode = llSbfCode
'                                    ilCRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
'                                    'tmRec = tlSbf
'                                    'ilCRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
'                                    'tlSbf = tmRec
'                                End If
'                            Loop While ilRet = BTRV_ERR_CONFLICT
'                            slMsg = "mAddSbfRec (btrDelete: Item Billing)"
'                        Else
'                            ilRet = BTRV_ERR_NONE
'                        End If
                        ilRet = BTRV_ERR_NONE
                    Else
                        'tlSbf1 = tlSbf
                        'tlSbf2 = tgIBSbf(ilLoop).SbfRec
                        'If StrComp(tlSbf1.sChar, tlSbf2.sChar, 0) <> 0 Then
                            tgIBSbf(ilLoop).SbfRec.lCode = 0
                            tgIBSbf(ilLoop).SbfRec.iCalCarryBonus = 0
                            tgIBSbf(ilLoop).SbfRec.lChfCode = tgChfCntr.lCode
                            tgIBSbf(ilLoop).SbfRec.iUrfCode = tgUrf(0).iCode 'Use first record retained for user
                            '10289 deletion is now above
'                            If tlSbf.lChfCode = tgChfCntr.lCode Then
'                                ilRet = btrGetPosition(hlSbf, llSbfRecPos)
'                                Do
'                                    ilRet = btrDelete(hlSbf)
'                                    If ilRet = BTRV_ERR_CONFLICT Then
'                                        'ilCRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, llSbfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'                                        tmSbfSrchKey1.lCode = llSbfCode
'                                        ilCRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
'                                        'tmRec = tlSbf
'                                        'ilCRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
'                                        'tlSbf = tmRec
'                                    End If
'                                Loop While ilRet = BTRV_ERR_CONFLICT
'                            End If
                            tgIBSbf(ilLoop).SbfRec.sBarterPaid = "N"
                            ilRet = btrInsert(hlSbf, tgIBSbf(ilLoop).SbfRec, ilSbfRecLen, INDEXKEY0)
                            tgChfCntr.sNTRDefined = "Y"
                            slMsg = "mAddSbfRec (btrInsert: Item Billing)"
                            If tlSbf.sBilled = "Y" Then
                                tmSbfMap(UBound(tmSbfMap)).sType = "I"
                                tmSbfMap(UBound(tmSbfMap)).lOldSbdCode = tlSbf.lCode
                                tmSbfMap(UBound(tmSbfMap)).lNewSbdCode = tgIBSbf(ilLoop).SbfRec.lCode
                                tmSbfMap(UBound(tmSbfMap)).iFound = False
                                ReDim Preserve tmSbfMap(0 To UBound(tmSbfMap) + 1) As SBFMAP
                            End If
                        'Else
                        '    ilRet = BTRV_ERR_NONE
                        'End If
                    End If
                End If
            Loop While ilRet = BTRV_ERR_CONFLICT
            On Error GoTo mAddSbfRecErr
            gBtrvErrorMsg ilRet, slMsg, Contract
            On Error GoTo 0
        End If
    Next ilLoop
    'Remove this code once revise invoicing done
    'Start Point
    If (tgChfCntr.sStatus = "G") Or (tgChfCntr.sStatus = "H") Or (tgChfCntr.sStatus = "N") Or (tgChfCntr.sStatus = "O") Then
        If UBound(tmSbfMap) > 0 Then
            For ilFile = 0 To 1 Step 1
                If ilFile = 0 Then
                    hlFile = hlRvf
                Else
                    hlFile = hlPhf
                End If
                ReDim lmRvfCode(0 To 0) As Long
                'Change rvf references
                imRvfRecLen = Len(tmRvf)
                tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
                tmRvfSrchKey4.iTranDate(0) = 0
                tmRvfSrchKey4.iTranDate(1) = 0
                ilRet = btrGetGreaterOrEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)
                Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.lCntrNo = tgChfCntr.lCntrNo)
                    ilFound = False
                    ilRvfFound = False
                    For ilLoop = 0 To UBound(lmRvfCode) - 1 Step 1
                        If tmRvf.lCode = lmRvfCode(ilLoop) Then
                            ilRvfFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If (tmRvf.lSbfCode > 0) And (Not ilRvfFound) Then
                        For ilLoop = 0 To UBound(tmSbfMap) - 1 Step 1
                            If ((tmRvf.iMnfItem > 0) And (tmSbfMap(ilLoop).sType = "I")) Or ((tmRvf.iMnfItem = 0) And (tmSbfMap(ilLoop).sType = "F")) Then
                                If tmRvf.lSbfCode = tmSbfMap(ilLoop).lOldSbdCode Then
                                    ilFound = True
                                    tmSbfMap(ilLoop).iFound = True
                                    Do
                                        tmRvfSrchKey2.lCode = tmRvf.lCode
                                        ilRet = btrGetEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                                        tmRvf.lSbfCode = tmSbfMap(ilLoop).lNewSbdCode
                                        ilRet = btrUpdate(hlFile, tmRvf, imRvfRecLen)
                                    Loop While ilRet = BTRV_ERR_CONFLICT
                                    lmRvfCode(UBound(lmRvfCode)) = tmRvf.lCode
                                    ReDim Preserve lmRvfCode(0 To UBound(lmRvfCode) + 1) As Long
                                    Exit For
                                End If
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            'Get old sbd to see if match, then determine new sbf
                            tmSbfSrchKey1.lCode = tmRvf.lSbfCode
                            ilRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                            If ilRet = BTRV_ERR_NONE Then
                                For ilLoop = 0 To UBound(tmSbfMap) - 1 Step 1
                                    If tmSbfMap(ilLoop).iFound = False Then
                                        tmSbfSrchKey1.lCode = tmSbfMap(ilLoop).lNewSbdCode
                                        ilRet = btrGetEqual(hlSbf, tmSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                        If ilRet = BTRV_ERR_NONE Then
                                            If (tlSbf.iBillVefCode = tmSbf.iBillVefCode) And (tlSbf.iMnfItem = tmSbf.iMnfItem) And (tlSbf.sBilled = tmSbf.sBilled) And (tlSbf.iNoItems = tmSbf.iNoItems) And (tlSbf.sTranType = tmSbf.sTranType) Then
                                                If (tlSbf.iDate(0) = tmSbf.iDate(0)) And (tlSbf.iDate(1) = tmSbf.iDate(1)) And (tlSbf.lGross = tmSbf.lGross) Then
                                                    ilFound = True
                                                    tmSbfMap(ilLoop).iFound = True
                                                    Do
                                                        tmRvfSrchKey2.lCode = tmRvf.lCode
                                                        ilRet = btrGetEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                                                        tmRvf.lSbfCode = tmSbfMap(ilLoop).lNewSbdCode
                                                        ilRet = btrUpdate(hlFile, tmRvf, imRvfRecLen)
                                                    Loop While ilRet = BTRV_ERR_CONFLICT
                                                    lmRvfCode(UBound(lmRvfCode)) = tmRvf.lCode
                                                    ReDim Preserve lmRvfCode(0 To UBound(lmRvfCode) + 1) As Long
                                                    Exit For
                                                End If
                                            End If
                                        End If
                                    End If
                                Next ilLoop
                            End If
                        End If
                    End If
                    If ilFound Then
                        tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
                        tmRvfSrchKey4.iTranDate(0) = tmRvf.iTranDate(0)
                        tmRvfSrchKey4.iTranDate(1) = tmRvf.iTranDate(1)
                        ilRet = btrGetGreaterOrEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)
                    Else
                        'Find old sbf
                        ilRet = btrGetNext(hlFile, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
                    End If
                Loop
            Next ilFile
        End If
    End If
    Erase lmRvfCode

    'End Point of code to remove once revise invoicing done
    If tgUrf(0).iRemoteUserID > 0 Then
        Exit Sub
    End If
    'Adjust Advt, Salesperson and Ageny
    For ilRvf = 0 To UBound(tmRvfMPRec) - 1 Step 1
        Do
            If tmRvfMPRec(ilRvf).iHandle = 0 Then
                'ilRet = btrGetDirect(hlRvf, tmRvf, imRvfRecLen, tmRvfMPRec(ilRvf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmRvfSrchKey2.lCode = tmRvfMPRec(ilRvf).lCode
                ilRet = btrGetEqual(hlRvf, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
            Else
                'ilRet = btrGetDirect(hlPhf, tmRvf, imRvfRecLen, tmRvfMPRec(ilRvf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmRvfSrchKey2.lCode = tmRvfMPRec(ilRvf).lCode
                ilRet = btrGetEqual(hlPhf, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
            End If
            If (tmRvf.iAdfCode <> tgChfCntr.iAdfCode) Or (tmRvf.iAgfCode <> tgChfCntr.iAgfCode) Or (tmRvf.iSlfCode = tgChfCntr.iSlfCode(0)) Then
                tmRvf.iAgfCode = tgChfCntr.iAgfCode
                tmRvf.iAdfCode = tgChfCntr.iAdfCode
                tmRvf.iSlfCode = tgChfCntr.iSlfCode(0)
                If tmRvfMPRec(ilRvf).iHandle = 0 Then
                    ilRet = btrUpdate(hlRvf, tmRvf, imRvfRecLen)
                Else
                    ilRet = btrUpdate(hlPhf, tmRvf, imRvfRecLen)
                End If
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
    Next ilRvf
    'Merchandising
    imRvfRecLen = Len(tmRvf)
    For ilLoop = LBound(tgMBSbf) To UBound(tgMBSbf) - 1 Step 1
        If tgMBSbf(ilLoop).iStatus >= 0 Then
            'Create RVF
            tmRvf.lCode = 0
            tmRvf.iAgfCode = tgChfCntr.iAgfCode
            tmRvf.iAdfCode = tgChfCntr.iAdfCode
            tmRvf.lPrfCode = 0  'Set this
            tmRvf.iSlfCode = tgChfCntr.iSlfCode(0)
            tmRvf.lCntrNo = tgChfCntr.lCntrNo
            tmRvf.lInvNo = tgChfCntr.lCntrNo
            tmRvf.lRefInvNo = 0
            tmRvf.iAirVefCode = tgMBSbf(ilLoop).SbfRec.iBillVefCode
            tmRvf.sCheckNo = ""
            tmRvf.iTranDate(0) = tgMBSbf(ilLoop).SbfRec.iDate(0)
            tmRvf.iTranDate(1) = tgMBSbf(ilLoop).SbfRec.iDate(1)
            tmRvf.sTranType = "IN"
            tmRvf.sAction = " "
            'gPDNToStr tgMBSbf(ilLoop).SbfRec.sItemAmount, 2, slStr
            slStr = gLongToStrDec(tgMBSbf(ilLoop).SbfRec.lGross, 2)
            If tgChfCntr.lCxfMerch = 0 Then
                slStr = ".00"
            End If
            gStrToPDN slStr, 2, 6, tmRvf.sGross
            gStrToPDN slStr, 2, 6, tmRvf.sNet
            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
            tmRvf.iAgePeriod = month(gDateValue(slDate))
            tmRvf.iAgingYear = year(gDateValue(slDate))
            tmRvf.sCashTrade = "M"
            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
            tmRvf.iUrfCode = tgUrf(0).iCode
            tmRvf.iBillVefCode = tgMBSbf(ilLoop).SbfRec.iBillVefCode
            tmRvf.iPkLineNo = 0
            tmRvf.iInvDate(0) = tmRvf.iTranDate(0)
            tmRvf.iInvDate(1) = tmRvf.iTranDate(1)
            gPackDate slNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
            tmRvf.iRemoteID = 0
            tmRvf.iMnfGroup = 0
            tmRvf.lTax1 = 0
            tmRvf.lTax2 = 0
            tmRvf.iMnfItem = 0
            tmRvf.sInCollect = "N"
            tmRvf.lCefCode = 0
            tmRvf.lSbfCode = 0
            tmRvf.lAcquisitionCost = 0
            tmRvf.sType = ""
            tmRvf.sInvoiceUndone = "N"
            '1/17/09: Added buyer
            'tmRvf.sUnused = ""
            tmRvf.iPnfBuyer = tgChfCntr.iPnfBuyer
            ilFound = False
            For ilRvf = 0 To UBound(tmRvfMPRec) - 1 Step 1
                If tmRvfMPRec(ilRvf).iStatus = 0 Then
                    If (tmRvfMPRec(ilRvf).sCashTrade = tmRvf.sCashTrade) And (tmRvfMPRec(ilRvf).iVefCode = tmRvf.iAirVefCode) And (tmRvfMPRec(ilRvf).iTranDate(0) = tmRvf.iTranDate(0)) And (tmRvfMPRec(ilRvf).iTranDate(1) = tmRvf.iTranDate(1)) Then
                        tmRvfMPRec(ilRvf).iStatus = 1
                        slStr = Trim$(tmRvfMPRec(ilRvf).sAmount)
                        gPDNToStr tmRvf.sNet, 2, slStr2
                        If gCompNumberStr(slStr, slStr2) = 0 Then
                            ilFound = True
                        Else
                            slStr = gSubStr(slStr2, slStr)
                            gStrToPDN slStr, 2, 6, tmRvf.sGross
                            gStrToPDN slStr, 2, 6, tmRvf.sNet
                        End If
                        Exit For
                    End If
                End If
            Next ilRvf
            If Not ilFound Then
                gPDNToStr tmRvf.sNet, 2, slStr2
                If gCompNumberStr(slStr2, ".00") <> 0 Then
                    ilRet = btrInsert(hlRvf, tmRvf, imRvfRecLen, INDEXKEY2)
                    slMsg = "mAddSbfRec (btrInsert: Merchandising)"
                    On Error GoTo mAddSbfRecErr
                    gBtrvErrorMsg ilRet, slMsg, Contract
                    On Error GoTo 0
                End If
            End If
        End If
    Next ilLoop
    'Promotion
    For ilLoop = LBound(tgPBSbf) To UBound(tgPBSbf) - 1 Step 1
        If tgPBSbf(ilLoop).iStatus >= 0 Then
            'Create RVF
            tmRvf.lCode = 0
            tmRvf.iAgfCode = tgChfCntr.iAgfCode
            tmRvf.iAdfCode = tgChfCntr.iAdfCode
            tmRvf.lPrfCode = 0  'Set this
            tmRvf.iSlfCode = tgChfCntr.iSlfCode(0)
            tmRvf.lCntrNo = tgChfCntr.lCntrNo
            tmRvf.lInvNo = tgChfCntr.lCntrNo
            tmRvf.lRefInvNo = 0
            tmRvf.iAirVefCode = tgPBSbf(ilLoop).SbfRec.iBillVefCode
            tmRvf.sCheckNo = ""
            tmRvf.iTranDate(0) = tgPBSbf(ilLoop).SbfRec.iDate(0)
            tmRvf.iTranDate(1) = tgPBSbf(ilLoop).SbfRec.iDate(1)
            tmRvf.sTranType = "IN"
            tmRvf.sAction = " "
            slStr = gLongToStrDec(tgPBSbf(ilLoop).SbfRec.lGross, 2)
            If tgChfCntr.lCxfProm = 0 Then
                slStr = ".00"
            End If
            gStrToPDN slStr, 2, 6, tmRvf.sGross
            gStrToPDN slStr, 2, 6, tmRvf.sNet
            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
            tmRvf.iAgePeriod = month(gDateValue(slDate))
            tmRvf.iAgingYear = year(gDateValue(slDate))
            tmRvf.sCashTrade = "P"
            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
            tmRvf.iUrfCode = tgUrf(0).iCode
            tmRvf.iBillVefCode = tgPBSbf(ilLoop).SbfRec.iBillVefCode
            tmRvf.iPkLineNo = 0
            tmRvf.iInvDate(0) = tmRvf.iTranDate(0)
            tmRvf.iInvDate(1) = tmRvf.iTranDate(1)
            gPackDate slNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
            tmRvf.iRemoteID = 0
            tmRvf.iMnfGroup = 0
            tmRvf.lTax1 = 0
            tmRvf.lTax2 = 0
            tmRvf.iMnfItem = 0
            tmRvf.sInCollect = "N"
            tmRvf.lCefCode = 0
            tmRvf.lSbfCode = 0
            tmRvf.lAcquisitionCost = 0
            tmRvf.sType = ""
            tmRvf.sInvoiceUndone = "N"
            '1/17/09: Added buyer
            'tmRvf.sUnused = ""
            tmRvf.iPnfBuyer = tgChfCntr.iPnfBuyer
            ilFound = False
            For ilRvf = 0 To UBound(tmRvfMPRec) - 1 Step 1
                If tmRvfMPRec(ilRvf).iStatus = 0 Then
                    If (tmRvfMPRec(ilRvf).sCashTrade = tmRvf.sCashTrade) And (tmRvfMPRec(ilRvf).iVefCode = tmRvf.iAirVefCode) And (tmRvfMPRec(ilRvf).iTranDate(0) = tmRvf.iTranDate(0)) And (tmRvfMPRec(ilRvf).iTranDate(1) = tmRvf.iTranDate(1)) Then
                        tmRvfMPRec(ilRvf).iStatus = 1
                        slStr = Trim$(tmRvfMPRec(ilRvf).sAmount)
                        gPDNToStr tmRvf.sNet, 2, slStr2
                        If gCompNumberStr(slStr, slStr2) = 0 Then
                            ilFound = True
                        Else
                            slStr = gSubStr(slStr2, slStr)
                            gStrToPDN slStr, 2, 6, tmRvf.sGross
                            gStrToPDN slStr, 2, 6, tmRvf.sNet
                        End If
                        Exit For
                    End If
                End If
            Next ilRvf
            If Not ilFound Then
                gPDNToStr tmRvf.sNet, 2, slStr2
                If gCompNumberStr(slStr2, ".00") <> 0 Then
                    ilRet = btrInsert(hlRvf, tmRvf, imRvfRecLen, INDEXKEY2)
                    slMsg = "mAddSbfRec (btrInsert: Promotion)"
                    On Error GoTo mAddSbfRecErr
                    gBtrvErrorMsg ilRet, slMsg, Contract
                    On Error GoTo 0
                End If
            End If
        End If
    Next ilLoop
    For ilRvf = 0 To UBound(tmRvfMPRec) - 1 Step 1
        If tmRvfMPRec(ilRvf).iStatus = 0 Then
            If tmRvfMPRec(ilRvf).iHandle = 0 Then
                'ilRet = btrGetDirect(hlRvf, tmRvf, imRvfRecLen, tmRvfMPRec(ilRvf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmRvfSrchKey2.lCode = tmRvfMPRec(ilRvf).lCode
                ilRet = btrGetEqual(hlRvf, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
            Else
                'ilRet = btrGetDirect(hlPhf, tmRvf, imRvfRecLen, tmRvfMPRec(ilRvf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmRvfSrchKey2.lCode = tmRvfMPRec(ilRvf).lCode
                ilRet = btrGetEqual(hlPhf, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
            End If
            slStr = Trim$(tmRvfMPRec(ilRvf).sAmount)
            If gCompNumberStr(slStr, ".00") > 0 Then
                slStr = "-" & slStr
                gStrToPDN slStr, 2, 6, tmRvf.sGross
                gStrToPDN slStr, 2, 6, tmRvf.sNet
                tmRvf.lCode = 0
                tmRvf.sType = ""
                tmRvf.sInvoiceUndone = "N"
                gPackDate slNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                tmRvf.iUrfCode = tgUrf(0).iCode
                ilRet = btrInsert(hlRvf, tmRvf, imRvfRecLen, INDEXKEY2)
                slMsg = "mAddSbfRec (btrInsert: Merchandising/Promotion)"
                On Error GoTo mAddSbfRecErr
                gBtrvErrorMsg ilRet, slMsg, Contract
                On Error GoTo 0
            End If
        End If
    Next ilRvf
    Exit Sub
mAddSbfRecErr:
    On Error GoTo 0
    ilTerminate = True
    Exit Sub
End Sub

Function mAddStdPkgWk(hlPvf As Integer, ilPkLnRowNo As Integer, llDate As Long, slWDFlag As String, llSpotCount As Long, ilDailySpots() As Integer, ilLastCffUsed As Integer, tlRcf As RCF, ilDGSave() As Integer, ilLnTotalType As Integer, ilPRICEINDEX As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, hlChf As Integer, hlClf As Integer, hlSdf As Integer, hlSmf As Integer, hlGhf As Integer, hlGsf As Integer) As Integer
    Dim slLineType As String
    Dim ilVefCode As Integer
    Dim ilRdfCode As Integer
    Dim ilPkVefCode As Integer
    Dim ilPkRdfCode As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilDay As Integer
    Dim ilVef As Integer
    Dim ilRet As Integer
    Dim ilPvf As Integer
    Dim ilTPvf As Integer
    Dim ilTVef As Integer
    Dim llSpots As Long
    Dim ilFound As Integer
    Dim llPrice As Long
    Dim slNameCode As String
    Dim slCode As String
    Dim llOldSpots As Long
    Dim ilFlSpots As Integer
    Dim llWkNoSpots As Long
    Dim ilMGSpots As Integer
    Dim slPrice As String
    Dim ilGVef As Integer
    Dim ilGameWeekTotal As Integer
    Dim blGame As Boolean
    Dim ilCgf As Integer
    Dim ilGameNo As Integer
    ReDim ilOVDays(0 To 6) As Integer  '0=Yes; 0=No; 2=Leave (Mix)
    ReDim ilDays(0 To 6) As Integer
    ReDim ilAllowedDays(0 To 6) As Integer    'Composite of allowed days from program
    Dim ilBilledCount As Integer
    
    mAddStdPkgWk = False
    'If (igFreezeState = 1) Then
    '    Exit Sub
    'End If
    slLineType = mGetLineType(ilPkLnRowNo)
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        Exit Function
    End If
    ilPkVefCode = 0
    For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
        If StrComp(Trim$(smLnSave(1, ilPkLnRowNo)), Trim$(tgPackVeh(ilLoop).sName), 1) = 0 Then
            ilPkVefCode = tgPackVeh(ilLoop).iCode
            Exit For
        End If
    Next ilLoop
    ilPkRdfCode = 0
    For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
        If StrComp(smLnSave(20, ilPkLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
            ilPkRdfCode = tgMRdf(ilLoop).iCode
            Exit For
        End If
    Next ilLoop
    llSpots = llSpotCount
    imPvfRecLen = Len(tmPvf)
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
            If (tgPackLn(ilLoop).iStdPkg = False) And (slLineType <> "E") Then
                'If (slLineType = "O") And (tgSpf.sVirtPkgCompute = "H") Then
'11/22/04- alter test so that Standard and dynamic package work the same- also this required that pbcLine_MouseUp to be altered
                llOldSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llPrice)
                If llOldSpots <> 0 Then
                    If ((slLineType = "O") Or (slLineType = "A")) And (tgSpf.sVirtPkgCompute = "H") Then
'                        llOldSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llPrice)
'                        If llOldSpots <> 0 Then
                            'Adjust spots in each hidden line
                            '6/6/16: Replaced GoSub
                            'GoSub mAdjustHiddenWk
                            mAddStdPkgWk = mAdjustHiddenWk(ilLoop, blGame, ilGameWeekTotal, ilFlSpots, llSpots, llSpotCount, llOldSpots, llDate, ilMGSpots, hlChf, hlClf, hlSdf, hlSmf, ilBilledCount, llPrice, slPrice, ilOVDays(), slWDFlag, ilDays(), llWkNoSpots, ilDailySpots(), ilLastCffUsed, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slLineType, ilPkLnRowNo)
'                        End If
                    ElseIf llSpotCount = 0 Then
'                        llOldSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llPrice)
'                        If llOldSpots <> 0 Then
                            '6/6/16: Replaced GoSub
                            'GoSub mAdjustHiddenWk
                            mAddStdPkgWk = mAdjustHiddenWk(ilLoop, blGame, ilGameWeekTotal, ilFlSpots, llSpots, llSpotCount, llOldSpots, llDate, ilMGSpots, hlChf, hlClf, hlSdf, hlSmf, ilBilledCount, llPrice, slPrice, ilOVDays(), slWDFlag, ilDays(), llWkNoSpots, ilDailySpots(), ilLastCffUsed, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slLineType, ilPkLnRowNo)
'                        End If
                    End If
                    Exit Function
                End If
            End If
            If (slLineType = "O") Or (slLineType = "A") Then
                'Test if weeks has zero spots, then allow week to be added, otherwise don't
                llOldSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llPrice)
                If llOldSpots <> 0 Then
                    'If (slLineType = "O") And (tgSpf.sVirtPkgCompute = "H") Then
                    If ((slLineType = "O") Or (slLineType = "A")) And (tgSpf.sVirtPkgCompute = "H") Then
                        'Adjust spots in each hidden line
                        '6/6/16: Replaced GoSub
                        'GoSub mAdjustHiddenWk
                        mAddStdPkgWk = mAdjustHiddenWk(ilLoop, blGame, ilGameWeekTotal, ilFlSpots, llSpots, llSpotCount, llOldSpots, llDate, ilMGSpots, hlChf, hlClf, hlSdf, hlSmf, ilBilledCount, llPrice, slPrice, ilOVDays(), slWDFlag, ilDays(), llWkNoSpots, ilDailySpots(), ilLastCffUsed, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slLineType, ilPkLnRowNo)
                    ElseIf llSpotCount = 0 Then
                        '6/6/16: Replaced GoSub
                        'GoSub mAdjustHiddenWk
                        mAddStdPkgWk = mAdjustHiddenWk(ilLoop, blGame, ilGameWeekTotal, ilFlSpots, llSpots, llSpotCount, llOldSpots, llDate, ilMGSpots, hlChf, hlClf, hlSdf, hlSmf, ilBilledCount, llPrice, slPrice, ilOVDays(), slWDFlag, ilDays(), llWkNoSpots, ilDailySpots(), ilLastCffUsed, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slLineType, ilPkLnRowNo)
                    End If
                    Exit Function
                End If
            End If
            mAddStdPkgWk = True
            ilIndex = tgPackLn(ilLoop).iIndex
            Do While ilIndex >= 0
                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                    If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                        gFindMatch smLnSave(1, ilClf + 1), 0, Contract.lbcLnVehicle(igTabMapIndex)
                        If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                            Exit For
                        End If
                        slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        ilVefCode = CInt(slCode)
                        ilRdfCode = imLnSave(1, ilClf + 1)
                        If slWDFlag = "D" Then
                            'ilRet = mGetFlightSpotsDays(ilClf + 1, llDate, ilOvDays(), llSpotCount, ilWkDays(), slWDFlag, ilDays())
                            'If (ilRet = -1) And (slWDFlag = "") Then
                            '    For ilDay = 0 To 6 Step 1
                            '        ilDays(ilDay) = ilDailySpots(ilDay)
                            '    Next ilDay
                            'Else
                            '    'Week exist, ignore package multiplier
                            '    ilFlSpots = 0
                            '    For ilDay = 0 To 6 Step 1
                            '        ilFlSpots = ilFlSpots + ilDailySpots(ilDay)
                            '    Next ilDay
                            '    If ilFlSpots > 0 Then
                            '        ilPkVefCode = 0
                            '    End If
                            'End If
                            'slWDFlag = "D"
                            ilRet = mGetDailySpots(ilClf + 1, llDate, llSpotCount, ilDays())
                            If llSpotCount > 0 Then
                                ilPkVefCode = 0
                            End If
                        Else
                            mDPAllowedDays ilRdfCode, ilAllowedDays()
                            ilFound = False
                            For ilDay = 0 To 6 Step 1
                                If (ilAllowedDays(ilDay)) Then
                                    If imLnSave(12 + ilDay, ilClf + 1) <> 1 Then
                                        ilDays(ilDay) = 1
                                        ilFound = True
                                    Else
                                        ilDays(ilDay) = 0
                                    End If
                                Else
                                    ilDays(ilDay) = 0
                                End If
                            Next ilDay
                            If Not ilFound Then
                                For ilDay = 0 To 6 Step 1
                                    If (ilAllowedDays(ilDay)) Then
                                        ilDays(ilDay) = 1
                                    Else
                                        ilDays(ilDay) = 0
                                    End If
                                Next ilDay
                            End If
                        End If
                        If ilPkVefCode > 0 Then
                            ilFound = False
                            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                            '    If tgMVef(ilVef).iCode = ilPkVefCode Then
                                ilVef = gBinarySearchVef(ilPkVefCode)
                                If ilVef <> -1 Then
                                    If tmPvf.lCode <> tgMVef(ilVef).lPvfCode Then
                                        tmPvfSrchKey.lCode = tgMVef(ilVef).lPvfCode
                                        ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                                    Else
                                        ilRet = BTRV_ERR_NONE
                                    End If
                                    Do While ilRet = BTRV_ERR_NONE
                                        For ilPvf = LBound(tmPvf.iVefCode) To UBound(tmPvf.iVefCode) Step 1
                                            If (tmPvf.iVefCode(ilPvf) = ilVefCode) And (tmPvf.iRdfCode(ilPvf) = ilRdfCode) Then
                                                llSpots = llSpotCount * tmPvf.iNoSpot(ilPvf)
                                                If slWDFlag = "D" Then
                                                    For ilDay = 0 To 6 Step 1
                                                        ilDays(ilDay) = ilDailySpots(ilDay) * tmPvf.iNoSpot(ilPvf)
                                                    Next ilDay
                                                End If
                                                ilFound = True
                                                Exit For
                                            End If
                                        Next ilPvf
                                        If ilFound Then
                                            Exit Do
                                        End If
                                        tmPvfSrchKey.lCode = tmPvf.lLkPvfCode
                                        ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                                    Loop
                                    If Not ilFound Then
                                        If tmPvf.lCode <> tgMVef(ilVef).lPvfCode Then
                                            tmPvfSrchKey.lCode = tgMVef(ilVef).lPvfCode
                                            ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                                        Else
                                            ilRet = BTRV_ERR_NONE
                                        End If
                                        Do While ilRet = BTRV_ERR_NONE
                                            For ilPvf = LBound(tmPvf.iVefCode) To UBound(tmPvf.iVefCode) Step 1

                                                'For ilTVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                                '    If tgMVef(ilTVef).iCode = tmPvf.iVefCode(ilPvf) Then
                                                    ilTVef = gBinarySearchVef(tmPvf.iVefCode(ilPvf))
                                                    If ilTVef <> -1 Then
                                                        If (tgMVef(ilTVef).sType = "P") And (tgMVef(ilTVef).lPvfCode > 0) Then
                                                            tmPvfSrchKey.lCode = tgMVef(ilTVef).lPvfCode
                                                            ilRet = btrGetEqual(hlPvf, tmTPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                                                            Do While ilRet = BTRV_ERR_NONE
                                                                For ilTPvf = LBound(tmTPvf.iVefCode) To UBound(tmTPvf.iVefCode) Step 1
                                                                    If (tmTPvf.iVefCode(ilTPvf) = ilVefCode) And (tmTPvf.iRdfCode(ilTPvf) = ilRdfCode) Then
                                                                        llSpots = llSpotCount * tmTPvf.iNoSpot(ilTPvf) * tmPvf.iNoSpot(ilPvf)
                                                                        If slWDFlag = "D" Then
                                                                            For ilDay = 0 To 6 Step 1
                                                                                ilDays(ilDay) = ilDailySpots(ilDay) * tmTPvf.iNoSpot(ilTPvf) * tmPvf.iNoSpot(ilPvf)
                                                                            Next ilDay
                                                                        End If
                                                                        ilFound = True
                                                                        Exit For
                                                                    End If
                                                                Next ilTPvf
                                                                If ilFound Then
                                                                    Exit Do
                                                                End If
                                                                tmPvfSrchKey.lCode = tmTPvf.lLkPvfCode
                                                                ilRet = btrGetEqual(hlPvf, tmTPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                                                            Loop
                                                            If ilFound Then
                                                '                Exit For
                                                            End If
                                                        End If
                                                    End If
                                                'Next ilTVef
                                                If ilFound Then
                                                    Exit For
                                                End If
                                            Next ilPvf
                                            If ilFound Then
                                                Exit Do
                                            End If
                                            tmPvfSrchKey.lCode = tmPvf.lLkPvfCode
                                            ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                                        Loop
                                    End If
                                    'Exit For
                                End If
                            'Next ilVef
                        End If
                        '7/19/12: Check if game vehicle
                        'mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llSpots, ilDays()
                        ilGVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                        If ilGVef <> -1 Then
                            If tgMVef(ilGVef).sType = "G" Then
                                'Add CGF
                                llSpots = mAddGames(hlGhf, hlGsf, tgClfCntr(ilClf).ClfRec.iVefCode, llSpots, ilClf + 1, llDate, ilAllowedDays())
                                slWDFlag = "W"
                            End If
                        End If
                        If llSpots > 0 Then
                            mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llSpots, ilDays()
                        Else
                            mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llSpots, ilDays()
                        End If
                        mLnTotals ilClf + 1, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slWDFlag, ilDays()           'Set associated package lines values
                        If (slLineType = "O") Or (slLineType = "A") Then
                            If (sgCntrScreen <> "Orders") Then  'And (plcDemoBar.Visible) Then
                                mSetFlightPriceForWk ilClf + 1, llDate, tgClfCntr(ilClf).sCurrentPrice, ilDays(), tlRcf, ilVefCode, ilDGSave(), ilLnTotalType
                            Else
                                If (smLnSave(22, imLnRowNo) <> "") Then
                                    ilCff = tgClfCntr(ilClf).iFirstCff
                                    Do While ilCff <> -1
                                        If llDate = tgCffCntr(ilCff).lStartDate Then
                                            tgCffCntr(ilCff).CffRec.sPriceType = smLnSave(22, ilClf + 1)
                                            If tgCffCntr(ilCff).CffRec.lActPrice <> gStrDecToLong(smLnSave(21, ilClf + 1), 2) Then
                                                tgClfCntr(ilClf).sLineChgd = "Y"
                                            End If
                                            tgCffCntr(ilCff).CffRec.lActPrice = gStrDecToLong(smLnSave(21, ilClf + 1), 2)
                                            Exit Do
                                        End If
                                        ilCff = tgCffCntr(ilCff).iNextCff
                                    Loop
                                Else
                                    mSetFlightPriceForWk ilClf + 1, llDate, "", ilDays(), tlRcf, ilVefCode, ilDGSave(), ilLnTotalType
                                End If
                            End If
                            '10389
                            mSetLnTotals ilClf + 1
                            slPrice = smLnSave(18, ilClf + 1)
                            mGetLnPriceInfo ilClf + 1, slPrice, ilLnTotalType, ilPRICEINDEX
                        End If
                        Exit For
                    End If
                Next ilClf
                ilIndex = tgPackLn(ilIndex).iIndex
            Loop
            Exit For
        End If
    Next ilLoop
    If (slLineType = "A") Then
        ilRet = mGetDailySpots(ilPkLnRowNo, llDate, llSpotCount, ilDays())
        If ilRet <> -2 Then '-2 indicates that it is not daily
            For ilDay = 0 To 6 Step 1
                If smLnSave(7 + ilDay, ilPkLnRowNo) <> Trim$(str$(ilDays(ilDay))) Then
                    tgClfCntr(ilPkLnRowNo - 1).sLineChgd = "Y"
                End If
                smLnSave(7 + ilDay, ilPkLnRowNo) = Trim$(str$(ilDays(ilDay)))
            Next ilDay
        End If
    End If
    Exit Function
'mAdjustHiddenWk:
'    mAddStdPkgWk = True
'    ilIndex = tgPackLn(ilLoop).iIndex
'    Do While ilIndex >= 0
'        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                '7/19/12: Add Game
'                blGame = False
'                ilGVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
'                If ilGVef <> -1 Then
'                    If tgMVef(ilGVef).sType = "G" Then
'                        'Adjust game spots
'                        blGame = True
'                        ilGameWeekTotal = 0
'                        ilCgf = tgClfCntr(ilClf).iFirstCgf
'                        Do While ilCgf <> -1
'                            If (tgCgfCntr(ilCgf).lStartDate >= llDate) And (tgCgfCntr(ilCgf).lEndDate <= llDate + 6) Then
'                                ilFlSpots = tgCgfCntr(ilCgf).CgfRec.iNoSpots
'                                llSpots = CInt((CLng(ilFlSpots) * CLng(llSpotCount)) / CLng(llOldSpots))
'                                If (llSpots <= 0) And (llSpotCount <> 0) Then
'                                    llSpots = 1
'                                End If
'                                If llSpotCount < llOldSpots Then
'                                    '3/14/13
'                                    '3/14/13
'                                    'ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6, tgCgfCntr(ilCgf).CgfRec.iGameNo)
'                                    'If ilMGSpots > llSpots Then
'                                    '    llSpots = ilMGSpots
'                                    'End If
'                                    If (llSpotCount = 0) And (Asc(tgSpf.sUsingFeatures10) And REPLACEDELWKWITHFILLS) = REPLACEDELWKWITHFILLS Then
'                                        llSpots = 0
'                                    Else
'                                        ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6, ilBilledCount, 0)
'                                        If ilMGSpots > llSpots Then
'                                            llSpots = ilMGSpots
'                                        End If
'                                    End If
'                                End If
'                                If tgCgfCntr(ilCgf).CgfRec.iNoSpots <> llSpots Then
'                                    tgClfCntr(ilClf).sLineChgd = "Y"
'                                End If
'                                tgCgfCntr(ilCgf).CgfRec.iNoSpots = llSpots
'                                ilGameWeekTotal = ilGameWeekTotal + llSpots
'                            End If
'                            ilCgf = tgCgfCntr(ilCgf).iNextCgf
'                        Loop
'                    End If
'                End If
'
'                ilFlSpots = mGetFlightSpots(ilClf + 1, llDate, llPrice)
'                If ilFlSpots > 0 Then
'                    mGetFlightDays ilClf + 1, ilOVDays()
'                    mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDays(), llWkNoSpots
'                    If slWDFlag = "D" Then
'                        For ilDay = 0 To 6 Step 1
'                            ilDays(ilDay) = ilDailySpots(ilDay)
'                        Next ilDay
'                        mAddWeek ilLastCffUsed, ilClf + 1, llDate, "D", llSpots, ilDays()
'                    Else
'                        'llSpots = (ilFlSpots * llSpotCount) / llOldSpots
'                        If blGame Then
'                            llSpots = ilGameWeekTotal
'                        Else
'                            llSpots = CInt((CLng(ilFlSpots) * CLng(llSpotCount)) / CLng(llOldSpots))
'                            If (llSpots <= 0) And (llSpotCount <> 0) Then
'                                llSpots = 1
'                            End If
'                            If llSpotCount < llOldSpots Then
'                                '3/14/13
'                                'ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6)
'                                'If ilMGSpots > llSpots Then
'                                '    llSpots = ilMGSpots
'                                'End If
'                                If (llSpotCount = 0) And (Asc(tgSpf.sUsingFeatures10) And REPLACEDELWKWITHFILLS) = REPLACEDELWKWITHFILLS Then
'                                    llSpots = 0
'                                Else
'                                    ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6, ilBilledCount, 0)
'                                    If ilMGSpots > llSpots Then
'                                        llSpots = ilMGSpots
'                                    End If
'                                End If
'                            End If
'                        End If
'                        mAddWeek ilLastCffUsed, ilClf + 1, llDate, "W", llSpots, ilDays()
'                    End If
'                    mLnTotals ilClf + 1, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slWDFlag, ilDays()           'Set associated package lines values
'                    mGetLnPriceInfo ilClf + 1, slPrice, ilLnTotalType, ilPRICEINDEX
'                End If
'            End If
'        Next ilClf
'        ilIndex = tgPackLn(ilIndex).iIndex
'    Loop
'    If (slLineType = "A") Then
'        ilRet = mGetDailySpots(ilPkLnRowNo, llDate, llSpotCount, ilDays())
'        If ilRet <> -2 Then '-2 indicates that it is not daily
'            For ilDay = 0 To 6 Step 1
'                If smLnSave(7 + ilDay, ilPkLnRowNo) <> Trim$(str$(ilDays(ilDay))) Then
'                    tgClfCntr(ilPkLnRowNo - 1).sLineChgd = "Y"
'                End If
'                smLnSave(7 + ilDay, ilPkLnRowNo) = Trim$(str$(ilDays(ilDay)))
'            Next ilDay
'        End If
'    End If
'    Return
End Function

Sub mAddWeek(ilLastCffUsed As Integer, ilLnRowNo As Integer, llDate As Long, slWDFlag As String, llNoSpots As Long, ilAllowedDays() As Integer)
'
'   ilLnRowNo(I)- Line row number
'   llDate(I)- Date within week to add
'   llNoSpots(I)- Number of spots
'   ilAllowedDays(I)- Allowed days (True= Air Day; False=Not Air Day)
'

    Dim ilCff As Integer
    Dim ilPrevCff As Integer
    Dim ilLoop As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llFlMoStartDate As Long
    Dim llFlSuEndDate As Long
    Dim llFlFirstMoDate As Long
    Dim llFlLastMoDate As Long
    Dim slStartDate As String
    Dim slEndDate As String
    Dim ilDay As Integer
    Dim ilCffIndex As Integer
    Dim ilAdd As Integer
    Dim llMoDate As Long
    Dim llSuDate As Long
    Dim slDate As String
    Dim ilAddSplitCff As Integer
    Dim ilLIndex As Integer
    Dim ilClf As Integer
    Dim ilTestCff As Integer
    Dim ilFound As Integer
    Dim tlCff As CFFLIST
    ilAdd = 0
    ilPrevCff = -1
    ilAddSplitCff = False
    llMoDate = llDate
    llSuDate = llDate
    ilLIndex = LBound(ilAllowedDays)
    Do While gWeekDayLong(llMoDate) <> 0
        llMoDate = llMoDate - 1
    Loop
    Do While gWeekDayLong(llSuDate) <> 6
        llSuDate = llSuDate + 1
    Loop
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If tgClfCntr(ilLnRowNo - 1).iCancel Then
            tgClfCntr(ilLnRowNo - 1).iCancel = False
            tgClfCntr(ilLnRowNo - 1).ClfRec.sHideCBS = "N"
            slStartDate = gObtainPrevMonday(Format$(llDate, "m/d/yy"))
            slEndDate = gObtainNextSunday(Format$(llDate, "m/d/yy"))
            gPackDate slStartDate, tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1)
            tgCffCntr(ilCff).lStartDate = gDateValue(slStartDate)
            gPackDate slEndDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)
            tgCffCntr(ilCff).lEndDate = gDateValue(slEndDate)
            If slWDFlag = "D" Then
                For ilDay = 0 To 6 Step 1
                    tgCffCntr(ilCff).CffRec.iDay(ilDay) = ilAllowedDays(ilDay + ilLIndex)
                Next ilDay
                tgCffCntr(ilCff).CffRec.sDyWk = "D"
                tgCffCntr(ilCff).CffRec.iSpotsWk = 0
            Else
                For ilDay = 0 To 6 Step 1
                    If ilAllowedDays(ilDay + ilLIndex) Then
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 1
                    Else
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                    End If
                Next ilDay
                tgCffCntr(ilCff).CffRec.sDyWk = "W"
                tgCffCntr(ilCff).CffRec.iSpotsWk = llNoSpots
            End If
            tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
            Exit Sub
        Else
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                llFlMoStartDate = llFlStartDate
                Do While gWeekDayLong(llFlMoStartDate) <> 0
                    llFlMoStartDate = llFlMoStartDate - 1
                Loop
                llFlSuEndDate = llFlEndDate
                Do While gWeekDayLong(llFlSuEndDate) <> 6
                    llFlSuEndDate = llFlSuEndDate + 1
                Loop
                If (llDate >= llFlMoStartDate) And (llDate <= llFlSuEndDate) Then
                    If (llMoDate <= llFlStartDate) And (llSuDate >= llFlEndDate) Then
                        'slStartDate = gObtainPrevMonday(Format$(llDate, "m/d/yy"))
                        'slEndDate = gObtainNextSunday(Format$(llDate, "m/d/yy"))
                        'gPackDate slStartDate, tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1)
                        'gPackDate slEndDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)
                        If slWDFlag = "D" Then
                            For ilDay = 0 To 6 Step 1
                                tgCffCntr(ilCff).CffRec.iDay(ilDay) = ilAllowedDays(ilDay + ilLIndex)
                            Next ilDay
                            tgCffCntr(ilCff).CffRec.sDyWk = "D"
                            tgCffCntr(ilCff).CffRec.iSpotsWk = 0
                        Else
                            For ilDay = 0 To 6 Step 1
                                If ilAllowedDays(ilDay + ilLIndex) Then
                                    tgCffCntr(ilCff).CffRec.iDay(ilDay) = 1
                                Else
                                    tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                                End If
                            Next ilDay
                            tgCffCntr(ilCff).CffRec.sDyWk = "W"
                            tgCffCntr(ilCff).CffRec.iSpotsWk = llNoSpots
                        End If
                        tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                        Exit Sub
                    End If
                    'Split flight
                    ilAdd = 1
                    Exit Do
                End If
                If llDate < llFlStartDate Then
                    'Add prior to current flight
                    ilAdd = 2
                    Exit Do
                End If
            End If
            ilPrevCff = ilCff
            ilCff = tgCffCntr(ilCff).iNextCff
        End If
    Loop
    'Add to end of the flights
    '6/6/16: Replaced GoSub
    'GoSub lObtainNextCff
    mObtainNextCFF ilCffIndex, ilLastCffUsed
    tgCffCntr(ilCffIndex).iNextCff = -1
    tgCffCntr(ilCffIndex).iStatus = 0
    tgCffCntr(ilCffIndex).lRecPos = 0
    If ilAdd = 0 Then
        If tgClfCntr(ilLnRowNo - 1).iFirstCff = -1 Then
            tgClfCntr(ilLnRowNo - 1).iFirstCff = ilCffIndex
        Else
            tgCffCntr(ilPrevCff).iNextCff = ilCffIndex
        End If
    ElseIf ilAdd = 1 Then
        tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
        llFlFirstMoDate = llFlStartDate
        Do While gWeekDayLong(llFlFirstMoDate) <> 0
            llFlFirstMoDate = llFlFirstMoDate - 1
        Loop
        llFlLastMoDate = llFlEndDate
        Do While gWeekDayLong(llFlLastMoDate) <> 0
            llFlLastMoDate = llFlLastMoDate - 1
        Loop
        tlCff = tgCffCntr(ilCff)
        If llMoDate = llFlFirstMoDate Then
            'Replace first week of flight
            If ilPrevCff = -1 Then
                tgCffCntr(ilCffIndex).iNextCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
                tgClfCntr(ilLnRowNo - 1).iFirstCff = ilCffIndex
            Else
                tgCffCntr(ilCffIndex).iNextCff = tgCffCntr(ilPrevCff).iNextCff
                tgCffCntr(ilPrevCff).iNextCff = ilCffIndex
            End If
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            Do
                llFlStartDate = llFlStartDate + 1
            Loop Until gWeekDayLong(llFlStartDate) = 0
            slDate = Format$(llFlStartDate, "m/d/yy")
            gPackDate slDate, tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1)    'Week Start date
            tgCffCntr(ilCff).lStartDate = llFlStartDate
        ElseIf llMoDate = llFlLastMoDate Then
            'Replace last week of flight
            tgCffCntr(ilCffIndex).iNextCff = tgCffCntr(ilCff).iNextCff
            tgCffCntr(ilCff).iNextCff = ilCffIndex
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            Do
                llFlEndDate = llFlEndDate - 1
            Loop Until gWeekDayLong(llFlEndDate) = 6
            slDate = Format$(llFlEndDate, "m/d/yy")
            gPackDate slDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)    'Week Start date
            tgCffCntr(ilCff).lEndDate = llFlEndDate
        Else
            'Split flight
            'tlCff = tgCffCntr(ilCff)
            tlCff.iStatus = 0
            tlCff.lRecPos = 0
            tgCffCntr(ilCff).iNextCff = ilCffIndex
            'tgCffCntr(ilCffIndex).iNextCff = UBound(tgCffCntr) + 1
            slDate = Format$(llMoDate - 1, "m/d/yy")
            gPackDate slDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)    'Week Start date
            tgCffCntr(ilCff).lEndDate = llMoDate - 1
            slDate = Format$(llSuDate + 1, "m/d/yy")
            gPackDate slDate, tlCff.CffRec.iStartDate(0), tlCff.CffRec.iStartDate(1)    'Week Start date
            tlCff.lStartDate = llSuDate + 1
            ilAddSplitCff = True
        End If
    Else
        tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
        If ilPrevCff = -1 Then
            tgCffCntr(ilCffIndex).iNextCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
            tgClfCntr(ilLnRowNo - 1).iFirstCff = ilCffIndex
        Else
            tgCffCntr(ilCffIndex).iNextCff = tgCffCntr(ilPrevCff).iNextCff
            tgCffCntr(ilPrevCff).iNextCff = ilCffIndex
        End If
    End If
    tgCffCntr(ilCffIndex).iStatus = 0   'New to not used
    tgCffCntr(ilCffIndex).CffRec.lChfCode = tgChfCntr.lCode
    tgCffCntr(ilCffIndex).CffRec.iClfLine = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine
    tgCffCntr(ilCffIndex).CffRec.iCntRevNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iCntRevNo
    tgCffCntr(ilCffIndex).CffRec.iPropVer = tgClfCntr(ilLnRowNo - 1).ClfRec.iPropVer
    slStartDate = gObtainPrevMonday(Format$(llDate, "m/d/yy"))
    slEndDate = gObtainNextSunday(Format$(llDate, "m/d/yy"))
    gPackDate slStartDate, tgCffCntr(ilCffIndex).CffRec.iStartDate(0), tgCffCntr(ilCffIndex).CffRec.iStartDate(1)
    tgCffCntr(ilCffIndex).lStartDate = gDateValue(slStartDate)
    gPackDate slEndDate, tgCffCntr(ilCffIndex).CffRec.iEndDate(0), tgCffCntr(ilCffIndex).CffRec.iEndDate(1)
    tgCffCntr(ilCffIndex).lEndDate = gDateValue(slEndDate)
    If slWDFlag = "D" Then
        For ilDay = 0 To 6 Step 1
            tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = ilAllowedDays(ilDay + ilLIndex)
        Next ilDay
        tgCffCntr(ilCffIndex).CffRec.sDyWk = "D"
        tgCffCntr(ilCffIndex).CffRec.iSpotsWk = 0
    Else
        tgCffCntr(ilCffIndex).CffRec.sDyWk = "W"
        tgCffCntr(ilCffIndex).CffRec.iSpotsWk = llNoSpots
        For ilDay = 0 To 6 Step 1
            If ilAllowedDays(ilDay + ilLIndex) Then
                tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = 1
            Else
                tgCffCntr(ilCffIndex).CffRec.iDay(ilDay) = 0
            End If
            tgCffCntr(ilCffIndex).CffRec.sXDay(ilDay) = "0"
        Next ilDay
    End If
    tgCffCntr(ilCffIndex).CffRec.sDelete = "N"
    tgCffCntr(ilCffIndex).CffRec.iXSpotsWk = 0
    If ilAdd <> 1 Then
        tgCffCntr(ilCffIndex).CffRec.sPriceType = "*"   '* used to indicate price needs to be set
        tgCffCntr(ilCffIndex).CffRec.lActPrice = 0  'Later- might want to store average package price
        tgCffCntr(ilCffIndex).CffRec.lPropPrice = 0
    Else
        tgCffCntr(ilCffIndex).CffRec.sPriceType = tlCff.CffRec.sPriceType
        tgCffCntr(ilCffIndex).CffRec.lActPrice = tlCff.CffRec.lActPrice
        tgCffCntr(ilCffIndex).CffRec.lPropPrice = tlCff.CffRec.lPropPrice
    End If
    If ilAddSplitCff Then
        ilCff = ilCffIndex
        '6/6/16: Replaced GoSub
        'GoSub lObtainNextCff
        mObtainNextCFF ilCffIndex, ilLastCffUsed
        tgCffCntr(ilCff).iNextCff = ilCffIndex
        tgCffCntr(ilCffIndex) = tlCff
    End If
    Exit Sub
'lObtainNextCff:
'    ilCffIndex = -1
'    For ilLoop = ilLastCffUsed To UBound(tgCffCntr) - 1 Step 1
'        If tgCffCntr(ilLoop).iStatus = -1 Then
'            'Test Chain
'            ilFound = False
'            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
'                ilTestCff = tgClfCntr(ilClf).iFirstCff
'                If ilTestCff = ilLoop Then
'                    ilFound = True
'                    Exit For
'                End If
'                Do While ilTestCff <> -1
'                    ilTestCff = tgCffCntr(ilTestCff).iNextCff
'                    If ilTestCff = ilLoop Then
'                        ilFound = True
'                        Exit For
'                    End If
'                Loop
'            Next ilClf
'            If Not ilFound Then
'                ilCffIndex = ilLoop
'                ilLastCffUsed = ilLoop
'                Exit For
'            End If
'        End If
'    Next ilLoop
'    If ilCffIndex = -1 Then
'        ilCffIndex = UBound(tgCffCntr)
'        ilLastCffUsed = ilCffIndex
'        ReDim Preserve tgCffCntr(0 To ilCffIndex + 100) As CFFLIST
'        For ilLoop = ilCffIndex + 1 To UBound(tgCffCntr) Step 1
'            tgCffCntr(ilLoop).iStatus = -1 'Not Used
'            tgCffCntr(ilLoop).lRecPos = 0
'            tgCffCntr(ilLoop).iNextCff = -1
'        Next ilLoop
'    End If
'    Return
End Sub

Sub mAdjAllPrices(llRound As Long, slRatio As String, ilLnTotalType As Integer, ilPRICEINDEX As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE)
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilLnMax As Integer
    Dim slLineType As String
    Dim slStr As String
    Dim ilLnRowNo As Integer
    Dim slRound As String
    ReDim ilDays(0 To 6) As Integer

    If (igFreezeState = 1) Then
        Exit Sub
    End If
    If (smLnSave(1, UBound(tgClfCntr) + 1) <> "") And (tgClfCntr(UBound(tgClfCntr)).iFirstCff <> -1) Then
        ilLnMax = UBound(tgClfCntr)
    Else
        ilLnMax = UBound(tgClfCntr) - 1
    End If
    slRound = gLongToStrDec(llRound, 2)
    For ilClf = LBound(tgClfCntr) To ilLnMax Step 1
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo)
        If ((tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1)) And (Not tgClfCntr(ilClf).iCancel) Or ((ilClf = UBound(tgClfCntr))) Then
            If (slLineType <> "O") And (slLineType <> "A") And ((slLineType <> "H") Or (mGetPkLineType(ilLnRowNo) <> "E")) Then
                tgClfCntr(ilClf).iResearch = False
                ilCff = tgClfCntr(ilClf).iFirstCff
                Do While ilCff <> -1
                    'Status: 0=New; 1=Old & retain; 2=Old & delete;-1=New, unused
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
                            slStr = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                            slStr = gMulStr(slStr, slRatio)
                            slStr = gRoundStr(slStr, slRound, 2)
                            tgCffCntr(ilCff).CffRec.lActPrice = gStrDecToLong(slStr, 2)
                        End If
                    End If
                    ilCff = tgCffCntr(ilCff).iNextCff
                Loop
                mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
                mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
            End If
        End If
    Next ilClf
End Sub

Function mAdjStdPkPrice(ilPkLnRowNo As Integer, llSDate As Long, llEDate As Long, llNewPrice As Long, llInOldPrice As Long, ilLastCffUsed As Integer, tlRcf As RCF, ilDGSave() As Integer, ilLnTotalType As Integer, ilPRICEINDEX As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE) As Integer
    Dim slLineType As String
    Dim ilPkVefCode As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilPkCff As Integer
    Dim llFlSpots As Long
    Dim llFlPrice As Long
    Dim llPrice As Long
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llPkFlStartDate As Long
    Dim llPkFlEndDate As Long
    Dim ilLnRowNo As Integer
    Dim llDate As Long
    Dim llOldPrice As Long
    Dim llAdjPrice As Long
    Dim llTSpots As Long
    Dim llTPrice As Long
    'Dim ilTHidden As Integer
    Dim llTHidden As Long
    Dim slStr As String
    Dim ilRepeat As Integer
    Dim ilDay As Integer
    Dim llPkSpots As Long
    Dim llWkNoSpots As Long
    Dim slWDFlag As String
    Dim slSpotPrice As String
    ReDim ilDailySpots(0 To 6) As Integer

    ReDim ilOVDays(0 To 6) As Integer  '0=Yes; 0=No; 2=Leave (Mix)
    ReDim ilDays(0 To 6) As Integer
    mAdjStdPkPrice = False
    llOldPrice = llInOldPrice
    If (tgSpf.sVirtPkgCompute <> "H") Then
        Exit Function
    End If
    'If (igFreezeState = 1) Then
    '    Exit Function
    'End If
    slLineType = mGetLineType(ilPkLnRowNo)
    'If (slLineType <> "O") Then
    If (slLineType <> "O") And (slLineType <> "A") Then
        Exit Function
    End If
    If llOldPrice = 0 Then
        llOldPrice = llNewPrice
    End If
    ilPkVefCode = 0
    For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
        If StrComp(Trim$(smLnSave(1, ilPkLnRowNo)), Trim$(tgPackVeh(ilLoop).sName), 1) = 0 Then
            ilPkVefCode = tgPackVeh(ilLoop).iCode
            Exit For
        End If
    Next ilLoop
    '2/15/12: Split flight up so that weeks balance
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        mSplitFlightsIntoWeeks ilClf + 1
    Next ilClf
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
            'Test if weeks has zero spots, then allow week to be added, otherwise don't
            'ilOldSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llOldPrice)
            'If ilOldSpots <> 0 Then
                'If (slLineType = "O") And (tgSpf.sVirtPkgCompute = "H") Then
                If ((slLineType = "O") Or (slLineType = "A")) And (tgSpf.sVirtPkgCompute = "H") Then
                    'Adjust price in each hidden line
                    If (slLineType = "O") Then
                        llPkSpots = 0
                        If llSDate <= 0 Then
                            ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                            Do While ilCff <> -1
                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                        For ilDay = 0 To 6 Step 1
                                            If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                llPkSpots = llPkSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                            End If
                                        Next ilDay
                                    Else
                                        llPkSpots = llPkSpots + tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                    End If
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                        Else
                            For llDate = llSDate To llEDate Step 7
                                ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                                Do While ilCff <> -1
                                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                                            If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Then
                                                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                    For ilDay = 0 To 6 Step 1
                                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                            llPkSpots = llPkSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                        End If
                                                    Next ilDay
                                                Else
                                                    llPkSpots = llPkSpots + tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                End If
                                            End If
                                            Exit Do
                                        Else
                                            ilCff = tgCffCntr(ilCff).iNextCff
                                        End If
                                    Else
                                        ilCff = tgCffCntr(ilCff).iNextCff
                                    End If
                                Loop
                            Next llDate
                        End If
                    End If
                    '6/6/16: Replaced GoSub. Moved here as only one call
                    'GoSub mAdjustHiddenPrice
                    mAdjStdPkPrice = True
                    'Determine if all prices previously set to zero only
                    llTSpots = 0
                    llTPrice = 0
                    llTHidden = 0
                    ilIndex = tgPackLn(ilLoop).iIndex
                    Do While ilIndex >= 0
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            ilLnRowNo = ilClf + 1
                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                'ilTHidden = ilTHidden + 1
                                If llSDate <= 0 Then
                                    ilCff = tgClfCntr(ilClf).iFirstCff
                                    Do While ilCff <> -1
                                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                            If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
                                                llTPrice = llTPrice + tgCffCntr(ilCff).CffRec.lActPrice
                                                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                    For ilDay = 0 To 6 Step 1
                                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                            llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                        End If
                                                    Next ilDay
                                                Else
                                                    llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                End If
                                            End If
                                        End If
                                        ilCff = tgCffCntr(ilCff).iNextCff
                                    Loop
                                Else
                                    For llDate = llSDate To llEDate Step 7
                                        ilCff = tgClfCntr(ilClf).iFirstCff
                                        Do While ilCff <> -1
                                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                                llFlStartDate = tgCffCntr(ilCff).lStartDate
                                                llFlEndDate = tgCffCntr(ilCff).lEndDate
                                                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                                                    If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Then
                                                        llTPrice = llTPrice + tgCffCntr(ilCff).CffRec.lActPrice
                                                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                            For ilDay = 0 To 6 Step 1
                                                                If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                                    llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                                End If
                                                            Next ilDay
                                                        Else
                                                            llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                        End If
                                                    End If
                                                    Exit Do
                                                Else
                                                    ilCff = tgCffCntr(ilCff).iNextCff
                                                End If
                                            Else
                                                ilCff = tgCffCntr(ilCff).iNextCff
                                            End If
                                        Loop
                                    Next llDate
                                End If
                            End If
                        Next ilClf
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                    '
                    'Coded for even distribution only- need to code other distributions when original price is zero.
                    '
                    ilIndex = tgPackLn(ilLoop).iIndex
                    Do While ilIndex >= 0
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            ilLnRowNo = ilClf + 1
                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                If llSDate <= 0 Then
                                    ilCff = tgClfCntr(ilClf).iFirstCff
                                    Do While ilCff <> -1
                                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                            If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
                                                If llTPrice = 0 Then
                                                    If (slLineType = "A") Then
                                                        If tgCffCntr(ilCff).CffRec.lActPrice <> llNewPrice Then
                                                            tgClfCntr(ilClf).sLineChgd = "Y"
                                                            '10383
                                                            tgClfCntr(ilClf).iResearch = False
                                                        End If
                                                        tgCffCntr(ilCff).CffRec.lActPrice = llNewPrice '/ ilTHidden
                                                    Else
                                                        If tgCffCntr(ilCff).CffRec.lActPrice <> (llNewPrice * llPkSpots) / llTHidden Then
                                                            tgClfCntr(ilClf).sLineChgd = "Y"
                                                            '10383
                                                            tgClfCntr(ilClf).iResearch = False
                                                        End If
                                                        tgCffCntr(ilCff).CffRec.lActPrice = (llNewPrice * llPkSpots) / llTHidden
                                                    End If
                                                Else
                                                    If tgCffCntr(ilCff).CffRec.lActPrice <> (CSng(tgCffCntr(ilCff).CffRec.lActPrice) * llNewPrice) / llOldPrice Then
                                                        tgClfCntr(ilClf).sLineChgd = "Y"
                                                        '10383
                                                        tgClfCntr(ilClf).iResearch = False
                                                    End If
                                                    tgCffCntr(ilCff).CffRec.lActPrice = (CSng(tgCffCntr(ilCff).CffRec.lActPrice) * llNewPrice) / llOldPrice
                                                End If
                                                slSpotPrice = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                                                mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
                                                mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
                                            End If
                                        End If
                                        ilCff = tgCffCntr(ilCff).iNextCff
                                    Loop
                                    mSetAcqOrSpotPrice "A", ilClf + 1, slSpotPrice, ilPRICEINDEX
                                Else
                                    For llDate = llSDate To llEDate Step 7
                                        ilRepeat = False
                                        ilCff = tgClfCntr(ilClf).iFirstCff
                                        Do While ilCff <> -1
                                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                                llFlStartDate = tgCffCntr(ilCff).lStartDate
                                                llFlEndDate = tgCffCntr(ilCff).lEndDate
                                                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                                                    If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (ilRepeat) Then
                                                        If llTPrice <= 0 Then
                                                            If (slLineType = "A") Then
                                                                llPrice = llNewPrice '/ ilTHidden
                                                            Else
                                                                llPrice = (llNewPrice * llPkSpots) / llTHidden
                                                            End If
                                                        Else
                                                            llPrice = (CSng(tgCffCntr(ilCff).CffRec.lActPrice) * llNewPrice) / llOldPrice
                                                        End If
                                                        If llFlStartDate + 6 >= llFlEndDate Then
                                                            tgCffCntr(ilCff).CffRec.sPriceType = "T"
                                                            If tgCffCntr(ilCff).CffRec.lActPrice <> llPrice Then
                                                                tgClfCntr(ilClf).sLineChgd = "Y"
                                                            End If
                                                            tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                                                            mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
                                                            mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
                                                            Exit Do
                                                        Else
                                                            mGetFlightDays ilClf + 1, ilOVDays()
                                                            mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
                                                            llFlSpots = mGetFlightSpots(ilClf + 1, llDate, llFlPrice)
                                                            If slWDFlag = "D" Then
                                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDailySpots()
                                                            Else
                                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDays()
                                                            End If
                                                            ilCff = tgClfCntr(ilClf).iFirstCff
                                                            ilRepeat = True
                                                        End If
                                                    Else
                                                        Exit Do
                                                    End If
                                                Else
                                                    ilCff = tgCffCntr(ilCff).iNextCff
                                                End If
                                            Else
                                                ilCff = tgCffCntr(ilCff).iNextCff
                                            End If
                                        Loop
                                    Next llDate
                                End If
                            End If
                        Next ilClf
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                    'Check prices- package line price should match NewPrice
                    '              If not, try to adjust a hidden line
                    If llSDate <= 0 Then
                        ilPkCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                        Do While ilPkCff <> -1
                            If (tgCffCntr(ilPkCff).iStatus = 0) Or (tgCffCntr(ilPkCff).iStatus = 1) Then
                                If tgCffCntr(ilPkCff).CffRec.sPriceType = "T" Then
                                    If llNewPrice <> tgCffCntr(ilPkCff).CffRec.lActPrice Then
                                        llPkFlStartDate = tgCffCntr(ilPkCff).lStartDate
                                        llPkFlEndDate = tgCffCntr(ilPkCff).lEndDate
                                        For llDate = llPkFlStartDate To llPkFlEndDate Step 7
                                            '6/6/16: Replaced GoSub
                                            'GoSub mBalanceHidden
                                            mBalanceHidden llAdjPrice, llNewPrice, ilPkCff, ilPkLnRowNo, ilLoop, llDate, llFlPrice, llFlSpots, ilRepeat, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDays(), ilOVDays(), slWDFlag, ilDailySpots(), llWkNoSpots, ilLastCffUsed
                                        Next llDate
                                    End If
                                End If
                            End If
                            ilPkCff = tgCffCntr(ilPkCff).iNextCff
                        Loop
                    Else
                        For llDate = llSDate To llEDate Step 7
                            ilPkCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                            Do While ilPkCff <> -1
                                If (tgCffCntr(ilPkCff).iStatus = 0) Or (tgCffCntr(ilPkCff).iStatus = 1) Then
                                    llPkFlStartDate = tgCffCntr(ilPkCff).lStartDate
                                    llPkFlEndDate = tgCffCntr(ilPkCff).lEndDate
                                    If (llDate >= llPkFlStartDate) And (llDate <= llPkFlEndDate) Then
                                        If (tgCffCntr(ilPkCff).CffRec.sPriceType = "T") Then
                                            If llNewPrice <> tgCffCntr(ilPkCff).CffRec.lActPrice Then
                                                '6/6/16: Replaced GoSub
                                                'GoSub mBalanceHidden
                                                mBalanceHidden llAdjPrice, llNewPrice, ilPkCff, ilPkLnRowNo, ilLoop, llDate, llFlPrice, llFlSpots, ilRepeat, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDays(), ilOVDays(), slWDFlag, ilDailySpots(), llWkNoSpots, ilLastCffUsed
                                            End If
                                        End If
                                        Exit Do
                                    Else
                                        ilPkCff = tgCffCntr(ilPkCff).iNextCff
                                    End If
                                Else
                                    ilPkCff = tgCffCntr(ilPkCff).iNextCff
                                End If
                            Loop
                        Next llDate
                    End If
                End If
                Exit Function
            'End If
        End If
    Next ilLoop
    Exit Function
'mAdjustHiddenPrice:
'    mAdjStdPkPrice = True
'    'Determine if all prices previously set to zero only
'    llTSpots = 0
'    llTPrice = 0
'    llTHidden = 0
'    ilIndex = tgPackLn(ilLoop).iIndex
'    Do While ilIndex >= 0
'        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'            ilLnRowNo = ilClf + 1
'            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                'ilTHidden = ilTHidden + 1
'                If llSDate <= 0 Then
'                    ilCff = tgClfCntr(ilClf).iFirstCff
'                    Do While ilCff <> -1
'                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                            If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
'                                llTPrice = llTPrice + tgCffCntr(ilCff).CffRec.lActPrice
'                                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                    For ilDay = 0 To 6 Step 1
'                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                            llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                        End If
'                                    Next ilDay
'                                Else
'                                    llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                End If
'                            End If
'                        End If
'                        ilCff = tgCffCntr(ilCff).iNextCff
'                    Loop
'                Else
'                    For llDate = llSDate To llEDate Step 7
'                        ilCff = tgClfCntr(ilClf).iFirstCff
'                        Do While ilCff <> -1
'                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
'                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
'                                llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                                    If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Then
'                                        llTPrice = llTPrice + tgCffCntr(ilCff).CffRec.lActPrice
'                                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                            For ilDay = 0 To 6 Step 1
'                                                If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                                    llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                                End If
'                                            Next ilDay
'                                        Else
'                                            llTHidden = llTHidden + tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                        End If
'                                    End If
'                                    Exit Do
'                                Else
'                                    ilCff = tgCffCntr(ilCff).iNextCff
'                                End If
'                            Else
'                                ilCff = tgCffCntr(ilCff).iNextCff
'                            End If
'                        Loop
'                    Next llDate
'                End If
'            End If
'        Next ilClf
'        ilIndex = tgPackLn(ilIndex).iIndex
'    Loop
'    '
'    'Coded for even distribution only- need to code other distributions when original price is zero.
'    '
'    ilIndex = tgPackLn(ilLoop).iIndex
'    Do While ilIndex >= 0
'        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'            ilLnRowNo = ilClf + 1
'            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                If llSDate <= 0 Then
'                    ilCff = tgClfCntr(ilClf).iFirstCff
'                    Do While ilCff <> -1
'                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                            If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
'                                If llTPrice = 0 Then
'                                    If (slLineType = "A") Then
'                                        If tgCffCntr(ilCff).CffRec.lActPrice <> llNewPrice Then
'                                            tgClfCntr(ilClf).sLineChgd = "Y"
'                                        End If
'                                        tgCffCntr(ilCff).CffRec.lActPrice = llNewPrice '/ ilTHidden
'                                    Else
'                                        If tgCffCntr(ilCff).CffRec.lActPrice <> (llNewPrice * llPkSpots) / llTHidden Then
'                                            tgClfCntr(ilClf).sLineChgd = "Y"
'                                        End If
'                                        tgCffCntr(ilCff).CffRec.lActPrice = (llNewPrice * llPkSpots) / llTHidden
'                                    End If
'                                Else
'                                    If tgCffCntr(ilCff).CffRec.lActPrice <> (CSng(tgCffCntr(ilCff).CffRec.lActPrice) * llNewPrice) / llOldPrice Then
'                                        tgClfCntr(ilClf).sLineChgd = "Y"
'                                    End If
'                                    tgCffCntr(ilCff).CffRec.lActPrice = (CSng(tgCffCntr(ilCff).CffRec.lActPrice) * llNewPrice) / llOldPrice
'                                End If
'                                mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
'                                mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
'                            End If
'                        End If
'                        ilCff = tgCffCntr(ilCff).iNextCff
'                    Loop
'                Else
'                    For llDate = llSDate To llEDate Step 7
'                        ilRepeat = False
'                        ilCff = tgClfCntr(ilClf).iFirstCff
'                        Do While ilCff <> -1
'                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
'                                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
'                                llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                                    If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (ilRepeat) Then
'                                        If llTPrice <= 0 Then
'                                            If (slLineType = "A") Then
'                                                llPrice = llNewPrice '/ ilTHidden
'                                            Else
'                                                llPrice = (llNewPrice * llPkSpots) / llTHidden
'                                            End If
'                                        Else
'                                            llPrice = (CSng(tgCffCntr(ilCff).CffRec.lActPrice) * llNewPrice) / llOldPrice
'                                        End If
'                                        If llFlStartDate + 6 >= llFlEndDate Then
'                                            tgCffCntr(ilCff).CffRec.sPriceType = "T"
'                                            If tgCffCntr(ilCff).CffRec.lActPrice <> llPrice Then
'                                                tgClfCntr(ilClf).sLineChgd = "Y"
'                                            End If
'                                            tgCffCntr(ilCff).CffRec.lActPrice = llPrice
'                                            mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
'                                            mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
'                                            Exit Do
'                                        Else
'                                            mGetFlightDays ilClf + 1, ilOVDays()
'                                            mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
'                                            llFlSpots = mGetFlightSpots(ilClf + 1, llDate, llFlPrice)
'                                            If slWDFlag = "D" Then
'                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDailySpots()
'                                            Else
'                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDays()
'                                            End If
'                                            ilCff = tgClfCntr(ilClf).iFirstCff
'                                            ilRepeat = True
'                                        End If
'                                    Else
'                                        Exit Do
'                                    End If
'                                Else
'                                    ilCff = tgCffCntr(ilCff).iNextCff
'                                End If
'                            Else
'                                ilCff = tgCffCntr(ilCff).iNextCff
'                            End If
'                        Loop
'                    Next llDate
'                End If
'            End If
'        Next ilClf
'        ilIndex = tgPackLn(ilIndex).iIndex
'    Loop
'    'Check prices- package line price should match NewPrice
'    '              If not, try to adjust a hidden line
'    If llSDate <= 0 Then
'        ilPkCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'        Do While ilPkCff <> -1
'            If (tgCffCntr(ilPkCff).iStatus = 0) Or (tgCffCntr(ilPkCff).iStatus = 1) Then
'                If tgCffCntr(ilPkCff).CffRec.sPriceType = "T" Then
'                    If llNewPrice <> tgCffCntr(ilPkCff).CffRec.lActPrice Then
'                        llPkFlStartDate = tgCffCntr(ilPkCff).lStartDate
'                        llPkFlEndDate = tgCffCntr(ilPkCff).lEndDate
'                        For llDate = llPkFlStartDate To llPkFlEndDate Step 7
'                            GoSub mBalanceHidden
'                        Next llDate
'                    End If
'                End If
'            End If
'            ilPkCff = tgCffCntr(ilPkCff).iNextCff
'        Loop
'    Else
'        For llDate = llSDate To llEDate Step 7
'            ilPkCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'            Do While ilPkCff <> -1
'                If (tgCffCntr(ilPkCff).iStatus = 0) Or (tgCffCntr(ilPkCff).iStatus = 1) Then
'                    llPkFlStartDate = tgCffCntr(ilPkCff).lStartDate
'                    llPkFlEndDate = tgCffCntr(ilPkCff).lEndDate
'                    If (llDate >= llPkFlStartDate) And (llDate <= llPkFlEndDate) Then
'                        If (tgCffCntr(ilPkCff).CffRec.sPriceType = "T") Then
'                            If llNewPrice <> tgCffCntr(ilPkCff).CffRec.lActPrice Then
'                                GoSub mBalanceHidden
'                            End If
'                        End If
'                        Exit Do
'                    Else
'                        ilPkCff = tgCffCntr(ilPkCff).iNextCff
'                    End If
'                Else
'                    ilPkCff = tgCffCntr(ilPkCff).iNextCff
'                End If
'            Loop
'        Next llDate
'    End If
'    Return
'mBalanceHidden:
'    llAdjPrice = llNewPrice - tgCffCntr(ilPkCff).CffRec.lActPrice
'    llFlSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llFlPrice)
'    llAdjPrice = llFlSpots * llAdjPrice
'    ilIndex = tgPackLn(ilLoop).iIndex
'    Do While ilIndex >= 0
'        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'            ilLnRowNo = ilClf + 1
'            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                ilRepeat = False
'                ilCff = tgClfCntr(ilClf).iFirstCff
'                Do While ilCff <> -1
'                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                        llFlStartDate = tgCffCntr(ilCff).lStartDate
'                        llFlEndDate = tgCffCntr(ilCff).lEndDate
'                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                            If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (ilRepeat) Then
'                                llFlSpots = mGetFlightSpots(ilClf + 1, llDate, llFlPrice)
'                                If (llFlSpots > 0) And (llFlPrice > 0) Then
'                                    If ((Abs(llAdjPrice) Mod llFlSpots) = 0) And ((tgCffCntr(ilCff).CffRec.lActPrice + llAdjPrice / llFlSpots) >= 0) Then
'                                        If llFlStartDate + 6 >= llFlEndDate Then
'                                            tgCffCntr(ilCff).CffRec.sPriceType = "T"
'                                            If tgCffCntr(ilCff).CffRec.lActPrice <> tgCffCntr(ilCff).CffRec.lActPrice + llAdjPrice / llFlSpots Then
'                                                tgClfCntr(ilClf).sLineChgd = "Y"
'                                            End If
'                                            tgCffCntr(ilCff).CffRec.lActPrice = tgCffCntr(ilCff).CffRec.lActPrice + llAdjPrice / llFlSpots
'                                            mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
'                                            mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
'                                            Return
'                                        Else
'                                            mGetFlightDays ilClf + 1, ilOVDays()
'                                            mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
'
'                                            llFlSpots = mGetFlightSpots(ilClf + 1, llDate, llFlPrice)
'                                            If slWDFlag = "D" Then
'                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDailySpots()
'                                            Else
'                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDays()
'                                            End If
'                                            ilRepeat = True
'                                        End If
'                                    Else
'                                        Exit Do
'                                    End If
'                                Else
'                                    Exit Do
'                                End If
'                            Else
'                                Exit Do
'                            End If
'                        Else
'                            ilCff = tgCffCntr(ilCff).iNextCff
'                        End If
'                    Else
'                        ilCff = tgCffCntr(ilCff).iNextCff
'                    End If
'                Loop
'            End If
'        Next ilClf
'        ilIndex = tgPackLn(ilIndex).iIndex
'    Loop
'    Return
End Function

Sub mAvailCount(hlSsf As Integer, hlSdf As Integer, hlLcf As Integer, hlAsf As Integer, ilLineNo As Integer, ilVefCode As Integer, ilRdfCode As Integer, llOvStartTime As Long, llOvEndTime As Long, ilLnLen As Integer, ilDays() As Integer, llInStartDate As Long, llInEndDate As Long, llSpotCount As Long, ilAvail As Integer, ilInvCount As Integer, ilCompUnitSold As Integer, ilNoAvailsForBreak As Integer, ilNoAvailsForNBB As Integer, llCompStartTime As Long, llCompEndTime As Long, ilIncludeMissed As Integer, ilAdfCode As Integer, ilAdfCodeCount As Integer, ilCompAvailCount As Integer)
'
'
'   lgSchChfCode(I)
'   igComp1Code(I)
'   igComp2Code(I)
'

    Dim ilType As Integer
    Dim slType As String
    Dim ilDate0 As Integer
    Dim ilDate1 As Integer
    Dim slDate As String
    Dim llDate As Long
    Dim ilDay As Integer
    Dim ilEvt As Integer
    Dim ilRet As Integer
    Dim ilSpot As Integer
    Dim llTime As Long
    Dim ilLoop As Integer
    Dim llStartTime As Long
    Dim llEndTime As Long
    Dim ilLen As Integer
    Dim ilUnits As Integer
    Dim ilNo10 As Integer
    Dim ilNo30 As Integer
    Dim ilNo60 As Integer
    Dim ilLtfCode As Integer
    Dim ilAvailOk As Integer
    Dim ilPass As Integer
    Dim ilSpotOK As Integer
    Dim llLoopDate As Long
    Dim ilWeekDay As Integer
    Dim llLatestDate As Long
    Dim ilIndex As Integer
    Dim ilVpfIndex As Integer
    Dim ilVefIndex As Integer
    Dim ilVef As Integer
    Dim ilRdfIndex As Integer
    Dim ilRdf As Integer
    Dim il30InvCount As Integer
    Dim il60InvCount As Integer
    Dim il10InvCount As Integer
    Dim ilLenInvCount As Integer    'Number of line lengths that can fit into the break (ignoring and spots booked in break)
    Dim il30Avail As Integer
    Dim il60Avail As Integer
    Dim il10Avail As Integer
    Dim ilLenAvail As Integer       'Number of line lengths that can fit in the remainer of the break
    Dim il30Count As Integer
    Dim il60Count As Integer
    Dim il10Count As Integer
    Dim ilLenCount As Integer       'Number of books spots
    Dim ilRUAvail As Integer
    Dim slCntrType As String
    Dim ilPctTrade As Integer
    Dim slSQLQuery As String
    Dim clf_rst As ADODB.Recordset
    Dim ilAnf As Integer
    Dim tlChf As CHF
    Dim ilChfRecLen As Integer
    Dim slLength As String
    Dim llCompTime As Long
    Dim llPrevAvailTime As Long
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim ilBreakLen As Integer
    Dim ilBreakUnits As Integer
    Dim blByLnLen As Boolean
    
    If ilVefCode <= 0 Then
        Exit Sub
    End If
    blByLnLen = True
    llStartDate = llInStartDate
    If llStartDate < lmMonNowDate Then
        llStartDate = lmMonNowDate
    End If
    llEndDate = llInEndDate
    ilChfRecLen = Len(tlChf)
    
    ReDim ilEvtType(0 To 14) As Integer
    imSdfRecLen = Len(tmSdf)
    llSpotCount = 0
    ilAvail = -29999 '0
    ilInvCount = 0
    ilCompUnitSold = 0
    ilNoAvailsForBreak = 0
    ilNoAvailsForNBB = 0
    ilAdfCodeCount = 0
    If bgCntrFirstCallToVpfFind Then
        ilVpfIndex = gVpfFind(Contract, ilVefCode)
        bgCntrFirstCallToVpfFind = False
    Else
        ilVpfIndex = gVpfFindIndex(ilVefCode)
    End If
    If ilVpfIndex < 0 Then
        Exit Sub
    End If
    gUnpackLength tgVpf(ilVpfIndex).iSCompLen(0), tgVpf(ilVpfIndex).iSCompLen(1), "3", False, slLength
    llCompTime = CLng(gLengthToCurrency(slLength))
    
    ilRdfIndex = -1
    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) Step 1
    '    If ilRdfCode = tgMRdf(ilRdf).iCode Then
        ilRdf = gBinarySearchRdf(ilRdfCode)
        If ilRdf <> -1 Then
            ilRdfIndex = ilRdf
    '        Exit For
        End If
    'Next ilRdf
    If ilRdfIndex = -1 Then
        Exit Sub
    End If
    ilVefIndex = -1
    'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
    '    If tgMVef(ilVef).iCode = ilVefCode Then
        ilVef = gBinarySearchVef(ilVefCode)
        If ilVef <> -1 Then
            ilVefIndex = ilVef
            'Exit For
        End If
    'Next ilVef
    If ilVefIndex = -1 Then
        Exit Sub
    End If
    'If imToggleAvail <> -1 Then
    '    If ilLnLen = 10 Then
    '        imToggleAvail = 2
    '    Else
    '        imToggleAvail = 1
    '    End If
    'End If
    If (imToggleAvail <> -1) And (imLnRowNo > 0) Then
        If Val(smLnSave(16, imLnRowNo)) = 10 Then
            If imToggleAvail = 1 Then
                imToggleAvail = 2
            End If
        Else
            If imToggleAvail = 2 Then
                imToggleAvail = 1
            End If
        End If
    End If
    
    If tgUrf(0).iRemoteUserID > 0 Then
        ilRUAvail = -29999 '0
        'If (tmAsf.iRdfRemoteID <> tgMRdf(ilRdfIndex).iRemoteID) Or (tmAsf.iRdfAutoCode <> tgMRdf(ilRdfIndex).iAutoCode) Or (tmAsf.iVefRemoteID <> tgMVef(ilVefIndex).iRemoteID) Or (tmAsf.iVefAutoCode <> tgMVef(ilVefIndex).iAutoCode) Then
        If (tmAsf.iRdfCode <> tgMRdf(ilRdfIndex).iCode) Or (tmAsf.iVefCode <> tgMVef(ilVefIndex).iCode) Then
            'Obtain avail summary from the avail summary file (asf.btr)
            imAsfRecLen = Len(tmAsf)
            'tmRUISrchKey.iRemoteID = 0  'tgMVef(ilVefIndex).iRemoteID
            tmRUISrchKey.iCode = tgMVef(ilVefIndex).iCode   'tgMVef(ilVefIndex).iAutoCode
            ilRet = btrGetEqual(hlAsf, tmAsf, imAsfRecLen, tmRUISrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            Do While (ilRet = BTRV_ERR_NONE) And (tmAsf.iVefCode = tgMVef(ilVefIndex).iCode)
                If (tmAsf.iRdfCode = tgMRdf(ilRdfIndex).iCode) Then
                    gUnpackDateLong tmAsf.iStartWkDate(0), tmAsf.iStartWkDate(1), llDate
                    ilIndex = (llStartDate - llDate) \ 7 + 1
                    If (ilIndex >= 1) And (ilIndex <= 26) Then
                        If ilLnLen = 60 Then
                            ilRUAvail = Asc(tmAsf.sAvail60(ilIndex))
                        ElseIf ilLnLen = 30 Then
                            ilRUAvail = Asc(tmAsf.sAvail30(ilIndex))
                        ElseIf ilLnLen = 10 Then
                            ilRUAvail = Asc(tmAsf.sAvail10(ilIndex))
                        End If
                    End If
                    Exit Do
                End If
                ilRet = btrGetNext(hlAsf, tmAsf, imAsfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            Loop
        Else
            gUnpackDateLong tmAsf.iStartWkDate(0), tmAsf.iStartWkDate(1), llDate
            ilIndex = (llStartDate - llDate) \ 7 + 1
            If (ilIndex >= 1) And (ilIndex <= 26) Then
                If ilLnLen = 60 Then
                    ilRUAvail = Asc(tmAsf.sAvail60(ilIndex))
                ElseIf ilLnLen = 30 Then
                    ilRUAvail = Asc(tmAsf.sAvail30(ilIndex))
                ElseIf ilLnLen = 10 Then
                    ilRUAvail = Asc(tmAsf.sAvail10(ilIndex))
                End If
            End If
        End If
        If ilRUAvail = 255 Then
            ilAvail = -29999
        ElseIf ilRUAvail >= 200 Then
            ilAvail = -1 * (ilRUAvail - 200)
        Else
            ilAvail = ilRUAvail
        End If
        Exit Sub
    End If
    llLatestDate = gGetLatestLCFDate(hlLcf, "C", ilVefCode)
    'set the type of events to get fro the day (only Contract avails)
    For ilLoop = LBound(ilEvtType) To UBound(ilEvtType) Step 1
        ilEvtType(ilLoop) = False
    Next ilLoop
    ilEvtType(2) = True
    il30InvCount = 0
    il30Avail = 0
    il30Count = 0
    il60InvCount = 0
    il60Avail = 0
    il60Count = 0
    il10InvCount = 0
    il10Avail = 0
    il10Count = 0
    ilLenInvCount = 0
    ilLenAvail = 0
    ilLenCount = 0
    ilCompUnitSold = 0
    ilNoAvailsForBreak = 0
    ilAdfCodeCount = 0
    llCompStartTime = 0
    llCompEndTime = 0
    ilCompAvailCount = 0
    For llLoopDate = llStartDate To llEndDate Step 1
        llPrevAvailTime = -1
        slDate = Format$(llLoopDate, "m/d/yy")
        ilDay = gWeekDayStr(slDate)
        If ilDays(ilDay) Then
            gPackDate slDate, ilDate0, ilDate1
            imSsfRecLen = Len(tmSsf) 'Max size of variable length record
            If tgMVef(ilVefIndex).sType <> "G" Then
                tmSsfSrchKey.iType = ilType
                tmSsfSrchKey.iVefCode = ilVefCode
                tmSsfSrchKey.iDate(0) = ilDate0
                tmSsfSrchKey.iDate(1) = ilDate1
                tmSsfSrchKey.iStartTime(0) = 0
                tmSsfSrchKey.iStartTime(1) = 0
                ilRet = gSSFGetGreaterOrEqual(hlSsf, tmSsf, imSsfRecLen, tmSsfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)

            Else
                tmSsfSrchKey2.iVefCode = ilVefCode
                tmSsfSrchKey2.iDate(0) = ilDate0
                tmSsfSrchKey2.iDate(1) = ilDate1
                ilRet = gSSFGetGreaterOrEqualKey2(hlSsf, tmSsf, imSsfRecLen, tmSsfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)
                ilType = tmSsf.iType
            End If
            If (ilRet <> BTRV_ERR_NONE) Or (tmSsf.iType <> ilType) Or (tmSsf.iVefCode <> ilVefCode Or (tmSsf.iDate(0) <> ilDate0) And (tmSsf.iDate(1) = ilDate1)) Then
                If (llLoopDate > llLatestDate) Then
                    ReDim tlLLC(0 To 0) As LLC  'Merged library names
                    If tgMVef(ilVefIndex).sType <> "G" Then
                        ilWeekDay = gWeekDayStr(slDate) + 1 '1=Monday TFN; 2=Tues,...7=Sunday TFN
                        If (tgSsf(ilWeekDay - 1).iVefCode = ilVefCode) Then
                            tmSsf = tgSsf(ilWeekDay - 1)
                            tmSsf.iDate(0) = ilDate0
                            tmSsf.iDate(1) = ilDate1
                        Else
                            If ilWeekDay = 1 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNMO", "12M", "12M", ilEvtType(), tlLLC())
                            ElseIf ilWeekDay = 2 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNTU", "12M", "12M", ilEvtType(), tlLLC())
                            ElseIf ilWeekDay = 3 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNWE", "12M", "12M", ilEvtType(), tlLLC())
                            ElseIf ilWeekDay = 4 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNTH", "12M", "12M", ilEvtType(), tlLLC())
                            ElseIf ilWeekDay = 5 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNFR", "12M", "12M", ilEvtType(), tlLLC())
                            ElseIf ilWeekDay = 6 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNSA", "12M", "12M", ilEvtType(), tlLLC())
                            ElseIf ilWeekDay = 7 Then
                                 ilRet = gBuildEventDay(ilType, "C", ilVefCode, "TFNSU", "12M", "12M", ilEvtType(), tlLLC())
                            End If
                            tmSsf.iType = 0
                            tmSsf.iVefCode = ilVefCode
                            tmSsf.iDate(0) = ilDate0
                            tmSsf.iDate(1) = ilDate1
                            gPackTime tlLLC(0).sStartTime, tmSsf.iStartTime(0), tmSsf.iStartTime(1)
                            tmSsf.iCount = 0
                            'tmSsf.iNextTime(0) = 1  'Time not defined
                            'tmSsf.iNextTime(1) = 0

                            For ilIndex = LBound(tlLLC) To UBound(tlLLC) - 1 Step 1

                                tmAvail.iRecType = Val(tlLLC(ilIndex).sType)
                                gPackTime tlLLC(ilIndex).sStartTime, tmAvail.iTime(0), tmAvail.iTime(1)
                                tmAvail.iLtfCode = tlLLC(ilIndex).iLtfCode
                                tmAvail.iAvInfo = tlLLC(ilIndex).iAvailInfo Or tlLLC(ilIndex).iUnits
                                tmAvail.iLen = CInt(gLengthToCurrency(tlLLC(ilIndex).sLength))
                                tmAvail.ianfCode = Val(tlLLC(ilIndex).sName)
                                tmAvail.iNoSpotsThis = 0
                                tmAvail.iOrigUnit = 0
                                tmAvail.iOrigLen = 0
                                tmSsf.iCount = tmSsf.iCount + 1
                                tmSsf.tPas(ADJSSFPASBZ + tmSsf.iCount) = tmAvail
                            Next ilIndex
                            tgSsf(ilWeekDay - 1) = tmSsf
                        End If
                    Else
                        tmSsf.iType = ilType
                        tmSsf.iVefCode = ilVefCode
                        tmSsf.iDate(0) = ilDate0
                        tmSsf.iDate(1) = ilDate1
                        gPackTime tlLLC(0).sStartTime, tmSsf.iStartTime(0), tmSsf.iStartTime(1)
                        tmSsf.iCount = 0
                        'tmSsf.iNextTime(0) = 1  'Time not defined
                        'tmSsf.iNextTime(1) = 0
                    End If
                    ilRet = BTRV_ERR_NONE
                End If
            End If
        End If
        Do While (ilRet = BTRV_ERR_NONE) And (tmSsf.iType = ilType) And (tmSsf.iVefCode = ilVefCode And (tmSsf.iDate(0) = ilDate0) And (tmSsf.iDate(1) = ilDate1) And (ilDays(ilDay)))
            gUnpackDateLong tmSsf.iDate(0), tmSsf.iDate(1), llDate
            ilEvt = 1
            Do While ilEvt <= tmSsf.iCount
               LSet tmProg = tmSsf.tPas(ADJSSFPASBZ + ilEvt)
                If tmProg.iRecType = 1 Then    'Program (not working for nested prog)
                    ilLtfCode = tmProg.iLtfCode
                ElseIf (tmProg.iRecType >= 2) And (tmProg.iRecType <= 2) Then 'Contract Avails only
                    LSet tmAvail = tmSsf.tPas(ADJSSFPASBZ + ilEvt)
                    gUnpackTimeLong tmAvail.iTime(0), tmAvail.iTime(1), False, llTime
                    'Determine which rate card program this is associated with
                    ilAvailOk = False
                    If (llOvEndTime > 0) Then
                        If (llTime >= llOvStartTime) And (llTime < llOvEndTime) Then
                            ilAvailOk = True
                            'Exit For
                        End If
                    Else
                        If (tgMRdf(ilRdfIndex).iLtfCode(0) <> 0) Or (tgMRdf(ilRdfIndex).iLtfCode(1) <> 0) Or (tgMRdf(ilRdfIndex).iLtfCode(2) <> 0) Then
                            If (ilLtfCode = tgMRdf(ilRdfIndex).iLtfCode(0)) Or (ilLtfCode = tgMRdf(ilRdfIndex).iLtfCode(1)) Or (ilLtfCode = tgMRdf(ilRdfIndex).iLtfCode(1)) Then
                                ilAvailOk = False    'True- code later
                            End If
                        Else
                            For ilLoop = LBound(tgMRdf(ilRdfIndex).iStartTime, 2) To UBound(tgMRdf(ilRdfIndex).iStartTime, 2) Step 1 'Row
                                If (tgMRdf(ilRdfIndex).iStartTime(0, ilLoop) <> 1) Or (tgMRdf(ilRdfIndex).iStartTime(1, ilLoop) <> 0) Then
                                    gUnpackTimeLong tgMRdf(ilRdfIndex).iStartTime(0, ilLoop), tgMRdf(ilRdfIndex).iStartTime(1, ilLoop), False, llStartTime
                                    gUnpackTimeLong tgMRdf(ilRdfIndex).iEndTime(0, ilLoop), tgMRdf(ilRdfIndex).iEndTime(1, ilLoop), True, llEndTime
                                    'If (llTime >= llStartTime) And (llTime < llEndTime) And (tgMRdf(ilRdfIndex).sWkDays(ilLoop, ilDay + 1) = "Y") Then
                                    If (llTime >= llStartTime) And (llTime < llEndTime) And (tgMRdf(ilRdfIndex).sWkDays(ilLoop, ilDay) = "Y") Then
                                        ilAvailOk = True
                                        Exit For
                                    End If
                                End If
                            Next ilLoop
                        End If
                    End If
                    If ilAvailOk Then
                        If tgMRdf(ilRdfIndex).sInOut = "I" Then   'Book into
                            If tmAvail.ianfCode <> tgMRdf(ilRdfIndex).ianfCode Then
                                ilAvailOk = False
                            End If
                        ElseIf tgMRdf(ilRdfIndex).sInOut = "O" Then   'Exclude
                            If tmAvail.ianfCode = tgMRdf(ilRdfIndex).ianfCode Then
                                ilAvailOk = False
                            End If
                        End If
                    End If
                    If ilAvailOk Then
                        If llTime < llCompStartTime Then
                            llCompStartTime = llTime
                        End If
                        If llTime > llCompEndTime Then
                            llCompEndTime = llTime
                        End If
                        ilNoAvailsForBreak = ilNoAvailsForBreak + 1
                        If llPrevAvailTime = -1 Then
                            llPrevAvailTime = llTime
                            ilCompAvailCount = ilCompAvailCount + 1
                        Else
                            If llTime >= llPrevAvailTime + llCompTime Then
                                ilCompAvailCount = ilCompAvailCount + 1
                                llPrevAvailTime = llTime
                            End If
                        End If
                        ilLen = tmAvail.iLen
                        ilUnits = tmAvail.iAvInfo And &H1F
                        ilNo30 = 0
                        ilNo60 = 0
                        ilNo10 = 0
                        If ilLen = 10 Then
                            ilNo10 = 1
                            il10InvCount = il10InvCount + ilNo10
                        End If
                        If tgVpf(ilVpfIndex).sSSellOut = "B" Then
                            'Convert inventory to number of 30's and 60's
                            Do While (ilLen >= 30) And (ilUnits > 0)
                                ilNo30 = ilNo30 + 1
                                ilLen = ilLen - 30
                                ilUnits = ilUnits - 1
                            Loop
                            il30InvCount = il30InvCount + ilNo30
                            ilNo30 = 0
                            ilNo60 = 0
                            ilLen = tmAvail.iLen
                            ilUnits = tmAvail.iAvInfo And &H1F
                            Do While (ilLen >= 60) And (ilUnits > 0)
                                ilNo60 = ilNo60 + 1
                                ilLen = ilLen - 60
                                ilUnits = ilUnits - 1
                            Loop
                            Do While (ilLen >= 30) And (ilUnits > 0)
                                ilNo30 = ilNo30 + 1
                                ilLen = ilLen - 30
                                ilUnits = ilUnits - 1
                            Loop
                            il60InvCount = il60InvCount + ilNo60
                            ilLen = tmAvail.iLen
                            ilUnits = tmAvail.iAvInfo And &H1F
                            Do While (ilLen >= ilLnLen) And (ilUnits > 0)
                                ilLenInvCount = ilLenInvCount + 1
                                ilLen = ilLen - ilLnLen
                                ilUnits = ilUnits - 1
                            Loop
                        ElseIf tgVpf(ilVpfIndex).sSSellOut = "U" Then
                            'Count 30 or 60 and set flag if neither
                            Do While (ilLen >= 30) And (ilUnits > 0)
                                ilNo30 = ilNo30 + 1
                                ilLen = ilLen - 30
                                ilUnits = ilUnits - 1
                            Loop
                            il30InvCount = il30InvCount + ilNo30
                            ilNo30 = 0
                            ilNo60 = 0
                            ilLen = tmAvail.iLen
                            ilUnits = tmAvail.iAvInfo And &H1F
                            Do While (ilLen >= 60) And (ilUnits > 0)
                                ilNo60 = ilNo60 + 1
                                ilLen = ilLen - 60
                                ilUnits = ilUnits - 1
                            Loop
                            Do While (ilLen >= 30) And (ilUnits > 0)
                                ilNo30 = ilNo30 + 1
                                ilLen = ilLen - 30
                                ilUnits = ilUnits - 1
                            Loop
                            il60InvCount = il60InvCount + ilNo60
                            ilUnits = tmAvail.iAvInfo And &H1F
                            Do While (ilUnits > 0)
                                ilLenInvCount = ilLenInvCount + 1
                                ilUnits = ilUnits - 1
                            Loop
                        ElseIf tgVpf(ilVpfIndex).sSSellOut = "M" Then
                            'Count 30 or 60 and set flag if neither
                            If ilLen = 60 Then
                                ilNo60 = 1
                            ElseIf ilLen = 30 Then
                                ilNo30 = 1
                            Else
                            End If
                            il30InvCount = il30InvCount + ilNo30
                            il60InvCount = il60InvCount + ilNo60
                            ilLen = tmAvail.iLen
                            If ilLen = ilLnLen Then
                                ilLenInvCount = ilLenInvCount + 1
                            End If
                        ElseIf tgVpf(ilVpfIndex).sSSellOut = "T" Then
                        End If
                        il30Avail = il30Avail + ilNo30
                        il60Avail = il60Avail + ilNo60
                        il10Avail = il10Avail + ilNo10
                        If tmAvail.iAvInfo And &H1F >= 3 Then
                            ilNoAvailsForNBB = ilNoAvailsForNBB + 1
                        End If
                        ilBreakLen = tmAvail.iLen
                        ilBreakUnits = tmAvail.iAvInfo And &H1F
                        For ilSpot = 1 To tmAvail.iNoSpotsThis Step 1
                            LSet tmSpot = tmSsf.tPas(ADJSSFPASBZ + ilEvt + ilSpot)
                            ilSpotOK = True                             'assume spot is OK to include
                            '4/12/18: The below test will not always work as the rank (proiority) might be altered if spot in last week or spot must be in first position in break
                            If (tmSpot.iRank And RANKMASK) = DIRECTRESPONSERANK Then      'DR
                                If (Asc(tgSaf(0).sFeatures4) And AVAILINCLDEDIRECTRESPONSES) <> AVAILINCLDEDIRECTRESPONSES Then
                                    ilSpotOK = False
                                End If
                            End If
                            If (tmSpot.iRank And RANKMASK) = REMNANTRANK Then     'Remnant
                                If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDEREMNANT) <> AVAILINCLUDEREMNANT Then
                                    ilSpotOK = False
                                End If
                            End If
                            If (tmSpot.iRank And RANKMASK) = PERINQUIRYRANK Then      'PI
                                If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDEPERINQUIRY) <> AVAILINCLUDEPERINQUIRY Then
                                    ilSpotOK = False
                                End If
                            End If
                            If (tmSpot.iRank And RANKMASK) = EXTRARANK Then '1045 Then     'Extra
                                ilSpotOK = False
                            End If
                            If (tmSpot.iRank And RANKMASK) = PROMORANK Then     'Promo
                                ilSpotOK = False
                            End If
                            If (tmSpot.iRank And RANKMASK) = PSARANK Then      'PSA
                                ilSpotOK = False
                            End If
                            If (tmSpot.iRank And RANKMASK) = RESERVATIONRANK Then     'Reservation
                                If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDERESERVATION) <> AVAILINCLUDERESERVATION Then
                                    ilSpotOK = False
                                End If
                            End If
                            If (tmSpot.iRecType And SSSPLITSEC) = SSSPLITSEC Then
                                ilSpotOK = False
                            End If
                            ilLen = tmSpot.iPosLen And &HFFF
                            If ilSpotOK Then 'continue testing other filters
                                '4/12/18: need to get spot so that can get contract type
                                'If (lgSchChfCode > 0) And (ilLineNo > 0) And ((smOrigStatus = "O") Or (smOrigStatus = "H") Or (tgChfCntr.iCntRevNo > 0)) Then
                                    tmSdfSrchKey3.lCode = tmSpot.lSdfCode
                                    ilRet = btrGetEqual(hlSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)
                                    If (tmSdf.lChfCode = lgSchChfCode) And (tmSdf.iLineNo = ilLineNo) Then
                                        ilSpotOK = False
                                    End If
                                'End If
                                If ilSpotOK Then
                                    '4/12/18
                                    'gGetContractParameters tmSdf.lChfCode, slCntrType, ilPctTrade
                                    If tmChf.lCode <> tmSdf.lChfCode Then
                                        tmChfSrchKey.lCode = tmSdf.lChfCode
                                        ilRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                                        If ilRet <> BTRV_ERR_NONE Then
                                            ilSpotOK = False
                                        Else
                                            slCntrType = tlChf.sType
                                            ilPctTrade = tlChf.iPctTrade
                                        End If
                                    End If
                                    If (slCntrType = "R") Then     'DR
                                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLDEDIRECTRESPONSES) <> AVAILINCLDEDIRECTRESPONSES Then
                                            ilSpotOK = False
                                        End If
                                    End If
                                    If (slCntrType = "T") Then     'Remnant
                                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDEREMNANT) <> AVAILINCLUDEREMNANT Then
                                            ilSpotOK = False
                                        End If
                                    End If
                                    If (slCntrType = "Q") Then     'PI
                                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDEPERINQUIRY) <> AVAILINCLUDEPERINQUIRY Then
                                            ilSpotOK = False
                                        End If
                                    End If
                                    If (tmSdf.sSpotType = "X") Then     'Extra
                                        ilSpotOK = False
                                    End If
                                    If (slCntrType = "M") Then     'Promo
                                        ilSpotOK = False
                                    End If
                                    If (slCntrType = "S") Then     'PSA
                                        ilSpotOK = False
                                    End If
                                    If (slCntrType = "V") Then     'Reservation
                                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDERESERVATION) <> AVAILINCLUDERESERVATION Then
                                            ilSpotOK = False
                                        End If
                                    End If
                                End If
                                If ilSpotOK Then
                                    ilNo30 = 0
                                    ilNo60 = 0
                                    ilNo10 = 0
                                    '5/7/18: added avail length test
                                    If ilLen = 10 And (tmAvail.iLen = 10) Then
                                        ilNo10 = 1
                                        ilLen = 0
                                    End If
                                    'ilLen = tmSpot.iPosLen And &HFFF
                                    If tgVpf(ilVpfIndex).sSSellOut = "B" Then                   'both units and seconds
                                    'Convert inventory to number of 30's and 60's
                                        Do While ilLen >= 60
                                            ilNo60 = ilNo60 + 1
                                            ilLen = ilLen - 60
                                        Loop
                                        Do While ilLen >= 30
                                            ilNo30 = ilNo30 + 1
                                            ilLen = ilLen - 30
                                        Loop
                                        '5/17/18: Handle case when spot less the 30 sec booked into an avail non-10 sec length
                                        If (ilLen > 0) And (ilLen < 30) And (tmAvail.iLen <> 10) Then
                                            ilNo30 = ilNo30 + 1
                                            ilLen = 0
                                        End If
                                        ilLen = tmSpot.iPosLen And &HFFF
                                        ilBreakLen = ilBreakLen - ilLen
                                        ilBreakUnits = ilBreakUnits - 1

                                    ElseIf tgVpf(ilVpfIndex).sSSellOut = "U" Then               'units sold
                                        'Count 30 or 60 and set flag if neither
                                        If ilLen = 60 Then
                                            ilNo60 = 1
                                        ElseIf ilLen = 30 Then
                                            ilNo30 = 1
                                        Else
                                            If ilLen <= 30 Then
                                                ilNo30 = 1
                                            Else
                                                ilNo60 = 1
                                            End If
                                        End If
                                        ilBreakUnits = ilBreakUnits - 1
                                    ElseIf tgVpf(ilVpfIndex).sSSellOut = "M" Then               'matching units
                                        'Count 30 or 60 and set flag if neither
                                        If ilLen = 60 Then
                                            ilNo60 = 1
                                        ElseIf ilLen = 30 Then
                                            ilNo30 = 1
                                        End If
                                        If (ilLen = ilLnLen) And (ilLen = tmAvail.iLen) Then
                                            ilBreakUnits = 0
                                        End If
                                    ElseIf tgVpf(ilVpfIndex).sSSellOut = "T" Then
                                    End If
                                    il30Count = il30Count + ilNo30
                                    il60Count = il60Count + ilNo60
                                    il60Avail = il60Avail - ilNo60
                                    il30Avail = il30Avail - ilNo30
                                    il10Count = il10Count + ilNo10
                                    il10Avail = il10Avail - ilNo10
                                    ilLenCount = ilLenCount + 1
                                    If ilAdfCode = tmSpot.iAdfCode Then
                                        ilAdfCodeCount = ilAdfCodeCount + 1
                                    End If
                                    If (igComp1Code > 0) And (igComp1Code = tmSpot.iMnfComp(0)) Then
                                        ilCompUnitSold = ilCompUnitSold + 1
                                    Else
                                        If (igComp1Code > 0) And (igComp1Code = tmSpot.iMnfComp(1)) Then
                                            ilCompUnitSold = ilCompUnitSold + 1
                                            'If tmAvail.iAvInfo And &H1F >= 3 Then
                                            '    ilNoAvailsForNBB = ilNoAvailsForNBB + 1
                                            'End If
                                        Else
                                            If (igComp2Code > 0) And (igComp2Code = tmSpot.iMnfComp(0)) Then
                                                ilCompUnitSold = ilCompUnitSold + 1
                                                'If tmAvail.iAvInfo And &H1F >= 3 Then
                                                '    ilNoAvailsForNBB = ilNoAvailsForNBB + 1
                                                'End If
                                            Else
                                                If (igComp2Code > 0) And (igComp2Code = tmSpot.iMnfComp(1)) Then
                                                    ilCompUnitSold = ilCompUnitSold + 1
                                                    'If tmAvail.iAvInfo And &H1F >= 3 Then
                                                    '    ilNoAvailsForNBB = ilNoAvailsForNBB + 1
                                                    'End If
                                                Else
                                                    'If tmAvail.iAvInfo And &H1F >= 3 Then
                                                    '    ilNoAvailsForNBB = ilNoAvailsForNBB + 1
                                                    'End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If                              'ilspotOK
                            End If
                            
                        Next ilSpot                             'loop from ssf file for # spots in avail
                        If tgVpf(ilVpfIndex).sSSellOut = "B" Then
                            Do While (ilBreakLen >= ilLnLen) And (ilBreakUnits > 0)
                                ilLenAvail = ilLenAvail + 1
                                ilBreakLen = ilBreakLen - ilLnLen
                                ilBreakUnits = ilBreakUnits - 1
                            Loop
                        ElseIf tgVpf(ilVpfIndex).sSSellOut = "U" Then
                            Do While (ilBreakUnits > 0)
                                ilLenAvail = ilLenAvail + 1
                                ilBreakUnits = ilBreakUnits - 1
                            Loop
                        ElseIf tgVpf(ilVpfIndex).sSSellOut = "M" Then
                            If (ilBreakLen = ilLnLen) And (ilBreakUnits > 0) Then
                                ilLenAvail = ilLenAvail + 1
                            End If
                        ElseIf tgVpf(ilVpfIndex).sSSellOut = "T" Then
                        End If
                    End If                                          'Avail OK
                    ilEvt = ilEvt + tmAvail.iNoSpotsThis                'bypass spots
                End If
                ilEvt = ilEvt + 1   'Increment to next event
            Loop                                                        'do while ilEvt <= tmSsf.iCount
            imSsfRecLen = Len(tmSsf) 'Max size of variable length record
            ilRet = gSSFGetNext(hlSsf, tmSsf, imSsfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            If tgMVef(ilVefIndex).sType = "G" Then
                ilType = tmSsf.iType
            End If
        Loop
    Next llLoopDate
    If ilIncludeMissed Then
        '5/7/18
        ilAnf = gBinarySearchAnf(tgMRdf(ilRdfIndex).ianfCode, tgAvailAnf())
        'Get missed
        'Key 2: VefCode; SchStatus; AdfCode; Date, Time
        For ilPass = 0 To 2 Step 1
            tmSdfSrchKey2.iVefCode = ilVefCode
            If ilPass = 0 Then
                slType = "M"
            ElseIf ilPass = 1 Then
                slType = "R"
            ElseIf ilPass = 2 Then
                slType = "U"
            End If
            slDate = Format$(llStartDate, "m/d/yy")
            gPackDate slDate, ilDate0, ilDate1
            tmSdfSrchKey2.sSchStatus = slType
            tmSdfSrchKey2.iAdfCode = 0
            tmSdfSrchKey2.iDate(0) = ilDate0
            tmSdfSrchKey2.iDate(1) = ilDate1
            tmSdfSrchKey2.iTime(0) = 0
            tmSdfSrchKey2.iTime(1) = 0
            ilRet = btrGetGreaterOrEqual(hlSdf, tmSdf, imSdfRecLen, tmSdfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point
            'This code added as replacement for Ext operation
            Do While (ilRet = BTRV_ERR_NONE) And (tmSdf.iVefCode = ilVefCode) And (tmSdf.sSchStatus = slType)
                gUnpackDateLong tmSdf.iDate(0), tmSdf.iDate(1), llDate
                'If llDate > llEndDate Then
                '    Exit Do
                'End If
                If (llDate >= llStartDate) And (llDate <= llEndDate) Then
                    ilDay = gWeekDayLong(llDate)
                    gUnpackTimeLong tmSdf.iTime(0), tmSdf.iTime(1), False, llTime
                    ilSpotOK = False
                    If ilDays(ilDay) Then
                        If (llOvEndTime > 0) Then
                            If (llTime >= llOvStartTime) And (llTime < llOvEndTime) Then
                                ilSpotOK = True
                                Exit For
                            End If
                        Else
                            If (tgMRdf(ilRdfIndex).iLtfCode(0) <> 0) Or (tgMRdf(ilRdfIndex).iLtfCode(1) <> 0) Or (tgMRdf(ilRdfIndex).iLtfCode(2) <> 0) Then
                                If (ilLtfCode = tgMRdf(ilRdfIndex).iLtfCode(0)) Or (ilLtfCode = tgMRdf(ilRdfIndex).iLtfCode(1)) Or (ilLtfCode = tgMRdf(ilRdfIndex).iLtfCode(1)) Then
                                    ilSpotOK = False    'True- code later
                                End If
                            Else
                                For ilLoop = LBound(tgMRdf(ilRdfIndex).iStartTime, 2) To UBound(tgMRdf(ilRdfIndex).iStartTime, 2) Step 1 'Row
                                    If (tgMRdf(ilRdfIndex).iStartTime(0, ilLoop) <> 1) Or (tgMRdf(ilRdfIndex).iStartTime(1, ilLoop) <> 0) Then
                                        gUnpackTimeLong tgMRdf(ilRdfIndex).iStartTime(0, ilLoop), tgMRdf(ilRdfIndex).iStartTime(1, ilLoop), False, llStartTime
                                        gUnpackTimeLong tgMRdf(ilRdfIndex).iEndTime(0, ilLoop), tgMRdf(ilRdfIndex).iEndTime(1, ilLoop), True, llEndTime
                                        'If (llTime >= llStartTime) And (llTime < llEndTime) And (tgMRdf(ilRdfIndex).sWkDays(ilLoop, ilDay + 1) = "Y") Then
                                        If (llTime >= llStartTime) And (llTime < llEndTime) And (tgMRdf(ilRdfIndex).sWkDays(ilLoop, ilDay) = "Y") Then
                                            ilSpotOK = True
                                            Exit For
                                        End If
                                    End If
                                Next ilLoop
                            End If
                        End If
                    End If
                    '4/12/18
                    'gGetContractParameters tmSdf.lChfCode, slCntrType, ilPctTrade
                    If tlChf.lCode <> tmSdf.lChfCode Then
                        tmChfSrchKey.lCode = tmSdf.lChfCode
                        ilRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilSpotOK = False
                        Else
                            slCntrType = tlChf.sType
                            ilPctTrade = tlChf.iPctTrade
                        End If
                    End If
                    If (slCntrType = "R") Then     'DR
                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLDEDIRECTRESPONSES) <> AVAILINCLDEDIRECTRESPONSES Then
                            ilSpotOK = False
                        End If
                    End If
                    If (slCntrType = "T") Then     'Remnant
                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDEREMNANT) <> AVAILINCLUDEREMNANT Then
                            ilSpotOK = False
                        End If
                    End If
                    If (slCntrType = "Q") Then     'PI
                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDEPERINQUIRY) <> AVAILINCLUDEPERINQUIRY Then
                            ilSpotOK = False
                        End If
                    End If
                    If (tmSdf.sSpotType = "X") Then     'Extra
                        ilSpotOK = False
                    End If
                    If (slCntrType = "M") Then     'Promo
                        ilSpotOK = False
                    End If
                    If (slCntrType = "S") Then     'PSA
                        ilSpotOK = False
                    End If
                    If (slCntrType = "V") Then     'Reservation
                        If (Asc(tgSaf(0).sFeatures4) And AVAILINCLUDERESERVATION) <> AVAILINCLUDERESERVATION Then
                            ilSpotOK = False
                        End If
                    End If
                    If ilSpotOK Then
                        If (lgSchChfCode > 0) And (ilLineNo > 0) Then
                            If (tmSdf.lChfCode = lgSchChfCode) And (tmSdf.iLineNo = ilLineNo) Then
                                ilSpotOK = False
                            End If
                        End If
                        '5/7/18: Check on avail buy
                        If ilSpotOK Then
                            'slSQLQuery = "Select clfRdfCode From clf_Contract_Line Where clfChfCode = " & tmSdf.lChfCode & " And clfLine = " & tmSdf.iLineNo
                            'Set clf_rst = gSQLSelectCall(slSQLQuery)
                            'If Not clf_rst.EOF Then
                                'ilRdf = gBinarySearchRdf(clf_rst!clfRdfCode)
                            tmClfSrchKey.lChfCode = tmSdf.lChfCode
                            tmClfSrchKey.iLine = tmSdf.iLineNo
                            tmClfSrchKey.iCntRevNo = 32000 ' 0 show latest Revision
                            tmClfSrchKey.iPropVer = 32000 ' 0 show latest version
                            ilRet = btrGetGreaterOrEqual(hmClf, tmClf, imClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                            Do While (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = tmSdf.lChfCode) And (tmClf.iLine = tmSdf.iLineNo) And ((tmClf.sSchStatus <> "M") And (tmClf.sSchStatus <> "F"))
                                ilRet = btrGetNext(hmClf, tmClf, imClfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                            Loop
                            If (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = tmSdf.lChfCode) And (tmClf.iLine = tmSdf.iLineNo) And ((tmClf.sSchStatus = "M") Or (tmClf.sSchStatus = "F")) Then
                                ilRdf = gBinarySearchRdf(tmClf.iRdfCode)
                                If ilRdf <> -1 Then
                                    If (tgMRdf(ilRdf).iCode <> tgMRdf(ilRdfIndex).iCode) Then
                                        If (tgMRdf(ilRdf).sInOut = "I") And (tgMRdf(ilRdfIndex).sInOut = "I") Then    'Book into
                                            If tgMRdf(ilRdf).ianfCode <> tgMRdf(ilRdfIndex).ianfCode Then
                                                ilSpotOK = False
                                            End If
                                        ElseIf (tgMRdf(ilRdf).sInOut = "O") And (tgMRdf(ilRdfIndex).sInOut = "O") Then   'Exclude
                                            If tgMRdf(ilRdf).ianfCode <> tgMRdf(ilRdfIndex).ianfCode Then
                                                ilSpotOK = False
                                            End If
                                        Else
                                            If (tgMRdf(ilRdf).sInOut <> "I") And (tgMRdf(ilRdf).sInOut <> "O") Then
                                                If ilAnf <> -1 Then
                                                    If tgAvailAnf(ilAnf).sSustain <> "Y" Then
                                                        ilSpotOK = False
                                                    End If
                                                End If
                                            Else
                                                ilSpotOK = False
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        
                        ilLen = tmSdf.iLen
                        If ilSpotOK Then
                            'Determine if Avr created
                            ilNo30 = 0
                            ilNo60 = 0
                            ilNo10 = 0
                            If ilLen = 10 Then
                                ilNo10 = 1
                            End If
                            If tgVpf(ilVpfIndex).sSSellOut = "B" Then
                            'Convert inventory to number of 30's and 60's
                                Do While ilLen >= 60
                                    ilNo60 = ilNo60 + 1
                                    ilLen = ilLen - 60
                                Loop
                                Do While ilLen >= 30
                                    ilNo30 = ilNo30 + 1
                                    ilLen = ilLen - 30
                                Loop
                                'If ilLen = ilLnLen Then
                                    ilLenAvail = ilLenAvail - 1
                                'End If
                                ilLenCount = ilLenCount + 1
                            ElseIf tgVpf(ilVpfIndex).sSSellOut = "U" Then
                                'Count 30 or 60 and set flag if neither
                                If ilLen = 60 Then
                                    ilNo60 = 1
                                ElseIf ilLen = 30 Then
                                    ilNo30 = 1
                                Else
                                    If ilLen <= 30 Then
                                        ilNo30 = 1
                                    Else
                                        ilNo60 = 1
                                    End If
                                End If
                                'If ilLen = ilLnLen Then
                                    ilLenAvail = ilLenAvail - 1
                                'End If
                                ilLenCount = ilLenCount + 1

                            ElseIf tgVpf(ilVpfIndex).sSSellOut = "M" Then
                                'Count 30 or 60 and set flag if neither
                                If ilLen = 60 Then
                                    ilNo60 = 1
                                ElseIf ilLen = 30 Then
                                    ilNo30 = 1
                                End If
                                If ilLen = ilLnLen Then
                                    ilLenAvail = ilLenAvail - 1
                                End If
                                ilLenCount = ilLenCount + 1
                            ElseIf tgVpf(ilVpfIndex).sSSellOut = "T" Then
                            End If
                            il30Count = il30Count + ilNo30
                            il60Count = il60Count + ilNo60
                            il60Avail = il60Avail - ilNo60
                            il30Avail = il30Avail - ilNo30
                            il10Count = il10Count + ilNo10
                            il10Avail = il10Avail - ilNo10
                        End If
                    End If
                End If
                ilRet = btrGetNext(hlSdf, tmSdf, imSdfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
        Next ilPass
    End If
    'Adjust counts
    If imToggleAvail = 0 Then
        llSpotCount = ilLenCount
        ilAvail = ilLenAvail
        ilInvCount = ilLenInvCount
    Else
        If imToggleAvail = 2 Then
            llSpotCount = il10Count
            ilAvail = il10Avail
            ilInvCount = il10InvCount
        Else
            If (tgVpf(ilVpfIndex).sSSellOut = "B") Then 'And (ilLnLen <= 30) Then                   'both units and seconds
                If il30Avail < 0 Then
                    Do While (il60Avail > 0) And (il30Avail < 0)
                        il60Avail = il60Avail - 1
                        il30Avail = il30Avail + 2
                    Loop
                End If
                If il60Avail > 0 Then
                    il30Avail = il30Avail + 2 * il60Avail
                End If
            End If
            If (tgVpf(ilVpfIndex).sSSellOut = "U") Then 'And (ilLnLen <= 30) Then                   'both units and seconds
                If il30Avail < 0 Then
                    Do While (il60Avail > 0) And (il30Avail < 0)
                        il60Avail = il60Avail - 1
                        il30Avail = il30Avail + 1
                    Loop
                End If
            End If
            If (tgVpf(ilVpfIndex).sSSellOut = "B") Then 'And (ilLnLen <= 30) Then                   'both units and seconds
                If ilLnLen <= 30 Then
                    llSpotCount = il30Count + 2 * il60Count
                    ilAvail = il30Avail
                    ilInvCount = il30InvCount   'this includes 60 inventory
                Else
                    llSpotCount = 2 * il60Count + il30Count
                    ilAvail = il60Avail
                    ilInvCount = 2 * il60InvCount
                End If
            ElseIf (tgVpf(ilVpfIndex).sSSellOut = "U") Then 'And (ilLnLen <= 30) Then                   'both units and seconds
                llSpotCount = 2 * il60Count + il30Count
                ilAvail = il60Avail
                ilInvCount = 2 * il60InvCount
            ElseIf (tgVpf(ilVpfIndex).sSSellOut = "M") Then 'And (ilLnLen <= 30) Then                   'both units and seconds
                If ilLnLen = 30 Then
                    llSpotCount = il30Count
                    ilAvail = il30Avail
                    ilInvCount = il30InvCount   'this includes 60 inventory
                ElseIf ilLnLen = 60 Then
                    llSpotCount = il60Count
                    ilAvail = il60Avail
                    ilInvCount = il60InvCount
                End If
            End If
        End If
    End If
    Erase ilEvtType
    Erase tlLLC
End Sub

Function mBillingCycle() As Integer
    Dim slNameCode As String
    Dim ilRet As Integer
    Dim slCode As String
    Dim hlSlf As Integer        'Salesperson
    Dim ilSlfRecLen As Integer     'Slf record length
    Dim tlSlf As SLF
    Dim tlSlfSrchKey As INTKEY0
    Dim hlSof As Integer        'Sales office
    Dim ilSofRecLen As Integer     'Sof record length
    Dim tlSof As SOF
    Dim tlSofSrchKey As INTKEY0
    Dim hlMnf As Integer        'Multi-name (sales source)
    Dim ilMnfRecLen As Integer     'Mnf record length
    Dim tlMnf As MNF
    Dim tlMnfSrchKey As INTKEY0
    If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) <> OFCALENDARBILL) And ((Asc(tgSpf.sUsingFeatures9) And WEEKLYBILL) <> WEEKLYBILL) Then
        mBillingCycle = 0
        Exit Function
    End If
    If (tgSpf.sBLCycle = "C") And (tgSpf.sBRCycle = "C") And (tgSpf.sBNCycle = "C") Then
        mBillingCycle = 1
        Exit Function
    End If
    If (tgSpf.sBLCycle = "S") And (tgSpf.sBRCycle = "S") And (tgSpf.sBNCycle = "S") Then
        mBillingCycle = 0
        Exit Function
    End If
    If (tgSpf.sBLCycle = "W") And (tgSpf.sBRCycle = "W") And (tgSpf.sBNCycle = "W") Then
        If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
            mBillingCycle = 2
        Else
            mBillingCycle = 1
        End If
        Exit Function
    End If
    mBillingCycle = 0   'default to standard if not found
    If imSlspIndex(0) < 2 Then
        Exit Function
    End If
    Screen.MousePointer = vbHourglass  'Wait
    slNameCode = tmCntSalesperson(imSlspIndex(0) - 2).sKey    'Traffic!lbcSalesperson.List(imSlspIndex(0) - 2)
    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    On Error GoTo mBillingCycleErr
    gCPErrorMsg ilRet, "mBillingCycle (gParseItem field 2)", Contract
    On Error GoTo 0
    tlSlfSrchKey.iCode = CInt(Trim$(slCode))
    hlSlf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hlSlf, "", sgDBPath & "Slf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mBillingCycle2Err
    gBtrvErrorMsg ilRet, "mBillingCycle (btrOpen)" & "Slf.Btr", Contract
    On Error GoTo 0
    ilSlfRecLen = Len(tlSlf)  'btrRecordLength(hlSlf)  'Get and save record length
    ilRet = btrGetEqual(hlSlf, tlSlf, ilSlfRecLen, tlSlfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    On Error GoTo mBillingCycle2Err
    gBtrvErrorMsg ilRet, "mBillingCyclePop (btrGetEqual)", Contract
    On Error GoTo 0
    ilRet = btrClose(hlSlf)
    btrDestroy hlSlf
    If tlSlf.iSofCode <= 0 Then
        Screen.MousePointer = vbDefault    'Default
        Exit Function
    End If
    hlSof = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hlSof, "", sgDBPath & "Sof.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mBillingCycle3Err
    gBtrvErrorMsg ilRet, "mBillingCycle (btrOpen)" & "Sof.Btr", Contract
    On Error GoTo 0
    ilSofRecLen = Len(tlSof)  'btrRecordLength(hlSlf)  'Get and save record length
    tlSofSrchKey.iCode = tlSlf.iSofCode
    ilRet = btrGetEqual(hlSof, tlSof, ilSofRecLen, tlSofSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    On Error GoTo mBillingCycle3Err
    gBtrvErrorMsg ilRet, "mBillingCyclePop (btrGetEqual)", Contract
    On Error GoTo 0
    ilRet = btrClose(hlSof)
    btrDestroy hlSof
    If tlSof.iMnfSSCode <= 0 Then
        Screen.MousePointer = vbDefault    'Default
        Exit Function
    End If
    hlMnf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hlMnf, "", sgDBPath & "Mnf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mBillingCycle4Err
    gBtrvErrorMsg ilRet, "mBillingCycle (btrOpen)" & "Mnf.Btr", Contract
    On Error GoTo 0
    ilMnfRecLen = Len(tlMnf)  'btrRecordLength(hlMnf)  'Get and save record length
    tlMnfSrchKey.iCode = tlSof.iMnfSSCode
    ilRet = btrGetEqual(hlMnf, tlMnf, ilMnfRecLen, tlMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    On Error GoTo mBillingCycle4Err
    gBtrvErrorMsg ilRet, "mBillingCyclePop (btrGetEqual)", Contract
    On Error GoTo 0
    ilRet = btrClose(hlMnf)
    btrDestroy hlMnf
    Select Case tlMnf.iGroupNo
        Case 1  'Local
            If tgSpf.sBLCycle = "C" Then
                mBillingCycle = 1
            ElseIf tgSpf.sBLCycle = "W" Then
                If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
                    mBillingCycle = 2
                Else
                    mBillingCycle = 1
                End If
            Else
                mBillingCycle = 0
            End If
        Case 2  'Regional
            If tgSpf.sBRCycle = "C" Then
                mBillingCycle = 1
            ElseIf tgSpf.sBLCycle = "W" Then
                If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
                    mBillingCycle = 2
                Else
                    mBillingCycle = 1
                End If
            Else
                mBillingCycle = 0
            End If
        Case 3  'National
            If tgSpf.sBNCycle = "C" Then
                mBillingCycle = 1
            ElseIf tgSpf.sBLCycle = "W" Then
                If ((Asc(tgSpf.sOptionFields) And OFCALENDARBILL) = OFCALENDARBILL) Then
                    mBillingCycle = 2
                Else
                    mBillingCycle = 1
                End If
            Else
                mBillingCycle = 0
            End If
    End Select
    Screen.MousePointer = vbDefault    'Default
    Exit Function
mBillingCycle4Err:
    ilRet = btrClose(hlMnf)
    btrDestroy hlMnf
    Screen.MousePointer = vbDefault    'Default
    Exit Function
mBillingCycle3Err:
    ilRet = btrClose(hlSof)
    btrDestroy hlSof
    Screen.MousePointer = vbDefault    'Default
    Exit Function
mBillingCycle2Err:
    ilRet = btrClose(hlSlf)
    btrDestroy hlSlf
    Screen.MousePointer = vbDefault    'Default
    Exit Function

    Screen.MousePointer = vbDefault    'Default
    Exit Function
mBillingCycleErr:
    Screen.MousePointer = vbDefault    'Default
    Exit Function
End Function

Sub mBuildPkVeh(ilNewVehName As Integer, ilBypassMktBasePkgTest As Integer)
    Dim ilVef As Integer
    Dim ilVpf As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilFound As Integer
    Dim llUpper As Long
    Dim slSQLQuery As String
    Dim pvf_rst As ADODB.Recordset

    If Not ilNewVehName Then
        ReDim tgPackVeh(0 To UBound(tgMVef)) As PACKVEH
        llUpper = 0
        'Add package vehicles
        For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            If tgMVef(ilVef).sType = "P" Then
                    If (tgSpf.sMktBase = "Y") And (Not ilBypassMktBasePkgTest) Then
                        ilFound = True
                        For ilLoop = 0 To UBound(igCntrMktCode) - 1 Step 1
                            If tgMVef(ilVef).iMnfVehGp3Mkt = igCntrMktCode(ilLoop) Then
                                ilFound = False
                                Exit For
                            End If
                        Next ilLoop
                    Else
                        ilFound = False
                    End If
                    If Not ilFound Then
'                        For ilLoop = LBound(tgPackVeh) To llUpper - 1 Step 1
'                            'If (tgPackVeh(ilLoop).sName = tgMVef(ilVef).sName) Then
'                            If StrComp(Trim$(tgPackVeh(ilLoop).sName), Trim$(tgMVef(ilVef).sName), 1) = 0 Then
'                                ilFound = True
'                                Exit For
'                            End If
'                        Next ilLoop
                    End If
                If Not ilFound Then
                    ilVpf = gBinarySearchVpf(tgMVef(ilVef).iCode)
                    If ilVpf <> -1 Then
                        'If tgVpf(ilVpf).sGMedium = "M" Then
                        If tgVpf(ilVpf).sGMedium = "P" Then
                            ilFound = True
                        End If
                    End If
                End If
                If Not ilFound Then
                    tgPackVeh(llUpper).sKey = tgMVef(ilVef).sName & "1" '"!" & tgMVef(ilVef).sName
                    tgPackVeh(llUpper).sSortChar = "A"
                    tgPackVeh(llUpper).sName = tgMVef(ilVef).sName
                    tgPackVeh(llUpper).iCode = tgMVef(ilVef).iCode
                    If llUpper >= UBound(tgPackVeh) Then
                        ReDim Preserve tgPackVeh(0 To UBound(tgPackVeh) + 100) As PACKVEH
                    End If
                    llUpper = llUpper + 1
                End If
            End If
        Next ilVef
        'Add Conventional and selling vehicles only
        For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            If (tgMVef(ilVef).sType = "C") Or (tgMVef(ilVef).sType = "S") Then
                    If tgSpf.sMktBase = "Y" Then
                        ilFound = True
                        For ilLoop = 0 To UBound(igCntrMktCode) - 1 Step 1
                            If tgMVef(ilVef).iMnfVehGp3Mkt = igCntrMktCode(ilLoop) Then
                                ilFound = False
                                Exit For
                            End If
                        Next ilLoop
                    Else
                        ilFound = False
                    End If
                    If Not ilFound Then
'                        For ilLoop = LBound(tgPackVeh) To llUpper - 1 Step 1
'                            'If (tgPackVeh(ilLoop).sName = tgMVef(ilVef).sName) Then
'                            If StrComp(Trim$(tgPackVeh(ilLoop).sName), Trim$(tgMVef(ilVef).sName), 1) = 0 Then
'                                ilFound = True
'                                Exit For
'                            End If
'                        Next ilLoop
                    End If
                If Not ilFound Then
                    ilVpf = gBinarySearchVpf(tgMVef(ilVef).iCode)
                    If ilVpf <> -1 Then
                        ''If tgVpf(ilVpf).sGMedium = "M" Then
                        'If tgVpf(ilVpf).sGMedium = "P" Then
                        '    ilFound = True
                        'End If
                        'If CPM package, ignore package vehicle
                        slSQLQuery = "Select pvfType from PVF_Package_Vehicle Where pvfCode = " & tgMVef(ilVef).lPvfCode
                        Set pvf_rst = gSQLSelectCall(slSQLQuery)
                        If Not pvf_rst.EOF Then
                            If pvf_rst!pvfType = "C" Then
                                ilFound = True
                            End If
                        End If
                    End If
                End If
                If Not ilFound Then
                    tgPackVeh(llUpper).sKey = tgMVef(ilVef).sName & "2"   '"#" & tgMVef(ilVef).sName
                    tgPackVeh(llUpper).sSortChar = "B"
                    tgPackVeh(llUpper).sName = tgMVef(ilVef).sName
                    tgPackVeh(llUpper).iCode = tgMVef(ilVef).iCode
                    If llUpper >= UBound(tgPackVeh) Then
                        ReDim Preserve tgPackVeh(0 To UBound(tgPackVeh) + 100) As PACKVEH
                    End If
                    llUpper = llUpper + 1
                End If
            End If
        Next ilVef
    Else
        llUpper = UBound(tgPackVeh)
    End If
    'Add new vehicle names
    For ilIndex = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If (tgPackLn(ilIndex).sType = "O") Or (tgPackLn(ilIndex).sType = "A") Or (tgPackLn(ilIndex).sType = "E") Then
            ilFound = False
'            For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
'                If (Trim$(tgPackVeh(ilLoop).sName) = Trim$(tgPackLn(ilIndex).sVehName)) Then
'                    ilFound = True
'                    Exit For
'                End If
'            Next ilLoop
            If ilNewVehName Then
                'Since key has changed, must filter out duplicates if not creating from all over
                For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                    If StrComp(Trim$(tgPackVeh(ilLoop).sName), Trim$(tgPackLn(ilIndex).sVehName), vbTextCompare) = 0 Then
                        ilFound = True
                        Exit For
                    End If
                Next ilLoop
            End If
            If Not ilFound Then
                'tgPackVeh(llUpper).sKey = tgPackLn(ilIndex).sVehName & "3"    '" " & tgPackLn(ilIndex).sVehName
                If ilNewVehName Then
                    tgPackVeh(llUpper).sKey = " " & tgPackLn(ilIndex).sVehName
                Else
                    tgPackVeh(llUpper).sKey = tgPackLn(ilIndex).sVehName & "3"    '" " & tgPackLn(ilIndex).sVehName
                End If
                tgPackVeh(llUpper).sSortChar = "A"
                tgPackVeh(llUpper).sName = tgPackLn(ilIndex).sVehName
                tgPackVeh(llUpper).iCode = 0
                 If llUpper >= UBound(tgPackVeh) Then
                    ReDim Preserve tgPackVeh(0 To UBound(tgPackVeh) + 100) As PACKVEH
                End If
                llUpper = llUpper + 1
            End If
        End If
    Next ilIndex
    ReDim Preserve tgPackVeh(0 To llUpper) As PACKVEH
    If UBound(tgPackVeh) - 1 > 0 Then
        ArraySortTyp fnAV(tgPackVeh(), 0), UBound(tgPackVeh), 0, LenB(tgPackVeh(0)), 0, LenB(tgPackVeh(0).sKey), 0
        llUpper = 0
        tgPackVeh(llUpper).sKey = tgPackVeh(llUpper).sSortChar & tgPackVeh(llUpper).sName     '" " & tgPackLn(ilIndex).sVehName
        'For ilLoop = 1 To UBound(tgPackVeh) - 1 Step 1
        For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
            If StrComp(Trim$(tgPackVeh(llUpper).sName), Trim$(tgPackVeh(ilLoop).sName), vbTextCompare) <> 0 Then
                llUpper = llUpper + 1
                tgPackVeh(llUpper) = tgPackVeh(ilLoop)
                tgPackVeh(llUpper).sKey = tgPackVeh(llUpper).sSortChar & tgPackVeh(llUpper).sName     '" " & tgPackLn(ilIndex).sVehName
            End If
        Next ilLoop
        llUpper = llUpper + 1
        ReDim Preserve tgPackVeh(0 To llUpper) As PACKVEH
        If UBound(tgPackVeh) - 1 > 0 Then
            ArraySortTyp fnAV(tgPackVeh(), 0), UBound(tgPackVeh), 0, LenB(tgPackVeh(0)), 0, LenB(tgPackVeh(0).sKey), 0
        End If
    ElseIf UBound(tgPackVeh) = 1 Then
        tgPackVeh(0).sKey = tgPackVeh(0).sSortChar & tgPackVeh(0).sName     '" " & tgPackLn(ilIndex).sVehName
    End If
    On Error Resume Next
    pvf_rst.Close
End Sub

Sub mBuildQAudSum(llSpanStartDate As Long, llSpanEndDate As Long, llInCntrPop As Long)
'
'   Where:
'       ilLnOrWk(I)- 0= Compute Week values for Line; 1= Compute Week values from all lines
'       ilLnRowNo(I)- Line Row No
'
    Dim ilLoop As Integer
    Dim llAvgAudAvg As Long
    Dim ilAvgRating As Integer
    Dim llCPP As Long
    Dim llCPM As Long
    Dim ilLnUpper As Integer
    Dim llDate As Long
    Dim ilUpper As Integer
    Dim llSpots As Long
    Dim llTotalGRP As Long
    Dim llTotalGrImp As Long
    Dim slStr As String
    Dim slDate As String
    Dim ilMonth As Integer
    Dim ilYear As Integer
    Dim llQSDate As Long
    Dim llQEdate As Long
    Dim ilFound As Integer
    Dim ilQ As Integer
    Dim ilWkUpper As Integer
    Dim ilClf As Integer
    Dim llPop As Long
    Dim llPopEst As Long
    Dim llCntrPop As Long
    Dim ilQtrNo As Integer
    Dim dlTmpCost As Double 'TTP 10439 - Rerate 21,000,000
    ReDim tgWkSum(0 To 0) As WKSUM
    ReDim smQSumShow(0 To 9, 0 To 1) As String
    
    llCntrPop = llInCntrPop
    ilUpper = 1
    llTotalGRP = 0
    llTotalGrImp = 0
    'Determine dates of each quarter
    slDate = Format$(llSpanStartDate, "m/d/yy")
    gObtainMonthYear 0, slDate, ilMonth, ilYear
    slDate = "1/15/" & Trim$(str$(ilYear))
    slDate = gObtainStartStd(slDate)
    llQSDate = gDateValue(slDate)
    ilQtrNo = 3
    ilFound = False
    Do
        '11/22/11: Compute true quarters
        'llQEdate = llQSDate + 7 * 13 - 1
        'slDate = Format$(llQEdate, "m/d/yy")
        'gObtainMonthYear 0, slDate, ilMonth, ilYear
        'If ilMonth = 12 Then
        '    slDate = "12/15/" & Trim$(Str$(ilYear))
        '    slDate = gObtainEndStd(slDate)
        '    llQEdate = gDateValue(slDate)
        'End If
        llQEdate = llQSDate + 7 * 10 - 1
        slDate = Format$(llQEdate, "m/d/yy")
        gObtainMonthYear 0, slDate, ilMonth, ilYear
        slDate = Trim$(str$(ilQtrNo)) & "/15/" & Trim$(str$(ilYear))
        slDate = gObtainEndStd(slDate)
        llQEdate = gDateValue(slDate)
        If (llSpanStartDate >= llQSDate) And (llSpanStartDate <= llQEdate) Then
            ilFound = True
            Exit Do
        End If
        '11/22/11
        ilQtrNo = ilQtrNo + 3
        If ilQtrNo = 15 Then
            ilQtrNo = 3
        End If
        llQSDate = llQEdate + 1
    Loop While Not ilFound
    ReDim lmQStartDate(0 To 0) As Long
    ReDim lmQEndDate(0 To 0) As Long
    ilFound = False
    Do
        '11/22/11: Compute true quarters
        'llQEdate = llQSDate + 7 * 13 - 1
        'slDate = Format$(llQEdate, "m/d/yy")
        'gObtainMonthYear 0, slDate, ilMonth, ilYear
        'If ilMonth = 12 Then
        '    slDate = "12/15/" & Trim$(Str$(ilYear))
        '    slDate = gObtainEndStd(slDate)
        '    llQEdate = gDateValue(slDate)
        'End If
        llQEdate = llQSDate + 7 * 10 - 1
        slDate = Format$(llQEdate, "m/d/yy")
        gObtainMonthYear 0, slDate, ilMonth, ilYear
        slDate = Trim$(str$(ilQtrNo)) & "/15/" & Trim$(str$(ilYear))
        slDate = gObtainEndStd(slDate)
        llQEdate = gDateValue(slDate)
        If (llSpanEndDate < llQSDate) Then
            ilFound = True
            Exit Do
        End If
        lmQStartDate(UBound(lmQStartDate)) = llQSDate
        lmQEndDate(UBound(lmQEndDate)) = llQEdate
        ReDim Preserve lmQStartDate(0 To UBound(lmQStartDate) + 1) As Long
        ReDim Preserve lmQEndDate(0 To UBound(lmQEndDate) + 1) As Long
        '11/22/11
        ilQtrNo = ilQtrNo + 3
        If ilQtrNo = 15 Then
            ilQtrNo = 3
        End If
        llQSDate = llQEdate + 1
    Loop While Not ilFound

    For ilQ = LBound(lmQStartDate) To UBound(lmQStartDate) - 1 Step 1
        'ilLnUpper = 0
        ilLnUpper = -1
        llSpots = 0
        ReDim lgLnCost(0 To 0) As Long
        ReDim igLnAvgRating(0 To 0) As Integer
        ReDim lgLnGrImp(0 To 0) As Long
        ReDim lgLnGRP(0 To 0) As Long
        For ilClf = 0 To UBound(tgClfCntr) Step 1
            ReDim lgWkSpotCount(0 To 0) As Long
            ReDim lgWkActPrice(0 To 0) As Long
            ReDim lgWkAvgAud(0 To 0) As Long
            ReDim lgWkPopEst(0 To 0) As Long
            ilWkUpper = -1  '0
            For llDate = lmQStartDate(ilQ) To lmQEndDate(ilQ) Step 7
                For ilLoop = LBound(tgWkAud) To UBound(tgWkAud) - 1 Step 1
                    If (tgClfCntr(ilClf).ClfRec.iLine = tgWkAud(ilLoop).iLineNo) And (llDate = tgWkAud(ilLoop).lWkDate) And (tgWkAud(ilLoop).lSpotCount > 0) Then
                        ilWkUpper = ilWkUpper + 1
                        ReDim Preserve lgWkSpotCount(0 To ilWkUpper) As Long
                        ReDim Preserve lgWkActPrice(0 To ilWkUpper) As Long
                        ReDim Preserve lgWkAvgAud(0 To ilWkUpper) As Long
                        ReDim Preserve lgWkPopEst(0 To ilWkUpper) As Long
                        llPop = tgWkAud(ilLoop).lPop
                        llSpots = llSpots + tgWkAud(ilLoop).lSpotCount
                        lgWkSpotCount(ilWkUpper) = tgWkAud(ilLoop).lSpotCount
                        lgWkActPrice(ilWkUpper) = tgWkAud(ilLoop).lSpotPrice
                        lgWkAvgAud(ilWkUpper) = tgWkAud(ilLoop).lAvgAud
                        lgWkPopEst(ilWkUpper) = tgWkAud(ilLoop).lPopEst
                    End If
                Next ilLoop
            Next llDate
            If ilWkUpper >= 0 Then
                ReDim igWkRating(0 To ilWkUpper) As Integer
                ReDim lgWkGRImp(0 To ilWkUpper) As Long
                ReDim lgWkGRP(0 To ilWkUpper) As Long
                ilLnUpper = ilLnUpper + 1
                ReDim Preserve lgLnCost(0 To ilLnUpper) As Long
                ReDim Preserve igLnAvgRating(0 To ilLnUpper) As Integer
                ReDim Preserve lgLnGrImp(0 To ilLnUpper) As Long
                ReDim Preserve lgLnGRP(0 To ilLnUpper) As Long
                'gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), lgLnCost(ilLnUpper), llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst
                dlTmpCost = CDbl(lgLnCost(ilLnUpper)) 'TTP 10439 - Rerate 21,000,000
                gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), dlTmpCost, llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst     'TTP 10439 - Rerate 21,000,000
                lgLnCost(ilLnUpper) = dlTmpCost 'TTP 10439 - Rerate 21,000,000
                If tgSpf.sDemoEstAllowed = "Y" Then
                    llCntrPop = llPopEst
                End If
            End If
        Next ilClf
        'If ilLnUpper > 0 Then
        If ilLnUpper >= 0 Then
            tgWkSum(UBound(tgWkSum)).lWkDate = ilQ
            tgWkSum(UBound(tgWkSum)).lSpots = llSpots
            If ilLnUpper >= 0 Then
                'gResearchTotals False, llCntrPop, lgLnCost(), igLnAvgRating(), lgLnGrImp(), lgLnGRP(), tgWkSum(UBound(tgWkSum)).lCost, ilAvgRating, tgWkSum(UBound(tgWkSum)).lGrImp, tgWkSum(UBound(tgWkSum)).lGRP, tgWkSum(UBound(tgWkSum)).lCPP, tgWkSum(UBound(tgWkSum)).lCPM
                'gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llSpots, tgWkSum(UBound(tgWkSum)).lCost, ilAvgRating, tgWkSum(UBound(tgWkSum)).lGrImp, tgWkSum(UBound(tgWkSum)).lGRP, tgWkSum(UBound(tgWkSum)).lCPP, tgWkSum(UBound(tgWkSum)).lCPM, tgWkSum(UBound(tgWkSum)).lAvgAud
                gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llSpots, tgWkSum(UBound(tgWkSum)).dCost, ilAvgRating, tgWkSum(UBound(tgWkSum)).lGrImp, tgWkSum(UBound(tgWkSum)).lGRP, tgWkSum(UBound(tgWkSum)).lCPP, tgWkSum(UBound(tgWkSum)).lCPM, tgWkSum(UBound(tgWkSum)).lAvgAud 'TTP 10439 - Rerate 21,000,000
                llTotalGRP = llTotalGRP + tgWkSum(UBound(tgWkSum)).lGRP
                llTotalGrImp = llTotalGrImp + tgWkSum(UBound(tgWkSum)).lGrImp
            End If
            ReDim Preserve tgWkSum(0 To UBound(tgWkSum) + 1) As WKSUM
        End If
    Next ilQ
    For ilLoop = LBound(tgWkSum) To UBound(tgWkSum) - 1 Step 1
        smQSumShow(1, ilUpper) = Format$(lmQStartDate(tgWkSum(ilLoop).lWkDate), "m/d/yy") & " - " & Format(lmQEndDate(tgWkSum(ilLoop).lWkDate), "m/d/yy")
        If tgWkSum(ilLoop).lSpots > 0 Then
            'GRP
            slStr = ""
            If tgWkSum(ilLoop).lGRP > 0 Then
                slStr = gLongToStrDec(tgWkSum(ilLoop).lGRP, 1)
            End If
            smQSumShow(2, ilUpper) = slStr
            '% GRP
            If llTotalGRP > 0 Then
                slStr = gLongToStrDec(CCur(tgWkSum(ilLoop).lGRP) * 100 / llTotalGRP, 0)
            Else
                slStr = ""
            End If
            smQSumShow(3, ilUpper) = slStr
            'GrImp
            slStr = ""
            If tgWkSum(ilLoop).lGrImp > 0 Then
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = Trim$(Str$(tgWkSum(ilLoop).lGrImp))
'                Else
'                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 3)
                Else
                    slStr = Trim$(str$(tgWkSum(ilLoop).lGrImp))
                End If
            End If
            smQSumShow(4, ilUpper) = slStr
            '% Gr Imp
            If llTotalGrImp > 0 Then
                slStr = gLongToStrDec(CCur(tgWkSum(ilLoop).lGrImp) * 100 / llTotalGrImp, 0)
            Else
                slStr = ""
            End If
            smQSumShow(5, ilUpper) = slStr
            'CPM
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(tgWkSum(ilLoop).lCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * tgWkSum(ilLoop).lCPM, 2)
            'End If
            smQSumShow(6, ilUpper) = slStr
            'CPP
            slStr = gLongToStrDec(tgWkSum(ilLoop).lCPP, 0)
            smQSumShow(7, ilUpper) = slStr
            'Avg Price
            'slStr = gLongToStrDec(tgWkSum(ilLoop).lCost / tgWkSum(ilLoop).lSpots, 2)
            slStr = gDblToStrDec(tgWkSum(ilLoop).dCost / tgWkSum(ilLoop).lSpots, 2) 'TTP 10439 - Rerate 21,000,000
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            smQSumShow(8, ilUpper) = slStr
            'Total Price
            'slStr = gLongToStrDec(tgWkSum(ilLoop).lCost, 2)
            slStr = gDblToStrDec(tgWkSum(ilLoop).dCost, 2) 'TTP 10439 - Rerate 21,000,000
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            smQSumShow(9, ilUpper) = slStr
        End If
        ilUpper = ilUpper + 1
        ReDim Preserve smQSumShow(0 To 9, 0 To ilUpper) As String
    Next ilLoop
End Sub

Sub mBuildVer0Lines(hlChf As Integer, hlClf As Integer, ilStep1Index As Integer)
    Dim llChfCode As Long
    Dim ilRet As Integer
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim ilClf As Integer
    Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim tlChf As CHF
    Dim tlClf As CLF
    ReDim igVer0LineNo(0 To 0) As Integer
    If (sgCntrScreen = "Orders") Then
        If ilStep1Index <= 1 Then
            Exit Sub
        End If
    Else
        If ilStep1Index <= 3 Then
            Exit Sub
        End If
    End If
    '4/17/06 Jim-  Remove checking of version zero as this resulted in in CPP, CPM... box at bottom right to not include these lines.  All other research computations included these lines.
    '              Also code in mSetPriDemoResearch removed
    Exit Sub
    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    llChfCode = -1
    tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
    tmChfSrchKey1.iCntRevNo = 32000
    tmChfSrchKey1.iPropVer = 32000
    ilRet = btrGetGreaterOrEqual(hlChf, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
    Do While (ilRet = BTRV_ERR_NONE) And (tlChf.lCntrNo = tgChfCntr.lCntrNo)
        llChfCode = tlChf.lCode
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            ilFound = False
            For ilLoop = LBound(igVer0LineNo) To UBound(igVer0LineNo) - 1 Step 1
                If igVer0LineNo(ilLoop) = tgClfCntr(ilClf).ClfRec.iLine Then
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            If Not ilFound Then
                If tgClfCntr(ilClf).ClfRec.iCntRevNo > 0 Then
                    tmClfSrchKey.lChfCode = tlChf.lCode
                    tmClfSrchKey.iLine = tgClfCntr(ilClf).ClfRec.iLine
                    tmClfSrchKey.iCntRevNo = tlChf.iCntRevNo ' 0 show latest version
                    tmClfSrchKey.iPropVer = tlChf.iPropVer ' 0 show latest version
                    ilRet = btrGetGreaterOrEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                    If (ilRet = BTRV_ERR_NONE) And (tlClf.lChfCode = tlChf.lCode) And (tlClf.iLine = tgClfCntr(ilClf).ClfRec.iLine) Then
                        If tlClf.iCntRevNo = 0 Then
                            igVer0LineNo(UBound(igVer0LineNo)) = tlClf.iLine
                            ReDim Preserve igVer0LineNo(0 To UBound(igVer0LineNo) + 1) As Integer
                        End If
                    End If
                Else
                    igVer0LineNo(UBound(igVer0LineNo)) = tgClfCntr(ilClf).ClfRec.iLine
                    ReDim Preserve igVer0LineNo(0 To UBound(igVer0LineNo) + 1) As Integer
                End If
            End If
        Next ilClf
        ilRet = btrGetNext(hlChf, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    If llChfCode <> -1 Then

    End If
End Sub

Sub mBuildWkAud(hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilLnRowNo As Integer, ilStep1Index As Integer, llSpanStartDate As Long, llSpanEndDate As Long)
'
'   Where:
'       ilLnOrWk(I)- 0= Compute Week values for Line; 1= Compute Week values from all lines
'       ilLnRowNo(I)- Line Row No
'
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    'Dim llStartDate As Long
    'Dim llEndDate As Long
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    'Dim llStartMonDate As Long
    Dim llDate As Long
    Dim llSpots As Long
    Dim ilDay As Integer
    Dim ilCff As Integer
    Dim ilWkIndex As Integer
    Dim ilRet As Integer
    Dim ilDnfCode As Integer
    Dim ilMnfSocEco As Integer
    Dim ilMnfDemo As Integer
    Dim ilRdfCode As Integer
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    ReDim ilDays(0 To 6) As Integer
    Dim slNameCode As String
    Dim slCode As String
    'Dim llTotalGRP As Long
    'Dim llTotalGrImp As Long
    'Dim llTotalCost As Long
    Dim slLineType As String
    Dim ilAirWk As Integer
    Dim llPrice As Long
    Dim ilVefCode As Integer
    Dim ilMRdfCode As Integer
    'Dim llPopEst As Long
    Dim clPopEst As Currency
    Dim ilNoAirWks As Integer
    Dim llRafCode As Long
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long

    slLineType = mGetLineType(ilLnRowNo)
    llRafCode = mGetRafCode(ilLnRowNo, tlRegionCode())
    'If (slStr <> "O") And (slStr <> "A") Then
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        ilRdfCode = imLnSave(1, ilLnRowNo)
        gFindMatch smLnSave(1, ilLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
        If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
            ilVefCode = 0
        Else
            slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilVefCode = CInt(slCode)
        End If
    Else
        ilVefCode = 0
        For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
            If StrComp(Trim$(smLnSave(1, ilLnRowNo)), Trim$(tgPackVeh(ilLoop).sName), 1) = 0 Then
                ilVefCode = tgPackVeh(ilLoop).iCode
                Exit For
            End If
        Next ilLoop
        For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                ilMRdfCode = tgMRdf(ilLoop).iCode
                Exit For
            End If
        Next ilLoop
    End If
    If Contract.lbcDBSocEco.ListIndex >= 1 Then
        slNameCode = tgSocEcoCode(Contract.lbcDBSocEco.ListIndex - 1).sKey  'Traffic!lbcSocEcoCode.List(Contract.lbcDBSocEco.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilMnfSocEco = Val(slCode)
    Else
        ilMnfSocEco = 0
    End If
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        'mCVehOptIndex ilLnRowNo, ilVefCode, ilVpfIndex, ilTerminate
        If Contract.lbcDBBook.ListIndex >= 0 Then
            slNameCode = tgBookNameCode(Contract.lbcDBBook.ListIndex).sKey  'Traffic!lbcBookNameCode.List(Contract.lbcDBBook.ListIndex)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilDnfCode = Val(slCode)
        Else
            ilDnfCode = -1
        End If
        If tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode <> ilDnfCode Then
            If ilLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                If ((sgCntrScreen = "Orders") And (ilStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (ilStep1Index >= 6)) Then
                Else
                    'If (Contract.lbcDBBook.ListIndex >= 0) And (Contract.lbcDBDemo.ListIndex >= 0) Then
                    '    imLnChg = True
                    'End If
                End If
            End If
        End If
        If ilDnfCode > 0 Then
            tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode = ilDnfCode
            If Contract.lbcDBDemo.ListIndex >= 0 Then
                'Find matching name
                If (Contract.lbcDemo(0).ListIndex >= 1) Or (Contract.lbcDemo(1).ListIndex >= 1) Or (Contract.lbcDemo(2).ListIndex >= 1) Or (Contract.lbcDemo(3).ListIndex >= 1) Then
                    ilIndex = Contract.lbcDemo(imDemoMap(Contract.lbcDBDemo.ListIndex)).ListIndex
                    If ilIndex >= 1 Then
                        slNameCode = tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
                    Else
                        slNameCode = ""
                    End If
                Else
                    ilIndex = Contract.lbcDBDemo.ListIndex
                    slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
                End If
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                ilMnfDemo = Val(slCode)
            Else
                ilMnfDemo = 0
            End If
        Else
            tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode = 0
            ilMnfDemo = 0
        End If
        If tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo <> ilMnfDemo Then
            If ilLnRowNo < UBound(tgClfCntr) + 1 Then   'New lines set after all fields entered
                If ((sgCntrScreen = "Orders") And (ilStep1Index >= 4)) Or ((sgCntrScreen <> "Orders") And (ilStep1Index >= 6)) Then
                Else
                    'If (Contract.lbcDBBook.ListIndex >= 0) And (Contract.lbcDBDemo.ListIndex >= 0) Then
                    '    imLnChg = True
                    'End If
                End If
            End If
        End If
        tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo = ilMnfDemo
        If imLnSave(4, ilLnRowNo) = 1 Then
            llOvStartTime = CLng(gTimeToCurrency(smLnSave(2, ilLnRowNo), False))
            llOvEndTime = CLng(gTimeToCurrency(smLnSave(3, ilLnRowNo), True))
        Else
            llOvStartTime = 0
            llOvEndTime = 0
        End If
        If (ilDnfCode > 0) And (ilMnfDemo > 0) And (tgClfCntr(ilLnRowNo - 1).lPop <= 0) Then
            ilRet = gGetDemoPop(hlDrf, hlMnf, hlDpf, ilDnfCode, ilMnfSocEco, ilMnfDemo, tgClfCntr(ilLnRowNo - 1).lPop)
        End If
        ilRdfCode = imLnSave(1, ilLnRowNo)
    Else
        ilDnfCode = tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode
        ilMnfDemo = tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo
        If imLnSave(4, ilLnRowNo) = 1 Then
            llOvStartTime = CLng(gTimeToCurrency(smLnSave(2, ilLnRowNo), False))
            llOvEndTime = CLng(gTimeToCurrency(smLnSave(3, ilLnRowNo), True))
        Else
            llOvStartTime = 0
            llOvEndTime = 0
        End If
        For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                ilRdfCode = tgMRdf(ilLoop).iCode
                Exit For
            End If
        Next ilLoop
    End If
    slLineType = mGetLineType(ilLnRowNo, True)
    ilNoAirWks = 0
    clPopEst = 0
    For llDate = llSpanStartDate To llSpanEndDate Step 7
        ilAirWk = False
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                If llDate < llFlStartDate Then
                    Exit Do
                End If
                If (llDate + 6 >= llFlStartDate) And (llDate <= llFlEndDate) Then
                    ilAirWk = True
                    Exit Do
                End If
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
        For ilDay = 0 To 6 Step 1
            ilDays(ilDay) = False
        Next ilDay
        ilWkIndex = -1
        For ilIndex = LBound(tgWkAud) To UBound(tgWkAud) - 1 Step 1
            If (tgWkAud(ilIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine) And (tgWkAud(ilIndex).lWkDate = llDate) Then
                ilWkIndex = ilIndex
                Exit For
            End If
        Next ilIndex
        If ilAirWk Then
            ilNoAirWks = ilNoAirWks + 1
            If ilWkIndex = -1 Then
                ilWkIndex = UBound(tgWkAud)
                ReDim Preserve tgWkAud(0 To UBound(tgWkAud) + 1) As WKAUD
                tgWkAud(ilWkIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine
                tgWkAud(ilWkIndex).lWkDate = llDate
                tgWkAud(ilWkIndex).lSpotCount = 0
                tgWkAud(ilWkIndex).lSpotPrice = 0
                tgWkAud(ilWkIndex).lAvgAud = 0
                tgWkAud(ilWkIndex).lPop = tgClfCntr(ilLnRowNo - 1).lPop
                tgWkAud(ilWkIndex).lPopEst = 0
            End If
            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                llSpots = 0
                For ilDay = 0 To 6 Step 1
                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                        llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                        If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                            ilDays(ilDay) = True
                        End If
                    End If
                Next ilDay
            Else
                llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                For ilDay = 0 To 6 Step 1
                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                        If (tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilDay) = "1") Then
                            ilDays(ilDay) = True
                        End If
                    End If
                Next ilDay
            End If
            If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "T"
                        llPrice = tgCffCntr(ilCff).CffRec.lActPrice
                    Case Else
                        llPrice = 0
                End Select
                If (ilDnfCode > 0) And (ilVefCode > 0) And (ilMnfDemo > 0) Then
                    If (tgWkAud(ilWkIndex).lAvgAud <= 0) Or (ilMnfSocEco > 0) Then
                        ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilDays(), slLineType, tgClfCntr(ilLnRowNo - 1).ClfRec.lRafCode, tgWkAud(ilWkIndex).lAvgAud, tgWkAud(ilWkIndex).lPopEst, ilAudFromSource, llAudFromCode)
                        If tgSpf.sDemoEstAllowed = "Y" Then
                            clPopEst = clPopEst + tgWkAud(ilWkIndex).lPopEst
                        End If
                        '10256
                        mActOneLineInfoSet ilLnRowNo
                    End If
                Else
                    tgWkAud(ilWkIndex).lAvgAud = 0
                    tgWkAud(ilWkIndex).lPopEst = 0
                End If
                tgWkAud(ilWkIndex).lSpotCount = llSpots
                tgWkAud(ilWkIndex).lSpotPrice = llPrice
            End If
        Else
            If ilWkIndex <> -1 Then
                tgWkAud(ilWkIndex).lAvgAud = 0
                tgWkAud(ilWkIndex).lPopEst = 0
                tgWkAud(ilWkIndex).lSpotCount = 0
                tgWkAud(ilWkIndex).lSpotPrice = 0
            End If
        End If
    Next llDate
    If tgSpf.sDemoEstAllowed = "Y" Then
        If ilNoAirWks > 0 Then
            tgClfCntr(ilLnRowNo - 1).lPop = clPopEst / ilNoAirWks
        Else
            tgClfCntr(ilLnRowNo - 1).lPop = 0
        End If
    End If
End Sub

Sub mBuildWkAudSum(llSpanStartDate As Long, llSpanEndDate As Long, llInCntrPop As Long)
'
'   Where:
'       ilLnOrWk(I)- 0= Compute Week values for Line; 1= Compute Week values from all lines
'       ilLnRowNo(I)- Line Row No
'
    Dim ilLoop As Integer
    Dim llAvgAudAvg As Long
    Dim ilAvgRating As Integer
    Dim llCPP As Long
    Dim llCPM As Long
    Dim ilLnUpper As Integer
    Dim llDate As Long
    Dim ilUpper As Integer
    Dim llSpots As Long
    Dim llTotalGRP As Long
    Dim llTotalGrImp As Long
    Dim slStr As String

    ReDim tgWkSum(0 To 0) As WKSUM
    ReDim lgWkSpotCount(0 To 0) As Long
    ReDim lgWkActPrice(0 To 0) As Long
    ReDim lgWkAvgAud(0 To 0) As Long
    ReDim igWkRating(0 To 0) As Integer
    ReDim lgWkGRImp(0 To 0) As Long
    ReDim lgWkGRP(0 To 0) As Long
    ReDim lgWkPopEst(0 To 0) As Long

    Dim llPopEst As Long
    Dim llCntrPop As Long
    Dim dlTmpCost As Double 'TTP 10439 - Rerate 21,000,000
    
    llCntrPop = llInCntrPop
    ilLnUpper = 0
    'ReDim smWkSumShow(1 To 9, 1 To 1) As String
    ReDim smWkSumShow(0 To 9, 0 To 1) As String
    ilUpper = 1
    llTotalGRP = 0
    llTotalGrImp = 0
    For llDate = llSpanStartDate To llSpanEndDate Step 7
        ilLnUpper = -1  '0
        llSpots = 0
        ReDim lgLnCost(0 To 0) As Long
        ReDim igLnAvgRating(0 To 0) As Integer
        ReDim lgLnGrImp(0 To 0) As Long
        ReDim lgLnGRP(0 To 0) As Long
        For ilLoop = LBound(tgWkAud) To UBound(tgWkAud) - 1 Step 1
            If (llDate = tgWkAud(ilLoop).lWkDate) And (tgWkAud(ilLoop).lSpotCount > 0) Then
                llSpots = llSpots + tgWkAud(ilLoop).lSpotCount
                lgWkSpotCount(0) = tgWkAud(ilLoop).lSpotCount
                lgWkActPrice(0) = tgWkAud(ilLoop).lSpotPrice
                lgWkAvgAud(0) = tgWkAud(ilLoop).lAvgAud
                lgWkPopEst(0) = tgWkAud(ilLoop).lPopEst
                ilLnUpper = ilLnUpper + 1
                ReDim Preserve lgLnCost(0 To ilLnUpper) As Long
                ReDim Preserve igLnAvgRating(0 To ilLnUpper) As Integer
                ReDim Preserve lgLnGrImp(0 To ilLnUpper) As Long
                ReDim Preserve lgLnGRP(0 To ilLnUpper) As Long
                'gAvgAudToLnResearch smCntr1or2PlaceRating, False, tgWkAud(ilLoop).lPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), lgLnCost(ilLnUpper), llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst
                dlTmpCost = CDbl(lgLnCost(ilLnUpper))
                gAvgAudToLnResearch smCntr1or2PlaceRating, False, tgWkAud(ilLoop).lPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), dlTmpCost, llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst  'TTP 10439 - Rerate 21,000,000
                lgLnCost(ilLnUpper) = dlTmpCost
                If tgSpf.sDemoEstAllowed = "Y" Then
                    llCntrPop = llPopEst
                End If
            End If
        Next ilLoop
        tgWkSum(UBound(tgWkSum)).lWkDate = llDate
        tgWkSum(UBound(tgWkSum)).lSpots = llSpots
        If ilLnUpper >= 0 Then
            'gResearchTotals False, llCntrPop, lgLnCost(), igLnAvgRating(), lgLnGrImp(), lgLnGRP(), tgWkSum(UBound(tgWkSum)).lCost, ilAvgRating, tgWkSum(UBound(tgWkSum)).lGrImp, tgWkSum(UBound(tgWkSum)).lGRP, tgWkSum(UBound(tgWkSum)).lCPP, tgWkSum(UBound(tgWkSum)).lCPM
            'gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llSpots, tgWkSum(UBound(tgWkSum)).lCost, ilAvgRating, tgWkSum(UBound(tgWkSum)).lGrImp, tgWkSum(UBound(tgWkSum)).lGRP, tgWkSum(UBound(tgWkSum)).lCPP, tgWkSum(UBound(tgWkSum)).lCPM, tgWkSum(UBound(tgWkSum)).lAvgAud
            gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llSpots, tgWkSum(UBound(tgWkSum)).dCost, ilAvgRating, tgWkSum(UBound(tgWkSum)).lGrImp, tgWkSum(UBound(tgWkSum)).lGRP, tgWkSum(UBound(tgWkSum)).lCPP, tgWkSum(UBound(tgWkSum)).lCPM, tgWkSum(UBound(tgWkSum)).lAvgAud 'TTP 10439 - Rerate 21,000,000
            llTotalGRP = llTotalGRP + tgWkSum(UBound(tgWkSum)).lGRP
            llTotalGrImp = llTotalGrImp + tgWkSum(UBound(tgWkSum)).lGrImp
        End If
        ReDim Preserve tgWkSum(0 To UBound(tgWkSum) + 1) As WKSUM
    Next llDate
    For ilLoop = LBound(tgWkSum) To UBound(tgWkSum) - 1 Step 1
        llDate = tgWkSum(ilLoop).lWkDate
        smWkSumShow(1, ilUpper) = Format$(llDate, "m/d/yy") & " - " & Format(llDate + 6, "m/d/yy")
        If tgWkSum(ilLoop).lSpots > 0 Then
            'GRP
            slStr = ""
            If tgWkSum(ilLoop).lGRP > 0 Then
                slStr = gLongToStrDec(tgWkSum(ilLoop).lGRP, 1)
            End If
            smWkSumShow(2, ilUpper) = slStr
            '% GRP
            If llTotalGRP > 0 Then
                slStr = gLongToStrDec(CCur(tgWkSum(ilLoop).lGRP) * 100 / llTotalGRP, 0)
            Else
                slStr = ""
            End If
            smWkSumShow(3, ilUpper) = slStr
            'GrImp
            slStr = ""
            If tgWkSum(ilLoop).lGrImp > 0 Then
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = Trim$(Str$(tgWkSum(ilLoop).lGrImp))
'                Else
'                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(tgWkSum(ilLoop).lGrImp, 3)
                Else
                    slStr = Trim$(str$(tgWkSum(ilLoop).lGrImp))
                End If
            End If
            smWkSumShow(4, ilUpper) = slStr
            '% Gr Imp
            If llTotalGrImp > 0 Then
                slStr = gLongToStrDec(CCur(tgWkSum(ilLoop).lGrImp) * 100 / llTotalGrImp, 0)
            Else
                slStr = ""
            End If
            smWkSumShow(5, ilUpper) = slStr
            'CPM
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(tgWkSum(ilLoop).lCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * tgWkSum(ilLoop).lCPM, 2)
            'End If
            smWkSumShow(6, ilUpper) = slStr
            'CPP
            slStr = gLongToStrDec(tgWkSum(ilLoop).lCPP, 0)
            smWkSumShow(7, ilUpper) = slStr
            'Avg Price
            'slStr = gLongToStrDec(tgWkSum(ilLoop).lCost / tgWkSum(ilLoop).lSpots, 2)
            slStr = gDblToStrDec(tgWkSum(ilLoop).dCost / tgWkSum(ilLoop).lSpots, 2) 'TTP 10439 - Rerate 21,000,000
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            smWkSumShow(8, ilUpper) = slStr
            'Total Price
            'slStr = gLongToStrDec(tgWkSum(ilLoop).lCost, 2)
            slStr = gDblToStrDec(tgWkSum(ilLoop).dCost, 2) 'TTP 10439 - Rerate 21,000,000
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            smWkSumShow(9, ilUpper) = slStr
        End If
        ilUpper = ilUpper + 1
        'ReDim Preserve smWkSumShow(1 To 9, 1 To ilUpper) As String
        ReDim Preserve smWkSumShow(0 To 9, 0 To ilUpper) As String
    Next ilLoop
End Sub

Sub mChgDaypart(ilLnRowNo As Integer, ilAllowedDays() As Integer)
'
'   ilLnRowNo(I)- Line Row Number
'   ilAllowedDays(I)- Allowed days (True= Air Day; False=Not Air Day)
'
    Dim ilCff As Integer
    Dim ilDay As Integer
    Dim ilLIndex As Integer
    If ilLnRowNo <= 0 Then
        Exit Sub
    End If
    ilLIndex = LBound(ilAllowedDays)
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                For ilDay = 0 To 6 Step 1
                    If Not ilAllowedDays(ilDay + ilLIndex) Then
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                    End If
                Next ilDay
            Else
                For ilDay = 0 To 6 Step 1
                    If ilAllowedDays(ilDay + ilLIndex) Then
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 1
                    Else
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                    End If
                Next ilDay
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
End Sub

Sub mClearDB()
    Dim ilBox As Integer
    For ilBox = imLBCTCtrls To UBound(tmDBCtrls) - 1 Step 1
        tmDBCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBSCCtrls) Step 1
        tmDBSCCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBAvCtrls) Step 1
        tmDBAvCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBAPCtrls) Step 1
        tmDBAPCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBRCPCtrls) Step 1
        tmDBRCPCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBRCtrls) Step 1
        tmDBRCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBGRPCtrls) Step 1
        tmDBGRPCtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBGICtrls) Step 1
        tmDBGICtrls(ilBox).sShow = ""
    Next ilBox
    For ilBox = imLBCTCtrls To UBound(tmDBGICtrls) Step 1
        tmDBGICtrls(ilBox).sShow = ""
    Next ilBox
    imDBRatio = 0
    Contract.pbcRatio.Cls
    Contract.pbcRatio.CurrentX = -15
    Contract.pbcRatio.CurrentY = 0
    Contract.pbcRatio.Print "Actual/Rate Card"
    imDBTotals = 0
    'Contract.lacDBTotal.Caption = "Line Totals"
End Sub

Function mCntrErase(hlChf As Integer, hlClf As Integer, hlCff As Integer, hlCgf As Integer, hlCxf As Integer, hlSbf As Integer, hlDsf As Integer, hlRvf As Integer, hlPhf As Integer, hlMsf As Integer, hlMgf As Integer, ilStep1Index As Integer, ilStep3Index As Integer, slOrigStatus As String) As Integer

    Dim slMess As String
    Dim ilRes As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilCgfFound As Integer
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim ilLoop As Integer
    Dim ilDelLine As Integer
    Dim ilDelPjf As Integer
    Dim llChfRecPos As Long
    Dim llChfCode As Long
    Dim llSbfRecPos As Long
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim ilCffRecLen As Integer
    Dim ilCgfRecLen As Integer
    Dim ilCxfRecLen As Integer
    Dim ilSbfRecLen As Integer
    Dim tlChf As CHF
    Dim tlCff As CFF
    Dim tlCgf As CGF
    Dim tlClf As CLF
    Dim tlSbf As SBF
    Dim tlCgfSrchKey1 As CGFKEY1
    Dim tlSbfSrchKey As SBFKEY0    'SBF key record image
    Dim hlFile As Integer
    Dim ilFile As Integer
    'TTP 10855 - fix potential NTR Overflow errors
    'Dim ilSbf As Integer
    Dim llSbf As Long
    Dim llSbfCode As Long
    Dim ilFound As Integer
    Dim llGross As Long
    Dim slSQLQuery As String
    Dim llRet As Long

    'Revise Proposal or Revise Order (previously chgd and status=C;W;I)
    mCntrErase = False
    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    ilCffRecLen = Len(tlCff)
    ilCgfRecLen = Len(tlCgf)
    ilSbfRecLen = Len(tlSbf)
    imDsfRecLen = Len(tmDsf)
    imMsfRecLen = Len(tmMsf)
    imMgfRecLen = Len(tmMgf)
    If ((sgCntrScreen <> "Orders") And (ilStep1Index = 2)) Or ((sgCntrScreen <> "Orders") And (ilStep1Index = 4) And ((slOrigStatus = "W") Or (slOrigStatus = "C") Or (slOrigStatus = "I"))) Then 'Erase
        slMess = "Erase " & Contract.lbcStep(2).List(ilStep3Index)
        ilRes = MsgBox(slMess, vbOKCancel + vbQuestion, "Erase")
        If ilRes = vbCancel Then
            Exit Function
        End If

        Screen.MousePointer = vbHourglass
        If lmChfRecPos <> 0 Then
'            ilRet = btrBeginTrans(hlChf, 1000)
'            If ilRet <> BTRV_ERR_NONE Then
'                ilRet = MsgBox("Erase Not Completed, BeginTrans(1) Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
'                Exit Function
'            End If
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                If (sgCntrScreen <> "Orders") And (ilStep1Index = 2) Then 'Erase
                    If tgClfCntr(ilClf).iStatus > 0 Then   '(0=New; 1=Old & retain; 2=Old & delete;-1=ignore)
                        ilDelLine = True
                    Else
                        ilDelLine = False
                    End If
                End If
                If (sgCntrScreen <> "Orders") And (ilStep1Index = 4) And ((slOrigStatus = "W") Or (slOrigStatus = "C") Or (slOrigStatus = "I")) Then 'Erase
                    If tgClfCntr(ilClf).iStatus > 0 Then   '(0=New; 1=Old & retain; 2=Old & delete;-1=ignore)
                        If tgChfCntr.lCode = tgClfCntr(ilClf).ClfRec.lChfCode Then
                            ilDelLine = True
                        Else
                            ilDelLine = False
                        End If
                    Else
                        ilDelLine = False
                    End If
                End If
                If ilDelLine Then   '(0=New; 1=Old & retain; 2=Old & delete;-1=ignore)
                    ilCff = tgClfCntr(ilClf).iFirstCff
                    Do While ilCff <> -1
                        If tgCffCntr(ilCff).iStatus > 0 Then
                            Do  'Loop until record updated or added
'                                ilRet = btrGetDirect(hlCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                ilRet = btrGetEqual(hlCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                If ilRet <> BTRV_ERR_NONE Then
'                                    ilCRet = btrAbortTrans(hlChf)
                                    ilRet = MsgBox("Erase Not Completed, GetEqual(2) Cff Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                    Exit Function
                                End If
                                'tmRec = tlCff
                                'ilRet = gGetByKeyForUpdate("Cff", hlCff, tmRec)
                                'tlCff = tmRec
                                'If ilRet <> BTRV_ERR_NONE Then
                                '    ilCRet = btrAbortTrans(hlChf)
                                '    ilRet = MsgBox("Erase Not Completed, GetByKey(3) CffError" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                                '    Exit Function
                                'End If
                                ilRet = btrDelete(hlCff)
                            Loop While ilRet = BTRV_ERR_CONFLICT
                            If ilRet <> BTRV_ERR_NONE Then
'                                ilCRet = btrAbortTrans(hlChf)
                                ilRet = MsgBox("Erase Not Completed, Delete(4) Cff Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                Exit Function
                            End If
                        End If
                        ilCff = tgCffCntr(ilCff).iNextCff
                    Loop
                    'ilRet = btrGetDirect(hlClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                    ilRet = btrGetEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not Completed, GetEqual(5) Clf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                    Do
                        Do
                            tlCgfSrchKey1.lClfCode = tlClf.lCode
                            ilRet = btrGetEqual(hlCgf, tlCgf, ilCgfRecLen, tlCgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)
                            If ilRet <> BTRV_ERR_NONE Then
                                ilCgfFound = False
                                Exit Do
                            End If
                            ilCgfFound = True
                            ilRet = btrDelete(hlCgf)
                        Loop While ilRet = BTRV_ERR_CONFLICT
                    Loop While ilCgfFound
                    'tmRec = tlClf
                    'ilRet = gGetByKeyForUpdate("Clf", hlClf, tmRec)
                    'tlClf = tmRec
                    'If ilRet <> BTRV_ERR_NONE Then
                    '    ilCRet = btrAbortTrans(hlChf)
                    '    ilRet = MsgBox("Erase Not Completed, GetByKey(6) Clf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                    '    Exit Function
                    'End If
                    Do
                        tmCxfSrchKey.lCode = tlClf.lCxfCode
                        If tmCxfSrchKey.lCode <> 0 Then
                            tmCxf.sComment = ""
                            ilCxfRecLen = Len(tmCxf) '5027
                            ilRet = btrGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                            If ilRet <> BTRV_ERR_NONE Then
'                                ilCRet = btrAbortTrans(hlChf)
                                ilRet = MsgBox("Erase Not Completed, GetEqual(7) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                Exit Function
                            End If
                            ilRet = btrDelete(hlCxf)
                        Else
                            ilRet = BTRV_ERR_NONE
                            Exit Do
                        End If
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not Completed, Delete(8) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                    If tmCxfSrchKey.lCode > 0 Then
'                        If tgSpf.sRemoteUsers = "Y" Then
'                            tmDsf.lCode = 0
'                            tmDsf.sFileName = "CXF"
'                            gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'                            gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'                            tmDsf.iRemoteID = tmCxf.iRemoteID
'                            tmDsf.lAutoCode = tmCxf.lAutoCode
'                            tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'                            tmDsf.lCntrNo = 0
'                            ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'                        End If
                    End If
                    Do
'                        ilRet = btrGetDirect(hlClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                        ilRet = btrGetEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, GetEqual(9) Clf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        'tmRec = tlClf
                        'ilRet = gGetByKeyForUpdate("Clf", hlClf, tmRec)
                        'tlClf = tmRec
                        'If ilRet <> BTRV_ERR_NONE Then
                        '    ilCRet = btrAbortTrans(hlChf)
                        '    ilRet = MsgBox("Erase Not Completed, GetByKey(10) Clf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                        '    Exit Function
                        'End If
                        ilRet = btrDelete(hlClf)
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not Completed, Delete(11) Clf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                End If
            Next ilClf
            'Multi-Media
            Do
                tmMsfSrchKey2.lChfCode = tgChfCntr.lCode
                ilRet = btrGetGreaterOrEqual(hlMsf, tmMsf, imMsfRecLen, tmMsfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                If (ilRet <> BTRV_ERR_NONE) Or (tmMsf.lChfCode <> tgChfCntr.lCode) Then
                    Exit Do
                End If
                Do
                    tmMgfSrchKey1.lMsfCode = tmMsf.lCode
                    tmMgfSrchKey1.iGameNo = 0
                    ilRet = btrGetGreaterOrEqual(hlMgf, tmMgf, imMgfRecLen, tmMgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                    If (ilRet <> BTRV_ERR_NONE) Then
                        Exit Do
                    End If
                    If tmMgf.lMsfCode <> tmMsf.lCode Then
                        Exit Do
                    End If
                    ilRet = btrDelete(hlMgf)
                Loop
                Do
                    tmCxfSrchKey.lCode = tmMsf.lCxfCode
                    If tmCxfSrchKey.lCode <> 0 Then
                        tmCxf.sComment = ""
                        ilCxfRecLen = Len(tmCxf) '5027
                        ilRet = gCXFGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet = BTRV_ERR_NONE Then
                            ilRet = btrDelete(hlCxf)
                        End If
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                ilRet = btrDelete(hlMsf)
            Loop While (ilRet = BTRV_ERR_CONFLICT) Or (ilRet = BTRV_ERR_NONE)
            'Billing
            For ilLoop = LBound(tgFBSbf) To UBound(tgFBSbf) - 1 Step 1
                If tgFBSbf(ilLoop).iStatus > 0 Then
                    llSbfCode = tgFBSbf(ilLoop).SbfRec.lCode
                    Do  'Loop until record updated or added
                        'ilRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, tgFBSbf(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmSbfSrchKey1.lCode = llSbfCode
                        ilRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, GetEqual(12) Sbf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        'tmRec = tlSbf
                        'ilRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
                        'tlSbf = tmRec
                        'If ilRet <> BTRV_ERR_NONE Then
                        '    ilCRet = btrAbortTrans(hlChf)
                        '    ilRet = MsgBox("Erase Not Completed, GetByKey(13) Sbf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                        '    Exit Function
                        'End If
                        ilRet = btrDelete(hlSbf)
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not Completed, Delete(15) Sbf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                End If
            Next ilLoop
            ReDim tlOrigSbf(0 To 0) As SBF
            If lgSchChfCode > 0 Then
                tlSbfSrchKey.lChfCode = lgSchChfCode
                tlSbfSrchKey.iDate(0) = 0
                tlSbfSrchKey.iDate(1) = 0
                tlSbfSrchKey.sTranType = " "
                ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tlSbfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                Do While (ilRet = BTRV_ERR_NONE) And (tlSbf.lChfCode = lgSchChfCode)
                    If ((tlSbf.sTranType = "I") Or (tlSbf.sTranType = "F")) And (tlSbf.sBilled = "Y") Then   'Items Billing (sBill is ignored)
                        tlOrigSbf(UBound(tlOrigSbf)) = tlSbf
                        ReDim Preserve tlOrigSbf(0 To UBound(tlOrigSbf) + 1) As SBF
                    End If
                    ilRet = btrGetNext(hlSbf, tlSbf, ilSbfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                Loop
            End If
            For ilLoop = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
                If tgIBSbf(ilLoop).iStatus > 0 Then
                    llSbfCode = tgIBSbf(ilLoop).SbfRec.lCode
                    Do  'Loop until record updated or added
                        'ilRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, tgIBSbf(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmSbfSrchKey1.lCode = llSbfCode
                        ilRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, GetEqual(16) Sbf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        'tmRec = tlSbf
                        'ilRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
                        'tlSbf = tmRec
                        'If ilRet <> BTRV_ERR_NONE Then
                        '    ilCRet = btrAbortTrans(hlChf)
                        '    ilRet = MsgBox("Erase Not Completed, GetByKey(17) Sbf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                        '    Exit Function
                        'End If
                        ilRet = btrDelete(hlSbf)
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not Completed, Delete(18) Sbf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                    'Adjust RVF or PHF
                    For ilFile = 0 To 1 Step 1
                        ilFound = False
                        If ilFile = 0 Then
                            hlFile = hlRvf
                        Else
                            hlFile = hlPhf
                        End If
                        'Change rvf references
                        imRvfRecLen = Len(tmRvf)
                        tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
                        tmRvfSrchKey4.iTranDate(0) = 0
                        tmRvfSrchKey4.iTranDate(1) = 0
                        ilRet = btrGetGreaterOrEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)
                        Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.lCntrNo = tgChfCntr.lCntrNo)
                            If (tmRvf.lSbfCode = tgIBSbf(ilLoop).SbfRec.lCode) Then
                                'Find match
                                For llSbf = 0 To UBound(tlOrigSbf) - 1 Step 1
                                    If (tlOrigSbf(llSbf).iBillVefCode = tmRvf.iBillVefCode) And (tlOrigSbf(llSbf).iMnfItem = tmRvf.iMnfItem) Then
                                        If (tlOrigSbf(llSbf).iDate(0) = tmRvf.iTranDate(0)) And (tlOrigSbf(llSbf).iDate(1) = tmRvf.iTranDate(1)) Then
                                            gPDNToLong tmRvf.sGross, llGross
                                            If tlOrigSbf(llSbf).lGross = llGross Then
                                                Do
                                                    tmRvfSrchKey2.lCode = tmRvf.lCode
                                                    ilRet = btrGetEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                                                    tmRvf.lSbfCode = tlOrigSbf(llSbf).lCode
                                                    ilRet = btrUpdate(hlFile, tmRvf, imRvfRecLen)
                                                Loop While ilRet = BTRV_ERR_CONFLICT
                                                tlOrigSbf(llSbf).iBillVefCode = -1
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Next llSbf
                            End If
                            ilRet = btrGetNext(hlFile, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
                        Loop
                        If ilFound Then
                            Exit For
                        End If
                    Next ilFile
                End If
            Next ilLoop
            'Remove CPM buy
            slSQLQuery = "Delete From pcf_Pod_CPM_Cntr Where pcfChfCode = " & tgChfCntr.lCode
            llRet = gSQLWaitNoMsgBox(slSQLQuery, False)
            'Only allowing Proposal or Working Proposals to be erase-
            'therefore NO new Merchandising or Promotion could have been defined- retain old rvf if rev working
            'For ilRvf = 0 To UBound(tmRvfMPRec) - 1 Step 1
            '    If tmRvfMPRec(ilRvf).iStatus = 0 Then
            '        Do  'Loop until record updated or added
            '            If tmRvfMPRec(ilRvf).iHandle = 0 Then
            '                ilRet = btrGetDirect(hlRvf, tmRvf, imRvfRecLen, tmRvfMPRec(ilRvf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            '            Else
            '                ilRet = btrGetDirect(hlPhf, tmRvf, imRvfRecLen, tmRvfMPRec(ilRvf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            '            End If
            '            If ilRet <> BTRV_ERR_NONE Then
            '                ilCRet = btrAbortTrans(hlChf)
            '                ilRet = MsgBox("Erase Not Completed, GetDirect Rvf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
            '                Exit Function
            '            End If
            '            tmRec = tmRvf
            '            If tmRvfMPRec(ilRvf).iHandle = 0 Then
            '                ilRet = gGetByKeyForUpdate("Rvf", hlRvf, tmRec)
            '            Else
            '                ilRet = gGetByKeyForUpdate("Rvf", hlPhf, tmRec)
            '            End If
            '            tmRvf = tmRec
            '            If ilRet <> BTRV_ERR_NONE Then
            '                ilCRet = btrAbortTrans(hlChf)
            '                ilRet = MsgBox("Erase Not Completed, GetByKey Rvf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
            '                Exit Function
            '            End If
            '            If tmRvfMPRec(ilRvf).iHandle = 0 Then
            '                ilRet = btrDelete(hlRvf)
            '            Else
            '                ilRet = btrDelete(hlPhf)
            '            End If
            '        Loop While ilRet = BTRV_ERR_CONFLICT
            '        If ilRet <> BTRV_ERR_NONE Then
            '            ilCRet = btrAbortTrans(hlChf)
            '            ilRet = MsgBox("Erase Not Completed, Delete Rvf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
            '            Exit Function
            '        End If
            '    End If
            'Next ilLoop
            For ilLoop = 0 To 5 Step 1
                Do  'Loop until record updated or added
                    Select Case ilLoop
                        Case 0
                            tmCxfSrchKey.lCode = tgChfCntr.lCxfMerch
                        Case 1
                            tmCxfSrchKey.lCode = tgChfCntr.lCxfProm
                        Case 2
                            tmCxfSrchKey.lCode = tgChfCntr.lCxfInt
                        Case 3
                            tmCxfSrchKey.lCode = tgChfCntr.lCxfCanc
                        Case 4
                            tmCxfSrchKey.lCode = tgChfCntr.lCxfChgR
                        Case 5
                            tmCxfSrchKey.lCode = tgChfCntr.lCxfCode
                    End Select
                    If tmCxfSrchKey.lCode <> 0 Then
                        tmCxf.sComment = ""
                        ilCxfRecLen = Len(tmCxf) '5027
                        ilRet = btrGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, GetEqual(25) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        ilRet = btrDelete(hlCxf)
                    Else
                        ilRet = BTRV_ERR_NONE
                        Exit Do
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
'                    ilCRet = btrAbortTrans(hlChf)
                    ilRet = MsgBox("Erase Not Completed, Delete(26) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                    Exit Function
                End If
                If tmCxfSrchKey.lCode > 0 Then
'                    If tgSpf.sRemoteUsers = "Y" Then
'                        tmDsf.lCode = 0
'                        tmDsf.sFileName = "CXF"
'                        gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'                        gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'                        tmDsf.iRemoteID = tmCxf.iRemoteID
'                        tmDsf.lAutoCode = tmCxf.lAutoCode
'                        tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'                        tmDsf.lCntrNo = 0
'                        ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'                    End If
                End If
            Next ilLoop
            'If last proposal, then remove pjf if found
            'ilRet = btrGetDirect(hlChf, tmChf, ilChfRecLen, lmChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            tmChfSrchKey.lCode = lmCntrChfCode
            ilRet = btrGetEqual(hlChf, tmChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If tmChf.iMnfPotnType <> 0 Then
                ilDelPjf = True
            Else
                ilDelPjf = True
                tmChfSrchKey1.lCntrNo = tmChf.lCntrNo
                tmChfSrchKey1.iCntRevNo = tmChf.iCntRevNo
                tmChfSrchKey1.iPropVer = 32000
                ilRet = btrGetGreaterOrEqual(hlChf, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
                Do While (ilRet = BTRV_ERR_NONE) And (tlChf.lCode = tmChf.lCode)
                    ilRet = btrGetNext(hlChf, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                Loop
                If (ilRet = BTRV_ERR_NONE) And (tlChf.lCntrNo = tmChf.lCntrNo) And (tlChf.iCntRevNo = tmChf.iCntRevNo) And (tlChf.lCode <> tmChf.lCode) Then
                    ilDelPjf = False
                End If
            End If
            If ilDelPjf Then
                If mDelPjf(tmChf.lCode, hlDsf) <> BTRV_ERR_NONE Then
'                    ilCRet = btrAbortTrans(hlChf)
                    ilRet = MsgBox("Erase Not Completed, mDelPjf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                    Exit Function
                End If
            End If
            ilRet = gAlertContractErase(tmChf.lCode)
            Do
                'ilRet = btrGetDirect(hlChf, tmChf, ilChfRecLen, lmChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmChfSrchKey.lCode = lmCntrChfCode
                ilRet = btrGetEqual(hlChf, tmChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet <> BTRV_ERR_NONE Then
'                    ilCRet = btrAbortTrans(hlChf)
                    ilRet = MsgBox("Erase Not Completed, GetEqual(27) Chf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                    Exit Function
                End If
                'tmRec = tmChf
                'ilRet = gGetByKeyForUpdate("Chf", hlChf, tmRec)
                'tmChf = tmRec
                'If ilRet <> BTRV_ERR_NONE Then
                '    ilCRet = btrAbortTrans(hlChf)
                '    ilRet = MsgBox("Erase Not Completed, GetByKey(28) Chf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                '    Exit Function
                'End If
                ilRet = btrDelete(hlChf)
            Loop While ilRet = BTRV_ERR_CONFLICT
            If ilRet <> BTRV_ERR_NONE Then
'                ilCRet = btrAbortTrans(hlChf)
                ilRet = MsgBox("Erase Not Completed, Delete(29) Chf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                Exit Function
            End If
'            If tgSpf.sRemoteUsers = "Y" Then
'                tmDsf.lCode = 0
'                tmDsf.sFileName = "CHF"
'                gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'                gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'                tmDsf.iRemoteID = tmChf.iRemoteID
'                tmDsf.lAutoCode = tmChf.lAutoCode
'                tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'                tmDsf.lCntrNo = tmChf.lCntrNo
'                ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'            End If
            If ilRet <> BTRV_ERR_NONE Then
'                ilCRet = btrAbortTrans(hlChf)
                ilRet = MsgBox("Erase Not Completed, Insert Dsf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                Exit Function
            End If
'            ilRet = btrEndTrans(hlChf)
            Contract.pbcHeader.Cls
            Contract.pbcLine.Cls
            Contract.pbcLnTotal.Cls
            Contract.pbcLnDates.Cls
            Contract.pbcSelect.Cls
        End If
    ElseIf (sgCntrScreen = "Orders") And (UBound(tgClfCntr) <= LBound(tgClfCntr)) And (UBound(tgDelClf) > LBound(tgDelClf)) Then 'Erase
        slMess = "Erase " & Contract.lbcStep(2).List(ilStep3Index)
        ilRes = MsgBox(slMess, vbOKCancel + vbQuestion, "Erase")
        If ilRes = vbCancel Then
            Exit Function
        End If
        ilRet = gObtainCntr(hlChf, hlClf, hlCff, tgChfCntr.lCode, True, tmChf, tgClfCntr(), tgCffCntr())
        If ilRet Then
'            ilRet = btrBeginTrans(hlChf, 1000)
'            If ilRet <> BTRV_ERR_NONE Then
'                ilCRet = btrAbortTrans(hlChf)
'                ilRet = MsgBox("Erase Not Completed, BeginTrans (31) Try Later", vbOKOnly + vbExclamation, "Erase")
'                Exit Function
'            End If
            For ilLoop = LBound(tgDelClf) To UBound(tgDelClf) - 1 Step 1
                'Find matching lines and flights and delete
                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                    If tgClfCntr(ilClf).ClfRec.iLine = tgDelClf(ilLoop).ClfRec.iLine Then
                        ilCff = tgClfCntr(ilClf).iFirstCff
                        Do While ilCff <> -1
                            Do
                                'ilRet = btrGetDirect(hlCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                ilRet = btrGetEqual(hlCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                If ilRet <> BTRV_ERR_NONE Then
'                                    ilCRet = btrAbortTrans(hlChf)
                                    ilRet = MsgBox("Erase Not Completed, GetEqual(32) Cff Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                    Exit Function
                                End If
                                'tmRec = tlCff
                                'ilRet = gGetByKeyForUpdate("Cff", hlCff, tmRec)
                                'tlCff = tmRec
                                'If ilRet <> BTRV_ERR_NONE Then
                                '    ilCRet = btrAbortTrans(hlChf)
                                '    ilRet = MsgBox("Erase Not Completed, GetByKey(33) Cff Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                                '    Exit Function
                                'End If
                                ilRet = btrDelete(hlCff)
                            Loop While ilRet = BTRV_ERR_CONFLICT
                            If ilRet <> BTRV_ERR_NONE Then
'                                ilCRet = btrAbortTrans(hlChf)
                                ilRet = MsgBox("Erase Not Completed, Delete(34) Cff Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                Exit Function
                            End If
                            ilCff = tgCffCntr(ilCff).iNextCff
                        Loop
                        'ilRet = btrGetDirect(hlClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                        ilRet = btrGetEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, GetEqual(5) Clf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        Do
                            Do
                                tlCgfSrchKey1.lClfCode = tlClf.lCode
                                ilRet = btrGetEqual(hlCgf, tlCgf, ilCgfRecLen, tlCgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)
                                If ilRet <> BTRV_ERR_NONE Then
                                    ilCgfFound = False
                                    Exit Do
                                End If
                                ilCgfFound = True
                                ilRet = btrDelete(hlCgf)
                            Loop While ilRet = BTRV_ERR_CONFLICT
                        Loop While ilCgfFound
                        Do
                            tmCxfSrchKey.lCode = tlClf.lCxfCode
                            If tmCxfSrchKey.lCode <> 0 Then
                                tmCxf.sComment = ""
                                ilCxfRecLen = Len(tmCxf) '5027
                                ilRet = btrGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                                If ilRet <> BTRV_ERR_NONE Then
'                                    ilCRet = btrAbortTrans(hlChf)
                                    ilRet = MsgBox("Erase Not CompletedGetEqual(35) Cxf , Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                    Exit Function
                                End If
                                ilRet = btrDelete(hlCxf)
                            Else
                                ilRet = BTRV_ERR_NONE
                                Exit Do
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, Delete(36) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        If tlClf.lCxfCode > 0 Then
'                            If tgSpf.sRemoteUsers = "Y" Then
'                                tmDsf.lCode = 0
'                                tmDsf.sFileName = "CXF"
'                                gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'                                gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'                                tmDsf.iRemoteID = tmCxf.iRemoteID
'                                tmDsf.lAutoCode = tmCxf.lAutoCode
'                                tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'                                tmDsf.lCntrNo = 0
'                                ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'                            End If
                        End If
                        Do
                            'ilRet = btrGetDirect(hlClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                            ilRet = btrGetEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                            If ilRet <> BTRV_ERR_NONE Then
'                                ilCRet = btrAbortTrans(hlChf)
                                ilRet = MsgBox("Erase Not Completed, GetEqual(37) Clf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                Exit Function
                            End If
                            'tmRec = tmClf
                            'ilRet = gGetByKeyForUpdate("Clf", hlClf, tmRec)
                            'tmClf = tmRec
                            'If ilRet <> BTRV_ERR_NONE Then
                            '    ilCRet = btrAbortTrans(hlChf)
                            '    ilRet = MsgBox("Erase Not Completed, GetByKey(38) Clf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                            '    Exit Function
                            'End If
                            ilRet = btrDelete(hlClf)
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, Delete(39) Clf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                    End If
                Next ilClf
            Next ilLoop
'            ilRet = btrEndTrans(hlChf)
        End If
        'If all lines removed- remove header
        ilRet = gObtainCntr(hlChf, hlClf, hlCff, tgChfCntr.lCode, True, tmChf, tgClfCntr(), tgCffCntr())
        If UBound(tgClfCntr) <= LBound(tgClfCntr) Then
'            ilRet = btrBeginTrans(hlChf, 1000)
'            If ilRet <> BTRV_ERR_NONE Then
'                ilCRet = btrAbortTrans(hlChf)
'                ilRet = MsgBox("Erase Not Completed, BeginTrans(40) Try Later", vbOKOnly + vbExclamation, "Erase")
'                Exit Function
'            End If
            tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
            tmChfSrchKey1.iCntRevNo = 32000
            tmChfSrchKey1.iPropVer = 32000
            ilRet = btrGetGreaterOrEqual(hlChf, tmChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
            Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tgChfCntr.lCntrNo)
                llChfCode = tmChf.lCode
                ilRet = btrGetPosition(hlChf, llChfRecPos)
                'Multi-Media
                Do
                    tmMsfSrchKey2.lChfCode = tmChf.lCode
                    ilRet = btrGetGreaterOrEqual(hlMsf, tmMsf, imMsfRecLen, tmMsfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                    If (ilRet <> BTRV_ERR_NONE) Or (tmMsf.lChfCode <> tmChf.lCode) Then
                        Exit Do
                    End If
                    Do
                        tmMgfSrchKey1.lMsfCode = tmMsf.lCode
                        tmMgfSrchKey1.iGameNo = 0
                        ilRet = btrGetGreaterOrEqual(hlMgf, tmMgf, imMgfRecLen, tmMgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                        If (ilRet <> BTRV_ERR_NONE) Then
                            Exit Do
                        End If
                        If tmMgf.lMsfCode <> tmMsf.lCode Then
                            Exit Do
                        End If
                        ilRet = btrDelete(hlMgf)
                    Loop
                    Do
                        tmCxfSrchKey.lCode = tmMsf.lCxfCode
                        If tmCxfSrchKey.lCode <> 0 Then
                            tmCxf.sComment = ""
                            ilCxfRecLen = Len(tmCxf) '5027
                            ilRet = gCXFGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                            If ilRet = BTRV_ERR_NONE Then
                                ilRet = btrDelete(hlCxf)
                            End If
                        End If
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    ilRet = btrDelete(hlMsf)
                Loop While (ilRet = BTRV_ERR_CONFLICT) Or (ilRet = BTRV_ERR_NONE)
                'Billing
                tmSbfSrchKey0.lChfCode = tmChf.lCode
                tmSbfSrchKey0.iDate(0) = 0
                tmSbfSrchKey0.iDate(1) = 0
                tmSbfSrchKey0.sTranType = " "
                ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCode = tlSbf.lChfCode)
                    llSbfCode = tlSbf.lCode
                    ilRet = btrGetPosition(hlSbf, llSbfRecPos)
                    Do
                        'ilRet = btrGetDirect(hlSbf, tlSbf, ilSbfRecLen, llSbfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmSbfSrchKey1.lCode = llSbfCode
                        ilRet = btrGetEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hlChf)
                            ilRet = MsgBox("Erase Not Completed, GetEqual(41) Sbf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                            Exit Function
                        End If
                        'tmRec = tlSbf
                        'ilRet = gGetByKeyForUpdate("Sbf", hlSbf, tmRec)
                        'tlSbf = tmRec
                        'If ilRet <> BTRV_ERR_NONE Then
                        '    ilCRet = btrAbortTrans(hlChf)
                        '    ilRet = MsgBox("Erase Not Completed, GetByKey(42) Sbf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                        '    Exit Function
                        'End If
                        ilRet = btrDelete(hlSbf)
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not CompletedDelete(43) Sbf , Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                    tmSbfSrchKey0.lChfCode = tmChf.lCode
                    tmSbfSrchKey0.iDate(0) = 0
                    tmSbfSrchKey0.iDate(1) = 0
                    tmSbfSrchKey0.sTranType = " "
                    ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tmSbfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                Loop
                For ilLoop = 0 To 5 Step 1
                    Do  'Loop until record updated or added
                        Select Case ilLoop
                            Case 0
                                tmCxfSrchKey.lCode = tmChf.lCxfMerch
                            Case 1
                                tmCxfSrchKey.lCode = tmChf.lCxfProm
                            Case 2
                                tmCxfSrchKey.lCode = tmChf.lCxfInt
                            Case 3
                                tmCxfSrchKey.lCode = tmChf.lCxfCanc
                            Case 4
                                tmCxfSrchKey.lCode = tmChf.lCxfChgR
                            Case 5
                                tmCxfSrchKey.lCode = tmChf.lCxfCode
                        End Select
                        If tmCxfSrchKey.lCode <> 0 Then
                            tmCxf.sComment = ""
                            ilCxfRecLen = Len(tmCxf) '5027
                            ilRet = btrGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                            If ilRet <> BTRV_ERR_NONE Then
'                                ilCRet = btrAbortTrans(hlChf)
                                ilRet = MsgBox("Erase Not Completed, GetEqual(44) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                                Exit Function
                            End If
                            ilRet = btrDelete(hlCxf)
                        Else
                            ilRet = BTRV_ERR_NONE
                            Exit Do
                        End If
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If tmCxfSrchKey.lCode > 0 Then
'                        If tgSpf.sRemoteUsers = "Y" Then
'                            tmDsf.lCode = 0
'                            tmDsf.sFileName = "CXF"
'                            gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'                            gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'                            tmDsf.iRemoteID = tmCxf.iRemoteID
'                            tmDsf.lAutoCode = tmCxf.lAutoCode
'                            tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'                            tmDsf.lCntrNo = 0
'                            ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'                        End If
                    End If
                Next ilLoop
                If mDelPjf(tmChf.lCode, hlDsf) <> BTRV_ERR_NONE Then
'                    ilCRet = btrAbortTrans(hlChf)
                    ilRet = MsgBox("Erase Not Completed, Delete(45) Cxf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                    Exit Function
                End If
                Do
                    'ilRet = btrGetDirect(hlChf, tmChf, ilChfRecLen, llChfRecPos, INDEXKEY1, BTRV_LOCK_NONE)
                    tmChfSrchKey.lCode = llChfCode
                    ilRet = btrGetEqual(hlChf, tmChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                    If ilRet <> BTRV_ERR_NONE Then
'                        ilCRet = btrAbortTrans(hlChf)
                        ilRet = MsgBox("Erase Not Completed, GetEqual(46) Chf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Function
                    End If
                    'tmRec = tmChf
                    'ilRet = gGetByKeyForUpdate("Chf", hlChf, tmRec)
                    'tmChf = tmRec
                    'If ilRet <> BTRV_ERR_NONE Then
                    '    ilCRet = btrAbortTrans(hlChf)
                    '    ilRet = MsgBox("Erase Not Completed, GetByKey(47) Chf Error" & Str$(ilRet) & ", Try Later", vbOkOnly + vbExclamation, "Erase")
                    '    Exit Function
                    'End If
                    ilRet = btrDelete(hlChf)
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
'                    ilCRet = btrAbortTrans(hlChf)
                    ilRet = MsgBox("Erase Not Completed, Delete(48) Chf Error" & str$(ilRet) & ", Try Later", vbOKOnly + vbExclamation, "Erase")
                    Exit Function
                End If
'                If tgSpf.sRemoteUsers = "Y" Then
'                    tmDsf.lCode = 0
'                    tmDsf.sFileName = "CHF"
'                    gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'                    gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'                    tmDsf.iRemoteID = tmChf.iRemoteID
'                    tmDsf.lAutoCode = tmChf.lAutoCode
'                    tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'                    tmDsf.lCntrNo = tmChf.lCntrNo
'                    ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'                End If
                tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
                tmChfSrchKey1.iCntRevNo = 32000
                tmChfSrchKey1.iPropVer = 32000
                ilRet = btrGetGreaterOrEqual(hlChf, tmChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
            Loop
'            ilRet = btrEndTrans(hlChf)
        End If
    End If
    mCntrErase = True
End Function

Function mCntrTotals(imTotColor As Integer, smTotalDollars As String, smTotalSpots As String, imLnTotalType As Integer, smTotalNA As String, smFBITotal As String, smIBCTotal As String) As Boolean
    Dim ilClf As Integer
    Dim llTotalSpots As Long
    Dim llQTotalSpots As Long
    Dim slLnDollars As String
    Dim ilCff As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llSWDate As Long
    Dim llEWDate As Long
    Dim ilWkIndex As Integer
    Dim llSDate As Long
    Dim llEDate As Long
    Dim llMoStartDate As Long
    Dim llLoopDate As Long
    Dim ilDay As Integer
    Dim ilFlSpots As Integer
    Dim slStr As String
    Dim slPkgDollars As String
    Dim slItemDollars As String
    Dim clNum1 As Currency
    Dim clNum2 As Currency
    Dim clNum3 As Currency
    Dim ilLoop As Integer
    Dim llLnStartDate As Long
    Dim llLnEndDate As Long
    Dim llCStartDate As Long
    Dim llCEndDate As Long
    Dim ilAirWks As Integer
    Dim ilSpotsExist As Integer
    Dim ilLnMax As Integer
    Dim ilYear As Integer
    Dim ilMonth As Integer
    Dim ilSpots As Integer
    Dim slQTotalDollars As String
    Dim slLineType As String
    Dim slDate As String
    Dim slAirTimePlusNTRTotal As String
    '10/3/14: Don't show % if any rate card value is zero
    Dim blZeroRC As Boolean
    Dim llRCTotalPrice As Long
    Dim slLineTotalDollars As String
    ReDim llSpotCount(0 To 12) As Long
    Dim blOverflowMsgShown As Boolean
    Dim llRow As Long
    Dim slCPMCost As String
    
    mCntrTotals = True
    On Error GoTo TotalErr:
    blOverflowMsgShown = False
    Contract.lacLnTotals(0).Visible = False
    Contract.lacLnTotals(1).Visible = False
    For ilLoop = imLBCTCtrls To UBound(tmLnTCtrls) Step 1
        tmLnTCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBCTCtrls To UBound(tmLnDCtrls) Step 1
        tmLnDCtrls(ilLoop).sShow = ""
    Next ilLoop
    Contract.pbcLnTotal.Cls
    Contract.pbcLnDates.Cls
    'If (igLnSPChg) And (tgUrf(0).sUseComputeCMC = "I") Then
    '    imTotColor = 0
    '    Contract.lacLnTotals(0).BackColor = RED
    '    Contract.lacLnTotals(0).ForeColor = WHITE
    '    Contract.lacLnTotals(0).Visible = True
    '    Contract.lacLnTotals(0).Caption = " *For $ Totals: Press Compute"
    '    Exit Sub
    'End If
    llTotalSpots = 0
    smTotalDollars = "0"
    smTotalSpots = "0"
    llQTotalSpots = 0
    slQTotalDollars = "0"
    llRCTotalPrice = 0
    Contract.lacLnTotals(0).Caption = smTotalNA    'Same call in mInit and cbcFilter
    Contract.lacLnTotals(1).Caption = ""    'Same call in mInit and cbcFilter
    llSWDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
    llEWDate = lmHSStartDate + 7 * (imHSEndWkNo) - 1
    If llSWDate + 7 * 13 - 1 < llEWDate Then
        llEWDate = llSWDate + 7 * 13 - 1
    End If
    '10842 dead code
'    If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType > 1) Then
'        llSDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
'        'llEDate = lmHSStartDate + 7 * (imHSEndWkNo) - 1
'        'If llSDate + 7 * 13 - 1 < llEDate Then
'        '    llEDate = llSDate + 7 * 13 - 1
'        'End If
'        slDate = Format(llSDate, "m/d/yy")
'        gObtainMonthYear 0, slDate, ilMonth, ilYear
'        slDate = Trim$(str$(3 * ((ilMonth - 1) \ 3) + 1)) & "/15/" & Trim$(str$(ilYear))
'        llSDate = gDateValue(gObtainStartStd(slDate))
'        llEDate = llSDate + 7 * 12 - 1
'        ilMonth = (ilMonth - 1) \ 3 + 1
'        ilSpots = ilMonth
'        Do While ilSpots = ilMonth
'            llEDate = llEDate + 7
'            slDate = Format(llEDate, "m/d/yy")
'            gObtainMonthYear 0, slDate, ilMonth, ilYear
'            ilMonth = (ilMonth - 1) \ 3 + 1
'        Loop
'        llEDate = llEDate - 7
'        ilSpots = 0
'    Else
        llSDate = 0
        llEDate = 0
 '   End If
    llLnStartDate = 0
    llLnEndDate = 0
    llCStartDate = 0
    llCEndDate = 0
    ilAirWks = 0
    If (smLnSave(1, UBound(tgClfCntr) + 1) <> "") And (tgClfCntr(UBound(tgClfCntr)).iFirstCff <> -1) Then
        ilLnMax = UBound(tgClfCntr)
    Else
        ilLnMax = UBound(tgClfCntr) - 1
    End If
    '10/3/14: Ignore % computation if any Rate Card price is zero
    blZeroRC = False
    For ilClf = LBound(tgClfCntr) To ilLnMax Step 1
        slLineType = mGetLineType(ilClf + 1)
        'Status: 0=New; 1=Old & retain; 2=Old & delete;-1=ignore
        If ((tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1)) And (Not tgClfCntr(ilClf).iCancel) Or ((ilClf = UBound(tgClfCntr))) Then
            If tgClfCntr(ilClf).iGame Then
                If slLineType <> "H" Then
                    llTotalSpots = llTotalSpots + Val(smLnSave(3, ilClf + 1))
                End If
                If imLnSave(7, ilClf + 1) = 0 Then 'True price
                    slLnDollars = gMulStr(smLnSave(3, ilClf + 1), smLnSave(17, ilClf + 1))
                End If
            Else
                If slLineType <> "H" Then
                    'llTotalSpots = llTotalSpots + imLnSave(11, ilClf + 1)
                    llTotalSpots = llTotalSpots + Val(smLnSave(23, ilClf + 1))
                End If
                slLnDollars = smLnSave(18, ilClf + 1)
                ilSpotsExist = mFlightHaveSpots(ilClf + 1)
                ilCff = tgClfCntr(ilClf).iFirstCff
                Do While ilCff <> -1
                    'Status: 0=New; 1=Old & retain; 2=Old & delete;-1=New, unused
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate
                        gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate
                        llStartDate = gDateValue(slStartDate)
                        slStartDate = gObtainPrevMonday(slStartDate)
                        llMoStartDate = gDateValue(slStartDate)
                        llEndDate = gDateValue(slEndDate)
                        'If ilClf + 1 = imLnRowNo Then
                        '    If llLnStartDate = 0 Then
                        '        llLnStartDate = llStartDate
                        '        llLnEndDate = llEndDate
                        '    Else
                        '        llLnEndDate = llEndDate
                        '    End If
                        'End If
                        For llLoopDate = llMoStartDate To llEndDate Step 7
                            ilFlSpots = 0
                            If (tgCffCntr(ilCff).CffRec.sDyWk = "D") Then
                                For ilDay = 0 To 6 Step 1
                                    If (ilDay + llLoopDate >= llStartDate) And (ilDay + llLoopDate <= llEndDate) Then
                                        ilFlSpots = ilFlSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                    End If
                                Next ilDay
                            Else
                                ilFlSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                            End If
                            If (slLineType <> "H") Then
                                If llLoopDate <= llEWDate Then
                                    If llLoopDate >= llSWDate Then
                                        ilWkIndex = (llLoopDate - llSWDate) \ 7 + 1
                                        If (ilWkIndex >= 1) And (ilWkIndex <= 13) Then
                                            llSpotCount(ilWkIndex - 1) = llSpotCount(ilWkIndex - 1) + ilFlSpots
                                        End If
                                    End If
                                End If
                            End If
                            If (llLoopDate >= llSDate) And (llLoopDate <= llEDate) And (slLineType <> "H") Then
                                llQTotalSpots = llQTotalSpots + ilFlSpots
                                If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
                                    slStr = gLongToStrDec(ilFlSpots * tgCffCntr(ilCff).CffRec.lActPrice, 2)
                                    slQTotalDollars = gAddStr(slQTotalDollars, slStr)
                                End If
                            End If
                            If ilSpotsExist Then
                                If ilFlSpots > 0 Then
                                    If llCStartDate = 0 Then
                                        llCStartDate = llStartDate
                                        llCEndDate = llEndDate
                                    Else
                                        If llStartDate < llCStartDate Then
                                            llCStartDate = llStartDate
                                        End If
                                        If llEndDate > llCEndDate Then
                                            llCEndDate = llEndDate
                                        End If
                                    End If
                                End If
                            Else
                            '7114
'                                If llCStartDate = 0 Then
'                                    llCStartDate = llStartDate
'                                    llCEndDate = llEndDate
'                                Else
'                                    If llStartDate < llCStartDate Then
'                                        llCStartDate = llStartDate
'                                    End If
'                                    If llEndDate > llCEndDate Then
'                                        llCEndDate = llEndDate
'                                    End If
'                                End If
                            End If
                            If (ilClf + 1 = imLnRowNo) Then
                                If ilSpotsExist Then
                                    If ilFlSpots > 0 Then
                                        If llLnStartDate = 0 Then
                                            llLnStartDate = llStartDate
                                            llLnEndDate = llEndDate
                                        Else
                                            llLnEndDate = llEndDate
                                        End If
                                    End If
                                Else
                                '7114
'                                    If llLnStartDate = 0 Then
'                                        llLnStartDate = llStartDate
'                                        llLnEndDate = llEndDate
'                                    Else
'                                        llLnEndDate = llEndDate
'                                    End If
                                End If
                                If ilFlSpots > 0 Then
                                    ilAirWks = ilAirWks + 1
                                End If
                            End If
                        Next llLoopDate
                    End If
                    ilCff = tgCffCntr(ilCff).iNextCff
                Loop
            End If
            If (slLineType <> "H") Then
                smTotalDollars = gAddStr(smTotalDollars, slLnDollars)
            End If
            '6/23/12: Determine actual price so that it can be compared to Contract price
            If (tgSpf.sGUsePropSys = "Y") And (slLineType <> "O") And (slLineType <> "A") Then
                ilCff = tgClfCntr(ilClf).iFirstCff
                Do While ilCff <> -1
                    'Status: 0=New; 1=Old & retain; 2=Old & delete;-1=New, unused
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate
                        gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate
                        llStartDate = gDateValue(slStartDate)
                        slStartDate = gObtainPrevMonday(slStartDate)
                        llMoStartDate = gDateValue(slStartDate)
                        llEndDate = gDateValue(slEndDate)
                        For llLoopDate = llMoStartDate To llEndDate Step 7
                            ilFlSpots = 0
                            If (tgCffCntr(ilCff).CffRec.sDyWk = "D") Then
                                For ilDay = 0 To 6 Step 1
                                    If (ilDay + llLoopDate >= llStartDate) And (ilDay + llLoopDate <= llEndDate) Then
                                        ilFlSpots = ilFlSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                    End If
                                Next ilDay
                            Else
                                ilFlSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                            End If
                            If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
                                'llRCTotalPrice and lPropPrice: no cents (xxxx, not xxxx.xx)
                                If gCompNumberStr(gAddStr(str$(llRCTotalPrice), gMulStr(str$(ilFlSpots), str(tgCffCntr(ilCff).CffRec.lPropPrice))), "21000000") > 0 Then
                                    If Not blOverflowMsgShown Then
                                        blOverflowMsgShown = True
                                        MsgBox "Contract Combination of Price and Spots exceeded 21,000,000, Proposal Price set to Zero", vbOKOnly + vbExclamation, "Warning"
                                    End If
                                    tgCffCntr(ilCff).CffRec.lPropPrice = 0
                                End If
                                llRCTotalPrice = llRCTotalPrice + ilFlSpots * tgCffCntr(ilCff).CffRec.lPropPrice
                                '10/3/14: Ignore % computation if any Rate Card price is zero
                                If tgCffCntr(ilCff).CffRec.lPropPrice <= 0 Then
                                    blZeroRC = True
                                End If
                            End If
                        Next llLoopDate
                    End If
                    ilCff = tgCffCntr(ilCff).iNextCff
                Loop
            End If
        End If
    Next ilClf
    'Add in Podacst CPM dollars
    slCPMCost = "0.00"
    For llRow = Contract.grdCPMBuy.FixedRows To Contract.grdCPMBuy.rows - 1 Step 1
        If (Contract.grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
            If Contract.grdCPMBuy.TextMatrix(llRow, CPMLNTYPE) <> "P" Then
                If (Contract.grdCPMBuy.TextMatrix(llRow, CPMSTARTDATE) <> "CBS") And (Contract.grdCPMBuy.TextMatrix(llRow, CPMENDDATE) <> "Deleted") Then
                    'smTotalDollars = gAddStr(smTotalDollars, Contract.grdCPMBuy.TextMatrix(llRow, CPMCOST))
                    slCPMCost = gAddStr(slCPMCost, Contract.grdCPMBuy.TextMatrix(llRow, CPMCOST))
                End If
            End If
        End If
    Next llRow
    For ilLoop = LBound(llSpotCount) To UBound(llSpotCount) Step 1
        If llSpotCount(ilLoop) <> 0 Then
            slStr = Trim$(str$(llSpotCount(ilLoop)))
        Else
            slStr = ""
        End If
        'gSetShow Contract.pbcLnTotal, slStr, tmLnTCtrls(ilLoop)
        tmLnTCtrls(ilLoop + 1).sShow = slStr
    Next ilLoop
    '10843 remove dead code
'    If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType > 1) Then
'        If (llQTotalSpots > 0) Then
'            slStr = Trim$(str$(llQTotalSpots))
'        Else
'            slStr = ""
'        End If
'    Else
        If (llTotalSpots > 0) Then
            slStr = Trim$(str$(llTotalSpots))
        Else
            slStr = ""
        End If
'    End If
    
    'gSetShow Contract.pbcLnTotal, slStr, tmLnTCtrls(14)
    tmLnTCtrls(14).sShow = slStr
   ''Bypass allocation contracts since $ are not accurate
   ' If (sgCntrScreen = "Orders") And (Contract.lbcType.ListIndex = 2) Then
   '     tmLnTCtrls(15).sShow = ""
   ' Else
   '10843 remove dead code
'    If (tgSpf.sCLnStdQt = "Y") And (imLnTotalType > 1) Then
'        If (llQTotalSpots > 0) Or (slQTotalDollars <> "0") Then
'            slStr = slQTotalDollars
'            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
'            'gSetShow Contract.pbcLnTotal, slStr, tmLnTCtrls(15)
'            tmLnTCtrls(15).sShow = slStr
'        Else
'            tmLnTCtrls(15).sShow = ""
'        End If
'    Else
        If (llTotalSpots > 0) Or (smTotalDollars <> "0") Then
            If imLnTotalType <> 1 Then   'Show average
                If llTotalSpots > 0 Then
                    'slStr = gDivStr(smTotalDollars, Trim$(Str$(llTotalSpots)))
                    slStr = gLongToStrDec(gStrDecToLong(smTotalDollars, 2) \ llTotalSpots, 2)  'gDivStr(smTotalDollars, Trim$(Str$(llTotalSpots)))
                Else
                    slStr = ""
                End If
            Else
                slStr = smTotalDollars
            End If
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            'gSetShow Contract.pbcLnTotal, slStr, tmLnTCtrls(15)
            tmLnTCtrls(15).sShow = slStr
        Else
            tmLnTCtrls(15).sShow = ""
        End If
 '   End If
   ' End If
    'Contract.pbcLnTotal_Paint--- move to mCntrTotal
    'gUnpackDate tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), slStartDate
    'gUnpackDate tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1), slEndDate
    If llCStartDate > 0 Then
        slStartDate = Format$(llCStartDate, "m/d/yy")
        slEndDate = Format$(llCEndDate, "m/d/yy")
    Else
        slStartDate = ""
        slEndDate = ""
    End If
    If (slStartDate <> "") Then
        slStr = slStartDate & "-" & slEndDate & str$((gDateValue(slEndDate) - gDateValue(slStartDate)) \ 7 + 1)
        gSetShow Contract.pbcLnDates, slStr, tmLnDCtrls(1)
        If llLnStartDate <> 0 Then
            slStr = Format$(llLnStartDate, "m/d/yy") & "-" & Format$(llLnEndDate, "m/d/yy") & str$(ilAirWks) & "/" & Trim$(str$((llLnEndDate - llLnStartDate) \ 7 + 1))
            gSetShow Contract.pbcLnDates, slStr, tmLnDCtrls(2)
        Else
            slStr = ""
            gSetShow Contract.pbcLnDates, slStr, tmLnDCtrls(2)
        End If
    Else
        slStr = ""
        gSetShow Contract.pbcLnDates, slStr, tmLnDCtrls(1)
        slStr = ""
        gSetShow Contract.pbcLnDates, slStr, tmLnDCtrls(2)
    End If
    'Contract.pbcLnDates_Paint-- moved to mCntrTotal
    ''Bypass allocation contracts
    'If (sgCntrScreen = "Orders") And (Contract.lbcType.ListIndex = 2) Then
    '    Exit Sub
    'End If
    Contract.lacLnTotals(0).ForeColor = BLACK
    Contract.lacLnTotals(1).ForeColor = BLACK
    smTotalDollars = gAddStr(smTotalDollars, slCPMCost)
    slAirTimePlusNTRTotal = gAddStr(smTotalDollars, smIBCTotal)
    slLineTotalDollars = smTotalDollars
    imTotColor = 2  'Default OK
    If Contract.lbcBillCycle.ListIndex <= 2 Then
        'If (llTotalSpots > 0) Or (smTotalDollars <> "0") Then
        If (llTotalSpots > 0) Or (gStrDecToLong(slAirTimePlusNTRTotal, 2) <> 0) Then
            slStr = smHdSave(1) 'Contract.edcGross.Text
            If slStr = "" Then
                slStr = "0"
            End If
            If gCompNumberStr(slAirTimePlusNTRTotal, slStr) = 0 Then
                imTotColor = 2
                Contract.lacLnTotals(0).BackColor = GREEN
            Else
                imTotColor = 0
                Contract.lacLnTotals(0).BackColor = Red
                Contract.lacLnTotals(0).ForeColor = WHITE
            End If
            Contract.lacLnTotals(0).Visible = True
            smTotalSpots = Trim$(str$(llTotalSpots))
            gFormatStr smTotalDollars, FMTLEAVEBLANK + FMTCOMMA, 2, smTotalDollars
            slStr = "Totals: Spots " & smTotalSpots & "  $" & smTotalDollars
            Contract.lacLnTotals(0).Caption = slStr
            If Val(smIBCTotal) <> 0 Then
                gFormatStr smIBCTotal, FMTLEAVEBLANK + FMTCOMMA, 2, slItemDollars
                slStr = slStr & " NTR $" & slItemDollars
            End If
            '10/3/14: Ignore % computation if any Rate Card price is zero
            If (tgSpf.sGUsePropSys = "Y") And (llRCTotalPrice > 0) And (Not blZeroRC) Then
                If gCompNumberStr(slLineTotalDollars, gLongToStrDec(llRCTotalPrice, 0)) >= 0 Then
                    Contract.lacLnTotals(1).BackColor = GREEN
                Else
                    Contract.lacLnTotals(1).BackColor = Red
                    Contract.lacLnTotals(1).ForeColor = WHITE
                End If
                Contract.lacLnTotals(1).Caption = gRoundStr(gSubStr(gDivStr(gMulStr("100", slLineTotalDollars), gLongToStrDec(llRCTotalPrice, 0)), "100"), "1.00", 0) & "%"
                Contract.lacLnTotals(1).Visible = True
            End If
        End If
    Else
        If (llTotalSpots > 0) Or (smFBITotal <> "0") Or (smTotalDollars <> "0") Then
            slStr = smHdSave(1) 'Contract.edcGross.Text
            If slStr = "" Then
                slStr = "0"
            End If
            If gCompNumberStr(smFBITotal, slStr) = 0 Then
                clNum1 = Val(smFBITotal)
                clNum1 = clNum1 + 0.01 * clNum1
                clNum2 = Val(smFBITotal)
                clNum2 = clNum2 - 0.01 * clNum1
                clNum3 = Val(smTotalDollars)
                If (smTotalDollars = "0") Or ((clNum3 >= clNum2) And (clNum3 <= clNum1)) Then
                    imTotColor = 2
                    Contract.lacLnTotals(0).BackColor = GREEN
                Else
                    imTotColor = 1
                    Contract.lacLnTotals(0).BackColor = Yellow
                End If
            Else
                imTotColor = 0
                Contract.lacLnTotals(0).BackColor = Red
                Contract.lacLnTotals(0).ForeColor = WHITE
            End If
            Contract.lacLnTotals(0).Visible = True
            smTotalSpots = Trim$(str$(llTotalSpots))
            gFormatStr smFBITotal, FMTLEAVEBLANK + FMTCOMMA, 2, slPkgDollars
            slStr = "Totals: Spots " & smTotalSpots & " Pkg $" & slPkgDollars
            If smTotalDollars <> "0" Then
                gFormatStr smTotalDollars, FMTLEAVEBLANK + FMTCOMMA, 2, smTotalDollars
                slStr = slStr & " Spot $" & smTotalDollars
            End If
            Contract.lacLnTotals(0).Caption = slStr
        End If
    End If
    If Val(smIBCTotal) <> 0 Then
        gFormatStr smIBCTotal, FMTLEAVEBLANK + FMTCOMMA, 2, slItemDollars
        Contract.lacLnTotals(2).Caption = "NTR $" & slItemDollars
        'Contract.lacLnTotals(2).Left = Contract.lacCreditInfo.Left + Contract.lacCreditInfo.Width - Contract.lacLnTotals(2).Width
        Contract.lacLnTotals(2).Left = Contract.lacSchStatus.Left + Contract.lacSchStatus.Width - Contract.lacLnTotals(2).Width
        Contract.lacLnTotals(2).Visible = True
        If Contract.lacLnTotals(1).Visible Then
        '    Contract.lacLnTotals(1).Left = Contract.lacLnTotals(2).Left - Contract.lacLnTotals(1).Width - 15
        '    Contract.lacLnTotals(0).Left = Contract.lacLnTotals(1).Left - Contract.lacLnTotals(0).Width - 15
            Contract.lacLnTotals(1).Left = Contract.tscLine.Left + Contract.tscLine.Width - Contract.lacLnTotals(1).Width
        'Else
        '    Contract.lacLnTotals(0).Left = Contract.lacLnTotals(2).Left - Contract.lacLnTotals(0).Width - 15
        End If
        Contract.lacLnTotals(0).Left = Contract.lacLnTotals(2).Left - Contract.lacLnTotals(0).Width - 15
    Else
        Contract.lacLnTotals(2).Visible = False
        'Contract.lacLnTotals(0).Left = Contract.lacCreditInfo.Left + Contract.lacCreditInfo.Width - Contract.lacLnTotals(0).Width
        If Contract.lacLnTotals(1).Visible Then
        '    Contract.lacLnTotals(1).Left = Contract.lacSchStatus.Left + Contract.lacSchStatus.Width - Contract.lacLnTotals(1).Width
        '    Contract.lacLnTotals(0).Left = Contract.lacLnTotals(1).Left - Contract.lacLnTotals(0).Width - 15
            Contract.lacLnTotals(1).Left = Contract.tscLine.Left + Contract.tscLine.Width - Contract.lacLnTotals(1).Width
        'Else
        '    Contract.lacLnTotals(0).Left = Contract.lacSchStatus.Left + Contract.lacSchStatus.Width - Contract.lacLnTotals(0).Width
        End If
        Contract.lacLnTotals(0).Left = Contract.lacSchStatus.Left + Contract.lacSchStatus.Width - Contract.lacLnTotals(0).Width
    End If
    Contract.mSetCpmInfo
    Exit Function
TotalErr:
Resume Next
    'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
    gExceedLimitMsg
    mCntrTotals = False
End Function

Function mComputeRCWkPrice(ilInRcfCode As Integer, ilRdfCode As Integer, slAirDate As String, ilVefCode As Integer, ilRowNo As Integer) As Long
    Dim slDate As String
    Dim ilRCMonth As Integer
    Dim ilRCYear As Integer
    Dim slRCStartDate As String
    Dim ilRCWkNo As Integer
    Dim llYearFound As Long
    Dim llRif As Long
    Dim llWkPrice As Long
    Dim slLineType As String
    Dim ilRcf As Integer
    Dim ilRcfCode As Integer
    Dim llAirDate As Long
    Dim llStartRifIndex As Long
    Dim ilTest As Integer

    If ilRowNo > 0 Then 'mPopPBRates sets ilRowNo = -1
        slLineType = mGetLineType(ilRowNo)
        If (slLineType = "O") Or (slLineType = "A") Then
            mComputeRCWkPrice = 0
            Exit Function
        End If
    End If
    slDate = gObtainEndStd(slAirDate)
    llAirDate = gDateValue(slDate)
    gObtainMonthYear 0, slDate, ilRCMonth, ilRCYear  'Standard month
    slDate = "1/15/" & Trim$(str$(ilRCYear))
    slRCStartDate = gObtainStartStd(slDate)
    ilRCWkNo = (gDateValue(slAirDate) - gDateValue(slRCStartDate)) \ 7 + 1
    'Obtain the rate card from the date
    ilRcfCode = ilInRcfCode
    llStartRifIndex = LBound(tgMRif)
    For ilRcf = 0 To UBound(tmRCSort) - 1 Step 1
        If tmRCSort(ilRcf).lStartDate <= llAirDate Then
            ilRcfCode = tmRCSort(ilRcf).iRcfCode
            llStartRifIndex = tmRCSort(ilRcf).lRifIndex
            If ilRcfCode <> ilInRcfCode Then
                'See if dates match, if so change to ilInRcfCode
                For ilTest = ilRcf + 1 To UBound(tmRCSort) - 1 Step 1
                    If tmRCSort(ilRcf).lStartDate = tmRCSort(ilTest).lStartDate Then
                        If tmRCSort(ilTest).iRcfCode = ilInRcfCode Then
                            ilRcfCode = tmRCSort(ilTest).iRcfCode
                            llStartRifIndex = tmRCSort(ilTest).lRifIndex
                            Exit For
                        End If
                    Else
                        Exit For
                    End If
                Next ilTest
            End If
            Exit For
        End If
    Next ilRcf
    llYearFound = -1
    For llRif = llStartRifIndex To UBound(tgMRif) - 1 Step 1
        If (tgMRif(llRif).iRcfCode = ilRcfCode) And (tgMRif(llRif).iVefCode = ilVefCode) And (tgMRif(llRif).iRdfCode = ilRdfCode) And (tgMRif(llRif).iYear = ilRCYear) Then
            llYearFound = llRif
            Exit For
        End If
        If (tgMRif(llRif).iRcfCode <> ilRcfCode) Then
            Exit For
        End If
    Next llRif
'    'Step 2: Determine which price record to use (rif)
'    'slNameCode = Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
'    'ilRet = gParseItem(slNameCode, 3, "\", slCode)
'    If ilYearFound = -1 Then
'        ilRcfCode = ilInRcfCode
'        For ilRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
'            If (tgMRif(ilRif).iRcfCode = ilRcfCode) And (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfcode = ilRdfCode) And (tgMRif(ilRif).iYear = ilRCYear) Then
'                ilYearFound = ilRif
'                Exit For
'            End If
'        Next ilRif
'    End If
'    If ilYearFound = -1 Then
'        'Find earliest year record that is closest to year
'        For ilRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
'            'If (tgMRif(ilRif).iRcfCode = ilRcfCode) And (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfCode = ilRdfCode) Then
'            If (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfcode = ilRdfCode) Then
'                If (tgMRif(ilRif).iYear > ilRCYear) Then
'                    If ilYearFound <> -1 Then
'                        If (tgMRif(ilRif).iYear < tgMRif(ilYearFound).iYear) Then
'                            ilYearFound = ilRif
'                        End If
'                    Else
'                        ilYearFound = ilRif
'                    End If
'                End If
'            End If
'        Next ilRif
'    End If
'    If ilYearFound = -1 Then
'        'Find latest year record that is closest to Year
'        For ilRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
'            'If (tgMRif(ilRif).iRcfCode = ilRcfCode) And (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfCode = ilRdfCode) Then
'            If (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfcode = ilRdfCode) Then
'                If (tgMRif(ilRif).iYear < ilRCYear) Then
'                    If ilYearFound <> -1 Then
'                        If (tgMRif(ilRif).iYear > tgMRif(ilYearFound).iYear) Then
'                            ilYearFound = ilRif
'                            ilRCWkNo = 52
'                        End If
'                    Else
'                        ilYearFound = ilRif
'                        ilRCWkNo = 52
'                    End If
'                End If
'            End If
'        Next ilRif
'    End If
'    If ilYearFound = -1 Then
'        'Find first year record that is closest to Year
'        For ilRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
'            'If (tgMRif(ilRif).iRcfCode = ilRcfCode) And (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfCode = ilRdfCode) Then
'            If (tgMRif(ilRif).iVefCode = ilVefCode) And (tgMRif(ilRif).iRdfcode = ilRdfCode) Then
'                If (tgMRif(ilRif).iYear > ilRCYear) Then
'                    If ilYearFound <> -1 Then
'                        If (tgMRif(ilRif).iYear < tgMRif(ilYearFound).iYear) Then
'                            ilYearFound = ilRif
'                            ilRCWkNo = 1
'                        End If
'                    Else
'                        ilYearFound = ilRif
'                        ilRCWkNo = 1
'                    End If
'                End If
'            End If
'        Next ilRif
'    End If
    If llYearFound = -1 Then
        llWkPrice = 0   '-1  '0
    Else
        If ilRCWkNo = 1 Then
            llWkPrice = tgMRif(llYearFound).lRate(0) + tgMRif(llYearFound).lRate(1)
        'ElseIf ilRCWkNo = 52 Then
        '    llWkPrice = tgMRif(ilYearFound).lRate(52) + tgMRif(ilYearFound).lRate(53)
        Else
            llWkPrice = tgMRif(llYearFound).lRate(ilRCWkNo)
        End If
    End If
    mComputeRCWkPrice = llWkPrice
End Function

Function mCreateVef() As Integer
    Dim ilClf As Integer
    Dim ilVeh As Integer
    Dim hlVef As Integer
    Dim tlVef As VEF
    Dim ilVefRecLen As Integer
    Dim ilRet As Integer
    Dim ilPkg As Integer
    Dim ilCRet As Integer
    Dim ilVefChgd As Integer
    Dim ilVef As Integer

    ilVefChgd = False
    hlVef = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlVef, "", sgDBPath & "Vef.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        mCreateVef = ilRet
        Exit Function
    End If
    ilRet = BTRV_ERR_NONE
    ilVefRecLen = Len(tlVef) 'btrRecordLength(hmVef)     'Get Vef size
    For ilClf = 0 To UBound(tgClfCntr) - 1 Step 1
        If (tgClfCntr(ilClf).ClfRec.iVefCode = 0) And ((tgClfCntr(ilClf).ClfRec.sType = "O") Or (tgClfCntr(ilClf).ClfRec.sType = "A") Or (tgClfCntr(ilClf).ClfRec.sType = "E")) Then
            For ilVeh = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                If StrComp(Trim$(smLnSave(1, ilClf + 1)), Trim$(tgPackVeh(ilVeh).sName), 1) = 0 Then
                    If tgPackVeh(ilVeh).iCode = 0 Then
                        For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                            If StrComp(Trim$(smLnSave(1, ilClf + 1)), Trim$(tgMVef(ilVef).sName), 1) = 0 Then
                                tgPackVeh(ilVeh).iCode = tgMVef(ilVef).iCode
                                Exit For
                            End If
                        Next ilVef
                        If tgPackVeh(ilVeh).iCode = 0 Then
                            tmVefSrchKey3.sName = Trim$(smLnSave(1, ilClf + 1))
                            ilRet = btrGetEqual(hlVef, tlVef, ilVefRecLen, tmVefSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                            If ilRet = BTRV_ERR_NONE Then
                                tgPackVeh(ilVeh).iCode = tlVef.iCode
                            End If
                        End If
                    End If
                    If tgPackVeh(ilVeh).iCode = 0 Then
                        'Create vehicle record
                        gInitVef tlVef
                        tlVef.iCode = 0
                        tlVef.sType = "P"
                        tlVef.sState = "A"
                        tlVef.sExportRAB = "N"
                        tlVef.sName = smLnSave(1, ilClf + 1)
                        'tlVef.sMktName = ""
                        tlVef.iMnfVehGp3Mkt = 0
                        For ilPkg = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                            If tgPackLn(ilPkg).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                tlVef.iMnfVehGp3Mkt = tgPackLn(ilPkg).iMnfVehGp3Mkt
                                Exit For
                            End If
                        Next ilPkg
'                        tlVef.iMnfVehGp5Rsch = 0
'                        tlVef.sAddr(0) = ""
'                        tlVef.sAddr(1) = ""
'                        tlVef.sAddr(2) = ""
'                        tlVef.sPhone = ""
'                        tlVef.sFax = ""
'                        tlVef.sDialPos = ""
'                        tlVef.lPvfCode = 0
'                        'tlVef.sFormat = ""
'                        tlVef.sUpdateRVF(0) = ""
'                        tlVef.sUpdateRVF(1) = ""
'                        tlVef.sUpdateRVF(2) = ""
'                        tlVef.sUpdateRVF(3) = ""
'                        tlVef.sUpdateRVF(4) = ""
'                        tlVef.sUpdateRVF(5) = ""
'                        tlVef.sUpdateRVF(6) = ""
'                        tlVef.sUpdateRVF(7) = ""
'                        'tlVef.sUpdateRVF(8) = ""
'                        tlVef.iMnfVehGp4Fmt = 0
'                        tlVef.iMnfVehGp2 = 0
'                        tlVef.sType = "P"
'                        tlVef.sCodeStn = ""
'                        tlVef.iVefCode = 0
'                        tlVef.iCombineVefCode = 0
'                        tlVef.iOwnerMnfCode = 0
'                        tlVef.iProdPct(0) = 0
'                        tlVef.iProdPct(1) = 0
'                        tlVef.iProdPct(2) = 0
'                        tlVef.iProdPct(3) = 0
'                        tlVef.iProdPct(4) = 0
'                        tlVef.iProdPct(5) = 0
'                        tlVef.iProdPct(6) = 0
'                        tlVef.iProdPct(7) = 0
'                        'tlVef.iProdPct(8) = 0
'                        tlVef.sState = "A"
'                        tlVef.iMnfGroup(0) = 0
'                        tlVef.iMnfGroup(1) = 0
'                        tlVef.iMnfGroup(2) = 0
'                        tlVef.iMnfGroup(3) = 0
'                        tlVef.iMnfGroup(4) = 0
'                        tlVef.iMnfGroup(5) = 0
'                        tlVef.iMnfGroup(6) = 0
'                        tlVef.iMnfGroup(7) = 0
'                        'tlVef.iMnfGroup(8) = 0
'                        tlVef.iSort = 0
'                        tlVef.iDnfCode = 0
'                        tlVef.iReallDnfCode = 0
'                        tlVef.iMnfDemo = 0
'                        tlVef.iMnfSSCode(0) = 0
'                        tlVef.iMnfSSCode(1) = 0
'                        tlVef.iMnfSSCode(2) = 0
'                        tlVef.iMnfSSCode(3) = 0
'                        tlVef.iMnfSSCode(4) = 0
'                        tlVef.iMnfSSCode(5) = 0
'                        tlVef.iMnfSSCode(6) = 0
'                        tlVef.iMnfSSCode(7) = 0
'                        'tlVef.iMnfSSCode(8) = 0
'                        tlVef.sExportRAB = "N"
'                        tlVef.lVsfCode = 0
'                        tlVef.lRateAud = 0
'                        tlVef.lCPPCPM = 0
'                        tlVef.lYearAvails = 0
'                        tlVef.iPctSellout = 0
'                        tlVef.iMnfVehGp6Sub = 0
'                        tlVef.iNrfCode = 0
'                        tlVef.iSSMnfCode = 0
'                        tlVef.sStdPrice = ""
'                        tlVef.sStdInvTime = ""
'                        tlVef.sStdAlter = ""
'                        tlVef.sStdAlterName = ""
                        tlVef.iRemoteID = tgUrf(0).iRemoteUserID
                        tlVef.iAutoCode = tlVef.iCode
                        ilRet = btrInsert(hlVef, tlVef, ilVefRecLen, INDEXKEY0)
                        If ilRet <> BTRV_ERR_NONE Then
                            btrDestroy hlVef
                            mCreateVef = ilRet
                            Exit Function
                        End If
                        Do
                            tlVef.iRemoteID = tgUrf(0).iRemoteUserID
                            tlVef.iAutoCode = tlVef.iCode
                            'tlVef.iSourceID = tgUrf(0).iRemoteUserID
                            'gPackDate smSyncDate, tlVef.iSyncDate(0), tlVef.iSyncDate(1)
                            'gPackTime smSyncTime, tlVef.iSyncTime(0), tlVef.iSyncTime(1)
                            ilRet = btrUpdate(hlVef, tlVef, ilVefRecLen)
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            btrDestroy hlVef
                            mCreateVef = ilRet
                            Exit Function
                        End If
                        
                        '11/26/17
                        gFileChgdUpdate "vef.btr", False
                        
                        tgMVef(UBound(tgMVef)) = tlVef
                        ReDim Preserve tgMVef(0 To UBound(tgMVef) + 1) As VEF
                        'If UBound(tgMVef) > 2 Then
                        If UBound(tgMVef) > 1 Then
                            'ArraySortTyp fnAV(tgMVef(), 1), UBound(tgMVef) - 1, 0, LenB(tgMVef(1)), 0, -1, 0
                            ArraySortTyp fnAV(tgMVef(), 0), UBound(tgMVef), 0, LenB(tgMVef(0)), 0, -1, 0
                        End If
                        'Create Vpf; don't bypass by testing bgCntrFirstCallToVpfFind
                        ilRet = gVpfFind(Contract, tlVef.iCode)
                        tgClfCntr(ilClf).ClfRec.iVefCode = tlVef.iCode
                        tgPackVeh(ilVeh).iCode = tlVef.iCode
                        ilVefChgd = True
                    Else
                        tgClfCntr(ilClf).ClfRec.iVefCode = tgPackVeh(ilVeh).iCode
                        tmVefSrchKey.iCode = tgPackVeh(ilVeh).iCode
                        ilRet = btrGetEqual(hlVef, tlVef, ilVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                        'Test if Market name changed
                        If ilRet = BTRV_ERR_NONE Then
                            For ilPkg = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                                If tgPackLn(ilPkg).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                    If tlVef.iMnfVehGp3Mkt <> tgPackLn(ilPkg).iMnfVehGp3Mkt Then
                                        Do
                                            tlVef.iMnfVehGp3Mkt = tgPackLn(ilPkg).iMnfVehGp3Mkt
                                            'tlVef.iSourceID = tgUrf(0).iRemoteUserID
                                            'gPackDate smSyncDate, tlVef.iSyncDate(0), tlVef.iSyncDate(1)
                                            'gPackTime smSyncTime, tlVef.iSyncTime(0), tlVef.iSyncTime(1)
                                            ilRet = btrUpdate(hlVef, tlVef, ilVefRecLen)
                                            If ilRet = BTRV_ERR_CONFLICT Then
                                                tmVefSrchKey.iCode = tgPackVeh(ilVeh).iCode
                                                ilCRet = btrGetEqual(hlVef, tlVef, ilVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                                            End If
                                        Loop While ilRet = BTRV_ERR_CONFLICT
                                        If ilRet <> BTRV_ERR_NONE Then
                                            btrDestroy hlVef
                                            mCreateVef = ilRet
                                            Exit Function
                                        End If
                                        ilRet = gBinarySearchVef(tlVef.iCode)
                                        If ilRet <> -1 Then
                                            tgMVef(ilRet) = tlVef
                                        End If
                                        ilVefChgd = True
                                        '11/26/17
                                        gFileChgdUpdate "vef.btr", False
                                    End If
                                    Exit For
                                End If
                            Next ilPkg
                        End If
                    End If
                End If
            Next ilVeh
        ElseIf ((tgClfCntr(ilClf).ClfRec.sType = "O") Or (tgClfCntr(ilClf).ClfRec.sType = "A") Or (tgClfCntr(ilClf).ClfRec.sType = "E")) Then
            For ilVeh = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                If StrComp(Trim$(smLnSave(1, ilClf + 1)), Trim$(tgPackVeh(ilVeh).sName), 1) = 0 Then
                    tmVefSrchKey.iCode = tgPackVeh(ilVeh).iCode
                    ilRet = btrGetEqual(hlVef, tlVef, ilVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                    'Test if Market name changed
                    If ilRet = BTRV_ERR_NONE Then
                        For ilPkg = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                            If tgPackLn(ilPkg).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                If tlVef.iMnfVehGp3Mkt <> tgPackLn(ilPkg).iMnfVehGp3Mkt Then
                                    Do
                                        tlVef.iMnfVehGp3Mkt = tgPackLn(ilPkg).iMnfVehGp3Mkt
                                        'tlVef.iSourceID = tgUrf(0).iRemoteUserID
                                        'gPackDate smSyncDate, tlVef.iSyncDate(0), tlVef.iSyncDate(1)
                                        'gPackTime smSyncTime, tlVef.iSyncTime(0), tlVef.iSyncTime(1)
                                        ilRet = btrUpdate(hlVef, tlVef, ilVefRecLen)
                                        If ilRet = BTRV_ERR_CONFLICT Then
                                            tmVefSrchKey.iCode = tgPackVeh(ilVeh).iCode
                                            ilCRet = btrGetEqual(hlVef, tlVef, ilVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                                        End If
                                    Loop While ilRet = BTRV_ERR_CONFLICT
                                    If ilRet <> BTRV_ERR_NONE Then
                                        btrDestroy hlVef
                                        mCreateVef = ilRet
                                        Exit Function
                                    End If
                                    ilRet = gBinarySearchVef(tlVef.iCode)
                                    If ilRet <> -1 Then
                                        tgMVef(ilRet) = tlVef
                                    End If
                                    ilVefChgd = True
                                    '11/26/17
                                    gFileChgdUpdate "vef.btr", False
                                    
                                End If
                                Exit For
                            End If
                        Next ilPkg
                    End If
                End If
            Next ilVeh
        End If
    Next ilClf
    If ilVefChgd Then
        'sgMVefStamp = "~"   'Force Read
        'ilRet = gObtainVef()
        'sgVpfStamp = "~"    'Force read
        'ilRet = gVpfRead()
    End If
    ilRet = btrClose(hlVef)
    btrDestroy hlVef
    mCreateVef = BTRV_ERR_NONE
End Function

Sub mCVehOptIndex(ilLnRowNo As Integer, ilVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer)
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilCode As Integer
    Dim ilVeh As Integer
    Dim ilVef As Integer
    Dim slLineType As String
    ilVpfIndex = -1
    slLineType = mGetLineType(ilLnRowNo)
    If ilLnRowNo <= 0 Then
        Exit Sub
    End If
    On Error GoTo mCVehOptIndexErr1
    'If ilLnRowNo < LBound(smLnSave, 2) Then
    If ilLnRowNo < imLB1Or2 Then
        Exit Sub
    End If
    If ilLnRowNo > UBound(smLnSave, LINEBOUNDINDEX) Then '2) Then
        Exit Sub
    End If
    If (smLnSave(1, ilLnRowNo) = "") Then
        Exit Sub
    End If
    On Error GoTo 0
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        gFindMatch smLnSave(1, ilLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
        If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
            Exit Sub
        End If
        slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        On Error GoTo mCVehOptIndexErr
        gCPErrorMsg ilRet, "mCVehOptIndex (gParseItem field 2)", Contract
        On Error GoTo 0
        ilCode = CInt(slCode)
        If (ilCode = ilVefCode) And (ilVpfIndex >= 0) Then
            Exit Sub
        End If
        ilVefCode = ilCode
        'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
        '    If ilVefCode = tgMVef(ilVef).iCode Then
                ilVef = gBinarySearchVef(ilVefCode)
                If ilVef <> -1 Then
                'If tgMVef(ilVef).sType <> "P" Then
                    ilVpfIndex = gBinarySearchVpfPlus(ilCode)   'gVpfFind(Contract, ilCode)
                'End If
                'Exit For
            End If
        'Next ilVef
    Else
        For ilVeh = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
            If StrComp(Trim$(smLnSave(1, ilLnRowNo)), Trim$(tgPackVeh(ilVeh).sName), 1) = 0 Then
                ilVefCode = tgPackVeh(ilVeh).iCode
                If tgPackVeh(ilVeh).iCode <> 0 Then
                    'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                    '    If tgPackVeh(ilVeh).iCode = tgMVef(ilVef).iCode Then
                        ilVef = gBinarySearchVef(tgPackVeh(ilVeh).iCode)
                        If ilVef <> -1 Then
                            If tgMVef(ilVef).sType <> "P" Then
                                ilVpfIndex = gBinarySearchVpfPlus(ilVefCode)    'gVpfFind(Contract, ilVefCode)
                            End If
                            Exit Sub
                        End If
                    'Next ilVef
                End If
                Exit Sub
            End If
        Next ilVeh
    End If
    Exit Sub
mCVehOptIndexErr:
    On Error GoTo 0
    ilTerminate = True
    Exit Sub
mCVehOptIndexErr1:
    Exit Sub
End Sub

Function mDelPjf(llChfCode As Long, hlDsf As Integer) As Integer
    Dim hlPjf As Integer        'Pjf handle
    Dim tlPjf As PJF
    Dim ilRecLen As Integer     'Record length
    Dim llNoRec As Long         'Number of records in Mnf
    Dim ilExtLen As Integer
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilUpperBound As Integer
    Dim ilOffSet As Integer
    Dim tlLTypeBuff As POPLCODE   'Type field record
    Dim tmSbfSrchKey1 As LONGKEY0  'SBF key record image

    mDelPjf = BTRV_ERR_NONE
    ReDim lmPjfRecPos(0 To 0) As Long
    hlPjf = CBtrvTable(TWOHANDLES) 'CBtrvTable()
    ilRet = btrOpen(hlPjf, "", sgDBPath & "Pjf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        btrDestroy hlPjf
        mDelPjf = ilRet
        Exit Function
    End If
    imDsfRecLen = Len(tmDsf)
    ilRecLen = Len(tlPjf) 'btrRecordLength(hlVef)  'Get and save record length
    ilUpperBound = UBound(lmPjfRecPos)
    ilExtLen = Len(tlPjf)  'Extract operation record size
    llNoRec = gExtNoRec(ilExtLen) 'btrRecords(hlVef) 'Obtain number of records
    btrExtClear hlPjf   'Clear any previous extend operation
    'ilRet = btrGetFirst(hlPjf, tlPjf, ilRecLen, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
    tlLTypeBuff.lCode = llChfCode
    ilRet = btrGetEqual(hlPjf, tlPjf, ilRecLen, tlLTypeBuff, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
    If (ilRet = BTRV_ERR_END_OF_FILE) Or (ilRet = BTRV_ERR_KEY_NOT_FOUND) Then
        btrDestroy hlPjf
        Exit Function
    Else
        If ilRet <> BTRV_ERR_NONE Then
            mDelPjf = ilRet
            btrDestroy hlPjf
            Exit Function
        End If
    End If
    Call btrExtSetBounds(hlPjf, llNoRec, -1, "UC", "PJF", "") 'Set extract limits (all records)
    tlLTypeBuff.lCode = llChfCode
    ilOffSet = gFieldOffset("Pjf", "PJFCHFCODE")
    ilRet = btrExtAddLogicConst(hlPjf, BTRV_KT_INT, ilOffSet, 4, BTRV_EXT_EQUAL, BTRV_EXT_LAST_TERM, tlLTypeBuff, 4)
    ilOffSet = 0
    ilRet = btrExtAddField(hlPjf, ilOffSet, ilExtLen)  'Extract First Name field
    If ilRet <> BTRV_ERR_NONE Then
        mDelPjf = ilRet
        btrDestroy hlPjf
        Exit Function
    End If
    'ilRet = btrExtGetNextExt(hlVef)    'Extract record
    ilRet = btrExtGetNext(hlPjf, tlPjf, ilExtLen, lmPjfRecPos(ilUpperBound))
    If (ilRet <> BTRV_ERR_END_OF_FILE) And (ilRet <> BTRV_ERR_FILTER_LIMIT) Then
        If (ilRet <> BTRV_ERR_NONE) And (ilRet <> BTRV_ERR_REJECT_COUNT) Then
            mDelPjf = ilRet
            btrDestroy hlPjf
            Exit Function
        End If
        ilUpperBound = UBound(lmPjfRecPos)
        ilExtLen = Len(tlPjf)  'Extract operation record size
        'ilRet = btrExtGetFirst(hlVef, tgCompMnf(ilUpperBound), ilExtLen, llRecPos)
        Do While ilRet = BTRV_ERR_REJECT_COUNT
            ilRet = btrExtGetNext(hlPjf, tlPjf, ilExtLen, lmPjfRecPos(ilUpperBound))
        Loop
        Do While ilRet = BTRV_ERR_NONE
            If (tlPjf.iRolloverDate(0) = 0) And (tlPjf.iRolloverDate(1) = 0) Then
                lmPjfRecPos(ilUpperBound) = tlPjf.lCode
                ilUpperBound = ilUpperBound + 1
                ReDim Preserve lmPjfRecPos(0 To ilUpperBound) As Long
            End If
            ilRet = btrExtGetNext(hlPjf, tlPjf, ilExtLen, lmPjfRecPos(ilUpperBound))
            Do While ilRet = BTRV_ERR_REJECT_COUNT
                ilRet = btrExtGetNext(hlPjf, tlPjf, ilExtLen, lmPjfRecPos(ilUpperBound))
            Loop
        Loop
    End If
    For ilLoop = LBound(lmPjfRecPos) To UBound(lmPjfRecPos) - 1 Step 1
        Do  'Loop until record updated or added
            'ilRet = btrGetDirect(hlPjf, tlPjf, ilRecLen, lmPjfRecPos(ilLoop), INDEXKEY0, BTRV_LOCK_NONE)
            tmSbfSrchKey1.lCode = lmPjfRecPos(ilLoop)
            ilRet = btrGetEqual(hlPjf, tlPjf, ilRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
            If ilRet <> BTRV_ERR_NONE Then
                mDelPjf = ilRet
                btrDestroy hlPjf
                Exit Function
            End If
            'tmRec = tlPjf
            'ilRet = gGetByKeyForUpdate("PJf", hlPjf, tmRec)
            'If ilRet <> BTRV_ERR_NONE Then
            '    mDelPjf = ilRet
            '    btrDestroy hlPjf
            '    Exit Function
            'End If
            'tlPjf = tmRec
            ilRet = btrDelete(hlPjf)
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mDelPjf = ilRet
            btrDestroy hlPjf
            Exit Function
        End If
'        If tgSpf.sRemoteUsers = "Y" Then
'            tmDsf.lCode = 0
'            tmDsf.sFileName = "PJF"
'            gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'            gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'            tmDsf.iRemoteID = tlPjf.iRemoteID
'            tmDsf.lAutoCode = tlPjf.lAutoCode
'            tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'            tmDsf.lCntrNo = 0
'            ilRet = btrInsert(hlDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'        End If
    Next ilLoop
    mDelPjf = BTRV_ERR_NONE
    btrDestroy hlPjf
    Exit Function
End Function

Public Function mDelSbf(llChfCode As Long, hlSbf As Integer) As Integer
    Dim ilRet As Integer
    Dim tlSbf As SBF
    Dim ilSbfRecLen As Integer
    Dim tlSbfSrchKey As SBFKEY0    'SBF key record image

    ilSbfRecLen = Len(tlSbf)
    tlSbfSrchKey.lChfCode = llChfCode
    tlSbfSrchKey.iDate(0) = 0
    tlSbfSrchKey.iDate(1) = 0
    tlSbfSrchKey.sTranType = " "
    ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tlSbfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tlSbf.lChfCode = llChfCode)
        ilRet = btrDelete(hlSbf)
        If ilRet <> BTRV_ERR_NONE Then
            mDelSbf = ilRet
            Exit Function
        End If
        tlSbfSrchKey.lChfCode = llChfCode
        tlSbfSrchKey.iDate(0) = 0
        tlSbfSrchKey.iDate(1) = 0
        tlSbfSrchKey.sTranType = " "
        ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tlSbfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Loop
    mDelSbf = BTRV_ERR_NONE
End Function

Sub mDPAllowedDays(ilRdfCode As Integer, ilAllowedDays() As Integer)
'
'   ilRdfCode(I)- Rdf Code
'   ilAllowedDays(O)- Allowed days (True= Air Day; False= Not an Air Day)
'
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilDay As Integer
    Dim ilRdf As Integer
    Dim ilLIndex As Integer
    ilLIndex = LBound(ilAllowedDays)
    For ilLoop = LBound(ilAllowedDays) To UBound(ilAllowedDays) Step 1
        ilAllowedDays(ilLoop) = False
    Next ilLoop
    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) Step 1
    '    If ilRdfCode = tgMRdf(ilRdf).iCode Then
        ilRdf = gBinarySearchRdf(ilRdfCode)
        If ilRdf <> -1 Then
            For ilIndex = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1
                If (tgMRdf(ilRdf).iStartTime(0, ilIndex) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilIndex) <> 0) Then
                    ilLIndex = LBound(ilAllowedDays)
                    For ilDay = 1 To 7 Step 1
                        If tgMRdf(ilRdf).sWkDays(ilIndex, ilDay - 1) = "Y" Then
                            ilAllowedDays(ilLIndex) = True
                        End If
                        ilLIndex = ilLIndex + 1
                    Next ilDay
                End If
            Next ilIndex
            Exit Sub
        End If
    'Next ilRdf
    Exit Sub
End Sub

Function mFlightHaveSpots(ilLnRowNo As Integer) As Integer
'
'   ilLnRowNo(I)- Line Row Number
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    mFlightHaveSpots = False
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                For ilLoop = 0 To 6 Step 1
                    If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                        mFlightHaveSpots = True
                        Exit Do
                    End If
                Next ilLoop
            Else
                If (tgCffCntr(ilCff).CffRec.iSpotsWk > 0) Or (tgCffCntr(ilCff).CffRec.iXSpotsWk > 0) Then
                    mFlightHaveSpots = True
                    Exit Do
                End If
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    Exit Function
End Function

Sub mGetDPTimes(ilLnRowNo As Integer, slStartTime As String, slEndTime As String)
    Dim slLineType As String
    Dim ilRdfCode As Integer
    Dim ilIndex As Integer
    Dim ilRdf As Integer
    Dim ilLoop As Integer
    slStartTime = ""
    slEndTime = ""
    slLineType = mGetLineType(ilLnRowNo)
    ilRdfCode = 0
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        ilRdfCode = imLnSave(1, ilLnRowNo)
    Else
        For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                ilRdfCode = tgMRdf(ilLoop).iCode
                Exit For
            End If
        Next ilLoop
    End If
    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) Step 1
    '    If ilRdfCode = tgMRdf(ilRdf).iCode Then
        ilRdf = gBinarySearchRdf(ilRdfCode)
        If ilRdf <> -1 Then
            For ilIndex = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1
                If (tgMRdf(ilRdf).iStartTime(0, ilIndex) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilIndex) <> 0) Then
                    gUnpackTime tgMRdf(ilRdf).iStartTime(0, ilIndex), tgMRdf(ilRdf).iStartTime(1, ilIndex), "A", "1", slStartTime
                    gUnpackTime tgMRdf(ilRdf).iEndTime(0, ilIndex), tgMRdf(ilRdf).iEndTime(1, ilIndex), "A", "1", slEndTime
                    Exit Sub
                End If
            Next ilIndex
            Exit Sub
        End If
    'Next ilRdf
End Sub

Public Sub mGetFlightDays(ilLnRowNo As Integer, ilAllowedDays() As Integer)
'
'   ilLnRowNo(I)- Line Row Number
'   ilAllowedDays(O)- Allowed Days obtained from flights and/or daypart(0=Air day; 1=Not an Air Day, 2=Mixed)
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim ilNoSpots As Integer
    Dim slLineType As String
    Dim ilLIndex As Integer

    ReDim ilDPDays(0 To 6) As Integer
    ilNoSpots = 0
    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        mDPAllowedDays imLnSave(1, ilLnRowNo), ilDPDays()
    Else
        For ilLoop = LBound(ilDPDays) To UBound(ilDPDays) Step 1
            ilDPDays(ilLoop) = False
        Next ilLoop
        For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                mDPAllowedDays tgMRdf(ilLoop).iCode, ilDPDays()
                Exit For
            End If
        Next ilLoop
    End If
    For ilLoop = LBound(ilAllowedDays) To UBound(ilAllowedDays) Step 1
        ilAllowedDays(ilLoop) = -1
    Next ilLoop
    ilLIndex = LBound(ilAllowedDays)
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If llFlEndDate < llFlStartDate Then
                Exit Do
            End If

            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                'All weeks must be the same
                For ilLoop = 0 To 6 Step 1
                    If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                        If ilAllowedDays(ilLoop + ilLIndex) = -1 Then
                            ilAllowedDays(ilLoop + ilLIndex) = 0   'Yes
                        Else
                            If ilAllowedDays(ilLoop + ilLIndex) = 1 Then
                                ilAllowedDays(ilLoop + ilLIndex) = 2   'Mix
                            End If
                        End If
                    Else
                        If ilAllowedDays(ilLoop + ilLIndex) = -1 Then
                            ilAllowedDays(ilLoop + LBound(ilAllowedDays)) = 1   'No
                        Else
                            If ilAllowedDays(ilLoop + ilLIndex) = 0 Then
                                ilAllowedDays(ilLoop + ilLIndex) = 2   'Mix
                            End If
                        End If
                    End If
                Next ilLoop
            Else
                ilNoSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                For ilLoop = 0 To 6 Step 1
                    If (tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "1") Then
                        If ilAllowedDays(ilLoop + ilLIndex) = -1 Then
                            ilAllowedDays(ilLoop + ilLIndex) = 0   'Yes
                        Else
                            If ilAllowedDays(ilLoop + ilLIndex) = 1 Then
                                ilAllowedDays(ilLoop + ilLIndex) = 2   'Mix
                            End If
                        End If
                    Else
                        If ilAllowedDays(ilLoop + ilLIndex) = -1 Then
                            ilAllowedDays(ilLoop + ilLIndex) = 1   'No
                        Else
                            If ilAllowedDays(ilLoop + ilLIndex) = 0 Then
                                ilAllowedDays(ilLoop + ilLIndex) = 2   'Mix
                            End If
                        End If
                    End If
                Next ilLoop
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    ilIndex = LBound(ilDPDays)
    For ilLoop = LBound(ilAllowedDays) To UBound(ilAllowedDays) Step 1
        If ilAllowedDays(ilLoop) = -1 Then
            If ilDPDays(ilIndex) Then
                ilAllowedDays(ilLoop) = 0
            Else
                ilAllowedDays(ilLoop) = 1
            End If
        End If
        ilIndex = ilIndex + 1
    Next ilLoop
End Sub

Sub mGetFlightDaysForDate(ilLnRowNo As Integer, llDate As Long, ilOVDays() As Integer, ilDays() As Integer, slWDFlag As String, ilDailySpots() As Integer, llWkNoSpots As Long)
'
'   ilLnRowNo(I)- Line Row Number
'   llDate(I)- Date to obtain flight spots for
'   ilOvDays(I)- Override days or Daypart days- used if week not found
'   ilDays(O)- Flight allow days (True=Air Day; False=Not an Air Day)
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llFlMoStartDate As Long
    Dim llFlSuEndDate As Long
    Dim ilDaysFd As Integer
    Dim ilIndex As Integer

    llWkNoSpots = 0
    ilDaysFd = False
    slWDFlag = ""
    For ilLoop = 0 To 6 Step 1
        ilDays(ilLoop) = False
    Next ilLoop
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If llFlEndDate < llFlStartDate Then
                Exit Do
            End If
            llFlMoStartDate = llFlStartDate
            Do While gWeekDayLong(llFlMoStartDate) <> 0
                llFlMoStartDate = llFlMoStartDate - 1
            Loop
            llFlSuEndDate = llFlEndDate
            Do While gWeekDayLong(llFlSuEndDate) <> 6
                llFlSuEndDate = llFlSuEndDate + 1
            Loop
            If (llDate >= llFlMoStartDate) And (llDate <= llFlSuEndDate) Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    slWDFlag = "D"
                    For ilLoop = 0 To 6 Step 1
                        If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                            ilDays(ilLoop) = True
                        Else
                            ilDays(ilLoop) = False
                        End If
                        ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                        llWkNoSpots = llWkNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                    Next ilLoop
                Else
                    slWDFlag = "W"
                    For ilLoop = 0 To 6 Step 1
                        If (tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "1") Then
                            ilDays(ilLoop) = True
                        Else
                            ilDays(ilLoop) = False
                        End If
                    Next ilLoop
                    llWkNoSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                Exit Sub
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    ilIndex = LBound(ilDays)
    For ilLoop = LBound(ilOVDays) To UBound(ilOVDays) Step 1
        If ilOVDays(ilLoop) = 1 Then
            ilDays(ilIndex) = False
        Else
            ilDays(ilIndex) = True
        End If
        ilIndex = ilIndex + 1
    Next ilLoop
    'Check if daily defined
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'Set daily flag was all week will be the same.  Set here incase no week found
            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                slWDFlag = "D"
                For ilLoop = 0 To 6 Step 1
                    ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                Next ilLoop
                Exit Sub
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
End Sub

Function mGetFlightSpots(ilLnRowNo As Integer, llDate As Long, llSpotPrice As Long) As Integer
'
'   ilLnRowNo(I)- Line Row Number
'   llDate(I)- Date to obtain flight spots for
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llFlMoStartDate As Long
    Dim llFlSuEndDate As Long
    Dim ilNoSpots As Integer
    Dim ilDaysFd As Integer
    ilNoSpots = 0
    llSpotPrice = 0
    ilDaysFd = False
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If llFlEndDate < llFlStartDate Then
                mGetFlightSpots = ilNoSpots
                Exit Function
            End If
            llFlMoStartDate = llFlStartDate
            Do While gWeekDayLong(llFlMoStartDate) <> 0
                llFlMoStartDate = llFlMoStartDate - 1
            Loop
            llFlSuEndDate = llFlEndDate
            Do While gWeekDayLong(llFlSuEndDate) <> 6
                llFlSuEndDate = llFlSuEndDate + 1
            Loop

            If (llDate >= llFlMoStartDate) And (llDate <= llFlSuEndDate) Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    For ilLoop = 0 To 6 Step 1
                        If (llFlMoStartDate + ilLoop >= llFlStartDate) And (llFlMoStartDate + ilLoop <= llFlEndDate) Then
                            ilNoSpots = ilNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                        End If
                    Next ilLoop
                Else
                    ilNoSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "T"
                        llSpotPrice = tgCffCntr(ilCff).CffRec.lActPrice
                    Case Else
                        llSpotPrice = 0
                End Select

                Exit Do
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    mGetFlightSpots = ilNoSpots
End Function

Function mGetFlightSpotsDays(ilLnRowNo As Integer, llDate As Long, ilOVDays() As Integer, llSpotCount As Long, ilDays() As Integer, slWDFlag As String, ilDailySpots() As Integer) As Integer
'
'   ilLnRowNo(I)- Line Row Number
'   llDate(I)- Date to obtain flight spots for
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llFlMoStartDate As Long
    Dim llFlSuEndDate As Long
    Dim ilNoSpots As Integer
    Dim ilDaysFd As Integer
    Dim ilIndex As Integer
    ilNoSpots = 0
    slWDFlag = ""
    ilDaysFd = False
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If llFlEndDate < llFlStartDate Then
                Exit Do
            End If
            llFlMoStartDate = llFlStartDate
            Do While gWeekDayLong(llFlMoStartDate) <> 0
                llFlMoStartDate = llFlMoStartDate - 1
            Loop
            llFlSuEndDate = llFlEndDate
            Do While gWeekDayLong(llFlSuEndDate) <> 6
                llFlSuEndDate = llFlSuEndDate + 1
            Loop

            If (llDate >= llFlMoStartDate) And (llDate <= llFlSuEndDate) Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    slWDFlag = "D"
                    For ilLoop = 0 To 6 Step 1
                        ilNoSpots = ilNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                        If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                            ilDays(ilLoop) = True
                        Else
                            ilDays(ilLoop) = False
                        End If
                        ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                    Next ilLoop
                Else
                    slWDFlag = "W"
                    ilNoSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                    For ilLoop = 0 To 6 Step 1
                        If (tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "1") Then
                            ilDays(ilLoop) = True
                        Else
                            ilDays(ilLoop) = False
                        End If
                    Next ilLoop
                End If
                llSpotCount = ilNoSpots
                mGetFlightSpotsDays = ilCff
                Exit Function
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    ilIndex = LBound(ilDays)
    For ilLoop = LBound(ilOVDays) To UBound(ilOVDays) Step 1
        If ilOVDays(ilLoop) = 1 Then
            ilDays(ilIndex) = False
        Else
            ilDays(ilIndex) = True
        End If
        ilIndex = ilIndex + 1
    Next ilLoop
    'Check if daily defined
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'Set daily flag was all week will be the same.  Set here incase no week found
            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                slWDFlag = "D"
                For ilLoop = 0 To 6 Step 1
                    ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                Next ilLoop
                Exit Do
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    llSpotCount = 0
    mGetFlightSpotsDays = -1
End Function

Function mGetLineType(ilLnRowNo As Integer, Optional blTestAudByPackage As Boolean = False, Optional blChkVehicle = False) As String

'
'   ilLnRowNo(I)- Line Row Number
'
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilVef As Integer
    Dim ilCode As Integer

    If ilLnRowNo <= 0 Then
        mGetLineType = "S"
        Exit Function
    End If
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
            If ((tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E")) And (blTestAudByPackage) Then
                If tgSaf(0).sAudByPackage = "Y" Then
                    mGetLineType = "S"
                    Exit Function
                End If
            End If
            mGetLineType = tgPackLn(ilLoop).sType
            Exit Function
        End If
    Next ilLoop
    If blChkVehicle Then
        ilVef = gBinarySearchVef(tgClfCntr(ilLnRowNo - 1).ClfRec.iVefCode)
        If ilVef <> -1 Then
            If (tgMVef(ilVef).sType = "P") And (tgMVef(ilVef).lPvfCode > 0) Then
                If (tgSaf(0).sAudByPackage <> "Y") Or (blTestAudByPackage = False) Then
                    mGetLineType = "O"
                    Exit Function
                End If
            End If
        End If
    End If
    mGetLineType = "S"
    Exit Function
End Function
Function mGetRafCode(ilLnRowNo, tlRegionCode() As SORTCODE) As Long
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer

    mGetRafCode = 0
    If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
        Exit Function
    End If
    gFindMatch smLnSave(28, ilLnRowNo), 0, Contract.lbcRegion
    If gLastFound(Contract.lbcRegion) > 1 Then
        slNameCode = tlRegionCode(gLastFound(Contract.lbcRegion) - 2).sKey
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        mGetRafCode = Val(slCode)
    End If
End Function

Function mGetLineTypeForOV(ilLnRowNo As Integer) As String
'
'   ilLnRowNo(I)- Line Row Number
'
    Dim ilLoop As Integer
    Dim ilVef As Integer

    If ilLnRowNo <= 0 Then
        mGetLineTypeForOV = "S"
        Exit Function
    End If
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
            If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                mGetLineTypeForOV = "P"
            Else
                mGetLineTypeForOV = "H"
            End If
            Exit Function
        End If
    Next ilLoop
    If Trim$(smLnSave(1, ilLnRowNo)) <> "" Then
        If ilLnRowNo >= UBound(tgClfCntr) + 1 Then
            If tgClfCntr(ilLnRowNo - 1).iStatus = -1 Then
                For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                    If StrComp(Trim$(tgMVef(ilVef).sName), Trim$(smLnSave(1, ilLnRowNo)), vbTextCompare) = 0 Then
                        If tgMVef(ilVef).sType = "P" Then
                            mGetLineTypeForOV = "P"
                            Exit Function
                        End If
                        Exit For
                    End If
                Next ilVef
            End If
        End If
    End If
    mGetLineTypeForOV = "S"
    Exit Function
End Function

Sub mGetLnPriceInfo(ilLnRowNo As Integer, slPrice As String, ilLnTotalType As Integer, ilPRICEINDEX As Integer)
    Dim slStr As String
    Dim llAvg As Long
    Dim ilCff As Integer
    Dim slPriceType As String
    Dim ilMatch As Integer
    Dim ilNoAirWks As Integer
    Dim ilSpots As Integer
    Dim ilDay As Integer
    Dim slLineType As String
    Dim slStartDate As String
    Dim slEndDate As String
    Dim llStartDate As Long
    Dim llMoStartDate As Long
    Dim llEndDate As Long
    Dim llLoopDate As Long
    Dim slDate As String
    Dim llSDate As Long
    Dim llEDate As Long
    Dim llPrice As Long
    Dim ilNoSpots As Integer
    Dim ilYear As Integer
    Dim ilMonth As Integer
    'If (igFreezeState = 1) Then
    '    Exit Sub
    'End If
    slStr = ""
    gSetShow Contract.pbcLine, slStr, tmLnCtrls(ilPRICEINDEX)
    smLnShow(ilPRICEINDEX, ilLnRowNo) = tmLnCtrls(ilPRICEINDEX).sShow
    slLineType = mGetLineType(ilLnRowNo)
    ilMatch = True
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            If slPriceType = "" Then
                slPriceType = tgCffCntr(ilCff).CffRec.sPriceType
            Else
                If slPriceType <> tgCffCntr(ilCff).CffRec.sPriceType Then
                    ilMatch = False
                    Exit Do
                End If
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    If (Not ilMatch) Or (slPriceType = "T") Then
        'If ilLnTotalType = 0 Then
        If slLineType <> "E" Then
            'If imLnSave(11, ilLnRowNo) > 0 Then
            If Val(smLnSave(23, ilLnRowNo)) > 0 Then
                'llAvg = gStrDecToLong(smLnSave(18, ilLnRowNo), 2) \ imLnSave(11, ilLnRowNo) '+ .5
'10518 Dan Here is issue: 18 has the old total line, not the one we changed to!
                llAvg = gStrDecToLong(smLnSave(18, ilLnRowNo), 2) \ Val(smLnSave(23, ilLnRowNo)) '+ .5
                slStr = gLongToStrDec(llAvg, 2)
            Else
                slStr = ""
            End If
        Else
            ilNoAirWks = 0
            ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate
                    gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate
                    llStartDate = gDateValue(slStartDate)
                    slStartDate = gObtainPrevMonday(slStartDate)
                    llMoStartDate = gDateValue(slStartDate)
                    llEndDate = gDateValue(slEndDate)
                    For llLoopDate = llMoStartDate To llEndDate Step 7
                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                            ilSpots = 0
                            For ilDay = 0 To 6 Step 1
                                ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                            Next ilDay
                        Else
                            ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                        End If
                        If ilSpots > 0 Then
                            ilNoAirWks = ilNoAirWks + 1
                        End If
                    Next llLoopDate
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If ilNoAirWks > 0 Then
                llAvg = gStrDecToLong(smLnSave(18, ilLnRowNo), 2) \ ilNoAirWks '+ .5
                slStr = gLongToStrDec(llAvg, 2)
            Else
                slStr = ""
            End If
        End If
        'Else
        '    slStr = smLnSave(18, ilLnRowNo)
        'End If
        slPrice = slStr
        smLnSave(21, ilLnRowNo) = slStr
        smLnSave(22, ilLnRowNo) = "T"
        'If by Quarter, compute price by quarter if selected to view a quarter
        '10843 remove dead code
'        If (tgSpf.sCLnStdQt = "Y") And (ilLnTotalType > 1) Then
'            llSDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
'            'llEDate = lmHSStartDate + 7 * (imHSEndWkNo) - 1
'            'If llSDate + 7 * 13 - 1 < llEDate Then
'            '    llEDate = llSDate + 7 * 13 - 1
'            'End If
'            slDate = Format(llSDate, "m/d/yy")
'            gObtainMonthYear 0, slDate, ilMonth, ilYear
'            slDate = Trim$(str$(3 * ((ilMonth - 1) \ 3) + 1)) & "/15/" & Trim$(str$(ilYear))
'            llSDate = gDateValue(gObtainStartStd(slDate))
'            llEDate = llSDate + 7 * 12 - 1
'            ilMonth = (ilMonth - 1) \ 3 + 1
'            ilSpots = ilMonth
'            Do While ilSpots = ilMonth
'                llEDate = llEDate + 7
'                slDate = Format(llEDate, "m/d/yy")
'                gObtainMonthYear 0, slDate, ilMonth, ilYear
'                ilMonth = (ilMonth - 1) \ 3 + 1
'            Loop
'            llEDate = llEDate - 7
'            ilNoAirWks = 0
'            ilNoSpots = 0
'            llPrice = 0
'            ilMatch = True
'            slPriceType = ""
'            ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
'            Do While ilCff <> -1
'                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                    gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate
'                    gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate
'                    llStartDate = gDateValue(slStartDate)
'                    slStartDate = gObtainPrevMonday(slStartDate)
'                    llMoStartDate = gDateValue(slStartDate)
'                    llEndDate = gDateValue(slEndDate)
'                    For llLoopDate = llMoStartDate To llEndDate Step 7
'                        If (llLoopDate >= llSDate) And (llLoopDate <= llEDate) Then
'                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                ilSpots = 0
'                                For ilDay = 0 To 6 Step 1
'                                    ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                Next ilDay
'                            Else
'                                ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                            End If
'                            If ilSpots > 0 Then
'                                If slPriceType = "" Then
'                                    slPriceType = tgCffCntr(ilCff).CffRec.sPriceType
'                                Else
'                                    If slPriceType <> tgCffCntr(ilCff).CffRec.sPriceType Then
'                                        ilMatch = False
'                                        'Exit Do
'                                    End If
'                                End If
'                                ilNoAirWks = ilNoAirWks + 1
'                                ilNoSpots = ilNoSpots + ilSpots
'                                If tgCffCntr(ilCff).CffRec.sPriceType = "T" Then
'                                    llPrice = llPrice + ilSpots * tgCffCntr(ilCff).CffRec.lActPrice
'                                End If
'                            End If
'                        ElseIf llLoopDate > llEDate Then
'                            Exit For
'                        End If
'                    Next llLoopDate
'                End If
'                ilCff = tgCffCntr(ilCff).iNextCff
'            Loop
'            If (Not ilMatch) Or (slPriceType = "T") Then
'                If slLineType <> "E" Then
'                    If ilNoSpots > 0 Then
'                        llAvg = llPrice \ ilNoSpots '+ .5
'                        slStr = gLongToStrDec(llAvg, 2)
'                    Else
'                        slStr = ""
'                    End If
'                Else
'                    If ilNoAirWks > 0 Then
'                        llAvg = llPrice \ ilNoAirWks '+ .5
'                        slStr = gLongToStrDec(llAvg, 2)
'                    Else
'                        slStr = ""
'                    End If
'                End If
'                slPrice = slStr
'                gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
'            Else
'                Select Case slPriceType
'                    Case "N"    'No Charge
'                        slStr = Contract.lbcPriceType(0).List(3)
'                    Case "M"    'MG Line
'                        slStr = Contract.lbcPriceType(0).List(4)
'                    Case "B"    'Bonus
'                        slStr = Contract.lbcPriceType(0).List(5)
'                    Case "S"    'Spinoff
'                        slStr = Contract.lbcPriceType(0).List(6)
'                    Case "P"    'Package
'                        slStr = Contract.lbcPriceType(0).List(7)
'                    Case "R"    'Recapturable
'                        slStr = Contract.lbcPriceType(0).List(8)
'                    Case "A"    'ADU
'                        slStr = Contract.lbcPriceType(0).List(9)
'                    Case Else
'                        slStr = ""
'                End Select
'                slPrice = slStr
'            End If
'        Else
            'If ilLnTotalType <> 0 Then
            If ilLnTotalType = 1 Then   'total dollars
                slStr = smLnSave(18, ilLnRowNo)
                slPrice = slStr
            End If
            gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
 '       End If
    Else
        smLnSave(21, ilLnRowNo) = ".00"
        smLnSave(22, ilLnRowNo) = slPriceType
        Select Case slPriceType
            Case "N"    'No Charge
                slStr = Contract.lbcPriceType(0).List(3)
            Case "M"    'MG Line
                slStr = Contract.lbcPriceType(0).List(4)
            Case "B"    'Bonus
                slStr = Contract.lbcPriceType(0).List(5)
            Case "S"    'Spinoff
                slStr = Contract.lbcPriceType(0).List(6)
            Case "P"    'Package
                slStr = Contract.lbcPriceType(0).List(7)
            Case "R"    'Recapturable
                slStr = Contract.lbcPriceType(0).List(8)
            Case "A"    'ADU
                slStr = Contract.lbcPriceType(0).List(9)
            Case Else
                slStr = ""
        End Select
        slPrice = slStr
    End If
    'gSetShow Contract.pbcLine, slStr, tmLnCtrls(ilPRICEINDEX)
    mSetPriceShow slStr, ilPRICEINDEX
    smLnShow(ilPRICEINDEX, ilLnRowNo) = tmLnCtrls(ilPRICEINDEX).sShow
    mSetAcqOrSpotPrice "A", ilLnRowNo, slStr, ilPRICEINDEX

End Sub

Function mGetNextCntrNo(hlChf As Integer, llCChfRecPos As Long, Optional llCChfCode = 0) As Integer
    Dim ilRecLen As Integer     'SPF record length
    Dim hlSpf As Integer        'site Option file handle
    Dim slStamp As String
    Dim ilRet As Integer
    Dim tlChf As CHF
    Dim tlChfSrchKey As LONGKEY0  'CHF key record image
    Dim ilNotFound As Integer
    Dim llAssignNo As Long
    Dim ilChfRecLen As Integer
    Dim llCntrNo As Long
    If Contract.edcCntrNo.Text <> "" Then
        mGetNextCntrNo = True
        Exit Function
    End If
    Screen.MousePointer = vbHourglass
    ilChfRecLen = Len(tlChf)
    hlSpf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlSpf, "", sgDBPath & "Spf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mGetNextCntrNoErr
    gBtrvErrorMsg ilRet, "mGetNextCntrNo (btrOpen):" & "Spf.Btr", Contract
    On Error GoTo 0
    ilRecLen = Len(tgSpf) 'btrRecordLength(hlSpf)  'Get and save record length
    Do
        ilRet = btrGetFirst(hlSpf, tgSpf, ilRecLen, 0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
        On Error GoTo mGetNextCntrNoErr
        gBtrvErrorMsg ilRet, "mGetNextCntrNo (btrGetFirst):" & "Spf.Btr", Contract
        On Error GoTo 0
        ilNotFound = False
        Do
            llCntrNo = tgSpf.lCNextNo
            If tgUrf(0).iRemoteUserID > 0 Then
                llCntrNo = 100000 * CLng(tgUrf(0).iRemoteUserID) + llCntrNo
            End If
            tmChfSrchKey1.lCntrNo = llCntrNo    'tgSpf.lCNextNo
            tmChfSrchKey1.iCntRevNo = 32000
            tmChfSrchKey1.iPropVer = 32000
            'ilRet = btrGetEqual(hmChf, tlChf, imChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
            ilRet = btrGetGreaterOrEqual(hlChf, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            If (ilRet <> BTRV_ERR_NONE) Or (tlChf.lCntrNo <> llCntrNo) Then 'tgSpf.lCNextNo) Then
                ilNotFound = True
                llAssignNo = llCntrNo   'tgSpf.lCNextNo
                Exit Do
            End If
            tgSpf.lCNextNo = tgSpf.lCNextNo + 1
            If tgSpf.lCNextNo > tgSpf.lCHighestNo Then
                tgSpf.lCNextNo = tgSpf.lCLowestNo
            End If
        Loop Until ilNotFound
        tgSpf.lCNextNo = tgSpf.lCNextNo + 1
        If tgSpf.lCNextNo > tgSpf.lCHighestNo Then
            tgSpf.lCNextNo = tgSpf.lCLowestNo
        End If
        ilRet = btrUpdate(hlSpf, tgSpf, ilRecLen)
    Loop While ilRet = BTRV_ERR_CONFLICT
    On Error GoTo mGetNextCntrNoErr
    gBtrvErrorMsg ilRet, "mGetNextCntrNo (btrUpdate):" & "Spf.Btr", Contract
    On Error GoTo 0
    'Reposition to contract header
    If llCChfCode <> 0 Then
        tlChfSrchKey.lCode = llCChfCode
        ilRet = btrGetEqual(hlChf, tlChf, ilChfRecLen, tlChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
        On Error GoTo mGetNextCntrNoErr
        gBtrvErrorMsg ilRet, "mGetNextCntrNo (btrGetEqual: Contract)", Contract
        On Error GoTo 0
    Else
        If llCChfRecPos <> 0 Then
            ilRet = btrGetDirect(hlChf, tlChf, ilChfRecLen, llCChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            On Error GoTo mGetNextCntrNoErr
            gBtrvErrorMsg ilRet, "mGetNextCntrNo (btrGetDirect: Contract)", Contract
            On Error GoTo 0
        End If
    End If
    Contract.edcCntrNo.Text = Trim$(str$(llAssignNo)) 'tmChfSrchKey1.lCntrNo
    slStamp = gFileDateTime(sgDBPath & "Spf.btr")
    sgSpfStamp = slStamp
    ilRet = btrClose(hlSpf)
    btrDestroy hlSpf
    mGetNextCntrNo = True
    Screen.MousePointer = vbDefault
    Exit Function
mGetNextCntrNoErr:
    ilRet = btrClose(hlSpf)
    btrDestroy hlSpf
    mGetNextCntrNo = False
    Screen.MousePointer = vbDefault
End Function

Sub mGetPkDates(ilPkLnRowNo As Integer, llPkStartDate As Long, llPkEndDate As Long)
    Dim ilCff As Integer
    Dim ilSpots As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilDay As Integer
    Dim ilClf As Integer
    llPkStartDate = 0
    llPkEndDate = 0
    ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                ilSpots = 0
                For ilDay = 0 To 6 Step 1
                    ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                Next ilDay
            Else
                ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
            End If
            If ilSpots > 0 Then
                If llPkStartDate = 0 Then
                    llPkStartDate = llFlStartDate
                    llPkEndDate = llFlEndDate
                Else
                    If llFlStartDate < llPkStartDate Then
                        llPkStartDate = llFlStartDate
                    End If
                    If llFlEndDate > llPkEndDate Then
                        llPkEndDate = llFlEndDate
                    End If
                End If
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
            ilIndex = tgPackLn(ilLoop).iIndex
            Do While ilIndex >= 0
                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                    If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                        If Not tgClfCntr(ilClf).iCancel Then
                            ilCff = tgClfCntr(ilClf).iFirstCff
                            Do While ilCff <> -1
                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                                    If llPkStartDate = 0 Then
                                        llPkStartDate = llFlStartDate
                                        llPkEndDate = llFlEndDate
                                    Else
                                        If llFlStartDate < llPkStartDate Then
                                            llPkStartDate = llFlStartDate
                                        End If
                                        If llFlEndDate > llPkEndDate Then
                                            llPkEndDate = llFlEndDate
                                        End If
                                    End If
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                        End If
                        Exit For
                    End If
                Next ilClf
                ilIndex = tgPackLn(ilIndex).iIndex
            Loop
        End If
    Next ilLoop
End Sub
Function mGetPkLineType(ilLnRowNo As Integer) As String
    Dim slLineType As String
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    slLineType = mGetLineType(ilLnRowNo)
    If slLineType = "H" Then
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                        mGetPkLineType = tgPackLn(ilLoop).sType
                        Exit Function
                    End If
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
            End If
        Next ilLoop
        mGetPkLineType = ""
    ElseIf (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
        mGetPkLineType = slLineType
    Else
        mGetPkLineType = ""
    End If
    Exit Function
End Function

Sub mGetResearchTotals(ilLnRowNo As Integer, hmDrf As Integer, hmMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilDBTotals As Integer, ilOnFlightScreen As Integer, ilCPPCPM As Integer, imVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer, ilChgMode As Integer, ilInResearch As Integer, Optional ilLnTotalType As Integer = 0)
'
'   mGetResearchTotals
'   Where:
'

    'Dim llCTotalCost As Long     'Total Cost for Contract
    Dim dlCTotalCost As Double    'Total Cost for Contract'TTP 10439 - Rerate 21,000,000
    Dim llCTotalSpots As Long    'Total Spots for Contract
    Dim ilCAvgRating As Integer  'Average Rating for line and contract (not used)
    Dim llCGRP As Long           'GRP (1 place)
    Dim llCCPP As Long           'CPP (0 places) for line and contract
    Dim llCCPM As Long           'CPM (2 places) for line and contract
    Dim llCGrImp As Long         'Gross Impression for contract
    'Dim llVTotalCost As Long     'Total Cost for Vehicle
    Dim dlVTotalCost As Double     'Total Cost for Vehicle'TTP 10439 - Rerate 21,000,000
    Dim llVTotalSpots As Long    'Total Spots for Vehicle
    Dim ilVAvgRating As Integer  'Average Rating for line and contract (not used)
    Dim llVGrp As Long           'GRP (1 place)
    Dim llVCPP As Long           'CPP (0 places) for line and contract
    Dim llVCPM As Long           'CPM (2 places) for line and contract
    Dim llVGrImp As Long         'Gross Impression for contract
    'Dim llLTotalCost As Long     'Total Cost for Contract
    Dim dlLTotalCost As Double     'Total Cost for Contract'TTP 10439 - Rerate 21,000,000
    Dim llLTotalSpots As Long    'Total Spots for Line
    Dim ilLAvgRating As Integer  'Average Rating for line and contract (not used)
    Dim llLGRP As Long           'GRP (1 place)
    Dim llLCPP As Long           'CPP (0 places) for line and contract
    Dim llLCPM As Long           'CPM (2 places) for line and contract
    Dim llLGrImp As Long         'Gross Impression for contract
    Dim slStr As String
    Dim slLineType As String
    Dim ilDBBookOvly As Integer
    If sgCntrScreen = "Orders" Then
        'Screen.MousePointer = vbDefault
        Exit Sub
    End If
    If (igFreezeState = 1) Then
        Exit Sub
    End If
    ilDBBookOvly = Contract.lacDBBookOvly.Visible
    If ilDBBookOvly = False Then
        Contract.lbcDBBook.Visible = False
        'Contract.lacDBBookOvly.Caption = Contract.edcDBBook.Text
        'Changed lacDBBookOvly to edit control so that it overlays the true control
        Contract.lacDBBookOvly.Text = Contract.edcDBBook.Text
        'Setting this to invisible causes the demo bar to disappear if no research exist,  in mInitBox set lacDBBookOvly on top of edcDBBook
        'Contract.edcDBBook.Visible = False
        Contract.lacDBBookOvly.Visible = True
        'DoEvents
    End If
    'Exit Sub
    slLineType = mGetLineType(ilLnRowNo, True)
    Select Case ilDBTotals
        Case 0  'Line Total
            mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), 1, ilOnFlightScreen, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM 'TTP 10439 - Rerate 21,000,000
            If (slLineType = "H") Or (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), 4, ilOnFlightScreen, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlVTotalCost, llVTotalSpots, ilVAvgRating, llVGrImp, llVGrp, llVCPP, llVCPM 'TTP 10439 - Rerate 21,000,000
            Else
                mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), 2, ilOnFlightScreen, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlVTotalCost, llVTotalSpots, ilVAvgRating, llVGrImp, llVGrp, llVCPP, llVCPM 'TTP 10439 - Rerate 21,000,000
            End If
            If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
                mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), 4, ilOnFlightScreen, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlLTotalCost, llLTotalSpots, ilLAvgRating, llLGrImp, llLGRP, llLCPP, llLCPM 'TTP 10439 - Rerate 21,000,000
            Else
                mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), 0, ilOnFlightScreen, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlLTotalCost, llLTotalSpots, ilLAvgRating, llLGrImp, llLGRP, llLCPP, llLCPM 'TTP 10439 - Rerate 21,000,000
            End If
        Case 1  'Contract Total
        Case 2  'Vehicle Total
        Case 3  'Daypart Total
        Case 4  'Package Total
    End Select
    If (ilDBTotals = 0) Or (ilDBTotals = 4) Then
        If ilOnFlightScreen Then
            slStr = gLongToStrDec(llLGRP, 1)
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(1)
            If (llCGRP > 0) Then
                slStr = gLongToStrDec(CCur(llLGRP) * 100 / llCGRP, 0)
            Else
                slStr = ""
            End If
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(2)
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(llLCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * llLCPM, 2)
            'End If
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(3)
            slStr = gLongToStrDec(llLCPP, 0)
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(4)
            'Vehicle
            slStr = gLongToStrDec(llVGrp, 1)
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(5)
            If (llCGRP > 0) Then
                slStr = gLongToStrDec(CCur(llVGrp) * 100 / llCGRP, 0)
            Else
                slStr = ""
            End If
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(6)
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(llVCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * llVCPM, 2)
            'End If
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(7)
            slStr = gLongToStrDec(llVCPP, 0)
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(8)
            'Contract
            slStr = gLongToStrDec(llCGRP, 1)
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(9)
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(llCCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * llCCPM, 2)
            'End If
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(10)
            slStr = gLongToStrDec(llCCPP, 0)
            gSetShow Contract.pbcDemoBar(0), slStr, tmDFTCtrls(11)
        Else
            If imToggleCPPCPM = 0 Then
                'Line
                slStr = gLongToStrDec(llLCPP, 0)
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(1)
                slStr = gLongToStrDec(llLGRP, 1)
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(2)
                If (llCGRP > 0) Then
                    slStr = gLongToStrDec(CCur(llLGRP) * 100 / llCGRP, 0)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(3)
                'slStr = gLongToStrDec(llLTotalCost, 2)
                slStr = gDblToStrDec(dlLTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(4)
                'Vehicle
                slStr = gLongToStrDec(llVCPP, 0)
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(5)
                slStr = gLongToStrDec(llVGrp, 1)
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(6)
                If (llCGRP > 0) Then
                    slStr = gLongToStrDec(CCur(llVGrp) * 100 / llCGRP, 0)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(7)
                'slStr = gLongToStrDec(llVTotalCost, 2)
                slStr = gDblToStrDec(dlVTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(8)
                'Contract
                slStr = gLongToStrDec(llCCPP, 0)
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(9)
                slStr = gLongToStrDec(llCGRP, 1)
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(10)
                'slStr = gLongToStrDec(llCTotalCost, 2)
                slStr = gDblToStrDec(dlCTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(11)
            Else
                'If tgSpf.sSAudData <> "H" Then
                    slStr = gLongToStrDec(llLCPM, 2)
                'Else
                '    slStr = gLongToStrDec(10 * llLCPM, 2)
                'End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(1)
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = gLongToStrDec(llLGrImp, 0)
'                Else
'                    slStr = gLongToStrDec(llLGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(llLGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(llLGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(llLGrImp, 3)
                Else
                    slStr = gLongToStrDec(llLGrImp, 0)
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(2)
                If (llCGrImp > 0) Then
                    slStr = gLongToStrDec(CCur(llLGrImp) * 100 / llCGrImp, 0)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(3)
                'slStr = gLongToStrDec(llLTotalCost, 2)
                slStr = gDblToStrDec(dlLTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(4)
                'Vehicle
                'If tgSpf.sSAudData <> "H" Then
                    slStr = gLongToStrDec(llVCPM, 2)
                'Else
                '    slStr = gLongToStrDec(10 * llVCPM, 2)
                'End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(5)
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = gLongToStrDec(llVGrImp, 0)
'                Else
'                    slStr = gLongToStrDec(llVGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(llVGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(llVGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(llVGrImp, 3)
                Else
                    slStr = gLongToStrDec(llVGrImp, 0)
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(6)
                If (llCGrImp > 0) Then
                    slStr = gLongToStrDec(CCur(llVGrImp) * 100 / llCGrImp, 0)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(7)
                'slStr = gLongToStrDec(llVTotalCost, 2)
                slStr = gDblToStrDec(dlVTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(8)
                'Contract
                'If tgSpf.sSAudData <> "H" Then
                    slStr = gLongToStrDec(llCCPM, 2)
                'Else
                '    slStr = gLongToStrDec(10 * llCCPM, 2)
                'End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(9)
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = gLongToStrDec(llCGrImp, 0)
'                Else
'                    slStr = gLongToStrDec(llCGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(llCGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(llCGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(llCGrImp, 3)
                Else
                    slStr = gLongToStrDec(llCGrImp, 0)
                End If
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(10)
                'slStr = gLongToStrDec(llCTotalCost, 2)
                slStr = gDblToStrDec(dlCTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                gSetShow Contract.pbcDemoBar(0), slStr, tmDBCtrls(11)
            End If
        End If
    End If
    If ilDBBookOvly = False Then
        Contract.edcDBBook.Visible = True
        Contract.lacDBBookOvly.Visible = False
    End If
End Sub

'Sub mGetResearchValues(ilLnRowNo As Integer, hmDrf As Integer, hmMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilInDBTotals As Integer, ilOnFlightScreen As Integer, ilCPPCPM As Integer, imVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer, ilChgMode As Integer, ilInResearch As Integer, llTotalCost As Long, llTotalSpots As Long, iAvgRating As Integer, llGrImp As Long, llGRP As Long, llCPP As Long, llCPM As Long)
Sub mGetResearchValues(ilLnRowNo As Integer, hmDrf As Integer, hmMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilInDBTotals As Integer, ilOnFlightScreen As Integer, ilCPPCPM As Integer, imVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer, ilChgMode As Integer, ilInResearch As Integer, dlTotalCost As Double, llTotalSpots As Long, iAvgRating As Integer, llGrImp As Long, llGRP As Long, llCPP As Long, llCPM As Long) 'TTP 10439 - Rerate 21,000,000
'
'   mGetResearchValues
'   Where:
'       ilDBTotals: 0 -> Line; 1 -> Contract; 2 -> Vehicle; 3 -> Daypart; 4 -> Package
'                   11 -> Contract Total matching selected lines from Summary
'                   12 -> Contract Total matching selected vehicles from summary
'                   13 -> Contract Total matching selected daypart from summary
'       For Contract, Vehicle and Dyapart Totals generated, the Package totals must be call first
'

    Dim ilRowNo As Integer      'Row number
    Dim ilCff As Integer        'Flight index
    Dim llStartDate As Long     'Line start date
    Dim llEndDate As Long       'Line end date
    Dim llFlStartDate As Long   'Flight start date
    Dim llFlEndDate As Long     'Flight end date
    Dim llMoFlStartdate As Long
    Dim llDate As Long          'Date loop index
    Dim llStartMonDate As Long  'Start date of line converted to monday of the week
    Dim ilDay As Integer        'Day loop index
    Dim ilVefCode As Integer    'Vehicle code for a line
    Dim ilDnfCode As Integer    'Book Name Code for a Line
    Dim ilMnfDemo As Integer    'Demo Code for a line
    Dim ilMnfSocEco As Integer  'Social Eco (0)
    Dim ilRdfCode As Integer
    Dim llOvStartTime As Long   'Start override time
    Dim llOvEndTime As Long     'End override time
    ReDim ilDays(0 To 6) As Integer 'Airing day map for a week
    Dim ilSpots As Integer  '# spots for week
    Dim llPop As Long       'Population for a line
    Dim llAvgAud As Long    'Average audience value for week
    Dim llAvgAudAvg As Long
    Dim ilAvgRating As Integer  'Average Rating for line and contract (not used)
    'Dim llGRP As Long           'GRP (1 place)
    'Dim llCPP As Long           'CPP (0 places) for line and contract
    'Dim llCPM As Long           'CPM (2 places) for line and contract
    'Dim llTotalCost As Long     'Total Cost for Contract
    'Dim llGrImp As Long         'Gross Impression for contract
    Dim ilWkUpper As Integer    '# weeks Research will be computed for
    Dim ilLnUpper As Integer    '# lines Research Computed for
    'Dim llSvGRP As Long     'GRP for all lines shown on demo bar (used to compute % grp)
    Dim llCntrPop As Long   '-1=Not assigned; 0=Lines contain different populations; >0 = Line Population if same
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilIndex As Integer
    Dim ilMatch As Integer
    Dim slVefName As String
    Dim ilMRdfCode As Integer
    Dim ilProcWk As Integer
    Dim ilTest As Integer
    Dim ilPass As Integer
    Dim ilSPass As Integer
    Dim ilEPass As Integer
    Dim ilFound As Integer
    Dim ilClf As Integer
    Dim ilPkLnRowNo As Integer
    Dim ilSvLnRowNo As Integer
    Dim slLineType As String
    Dim slDPShowName As String
    Dim ilDBTotals As Integer
    Dim ilInclude As Integer
    Dim llPopEst As Long
    'Screen.MousePointer = vbHourGlass
    ReDim lgLnCost(0 To 0) As Long
    ReDim igLnAvgRating(0 To 0) As Integer
    ReDim lgLnGrImp(0 To 0) As Long
    ReDim lgLnGRP(0 To 0) As Long
    Dim llRafCode As Long
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long
    Dim slGroupName As String
    Dim slLNDPName As String
    Dim dlTmpCost As Double 'TTP 10439 - Rerate 21,000,000
    ilDBTotals = ilInDBTotals
    If (ilDBTotals = 11) Or (ilDBTotals = 12) Or (ilDBTotals = 13) Then
        ilDBTotals = 1
    End If
    'llTotalCost = 0
    dlTotalCost = 0 'TTP 10439 - Rerate 21,000,000
    llTotalSpots = 0
    iAvgRating = 0
    llGrImp = 0
    llGRP = 0
    llCPP = 0
    llCPM = 0
    '2/9/20: Research number are computed in the call to mTSummary and values need to be set
    'If sgCntrScreen = "Orders" Then
    If tgSpf.sGUsePropSys <> "Y" Then
        'Screen.MousePointer = vbDefault
        Exit Sub
    End If
    If ilLnRowNo <= 0 Then
        Exit Sub
    End If
    ilMRdfCode = 0
    ilSvLnRowNo = ilLnRowNo
    slStr = mGetLineType(ilLnRowNo)
    If (ilDBTotals = 2) Or (ilDBTotals = 3) Then  'Vehicle Match or Daypart Match
        If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
            ilMRdfCode = imLnSave(1, ilLnRowNo)
            If ilDBTotals = 3 Then
                slDPShowName = mMakePrgName(ilMRdfCode)
                slGroupName = mGetDaypartGroup(ilLnRowNo, hmMnf)
                If slGroupName <> "" Then
                    slDPShowName = slGroupName
                End If
            Else
                slDPShowName = smLnShow(2, ilLnRowNo)
            End If
            gFindMatch smLnSave(1, ilLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
            If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                slVefName = "*^~"
            Else
                slVefName = Contract.lbcLnVehicle(igTabMapIndex).List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
            End If
        Else
            slVefName = "*^~"
            For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                If StrComp(Trim$(smLnSave(1, ilLnRowNo)), Trim$(tgPackVeh(ilLoop).sName), 1) = 0 Then
                    slVefName = tgPackVeh(ilLoop).sName
                    Exit For
                End If
            Next ilLoop
            If ilDBTotals = 3 Then
                slDPShowName = smLnSave(20, ilLnRowNo)
                slGroupName = mGetDaypartGroup(ilLnRowNo, hmMnf)
                If slGroupName <> "" Then
                    slDPShowName = slGroupName
                End If
            Else
                slDPShowName = smLnShow(2, ilLnRowNo)
            End If
            For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                    ilMRdfCode = tgMRdf(ilLoop).iCode
                    Exit For
                End If
            Next ilLoop
        End If
    End If
    If ilDBTotals = 0 Then  'Line Totals
        'ilStartRow = ilLnRowNo
        'ilEndRow = ilLnRowNo
        ilStartRow = imLB1Or2   'Bound(smLnSave, 2)
        If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
            ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
        Else
            ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
        End If
    Else
        ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
        If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
            ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
        Else
            ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
        End If
    End If
    If ilDBTotals = 4 Then
       ReDim igLnMakingPack(0 To 0) As Integer
        'Build an array of line number that make up the package
        For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilTest).sType = "A") Or (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "E") Then
                If tgPackLn(ilTest).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                    ilIndex = tgPackLn(ilTest).iIndex
                    Do While ilIndex >= 0
                        igLnMakingPack(UBound(igLnMakingPack)) = tgPackLn(ilIndex).iLineNo
                        ReDim Preserve igLnMakingPack(0 To UBound(igLnMakingPack) + 1) As Integer
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                    Exit For
                Else
                    ilIndex = tgPackLn(ilTest).iIndex
                    Do While ilIndex >= 0
                        If tgClfCntr(ilLnRowNo - 1).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                            ilIndex = tgPackLn(ilTest).iIndex
                            Do While ilIndex >= 0
                                igLnMakingPack(UBound(igLnMakingPack)) = tgPackLn(ilIndex).iLineNo
                                ReDim Preserve igLnMakingPack(0 To UBound(igLnMakingPack) + 1) As Integer
                                ilIndex = tgPackLn(ilIndex).iIndex
                            Loop
                            Exit For
                        End If
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                End If
            End If
        Next ilTest
    End If
    Select Case ilDBTotals
        Case 0  'Line total
            ilSPass = 1
            ilEPass = 1
        Case 1  'Contract totals
            ilSPass = 2
            ilEPass = 2
        Case 2  'Vehicle Totals
            ilSPass = 2
            ilEPass = 2
        Case 3  'Daypart
            ilSPass = 2
            ilEPass = 2
        Case 4  'Package
            ilSPass = 2
            ilEPass = 2
    End Select
    ilInResearch = True
    For ilPass = ilSPass To ilEPass Step 1
        ReDim lgLnCost(0 To 0) As Long
        ReDim igLnAvgRating(0 To 0) As Integer
        ReDim lgLnGrImp(0 To 0) As Long
        ReDim lgLnGRP(0 To 0) As Long
        ilLnUpper = -1  '0
        llCntrPop = -1
        llTotalSpots = 0
        For ilRowNo = ilStartRow To ilEndRow Step 1
            ilInclude = True
            slStr = mGetLineType(ilRowNo, True)
            If (slStr = "H") And (tgSaf(0).sAudByPackage = "Y") Then
                ilInclude = False
            End If
            If (ilInDBTotals = 11) And ilInclude Then 'Match Line
                ilInclude = False
                slStr = mGetLineType(ilRowNo, True)
                If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                    If (imSumType = 0) Or (slStr <> "H") Then
                        For ilLoop = imLB1Or2 To UBound(smLnSumShow, 2) Step 1
                            If Val(smLnSumShow(1, ilLoop)) = tgClfCntr(ilRowNo - 1).ClfRec.iLine Then
                                If Trim$(smLnSumShow(12, ilLoop)) = "T" Then
                                    ilInclude = True
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    Else
                        'Determine if line belong to selected package
                        'Determine package line that hidden belongs to
                        For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                            If (tgPackLn(ilTest).sType = "A") Or (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "E") Then
                                ilIndex = tgPackLn(ilTest).iIndex
                                Do While ilIndex >= 0
                                    If tgClfCntr(ilRowNo - 1).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                            If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilTest).iLineNo Then
                                                For ilLoop = imLB1Or2 To UBound(smLnSumShow, 2) Step 1
                                                    If tgPackLn(ilTest).iLineNo = Val(smLnSumShow(1, ilLoop)) Then
                                                        If Trim$(smLnSumShow(12, ilLoop)) = "T" Then
                                                            ilInclude = True
                                                        End If
                                                        Exit For
                                                    End If
                                                Next ilLoop
                                                Exit For
                                            End If
                                        Next ilClf
                                        Exit For
                                    End If
                                    ilIndex = tgPackLn(ilIndex).iIndex
                                Loop
                            End If
                        Next ilTest
                    End If
                End If
            ElseIf (ilInDBTotals = 12) And ilInclude Then 'Match Vehicle
                'Total determined from conventional and hidden lines only
                ilInclude = False
                slStr = mGetLineType(ilRowNo, True)
                If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                    If (imSumType = 0) Or (slStr <> "H") Then
                        slVefName = smLnSave(1, ilRowNo)
                        For ilLoop = imLB1Or2 To UBound(smVSumShow, 2) Step 1
                            If slVefName = smVSumShow(1, ilLoop) Then
                                If Trim$(smVSumShow(12, ilLoop)) = "T" Then
                                    ilInclude = True
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    Else
                        'Determine if line belong to selected package
                        'Determine package line that hidden belongs to
                        For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                            If (tgPackLn(ilTest).sType = "A") Or (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "E") Then
                                ilIndex = tgPackLn(ilTest).iIndex
                                Do While ilIndex >= 0
                                    If tgClfCntr(ilRowNo - 1).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                            If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilTest).iLineNo Then
                                                slVefName = smLnSave(1, ilClf + 1)
                                                For ilLoop = imLB1Or2 To UBound(smVSumShow, 2) Step 1
                                                    If slVefName = smVSumShow(1, ilLoop) Then
                                                        If Trim$(smVSumShow(12, ilLoop)) = "T" Then
                                                            ilInclude = True
                                                        End If
                                                        Exit For
                                                    End If
                                                Next ilLoop
                                                Exit For
                                            End If
                                        Next ilClf
                                        Exit For
                                    End If
                                    ilIndex = tgPackLn(ilIndex).iIndex
                                Loop
                            End If
                        Next ilTest
                    End If
                End If
            ElseIf (ilInDBTotals = 13) And ilInclude Then 'Match Daypart
                'Total determined from conventional and hidden lines only
                ilInclude = False
                slStr = mGetLineType(ilRowNo, True)
                If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                    If (imSumType = 0) Or (slStr <> "H") Then
                        slDPShowName = mMakePrgName(imLnSave(1, ilRowNo))
                        slGroupName = mGetDaypartGroup(ilRowNo, hmMnf)
                        If slGroupName <> "" Then
                            slDPShowName = Mid$(slGroupName, 5)
                        End If
                        For ilLoop = imLB1Or2 To UBound(smDPSumShow, 2) Step 1
                            If slDPShowName = smDPSumShow(1, ilLoop) Then
                                If Trim$(smDPSumShow(12, ilLoop)) = "T" Then
                                    ilInclude = True
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    Else
                        'Determine package line that hidden belongs to
                        For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                            If (tgPackLn(ilTest).sType = "A") Or (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "E") Then
                                ilIndex = tgPackLn(ilTest).iIndex
                                Do While ilIndex >= 0
                                    If tgClfCntr(ilRowNo - 1).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                            If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilTest).iLineNo Then
                                                slDPShowName = smLnSave(20, ilClf + 1)
                                                slGroupName = mGetDaypartGroup(ilClf + 1, hmMnf)
                                                If slGroupName <> "" Then
                                                    slDPShowName = Mid$(slGroupName, 5)
                                                End If
                                                For ilLoop = imLB1Or2 To UBound(smDPSumShow, 2) Step 1
                                                    If slDPShowName = smDPSumShow(1, ilLoop) Then
                                                        If Trim$(smDPSumShow(12, ilLoop)) = "T" Then
                                                            ilInclude = True
                                                        End If
                                                        Exit For
                                                    End If
                                                Next ilLoop
                                                Exit For
                                            End If
                                        Next ilClf
                                        Exit For
                                    End If
                                    ilIndex = tgPackLn(ilIndex).iIndex
                                Loop
                            End If
                        Next ilTest
                    End If
                End If
            End If
            If ilInclude Then
                ReDim lgWkSpotCount(0 To 0) As Long
                ReDim lgWkActPrice(0 To 0) As Long
                ReDim lgWkAvgAud(0 To 0) As Long
                ReDim igWkRating(0 To 0) As Integer
                ReDim lgWkGRImp(0 To 0) As Long
                ReDim lgWkGRP(0 To 0) As Long
                ReDim lgWkPopEst(0 To 0) As Long
                ilWkUpper = -1
                mInitBookDemoForLn ilRowNo, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode
                ilLnRowNo = ilSvLnRowNo
                ilDnfCode = tgClfCntr(ilRowNo - 1).ClfRec.iDnfCode
                ilMnfDemo = tgClfCntr(ilRowNo - 1).ClfRec.iMnfDemo
                slLineType = mGetLineType(ilRowNo)
                If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                    ilRdfCode = imLnSave(1, ilRowNo)
                    gFindMatch smLnSave(1, ilRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
                    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                        ilVefCode = 0
                    Else
                        slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        ilVefCode = CInt(slCode)
                    End If
                Else
                    ilVefCode = 0
                    For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                        If StrComp(Trim$(smLnSave(1, ilRowNo)), Trim$(tgPackVeh(ilLoop).sName), 1) = 0 Then
                            ilVefCode = tgPackVeh(ilLoop).iCode
                            Exit For
                        End If
                    Next ilLoop
                    ilRdfCode = 0
                    For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                        If StrComp(smLnSave(20, ilRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                            ilRdfCode = tgMRdf(ilLoop).iCode
                            Exit For
                        End If
                    Next ilLoop
                End If
                If Contract.lbcDBSocEco.ListIndex >= 1 Then
                    slNameCode = tgSocEcoCode(Contract.lbcDBSocEco.ListIndex - 1).sKey  'Traffic!lbcSocEcoCode.List(lbcDBSocEco.ListIndex - 1)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilMnfSocEco = Val(slCode)
                Else
                    ilMnfSocEco = 0
                End If
                slLineType = mGetLineType(ilRowNo, True)
                If ((ilDnfCode > 0) And (ilMnfDemo > 0) And (ilVefCode > 0)) Or (((slLineType = "O") Or (slLineType = "A") Or (slLineType = "E")) And (tgClfCntr(ilRowNo - 1).iResearch) And (ilMnfSocEco = 0)) Then
                    If (tgClfCntr(ilRowNo - 1).iResearch) And (ilMnfSocEco = 0) Then
                        ilMatch = False
                        If (ilDBTotals = 2) And (ilPass = 2) Then  'Vehicle Match
                            slStr = mGetLineType(ilRowNo, True)
                            'If (slStr <> "H") Then  '(slStr <> "O") And (slStr <> "A") Then
                            If ((slStr <> "H") And (imSumType = 1)) Or (((slStr = "S") Or (slStr = "H")) And (imSumType = 0)) Then
                                If Trim$(slVefName) = Trim$(smLnSave(1, ilRowNo)) Then
                                    ilMatch = True
                                End If
                            End If
                        ElseIf (ilDBTotals = 3) And (ilPass = 2) Then    'Daypart match
                            slStr = mGetLineType(ilRowNo, True)
                            'If (slStr <> "H") Then  '(slStr <> "O") And (slStr <> "A") Then
                            If ((slStr <> "H") And (imSumType = 1)) Or (((slStr = "S") Or (slStr = "H")) And (imSumType = 0)) Then
                                'If (smLnShow(2, ilRowNo) = slDPShowName) Then   'imLnSave(1, ilRowNo) Then
                                '    ilMatch = True
                                'End If
                                If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                                    slLNDPName = mMakePrgName(imLnSave(1, ilRowNo))
                                    slGroupName = mGetDaypartGroup(ilRowNo, hmMnf)
                                    If slGroupName <> "" Then
                                        slLNDPName = slGroupName
                                    End If
                                    'If mMakePrgName(imLnSave(1, ilRowNo)) = slDPShowName Then
                                    If slLNDPName = slDPShowName Then
                                        ilMatch = True
                                    End If
                                Else
                                    slLNDPName = smLnSave(20, ilRowNo)
                                    slGroupName = mGetDaypartGroup(ilRowNo, hmMnf)
                                    If slGroupName <> "" Then
                                        slLNDPName = slGroupName
                                    End If
                                    'If (smLnSave(20, ilRowNo) = slDPShowName) Then   'imLnSave(1, ilRowNo) Then
                                    If (slLNDPName = slDPShowName) Then   'imLnSave(1, ilRowNo) Then
                                        ilMatch = True
                                    End If
                                End If
                            End If
                        ElseIf (ilDBTotals = 4) And (ilPass = 2) Then    'Package match
                            For ilLoop = LBound(igLnMakingPack) To UBound(igLnMakingPack) - 1 Step 1
                                If igLnMakingPack(ilLoop) = tgClfCntr(ilRowNo - 1).ClfRec.iLine Then
                                    ilMatch = True
                                    Exit For
                                End If
                            Next ilLoop
                        ElseIf ilDBTotals = 2 Then
                            slStr = mGetLineType(ilRowNo, True)
                            'If (slStr <> "H") Then  '(slStr <> "O") And (slStr <> "A") Then
                            If ((slStr <> "H") And (imSumType = 1)) Or (((slStr = "S") Or (slStr = "H")) And (imSumType = 0)) Then
                                ilMatch = True
                            End If
                        Else
                            slStr = mGetLineType(ilRowNo, True)
                            If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                                ilMatch = True
                            End If
                        End If
                        If ilMatch Then
                            If (ilDBTotals = 1) And (imSumType = 1) Then
                                slStr = mGetLineType(ilRowNo, True)
                                If (slStr <> "H") Then
                                    llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                                End If
                            Else
                                llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                            End If
                            ilLnUpper = ilLnUpper + 1
                            ReDim Preserve lgLnCost(0 To ilLnUpper) As Long
                            ReDim Preserve igLnAvgRating(0 To ilLnUpper) As Integer
                            ReDim Preserve lgLnGrImp(0 To ilLnUpper) As Long
                            ReDim Preserve lgLnGRP(0 To ilLnUpper) As Long
                            lgLnCost(ilLnUpper) = tgClfCntr(ilRowNo - 1).lCost
                            llAvgAudAvg = tgClfCntr(ilRowNo - 1).lAvgAud
                            igLnAvgRating(ilLnUpper) = tgClfCntr(ilRowNo - 1).iAvgRating
                            lgLnGrImp(ilLnUpper) = tgClfCntr(ilRowNo - 1).lGrImp
                            lgLnGRP(ilLnUpper) = tgClfCntr(ilRowNo - 1).lGRP
                            If tgClfCntr(ilRowNo - 1).lPop > 0 Then
                                If llCntrPop = -1 Then
                                    llCntrPop = tgClfCntr(ilRowNo - 1).lPop
                                Else
                                    If llCntrPop <> tgClfCntr(ilRowNo - 1).lPop Then
                                        llCntrPop = 0
                                    End If
                                End If
                            End If
                        End If
                    Else
                        'ilMnfSocEco = 0
                        If imLnSave(4, ilRowNo) = 1 Then
                            llOvStartTime = CLng(gTimeToCurrency(smLnSave(2, ilRowNo), False))
                            llOvEndTime = CLng(gTimeToCurrency(smLnSave(3, ilRowNo), True))
                        Else
                            llOvStartTime = 0
                            llOvEndTime = 0
                        End If
                        llStartDate = gDateValue(smLnSave(14, ilRowNo))
                        llStartMonDate = gDateValue(gObtainPrevMonday(smLnSave(14, ilRowNo)))
                        llEndDate = gDateValue(smLnSave(15, ilRowNo))
                        ilSpots = 0
                        ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
                        ilMatch = False
                        If (ilDBTotals = 2) And (ilPass = 2) Then  'Vehicle Match
                            slStr = mGetLineType(ilRowNo, True)
                            If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                                If Trim$(slVefName) = Trim$(smLnSave(1, ilRowNo)) Then
                                    ilMatch = True
                                End If
                            End If
                        ElseIf (ilDBTotals = 3) And (ilPass = 2) Then    'Daypart match
                            slStr = mGetLineType(ilRowNo, True)
                            If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                                'If (ilMRdfCode = ilRdfCode) Then  'imLnSave(1, ilRowNo) Then
                                'If (smLnShow(2, ilRowNo) = slDPShowName) Then  'imLnSave(1, ilRowNo) Then
                                '    ilMatch = True
                                'End If
                                slLNDPName = mMakePrgName(imLnSave(1, ilRowNo))
                                slGroupName = mGetDaypartGroup(ilRowNo, hmMnf)
                                If slGroupName <> "" Then
                                    slLNDPName = slGroupName
                                End If
                                'If mMakePrgName(imLnSave(1, ilRowNo)) = slDPShowName Then
                                If slLNDPName = slDPShowName Then
                                    ilMatch = True
                                End If
                            End If
                        ElseIf (ilDBTotals = 4) And (ilPass = 2) Then    'Package match
                            For ilLoop = LBound(igLnMakingPack) To UBound(igLnMakingPack) - 1 Step 1
                                If igLnMakingPack(ilLoop) = tgClfCntr(ilRowNo - 1).ClfRec.iLine Then
                                    ilMatch = True
                                    Exit For
                                End If
                            Next ilLoop
                        Else
                            slStr = mGetLineType(ilRowNo, True)
                            If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                                ilMatch = True
                            End If
                        End If
                        If Not ilMatch Then
                            ilCff = -1
                        End If
                        If ilOnFlightScreen And (ilRowNo = ilLnRowNo) Then
                            If ilMatch Then
                                'For ilLoop = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
                                For ilLoop = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
                                    If imAirSave(1, ilLoop) = 0 Then    'Aired week
                                        If imAirSave(2, ilLoop) = 0 Then    'Daily
                                            For ilDay = 4 To 10 Step 1
                                                ilSpots = ilSpots + Val(smAirSave(ilDay, ilLoop))
                                            Next ilDay
                                        Else
                                            ilSpots = ilSpots + Val(smAirSave(3, ilLoop))
                                        End If
                                    End If
                                Next ilLoop
                            End If
                        Else
                            Do While ilCff <> -1
                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                        For ilDay = 0 To 6 Step 1
                                            ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                        Next ilDay
                                    Else
                                        ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                    End If
                                End If
                                If ilSpots > 0 Then
                                    Exit Do
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                        End If
                        If (llEndDate >= llStartDate) And (ilSpots > 0) Then
                            ilLnUpper = ilLnUpper + 1
                            ReDim Preserve lgLnCost(0 To ilLnUpper) As Long
                            ReDim Preserve igLnAvgRating(0 To ilLnUpper) As Integer
                            ReDim Preserve lgLnGrImp(0 To ilLnUpper) As Long
                            ReDim Preserve lgLnGRP(0 To ilLnUpper) As Long

                            ilRet = gGetDemoPop(hmDrf, hmMnf, hlDpf, ilDnfCode, ilMnfSocEco, ilMnfDemo, llPop)
                            If tgSpf.sDemoEstAllowed <> "Y" Then
                                If llPop > 0 Then
                                    If llCntrPop = -1 Then
                                        llCntrPop = llPop
                                    Else
                                        If llCntrPop <> llPop Then
                                            llCntrPop = 0
                                        End If
                                    End If
                                End If
                            End If
                            If ilOnFlightScreen And (ilRowNo = ilLnRowNo) Then
                                'For ilLoop = LBound(smAirSave, 2) To UBound(smAirSave, 2) - 1 Step 1
                                For ilLoop = imLB1Or2 To UBound(smAirSave, 2) - 1 Step 1
                                    If imAirSave(1, ilLoop) = 0 Then    'Aired week
                                        ilProcWk = False
                                        If smAirSave(13, ilLoop) = "Y" Then
                                            If ilLoop <> UBound(smAirSave, 2) - 1 Then
                                                If smAirSave(13, ilLoop + 1) = "Y" Then
                                                    ilProcWk = True
                                                End If
                                            End If
                                        Else
                                            ilProcWk = True
                                        End If
                                        If ilProcWk Then
                                            ilWkUpper = ilWkUpper + 1
                                            ReDim Preserve lgWkSpotCount(0 To ilWkUpper) As Long
                                            ReDim Preserve lgWkActPrice(0 To ilWkUpper) As Long
                                            ReDim Preserve lgWkAvgAud(0 To ilWkUpper) As Long
                                            ReDim igWkRating(0 To ilWkUpper) As Integer
                                            ReDim lgWkGRImp(0 To ilWkUpper) As Long
                                            ReDim lgWkGRP(0 To ilWkUpper) As Long
                                            ReDim Preserve lgWkPopEst(0 To ilWkUpper) As Long
                                            For ilDay = 0 To 6 Step 1
                                                ilDays(ilDay) = False
                                            Next ilDay
                                            ilSpots = 0
                                            If imAirSave(2, ilLoop) = 0 Then    'Daily
                                                For ilDay = 4 To 10 Step 1
                                                    ilSpots = ilSpots + Val(smAirSave(ilDay, ilLoop))
                                                    If Val(smAirSave(ilDay, ilLoop)) > 0 Then
                                                        ilDays(ilDay - 4) = True
                                                    End If
                                                Next ilDay
                                            Else
                                                ilSpots = ilSpots + Val(smAirSave(3, ilLoop))
                                                For ilDay = 4 To 10 Step 1
                                                    If smAirSave(ilDay, ilLoop) = "Y" Then
                                                        ilDays(ilDay - 4) = True
                                                    End If
                                                Next ilDay
                                                If smAirSave(13, ilLoop) = "Y" Then
                                                    ilSpots = ilSpots + Val(smAirSave(3, ilLoop + 1))
                                                    For ilDay = 4 To 10 Step 1
                                                        If smAirSave(ilDay, ilLoop + 1) = "Y" Then
                                                            ilDays(ilDay - 4) = True
                                                        End If
                                                    Next ilDay
                                                End If
                                            End If
                                            lgWkSpotCount(ilWkUpper) = ilSpots
                                            gFindMatch smAirSave(11, ilLoop), 1, Contract.lbcPriceType(1)
                                            If gLastFound(Contract.lbcPriceType(1)) > 0 Then
                                                lgWkActPrice(ilWkUpper) = 0
                                            Else
                                                lgWkActPrice(ilWkUpper) = gStrDecToLong(smAirSave(11, ilLoop), 2)
                                            End If
                                            'If ilOnFlightScreen And (ilRowNo = ilLnRowNo) Then
                                            '    lgWkRCPrice(ilWkUpper) = gStrDecToLong(smAirSave(12, ilLoop), 2)
                                            'Else
                                            '    lgWkRCPrice(ilWkUpper) = 100 * tgCffCntr(ilCff).CffRec.lPropPrice
                                            'End If
                                            llDate = gDateValue(smAirSave(1, ilLoop))
                                            slStr = mGetLineType(ilRowNo, True)
                                            llRafCode = mGetRafCode(ilRowNo, tlRegionCode())
                                            ilRet = gGetDemoAvgAud(hmDrf, hmMnf, hlDpf, hlDef, hlRaf, ilDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                                            lgWkAvgAud(ilWkUpper) = llAvgAud
                                            lgWkPopEst(ilWkUpper) = llPopEst
                                            '10256 changed 10/19/21
                                            mActOneLineInfoSet ilRowNo 'ilLnRowNo
                                        End If
                                    End If
                                Next ilLoop
                            Else
                                ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
                                Do While ilCff <> -1
                                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                                        llMoFlStartdate = llFlStartDate
                                        Do While gWeekDayLong(llMoFlStartdate) <> 0
                                            llMoFlStartdate = llMoFlStartdate - 1
                                        Loop
                                        For llDate = llMoFlStartdate To llFlEndDate Step 7
                                            ilWkUpper = ilWkUpper + 1
                                            ReDim Preserve lgWkSpotCount(0 To ilWkUpper) As Long
                                            ReDim Preserve lgWkActPrice(0 To ilWkUpper) As Long
                                            ReDim Preserve lgWkAvgAud(0 To ilWkUpper) As Long
                                            ReDim igWkRating(0 To ilWkUpper) As Integer
                                            ReDim lgWkGRImp(0 To ilWkUpper) As Long
                                            ReDim lgWkGRP(0 To ilWkUpper) As Long
                                            ReDim Preserve lgWkPopEst(0 To ilWkUpper) As Long
                                            For ilDay = 0 To 6 Step 1
                                                ilDays(ilDay) = False
                                            Next ilDay
                                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                ilSpots = 0
                                                For ilDay = 0 To 6 Step 1
                                                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                        ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                        If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                                            ilDays(ilDay) = True
                                                        End If
                                                    End If
                                                Next ilDay
                                            Else
                                                ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                For ilDay = 0 To 6 Step 1
                                                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                        If (tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilDay) = "1") Then
                                                            ilDays(ilDay) = True
                                                        End If
                                                    End If
                                                Next ilDay
                                            End If
                                            lgWkSpotCount(ilWkUpper) = ilSpots
                                            Select Case tgCffCntr(ilCff).CffRec.sPriceType
                                                Case "T"
                                                    lgWkActPrice(ilWkUpper) = tgCffCntr(ilCff).CffRec.lActPrice
                                                Case Else
                                                    lgWkActPrice(ilWkUpper) = 0
                                            End Select
                                            slStr = mGetLineType(ilRowNo, True)
                                            llRafCode = mGetRafCode(ilRowNo, tlRegionCode())
                                            ilRet = gGetDemoAvgAud(hmDrf, hmMnf, hlDpf, hlDef, hlRaf, ilDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                                            lgWkAvgAud(ilWkUpper) = llAvgAud
                                            lgWkPopEst(ilWkUpper) = llPopEst
                                            '10256 changed 10/19/21
                                            mActOneLineInfoSet ilRowNo 'ilLnRowNo
                                        Next llDate
                                    End If
                                    ilCff = tgCffCntr(ilCff).iNextCff
                                Loop
                            End If
                            If ilWkUpper >= 0 Then
                                'gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), lgLnCost(ilLnUpper), llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst
                                dlTmpCost = CDbl(lgLnCost(ilLnUpper)) 'TTP 10439 - Rerate 21,000,000
                                gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), dlTmpCost, llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst   'TTP 10439 - Rerate 21,000,000
                                lgLnCost(ilLnUpper) = dlTmpCost 'TTP 10439 - Rerate 21,000,000
                                tgClfCntr(ilRowNo - 1).iResearch = True
                                tgClfCntr(ilRowNo - 1).lCost = lgLnCost(ilLnUpper)
                                tgClfCntr(ilRowNo - 1).lAvgAud = llAvgAudAvg
                                tgClfCntr(ilRowNo - 1).iAvgRating = igLnAvgRating(ilLnUpper)
                                tgClfCntr(ilRowNo - 1).lGrImp = lgLnGrImp(ilLnUpper)
                                tgClfCntr(ilRowNo - 1).lGRP = lgLnGRP(ilLnUpper)
                                tgClfCntr(ilRowNo - 1).lCPM = llCPM
                                tgClfCntr(ilRowNo - 1).lCPP = llCPP
                                If tgSpf.sDemoEstAllowed <> "Y" Then
                                    tgClfCntr(ilRowNo - 1).lPop = llPop
                                Else
                                    tgClfCntr(ilRowNo - 1).lPop = llPopEst
                                    If llPopEst > 0 Then
                                        If llCntrPop = -1 Then
                                            llCntrPop = llPopEst
                                        Else
                                            If llCntrPop <> llPopEst Then
                                                llCntrPop = 0
                                            End If
                                        End If
                                    End If
                                End If
                                tgClfCntr(ilRowNo - 1).lTSpots = 0
                                For ilLoop = 0 To ilWkUpper Step 1
                                    tgClfCntr(ilRowNo - 1).lTSpots = tgClfCntr(ilRowNo - 1).lTSpots + lgWkSpotCount(ilLoop)
                                Next ilLoop
                                'llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).iTSpots
                                If (ilDBTotals = 1) And (imSumType = 1) Then
                                    slStr = mGetLineType(ilRowNo, True)
                                    If (slStr <> "H") Then
                                        llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                                    End If
                                Else
                                    llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                                End If
                            End If
                        ElseIf (llEndDate >= llStartDate) And (ilSpots = 0) Then
                            '12/5/19
                            tgClfCntr(ilRowNo - 1).lAvgAud = 0
                            tgClfCntr(ilRowNo - 1).iAvgRating = 0
                            tgClfCntr(ilRowNo - 1).lGrImp = 0
                            tgClfCntr(ilRowNo - 1).lGRP = 0
                            tgClfCntr(ilRowNo - 1).lCPM = 0
                            tgClfCntr(ilRowNo - 1).lCPP = 0
                            tgClfCntr(ilRowNo - 1).lPop = 0
                            'tgClfCntr(ilRowNo - 1).iTSpots = imLnSave(11, ilRowNo)
                            tgClfCntr(ilRowNo - 1).lTSpots = 0
                        
                        End If
                    End If
                Else
                    ilMatch = False
                    If (ilDBTotals = 2) And (ilPass = 2) Then  'Vehicle Match
                        slStr = mGetLineType(ilRowNo, True)
                        'If (slStr <> "H") Then  '(slStr <> "O") And (slStr <> "A") Then
                        If ((slStr <> "H") And (imSumType = 1)) Or (((slStr = "S") Or (slStr = "H")) And (imSumType = 0)) Then
                            If Trim$(slVefName) = Trim$(smLnSave(1, ilRowNo)) Then
                                ilMatch = True
                            End If
                        End If
                    ElseIf (ilDBTotals = 3) And (ilPass = 2) Then    'Daypart match
                        slStr = mGetLineType(ilRowNo, True)
                        'If (slStr <> "H") Then  '(slStr <> "O") And (slStr <> "A") Then
                        If ((slStr <> "H") And (imSumType = 1)) Or (((slStr = "S") Or (slStr = "H")) And (imSumType = 0)) Then
                            'If (ilMRdfCode = ilRdfCode) Then  'imLnSave(1, ilRowNo) Then
                            'If (smLnShow(2, ilRowNo) = slDPShowName) Then  'imLnSave(1, ilRowNo) Then
                            '    ilMatch = True
                            'End If
                            If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                                slLNDPName = mMakePrgName(imLnSave(1, ilRowNo))
                                slGroupName = mGetDaypartGroup(ilRowNo, hmMnf)
                                If slGroupName <> "" Then
                                    slLNDPName = slGroupName
                                End If
                                'If mMakePrgName(imLnSave(1, ilRowNo)) = slDPShowName Then
                                If slLNDPName = slDPShowName Then
                                    ilMatch = True
                                End If
                            Else
                                slLNDPName = smLnSave(20, ilRowNo)
                                slGroupName = mGetDaypartGroup(ilRowNo, hmMnf)
                                If slGroupName <> "" Then
                                    slLNDPName = slGroupName
                                End If
                                'If (smLnSave(20, ilRowNo) = slDPShowName) Then   'imLnSave(1, ilRowNo) Then
                                If (slLNDPName = slDPShowName) Then   'imLnSave(1, ilRowNo) Then
                                    ilMatch = True
                                End If
                            End If
                        End If
                    ElseIf (ilDBTotals = 4) And (ilPass = 2) Then    'Package match
                        For ilLoop = LBound(igLnMakingPack) To UBound(igLnMakingPack) - 1 Step 1
                            If igLnMakingPack(ilLoop) = tgClfCntr(ilRowNo - 1).ClfRec.iLine Then
                                ilMatch = True
                                Exit For
                            End If
                        Next ilLoop
                    ElseIf ilDBTotals = 2 Then
                        slStr = mGetLineType(ilRowNo, True)
                        'If (slStr <> "H") Then  '(slStr <> "O") And (slStr <> "A") Then
                        If ((slStr <> "H") And (imSumType = 1)) Or (((slStr = "S") Or (slStr = "H")) And (imSumType = 0)) Then
                            ilMatch = True
                        End If
                    Else
                        slStr = mGetLineType(ilRowNo, True)
                        If (slStr <> "O") And (slStr <> "A") And (slStr <> "E") Then
                            ilMatch = True
                        End If
                    End If
                    If ilMatch Then
                        'llTotalSpots = llTotalSpots + imLnSave(11, ilRowNo)
                        If (ilDBTotals = 1) And (imSumType = 1) Then
                            slStr = mGetLineType(ilRowNo, True)
                            If (slStr <> "H") Then
                                'llTotalSpots = llTotalSpots + imLnSave(11, ilRowNo)
                                llTotalSpots = llTotalSpots + Val(smLnSave(23, ilRowNo))
                            End If
                        Else
                            'llTotalSpots = llTotalSpots + imLnSave(11, ilRowNo)
                            llTotalSpots = llTotalSpots + Val(smLnSave(23, ilRowNo))
                        End If
                        ilLnUpper = ilLnUpper + 1
                        ReDim Preserve lgLnCost(0 To ilLnUpper) As Long
                        ReDim Preserve igLnAvgRating(0 To ilLnUpper) As Integer
                        ReDim Preserve lgLnGrImp(0 To ilLnUpper) As Long
                        ReDim Preserve lgLnGRP(0 To ilLnUpper) As Long
                        lgLnCost(ilLnUpper) = gStrDecToLong(smLnSave(18, ilRowNo), 2)
                        llAvgAudAvg = 0
                        igLnAvgRating(ilLnUpper) = 0
                        lgLnGrImp(ilLnUpper) = 0
                        lgLnGRP(ilLnUpper) = 0
                        tgClfCntr(ilRowNo - 1).lCost = lgLnCost(ilLnUpper)
                        tgClfCntr(ilRowNo - 1).lAvgAud = llAvgAudAvg
                        tgClfCntr(ilRowNo - 1).iAvgRating = igLnAvgRating(ilLnUpper)
                        tgClfCntr(ilRowNo - 1).lGrImp = lgLnGrImp(ilLnUpper)
                        tgClfCntr(ilRowNo - 1).lGRP = lgLnGRP(ilLnUpper)
                        tgClfCntr(ilRowNo - 1).lCPM = 0
                        tgClfCntr(ilRowNo - 1).lCPP = 0
                        tgClfCntr(ilRowNo - 1).lPop = 0
                        'tgClfCntr(ilRowNo - 1).iTSpots = imLnSave(11, ilRowNo)
                        tgClfCntr(ilRowNo - 1).lTSpots = Val(smLnSave(23, ilRowNo))
                        'llCntrPop = 0
                    End If
                End If
            End If
        Next ilRowNo
        llCPM = 0
        llCPP = 0
        llGRP = 0
        llAvgAud = 0
        'If ilLnUpper > 0 Then
        If ilLnUpper >= 0 Then
            If (ilDBTotals = 4) And (ilPass = 2) Then    'Package match
                slStr = mGetLineType(ilLnRowNo)
                If (slStr = "O") Or (slStr = "A") Or (slStr = "E") Then
                    'llTotalSpots = imLnSave(11, ilLnRowNo)
                    llTotalSpots = Val(smLnSave(23, ilLnRowNo))
                Else
                    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                        If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                            ilFound = False
                            ilIndex = tgPackLn(ilLoop).iIndex
                            Do While ilIndex >= 0
                                If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                                    ilFound = True
                                End If
                                ilIndex = tgPackLn(ilIndex).iIndex
                            Loop
                            If ilFound Then
                                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                    If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                        ilPkLnRowNo = ilClf + 1
                                        'llTotalSpots = imLnSave(11, ilPkLnRowNo)
                                        llTotalSpots = Val(smLnSave(23, ilPkLnRowNo))
                                        Exit For
                                    End If
                                Next ilClf
                                Exit For
                            End If
                        End If
                    Next ilLoop
                End If
            End If
            If (ilInDBTotals = 11) And (imSumType = 1) And (ilPass = 2) Then 'Match Line
                For ilRowNo = ilStartRow To ilEndRow Step 1
                    slStr = mGetLineType(ilRowNo)
                    If (slStr = "O") Or (slStr = "A") Or (slStr = "E") Then
                        For ilLoop = imLB1Or2 To UBound(smLnSumShow, 2) Step 1
                            If Val(smLnSumShow(1, ilLoop)) = tgClfCntr(ilRowNo - 1).ClfRec.iLine Then
                                If Trim$(smLnSumShow(12, ilLoop)) = "T" Then
                                    llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    End If
                Next ilRowNo
            End If
            If (ilInDBTotals = 12) And (imSumType = 1) And (ilPass = 2) Then 'Match Vehicle
                For ilRowNo = ilStartRow To ilEndRow Step 1
                    slStr = mGetLineType(ilRowNo)
                    If (slStr = "O") Or (slStr = "A") Or (slStr = "E") Then
                        slVefName = smLnSave(1, ilRowNo)
                        For ilLoop = imLB1Or2 To UBound(smVSumShow, 2) Step 1
                            If slVefName = smVSumShow(1, ilLoop) Then
                                If Trim$(smVSumShow(12, ilLoop)) = "T" Then
                                    llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    End If
                Next ilRowNo
            End If
            If (ilInDBTotals = 13) And (imSumType = 1) And (ilPass = 2) Then 'Match Daypart
                For ilRowNo = ilStartRow To ilEndRow Step 1
                    slStr = mGetLineType(ilRowNo)
                    If (slStr = "O") Or (slStr = "A") Or (slStr = "E") Then
                        slDPShowName = mMakePrgName(imLnSave(1, ilRowNo))
                        For ilLoop = imLB1Or2 To UBound(smDPSumShow, 2) Step 1
                            If slDPShowName = smDPSumShow(1, ilLoop) Then
                                If Trim$(smDPSumShow(12, ilLoop)) = "T" Then
                                    llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    End If
                Next ilRowNo
            End If
            If (ilInDBTotals = 1) And (imSumType = 1) And (ilPass = 2) Then
                For ilRowNo = ilStartRow To ilEndRow Step 1
                    slStr = mGetLineType(ilRowNo)
                    If (slStr = "O") Or (slStr = "A") Or (slStr = "E") Then
                        llTotalSpots = llTotalSpots + tgClfCntr(ilRowNo - 1).lTSpots
                    End If
                Next ilRowNo
            End If
            'gResearchTotals False, llCntrPop, lgLnCost(), igLnAvgRating(), lgLnGrImp(), lgLnGRP(), llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM
            'gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTotalSpots, llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
            gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTotalSpots, dlTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
        End If
        If (ilDBTotals = 4) And (ilPass = 2) Then    'Package match
            slStr = mGetLineType(ilLnRowNo)
            If (slStr = "O") Or (slStr = "A") Or (slStr = "E") Then
                tgClfCntr(ilLnRowNo - 1).iResearch = True
                tgClfCntr(ilLnRowNo - 1).lCost = gStrDecToLong(smLnSave(18, ilLnRowNo), 2)    'llTotalCost
                tgClfCntr(ilLnRowNo - 1).lAvgAud = llAvgAud '0
                tgClfCntr(ilLnRowNo - 1).iAvgRating = ilAvgRating
                tgClfCntr(ilLnRowNo - 1).lGrImp = llGrImp
                tgClfCntr(ilLnRowNo - 1).lGRP = llGRP
                tgClfCntr(ilLnRowNo - 1).lCPM = llCPM
                tgClfCntr(ilLnRowNo - 1).lCPP = llCPP
                tgClfCntr(ilLnRowNo - 1).lPop = llCntrPop
                'tgClfCntr(ilLnRowNo - 1).iTSpots = imLnSave(11, ilLnRowNo)
                tgClfCntr(ilLnRowNo - 1).lTSpots = Val(smLnSave(23, ilLnRowNo))
            Else
                For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                    If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                        ilFound = False
                        ilIndex = tgPackLn(ilLoop).iIndex
                        Do While ilIndex >= 0
                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                                ilFound = True
                            End If
                            ilIndex = tgPackLn(ilIndex).iIndex
                        Loop
                        If ilFound Then
                            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                    ilPkLnRowNo = ilClf + 1
                                    tgClfCntr(ilPkLnRowNo - 1).iResearch = True
                                    tgClfCntr(ilPkLnRowNo - 1).lCost = gStrDecToLong(smLnSave(18, ilPkLnRowNo), 2)    'llTotalCost
                                    tgClfCntr(ilPkLnRowNo - 1).lAvgAud = llAvgAud   '0
                                    tgClfCntr(ilPkLnRowNo - 1).iAvgRating = ilAvgRating
                                    tgClfCntr(ilPkLnRowNo - 1).lGrImp = llGrImp
                                    tgClfCntr(ilPkLnRowNo - 1).lGRP = llGRP
                                    tgClfCntr(ilPkLnRowNo - 1).lCPM = llCPM
                                    tgClfCntr(ilPkLnRowNo - 1).lCPP = llCPP
                                    tgClfCntr(ilPkLnRowNo - 1).lPop = llCntrPop
                                    'tgClfCntr(ilPkLnRowNo - 1).iTSpots = imLnSave(11, ilPkLnRowNo)
                                    tgClfCntr(ilPkLnRowNo - 1).lTSpots = Val(smLnSave(23, ilPkLnRowNo))
                                    Exit For
                                End If
                            Next ilClf
                            Exit For
                        End If
                    End If
                Next ilLoop
            End If
        End If
    Next ilPass
    If ilLnRowNo >= 0 Then
        mInitBookDemoForLn ilLnRowNo, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode
    End If
    ilInResearch = False
    If ilLnUpper >= 0 Then
        'gResearchTotals llCntrPop, lgLnCost(), igLnAvgRating(), lgLnGrImp(), lgLnGRP(), llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM
        'llSvGRP = llGRP
        If ilDBTotals = 0 Then  'Line Totals
            llTotalSpots = tgClfCntr(imLnRowNo - 1).lTSpots
            If tgClfCntr(ilLnRowNo - 1).iResearch Then
                ilLnUpper = 0   '1
                ReDim lgLnCost(0 To ilLnUpper) As Long
                ReDim igLnAvgRating(0 To ilLnUpper) As Integer
                ReDim lgLnGrImp(0 To ilLnUpper) As Long
                ReDim lgLnGRP(0 To ilLnUpper) As Long
                lgLnCost(ilLnUpper) = tgClfCntr(ilLnRowNo - 1).lCost
                llAvgAudAvg = tgClfCntr(ilLnRowNo - 1).lAvgAud
                igLnAvgRating(ilLnUpper) = tgClfCntr(ilLnRowNo - 1).iAvgRating
                lgLnGrImp(ilLnUpper) = tgClfCntr(ilLnRowNo - 1).lGrImp
                lgLnGRP(ilLnUpper) = tgClfCntr(ilLnRowNo - 1).lGRP
                'gResearchTotals False, tgClfCntr(ilLnRowNo - 1).lPop, lgLnCost(), igLnAvgRating(), lgLnGrImp(), lgLnGRP(), llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM
                'gResearchTotals smCntr1or2PlaceRating, False, tgClfCntr(ilLnRowNo - 1).lPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTotalSpots, llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
                gResearchTotals smCntr1or2PlaceRating, False, tgClfCntr(ilLnRowNo - 1).lPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTotalSpots, dlTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
            Else
                ilLnUpper = 0
                llCPM = 0
                llCPP = 0
                llGRP = 0
                'llTotalCost = tgClfCntr(ilLnRowNo - 1).lCost
                dlTotalCost = tgClfCntr(ilLnRowNo - 1).lCost 'TTP 10439 - Rerate 21,000,000
            End If
        End If
    End If
End Sub

Sub mInitBookDemoForLn(ilLnRowNo As Integer, ilCPPCPM As Integer, ilVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer, ilChgMode As Integer)
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilCode As Integer
    Dim ilVef As Integer
    Dim ilIndex As Integer
    Dim slLineType As String
    
    '1/19/10: Add Site option test
    'If (sgCntrScreen = "Orders") Then
    '2/9/20: Research number are computed in the call to mTSummary and values need to be set
    If (sgCntrScreen = "Orders") And (tgSpf.sGUsePropSys <> "Y") Then
        Exit Sub
    End If
    mSetDemoBarBooks ilLnRowNo, tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode, ilCPPCPM, 2, ilVefCode, ilVpfIndex, ilTerminate, ilChgMode
    slLineType = mGetLineType(ilLnRowNo, True)
    If (smLnSave(1, ilLnRowNo) = "") Then 'Vehicle not defined
        tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode = 0
        tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo = 0
        tgClfCntr(ilLnRowNo - 1).iResearch = False
    Else
        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then 'Vehicle not defined
            If tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode <= 0 Then
                gFindMatch smLnSave(1, ilLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
                If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                    tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode = 0
                    tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo = 0
                    tgClfCntr(ilLnRowNo - 1).iResearch = False
                    Exit Sub
                End If
                slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                ilCode = CInt(slCode)
                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                '    If ilCode = tgMVef(ilVef).iCode Then
                    ilVef = gBinarySearchVef(ilCode)
                    If ilVef <> -1 Then
                        tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode = tgMVef(ilVef).iDnfCode
                        'Exit For
                    End If
                'Next ilVef
                'Might need to remove this setting if books exist (lbcDBBook- gPopBookNameBox)
                If tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode <= 0 Then
                    tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo = 0
                    tgClfCntr(ilLnRowNo - 1).iResearch = False
                    Exit Sub
                End If
            End If
        Else
            tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode = 0
        End If
        If Contract.lbcDBDemo.ListIndex >= 0 Then
            'Find matching name
            If (Contract.lbcDemo(0).ListIndex >= 1) Or (Contract.lbcDemo(1).ListIndex >= 1) Or (Contract.lbcDemo(2).ListIndex >= 1) Or (Contract.lbcDemo(3).ListIndex >= 1) Then
                ilIndex = Contract.lbcDemo(imDemoMap(Contract.lbcDBDemo.ListIndex)).ListIndex
                slNameCode = tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            Else
                ilIndex = Contract.lbcDBDemo.ListIndex
                slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
            End If
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            If tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo <> Val(slCode) Then
                tgClfCntr(ilLnRowNo - 1).iResearch = False
            End If
            tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo = Val(slCode)
        Else
            If Contract.lbcDemo(0).ListIndex >= 1 Then
                slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(Contract.lbcDemo(0).ListIndex - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo = Val(slCode)
            End If
        End If
    End If
End Sub

Sub mInitCEShow(tlCECtrls() As FIELDAREA)
'
'   mInitCEShow
'   Where:
'
    Dim slStr As String
    Dim ilBoxNo As Integer

    For ilBoxNo = imLBCTCtrls To UBound(tlCECtrls) Step 1
        Select Case ilBoxNo 'Branch on box type (control)
            Case CECOMPINDEX   'Competitive
                If Contract.lbcComp(0).ListIndex > 0 Then
                    slStr = Contract.lbcComp(0).List(Contract.lbcComp(0).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcCE, slStr, tlCECtrls(ilBoxNo)
            Case CECOMPINDEX + 1 'Competitive
                If Contract.lbcComp(1).ListIndex > 0 Then
                    slStr = Contract.lbcComp(1).List(Contract.lbcComp(1).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcCE, slStr, tlCECtrls(ilBoxNo)
            Case CEEXCLINDEX   'Program exclusion
                If Contract.lbcExcl(0).ListIndex > 0 Then
                    slStr = Contract.lbcExcl(0).List(Contract.lbcExcl(0).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcCE, slStr, tlCECtrls(ilBoxNo)
            Case CEEXCLINDEX + 1 'Program exclusion
                If Contract.lbcExcl(1).ListIndex > 0 Then
                    slStr = Contract.lbcExcl(1).List(Contract.lbcExcl(1).ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcCE, slStr, tlCECtrls(ilBoxNo)
            Case CEBUSCATINDEX   'Competitive
                If Contract.lbcComp(0).ListIndex > 0 Then
                    slStr = Contract.lbcBusCat.List(Contract.lbcBusCat.ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow Contract.pbcCE, slStr, tlCECtrls(ilBoxNo)
        End Select
     Next ilBoxNo
End Sub

Sub mInitLnTotals(ilLnRowNo As Integer, ilLnTotalType As Integer, ilPRICEINDEX As Integer)
    Dim slStr As String

    If (igFreezeState = 1) Then
        Exit Sub
    End If
    mSetLnTotals ilLnRowNo  'Set smLnSave(18, ilLnRowNo) and imLnSave(11, ilLnRowNo)
    mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
End Sub

Sub mInitPackArrays(ilSortReq As Integer)
    Dim ilPrevIndex As Integer
    Dim ilUpperBound As Integer
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilRdf As Integer
    Dim ilVef As Integer
    'Dim ilAlter As Integer
    Dim slAlter As String
    Dim slAlterName As String
    ReDim tgPackVeh(0 To 0) As PACKVEH
    ReDim tgPackDP(0 To 0) As PACKDP
    ReDim tgPackLn(0 To 0) As PACKLN
    ilUpperBound = UBound(tgPackLn)
    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If (tgClfCntr(ilLoop).ClfRec.sType = "O") Or (tgClfCntr(ilLoop).ClfRec.sType = "A") Or (tgClfCntr(ilLoop).ClfRec.sType = "E") Then
            ilSortReq = True
            tgPackLn(ilUpperBound).sType = tgClfCntr(ilLoop).ClfRec.sType
            tgPackLn(ilUpperBound).iLineNo = tgClfCntr(ilLoop).ClfRec.iLine
            tgPackLn(ilUpperBound).iIndex = -1
            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            '    If tgMVef(ilVef).iCode = tgClfCntr(ilLoop).ClfRec.iVefCode Then
                ilVef = gBinarySearchVef(tgClfCntr(ilLoop).ClfRec.iVefCode)
                If ilVef <> -1 Then
                    tgPackLn(ilUpperBound).sVehName = Trim$(tgMVef(ilVef).sName)
                    If (tgMVef(ilVef).sType = "P") And (tgMVef(ilVef).lPvfCode > 0) Then
                        'If tgMVef(ilVef).sStdAlter = "Y" Then
                        '    tgPackLn(ilUpperBound).iAlter = True
                        'Else
                        '    tgPackLn(ilUpperBound).iAlter = False
                        'End If
                        tgPackLn(ilUpperBound).sAlter = tgMVef(ilVef).sStdAlter
                        tgPackLn(ilUpperBound).sAlterName = tgMVef(ilVef).sStdAlterName
                        tgPackLn(ilUpperBound).iStdPkg = True
                    Else
                        'tgPackLn(ilUpperBound).iAlter = True
                        tgPackLn(ilUpperBound).sAlter = "Y"
                        tgPackLn(ilUpperBound).sAlterName = "Y"
                        tgPackLn(ilUpperBound).iStdPkg = False
                    End If
                    tgPackLn(ilUpperBound).iMnfVehGp3Mkt = tgMVef(ilVef).iMnfVehGp3Mkt
                    tgPackLn(ilUpperBound).sSource = "A"
                    'ilAlter = tgPackLn(ilUpperBound).iAlter
                    slAlter = tgPackLn(ilUpperBound).sAlter
                    slAlterName = tgPackLn(ilUpperBound).sAlterName
                    'Exit For
                End If
            'Next ilVef
            'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            '    If tgMRdf(ilRdf).iCode = tgClfCntr(ilLoop).ClfRec.iRdfcode Then
                ilRdf = gBinarySearchRdf(tgClfCntr(ilLoop).ClfRec.iRdfCode)
                If ilRdf <> -1 Then
                    tgPackLn(ilUpperBound).sDPName = Trim$(tgMRdf(ilRdf).sName)
            '        Exit For
                End If
            'Next ilRdf
            ilPrevIndex = ilUpperBound
            ilUpperBound = ilUpperBound + 1
            ReDim Preserve tgPackLn(0 To ilUpperBound) As PACKLN
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                If (tgClfCntr(ilClf).ClfRec.iPkLineNo = tgClfCntr(ilLoop).ClfRec.iLine) Then
                    tgPackLn(ilUpperBound).sType = "H"  'tgClfCntr(ilClf).ClfRec.sType
                    tgPackLn(ilUpperBound).iLineNo = tgClfCntr(ilClf).ClfRec.iLine
                    tgPackLn(ilPrevIndex).iIndex = ilUpperBound
                    tgPackLn(ilUpperBound).iIndex = -1
                    tgPackLn(ilUpperBound).sVehName = ""
                    tgPackLn(ilUpperBound).sDPName = ""
                    tgPackLn(ilUpperBound).iMnfVehGp3Mkt = 0
                    'tgPackLn(ilUpperBound).iAlter = ilAlter
                    tgPackLn(ilUpperBound).sAlter = slAlter
                    tgPackLn(ilUpperBound).sAlterName = slAlterName
                    ilPrevIndex = ilUpperBound
                    ilUpperBound = ilUpperBound + 1
                    ReDim Preserve tgPackLn(0 To ilUpperBound) As PACKLN
                End If
            Next ilClf
        End If
    Next ilLoop
End Sub

Sub mInitSumDiff(hlChf As Integer, hlClf As Integer, hlCff As Integer, hmDrf As Integer, hmMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilCPPCPM As Integer, ilChgMode As Integer, ilVehIndex As Integer, ilDPIndex As Integer, ilStep1Index As Integer)
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilChfRecLen As Integer
    Dim ilRet As Integer
    Dim ilTerminate As Integer
    Dim ilSort As Integer
    Dim slNameCode As String
    Dim slRecCode As String
    Dim slCode As String
    Dim ilVefCode As Integer
    Dim ilVpfIndex As Integer
    Dim ilLnRowNo As Integer
    If Not imOVDGenerated Then
        imOVDGenerated = True
        ilChfRecLen = Len(tmChf)
        'Save all values- then read in values
        tmDiffChf = tgChfCntr
        ReDim tmDiffClf(LBound(tgClfCntr) To UBound(tgClfCntr)) As CLFLIST
        ReDim tmDiffCff(LBound(tgCffCntr) To UBound(tgCffCntr)) As CFFLIST
        ReDim tmDiffCgf(LBound(tgCgfCntr) To UBound(tgCgfCntr)) As CGFLIST
        ReDim tmDiffMsf(LBound(tgMsfCntr) To UBound(tgMsfCntr)) As MSFLIST
        ReDim tmDiffMgf(LBound(tgMgfCntr) To UBound(tgMgfCntr)) As MGFLIST
        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
            tmDiffClf(ilLoop) = tgClfCntr(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgCffCntr) To UBound(tgCffCntr) Step 1
            tmDiffCff(ilLoop) = tgCffCntr(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgCgfCntr) To UBound(tgCgfCntr) Step 1
            tmDiffCgf(ilLoop) = tgCgfCntr(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgMsfCntr) To UBound(tgMsfCntr) Step 1
            tmDiffMsf(ilLoop) = tgMsfCntr(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgMgfCntr) To UBound(tgMgfCntr) Step 1
            tmDiffMgf(ilLoop) = tgMgfCntr(ilLoop)
        Next ilLoop
        ReDim smSvLnSave(LBound(smLnSave, FIELDBOUNDINDEX) To UBound(smLnSave, FIELDBOUNDINDEX), LBound(smLnSave, LINEBOUNDINDEX) To UBound(smLnSave, LINEBOUNDINDEX)) As String
        ReDim imSvLnSave(LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX), LBound(imLnSave, LINEBOUNDINDEX) To UBound(imLnSave, LINEBOUNDINDEX)) As Integer
        For ilLoop = LBound(smLnSave, FIELDBOUNDINDEX) To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
            For ilIndex = LBound(smLnSave, LINEBOUNDINDEX) To UBound(smLnSave, LINEBOUNDINDEX) Step 1
                smSvLnSave(ilLoop, ilIndex) = smLnSave(ilLoop, ilIndex)
            Next ilIndex
        Next ilLoop
        For ilLoop = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            For ilIndex = LBound(imLnSave, LINEBOUNDINDEX) To UBound(imLnSave, LINEBOUNDINDEX) Step 1
                imSvLnSave(ilLoop, ilIndex) = imLnSave(ilLoop, ilIndex)
            Next ilIndex
        Next ilLoop
        ReDim tmSvPackVeh(LBound(tgPackVeh) To UBound(tgPackVeh)) As PACKVEH
        ReDim tmSvPackDP(LBound(tgPackDP) To UBound(tgPackDP)) As PACKDP
        ReDim tmSvPackLn(LBound(tgPackLn) To UBound(tgPackLn)) As PACKLN
        For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) Step 1
            tmSvPackVeh(ilLoop) = tgPackVeh(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgPackDP) To UBound(tgPackDP) Step 1
            tmSvPackDP(ilLoop) = tgPackDP(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) Step 1
            tmSvPackLn(ilLoop) = tgPackLn(ilLoop)
        Next ilLoop
        tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
        tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
        tmChfSrchKey1.iPropVer = 32000
        ilRet = btrGetGreaterOrEqual(hlChf, tmChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tgChfCntr.lCntrNo) And ((tmChf.sSchStatus <> "F") And (tmChf.sSchStatus <> "M"))
            ilRet = btrGetNext(hlChf, tmChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        If (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tgChfCntr.lCntrNo) And ((tmChf.sSchStatus = "F") Or (tmChf.sSchStatus = "M")) Then
            ilRet = gObtainCntr(hlChf, hlClf, hlCff, tmChf.lCode, False, tgChfCntr, tgClfCntr(), tgCffCntr())
            If ilRet Then
                Select Case tgChfCntr.sCppCpm
                    Case "N"
                        'imCppCpm = 0 'cbcPriceType.ListIndex = 0
                        For ilLoop = 0 To 3 Step 1
                            Contract.lbcDemo(ilLoop).ListIndex = -1
                        Next ilLoop
                    Case "M"
                        'imCppCpm = 1 'cbcPriceType.ListIndex = 1
                        For ilLoop = 0 To 3 Step 1
                            Contract.lbcDemo(ilLoop).ListIndex = -1
                            slRecCode = Trim$(str$(tgChfCntr.iMnfDemo(ilLoop)))
                            For ilIndex = 0 To UBound(tgDemoCode) - 1 Step 1 'Traffic!lbcDemoCode.ListCount - 1 Step 1
                                slNameCode = tgDemoCode(ilIndex).sKey 'Traffic!lbcDemoCode.List(ilIndex)
                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                If slRecCode = slCode Then
                                    Contract.lbcDemo(ilLoop).ListIndex = ilIndex + 1
                                    Exit For
                                End If
                            Next ilIndex
                        Next ilLoop
                    Case "P"
                        'imCppCpm = 2 'cbcPriceType.ListIndex = 2
                        For ilLoop = 0 To 3 Step 1
                            Contract.lbcDemo(ilLoop).ListIndex = -1
                            slRecCode = Trim$(str$(tgChfCntr.iMnfDemo(ilLoop)))
                            For ilIndex = 0 To UBound(tgDemoCode) - 1 Step 1 'Traffic!lbcDemoCode.ListCount - 1 Step 1
                                slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex)
                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                If slRecCode = slCode Then
                                    Contract.lbcDemo(ilLoop).ListIndex = ilIndex + 1
                                    Exit For
                                End If
                            Next ilIndex
                        Next ilLoop
                    Case Else
                        'imCppCpm = -1 'cbcPriceType.ListIndex = 0
                        For ilLoop = 0 To 3 Step 1
                            Contract.lbcDemo(ilLoop).ListIndex = -1
                        Next ilLoop
                End Select
                ReDim smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
                ReDim imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
                mMoveLnRecToCtrl ilTerminate, tlRegionCode()
                mInitPackArrays ilSort
                mBuildPkVeh True, False
                For ilLnRowNo = LBound(tgClfCntr) + 1 To UBound(tgClfCntr) Step 1
                    mSetLnTotals ilLnRowNo
                Next ilLnRowNo
            End If
        Else
            ReDim smOVDSumValue(0 To 11, 0 To 1) As String
            ReDim tgClfCntr(0 To 0) As CLFLIST
            tgClfCntr(0).iStatus = -1 'Not Used
            tgClfCntr(0).lRecPos = 0
            tgClfCntr(0).iFirstCff = -1
            tgClfCntr(0).iFirstCgf = -1
            tgClfCntr(0).lFirstAvail = -1
            ReDim tgCffCntr(0 To 0) As CFFLIST
            tgCffCntr(0).iStatus = -1 'Not Used
            tgCffCntr(0).lRecPos = 0
            tgCffCntr(0).iNextCff = -1
            ReDim tgCgfCntr(0 To 0) As CGFLIST
            tgCgfCntr(0).iStatus = -1 'Not Used
            tgCgfCntr(0).iNextCgf = -1
            ReDim tgMsfCntr(0 To 0) As MSFLIST
            tgMsfCntr(0).iStatus = -1 'Not Used
            tgMsfCntr(0).iFirstMgf = -1
            tgMsfCntr(0).iCxfIndex = -1
            ReDim tgMgfCntr(0 To 0) As MGFLIST
            tgMgfCntr(0).iStatus = -1 'Not Used
            ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
            tgLnAvailInfo(0).lNextIndex = -1
            ReDim sgMsfCntrCxf(0 To 0) As String
            ReDim smLnSave(0 To 29, 0 To UBound(tgClfCntr) + 1) As String
            ReDim imLnSave(0 To 35, 0 To UBound(tgClfCntr) + 1) As Integer
            ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
            ReDim lgDeletedPcfCode(0 To 0) As Long

        End If
        ReDim smTOVDSumValue(LBound(smTSumShow) To UBound(smTSumShow)) As String
        mTSummary ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), 8, False, ilCPPCPM, ilVefCode, ilVpfIndex, ilTerminate, ilChgMode, False, ilVehIndex, ilDPIndex, ilStep1Index, True, False
        ReDim smOVDSumValue(0 To 11, LBound(smVSumShow, 2) To UBound(smVSumShow, 2)) As String
        For ilLoop = LBound(smOVDSumValue, 1) To UBound(smOVDSumValue, 1) Step 1
            For ilIndex = LBound(smVSumShow, 2) To UBound(smVSumShow, 2) Step 1
                smOVDSumValue(ilLoop, ilIndex) = smVSumShow(ilLoop, ilIndex)
            Next ilIndex
        Next ilLoop
        'Reset values
        tgChfCntr = tmDiffChf
        ReDim tgClfCntr(LBound(tmDiffClf) To UBound(tmDiffClf)) As CLFLIST
        ReDim tgCffCntr(LBound(tmDiffCff) To UBound(tmDiffCff)) As CFFLIST
        ReDim tgCgfCntr(LBound(tmDiffCgf) To UBound(tmDiffCgf)) As CGFLIST
        ReDim tgMsfCntr(LBound(tmDiffMsf) To UBound(tmDiffMsf)) As MSFLIST
        ReDim tgMgfCntr(LBound(tmDiffMgf) To UBound(tmDiffMgf)) As MGFLIST
        ReDim tgLnAvailInfo(0 To 0) As LNAVAILINFO
        For ilLoop = LBound(tmDiffClf) To UBound(tmDiffClf) Step 1
            tgClfCntr(ilLoop) = tmDiffClf(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tmDiffCff) To UBound(tmDiffCff) Step 1
            tgCffCntr(ilLoop) = tmDiffCff(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tmDiffCgf) To UBound(tmDiffCgf) Step 1
            tgCgfCntr(ilLoop) = tmDiffCgf(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tmDiffMsf) To UBound(tmDiffMsf) Step 1
            tgMsfCntr(ilLoop) = tmDiffMsf(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tmDiffMgf) To UBound(tmDiffMgf) Step 1
            tgMgfCntr(ilLoop) = tmDiffMgf(ilLoop)
        Next ilLoop
        ReDim smLnSave(LBound(smSvLnSave, 1) To UBound(smSvLnSave, 1), LBound(smSvLnSave, 2) To UBound(smSvLnSave, 2)) As String
        ReDim imLnSave(0 To 1, LBound(imSvLnSave, 1) To UBound(imSvLnSave, 1), LBound(imSvLnSave, 2) To UBound(imSvLnSave, 2)) As Integer
        For ilLoop = LBound(smSvLnSave, 1) To UBound(smSvLnSave, 1) Step 1
            For ilIndex = LBound(smSvLnSave, 2) To UBound(smSvLnSave, 2) Step 1
                smLnSave(ilLoop, ilIndex) = smSvLnSave(ilLoop, ilIndex)
            Next ilIndex
        Next ilLoop
        For ilLoop = LBound(imSvLnSave, 1) To UBound(imSvLnSave, 1) Step 1
            For ilIndex = LBound(imSvLnSave, 2) To UBound(imSvLnSave, 2) Step 1
                imLnSave(ilLoop, ilIndex) = imSvLnSave(ilLoop, ilIndex)
            Next ilIndex
        Next ilLoop
        ReDim tgPackVeh(LBound(tmSvPackVeh) To UBound(tmSvPackVeh)) As PACKVEH
        ReDim tgPackDP(LBound(tmSvPackDP) To UBound(tmSvPackDP)) As PACKDP
        ReDim tgPackLn(LBound(tmSvPackLn) To UBound(tmSvPackLn)) As PACKLN
        For ilLoop = LBound(tmSvPackVeh) To UBound(tmSvPackVeh) Step 1
            tgPackVeh(ilLoop) = tmSvPackVeh(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tmSvPackDP) To UBound(tmSvPackDP) Step 1
            tgPackDP(ilLoop) = tmSvPackDP(ilLoop)
        Next ilLoop
        For ilLoop = LBound(tmSvPackLn) To UBound(tmSvPackLn) Step 1
            tgPackLn(ilLoop) = tmSvPackLn(ilLoop)
        Next ilLoop
        Erase tmDiffClf
        Erase tmDiffCff
        Erase tmDiffCgf
        Erase smSvLnSave
        Erase imSvLnSave
        Erase tmSvPackDP
        Erase tmSvPackDP
        Erase tmSvPackLn
        imOVDGenerated = False
    End If
End Sub

Function mLnDate(ilRowNo As Integer, slLnLLD As String, ilGetDayForDaily As Integer) As Long
    'ilGetDayForDaily: 0=Increment to Next Monday; 1=Increment by one day; 2= Don't increment
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilVehCode As Integer
    Dim slDate As String
    Dim llAllowedChgWkStartDate As Long
    'If (tgClfCntr(ilRowNo - 1).iStatus = 0) Or (ilRowNo = UBound(tgClfCntr) + 1) Or ((tgClfCntr(ilRowNo - 1).iStatus = 1) And (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus <> "F") And (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus <> "I")) Then 'new line
    If (tgClfCntr(ilRowNo - 1).iStatus = 0) Or (tgClfCntr(ilRowNo - 1).iLineSchd = False) Or (ilRowNo = UBound(tgClfCntr) + 1) Then  'new line
        mLnDate = 0
        Exit Function
    End If
    slNameCode = mGetLineType(ilRowNo)
    If (smLnSave(1, ilRowNo) = "") Or ((slNameCode = "O") Or (slNameCode = "A") Or (slNameCode = "E")) Then 'Test if Vehicle defined- if not use todays date
        slLnLLD = Format$(gNow(), "m/d/yy")
        '3/14/13: Use either unbilled date or todays date which is oldest
        If tgUrf(0).sChgCntr = "I" Then
            If (tgClfCntr(ilRowNo - 1).lUnbilledDate > 0) And (tgClfCntr(ilRowNo - 1).lUnbilledDate < gDateValue(slLnLLD)) Then
                slLnLLD = Format$(tgClfCntr(ilRowNo - 1).lUnbilledDate, "m/d/yy")
            End If
        End If
        If gWeekDayStr(slLnLLD) <> 6 Then
            'mLnDate = gDateValue(gObtainPrevMonday(slLnLLD))
            If imLnSave(8, ilRowNo) = 0 Then
                If ilGetDayForDaily = 1 Then
                    mLnDate = gDateValue(slLnLLD) + 1
                ElseIf ilGetDayForDaily = 2 Then
                    mLnDate = gDateValue(slLnLLD)
                Else
                    mLnDate = gDateValue(gObtainNextMonday(slLnLLD))
                End If
            Else
                mLnDate = gDateValue(gObtainPrevMonday(slLnLLD))
            End If
        Else
            mLnDate = gDateValue(slLnLLD) + 1
        End If
        Exit Function
    End If
    gFindMatch smLnSave(1, ilRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
        slLnLLD = Format$(gNow(), "m/d/yy")
        If gWeekDayStr(slLnLLD) <> 6 Then
            'mLnDate = gDateValue(gObtainPrevMonday(slLnLLD))
            If imLnSave(8, ilRowNo) = 0 Then
                If ilGetDayForDaily = 1 Then
                    mLnDate = gDateValue(slLnLLD) + 1
                ElseIf ilGetDayForDaily = 2 Then
                    mLnDate = gDateValue(slLnLLD)
                Else
                    mLnDate = gDateValue(gObtainNextMonday(slLnLLD))
                End If
            Else
                mLnDate = gDateValue(gObtainPrevMonday(slLnLLD))
            End If
        Else
            mLnDate = gDateValue(slLnLLD) + 1
        End If
        Exit Function
    End If
    'If gLastFound(lbcLnVehicle(igTabMapIndex)) < lbcVehicle.ListCount Then
        slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        If ilRet <> CP_MSG_NONE Then
            slLnLLD = Format$(gNow(), "m/d/yy")
            If gWeekDayStr(slLnLLD) <> 6 Then
                'mLnDate = gDateValue(gObtainPrevMonday(slLnLLD))
                If imLnSave(8, ilRowNo) = 0 Then
                    If ilGetDayForDaily = 1 Then
                        mLnDate = gDateValue(slLnLLD) + 1
                    ElseIf ilGetDayForDaily = 2 Then
                        mLnDate = gDateValue(slLnLLD)
                    Else
                        mLnDate = gDateValue(gObtainNextMonday(slLnLLD))
                    End If
                Else
                    mLnDate = gDateValue(gObtainPrevMonday(slLnLLD))
                End If
            Else
                mLnDate = gDateValue(slLnLLD) + 1
            End If
            Exit Function
        End If
        ilVehCode = CInt(slCode)
    'Else
    '    slNameCode = lbcCombo.List(gLastFound(lbcLnVehicle(igTabMapIndex)) - lbcVehicle.ListCount)
    '    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    '    If ilRet <> CP_MSG_NONE Then
    '        slLnLLD = Format$(gNow(), "m/d/yy")
    '        If gWeekDayStr(slLnLLD) <> 6 Then
    '            lmAllowedChgWkStartDate = gDateValue(gObtainPrevMonday(slLnLLD))
    '        Else
    '            lmAllowedChgWkStartDate = gDateValue(slLnLLD) + 1
    '        End If
    '        Exit Sub
    '    End If
    '    ilVehCode = -CInt(slCode)
    'End If
    slLnLLD = gFindVehicleLatestDate(Contract, ilVehCode)   'Get Todays date or Last Log Date
    If gWeekDayStr(slLnLLD) <> 6 Then
        If imLnSave(8, ilRowNo) = 0 Then
            If ilGetDayForDaily = 1 Then
                llAllowedChgWkStartDate = gDateValue(slLnLLD) + 1
            ElseIf ilGetDayForDaily = 2 Then
                llAllowedChgWkStartDate = gDateValue(slLnLLD)
            Else
                llAllowedChgWkStartDate = gDateValue(gObtainNextMonday(slLnLLD))
            End If
        Else
            llAllowedChgWkStartDate = gDateValue(gObtainPrevMonday(slLnLLD))
        End If
    Else
        llAllowedChgWkStartDate = gDateValue(slLnLLD) + 1
    End If
    'Allow weeks in past to be altered- lUnbilledDate set in mObtainLineFlags
    'If user is not allowed to change contracts in past, then lUnbilledDate will be set to zero (0)
    'If no unbilled spots in the past, then lUnbilledDate is set to zero (0)
    'Note: tgClf starting index is zero (0), smLnSave starting index is 1
    If (tgClfCntr(ilRowNo - 1).lUnbilledDate > 0) And (tgClfCntr(ilRowNo - 1).lUnbilledDate < llAllowedChgWkStartDate) Then
        slDate = Format$(tgClfCntr(ilRowNo - 1).lUnbilledDate, "m/d/yy")
        If imLnSave(8, ilRowNo) = 0 Then
            If ilGetDayForDaily = 1 Then
                mLnDate = gDateValue(slDate) + 1
            ElseIf ilGetDayForDaily = 2 Then
                mLnDate = gDateValue(slDate)
            Else
                mLnDate = gDateValue(gObtainNextMonday(slDate))
            End If
        Else
            mLnDate = gDateValue(gObtainPrevMonday(slDate))
        End If
    Else
        mLnDate = llAllowedChgWkStartDate
    End If
End Function

Sub mLnTotals(ilLnRowNo As Integer, ilLnTotalType As Integer, ilPRICEINDEX As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, slNoWkWDFlag As String, ilNoWkDays() As Integer)
    Dim ilCff As Integer
    'Dim llTotalPrice As Long
    Dim slTotalPrice As String
    Dim slWkPrice As String
    'Dim ilTotalSpots As Integer
    Dim llTotalSpots As Long
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llMoFlStartdate As Long
    Dim llPkStartDate As Long
    Dim llPkEndDate As Long
    Dim llDate As Long
    Dim slDate As String
    Dim llPrice As Long
    Dim ilSpots As Integer
    Dim ilDay As Integer
    Dim slLineType As String
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilIndex As Integer
    Dim ilFound As Integer
    Dim slStr As String
    Dim ilPkLnRowNo As Integer
    Dim llWkPrice As Long
    Dim ilWkSpots As Integer
    Dim ilRWkSpots As Integer
    Dim ilAddWk As Integer
    Dim llSpotPrice As Long
    Dim llPrevBilledDollars As Long
    'Dim ilPrevBilledSpots As Integer
    Dim llPrevBilledSpots As Long
    Dim ilCffIndex As Integer
    Dim ilLastCff As Integer
    Dim slPkLineType As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilVefCode As Integer
    Dim ilLp As Integer
    Dim ilVef As Integer
    Dim ilRet As Integer
    Dim ilAirWk As Integer
    Dim ilRated As Integer
    Dim ilAnyRated As Integer
    Dim ilRdfCode As Integer
    Dim llWkSpotPrice As Long
    Dim llWkAvgAud As Long
    Dim ilMnfDemo As Integer
    Dim llAvgAud As Long
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilMnfSocEco As Integer
    Dim ilNoAudLn As Integer
    Dim slStdPrice As String
    Dim ilStdPkg As Integer
    Dim slPriceType As String
    Dim ilBypassEPriceComp As Integer
    Dim llReallDate As Long
    Dim slBDate As String
    Dim llBDate As Long
    ReDim ilOVDays(0 To 6) As Integer  '0=Yes; 0=No; 2=Leave (Mix)
    ReDim ilDays(0 To 6) As Integer
    ReDim ilAudDays(0 To 6) As Integer
    Dim slWDFlag As String
    Dim llWkNoSpots As Long
    Dim ilPassDnfCode As Integer
    Dim llPopEst As Long
    ReDim ilDailySpots(0 To 6) As Integer
    ReDim ilSumDailySpots(0 To 6) As Integer
    Dim llRafCode As Long
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long

    If ilLnRowNo <= 0 Then
        Exit Sub
    End If
    ilBypassEPriceComp = imBypassEPriceComp
    ilLastCff = 0
    slLineType = mGetLineType(ilLnRowNo)
    If (igFreezeState = 1) And (slLineType = "H") Then
        Exit Sub
    End If
    'If (slLineType = "O") And (tgChfCntr.iPkageGenMeth = -1) Then
    '    tgChfCntr.iPkageGenMeth = tgSpf.iPkageGenMeth   '0=Week; 1=Line
    'ElseIf (slLineType = "A") And (tgChfCntr.iPkageGenMeth = -1) Then
    '    tgChfCntr.iPkageGenMeth = 0
    'ElseIf (slLineType = "E") And (tgChfCntr.iPkageGenMeth = -1) Then
    '    tgChfCntr.iPkageGenMeth = 0
    'End If
    'If (tgChfCntr.iPkageGenMeth = 0) Or (tgChfCntr.iPkageGenMeth = -1) Then
        igPackByWkAvg = True
    'Else
    '    igPackByWkAvg = False
    'End If
    If ((slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E")) Or (((slLineType = "O") Or (slLineType = "A") Or (slLineType = "E")) And (Not igPackByWkAvg)) Then
        'Compute # spots and Total Price
        'llTotalPrice = 0
        slTotalPrice = ".00"
        llTotalSpots = 0
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                llMoFlStartdate = llFlStartDate
                Do While gWeekDayLong(llMoFlStartdate) <> 0
                    llMoFlStartdate = llMoFlStartdate - 1
                Loop
                For llDate = llMoFlStartdate To llFlEndDate Step 7
                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        ilSpots = 0
                        For ilDay = 0 To 6 Step 1
                            If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                            End If
                        Next ilDay
                    Else
                        ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                    End If
                    Select Case tgCffCntr(ilCff).CffRec.sPriceType
                        Case "T"
                            llPrice = tgCffCntr(ilCff).CffRec.lActPrice
                        Case Else
                            llPrice = 0
                    End Select
                    'llTotalPrice = llTotalPrice + llPrice * ilSpots
                    If slLineType <> "E" Then
                        slWkPrice = gMulStr(gIntToStrDec(ilSpots, 0), gLongToStrDec(llPrice, 2))
                    Else
                        slWkPrice = gLongToStrDec(llPrice, 2)
                    End If
                    slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                    llTotalSpots = llTotalSpots + ilSpots
                Next llDate
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
        If (slLineType = "O") Or (slLineType = "A") Then
            'Recompute total price using the hidden lines
            'llTotalPrice = 0
            slTotalPrice = ".00"
            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                    ilIndex = tgPackLn(ilLoop).iIndex
                    Do While ilIndex >= 0
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                If Not tgClfCntr(ilClf).iCancel Then
                                    'llTotalPrice = llTotalPrice + gStrDecToLong(smLnSave(18, ilClf + 1), 2)
                                    slTotalPrice = gAddStr(slTotalPrice, smLnSave(18, ilClf + 1))
                                End If
                                Exit For
                            End If
                        Next ilClf
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                End If
            Next ilLoop
        End If
        smLnSave(18, ilLnRowNo) = slTotalPrice  'gLongToStrDec(llTotalPrice, 2)
        'imLnSave(11, ilLnRowNo) = ilTotalSpots
        smLnSave(23, ilLnRowNo) = Trim$(str$(llTotalSpots))
    End If
    If (slLineType = "O") Or (slLineType = "A") Or (slLineType = "E") Then
        slPkLineType = slLineType
        If igPackByWkAvg Then
            ilPkLnRowNo = ilLnRowNo
            '6/6/16:Replaced GoSub
            'GoSub AvgPkWk
            mAvgPkWk ilPkLnRowNo, slPkLineType, ilSumDailySpots(), ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots, slNoWkWDFlag, ilLastCff, slDate, ilAudDays(), ilBypassEPriceComp, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilNoWkDays(), tlRegionCode(), ilLnTotalType, ilPRICEINDEX
        Else
            ilPkLnRowNo = ilLnRowNo
            '6/6/16: Replaced GoSub
            'GoSub AvgPkLn
            mAvgPkLn ilPkLnRowNo, llPrevBilledDollars, llPrevBilledSpots, ilSpots, llPrice
        End If
        mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
    ElseIf slLineType = "H" Then
        'Find O Or A
        If igPackByWkAvg Then
            'Average by Week from Hidden Line
            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                    ilFound = False
                    ilIndex = tgPackLn(ilLoop).iIndex
                    Do While ilIndex >= 0
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                            ilFound = True
                            slPkLineType = tgPackLn(ilLoop).sType
                            Exit Do
                        End If
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                    If ilFound Then
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                ilPkLnRowNo = ilClf + 1
                                '6/6/16:Replaced GoSub
                                'GoSub AvgPkWk
                                mAvgPkWk ilPkLnRowNo, slPkLineType, ilSumDailySpots(), ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots, slNoWkWDFlag, ilLastCff, slDate, ilAudDays(), ilBypassEPriceComp, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilNoWkDays(), tlRegionCode(), ilLnTotalType, ilPRICEINDEX
                                mGetLnPriceInfo ilPkLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
                                '6/6/16: Replaced GoSub
                                'GoSub SetSPChg
                                mSetSPChg ilLnRowNo
                                Exit Sub
                            End If
                        Next ilClf
                    End If
                End If
            Next ilLoop
        Else
            'Average by Line from Hidden Line
            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                    ilFound = False
                    'llTotalPrice = 0
                    slTotalPrice = ".00"
                    ilIndex = tgPackLn(ilLoop).iIndex
                    Do While ilIndex >= 0
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                            ilFound = True
                        End If
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                'llTotalPrice = llTotalPrice + gStrDecToLong(smLnSave(18, ilClf + 1), 2)
                                slTotalPrice = gAddStr(slTotalPrice, smLnSave(18, ilClf + 1))
                                Exit For
                            End If
                        Next ilClf
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                    If ilFound Then
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                smLnSave(18, ilClf + 1) = slTotalPrice  'gLongToStrDec(llTotalPrice, 2)
                                ilPkLnRowNo = ilClf + 1
                                '6/6/16: Replaced GoSub
                                'GoSub AvgPkLn
                                mAvgPkLn ilPkLnRowNo, llPrevBilledDollars, llPrevBilledSpots, ilSpots, llPrice
                                mGetLnPriceInfo ilPkLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
                                '6/6/16: Replaced GoSub
                                'GoSub SetSPChg
                                mSetSPChg ilLnRowNo
                                Exit Sub
                            End If
                        Next ilClf
                    End If
                End If
            Next ilLoop
        End If
    End If
    '6/6/16: Replaced GoSub
    'GoSub SetSPChg
    mSetSPChg ilLnRowNo
    Exit Sub
'SetSPChg:
'    tgClfCntr(ilLnRowNo - 1).iSPChg = False
'    igLnSPChg = False
'    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'        If tgClfCntr(ilLoop).iSPChg Then
'            igLnSPChg = True
'            Exit For
'        End If
'    Next ilLoop
'    Return
'AvgPkWk:
'    slLineType = mGetLineType(ilPkLnRowNo)
'    mGetPkDates ilPkLnRowNo, llPkStartDate, llPkEndDate
'    'Compute week price from all hidden lines of the package, then set package line week price
'    llPkStartDate = gDateValue(gObtainPrevMonday(Format$(llPkStartDate, "m/d/yy")))
'    'If slLineType <> "E" Then
'    slStdPrice = ""
'    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
'        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
'            ilStdPkg = tgPackLn(ilLoop).iStdPkg
'            If ilStdPkg Then
'                ilVefCode = 0
'                For ilVef = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
'                    If StrComp(Trim$(smLnSave(1, ilPkLnRowNo)), Trim$(tgPackVeh(ilVef).sName), 1) = 0 Then
'                        ilVefCode = tgPackVeh(ilVef).iCode
'                        Exit For
'                    End If
'                Next ilVef
'                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                '    If tgMVef(ilVef).iCode = ilVefCode Then
'                    ilVef = gBinarySearchVef(ilVefCode)
'                    If ilVef <> -1 Then
'                        slStdPrice = tgMVef(ilVef).sStdPrice
'                        'Exit For
'                    End If
'                'Next ilVef
'            Else
'                If tgSpf.sCAudPkg = "Y" Then
'                    slStdPrice = "A"
'                End If
'            End If
'            Exit For
'        End If
'    Next ilLoop
'    'If using audience, but not using reallocation, then ignore audience as it is used
'    'only when yhidden first created
'    If slStdPrice = "A" Then
'        gUnpackDateLong tgSpf.iReallDate(0), tgSpf.iReallDate(1), llReallDate
'        If llReallDate <= 0 Then
'            slStdPrice = ""
'        End If
'    End If
'    If (slLineType <> "E") Then
'        ilBypassEPriceComp = False
'    End If
'    If (slLineType <> "E") And (slStdPrice <> "A") Then
'        For llDate = llPkStartDate To llPkEndDate Step 7
'            llWkPrice = 0
'            ilWkSpots = 0
'            For ilDay = 0 To 6 Step 1
'                ilSumDailySpots(ilDay) = 0
'            Next ilDay
'            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
'                If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
'                    ilIndex = tgPackLn(ilLoop).iIndex
'                    Do While ilIndex >= 0
'                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                                If Not tgClfCntr(ilClf).iCancel Then
'                                    ilCff = tgClfCntr(ilClf).iFirstCff
'                                    Do While ilCff <> -1
'                                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
'                                            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
'                                            llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                            llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                            If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
'                                                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                                    ilSpots = 0
'                                                    For ilDay = 0 To 6 Step 1
'                                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                                            ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                                            ilSumDailySpots(ilDay) = ilSumDailySpots(ilDay) + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                                        End If
'                                                    Next ilDay
'                                                Else
'                                                    ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                                End If
'                                                Select Case tgCffCntr(ilCff).CffRec.sPriceType
'                                                    Case "T"
'                                                        llPrice = tgCffCntr(ilCff).CffRec.lActPrice
'                                                    Case Else
'                                                        llPrice = 0
'                                                End Select
'                                                llWkPrice = llWkPrice + llPrice * ilSpots
'                                                ilWkSpots = ilWkSpots + ilSpots
'                                                Exit Do
'                                            End If
'                                        End If
'                                        ilCff = tgCffCntr(ilCff).iNextCff
'                                    Loop
'                                End If
'                                Exit For
'                            End If
'                        Next ilClf
'                        ilIndex = tgPackLn(ilIndex).iIndex
'                    Loop
'                End If
'            Next ilLoop
'            'Determine if week defined- if not add week
'            ilSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llSpotPrice)
'            If ilSpots <= 0 Then
'                ilAddWk = True
'                If slLineType = "A" Then
'                    If ilWkSpots > 0 Then
'                        ilSpots = ilWkSpots
'                    Else
'                        ilAddWk = False
'                    End If
'                Else
'                    If ilWkSpots > 0 Then
'                        ilSpots = 1
'                    Else
'                        ilAddWk = False
'                    End If
'                End If
'            Else
'                If slLineType = "A" Then
'                    If ilWkSpots > 0 Then
'                        If (ilSpots = ilWkSpots) And (llSpotPrice = llWkPrice / ilWkSpots) Then
'                            ilAddWk = False
'                        Else
'                            ilAddWk = True
'                            ilSpots = ilWkSpots
'                        End If
'                    Else
'                        'ilAddWk = False
'                        ilAddWk = True
'                        ilSpots = ilWkSpots
'                    End If
'                Else
'                    '11/14/08:  Package week spots retained even if all hidden line spots removed
'                    'If llSpotPrice = llWkPrice / ilSpots Then
'                    If (ilWkSpots > 0) And (llSpotPrice = llWkPrice / ilSpots) Then
'                        ilAddWk = False
'                    Else
'                        ilAddWk = True
'                        If ilWkSpots <= 0 Then
'                            ilSpots = 0
'                        End If
'                    End If
'                End If
'            End If
'            If ilAddWk Then
'                mGetFlightDays ilPkLnRowNo, ilOVDays()
'                mGetFlightDaysForDate ilPkLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
'                If slWDFlag = "" Then
'                    'No weeks exist, create from parameters
'                    If slNoWkWDFlag <> "N" Then
'                        slWDFlag = slNoWkWDFlag
'                        If slWDFlag = "D" Then
'                            For ilDay = 0 To 6 Step 1
'                                ilSumDailySpots(ilDay) = ilNoWkDays(ilDay)
'                                ilDailySpots(ilDay) = ilNoWkDays(ilDay)
'                            Next ilDay
'                        Else
'                            For ilDay = 0 To 6 Step 1
'                                ilDays(ilDay) = ilNoWkDays(ilDay)
'                            Next ilDay
'                        End If
'                    End If
'                End If
'                If slWDFlag = "D" Then
'                    If slLineType = "O" Then
'                        mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilSpots, ilDailySpots()
'                    Else
'                        mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilSpots, ilSumDailySpots()
'                    End If
'                    If (slLineType = "A") And (slWDFlag = "D") Then
'                        ilRet = mGetDailySpots(ilPkLnRowNo, llDate, ilSpots, ilSumDailySpots())
'                        For ilDay = 0 To 6 Step 1
'                            smLnSave(7 + ilDay, ilPkLnRowNo) = Trim$(str$(ilSumDailySpots(ilDay)))
'                        Next ilDay
'                    End If
'                Else
'                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilSpots, ilDays()
'                End If
'                'Add price
'                ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'                Do While ilCff <> -1
'                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
'                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
'                        llFlStartDate = tgCffCntr(ilCff).lStartDate
'                        llFlEndDate = tgCffCntr(ilCff).lEndDate
'                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                            tgCffCntr(ilCff).CffRec.sPriceType = "T"   '* used to indicate price needs to be set
'                            If ilSpots > 0 Then
'                                If slPkLineType <> "E" Then
'                                    tgCffCntr(ilCff).CffRec.lActPrice = llWkPrice / ilSpots 'Later- might want to store average package price
'                                Else
'                                    tgCffCntr(ilCff).CffRec.lActPrice = llWkPrice
'                                End If
'                            Else
'                                tgCffCntr(ilCff).CffRec.lActPrice = 0 'Later- might want to store average package price
'                            End If
'                            Exit Do
'                        End If
'                    End If
'                    ilCff = tgCffCntr(ilCff).iNextCff
'                Loop
'            End If
'        Next llDate
'    Else
'        ilMnfSocEco = 0
'        If Contract.lbcDemo(0).ListIndex >= 1 Then
'            slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey  'Traffic!lbcDemoCode.List(lbcDemo(ilLoop).ListIndex - 1)
'            ilRet = gParseItem(slNameCode, 2, "\", slCode)
'            ilMnfDemo = CInt(slCode)
'        Else
'            ilMnfDemo = 0
'        End If
'        If slStdPrice = "A" Then
'            gUnpackDateLong tgSpf.iReallDate(0), tgSpf.iReallDate(1), llReallDate
'            'If (Contract.lbcBillCycle.ListIndex = 1) Then   'Or (Contract.lbcBillCycle.ListIndex = 3) Then
'            '    gUnpackDate tgSpf.iBLastCalMnth(0), tgSpf.iBLastCalMnth(1), slBDate
'            '    If slBDate <> "" Then
'            '        slBDate = gObtainEndCal(slBDate)
'            '    End If
'            'Else
'            '    gUnpackDate tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), slBDate
'            '    If slBDate <> "" Then
'            '        slBDate = gObtainEndStd(slBDate)
'            '    End If
'            'End If
'            If (Contract.lbcBillCycle.ListIndex >= 0) And (Contract.lbcBillCycle.ListIndex <= 2) Then
'                slStr = Left(Contract.lbcBillCycle.List(Contract.lbcBillCycle.ListIndex), 1)
'                If slStr = "C" Then
'                    gUnpackDate tgSpf.iBLastCalMnth(0), tgSpf.iBLastCalMnth(1), slBDate
'                    If slBDate <> "" Then
'                        slBDate = gObtainEndCal(slBDate)
'                    End If
'                ElseIf slStr = "W" Then
'                    gUnpackDate tgSaf(0).iBLastWeeklyDate(0), tgSaf(0).iBLastWeeklyDate(1), slBDate
'                    If (slBDate <> "") And (gDateValue(slDate) <> gDateValue("1/1/1990")) Then
'                        slBDate = gObtainNextSunday(slDate)
'                    Else
'                        slBDate = ""
'                    End If
'                Else
'                    gUnpackDate tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), slBDate
'                    If slBDate <> "" Then
'                        slBDate = gObtainEndStd(slBDate)
'                    End If
'                End If
'            Else
'                slBDate = ""
'            End If
'            If Trim$(slBDate) <> "" Then
'                llBDate = gDateValue(slBDate)
'                If llBDate > llReallDate Then
'                    llReallDate = llBDate
'                End If
'            End If
'        Else
'            llReallDate = 0
'        End If
'        'Distribute Package price to hidden lines
'        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
'            If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
'                'gFindMatch smLnSave(1, ilPkLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
'                'If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
'                '    Exit For
'                'End If
'                'slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
'                'ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                'ilVefCode = CInt(slCode)
'                ilVefCode = 0
'                For ilVef = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
'                    If StrComp(Trim$(smLnSave(1, ilPkLnRowNo)), Trim$(tgPackVeh(ilVef).sName), 1) = 0 Then
'                        ilVefCode = tgPackVeh(ilVef).iCode
'                        Exit For
'                    End If
'                Next ilVef
'                'slStdPrice = ""
'                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                '    If tgMVef(ilVef).iCode = ilVefCode Then
'                '        slStdPrice = tgMVef(ilVef).sStdPrice
'                '        Exit For
'                '    End If
'                'Next ilVef
'                If Not tgClfCntr(ilPkLnRowNo - 1).iCancel Then
'                    For llDate = llPkStartDate To llPkEndDate Step 7
'                        ilAirWk = False
'                        llWkPrice = 0
'                        ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'                        Do While ilCff <> -1
'                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
'                                    ilAirWk = True
'                                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                        ilSpots = 0
'                                        For ilDay = 0 To 6 Step 1
'                                            If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                                ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                            End If
'                                        Next ilDay
'                                    Else
'                                        ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                    End If
'                                    Select Case tgCffCntr(ilCff).CffRec.sPriceType
'                                        Case "T"
'                                            llPrice = tgCffCntr(ilCff).CffRec.lActPrice
'                                        Case Else
'                                            llPrice = 0
'                                    End Select
'                                    llWkPrice = llPrice
'                                    llWkSpotPrice = ilSpots * llPrice
'                                    Exit Do
'                                End If
'                            End If
'                            ilCff = tgCffCntr(ilCff).iNextCff
'                        Loop
'                        If (slStdPrice = "A") And (llDate < llReallDate) Then
'                            ilAirWk = False
'                        End If
'                        If ilAirWk Then
'                            ilWkSpots = 0
'                            ilRWkSpots = 0
'                            llWkAvgAud = 0
'                            ilNoAudLn = 0
'                            ilAnyRated = False
'                            ilIndex = tgPackLn(ilLoop).iIndex
'                            Do While ilIndex >= 0
'                                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'                                    If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                                        If Not tgClfCntr(ilClf).iCancel Then
'
'                                            gFindMatch smLnSave(1, ilClf + 1), 0, Contract.lbcLnVehicle(igTabMapIndex)
'                                            If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
'                                                Exit For
'                                            End If
'                                            slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
'                                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                                            ilVefCode = CInt(slCode)
'                                            ilRdfCode = imLnSave(1, ilClf + 1)
'                                            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                                            '    gFindMatch smLnSave(1, ilPkLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
'                                            '    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
'                                            '        Exit For
'                                            '    End If
'                                            '    slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
'                                            '    ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                                            '    ilVefCode = CInt(slCode)
'                                            'Next ilVef
'
'                                            ilCff = tgClfCntr(ilClf).iFirstCff
'                                            Do While ilCff <> -1
'                                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                                    llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                                    llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                                    If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
'                                                        ilNoAudLn = ilNoAudLn + 1
'                                                        For ilDay = 0 To 6 Step 1
'                                                            ilAudDays(ilDay) = False
'                                                        Next ilDay
'                                                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                                            ilSpots = 0
'                                                            For ilDay = 0 To 6 Step 1
'                                                                If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                                                    ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                                                    If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
'                                                                        ilAudDays(ilDay) = True
'                                                                    End If
'                                                                End If
'                                                            Next ilDay
'                                                        Else
'                                                            ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                                            For ilDay = 0 To 6 Step 1
'                                                                If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
'                                                                    ilAudDays(ilDay) = True
'                                                                End If
'                                                            Next ilDay
'                                                        End If
'                                                        ilWkSpots = ilWkSpots + ilSpots
'                                                        If Not ilBypassEPriceComp Then
'                                                            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                                                            '    If tgMVef(ilVef).iCode = ilVefCode Then
'                                                                ilVef = gBinarySearchVef(ilVefCode)
'                                                                If ilVef <> -1 Then
'                                                                    If tgMVef(ilVef).iMnfVehGp5Rsch > 0 Then
'                                                                        For ilLp = LBound(tmRatedGp) To UBound(tmRatedGp) - 1 Step 1
'                                                                            If tgMVef(ilVef).iMnfVehGp5Rsch = tmRatedGp(ilLp).iMnfVehGp5Rsch Then
'                                                                                If tmRatedGp(ilLp).sRated <> "Y" Then
'                                                                                    ilSpots = 0
'                                                                                Else
'                                                                                    ilAnyRated = True
'                                                                                End If
'                                                                                Exit For
'                                                                            End If
'                                                                        Next ilLp
'                                                                    End If
'                                                                    'Exit For
'                                                                End If
'                                                            'Next ilVef
'                                                        End If
'                                                        ilRWkSpots = ilRWkSpots + ilSpots
'                                                        'If using Audience for distribution- get values
'                                                        If slStdPrice = "A" Then
'                                                            llAvgAud = 0
'                                                            llOvStartTime = 0
'                                                            llOvEndTime = 0
'                                                            If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (tgCffCntr(ilCff).CffRec.sPriceType = "*") Then
'                                                                If (imLnSave(4, ilClf + 1) = 1) Then
'                                                                    llOvStartTime = gTimeToLong(smLnSave(2, ilClf + 1), False)
'                                                                    llOvEndTime = gTimeToLong(smLnSave(3, ilClf + 1), True)
'                                                                End If
'                                                                If tgSpf.iReallMnfDemo <= 0 Then
'                                                                    'If tgClfCntr(ilClf).ClfRec.iDnfCode > 0 Then
'                                                                    '    If (ilMnfDemo > 0) Then
'                                                                    '        ilRet = gGetDemoAvgAud(hlDrf, hlMnf, tgClfCntr(ilClf).ClfRec.iDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, ilRdfCode, llOvStartTime, llOvEndTime, ilAudDays(), llAvgAud)
'                                                                    '    End If
'                                                                    'Else
'                                                                        'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                                                                        '    If tgMVef(ilVef).iCode = ilVefCode Then
'                                                                            ilVef = gBinarySearchVef(ilVefCode)
'                                                                            If ilVef <> -1 Then
'                                                                                If (tgMVef(ilVef).iReallDnfCode > 0) And (ilMnfDemo > 0) Then
'                                                                                    ilPassDnfCode = tgMVef(ilVef).iReallDnfCode
'                                                                                    slStr = mGetLineType(ilClf + 1)
'                                                                                    llRafCode = mGetRafCode(ilClf + 1, tlRegionCode())
'                                                                                    ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilPassDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilAudDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
'                                                                                End If
'                                                                                'Exit For
'                                                                            End If
'                                                                        'Next ilVef
'                                                                    'End If
'                                                                Else
'                                                                    'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                                                                    '    If tgMVef(ilVef).iCode = ilVefCode Then
'                                                                        ilVef = gBinarySearchVef(ilVefCode)
'                                                                        If ilVef <> -1 Then
'                                                                            If (tgMVef(ilVef).iReallDnfCode > 0) And (tgSpf.iReallMnfDemo > 0) Then
'                                                                                ilPassDnfCode = tgMVef(ilVef).iReallDnfCode
'                                                                                slStr = mGetLineType(ilClf + 1)
'                                                                                llRafCode = mGetRafCode(ilClf + 1, tlRegionCode())
'                                                                                ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilPassDnfCode, ilVefCode, ilMnfSocEco, tgSpf.iReallMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilAudDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
'                                                                            End If
'                                                                            'Exit For
'                                                                        End If
'                                                                    'Next ilVef
'                                                                End If
'                                                            Else
'                                                                ilNoAudLn = ilNoAudLn - 1
'                                                                ilWkSpots = ilWkSpots - ilSpots
'                                                                ilRWkSpots = ilRWkSpots - ilSpots
'                                                            End If
'                                                            tgCffCntr(ilCff).lAvgAud = llAvgAud
'                                                            llWkAvgAud = llWkAvgAud + ilSpots * llAvgAud
'                                                        End If
'                                                        Exit Do
'                                                    End If
'                                                End If
'                                                ilCff = tgCffCntr(ilCff).iNextCff
'                                            Loop
'                                        End If
'                                        Exit For
'                                    End If
'                                Next ilClf
'                                ilIndex = tgPackLn(ilIndex).iIndex
'                            Loop
'                            If (Not ilAnyRated) Then
'                                If llWkPrice > 0 Then
'                                    ilRWkSpots = ilWkSpots
'                                Else
'                                    ilAnyRated = True
'                                End If
'                            End If
'
'                            ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'                            Do While ilCff <> -1
'                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                    slPriceType = tgCffCntr(ilCff).CffRec.sPriceType
'                                    llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                    llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                    If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
'                                        'Test if week needs to be added
'                                        If (slLineType = "O") Then
'                                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                                ilSpots = 0
'                                                For ilDay = 0 To 6 Step 1
'                                                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                                        ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                                    End If
'                                                Next ilDay
'                                            Else
'                                                ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                            End If
'                                        End If
'                                        If llFlStartDate + 6 < llFlEndDate Then
'                                            mGetFlightDays ilPkLnRowNo, ilOVDays()
'                                            mGetFlightDaysForDate ilPkLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
'                                            'mAddWeek ilLastCff, ilPkLnRowNo, llDate, ilWkSpots, ilDays()
'                                            If (slLineType = "O") And (ilSpots > 0) Then
'                                                If slWDFlag = "D" Then
'                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilSpots, ilDailySpots()
'                                                Else
'                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilSpots, ilDays()
'                                                End If
'                                            Else
'                                                If slWDFlag = "D" Then
'                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilWkSpots, ilDailySpots()
'                                                Else
'                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, ilWkSpots, ilDays()
'                                                End If
'                                            End If
'                                        End If
'                                        ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'                                        Do While ilCff <> -1
'                                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                                llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                                llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                                                    If slPriceType = "*" Then
'                                                        tgCffCntr(ilCff).CffRec.sPriceType = "T"
'                                                    Else
'                                                        tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
'                                                    End If
'                                                    If ilWkSpots > 0 Then
'                                                        tgCffCntr(ilCff).CffRec.lActPrice = llWkPrice
'                                                    Else
'                                                        tgCffCntr(ilCff).CffRec.lActPrice = 0
'                                                    End If
'                                                    'tgCffCntr(ilCff).CffRec.iSpotsWk = ilWkSpots
'                                                    If (slLineType = "O") And (ilSpots > 0) Then
'                                                        tgCffCntr(ilCff).CffRec.iSpotsWk = ilSpots
'                                                    Else
'                                                        tgCffCntr(ilCff).CffRec.iSpotsWk = ilWkSpots
'                                                    End If
'                                                    Exit Do
'                                                End If
'                                            End If
'                                            ilCff = tgCffCntr(ilCff).iNextCff
'                                        Loop
'                                        Exit Do
'                                    End If
'                                End If
'                                ilCff = tgCffCntr(ilCff).iNextCff
'                            Loop
'                            If Not ilBypassEPriceComp Then
'                                ilIndex = tgPackLn(ilLoop).iIndex
'                                Do While ilIndex >= 0
'                                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
'                                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
'                                            If Not tgClfCntr(ilClf).iCancel Then
'
'                                                gFindMatch smLnSave(1, ilClf + 1), 0, Contract.lbcLnVehicle(igTabMapIndex)
'                                                If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
'                                                    Exit For
'                                                End If
'                                                slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
'                                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                                                ilVefCode = CInt(slCode)
'                                                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                                                '    gFindMatch smLnSave(1, ilPkLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
'                                                '    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
'                                                '        Exit For
'                                                '    End If
'                                                '    slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
'                                                '    ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                                                '    ilVefCode = CInt(slCode)
'                                                'Next ilVef
'
'                                                ilCff = tgClfCntr(ilClf).iFirstCff
'                                                Do While ilCff <> -1
'                                                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                                        llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                                        llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                                        slPriceType = tgCffCntr(ilCff).CffRec.sPriceType
'                                                        If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
'                                                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                                                                ilSpots = 0
'                                                                For ilDay = 0 To 6 Step 1
'                                                                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                                                                        ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                                                                    End If
'                                                                Next ilDay
'                                                            Else
'                                                                ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                                                            End If
'                                                            ilRated = True
'                                                            If ilAnyRated Then
'                                                                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
'                                                                '    If tgMVef(ilVef).iCode = ilVefCode Then
'                                                                    ilVef = gBinarySearchVef(ilVefCode)
'                                                                    If ilVef <> -1 Then
'                                                                        If tgMVef(ilVef).iMnfVehGp5Rsch > 0 Then
'                                                                            For ilLp = LBound(tmRatedGp) To UBound(tmRatedGp) - 1 Step 1
'                                                                                If tgMVef(ilVef).iMnfVehGp5Rsch = tmRatedGp(ilLp).iMnfVehGp5Rsch Then
'                                                                                    If tmRatedGp(ilLp).sRated <> "Y" Then
'                                                                                        ilRated = False
'                                                                                    End If
'                                                                                    Exit For
'                                                                                End If
'                                                                            Next ilLp
'                                                                        End If
'                                                                        'Exit For
'                                                                    End If
'                                                                'Next ilVef
'                                                            End If
'                                                            If slStdPrice = "A" Then
'                                                                If (slPriceType = "T") Or (slPriceType = "*") Then
'                                                                    If (ilRated) And (llWkAvgAud > 0) Then
'                                                                        llSpotPrice = (CSng(llWkSpotPrice) * tgCffCntr(ilCff).lAvgAud) / llWkAvgAud
'                                                                    ElseIf (ilRated) And (llWkAvgAud = 0) And (ilRWkSpots > 0) Then
'                                                                        'Distribute evenly
'                                                                        llSpotPrice = llWkSpotPrice / ilRWkSpots
'                                                                    Else
'                                                                        llSpotPrice = 0
'                                                                    End If
'                                                                Else
'                                                                    llSpotPrice = 0
'                                                                End If
'                                                            Else
'                                                                If (ilRated) And (ilRWkSpots > 0) Then
'                                                                    llSpotPrice = llWkPrice / ilRWkSpots
'                                                                Else
'                                                                    llSpotPrice = 0
'                                                                End If
'                                                            End If
'                                                            'Test if week needs to be added
'                                                            If llFlStartDate + 6 >= llFlEndDate Then
'                                                                If slPriceType = "*" Then
'                                                                    tgCffCntr(ilCff).CffRec.sPriceType = "T"
'                                                                Else
'                                                                    tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
'                                                                End If
'                                                                tgCffCntr(ilCff).CffRec.lActPrice = llSpotPrice
'                                                            Else
'                                                                'Add Week
'                                                                mGetFlightDays ilClf + 1, ilOVDays()
'                                                                mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
'                                                                If slWDFlag = "D" Then
'                                                                    mAddWeek ilLastCff, ilClf + 1, llDate, slWDFlag, ilSpots, ilDailySpots()
'                                                                Else
'                                                                    mAddWeek ilLastCff, ilClf + 1, llDate, slWDFlag, ilSpots, ilDays()
'                                                                End If
'                                                                ilCff = tgClfCntr(ilClf).iFirstCff
'                                                                Do While ilCff <> -1
'                                                                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                                                                        llFlStartDate = tgCffCntr(ilCff).lStartDate
'                                                                        llFlEndDate = tgCffCntr(ilCff).lEndDate
'                                                                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                                                                            If slPriceType = "*" Then
'                                                                                tgCffCntr(ilCff).CffRec.sPriceType = "T"
'                                                                            Else
'                                                                                tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
'                                                                            End If
'                                                                            tgCffCntr(ilCff).CffRec.lActPrice = llSpotPrice
'                                                                            Exit Do
'                                                                        End If
'                                                                    End If
'                                                                    ilCff = tgCffCntr(ilCff).iNextCff
'                                                                Loop
'                                                            End If
'                                                            mInitLnTotals ilClf + 1, ilLnTotalType, ilPRICEINDEX
'                                                            Exit Do
'                                                        End If
'                                                    End If
'                                                    ilCff = tgCffCntr(ilCff).iNextCff
'                                                Loop
'                                            End If
'                                            Exit For
'                                        End If
'                                    Next ilClf
'                                    ilIndex = tgPackLn(ilIndex).iIndex
'                                Loop
'                            End If
'                        End If
'                    Next llDate
'                End If
'                Exit For
'            End If
'        Next ilLoop
'    End If
'    'llTotalPrice = 0
'    slTotalPrice = ".00"
'    llTotalSpots = 0
'    ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'    Do While ilCff <> -1
'        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
'            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
'            llFlStartDate = tgCffCntr(ilCff).lStartDate
'            llFlEndDate = tgCffCntr(ilCff).lEndDate
'            llMoFlStartdate = llFlStartDate
'            Do While gWeekDayLong(llMoFlStartdate) <> 0
'                llMoFlStartdate = llMoFlStartdate - 1
'            Loop
'            For llDate = llMoFlStartdate To llFlEndDate Step 7
'                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                    ilSpots = 0
'                    For ilDay = 0 To 6 Step 1
'                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
'                            ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                        End If
'                    Next ilDay
'                Else
'                    ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                End If
'                Select Case tgCffCntr(ilCff).CffRec.sPriceType
'                    Case "T"
'                        llPrice = tgCffCntr(ilCff).CffRec.lActPrice
'                    Case Else
'                        llPrice = 0
'                End Select
'                'llTotalPrice = llTotalPrice + llPrice * ilSpots
'                If mGetPkLineType(ilPkLnRowNo) <> "E" Then
'                    slWkPrice = gMulStr(gIntToStrDec(ilSpots, 0), gLongToStrDec(llPrice, 2))
'                Else
'                    slWkPrice = gLongToStrDec(llPrice, 2)
'                End If
'                slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
'                llTotalSpots = llTotalSpots + ilSpots
'            Next llDate
'        End If
'        ilCff = tgCffCntr(ilCff).iNextCff
'    Loop
'    smLnSave(18, ilPkLnRowNo) = slTotalPrice    'gLongToStrDec(llTotalPrice, 2)
'    'imLnSave(11, ilPkLnRowNo) = ilTotalSpots
'    smLnSave(23, ilPkLnRowNo) = Trim$(str$(llTotalSpots))
'    Return
'AvgPkLn:
'    slLineType = mGetLineType(ilPkLnRowNo)
'    mGetPkDates ilPkLnRowNo, llPkStartDate, llPkEndDate
'    'Compute week price from all hidden lines of the package, then set package line week price
'    llPkStartDate = gDateValue(gObtainPrevMonday(Format$(llPkStartDate, "m/d/yy")))
'    llPrevBilledDollars = 0
'    llPrevBilledSpots = 0
'    For llDate = llPkStartDate To tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate Step 7
'        ilSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llPrice)
'        llPrevBilledSpots = llPrevBilledSpots + ilSpots
'        llPrevBilledDollars = llPrevBilledDollars + ilSpots * llPrice
'    Next llDate
'    For llDate = llPkStartDate To llPkEndDate Step 7
'        If llDate > tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate Then
'            ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
'            Do While ilCff <> -1
'                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
'                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
'                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
'                    llFlStartDate = tgCffCntr(ilCff).lStartDate
'                    llFlEndDate = tgCffCntr(ilCff).lEndDate
'                    If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
'                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
'                            ilSpots = 0
'                            For ilDay = 0 To 6 Step 1
'                                ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
'                            Next ilDay
'                        Else
'                            ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
'                        End If
'                        If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (Trim$(tgCffCntr(ilCff).CffRec.sPriceType) = "") Or (Trim$(tgCffCntr(ilCff).CffRec.sPriceType) = "*") Then
'                            'Test if flight must be split-
'                            If llFlStartDate <= tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate Then
'                                'Split flight- If calendar bill, it might need to be split if end date is not sunday- do later
'                                ilCffIndex = UBound(tgCffCntr)
'                                tgCffCntr(ilCffIndex) = tgCffCntr(ilCff)
'                                tgCffCntr(ilCffIndex).iStatus = 0
'                                tgCffCntr(ilCffIndex).lRecPos = 0
'                                tgCffCntr(ilCff).iNextCff = ilCffIndex
'                                ReDim Preserve tgCffCntr(0 To UBound(tgCffCntr) + 1) As CFFLIST
'                                tgCffCntr(UBound(tgCffCntr)).iStatus = -1 'Not Used
'                                tgCffCntr(UBound(tgCffCntr)).lRecPos = 0
'                                tgCffCntr(UBound(tgCffCntr)).iNextCff = -1
'                                slDate = gObtainNextSunday(Format$(tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate, "m/d/yy"))
'                                gPackDate slDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)   'Week Start date
'                                tgCffCntr(ilCff).lEndDate = gDateValue(slDate)
'                                slDate = gObtainNextMonday(slDate)
'                                gPackDate slDate, tgCffCntr(ilCffIndex).CffRec.iStartDate(0), tgCffCntr(ilCffIndex).CffRec.iStartDate(1)   'Week Start date
'                                tgCffCntr(ilCffIndex).lStartDate = gDateValue(slDate)
'                                ilCff = ilCffIndex
'                            End If
'                            'If (imLnSave(11, ilPkLnRowNo) > 0) And (ilSpots > 0) Then
'                            If (Val(smLnSave(23, ilPkLnRowNo)) > 0) And (ilSpots > 0) Then
'                                'If imLnSave(11, ilPkLnRowNo) <> ilPrevBilledSpots Then
'                                If Val(smLnSave(23, ilPkLnRowNo)) <> llPrevBilledSpots Then
'                                    'tgCffCntr(ilCff).CffRec.lActPrice = (gStrDecToLong(smLnSave(18, ilPkLnRowNo), 2) - llPrevBilledDollars) / (imLnSave(11, ilPkLnRowNo) - ilPrevBilledSpots) '+ .5
'                                    tgCffCntr(ilCff).CffRec.lActPrice = (gStrDecToLong(smLnSave(18, ilPkLnRowNo), 2) - llPrevBilledDollars) / (Val(smLnSave(23, ilPkLnRowNo)) - llPrevBilledSpots) '+ .5
'                                Else
'                                    tgCffCntr(ilCff).CffRec.lActPrice = 0
'                                End If
'                                If tgCffCntr(ilCff).CffRec.lActPrice < 0 Then
'                                    tgCffCntr(ilCff).CffRec.lActPrice = 0
'                                End If
'                            Else
'                                tgCffCntr(ilCff).CffRec.lActPrice = 0
'                            End If
'                            tgCffCntr(ilCff).CffRec.sPriceType = "T"
'                        End If
'                        Exit Do
'                    End If
'                End If
'                ilCff = tgCffCntr(ilCff).iNextCff
'            Loop
'        End If
'    Next llDate
'    Return
End Sub

Function mMakeDPName(ilLnRowNo As Integer) As String
    Dim ilBoxNo As Integer
    ReDim ilFlDays(0 To 6) As Integer
    ilBoxNo = -1
    mGetFlightDays ilLnRowNo, ilFlDays()
    mMakeDPName = mSetDPShowName(ilLnRowNo, ilBoxNo, ilFlDays())
End Function

Function mMakePrgName(ilRdfCode As Integer) As String
'
'   ilRdfCode(I)- Rdf Code
'
    Dim slStr As String
    Dim ilRdf As Integer
    'mAvailPop   'Use list box to obtain avail names without reading disk
    slStr = ""
    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) Step 1
    '    If ilRdfCode = tgMRdf(ilRdf).iCode Then
        ilRdf = gBinarySearchRdf(ilRdfCode)
        If ilRdf <> -1 Then
            slStr = Trim$(tgMRdf(ilRdf).sName)
            'If tgMRdf(ilRdf).sInOut = "I" Then 'Book into avail
            '    slRecCode = Trim$(Str$(tgMRdf(ilRdf).iAnfCode))
            '    For ilTest = 0 To Contract.lbcAvailCode.ListCount - 1 Step 1
            '        slNameCode = Contract.lbcAvailCode.List(ilTest)
            '        ilRet = gParseItem(slNameCode, 2, "\", slCode)
            '        If (slRecCode = slCode) And (ilRet = CP_MSG_NONE) Then
            '            ilRet = gParseItem(slNameCode, 1, "\", slName)
            '            If ilRet = CP_MSG_NONE Then
            '                slStr = slStr & "/" & Trim$(slName)
            '            End If
            '            Exit For
            '        End If
            '    Next ilTest
            'End If
            'For ilLoop = 1 To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1 'Row
            '    If (tgMRdf(ilRdf).iStartTime(0, ilLoop) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilLoop) <> 0) Then
            '        gUnpackTime tgMRdf(ilRdf).iStartTime(0, ilLoop), tgMRdf(ilRdf).iStartTime(1, ilLoop), "A", "1", slTime
            '        If slTime <> "" Then
            '            slTime = gFormatTime(slTime, "A", "1")
            '        End If
            '        If Len(slStr) = Len(Trim$(tgMRdf(ilRdf).sName)) Then
            '            slStr = slStr & "   " & slTime
            '        Else
            '            slStr = slStr & ", " & slTime
            '        End If
            '        gUnpackTime tgMRdf(ilRdf).iEndTime(0, ilLoop), tgMRdf(ilRdf).iEndTime(1, ilLoop), "A", "1", slTime
            '        If slTime <> "" Then
            '            slTime = gFormatTime(slTime, "A", "1")
            '        End If
            '        slStr = slStr & " " & slTime
            '        ilDayIndex = 0
            '        slDays = ""
            '        Do
            '            ilDayStart = -1
            '            For ilDay = ilDayIndex To 6 Step 1
            '                If tgMRdf(ilRdf).sWkDays(ilLoop, ilDay + 1) = "Y" Then
            '                    If ilDayStart = -1 Then
            '                        ilDayStart = ilDay
            '                        ilDayEnd = ilDay
            '                    Else
            '                        ilDayEnd = ilDay
            '                    End If
            '                Else
            '                    If ilDayStart <> -1 Then
            '                        Exit For
            '                    End If
            '                End If
            '            Next ilDay
            '            If ilDayStart <> -1 Then
            '                If ilDayStart + 2 <= ilDayEnd Then
            '                    If slDays <> "" Then
            '                        slDays = slDays & ","
            '                    End If
            '                    slDays = slDays & Contract.lbcDay.List(ilDayStart) & "-" & Contract.lbcDay.List(ilDayEnd)
            '                Else
            '                    For ilDay = ilDayStart To ilDayEnd Step 1
            '                        If slDays = "" Then
            '                            slDays = Contract.lbcDay.List(ilDay)
            '                        Else
            '                            slDays = slDays & "," & Contract.lbcDay.List(ilDay)
            '                        End If
            '                    Next ilDay
            '                End If
            '                ilDayIndex = ilDayEnd + 1
            '            Else
            '                ilDayIndex = 7
            '            End If
            '        Loop Until ilDayIndex > 6
            '        slStr = slStr & " " & slDays
            '    End If
            'Next ilLoop
            mMakePrgName = slStr
            Exit Function
        End If
    'Next ilRdf
    mMakePrgName = slStr
    Exit Function
End Function

Function mMakePrgSort(llRif As Long, ilRdf As Integer) As String
'
'   ilRdf(I)- Rdf Index into tgMRdf
'
    Dim ilRow As Integer
    Dim slStr As String
    Dim ilTime As Integer
    Dim ilIndex As Integer
    Dim llSec As Long
    Dim llMin As Long
    Dim llHour As Long
    Dim llTime As Long
    Dim slTime As String
    If llRif >= 0 Then
        If (tgMRif(llRif).sBase = "Y") Or (tgMRif(llRif).sBase = "N") Then
            slStr = Trim$(str$(tgMRif(llRif).iSort))
        Else
            slStr = Trim$(str$(tgMRdf(ilRdf).iSortCode))
        End If
    Else
        slStr = Trim$(str$(tgMRdf(ilRdf).iSortCode))
    End If
    Do While Len(slStr) < 3
        slStr = "0" & slStr
    Loop
    ilTime = LBound(tgMRdf(ilRdf).iStartTime, 2)    '1
    For ilRow = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1 'Row
        If (tgMRdf(ilRdf).iStartTime(0, ilRow) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilRow) <> 0) Then
            ilTime = ilRow
            For ilIndex = 1 To 7 Step 1
                If tgMRdf(ilRdf).sWkDays(ilTime, ilIndex - 1) <> "Y" Then
                    slStr = slStr & "B"
                Else
                    slStr = slStr & "A"
                End If
            Next ilIndex
            Exit For
        End If
    Next ilRow
    llSec = tgMRdf(ilRdf).iStartTime(0, ilTime) \ 256 'Obtain seconds
    llMin = tgMRdf(ilRdf).iStartTime(1, ilTime) And &HFF 'Obtain Minutes
    llHour = tgMRdf(ilRdf).iStartTime(1, ilTime) \ 256 'Obtain month
    llTime = 3600 * llHour + 60 * llMin + llSec
    slTime = Trim$(str$(llTime))
    Do While (Len(slTime) < 5)
        slTime = "0" & slTime
    Loop
    slStr = slStr & slTime
    slStr = slStr & "|" & Trim$(str$(tgMRdf(ilRdf).iCode))
    mMakePrgSort = slStr
End Function

Sub mMoveLnRecToCtrl(ilTerminate As Integer, tlRegionCode() As SORTCODE)
'
'   mMoveLnRecToCtrl
'   Where:
'
    Dim ilLoop As Integer
    Dim ilTest As Integer
    Dim slRecCode As String
    Dim slNameCode As String
    Dim slName As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilDay As Integer
    Dim ilCff As Integer
    Dim ilIndex As Integer
    Dim slLineType As String
    Dim ilVef As Integer
    Dim ilRdf As Integer
    ReDim ilAllowedDays(0 To 6) As Integer
    For ilLoop = 0 To UBound(tgClfCntr) - 1 Step 1
        For ilIndex = LBound(smLnSave, FIELDBOUNDINDEX) To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
            smLnSave(ilIndex, ilLoop + 1) = ""
        Next ilIndex
        For ilIndex = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            imLnSave(ilIndex, ilLoop + 1) = -1
        Next ilIndex
        'If tgClfCntr(ilLoop).ClfRec.iVefCode >= 0 Then
        slLineType = mGetLineType(ilLoop + 1)
        If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
            slRecCode = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iVefCode))
            For ilTest = 0 To UBound(tmVehicleCode) - 1 Step 1  'lbcVehicle.ListCount - 1 Step 1
                slNameCode = tmVehicleCode(ilTest).sKey    'lbcVehicle.List(ilTest)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                On Error GoTo mMoveLnRecToCtrlErr
                gCPErrorMsg ilRet, "mMoveLnRecToCtrl (gParseItem field 2)", Contract
                On Error GoTo 0
                If slRecCode = slCode Then
                    ilRet = gParseItem(slNameCode, 1, "\", slName)
                    ilRet = gParseItem(slName, 3, "|", smLnSave(1, ilLoop + 1))
                    On Error GoTo mMoveLnRecToCtrlErr
                    gCPErrorMsg ilRet, "mMoveLnRecToCtrl (gParseItem field 2)", Contract
                    On Error GoTo 0
                    Exit For
                End If
            Next ilTest
        Else
            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            '    If tgClfCntr(ilLoop).ClfRec.iVefCode = tgMVef(ilVef).iCode Then
                ilVef = gBinarySearchVef(tgClfCntr(ilLoop).ClfRec.iVefCode)
                If ilVef <> -1 Then
                    smLnSave(1, ilLoop + 1) = Trim$(tgMVef(ilVef).sName)
                    'Exit For
                End If
            'Next ilVef
        End If
        If (slLineType <> "A") And (slLineType <> "O") And (slLineType <> "E") Then
            imLnSave(1, ilLoop + 1) = tgClfCntr(ilLoop).ClfRec.iRdfCode
        Else
            'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) Step 1
            '    If tgClfCntr(ilLoop).ClfRec.iRdfcode = tgMRdf(ilRdf).iCode Then
                ilRdf = gBinarySearchRdf(tgClfCntr(ilLoop).ClfRec.iRdfCode)
                If ilRdf <> -1 Then
                    smLnSave(20, ilLoop + 1) = Trim$(tgMRdf(ilRdf).sName)
            '        Exit For
                End If
            'Next ilRdf
        End If
        Select Case tgClfCntr(ilLoop).ClfRec.sBB
            Case "N"    'N/A
                imLnSave(3, ilLoop + 1) = 0
            Case "O"    'Open
                imLnSave(3, ilLoop + 1) = 1
            Case "C"    'Close
                imLnSave(3, ilLoop + 1) = 2
            Case "B"    'Open & Close
                imLnSave(3, ilLoop + 1) = 3
            Case "E"    'Any
                imLnSave(3, ilLoop + 1) = 4
            Case "1"    '1 Open/Week
                imLnSave(3, ilLoop + 1) = 5
            Case "2"    '1 Close/Week
                imLnSave(3, ilLoop + 1) = 6
            Case "4"    '1 Open & Close/Week
                imLnSave(3, ilLoop + 1) = 7
            Case "5"    '1 Any/Week
                imLnSave(3, ilLoop + 1) = 8
            Case Else    'N/A
                imLnSave(3, ilLoop + 1) = 0
        End Select
        Select Case tgClfCntr(ilLoop).ClfRec.sExtra
            Case "N"    'N/A
                imLnSave(5, ilLoop + 1) = 0
            Case "C"    'Commercial Promo
                imLnSave(5, ilLoop + 1) = 1
            Case "D"    'Donut
                imLnSave(5, ilLoop + 1) = 2
            Case "B"    'Bookend
                imLnSave(5, ilLoop + 1) = 3
            Case "S"    'Billboard without spots
                imLnSave(5, ilLoop + 1) = 4
            Case Else    'N/A
                imLnSave(5, ilLoop + 1) = 0
        End Select
        imLnSave(4, ilLoop + 1) = 0 'N/A
        smLnSave(2, ilLoop + 1) = ""
        smLnSave(3, ilLoop + 1) = ""
        If tgClfCntr(ilLoop).ClfRec.iNoGames = 0 Then
            Select Case tgClfCntr(ilLoop).ClfRec.sPgmTime
                Case "P"
                    imLnSave(2, ilLoop + 1) = 0
                Case "T"
                    imLnSave(2, ilLoop + 1) = 1
            End Select
            If ((tgClfCntr(ilLoop).ClfRec.iStartTime(0) <> 1) Or (tgClfCntr(ilLoop).ClfRec.iStartTime(1) <> 0)) And ((tgClfCntr(ilLoop).ClfRec.iEndTime(0) <> 1) Or (tgClfCntr(ilLoop).ClfRec.iEndTime(1) <> 0)) Then
                gUnpackTime tgClfCntr(ilLoop).ClfRec.iStartTime(0), tgClfCntr(ilLoop).ClfRec.iStartTime(1), "A", "1", smLnSave(2, ilLoop + 1)
                gUnpackTime tgClfCntr(ilLoop).ClfRec.iEndTime(0), tgClfCntr(ilLoop).ClfRec.iEndTime(1), "A", "1", smLnSave(3, ilLoop + 1)
                imLnSave(4, ilLoop + 1) = 1
            End If
        Else
            smLnSave(2, ilLoop + 1) = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iNoGames))
            smLnSave(3, ilLoop + 1) = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iSpotsOrdered))
        End If
        If (tgClfCntr(ilLoop).ClfRec.iBreak <> 0) And (tgClfCntr(ilLoop).ClfRec.iPosition = 0) Then
            imLnSave(4, ilLoop + 1) = 2
            smLnSave(4, ilLoop + 1) = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iBreak))
        ElseIf (tgClfCntr(ilLoop).ClfRec.iBreak <> 0) And (tgClfCntr(ilLoop).ClfRec.iPosition <> 0) Then
            imLnSave(4, ilLoop + 1) = 3
            smLnSave(4, ilLoop + 1) = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iBreak))
            smLnSave(5, ilLoop + 1) = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iPosition))
        End If
        imLnSave(8, ilLoop + 1) = Val(tgClfCntr(ilLoop).ClfRec.sCntPct) 'count or percent
        If tgClfCntr(ilLoop).iFirstCff = -1 Then
            smLnSave(6, ilLoop + 1) = ""
            For ilDay = 0 To 6 Step 1
                smLnSave(7 + ilDay, ilLoop + 1) = ""
            Next ilDay
            imLnSave(8, ilLoop + 1) = 1  'Assume weekly
            smLnSave(14, ilLoop + 1) = ""
            smLnSave(15, ilLoop + 1) = ""
            mDPAllowedDays tgClfCntr(ilLoop).ClfRec.iRdfCode, ilAllowedDays()
            For ilDay = 0 To 6 Step 1
                If ilAllowedDays(ilDay) Then
                    imLnSave(12 + ilDay, ilLoop + 1) = 0
                Else
                    imLnSave(12 + ilDay, ilLoop + 1) = 0
                End If
            Next ilDay
        Else
            ilCff = tgClfCntr(ilLoop).iFirstCff
            If (tgCffCntr(ilCff).CffRec.sDyWk = "D") Then
                imLnSave(8, ilLoop + 1) = 0
            Else
                imLnSave(8, ilLoop + 1) = 1
            End If
            If (tgCffCntr(ilCff).CffRec.iSpotsWk = 0) And (tgCffCntr(ilCff).CffRec.iXSpotsWk = 0) And (tgClfCntr(ilLoop).ClfRec.iNoGames = 0) Then
                smLnSave(6, ilLoop + 1) = ""
                For ilDay = 0 To 6 Step 1
                    smLnSave(7 + ilDay, ilLoop + 1) = Trim$(str$(tgCffCntr(ilCff).CffRec.iDay(ilDay)))
                Next ilDay
            Else
                If tgClfCntr(ilLoop).ClfRec.iNoGames > 0 Then
                    smLnSave(6, ilLoop + 1) = ""
                Else
                    smLnSave(6, ilLoop + 1) = Trim$(str$(tgCffCntr(ilCff).CffRec.iSpotsWk))
                End If
                For ilDay = 0 To 6 Step 1
                    If tgCffCntr(ilCff).CffRec.iDay(ilDay) = 1 Then
                        smLnSave(7 + ilDay, ilLoop + 1) = "Y"
                    Else
                        smLnSave(7 + ilDay, ilLoop + 1) = "N"
                    End If
                Next ilDay
            End If
            gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), smLnSave(14, ilLoop + 1)
            gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), smLnSave(15, ilLoop + 1)
            mGetFlightDays ilLoop + 1, ilAllowedDays()
            For ilDay = 0 To 6 Step 1
                imLnSave(12 + ilDay, ilLoop + 1) = ilAllowedDays(ilDay)
            Next ilDay
        End If
        smLnSave(16, ilLoop + 1) = Trim$(str$(tgClfCntr(ilLoop).ClfRec.iLen))
        Select Case tgClfCntr(ilLoop).ClfRec.sLiveCopy
            Case "L"
                imLnSave(31, ilLoop + 1) = 0
            Case "M"    'Live Promo
                imLnSave(31, ilLoop + 1) = 2
            Case "S"    'Rec Promo
                imLnSave(31, ilLoop + 1) = 3
            Case "P"    'Pre-recorded live cmml
                imLnSave(31, ilLoop + 1) = 4
            Case "Q"    'Pre-recorded live promo
                imLnSave(31, ilLoop + 1) = 5
            Case Else
                imLnSave(31, ilLoop + 1) = 1
        End Select
        Select Case tgClfCntr(ilLoop).ClfRec.sPreempt
            Case "P"
                imLnSave(6, ilLoop + 1) = 1
            Case "N"
                imLnSave(6, ilLoop + 1) = 0
        End Select
        If tgClfCntr(ilLoop).ClfRec.iPriority > 0 Then
            imLnSave(19, ilLoop + 1) = tgClfCntr(ilLoop).ClfRec.iPriority
        Else
            imLnSave(19, ilLoop + 1) = 0
        End If
        If (tgSpf.sUsingBBs = "Y") And (tgClfCntr(ilLoop).ClfRec.iBBOpenLen > 0) Then
            imLnSave(20, ilLoop + 1) = tgClfCntr(ilLoop).ClfRec.iBBOpenLen
        Else
            imLnSave(20, ilLoop + 1) = 0
        End If
        If (tgSpf.sUsingBBs = "Y") And (tgClfCntr(ilLoop).ClfRec.iBBCloseLen > 0) Then
            imLnSave(21, ilLoop + 1) = tgClfCntr(ilLoop).ClfRec.iBBCloseLen
        Else
            imLnSave(21, ilLoop + 1) = 0
        End If
        'ACT1
        If (Asc(tgSaf(0).sFeatures4) And ACT1CODES) <> ACT1CODES Then
            smLnSave(29, ilLoop + 1) = ""
            imLnSave(32, ilLoop + 1) = -1
            imLnSave(33, ilLoop + 1) = -1
            imLnSave(34, ilLoop + 1) = -1
            imLnSave(35, ilLoop + 1) = -1
        Else
            smLnSave(29, ilLoop + 1) = tgClfCntr(ilLoop).ClfRec.sACT1LineupCode
            imLnSave(32, ilLoop + 1) = 1
            If tgClfCntr(ilLoop).ClfRec.sACT1StoredTime = "T" Then
                imLnSave(32, ilLoop + 1) = 0
            End If
            imLnSave(33, ilLoop + 1) = 1
            If tgClfCntr(ilLoop).ClfRec.sACT1StoredSpots = "S" Then
                imLnSave(33, ilLoop + 1) = 0
            End If
            imLnSave(34, ilLoop + 1) = 1
            If tgClfCntr(ilLoop).ClfRec.sACT1StoreClearPct = "C" Then
                imLnSave(34, ilLoop + 1) = 0
            End If
            imLnSave(35, ilLoop + 1) = 1
            If tgClfCntr(ilLoop).ClfRec.sACT1DaypartFilter = "F" Then
                imLnSave(35, ilLoop + 1) = 0
            End If
        End If
        mOV2MoveRecToCtrl tgClfCntr(ilLoop).ClfRec, ilLoop + 1, tlRegionCode()
        tgClfCntr(ilLoop).sGameLayout = tgClfCntr(ilLoop).ClfRec.sGameLayout
    Next ilLoop
    smLnSave(1, UBound(tgClfCntr) + 1) = "" 'Vehicle list index
    Exit Sub
mMoveLnRecToCtrlErr:
    On Error GoTo 0
    ilTerminate = True
    Exit Sub
End Sub

Sub mObtainLineFlags(ilRowNo As Integer, ilInitValues As Integer, hlChf As Integer, hlClf As Integer, hlSdf As Integer, hlPsf As Integer, hlSmf As Integer, ilVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer)


    Dim ilLoop As Integer
    Dim ilCff As Integer
    'Dim slStartDate As String
    'Dim slEndDate As String
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim ilCount As Integer
    Dim slDate As String
    Dim llTestDate As Long
    Dim llDate As Long
    Dim ilRet As Integer
    Dim ilUrfIndex As Integer
    Dim ilRdf As Integer
    Dim llBillEndDate As Long
    Dim slBillDate As String
    Dim llCntrDate As Long
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim llNowDate As Long
    Dim hlFile As Integer
    Dim slPkLnType As String
    Dim slLnType As String
    Dim llMonNowDate As Long
    Dim ilRdfCode As Integer
    Dim tlChf As CHF
    Dim tlClf As CLF
    'If (ilRowNo < LBound(imLnSave, 2)) Or (ilRowNo > UBound(imLnSave, 2)) Then
    If (ilRowNo < imLB1Or2) Or (ilRowNo > UBound(imLnSave, LINEBOUNDINDEX)) Then
        Exit Sub
    End If
    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    imSdfRecLen = Len(tmSdf)
    tgClfCntr(ilRowNo - 1).iCancel = False
    tgClfCntr(ilRowNo - 1).iResearch = False
    slLnType = mGetLineType(ilRowNo)
    slPkLnType = mGetPkLineType(ilRowNo)
    mGetOwnership ilRowNo
    ilCff = tgClfCntr(ilRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            ilCount = ilCount + 1
            'gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slStartDate    'Week Start date
            'gUnpackDate tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), slEndDate    'Week Start date
            llStartDate = tgCffCntr(ilCff).lStartDate   'gDateValue(slStartDate)
            llEndDate = tgCffCntr(ilCff).lEndDate   'gDateValue(slEndDate)
            If ilCount > 1 Then
                Exit Do
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    If llEndDate < llStartDate Then
        tgClfCntr(ilRowNo - 1).iCancel = True
    End If
    tgClfCntr(ilRowNo - 1).iOverride = False
    tgClfCntr(ilRowNo - 1).iLibBuy = False
    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) Step 1
    '    If imLnSave(1, ilRowNo) = tgMRdf(ilRdf).iCode Then
        ilRdfCode = -1
        If (slLnType <> "O") And (slLnType <> "A") And (slLnType <> "E") Then
            ilRdfCode = imLnSave(1, ilRowNo)
        Else
            For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                If StrComp(smLnSave(20, ilRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                    ilRdfCode = tgMRdf(ilLoop).iCode
                    Exit For
                End If
            Next ilLoop
        End If
        ilRdf = gBinarySearchRdf(ilRdfCode)
        If ilRdf <> -1 Then
            If tgMRdf(ilRdf).sTimeOver = "Y" Then
                tgClfCntr(ilRowNo - 1).iOverride = True
            End If
            'If tgRdf(ilRdf).sSports = "Y" Then
            '    tgClfCntr(ilRowNo - 1).iGame = True
            'End If
            If (tgMRdf(ilRdf).iLtfCode(0) = 0) And (tgMRdf(ilRdf).iLtfCode(1) = 0) And (tgMRdf(ilRdf).iLtfCode(2) = 0) Then
                tgClfCntr(ilRowNo - 1).iLibBuy = False
            Else
                tgClfCntr(ilRowNo - 1).iLibBuy = True
            End If
    '        Exit For
        End If
    'Next ilRdf
    If Not ilInitValues Then
        Exit Sub
    End If
    llNowDate = gDateValue(Format$(gNow(), "m/d/yy"))
    tgClfCntr(ilRowNo - 1).iGame = False    'This field was never set to true, not sure what would happen if set to value from mIsLnGame(ilRowNo)
    tgClfCntr(ilRowNo - 1).iInPast = False
    tgClfCntr(ilRowNo - 1).lUnbilledDate = 0
    tgClfCntr(ilRowNo - 1).lEndBilledDate = 0
    tgClfCntr(ilRowNo - 1).iChgBilledPrice = False
    tgClfCntr(ilRowNo - 1).iLineSchd = False
    tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = -1
    If tgClfCntr(ilRowNo - 1).iFirstCff >= 0 Then
        tgClfCntr(ilRowNo - 1).iPriceSet = 2
    End If
    llBillEndDate = 0
    llTestDate = 0
    ilCount = 0
    llStartDate = 0
    llEndDate = 0
    If tgClfCntr(ilRowNo - 1).iStatus > 0 Then
        'Determine if in past- check scheduled line
        If (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "P") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "A") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "N") Then
            'Find original line
            tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
            tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
            tmChfSrchKey1.iPropVer = tgChfCntr.iPropVer
            ilRet = btrGetGreaterOrEqual(hlChf, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            Do While (ilRet = BTRV_ERR_NONE) And (tlChf.lCntrNo = tgChfCntr.lCntrNo) And ((tlChf.sSchStatus <> "F") And (tlChf.sSchStatus <> "M"))
                ilRet = btrGetNext(hlChf, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If (ilRet <> BTRV_ERR_NONE) Or (tlChf.lCntrNo <> tgChfCntr.lCntrNo) Then
                tlClf = tgClfCntr(ilRowNo - 1).ClfRec
            Else
                'Find Line
                tmClfSrchKey.lChfCode = tlChf.lCode
                tmClfSrchKey.iLine = tgClfCntr(ilRowNo - 1).ClfRec.iLine
                tmClfSrchKey.iCntRevNo = tlChf.iCntRevNo ' 0 show latest version
                tmClfSrchKey.iPropVer = tlChf.iPropVer ' 0 show latest version
                ilRet = btrGetGreaterOrEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                If (ilRet <> BTRV_ERR_NONE) Or (tlClf.lChfCode <> tlChf.lCode) Or (tlClf.iLine <> tgClfCntr(ilRowNo - 1).ClfRec.iLine) Then
                    tlClf = tgClfCntr(ilRowNo - 1).ClfRec
                Else
                    tgClfCntr(ilRowNo - 1).iLineSchd = True
                End If
            End If
        Else
            tgClfCntr(ilRowNo - 1).iLineSchd = True
            tlChf = tgChfCntr
            tlClf = tgClfCntr(ilRowNo - 1).ClfRec
        End If
        If (tlClf.sSchStatus = "F") Or (tlClf.sSchStatus = "M") Then
            mCVehOptIndex ilRowNo, ilVefCode, ilVpfIndex, ilTerminate
            If ilVpfIndex >= 0 Then
                If (tgVpf(ilVpfIndex).iLLD(0) <> 0) Or (tgVpf(ilVpfIndex).iLLD(1) <> 0) Then
                    gUnpackDate tgVpf(ilVpfIndex).iLLD(0), tgVpf(ilVpfIndex).iLLD(1), slDate
                    If gDateValue(slDate) <= llNowDate Then
                        llTestDate = llNowDate
                    Else
                        If tgVpf(ilVpfIndex).sMoveLLD = "Y" Then
                            llTestDate = llNowDate
                        Else
                            llTestDate = gDateValue(slDate)
                        End If
                    End If
                Else
                    llTestDate = llNowDate
                End If
            Else
                llTestDate = llNowDate
            End If
            gUnpackDateLong tlClf.iStartDate(0), tlClf.iStartDate(1), llStartDate
            If llStartDate <= llTestDate Then
                tgClfCntr(ilRowNo - 1).iInPast = True
            End If
        End If
    End If
    gUnpackDateLong tlClf.iStartDate(0), tlClf.iStartDate(1), llStartDate
    mCVehOptIndex ilRowNo, ilVefCode, ilVpfIndex, ilTerminate
    If ilVpfIndex >= 0 Then
        gUnpackDateLong tgVpf(ilVpfIndex).iLLD(0), tgVpf(ilVpfIndex).iLLD(1), tgClfCntr(ilRowNo - 1).lLLD
        If (tgClfCntr(ilRowNo - 1).lLLD <> 0) And (gWeekDayLong(tgClfCntr(ilRowNo - 1).lLLD) <> 6) Then
            tgClfCntr(ilRowNo - 1).lLLD = tgClfCntr(ilRowNo - 1).lLLD - gWeekDayLong(tgClfCntr(ilRowNo - 1).lLLD) - 1
        End If
    Else
        tgClfCntr(ilRowNo - 1).lLLD = 0
    End If
    On Error GoTo mObtainLineFlagsErr
    If (tgClfCntr(ilRowNo - 1).iStatus > 0) Then
        'Scan for first unbilled spot booked spot
        If (tlClf.sSchStatus = "F") Or (tlClf.sSchStatus = "M") Then
            ilUrfIndex = 0
            For ilLoop = 0 To UBound(tgUrf) Step 1
                If tlClf.iVefCode = tgUrf(ilLoop).iVefCode Then
                    ilUrfIndex = ilLoop
                    Exit For
                End If
            Next ilLoop
            '6/12/10:  Need to set EndBilledDate because of Price changes and billed weeks price changing
            'If (tgUrf(ilUrfIndex).sChgCntr = "I") Or (tlChf.iPkageGenMeth = 1) Then
                If tgUrf(0).iRemoteUserID > 0 Then
                    If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                        gUnpackDate tgSpf.iBLastCalMnth(0), tgSpf.iBLastCalMnth(1), slDate
                        slDate = gObtainEndCal(slDate)
                    ElseIf (tgChfCntr.sBillCycle = "W") Then
                        gUnpackDate tgSaf(0).iBLastWeeklyDate(0), tgSaf(0).iBLastWeeklyDate(1), slDate
                        slDate = gObtainNextSunday(slDate)
                    Else
                        gUnpackDate tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), slDate
                        slDate = gObtainEndStd(slDate)
                    End If
                    tgClfCntr(ilRowNo - 1).lEndBilledDate = gDateValue(slDate)
                    tgClfCntr(ilRowNo - 1).lUnbilledDate = tgClfCntr(ilRowNo - 1).lEndBilledDate + 1
                Else
                    If (tlClf.sType = "O") Or (tlClf.sType = "A") Or (tlClf.sType = "E") Then
                        hlFile = hlPsf
                    Else
                        hlFile = hlSdf
                    End If
                    tmSdfSrchKey0.iVefCode = tlClf.iVefCode
                    tmSdfSrchKey0.lChfCode = tlClf.lChfCode
                    tmSdfSrchKey0.iLineNo = tlClf.iLine
                    tmSdfSrchKey0.lFsfCode = 0
                    If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                        tmSdfSrchKey0.iDate(0) = tgSpf.iBLastCalMnth(0)
                        tmSdfSrchKey0.iDate(1) = tgSpf.iBLastCalMnth(1)
                    ElseIf (tgChfCntr.sBillCycle = "W") Then
                        tmSdfSrchKey0.iDate(0) = tgSaf(0).iBLastWeeklyDate(0)
                        tmSdfSrchKey0.iDate(1) = tgSaf(0).iBLastWeeklyDate(1)
                    Else
                        tmSdfSrchKey0.iDate(0) = tgSpf.iBLastStdMnth(0)
                        tmSdfSrchKey0.iDate(1) = tgSpf.iBLastStdMnth(1)
                    End If
                    gUnpackDate tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1), slBillDate
                    'If (tlClf.sType <> "O") And (tlClf.sType <> "A") And (tlClf.sType <> "E") Then
                    '    If (tgSpf.sInvAirOrder = "O") Or (tgSpf.sInvAirOrder = "S") Or ((slPkLnType = "O") And (slLnType = "H")) Then
                    '        'Get Missed date as that is the billed date
                    '        ilRet = gFindSmf(tmSdf, hlSmf, tmSmf)
                    '        gUnpackDate tmSmf.iMissedDate(0), tmSmf.iMissedDate(1), slBillDate
                    '    End If
                    'End If
                    If slBillDate <> "" Then
                        '3/14/13: Test for three months instead of two week
                        'slBillDate = gObtainPrevMonday(gObtainPrevMonday(slBillDate))   'test two weeks in the past
                        slBillDate = DateAdd("d", -90, slBillDate)
                        gPackDate slBillDate, tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1)
                        tmSdfSrchKey0.sSchStatus = " "
                        tmSdfSrchKey0.iTime(0) = 0
                        tmSdfSrchKey0.iTime(1) = 0
                        ilRet = btrGetGreaterOrEqual(hlFile, tmSdf, imSdfRecLen, tmSdfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                        Do While (ilRet = BTRV_ERR_NONE) And (tmSdf.iVefCode = tlClf.iVefCode) And (tmSdf.lChfCode = tlClf.lChfCode) And (tmSdf.iLineNo = tlClf.iLine)
                            gUnpackDateLong tmSdf.iDate(0), tmSdf.iDate(1), llDate
                            If llDate >= llTestDate Then
                                If llBillEndDate = 0 Then
                                    gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llCntrDate
                                    'tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate
                                    If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                                        tmSdfSrchKey0.iDate(0) = tgSpf.iBLastCalMnth(0)
                                        tmSdfSrchKey0.iDate(1) = tgSpf.iBLastCalMnth(1)
                                    ElseIf (tgChfCntr.sBillCycle = "W") Then
                                        tmSdfSrchKey0.iDate(0) = tgSaf(0).iBLastWeeklyDate(0)
                                        tmSdfSrchKey0.iDate(1) = tgSaf(0).iBLastWeeklyDate(1)
                                    Else
                                        tmSdfSrchKey0.iDate(0) = tgSpf.iBLastStdMnth(0)
                                        tmSdfSrchKey0.iDate(1) = tgSpf.iBLastStdMnth(1)
                                    End If
                                    gUnpackDateLong tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1), llDate
                                    If llCntrDate > llDate Then
                                        tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate + 1   'llCntrDate - 1
                                    Else
                                        tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate + 1
                                    End If
                                Else
                                    slDate = Format$(llBillEndDate, "m/d/yy")
                                    If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                                        slDate = gObtainEndCal(slDate)
                                    ElseIf (tgChfCntr.sBillCycle = "W") Then
                                        slDate = gObtainNextSunday(slDate)
                                    Else
                                        slDate = gObtainEndStd(slDate)
                                    End If
                                    tgClfCntr(ilRowNo - 1).lEndBilledDate = gDateValue(slDate)
                                    tgClfCntr(ilRowNo - 1).lUnbilledDate = tgClfCntr(ilRowNo - 1).lEndBilledDate + 1
                                End If
                                Exit Do
                            End If
                            If (tmSdf.sSchStatus = "S") Or (tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O") Then
                                If tmSdf.sBill <> "Y" Then
                                    If llBillEndDate = 0 Then
                                        gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llCntrDate
                                        'tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate
                                        If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                                            tmSdfSrchKey0.iDate(0) = tgSpf.iBLastCalMnth(0)
                                            tmSdfSrchKey0.iDate(1) = tgSpf.iBLastCalMnth(1)
                                        ElseIf (tgChfCntr.sBillCycle = "W") Then
                                            tmSdfSrchKey0.iDate(0) = tgSaf(0).iBLastWeeklyDate(0)
                                            tmSdfSrchKey0.iDate(1) = tgSaf(0).iBLastWeeklyDate(1)
                                        Else
                                            tmSdfSrchKey0.iDate(0) = tgSpf.iBLastStdMnth(0)
                                            tmSdfSrchKey0.iDate(1) = tgSpf.iBLastStdMnth(1)
                                        End If
                                        gUnpackDateLong tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1), llDate
                                        If llCntrDate > llDate Then
                                            tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate + 1   'llCntrDate - 1
                                        Else
                                            tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate + 1
                                        End If
                                    Else
                                        slDate = Format$(llBillEndDate, "m/d/yy")
                                        If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                                            slDate = gObtainEndCal(slDate)
                                        ElseIf (tgChfCntr.sBillCycle = "W") Then
                                            slDate = gObtainNextSunday(slDate)
                                        Else
                                            slDate = gObtainEndStd(slDate)
                                        End If
                                        tgClfCntr(ilRowNo - 1).lEndBilledDate = gDateValue(slDate)
                                        tgClfCntr(ilRowNo - 1).lUnbilledDate = tgClfCntr(ilRowNo - 1).lEndBilledDate + 1
                                    End If
                                    Exit Do
                                Else
                                    If (tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O") Then
                                        If (tlClf.sType <> "O") And (tlClf.sType <> "A") And (tlClf.sType <> "E") Then                                        'If (tgSpf.sInvAirOrder = "O") Or (tgSpf.sInvAirOrder = "S") Then
                                            If (tgSpf.sInvAirOrder = "O") Or (tgSpf.sInvAirOrder = "S") Or ((slPkLnType = "O") And (slLnType = "H")) Then
                                                'Get Missed date as that is the billed date
                                                ilRet = gFindSmf(tmSdf, hlSmf, tmSmf)
                                                If ilRet Then
                                                    gUnpackDateLong tmSmf.iMissedDate(0), tmSmf.iMissedDate(1), llDate
                                                End If
                                            End If
                                        End If
                                    End If
                                    If llDate > llBillEndDate Then
                                        llBillEndDate = llDate
                                    End If
                                End If
                            End If
                            ilRet = btrGetNext(hlFile, tmSdf, imSdfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                        Loop
                        '12/30/15: Disallow date prior to last billed date
                        If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                            tmSdfSrchKey0.iDate(0) = tgSpf.iBLastCalMnth(0)
                            tmSdfSrchKey0.iDate(1) = tgSpf.iBLastCalMnth(1)
                        ElseIf (tgChfCntr.sBillCycle = "W") Then
                            tmSdfSrchKey0.iDate(0) = tgSaf(0).iBLastWeeklyDate(0)
                            tmSdfSrchKey0.iDate(1) = tgSaf(0).iBLastWeeklyDate(1)
                        Else
                            tmSdfSrchKey0.iDate(0) = tgSpf.iBLastStdMnth(0)
                            tmSdfSrchKey0.iDate(1) = tgSpf.iBLastStdMnth(1)
                        End If
                        gUnpackDateLong tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1), llDate
                        '12/30/15
                        'If tgClfCntr(ilRowNo - 1).lUnbilledDate = 0 Then    'No spots in the future
                        If tgClfCntr(ilRowNo - 1).lUnbilledDate < llDate Then    'No spots in the future
                            '12/30/15
                            ''gUnpackDateLong tlClf.iEndDate(0), tlClf.iEndDate(1), llLnEndDate
                            ''If (llLnEndDate > 0) And (llLnEndDate < llNowDate) Then
                            ''    tgClfCntr(ilRowNo - 1).lUnbilledDate = llLnEndDate + 1
                            ''End If
                            'If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                            '    tmSdfSrchKey0.iDate(0) = tgSpf.iBLastCalMnth(0)
                            '    tmSdfSrchKey0.iDate(1) = tgSpf.iBLastCalMnth(1)
                            'ElseIf (tgChfCntr.sBillCycle = "W") Then
                            '    tmSdfSrchKey0.iDate(0) = tgSaf(0).iBLastWeeklyDate(0)
                            '    tmSdfSrchKey0.iDate(1) = tgSaf(0).iBLastWeeklyDate(1)
                            'Else
                            '    tmSdfSrchKey0.iDate(0) = tgSpf.iBLastStdMnth(0)
                            '    tmSdfSrchKey0.iDate(1) = tgSpf.iBLastStdMnth(1)
                            'End If
                            'gUnpackDateLong tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1), llDate
                            tgClfCntr(ilRowNo - 1).lUnbilledDate = llDate + 1
                        End If
                        '12/30/15
                        'If tgClfCntr(ilRowNo - 1).lEndBilledDate = 0 Then    'No spots in the future
                        If tgClfCntr(ilRowNo - 1).lEndBilledDate < llDate Then    'No spots in the future
                            'If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                            '    tmSdfSrchKey0.iDate(0) = tgSpf.iBLastCalMnth(0)
                            '    tmSdfSrchKey0.iDate(1) = tgSpf.iBLastCalMnth(1)
                            'ElseIf (tgChfCntr.sBillCycle = "W") Then
                            '    tmSdfSrchKey0.iDate(0) = tgSaf(0).iBLastWeeklyDate(0)
                            '    tmSdfSrchKey0.iDate(1) = tgSaf(0).iBLastWeeklyDate(1)
                            'Else
                            '    tmSdfSrchKey0.iDate(0) = tgSpf.iBLastStdMnth(0)
                            '    tmSdfSrchKey0.iDate(1) = tgSpf.iBLastStdMnth(1)
                            'End If
                            'gUnpackDate tmSdfSrchKey0.iDate(0), tmSdfSrchKey0.iDate(1), slBillDate
                            'If slBillDate <> "" Then
                            If llDate > 0 Then
                                gUnpackDateLong tgClfCntr(ilRowNo - 1).ClfRec.iStartDate(0), tgClfCntr(ilRowNo - 1).ClfRec.iStartDate(1), llStartDate
                                '12/30/15
                                'If llStartDate < gDateValue(slBillDate) Then
                                If llStartDate < llDate Then
                                    '12/30/15
                                    'tgClfCntr(ilRowNo - 1).lEndBilledDate = gDateValue(slBillDate)
                                    tgClfCntr(ilRowNo - 1).lEndBilledDate = llDate
                                End If
                            End If
                        End If
                        'If (tgClfCntr(ilRowNo - 1).lUnbilledDate < tgClfCntr(ilRowNo - 1).lEndBilledDate) And (tlChf.iPkageGenMeth = 1) Then
                        '    tgClfCntr(ilRowNo - 1).lUnbilledDate = tgClfCntr(ilRowNo - 1).lEndBilledDate + 1
                        'End If
                    End If
                End If
            'End If
        End If
    End If
    '6/14/10:  Disallow weeks in past to be altered by changing to bill and unbill date.
    If (tgClfCntr(ilRowNo - 1).iStatus > 0) Then
        If (tgUrf(0).sChgCntr <> "I") Then
            llMonNowDate = gDateValue(gObtainPrevMonday(Format$(gNow(), "m/d/yy")))
            If tgClfCntr(ilRowNo - 1).lEndBilledDate < llMonNowDate Then
                tgClfCntr(ilRowNo - 1).lEndBilledDate = llMonNowDate - 1
            End If
            If tgClfCntr(ilRowNo - 1).lUnbilledDate < llMonNowDate Then
                tgClfCntr(ilRowNo - 1).lUnbilledDate = llMonNowDate
            End If
        End If
    End If
        
    '8/19/06:  Obtain number of scheduled spots between Monday and todays date.
    '          The current week number of spots can't be reduced below this count
    '8/28/06- moved into mGetCurrentWkNoSpots and is only activated if changing current week
'    If (tgClfCntr(ilRowNo - 1).iStatus > 0) Then
'        If (tlClf.sSchStatus = "F") And (tgClfCntr(ilRowNo - 1).iLineSchd) Then
'            If (tlChf.sType = "C") Or ((tlChf.sType = "M") And (tgSpf.sSchdPromo = "Y")) Or ((tlChf.sType = "S") And (tgSpf.sSchdPSA = "Y")) Or ((tlChf.sType = "T") And (tgSpf.sSchdRemnant = "Y")) Then
'                gUnpackDateLong tlClf.iStartDate(0), tlClf.iStartDate(1), llStartDate
'                gUnpackDateLong tlClf.iEndDate(0), tlClf.iEndDate(1), llEndDate
'                If (llStartDate <= llNowDate) And (llEndDate >= llNowDate) And (llStartDate <= llEndDate) Then
'                    If (tlClf.sType <> "O") And (tlClf.sType <> "A") And (tlClf.sType <> "E") Then
'                        ilVef = gBinarySearchVef(ilVefCode)
'                        If ilVef <> -1 Then
'                            If tgMVef(ilVef).sType <> "G" Then
'                                tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = 0
'                                llMoNowDate = llNowDate
'                                Do While gWeekDayLong(llMoNowDate) <> 0
'                                    llMoNowDate = llMoNowDate - 1
'                                Loop
'                                ilRet = gObtainCntrSpot(-1, False, tlClf.lChfCode, tlClf.iLine, "O", Format(llMoNowDate, "m/d/yy"), Format(llNowDate, "m/d/yy"), tmSdfExtSort(), tmSdfExt(), 0, True)
'                                For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
'                                    If (tmSdfExt(ilLoop).sSpotType <> "X") And (tmSdfExt(ilLoop).sSpotType <> "C") And (tmSdfExt(ilLoop).sSpotType <> "O") Then
'                                        If tmSdfExt(ilLoop).sSchStatus = "S" Then
'                                            tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots + 1
'                                        ElseIf (tmSdfExt(ilLoop).sSchStatus = "O") Or (tmSdfExt(ilLoop).sSchStatus = "G") Then
'                                            gUnpackDateLong tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), llDate
'                                            If llDate <= llNowDate Then
'                                                tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots + 1
'                                            End If
'                                        End If
'                                    End If
'                                Next ilLoop
'                            End If
'                        End If
'                    End If
'                End If
'            End If
'        End If
'    End If
    On Error GoTo 0
    Exit Sub
mObtainLineFlagsErr:    'Error will occur if new programs read
    On Error GoTo 0
    Exit Sub
End Sub

Sub mPkDPPop(lbcLocal As Control)
    Dim llRif As Long
    Dim ilRdf As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilFound As Integer
    ReDim tgPackDP(0 To 0) As PACKDP
    For ilIndex = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If (tgPackLn(ilIndex).sType = "O") Or (tgPackLn(ilIndex).sType = "A") Or (tgPackLn(ilIndex).sType = "E") Then
            ilFound = False
            For ilLoop = LBound(tgPackDP) To UBound(tgPackDP) - 1 Step 1
                If (Trim$(tgPackDP(ilLoop).sName) = Trim$(tgPackLn(ilIndex).sDPName)) Then
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            If Not ilFound Then
                For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                    If (tgMRif(llRif).iRcfCode = tgChfCntr.iRcfCode) Then
                        'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                        '    If tgMRif(llRif).iRdfcode = tgMRdf(ilRdf).iCode Then
                            ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                            If ilRdf <> -1 Then
                                If (Trim$(tgMRdf(ilRdf).sName) = Trim$(tgPackLn(ilIndex).sDPName)) Then
                                    ilFound = True
                                    tgPackDP(UBound(tgPackDP)).sKey = "#" & mMakePrgSort(llRif, ilRdf)  '(tgMRdf(ilRdf).iCode)
                                    tgPackDP(UBound(tgPackDP)).sName = Trim$(tgMRdf(ilRdf).sName) 'mMakePrgName(tgMRdf(ilRdf).iCode)
                                    tgPackDP(UBound(tgPackDP)).iCode = tgMRdf(ilRdf).iCode
                                    ReDim Preserve tgPackDP(0 To UBound(tgPackDP) + 1) As PACKDP
                        '            Exit For
                                End If
                            End If
                        'Next ilRdf
                        If ilFound Then
                            Exit For
                        End If
                    End If
                Next llRif
            End If
        End If
    Next ilIndex
    For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
        If (tgMRif(llRif).iRcfCode = tgChfCntr.iRcfCode) Then
            'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            '    If tgMRif(llRif).iRdfcode = tgMRdf(ilRdf).iCode Then
                ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                If ilRdf <> -1 Then
                    If tgMRdf(ilRdf).sState = "A" Then
                        ilFound = False
                        For ilLoop = LBound(tgPackDP) To UBound(tgPackDP) - 1 Step 1
                            If (Trim$(tgPackDP(ilLoop).sName) = Trim$(tgMRdf(ilRdf).sName)) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            tgPackDP(UBound(tgPackDP)).sKey = "$" & mMakePrgSort(llRif, ilRdf)  '(tgMRdf(ilRdf).iCode)
                            tgPackDP(UBound(tgPackDP)).sName = Trim$(tgMRdf(ilRdf).sName) 'mMakePrgName(tgMRdf(ilRdf).iCode)
                            tgPackDP(UBound(tgPackDP)).iCode = tgMRdf(ilRdf).iCode
                            ReDim Preserve tgPackDP(0 To UBound(tgPackDP) + 1) As PACKDP
                        End If
                    End If
                End If
            'Next ilRdf
        End If
    Next llRif
    For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
        'Find any daypart not associated with rif, then add it
        ilFound = False
        For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
            If tgMRif(llRif).iRdfCode = tgMRdf(ilRdf).iCode Then
                ilFound = True
                Exit For
            End If
        Next llRif
        If Not ilFound Then
            ilFound = False
            For ilLoop = LBound(tgPackDP) To UBound(tgPackDP) - 1 Step 1
                If (Trim$(tgPackDP(ilLoop).sName) = Trim$(tgMRdf(ilRdf).sName)) Then
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            If Not ilFound Then
                tgPackDP(UBound(tgPackDP)).sKey = "'" & mMakePrgSort(-1, ilRdf) '(tgMRdf(ilRdf).iCode)
                For ilIndex = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                    If (tgPackLn(ilIndex).sType = "O") Or (tgPackLn(ilIndex).sType = "A") Or (tgPackLn(ilIndex).sType = "E") Then
                        If Trim$(tgPackLn(ilIndex).sDPName) = Trim$(tgMRdf(ilRdf).sName) Then
                            tgPackDP(UBound(tgPackDP)).sKey = " " & mMakePrgSort(-1, ilRdf) '(tgMRdf(ilRdf).iCode)
                            ilFound = True
                            Exit For
                        End If
                    End If
                Next ilIndex
                If ilFound Or (tgMRdf(ilRdf).sState = "A") Then
                    tgPackDP(UBound(tgPackDP)).sName = Trim$(tgMRdf(ilRdf).sName) 'mMakePrgName(tgMRdf(ilRdf).iCode)
                    tgPackDP(UBound(tgPackDP)).iCode = tgMRdf(ilRdf).iCode
                    ReDim Preserve tgPackDP(0 To UBound(tgPackDP) + 1) As PACKDP
                End If
            End If
        End If
    Next ilRdf

    If UBound(tgPackDP) - 1 > 0 Then
        ArraySortTyp fnAV(tgPackDP(), 0), UBound(tgPackDP), 0, LenB(tgPackDP(0)), 0, LenB(tgPackDP(0).sKey), 0
    End If
    lbcLocal.Clear
    For ilLoop = LBound(tgPackDP) To UBound(tgPackDP) - 1 Step 1
        lbcLocal.AddItem Trim$(tgPackDP(ilLoop).sName)
    Next ilLoop
End Sub

Sub mPkVehPop(lbcLocal As Control, ilNewVehName As Integer, ilBypassMktBasePkgTest As Integer)
    Dim ilLoop As Integer

    mBuildPkVeh ilNewVehName, ilBypassMktBasePkgTest
    lbcLocal.Clear
    For ilLoop = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
        lbcLocal.AddItem Trim$(tgPackVeh(ilLoop).sName)
        lbcLocal.ItemData(lbcLocal.NewIndex) = tgPackVeh(ilLoop).iCode
    Next ilLoop
End Sub

Sub mPopRBDaypart()
    Dim ilVef As Integer
    'Dim ilRcf As Integer
    Dim llRif As Long
    Dim ilRdf As Integer
    Dim ilCheck As Integer
    Dim slStamp As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilLen As Integer
    Dim slName As String
    Dim ilVpfIndex As Integer
    Dim ilRcfCode As Integer
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilLoop As Integer
    'Dim ilCount As Integer
    Dim ilFound As Integer
    Dim ilTest As Integer
    ReDim ilSpotLen(0 To 0) As Integer

    For ilVef = 0 To Contract.lbcRBVehicle.ListCount - 1 Step 1
        If Contract.lbcRBVehicle.Selected(ilVef) Then
            slStamp = slStamp & Contract.lbcRBVehicle.List(ilVef)
        End If
    Next ilVef
    If slStamp = smPBDPStamp Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    smPBDPStamp = slStamp
    'Contract.lbcRBDaypart.Clear
    'Contract.lbcPBLen.Clear
    ReDim tgTmpSort(0 To 0) As SORTCODE
    sgTmpSortTag = ""
    'Contract.pbcRBVeh(0).Cls
    If Contract.lbcRateCard.ListIndex >= 0 Then
        slNameCode = tmCntRateCard(Contract.lbcRateCard.ListIndex).sKey    'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'lbcRateCard.ListCount - lbcRateCard.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 3, "\", slCode)
        slCode = Trim$(slCode)
        ilRcfCode = CInt(slCode)
        For ilVef = 0 To Contract.lbcRBVehicle.ListCount - 1 Step 1
            If Contract.lbcRBVehicle.Selected(ilVef) Then
                'Determine code
                For ilCheck = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                    If Trim$(tgMVef(ilCheck).sName) = Contract.lbcRBVehicle.List(ilVef) Then
                        If bgCntrFirstCallToVpfFind Then
                            ilVpfIndex = gVpfFind(Contract, tgMVef(ilCheck).iCode)
                            bgCntrFirstCallToVpfFind = False
                        Else
                            ilVpfIndex = gVpfFindIndex(tgMVef(ilCheck).iCode)
                        End If
                        For ilLen = LBound(tgVpf(ilVpfIndex).iSLen) To UBound(tgVpf(ilVpfIndex).iSLen) Step 1
                            If tgVpf(ilVpfIndex).iSLen(ilLen) <> 0 Then
                                'gFindMatch Trim$(Str$(tgVpf(ilVpfIndex).iSLen(ilLen))), 0, Contract.lbcPBLen
                                'If gLastFound(Contract.lbcPBLen) < 0 Then
                                '    Contract.lbcPBLen.AddItem Trim$(Str$(tgVpf(ilVpfIndex).iSLen(ilLen)))
                                'End If
                                ilFound = False
                                For ilTest = 0 To UBound(ilSpotLen) - 1 Step 1
                                    If ilSpotLen(ilTest) = tgVpf(ilVpfIndex).iSLen(ilLen) Then
                                        ilFound = True
                                        Exit For
                                    End If
                                Next ilTest
                                If Not ilFound Then
                                    ilSpotLen(UBound(ilSpotLen)) = tgVpf(ilVpfIndex).iSLen(ilLen)
                                    ReDim Preserve ilSpotLen(0 To UBound(ilSpotLen) + 1) As Integer
                                End If
                            End If
                        Next ilLen
'                        ReDim ilRdfTest(1 To 1) As Integer
'                        For ilRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
'                            If (tgMRif(ilRif).iRcfCode = ilRcfCode) And (tgMRif(ilRif).iVefCode = tgMVef(ilCheck).iCode) Then
'                                'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
'                                '    If (tgMRif(ilRif).iRdfcode = tgMRdf(ilRdf).iCode) And (tgMRdf(ilRdf).sState = "A") Then
'                                    ilRdf = gBinarySearchRdf(tgMRif(ilRif).iRdfcode)
'                                    If ilRdf <> -1 Then
'                                        If tgMRdf(ilRdf).sState = "A" Then
'                                            ilFound = False
'                                            For ilTest = LBound(ilRdfTest) To UBound(ilRdfTest) - 1 Step 1
'                                                If ilRdfTest(ilTest) = tgMRif(ilRif).iRdfcode Then
'                                                    ilFound = True
'                                                    Exit For
'                                                End If
'                                            Next ilTest
'                                            If Not ilFound Then
'                                                ilRdfTest(UBound(ilRdfTest)) = tgMRif(ilRif).iRdfcode
'                                                ReDim Preserve ilRdfTest(1 To UBound(ilRdfTest) + 1) As Integer
'                                            End If
'                                        End If
'                                    End If
'                                'Next ilRdf
'                            End If
'                        Next ilRif
'                        If UBound(ilRdfTest) > LBound(ilRdfTest) Then
                            For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                                If (tgMRif(llRif).iRcfCode = ilRcfCode) And (tgMRif(llRif).iVefCode = tgMVef(ilCheck).iCode) Then
                                    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                                    '    If (tgMRif(ilRif).iRdfcode = tgMRdf(ilRdf).iCode) And (tgMRdf(ilRdf).sState = "A") Then
                                        ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                                        If ilRdf <> -1 Then
                                            If tgMRdf(ilRdf).sState = "A" Then
                                                slStr = mMakePrgSort(-1, ilRdf)
                                                'gFindMatch slStr, 0, Traffic!lbcTmpSort
                                                'If gLastFound(Traffic!lbcTmpSort) < 0 Then
                                                ilFound = False
                                                For ilTest = 0 To UBound(tgTmpSort) - 1 Step 1
                                                    ilRet = gParseItem(Trim$(tgTmpSort(ilTest).sKey), 2, "|", slCode)
                                                    If Val(slCode) = tgMRdf(ilRdf).iCode Then
                                                        ilFound = True
                                                        Exit For
                                                    End If
                                                Next ilTest
                                                If Not ilFound Then
                                                    'Traffic!lbcTmpSort.AddItem slStr
                                                    tgTmpSort(UBound(tgTmpSort)).sKey = slStr
                                                    ReDim Preserve tgTmpSort(0 To UBound(tgTmpSort) + 1) As SORTCODE
                                                End If
                                                'gFindMatch Trim$(tgMRdf(ilRdf).sName), 0, lbcDaypart
                                                'If gLastFound(lbcDaypart) < 0 Then
                                                '    lbcDaypart.AddItem Trim$(tgMRdf(ilRdf).sName)
                                                'End If
                                        '        Exit For
                                            End If
                                        End If
                                    'Next ilRdf
                                End If
                            Next llRif
'                        End If
                        Exit For
                    End If
                Next ilCheck
            End If
        Next ilVef
    End If
    For ilLoop = 0 To UBound(ilSpotLen) - 1 Step 1
        ilFound = False
        For ilTest = 0 To Contract.lbcPBLen.ListCount - 1 Step 1
            If ilSpotLen(ilLoop) = Contract.lbcPBLen.List(ilTest) Then
                ilFound = True
                Exit For
            End If
        Next ilTest
        If Not ilFound Then
            Contract.lbcPBLen.AddItem ilSpotLen(ilLoop)
        End If
    Next ilLoop
    ilLoop = 0
    Do While ilLoop < Contract.lbcPBLen.ListCount
        ilFound = False
        For ilTest = 0 To UBound(ilSpotLen) - 1 Step 1
            If ilSpotLen(ilTest) = Val(Contract.lbcPBLen.List(ilLoop)) Then
                ilFound = True
                Exit For
            End If
        Next ilTest
        If Not ilFound Then
            Contract.lbcPBLen.RemoveItem ilLoop
        Else
            ilLoop = ilLoop + 1
        End If
    Loop
    If UBound(tgTmpSort) - 1 > 0 Then
        ArraySortTyp fnAV(tgTmpSort(), 0), UBound(tgTmpSort), 0, LenB(tgTmpSort(0)), 0, LenB(tgTmpSort(0).sKey), 0
    End If

    For ilLoop = 0 To UBound(tgTmpSort) - 1 Step 1  'Traffic!lbcTmpSort.ListCount - 1 Step 1
        slStr = tgTmpSort(ilLoop).sKey 'Traffic!lbcTmpSort.List(ilLoop)
        ilRet = gParseItem(slStr, 2, "|", slCode)
        'imPBRdfCode(ilLoop) = Val(slCode)
        slName = mMakePrgName(Val(slCode))
        gFindMatch slName, 0, Contract.lbcRBDaypart
        If gLastFound(Contract.lbcRBDaypart) < 0 Then
            Contract.lbcRBDaypart.AddItem Trim$(slName)
            Contract.lbcRBDaypart.ItemData(Contract.lbcRBDaypart.NewIndex) = slCode
        End If
    Next ilLoop
    ilLoop = 0
    Do While ilLoop < Contract.lbcRBDaypart.ListCount
        slName = Trim$(Contract.lbcRBDaypart.List(ilLoop))
        ilFound = False
        For ilTest = 0 To UBound(tgTmpSort) - 1 Step 1
            slNameCode = tgTmpSort(ilTest).sKey 'Traffic!lbcTmpSort.List(ilLoop)
            ilRet = gParseItem(slNameCode, 2, "|", slCode)
            slStr = mMakePrgName(Val(slCode))
            If StrComp(Trim$(slStr), slName, vbTextCompare) = 0 Then
                ilFound = True
                Exit For
            End If
        Next ilTest
        If Not ilFound Then
            Contract.lbcRBDaypart.RemoveItem ilLoop
        Else
            ilLoop = ilLoop + 1
        End If
    Loop
    ReDim imPBRdfCode(0 To 0) As Integer    'Traffic!lbcTmpSort.ListCount) As Integer
    For ilLoop = 0 To Contract.lbcRBDaypart.ListCount - 1 Step 1
        imPBRdfCode(UBound(imPBRdfCode)) = Val(Contract.lbcRBDaypart.ItemData(ilLoop))
        ReDim Preserve imPBRdfCode(0 To UBound(imPBRdfCode) + 1) As Integer
    Next ilLoop
    ReDim tgTmpSort(0 To 0) As SORTCODE
    If Contract.lbcRBDaypart.ListCount > 0 Then
        Contract.ckcRBAllDP.Caption = "All (" & Contract.lbcRBDaypart.SelCount & " of " & Contract.lbcRBDaypart.ListCount & ")"
    Else
        Contract.ckcRBAllDP.Caption = "All"
    End If
    Screen.MousePointer = vbDefault
End Sub

Sub mPopPBRates(ilSource As Integer, hlLcf As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, hlPvf As Integer, ilOldSpotFactor As Integer, ilDGSave() As Integer)


'
'   ilSource(I)- 0-Create new; 1=Update (spots changed); 2=Update (Factor changed); 3=Demo Change; 4=Recompute totals
'
    Dim ilLoop As Integer
    Dim llEDate As Long
    Dim llLDate As Long
    Dim llDate0 As Long
    Dim llDate1 As Long
    Dim slStamp As String
    Dim slDPStamp As String
    Dim slLenStamp As String
    Dim slStr As String
    'Dim ilLen As Integer
    Dim slNameCode As String
    Dim slName As String
    Dim slCode As String
    Dim ilCode As Integer
    Dim ilRet As Integer
    'Dim ilTmp As Integer
    'Dim ilVehCode As Integer
    Dim ilRcfCode As Integer
    Dim ilRdf As Integer
    Dim ilDnfCode As Integer
    Dim ilMnfSocEco As Integer
    Dim ilVef As Integer
    Dim llRif As Long
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilDay As Integer
    Dim ilOk As Integer
    Dim ilFound As Integer
    Dim ilTest As Integer
    Dim llNewNoSpots As Long
    Dim ilNewSpotFactor As Integer
    Dim ilStdPkg As Integer
    Dim llPvfCode As Long
    Dim ilUpper As Integer
    Dim ilVpfIndex As Integer
    Dim ilLen As Integer
    Dim ilRifFound As Integer
    Dim ilVehicle As Integer
    Dim ilVehOk As Integer
    Dim ilRdfOk As Integer
    Dim ilRdfLoop As Integer

    imLcfRecLen = Len(tmLcf)
    imPvfRecLen = Len(tmPvf)
    slStamp = ""
    If Contract.lbcPBLen.ListIndex >= 0 Then
        slLenStamp = Trim$(str$(Contract.lbcPBLen.List(Contract.lbcPBLen.ListIndex)))
        ilLen = Contract.lbcPBLen.List(Contract.lbcPBLen.ListIndex)
    Else
        Exit Sub
    End If
    slStamp = Trim$(Contract.edcPBDate(0).Text) & Trim$(Contract.edcPBDate(1).Text)
    If slStamp = "" Then
        Exit Sub
    End If
    slStr = Contract.edcPBDate(0).Text
    If Not gValidDate(slStr) Then
        Exit Sub
    End If
    slStr = Contract.edcPBDate(1).Text
    If Not gValidDate(slStr) Then
        Exit Sub
    End If
    slDPStamp = ""
    For ilVef = 0 To Contract.lbcRBVehicle.ListCount - 1 Step 1
        If Contract.lbcRBVehicle.Selected(ilVef) Then
            slDPStamp = slDPStamp & Contract.lbcRBVehicle.List(ilVef)
        End If
    Next ilVef
    If Trim$(Contract.edcRBWks(3).Text) <> "" Then
        llNewNoSpots = Val(Contract.edcRBWks(3).Text)
    Else
        llNewNoSpots = 0
    End If
    If Trim$(Contract.edcPBFactor.Text) <> "" Then
        ilNewSpotFactor = Val(Contract.edcPBFactor.Text)
    Else
        ilNewSpotFactor = 1
    End If
    If ilNewSpotFactor <= 0 Then
        ilNewSpotFactor = 1
    End If
    If ilOldSpotFactor <= 0 Then
        ilOldSpotFactor = 1
    End If
    If Contract.lbcRateCard.ListIndex < 0 Then
        Exit Sub
    End If
    slNameCode = tmCntRateCard(Contract.lbcRateCard.ListIndex).sKey    'Traffic!lbcRateCardCode.List(lbcRateCard.ListIndex)' - 1)    'Contract.lbcRateCard.ListCount - Contract.lbcRateCard.ListIndex - 1)
    ilRet = gParseItem(slNameCode, 3, "\", slCode)
    If ilRet <> CP_MSG_NONE Then
        Exit Sub
    End If
    If ilSource = 4 Then
        For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
            If mRBGetAud(0, hlLcf, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, hlPvf, tmPB1DP(ilLoop), False) = False Then
                Screen.MousePointer = vbDefault
                Contract.mClearPB
                'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
                gExceedLimitMsg
                Contract.cmcPBCancel_Click
                Exit Sub
            End If
        Next ilLoop
        If mRBSummary() = False Then
            Screen.MousePointer = vbDefault
            Contract.mClearPB
            'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
            gExceedLimitMsg
            Contract.cmcPBCancel_Click
            Exit Sub
        End If
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    slCode = Trim$(slCode)
    ilRcfCode = CInt(slCode)
    Screen.MousePointer = vbHourglass
    smChkPBVehStamp = slStamp
    smChkPBDPStamp = slDPStamp
    smChkRBLenStamp = slLenStamp
    If ilSource = 0 Then
        'ReDim tmPB1DP(0 To 0) As PBDPGEN
        'ReDim tmRB1DP(0 To 0) As PBDPGEN
        'Contract.pbcRBVeh(0).Cls
    End If
    slStr = Contract.edcPBDate(0).Text
    llDate0 = gDateValue(slStr)
    slStr = Contract.edcPBDate(1).Text
    llDate1 = gDateValue(slStr)
    ilMnfSocEco = 0
    llOvStartTime = 0
    llOvEndTime = 0
    'lacVehTotal.Caption = ""
    For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
        tmPB1DP(ilLoop).iDelFlag = True
    Next ilLoop
    ReDim tmSvChk(0 To 0) As FLWKINFO
    For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
        If tmPB1DP(ilLoop).iChk Then
            tmSvChk(UBound(tmSvChk)).iSpots = tmPB1DP(ilLoop).iRdfCode
            tmSvChk(UBound(tmSvChk)).iStatus = tmPB1DP(ilLoop).iVefCode
            ReDim Preserve tmSvChk(0 To UBound(tmSvChk) + 1) As FLWKINFO
        End If
    Next ilLoop
    For ilLoop = 0 To UBound(tmVehicleCode) - 1 Step 1  'lbcVehicle.ListCount - 1 Step 1
        slNameCode = tmVehicleCode(ilLoop).sKey    'lbcVehicle.List(ilLoop)
        ilRet = gParseItem(slNameCode, 1, "\", slName)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilCode = Val(slCode)
        ilStdPkg = False
        'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
        '    If ilCode = tgMVef(ilVef).iCode Then
            ilVef = gBinarySearchVef(ilCode)
            If ilVef <> -1 Then
                If (tgMVef(ilVef).sType = "P") And (tgMVef(ilVef).lPvfCode > 0) Then
                    ilStdPkg = True
                    llPvfCode = tgMVef(ilVef).lPvfCode
                End If
                'Exit For
            End If
        'Next ilVef
        ilVehOk = False
        If ilVef <> -1 Then
            For ilVehicle = 0 To Contract.lbcRBVehicle.ListCount - 1 Step 1
                If Contract.lbcRBVehicle.Selected(ilVehicle) Then
                    slStr = Trim$(Contract.lbcRBVehicle.List(ilVehicle))
                    If StrComp(Trim$(tgMVef(ilVef).sName), slStr, vbTextCompare) = 0 Then
                        ilVehOk = True
                        Exit For
                    End If
                End If
            Next ilVehicle
        End If
        If ilVehOk Then
            If tgUrf(0).iRemoteUserID <= 0 Then
                If Not ilStdPkg Then
                    llEDate = gGetEarliestLCFDate(hlLcf, "C", ilCode)
                    llLDate = gGetLatestLCFDate(hlLcf, "C", ilCode)
                    ilOk = False
                    'Include if programming defined within date or no programming defined or only TFN defined
                    If ((llDate1 >= llEDate) And (llDate0 <= llLDate)) Or (llEDate = -1) Then
                        ilOk = True
                    Else
                        'Test if TFN exist
                        If tgMVef(ilVef).sType <> "G" Then
                            If (llDate1 >= llEDate) Then
                                For ilDay = 1 To 7 Step 1
                                    tmLcfSrchKey.iType = 0
                                    tmLcfSrchKey.sStatus = "C"
                                    tmLcfSrchKey.iVefCode = ilCode
                                    tmLcfSrchKey.iLogDate(0) = ilDay  '1=Monday; 2= Tuesday;...
                                    tmLcfSrchKey.iLogDate(1) = 0
                                    tmLcfSrchKey.iSeqNo = 1
                                    ilRet = btrGetLessOrEqual(hlLcf, tmLcf, imLcfRecLen, tmLcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get last current record to obtain date
                                    If (ilRet = BTRV_ERR_NONE) And (tmLcf.sStatus = "C") And (tmLcf.iVefCode = ilCode) And (tmLcf.iType = 0) Then
                                        ilOk = True
                                        Exit For
                                    End If
                                Next ilDay
                            End If
                        End If
                    End If
                Else
                    ilOk = True
                End If
            Else
                ilOk = True
            End If
        Else
            ilOk = False
        End If
        If ilOk Then
            If bgCntrFirstCallToVpfFind Then
                ilVpfIndex = gVpfFind(Contract, ilCode)
                bgCntrFirstCallToVpfFind = False
            Else
                ilVpfIndex = gVpfFindIndex(ilCode)
            End If
            If ilVpfIndex > 0 Then
                ilOk = False
                For ilTest = LBound(tgVpf(ilVpfIndex).iSLen) To UBound(tgVpf(ilVpfIndex).iSLen) Step 1
                    If tgVpf(ilVpfIndex).iSLen(ilTest) = ilLen Then
                        ilOk = True
                        Exit For
                    End If
                Next ilTest
            End If
        End If
        If ilOk Then
            ilDnfCode = 0
            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            '    If ilCode = tgMVef(ilVef).iCode Then
                ilVef = gBinarySearchVef(ilCode)
                If ilVef <> -1 Then
                    ilDnfCode = tgMVef(ilVef).iDnfCode
                    'Exit For
                End If
            'Next ilVef
'            If (ilDnfCode > 0) And (ilMnfDemo > 0) Then
'                ilRet = gGetDemoPop(hlDrf, hlMnf, hlDpf, ilDnfCode, ilMnfSocEco, ilMnfDemo, llPop)
'            Else
'                llPop = 0
'            End If
            ilRifFound = False
            For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                If (tgMRif(llRif).iVefCode = ilCode) And (tgMRif(llRif).iRcfCode = ilRcfCode) Then
                    'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                    '    If (tgMRif(ilRif).iRdfcode = tgMRdf(ilRdf).iCode) And (tgMRdf(ilRdf).sState = "A") Then
                        ilRdf = gBinarySearchRdf(tgMRif(llRif).iRdfCode)
                        If ilRdf <> -1 Then
                            ilRdfOk = False
                            For ilRdfLoop = 0 To Contract.lbcRBDaypart.ListCount - 1 Step 1
                                If Contract.lbcRBDaypart.Selected(ilRdfLoop) Then
                                    If tgMRif(llRif).iRdfCode = imPBRdfCode(ilRdfLoop) Then
                                        ilRdfOk = True
                                        Exit For
                                    End If
                                End If
                            Next ilRdfLoop
                            If (tgMRdf(ilRdf).sState = "A") And (ilRdfOk) Then
                                ilRifFound = True
                                ilFound = False
                                ilUpper = UBound(tmPB1DP)
                                For ilTest = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                                    If (tmPB1DP(ilTest).iRdfCode = tgMRif(llRif).iRdfCode) And (tmPB1DP(ilTest).iVefCode = ilCode) Then
                                        tmPB1DP(ilTest).iDelFlag = False
                                        ilFound = True
                                        ilUpper = ilTest
                                        Exit For
                                    End If
                                Next ilTest
                                If ((Not ilFound) And (ilSource = 0)) Or ((ilFound) And (ilSource = 1)) Or ((ilFound) And (ilSource = 2)) Or ((ilFound) And (ilSource = 3)) Then
                                    'Build record into tmPB1DP
                                    tmPB1DP(ilUpper).iDelFlag = False
                                    tmPB1DP(ilUpper).iRdfCode = tgMRif(llRif).iRdfCode
                                    tmPB1DP(ilUpper).sVehName = slName
                                    tmPB1DP(ilUpper).sDPName = mMakePrgName(tgMRif(llRif).iRdfCode)
                                    tmPB1DP(ilUpper).iVefCode = ilCode
                                    If ilSource = 1 Then
                                        tmPB1DP(ilUpper).lNoSpots = llNewNoSpots * ilNewSpotFactor
                                    ElseIf ilSource = 2 Then
                                        If ilOldSpotFactor > 0 Then
                                            tmPB1DP(ilUpper).lNoSpots = tmPB1DP(ilUpper).lNoSpots * CSng(ilNewSpotFactor) / CSng(ilOldSpotFactor)
                                            tmPB1DP(ilUpper).iSpotChg = True
                                        Else
                                            tmPB1DP(ilUpper).lNoSpots = 0
                                        End If
                                    ElseIf ilSource = 3 Then
                                        tmPB1DP(ilUpper).lNoSpots = tmPB1DP(ilUpper).lNoSpots
                                    Else
                                        tmPB1DP(ilUpper).lNoSpots = llNewNoSpots * ilNewSpotFactor
                                        tmPB1DP(ilUpper).iChk = False
                                    End If
                                    tmPB1DP(ilUpper).iStdPkg = ilStdPkg
                                    tmPB1DP(ilUpper).lPopEst = 0
                                    'Get price
                                    If ilSource = 0 Then
'                                        llTPrice = 0
'                                        ilNoWks = 0
'                                        For llDate = llDate0 To llDate1 Step 7
'                                            slDate = Format$(llDate, "m/d/yy")
'                                            llWkPrice = mComputeRCWkPrice(tmRcf.iCode, tgMRif(ilRif).iRdfcode, slDate, ilCode, -1) * 100
'                                            If llWkPrice > 0 Then
'                                                ilDGSave(3) = 1  'Preempt
'                                                slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, 0, ilDGSave(), ilLen)
'                                                slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
'                                                llWkPrice = gStrDecToLong(slStr, 0)
'                                                llTPrice = llTPrice + llWkPrice
'                                                ilNoWks = ilNoWks + 1
'                                            End If
'                                        Next llDate
'                                        If ilNoWks > 0 Then
'                                            tmPB1DP(ilUpper).lAvgPrice = llTPrice / ilNoWks
'                                        End If
                                        tmPB1DP(ilUpper).lAvgPrice = 0
                                    End If
                                    If Not ilStdPkg Then
                                        If (ilSource = 0) Or (ilSource = 3) Then
                                             tmPB1DP(ilUpper).lAvgAud = 0
                                        End If
'                                        'Get Rating
'                                        'Get avg audience
'                                        'Get CPP, CPM
'                                        ilWkSpotCount(1) = 1 'tmPB1DP(ilUpper).iNoSpots
'                                        llWkActPrice(1) = tmPB1DP(ilUpper).lAvgPrice
'                                        llWkAvgAud(1) = tmPB1DP(ilUpper).lAvgAud
'                                        llWkPopEst(1) = tmPB1DP(ilUpper).lPopEst
'                                        gAvgAudToLnResearch False, llPop, llWkPopEst(), ilWkSpotCount(), llWkActPrice(), llWkAvgAud(), llLnCost, llAvgAudAvg, ilWkRating(), ilLnAvgRating, llWkGrImp(), llLnGrImp, llWkGRP(), llLnGRP, llCPP, llCPM, llPopEst
'                                        tmPB1DP(ilUpper).lGrImp = llLnGrImp
'                                        tmPB1DP(ilUpper).lGRP = llLnGRP
                                        tmPB1DP(ilUpper).lGrImp = 0
                                        tmPB1DP(ilUpper).lGRP = 0
                                    Else
                                        tmPB1DP(ilUpper).lGrImp = 0
                                        tmPB1DP(ilUpper).lGRP = 0
                                        tmPB1DP(ilUpper).lAvgAud = 0
                                        'tmPB1DP(ilUpper).lAvgPrice = 0
                                        tmPB1DP(ilUpper).lPopEst = 0
                                    End If
'                                    tmPB1DP(ilUpper).iAvgRating = ilLnAvgRating
'                                    tmPB1DP(ilUpper).lCPP = llCPP
'                                    tmPB1DP(ilUpper).lCPM = llCPM
'                                    tmPB1DP(ilUpper).lPop = llPop
                                    'Moved to above where spots set and prior to price
                                    'tmPB1DP(ilUpper).lPopEst = 0
                                    'Removed 7/7/00- Jim request
                                    'If (tmPB1DP(ilUpper).lAvgAud > 0) Or (tmPB1DP(ilUpper).lAvgPrice > 0) Then
                                        If ilSource = 0 Then
                                            tmPB1DP(ilUpper).lOrigAvgPrice = -1
                                            tmPB1DP(ilUpper).iSpotChg = False
                                            tmPB1DP(ilUpper).lMixStartDate = 0
                                            tmPB1DP(ilUpper).iMixSpotIndex = -1
                                            tmPB1DP(ilUpper).iAudSet = False
                                            tmPB1DP(ilUpper).iOvDays(0) = -1
                                            tmPB1DP(ilUpper).iOvDays(1) = -1
                                            tmPB1DP(ilUpper).iOvDays(2) = -1
                                            tmPB1DP(ilUpper).iOvDays(3) = -1
                                            tmPB1DP(ilUpper).iOvDays(4) = -1
                                            tmPB1DP(ilUpper).iOvDays(5) = -1
                                            tmPB1DP(ilUpper).iOvDays(6) = -1
                                            tmPB1DP(ilUpper).sOvStartTime = ""
                                            tmPB1DP(ilUpper).sOvEndTime = ""
                                            ReDim Preserve tmPB1DP(0 To UBound(tmPB1DP) + 1) As PBDPGEN
                                        End If
                                    'End If
                                ElseIf (ilFound) And (ilSource = 0) Then  'Update values as Gen pressed
                                    If tmPB1DP(ilUpper).iSpotChg Then
                                        tmPB1DP(ilUpper).lNoSpots = tmPB1DP(ilUpper).lNoSpots * ilNewSpotFactor
                                    Else
                                        tmPB1DP(ilUpper).lNoSpots = llNewNoSpots * ilNewSpotFactor
                                    End If
                                    tmPB1DP(ilUpper).lGrImp = 0
                                    tmPB1DP(ilUpper).lGRP = 0
                                    tmPB1DP(ilUpper).lAvgAud = 0
                                    'tmPB1DP(ilUpper).lAvgPrice = 0
                                    tmPB1DP(ilUpper).lPopEst = 0
                                End If
                            End If
                    '        Exit For
                        End If
                    'Next ilRdf
'2/27/03
'                    If ilRifFound Then
'                        Exit For
'                    End If
                End If
            Next llRif
        End If
    Next ilLoop
    'Remove any extra
    ilLoop = LBound(tmPB1DP)
    Do While ilLoop < UBound(tmPB1DP)
        If tmPB1DP(ilLoop).iDelFlag Then
            For ilTest = ilLoop To UBound(tmPB1DP) - 1 Step 1
                tmPB1DP(ilTest) = tmPB1DP(ilTest + 1)
            Next ilTest
            ReDim Preserve tmPB1DP(0 To UBound(tmPB1DP) - 1) As PBDPGEN
        Else
            ilLoop = ilLoop + 1
        End If
    Loop
    If ilSource = 0 Then
        For ilLoop = 0 To UBound(tmSvChk) - 1 Step 1
            For ilVef = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
                If (tmSvChk(ilLoop).iSpots = tmPB1DP(ilVef).iRdfCode) And (tmSvChk(ilLoop).iStatus = tmPB1DP(ilVef).iVefCode) Then
                    tmPB1DP(ilVef).iChk = True
                    Exit For
                End If
            Next ilVef
        Next ilLoop
    End If
    For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
       If mRBGetAud(0, hlLcf, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, hlPvf, tmPB1DP(ilLoop), True) = False Then
            Screen.MousePointer = vbDefault
            Contract.mClearPB
            'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
            gExceedLimitMsg
            Contract.cmcPBCancel_Click
            Exit Sub
       End If
    Next ilLoop
    If mRBSummary() = False Then
        Screen.MousePointer = vbDefault
        Contract.mClearPB
        'MsgBox "Exceeded Total Contract Price limit of 21,000,000 or Spot Total count of 32000 or Combination", vbOKOnly + vbExclamation, "Warning"
        gExceedLimitMsg
        Contract.cmcPBCancel_Click
        Exit Sub
    End If
    Screen.MousePointer = vbDefault
End Sub

Sub mPopRevSet(ilGroupNo As Integer, lbcRevSet As Control, tlRevSetCode() As SORTCODE, slRevSetCodeTag As String, ilRSREV1INDEX As Integer)
    Dim ilRev As Integer
    Dim slRev As String
    Dim ilMnf As Integer
    Dim slName As String
    Dim slNameCode As String
    Dim ilLoop As Integer
    Dim ilRet As Integer
    If sgRevSetStamp <> slRevSetCodeTag Then
        ilRev = lbcRevSet.ListIndex
        If ilRev > 1 Then
            slRev = lbcRevSet.List(ilRev)
        End If
        ReDim tlRevSetCode(0 To 0) As SORTCODE   'VB list box clear (list box used to retain code number so record can be found)
        slRevSetCodeTag = sgRevSetStamp
        lbcRevSet.Clear
        tmRSCtrls(ilGroupNo - 1 + ilRSREV1INDEX).iReq = False
        For ilMnf = LBound(tgRevSet) To UBound(tgRevSet) - 1 Step 1
            If tgRevSet(ilMnf).iGroupNo = ilGroupNo Then
                If Trim$(tgRevSet(ilMnf).sUnitType) = "M" Then
                    tmRSCtrls(ilGroupNo - 1 + ilRSREV1INDEX).iReq = True
                End If
                slName = tgRevSet(ilMnf).sName & "\" & tgRevSet(ilMnf).iCode
                tlRevSetCode(UBound(tlRevSetCode)).sKey = slName
                ReDim Preserve tlRevSetCode(0 To UBound(tlRevSetCode) + 1) As SORTCODE 'VB list box clear (list box used to retain code number so record can be found)
            End If
        Next ilMnf
        If UBound(tlRevSetCode) - 1 > 0 Then
            ArraySortTyp fnAV(tlRevSetCode(), 0), UBound(tlRevSetCode), 0, LenB(tlRevSetCode(0)), 0, LenB(tlRevSetCode(0).sKey), 0
        End If
        For ilLoop = 0 To UBound(tlRevSetCode) - 1 Step 1
            slNameCode = tlRevSetCode(ilLoop).sKey    'lbcMster.List(ilLoop)
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            'If ilRet <> CP_MSG_NONE Then
            '    gIMoveListBox = CP_MSG_PARSE
            '    Exit Sub
            'End If
            slName = Trim$(slName)
            'If Not gOkAddStrToListBox(slName, llLen, True) Then
            '    Exit For
            'End If
            lbcRevSet.AddItem slName  'Add ID to list box
        Next ilLoop
        lbcRevSet.AddItem "[None]", 0
        lbcRevSet.AddItem "[New]", 0  'Force as first item on list
        If ilRev > 1 Then
            gFindMatch slRev, 2, lbcRevSet
            If gLastFound(lbcRevSet) > 1 Then
                lbcRevSet.ListIndex = gLastFound(lbcRevSet)
            Else
                lbcRevSet.ListIndex = -1
            End If
        Else
            lbcRevSet.ListIndex = ilRev
        End If
    End If
End Sub

Sub mPopShareBudget(ilGroupNo As Integer, lbcShareBudget As Control, tlShareBudgetCode() As SORTCODE, slShareBudgetCodeTag As String)
    Dim ilShareBd As Integer
    Dim slShareBd As String
    Dim ilMnf As Integer
    Dim slName As String
    Dim slNameCode As String
    Dim ilLoop As Integer
    Dim ilRet As Integer
    If sgShareBudgetStamp <> slShareBudgetCodeTag Then
        ilShareBd = lbcShareBudget.ListIndex
        If ilShareBd > 1 Then
            slShareBd = lbcShareBudget.List(ilShareBd)
        End If
        ReDim tlShareBudgetCode(0 To 0) As SORTCODE   'VB list box clear (list box used to retain code number so record can be found)
        slShareBudgetCodeTag = sgShareBudgetStamp
        lbcShareBudget.Clear
        For ilMnf = LBound(tgShareBudget) To UBound(tgShareBudget) - 1 Step 1
            If tgShareBudget(ilMnf).iGroupNo = ilGroupNo Then
                slName = tgShareBudget(ilMnf).sName & "\" & tgShareBudget(ilMnf).iCode
                tlShareBudgetCode(UBound(tlShareBudgetCode)).sKey = slName
                ReDim Preserve tlShareBudgetCode(0 To UBound(tlShareBudgetCode) + 1) As SORTCODE 'VB list box clear (list box used to retain code number so record can be found)
            End If
        Next ilMnf
        If UBound(tlShareBudgetCode) - 1 > 0 Then
            ArraySortTyp fnAV(tlShareBudgetCode(), 0), UBound(tlShareBudgetCode), 0, LenB(tlShareBudgetCode(0)), 0, LenB(tlShareBudgetCode(0).sKey), 0
        End If
        For ilLoop = 0 To UBound(tlShareBudgetCode) - 1 Step 1
            slNameCode = tlShareBudgetCode(ilLoop).sKey    'lbcMster.List(ilLoop)
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            'If ilRet <> CP_MSG_NONE Then
            '    gIMoveListBox = CP_MSG_PARSE
            '    Exit Sub
            'End If
            slName = Trim$(slName)
            'If Not gOkAddStrToListBox(slName, llLen, True) Then
            '    Exit For
            'End If
            lbcShareBudget.AddItem slName  'Add ID to list box
        Next ilLoop
        lbcShareBudget.AddItem "[None]", 0
        lbcShareBudget.AddItem "[New]", 0  'Force as first item on list
        If ilShareBd > 1 Then
            gFindMatch slShareBd, 2, lbcShareBudget
            If gLastFound(lbcShareBudget) > 1 Then
                lbcShareBudget.ListIndex = gLastFound(lbcShareBudget)
            Else
                lbcShareBudget.ListIndex = -1
            End If
        Else
            lbcShareBudget.ListIndex = ilShareBd
        End If
    End If
End Sub

Function mRCPriceAdjust(tlRcf As RCF, llRate As Long, ilFromFlightArea As Integer, ilRowNo As Integer, ilDGSave() As Integer, llDGOvStartTime As Long, llDGOvEndTime As Long, ilLen As Integer, llNoSpots As Long, ilDays() As Integer, ilRdfCode As Integer) As String
'
'   slPrice = mRCPriceAdjust(llRate, ilFromFlight, ilRowNo)
'   Where
'       llRate(I)- Rate Card rate (xxxxxx), no decimal place
'       ilFromFlight(I)- get information from flight save values(true)
'       ilRowNo(I)- Row Number
'       slPrice(O)- Adjusted price (xxxx.xx), 2 dec places
'
    Dim slPrice As String
    Dim slDollarAdj As String
    Dim slIndexAdj As String
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilRdf As Integer
    Dim ilDay As Integer
    'Dim ilLen As Integer
    Dim ilPreempt As Integer
    Dim slRound As String
    Dim slLineType As String
    Dim slDollarSum As String
    Dim slIndexSum As String
    Dim slStartTime As String
    Dim slEndTime As String
    Dim llStartTime As Long
    Dim llEndTime As Long
    Dim ilDayMatch As Integer
    Dim ilPreferredDT As Integer
    Dim il1stPos As Integer
    Dim ilSoloAvail As Integer
    Dim ilFreqMin As Integer
    Dim ilFreqMax As Integer

    slIndexSum = "0.00"
    slDollarSum = "0.00"
    If ilRowNo > 0 Then
        slLineType = mGetLineType(ilRowNo)
        If (slLineType = "O") Or (slLineType = "A") Then
            mRCPriceAdjust = ""
            Exit Function
        End If
    End If
    slPrice = gLongToStrDec(llRate, 0)
    If tlRcf.iCode = 0 Then
        mRCPriceAdjust = slPrice & ".00"
        Exit Function
    End If
    'Billboard
    If ilRowNo > 0 Then
        Select Case tlRcf.sUseBB
            Case "D"    'Dollar
                If imLnSave(20, ilRowNo) > 0 Then
                    slDollarAdj = gLongToStrDec(tlRcf.lBBValue, 2)
                    slDollarSum = gAddStr(slDollarSum, slDollarAdj)
                End If
                If imLnSave(21, ilRowNo) > 0 Then
                    slDollarAdj = gLongToStrDec(tlRcf.lBBValue, 2)
                    slDollarSum = gAddStr(slDollarSum, slDollarAdj)
                End If
            Case "I"    'Index
                If imLnSave(20, ilRowNo) > 0 Then
                    slIndexAdj = gLongToStrDec(tlRcf.lBBValue, 2)
                    slIndexAdj = gSubStr(slIndexAdj, "1.00")
                    slIndexSum = gAddStr(slIndexSum, slIndexAdj)
                End If
                If imLnSave(21, ilRowNo) > 0 Then
                    slIndexAdj = gLongToStrDec(tlRcf.lBBValue, 2)
                    slIndexAdj = gSubStr(slIndexAdj, "1.00")
                    slIndexSum = gAddStr(slIndexSum, slIndexAdj)
                End If
        End Select
    End If
    'Fixed Time
    llStartTime = -1
    If ilFromFlightArea Then
        If (llDGOvStartTime <> 0) And (llDGOvStartTime <> 0) Then
            llStartTime = llDGOvStartTime
            llEndTime = llDGOvEndTime
        End If
    Else
        If imLnSave(4, ilRowNo) = 1 Then
            llStartTime = gTimeToLong(smLnSave(2, ilRowNo), False)
            llEndTime = gTimeToLong(smLnSave(3, ilRowNo), True)
        End If
    End If
    If llStartTime = -1 Then
        If (ilFromFlightArea) And (ilRowNo = 0) Then
            ilRdf = gBinarySearchRdf(ilRdfCode)
            If ilRdf <> -1 Then
                For ilIndex = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1
                    If (tgMRdf(ilRdf).iStartTime(0, ilIndex) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilIndex) <> 0) Then
                        gUnpackTime tgMRdf(ilRdf).iStartTime(0, ilIndex), tgMRdf(ilRdf).iStartTime(1, ilIndex), "A", "1", slStartTime
                        gUnpackTime tgMRdf(ilRdf).iEndTime(0, ilIndex), tgMRdf(ilRdf).iEndTime(1, ilIndex), "A", "1", slEndTime
                        Exit For
                    End If
                Next ilIndex
            End If
        Else
            mGetDPTimes ilRowNo, slStartTime, slEndTime
        End If
        llStartTime = gTimeToLong(slStartTime, False)
        llEndTime = gTimeToLong(slEndTime, True)
    End If
    If llStartTime + 900 >= llEndTime Then
        Select Case tlRcf.sUseFP
            Case "D"    'Dollar
                slDollarAdj = gLongToStrDec(tlRcf.lFPValue, 2)
                slDollarSum = gAddStr(slDollarSum, slDollarAdj)
            Case "I"    'Index
                slIndexAdj = gLongToStrDec(tlRcf.lFPValue, 2)
                slIndexAdj = gSubStr(slIndexAdj, "1.00")
                slIndexSum = gAddStr(slIndexSum, slIndexAdj)
        End Select
    End If
    'Non-Preempt
    If ilFromFlightArea Then
        ilPreempt = ilDGSave(3)
    Else
        ilPreempt = imLnSave(6, ilRowNo)
    End If
    If ilPreempt = 0 Then    'High Priority
        Select Case tlRcf.sUseNP
            Case "D"    'Dollar
                slDollarAdj = gLongToStrDec(tlRcf.lNPValue, 2)
                slDollarSum = gAddStr(slDollarSum, slDollarAdj)
            Case "I"    'Index
                slIndexAdj = gLongToStrDec(tlRcf.lNPValue, 2)
                slIndexAdj = gSubStr(slIndexAdj, "1.00")
                slIndexSum = gAddStr(slIndexSum, slIndexAdj)
        End Select
    End If
    'Preferred Days-Times
    If (ilFromFlightArea) And (ilRowNo = 0) Then
        ilPreferredDT = False
    Else
        ilPreferredDT = False
        If (Trim$(smLnSave(25, ilRowNo)) <> "") Then
            ilPreferredDT = True
        Else
            If imLnSave(24, ilRowNo) <> -1 Then
                For ilDay = 0 To 6 Step 1
                    If ilDays(ilDay) Then
                        If imLnSave(24 + ilDay, ilRowNo) = 1 Then
                            ilPreferredDT = True
                            Exit For
                        End If
                    End If
                Next ilDay
            End If
        End If
    End If
    If ilPreferredDT Then     'Preferred
        Select Case tlRcf.sUsePrefDT
            Case "D"    'Dollar
                slDollarAdj = gLongToStrDec(tlRcf.lPrefDTValue, 2)
                slDollarSum = gAddStr(slDollarSum, slDollarAdj)
            Case "I"    'Index
                slIndexAdj = gLongToStrDec(tlRcf.lPrefDTValue, 2)
                slIndexAdj = gSubStr(slIndexAdj, "1.00")
                slIndexSum = gAddStr(slIndexSum, slIndexAdj)
        End Select
    End If
    '1st Position
    If (ilFromFlightArea) And (ilRowNo = 0) Then
        il1stPos = False
    Else
        If imLnSave(22, ilRowNo) = 0 Then
            il1stPos = True
        Else
            il1stPos = False
        End If
    End If
    If il1stPos Then    '1st Position
        Select Case tlRcf.sUse1stPos
            Case "D"    'Dollar
                slDollarAdj = gLongToStrDec(tlRcf.l1stPosValue, 2)
                slDollarSum = gAddStr(slDollarSum, slDollarAdj)
            Case "I"    'Index
                slIndexAdj = gLongToStrDec(tlRcf.l1stPosValue, 2)
                slIndexAdj = gSubStr(slIndexAdj, "1.00")
                slIndexSum = gAddStr(slIndexSum, slIndexAdj)
        End Select
    End If
    'Solo Avail
    If (ilFromFlightArea) And (ilRowNo = 0) Then
        ilSoloAvail = False
    Else
        If imLnSave(23, ilRowNo) = 0 Then
            ilSoloAvail = True
        Else
            ilSoloAvail = False
        End If
    End If
    If ilSoloAvail Then    'Solo Avail
        Select Case tlRcf.sUseSoloAvail
            Case "D"    'Dollar
                slDollarAdj = gLongToStrDec(tlRcf.lSoloAvailValue, 2)
                slDollarSum = gAddStr(slDollarSum, slDollarAdj)
            Case "I"    'Index
                slIndexAdj = gLongToStrDec(tlRcf.lSoloAvailValue, 2)
                slIndexAdj = gSubStr(slIndexAdj, "1.00")
                slIndexSum = gAddStr(slIndexSum, slIndexAdj)
        End Select
    End If
    'Length
    'ilLen = Val(smLnSave(16, ilRowNo))
    ilIndex = -1
    If ilLen > 0 Then
        For ilLoop = LBound(tlRcf.iLen) To UBound(tlRcf.iLen) Step 1
            If tlRcf.iLen(ilLoop) = ilLen Then
                ilIndex = ilLoop
                Exit For
            End If
        Next ilLoop
    End If
    If ilIndex <> -1 Then
        Select Case tlRcf.sUseLen
            Case "D"    'Delta
                slDollarAdj = gLongToStrDec(tlRcf.lValue(ilIndex), 2)
                slPrice = gAddStr(slPrice, slDollarAdj)
            Case "I"    'Index
                slIndexAdj = gLongToStrDec(tlRcf.lValue(ilIndex), 2)
                slPrice = gMulStr(slPrice, slIndexAdj)
        End Select
    End If
    'Spot Frequency
    Select Case tlRcf.sUseSpot
        Case "D"    'Dollar
            For ilLoop = LBound(tlRcf.iSpotMin) To UBound(tlRcf.iSpotMin) Step 1
            '    If (tlRcf.iSpotMin(ilLoop) <> 0) Or (tlRcf.iSpotMax(ilLoop) <> 0) Then
            '        If (tlRcf.iSpotMin(ilLoop) <= llNoSpots) And (tlRcf.iSpotMax(ilLoop) >= llNoSpots) Then
                ilFreqMin = tlRcf.iSpotMin(ilLoop)
                ilFreqMax = tlRcf.iSpotMax(ilLoop)
                If (ilFreqMin <> 0) And (ilFreqMax = 0) Then
                    ilFreqMax = 32766
                End If
                If (ilFreqMin <> 0) Or (ilFreqMax <> 0) Then
                    If (ilFreqMin <= llNoSpots) And (ilFreqMax >= llNoSpots) Then
                        slDollarAdj = gLongToStrDec(tlRcf.lSpotVal(ilLoop), 2)
                        slDollarSum = gAddStr(slDollarSum, slDollarAdj)
                        Exit For
                    End If
                End If
            Next ilLoop
        Case "I"    'Index
            For ilLoop = LBound(tlRcf.iSpotMin) To UBound(tlRcf.iSpotMin) Step 1
            '    If (tlRcf.iSpotMin(ilLoop) <> 0) Or (tlRcf.iSpotMax(ilLoop) <> 0) Then
            '        If (tlRcf.iSpotMin(ilLoop) <= llNoSpots) And (tlRcf.iSpotMax(ilLoop) >= llNoSpots) Then
            '10/29/07:  Fix case where max is +
                ilFreqMin = tlRcf.iSpotMin(ilLoop)
                ilFreqMax = tlRcf.iSpotMax(ilLoop)
                If (ilFreqMin <> 0) And (ilFreqMax = 0) Then
                    ilFreqMax = 32766
                End If
                If (ilFreqMin <> 0) Or (ilFreqMax <> 0) Then
                    If (ilFreqMin <= llNoSpots) And (ilFreqMax >= llNoSpots) Then
                        slIndexAdj = gLongToStrDec(tlRcf.lSpotVal(ilLoop), 2)
                        slIndexAdj = gSubStr(slIndexAdj, "1.00")
                        slIndexSum = gAddStr(slIndexSum, slIndexAdj)
                        Exit For
                    End If
                End If
            Next ilLoop
    End Select
    'Week Frequency
    Select Case tlRcf.sUseWeek
        Case "D"    'Dollar
        Case "I"    'Index
    End Select
    For ilLoop = LBound(tlRcf.sDay, 1) To UBound(tlRcf.sDay, 1) Step 1
        ilDayMatch = False
        For ilDay = 1 To 7 Step 1
            If tlRcf.sDay(ilLoop, ilDay - 1) = "Y" Then
                ilDayMatch = True
                Exit For
            End If
        Next ilDay
        If ilDayMatch Then
            For ilDay = 0 To 6 Step 1
                'If tlRcf.sDay(ilLoop, ilDay + 1) = "Y" Then
                If tlRcf.sDay(ilLoop, ilDay) = "Y" Then
                    If Not ilDays(ilDay) Then
                        ilDayMatch = False
                        Exit For
                    End If
                Else
                    If ilDays(ilDay) Then
                        ilDayMatch = False
                        Exit For
                    End If
                End If
            Next ilDay
            If ilDayMatch Then
                Select Case tlRcf.sUseDay
                    Case "D"    'Dollar
                        slDollarAdj = gLongToStrDec(tlRcf.lDyRate(ilLoop), 2)
                        slDollarSum = gAddStr(slDollarSum, slDollarAdj)
                    Case "I"    'Index
                        slIndexAdj = gLongToStrDec(tlRcf.lDyRate(ilLoop), 2)
                        slIndexAdj = gSubStr(slIndexAdj, "1.00")
                        slIndexSum = gAddStr(slIndexSum, slIndexAdj)
                End Select
                Exit For
            End If
        End If
    Next ilLoop
    'Hour
    Select Case tlRcf.sUseHour
        Case "D"    'Dollar
        Case "I"    'Index
    End Select
    'Grid
    If (tlRcf.iTodayGrid >= LBound(tlRcf.lGridIndex)) And (tlRcf.iTodayGrid <= UBound(tlRcf.lGridIndex)) Then
        If tlRcf.lGridIndex(tlRcf.iTodayGrid - 1) > 0 Then
            slIndexAdj = gLongToStrDec(tlRcf.lGridIndex(tlRcf.iTodayGrid - 1), 4)
            slPrice = gMulStr(slPrice, slIndexAdj)
        End If
    End If
    'slPrice = slPrice + slIndexSum*slPrice
    slPrice = gAddStr(slPrice, gMulStr(slIndexSum, slPrice))
    slPrice = gAddStr(slPrice, slDollarSum)
    If tlRcf.iCode <> 0 Then
        slRound = gLongToStrDec(tlRcf.lRound, 2)
        mRCPriceAdjust = gRoundStr(slPrice, slRound, 2)
    Else
        mRCPriceAdjust = slPrice
    End If
End Function

Function mReadSbfRec(hlSbf As Integer, hlRvf As Integer, hlPhf As Integer, ilStep1Index As Integer) As Integer

'
'   iRet = mReadSbfRec
'   Where:
'       iRet (O)- True if record read,
'                 False if not read
'
    Dim slStr As String
    Dim slStr2 As String
    Dim tlSbf As SBF
    Dim ilRet As Integer    'Return status
    Dim ilFBUpperBound As Integer
    Dim ilIBUpperBound As Integer
    Dim ilMBUpperBound As Integer
    Dim ilPBUpperBound As Integer
    Dim llRecPos As Long
    Dim ilSbfRecLen As Integer
    Dim ilPass As Integer
    Dim ilRvf As Integer
    Dim ilFound As Integer
    Dim hlFile As Integer
    Dim llNoRec As Long
    Dim ilExtLen As Integer
    Dim ilOffSet As Integer
    Dim tlSbfSrchKey As SBFKEY0    'SBF key record image
    Dim tlIntTypeBuff As POPINTEGERTYPE   'Type field record
    Dim llSDate As Long
    Dim llEDate As Long
    Dim slDate As String
    Dim llDate As Long
    Dim ilLoop As Integer

    sgFBBTotal = "0"
    sgIBPTotal = "0"
    sgIBBTotal = "0"
    sgMBBTotal = "0"
    sgPBBTotal = "0"
    ilSbfRecLen = Len(tlSbf)
    ReDim tgFBSbf(0 To 0) As SBFLIST
    ilFBUpperBound = UBound(tgFBSbf)
    tgFBSbf(ilPBUpperBound).iStatus = -1 'Not Used
    tgFBSbf(ilPBUpperBound).lRecPos = 0
    ReDim tgIBSbf(0 To 0) As SBFLIST
    ilIBUpperBound = UBound(tgIBSbf)
    tgIBSbf(ilIBUpperBound).iStatus = -1 'Not Used
    tgIBSbf(ilIBUpperBound).lRecPos = 0
    ReDim tgMBSbf(0 To 0) As SBFLIST
    ilMBUpperBound = UBound(tgIBSbf)
    tgMBSbf(ilIBUpperBound).iStatus = -1 'Not Used
    tgMBSbf(ilIBUpperBound).lRecPos = 0
    ReDim tgPBSbf(0 To 0) As SBFLIST
    ilPBUpperBound = UBound(tgPBSbf)
    tgPBSbf(ilIBUpperBound).iStatus = -1 'Not Used
    tgPBSbf(ilIBUpperBound).lRecPos = 0
    ReDim tmRvfMPRec(0 To 0) As RVFMPREC
    '10525
'    If (ilStep1Index = 0) Or (ilStep1Index = 1) Then
    If (ilStep1Index = 0) Then
        mReadSbfRec = True
        Exit Function
    End If
    '10525 get just NTR then get out
    If ilStep1Index = 1 Then
        tlSbfSrchKey.lChfCode = tgChfCntr.lCode
        tlSbfSrchKey.iDate(0) = 0
        tlSbfSrchKey.iDate(1) = 0
        tlSbfSrchKey.sTranType = " "
        ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tlSbfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tlSbf.lChfCode = tgChfCntr.lCode)
            ilRet = btrGetPosition(hlSbf, llRecPos)
            If tlSbf.sTranType = "I" Then
                tlSbf.sBilled = "N"
                tlSbf.iDate(0) = 0
                tlSbf.iDate(1) = 0
                tgIBSbf(ilIBUpperBound).SbfRec = tlSbf
                tgIBSbf(ilIBUpperBound).lRecPos = llRecPos
                tgIBSbf(ilIBUpperBound).iStatus = 1
                ilIBUpperBound = ilIBUpperBound + 1
                ReDim Preserve tgIBSbf(0 To ilIBUpperBound) As SBFLIST
                tgIBSbf(ilIBUpperBound).iStatus = -1 'Not Used
                tgIBSbf(ilIBUpperBound).lRecPos = 0
            End If
            ilRet = btrGetNext(hlSbf, tlSbf, ilSbfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        If (ilRet <> BTRV_ERR_END_OF_FILE) And (ilRet <> BTRV_ERR_KEY_NOT_FOUND) Then
            On Error GoTo mReadSbfRecErr
            gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual)", Contract
            On Error GoTo 0
        End If
        mReadSbfRec = True
        Exit Function
    End If
    tlSbfSrchKey.lChfCode = tgChfCntr.lCode
    tlSbfSrchKey.iDate(0) = 0
    tlSbfSrchKey.iDate(1) = 0
    tlSbfSrchKey.sTranType = " "
    ilRet = btrGetGreaterOrEqual(hlSbf, tlSbf, ilSbfRecLen, tlSbfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tlSbf.lChfCode = tgChfCntr.lCode)
        ilRet = btrGetPosition(hlSbf, llRecPos)
        If tlSbf.sTranType = "F" Then   'Fixed Price (sBill = "R" Ready or "B" Billed)
            tgFBSbf(ilFBUpperBound).SbfRec = tlSbf
            tgFBSbf(ilFBUpperBound).lRecPos = llRecPos
            tgFBSbf(ilFBUpperBound).iStatus = 1
            ilFBUpperBound = ilFBUpperBound + 1
            ReDim Preserve tgFBSbf(0 To ilFBUpperBound) As SBFLIST
            tgFBSbf(ilFBUpperBound).iStatus = -1 'Not Used
            tgFBSbf(ilFBUpperBound).lRecPos = 0
            If tlSbf.sBilled = "Y" Then
                'gPDNToStr tlSbf.sItemAmount, 2, slStr
                slStr = gLongToStrDec(tlSbf.lGross, 2)
                sgFBBTotal = gAddStr(sgFBBTotal, slStr)
            End If
        ElseIf tlSbf.sTranType = "I" Then   'Items Billing (sBill is ignored)
            tgIBSbf(ilIBUpperBound).SbfRec = tlSbf
            tgIBSbf(ilIBUpperBound).lRecPos = llRecPos
            tgIBSbf(ilIBUpperBound).iStatus = 1
            ilIBUpperBound = ilIBUpperBound + 1
            ReDim Preserve tgIBSbf(0 To ilIBUpperBound) As SBFLIST
            tgIBSbf(ilIBUpperBound).iStatus = -1 'Not Used
            tgIBSbf(ilIBUpperBound).lRecPos = 0
            If tlSbf.sBilled = "Y" Then
                'gPDNToStr tlSbf.sItemAmount, 2, slStr
                slStr = gLongToStrDec(tlSbf.lGross, 2)
                sgIBBTotal = gAddStr(sgIBBTotal, slStr)
            End If
        ElseIf tlSbf.sTranType = "V" Then   'Items invoiced (sBill = "R" Ready or "B" Billed)
        '    'gPDNToStr tlSbf.sItemAmount, 2, slStr
        '    slStr = gLongToStrDec(tlSbf.lGross, 2)
        '    slNoItems = Trim$(Str$(tlSbf.iNoItems))
        '    slStr = gMulStr(slStr, slNoItems)
        '    sgIBPTotal = gAddStr(sgIBPTotal, slStr)
        '    sgIBBTotal = gAddStr(sgIBBTotal, slStr)
        ElseIf tlSbf.sTranType = "A" Then   'Adjustments (sBill = "R" Ready or "B" Billed)
        'ElseIf tlSbf.sTranType = "M" Then
        '    tgMBSbf(ilMBUpperBound).SbfRec = tlSbf
        '    tgMBSbf(ilMBUpperBound).lRecPos = llRecPos
        '    tgMBSbf(ilMBUpperBound).iStatus = 1
        '    ilMBUpperBound = ilMBUpperBound + 1
        '    ReDim Preserve tgMBSbf(0 To ilMBUpperBound) As SBFLIST
        '    tgMBSbf(ilMBUpperBound).iStatus = -1 'Not Used
        '    tgMBSbf(ilMBUpperBound).lRecPos = 0
        '    If tlSbf.sBilled = "B" Then
        '        gPDNToStr tlSbf.sItemAmount, 2, slStr
        '        sgMBBTotal = gAddStr(sgMBBTotal, slStr)
        '    End If
        'ElseIf tlSbf.sTranType = "P" Then
        '    tgPBSbf(ilPBUpperBound).SbfRec = tlSbf
        '    tgPBSbf(ilPBUpperBound).lRecPos = llRecPos
        '    tgPBSbf(ilPBUpperBound).iStatus = 1
        '    ilPBUpperBound = ilPBUpperBound + 1
        '    ReDim Preserve tgPBSbf(0 To ilPBUpperBound) As SBFLIST
        '    tgPBSbf(ilPBUpperBound).iStatus = -1 'Not Used
        '    tgPBSbf(ilPBUpperBound).lRecPos = 0
        '    If tlSbf.sBilled = "B" Then
        '        gPDNToStr tlSbf.sItemAmount, 2, slStr
        '        sgPBBTotal = gAddStr(sgPBBTotal, slStr)
        '    End If
        End If
        ilRet = btrGetNext(hlSbf, tlSbf, ilSbfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    If (ilRet <> BTRV_ERR_END_OF_FILE) And (ilRet <> BTRV_ERR_KEY_NOT_FOUND) Then
        On Error GoTo mReadSbfRecErr
        gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual)", Contract
        On Error GoTo 0
    End If
    If ((tgChfCntr.lCxfMerch > 0) Or (tgChfCntr.lCxfProm > 0)) And (tgUrf(0).iRemoteUserID <= 0) Then
        For ilPass = 0 To 1 Step 1
            If ilPass = 0 Then
                hlFile = hlRvf
            Else
                hlFile = hlPhf
            End If
            imRvfRecLen = Len(tmRvf)
            ilExtLen = imRvfRecLen  'Extract operation record size
            llNoRec = gExtNoRec(ilExtLen) 'btrRecords(hlRvf) 'Obtain number of records
            tmRvfSrchKey1.iAdfCode = tgChfCntr.iAdfCode
            btrExtClear hlFile   'Clear any previous extend operation
            ilRet = btrGetEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.iAdfCode = tgChfCntr.iAdfCode)
            If (ilRet = BTRV_ERR_NONE) And (tmRvf.iAdfCode = tgChfCntr.iAdfCode) Then
                Call btrExtSetBounds(hlFile, llNoRec, -1, "UC", "RVF", "") 'Set extract limits (all records)
                tlIntTypeBuff.iType = tgChfCntr.iAdfCode
                ilOffSet = gFieldOffset("Rvf", "RvfAdfCode")
                ilRet = btrExtAddLogicConst(hlFile, BTRV_KT_INT, ilOffSet, 2, BTRV_EXT_EQUAL, BTRV_EXT_LAST_TERM, tlIntTypeBuff, 2)
                ilRet = btrExtAddField(hlFile, 0, ilExtLen)  'Extract First Name field
                ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                If (ilRet <> BTRV_ERR_END_OF_FILE) And (ilRet <> BTRV_ERR_FILTER_LIMIT) Then
                    On Error GoTo mReadSbfRecErr
                    gBtrvErrorMsg ilRet, "mReadRec (btrGetEqual)", Contract
                    On Error GoTo 0
                    ilExtLen = Len(tmRvf)  'Extract operation record size
                    'ilRet = btrExtGetFirst(hlRvf, tlRvfExt, ilExtLen, llRecPos)
                    Do While ilRet = BTRV_ERR_REJECT_COUNT
                        ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                    Loop
                    Do While ilRet = BTRV_ERR_NONE
                        'If ilPass = 0 Then
                        '    ilRet = btrGetPosition(hlRvf, llRecPos)
                        'Else
                        '    ilRet = btrGetPosition(hlPhf, llRecPos)
                        'End If
                        If (tmRvf.lCntrNo = tgChfCntr.lCntrNo) And (tmRvf.sTranType = "IN") And ((tmRvf.sCashTrade = "M") Or (tmRvf.sCashTrade = "P")) Then
                            ilFound = False
                            For ilRvf = 0 To UBound(tmRvfMPRec) - 1 Step 1
                                If (tmRvfMPRec(ilRvf).sCashTrade = tmRvf.sCashTrade) And (tmRvfMPRec(ilRvf).iVefCode = tmRvf.iAirVefCode) And (tmRvfMPRec(ilRvf).iTranDate(0) = tmRvf.iTranDate(0)) And (tmRvfMPRec(ilRvf).iTranDate(1) = tmRvf.iTranDate(1)) Then
                                    'Combine dollars
                                    gPDNToStr tmRvf.sNet, 2, slStr
                                    tmRvfMPRec(ilRvf).sAmount = gAddStr(tmRvfMPRec(ilRvf).sAmount, slStr)
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilRvf
                            If ilFound Then
                                If tmRvf.sCashTrade = "M" Then
                                    For ilRvf = 0 To UBound(tgMBSbf) - 1 Step 1
                                        If (tgMBSbf(ilRvf).SbfRec.iBillVefCode = tmRvf.iAirVefCode) And (tgMBSbf(ilRvf).SbfRec.iDate(0) = tmRvf.iTranDate(0)) And (tgMBSbf(ilRvf).SbfRec.iDate(1) = tmRvf.iTranDate(1)) Then
                                            'Combine dollars
                                            gPDNToStr tmRvf.sNet, 2, slStr
                                            'gPDNToStr tgMBSbf(ilRvf).SbfRec.sItemAmount, 2, slStr2
                                            slStr2 = gLongToStrDec(tgMBSbf(ilRvf).SbfRec.lGross, 2)
                                            slStr2 = gAddStr(slStr2, slStr)
                                            'gStrToPDN slStr2, 2, 5, tgMBSbf(ilRvf).SbfRec.sItemAmount
                                            tgMBSbf(ilRvf).SbfRec.lGross = gStrDecToLong(slStr2, 2)
                                            ilFound = True
                                            Exit For
                                        End If
                                    Next ilRvf
                                Else
                                    For ilRvf = 0 To UBound(tgPBSbf) - 1 Step 1
                                        If (tgPBSbf(ilRvf).SbfRec.iBillVefCode = tmRvf.iAirVefCode) And (tgPBSbf(ilRvf).SbfRec.iDate(0) = tmRvf.iTranDate(0)) And (tgPBSbf(ilRvf).SbfRec.iDate(1) = tmRvf.iTranDate(1)) Then
                                            'Combine dollars
                                            gPDNToStr tmRvf.sNet, 2, slStr
                                            'gPDNToStr tgPBSbf(ilRvf).SbfRec.sItemAmount, 2, slStr2
                                            slStr2 = gLongToStrDec(tgPBSbf(ilRvf).SbfRec.lGross, 2)
                                            slStr2 = gAddStr(slStr2, slStr)
                                            'gStrToPDN slStr2, 2, 5, tgPBSbf(ilRvf).SbfRec.sItemAmount
                                            tgPBSbf(ilRvf).SbfRec.lGross = gStrDecToLong(slStr2, 2)
                                            ilFound = True
                                            Exit For
                                        End If
                                    Next ilRvf
                                End If
                            End If
                            If Not ilFound Then
                                tmRvfMPRec(UBound(tmRvfMPRec)).iStatus = 0
                                tmRvfMPRec(UBound(tmRvfMPRec)).sCashTrade = tmRvf.sCashTrade
                                tmRvfMPRec(UBound(tmRvfMPRec)).iVefCode = tmRvf.iAirVefCode
                                tmRvfMPRec(UBound(tmRvfMPRec)).iTranDate(0) = tmRvf.iTranDate(0)
                                tmRvfMPRec(UBound(tmRvfMPRec)).iTranDate(1) = tmRvf.iTranDate(1)
                                gPDNToStr tmRvf.sNet, 2, tmRvfMPRec(UBound(tmRvfMPRec)).sAmount
                                tmRvfMPRec(UBound(tmRvfMPRec)).lRecPos = llRecPos
                                tmRvfMPRec(UBound(tmRvfMPRec)).iHandle = ilPass
                                tmRvfMPRec(UBound(tmRvfMPRec)).lCode = tmRvf.lCode
                                ReDim Preserve tmRvfMPRec(0 To UBound(tmRvfMPRec) + 1) As RVFMPREC
                                If tmRvf.sCashTrade = "M" Then
                                    'Create SBF record
                                    tlSbf.lCode = tmRvf.lCode
                                    tlSbf.lChfCode = tgChfCntr.lCode
                                    tlSbf.iDate(0) = tmRvf.iTranDate(0)
                                    tlSbf.iDate(1) = tmRvf.iTranDate(1)
                                    tlSbf.sTranType = "M"
                                    tlSbf.iBillVefCode = tmRvf.iAirVefCode
                                    tlSbf.iMnfItem = 0
                                    tlSbf.iNoItems = 0
                                    gPDNToStr tmRvf.sNet, 2, slStr
                                    'gStrToPDN slStr, 2, 5, tlSbf.sItemAmount
                                    tlSbf.lGross = gStrDecToLong(slStr, 2)
                                    'tlSbf.sUnitName = ""
                                    tlSbf.sDescr = ""
                                    tlSbf.sAgyComm = ""
                                    tlSbf.sSlsComm = ""
                                    '12/17/06-Change to tax by agency or vehicle
                                    'tlSbf.sSlsTax = ""
                                    tlSbf.iTrfCode = 0
                                    tlSbf.sBilled = ""
                                    tlSbf.iPrintInvDate(0) = 0
                                    tlSbf.iPrintInvDate(1) = 0
                                    tlSbf.iUrfCode = tmRvf.iUrfCode
                                    tgMBSbf(ilMBUpperBound).SbfRec = tlSbf
                                    tgMBSbf(ilMBUpperBound).lRecPos = llRecPos
                                    tgMBSbf(ilMBUpperBound).iStatus = 1
                                    ilMBUpperBound = ilMBUpperBound + 1
                                    ReDim Preserve tgMBSbf(0 To ilMBUpperBound) As SBFLIST
                                    tgMBSbf(ilMBUpperBound).iStatus = -1 'Not Used
                                    tgMBSbf(ilMBUpperBound).lRecPos = 0
                                    If (tlSbf.sBilled = "B") Or (tlSbf.sBilled = "Y") Then
                                        'gPDNToStr tlSbf.sItemAmount, 2, slStr
                                        slStr = gLongToStrDec(tlSbf.lGross, 2)
                                        sgMBBTotal = gAddStr(sgMBBTotal, slStr)
                                    End If
                                ElseIf tmRvf.sCashTrade = "P" Then
                                    'Create SBF record
                                    tlSbf.lCode = tmRvf.lCode
                                    tlSbf.lChfCode = tgChfCntr.lCode
                                    tlSbf.iDate(0) = tmRvf.iTranDate(0)
                                    tlSbf.iDate(1) = tmRvf.iTranDate(1)
                                    tlSbf.sTranType = "P"
                                    tlSbf.iBillVefCode = tmRvf.iAirVefCode
                                    tlSbf.iMnfItem = 0
                                    tlSbf.iNoItems = 0
                                    gPDNToStr tmRvf.sNet, 2, slStr
                                    'gStrToPDN slStr, 2, 5, tlSbf.sItemAmount
                                    tlSbf.lGross = gStrDecToLong(slStr, 2)
                                    'tlSbf.sUnitName = ""
                                    tlSbf.sDescr = ""
                                    tlSbf.sAgyComm = ""
                                    tlSbf.sSlsComm = ""
                                    '12/17/06-Change to tax by agency or vehicle
                                    'tlSbf.sSlsTax = ""
                                    tlSbf.iTrfCode = 0
                                    tlSbf.sBilled = ""
                                    tlSbf.iPrintInvDate(0) = 0
                                    tlSbf.iPrintInvDate(1) = 0
                                    tlSbf.iUrfCode = 0
                                    tgPBSbf(ilPBUpperBound).SbfRec = tlSbf
                                    tgPBSbf(ilPBUpperBound).lRecPos = llRecPos
                                    tgPBSbf(ilPBUpperBound).iStatus = 1
                                    ilPBUpperBound = ilPBUpperBound + 1
                                    ReDim Preserve tgPBSbf(0 To ilPBUpperBound) As SBFLIST
                                    tgPBSbf(ilPBUpperBound).iStatus = -1 'Not Used
                                    tgPBSbf(ilPBUpperBound).lRecPos = 0
                                    If (tlSbf.sBilled = "B") Or (tlSbf.sBilled = "Y") Then
                                        'gPDNToStr tlSbf.sItemAmount, 2, slStr
                                        slStr = gLongToStrDec(tlSbf.lGross, 2)
                                        sgPBBTotal = gAddStr(sgPBBTotal, slStr)
                                    End If
                                End If
                            End If
                        End If
                        ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                        Do While ilRet = BTRV_ERR_REJECT_COUNT
                            ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                        Loop
                    Loop
                    'If ilPass = 0 Then
                    '    ilRet = btrGetNext(hlRvf, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                    'Else
                    '    ilRet = btrGetNext(hlPhf, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                    'End If
                End If
            End If
            'Loop
        Next ilPass
        '12/3/08:  Remove records that sum to zero and are outside of the contract dates
        gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llSDate
        gUnpackDate tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1), slDate
        llEDate = gDateValue(gObtainEndStd(slDate))
        For ilRvf = UBound(tgMBSbf) - 1 To 0 Step -1
            gUnpackDateLong tgMBSbf(ilRvf).SbfRec.iDate(0), tgMBSbf(ilRvf).SbfRec.iDate(1), llDate
            If (llDate < llSDate) Or (llDate > llEDate) Then
                If tgMBSbf(ilRvf).SbfRec.lGross = 0 Then
                    For ilLoop = ilRvf To UBound(tgMBSbf) - 1 Step 1
                        tgMBSbf(ilLoop) = tgMBSbf(ilLoop + 1)
                    Next ilLoop
                    ReDim Preserve tgMBSbf(0 To UBound(tgMBSbf) - 1) As SBFLIST
                End If
            End If
        Next ilRvf
        For ilRvf = UBound(tgPBSbf) - 1 To 0 Step -1
            gUnpackDateLong tgPBSbf(ilRvf).SbfRec.iDate(0), tgPBSbf(ilRvf).SbfRec.iDate(1), llDate
            If (llDate < llSDate) Or (llDate > llEDate) Then
                If tgPBSbf(ilRvf).SbfRec.lGross = 0 Then
                    For ilLoop = ilRvf To UBound(tgPBSbf) - 1 Step 1
                        tgPBSbf(ilLoop) = tgPBSbf(ilLoop + 1)
                    Next ilLoop
                    ReDim Preserve tgPBSbf(0 To UBound(tgPBSbf) - 1) As SBFLIST
                End If
            End If
        Next ilRvf
    End If
    mReadSbfRec = True
    Exit Function
mReadSbfRecErr:
    On Error GoTo 0
    mReadSbfRec = False
    Exit Function
End Function

Function mReadMultiMediaRec(hlMsf As Integer, hlMgf As Integer, hlCxf As Integer, ilStep1Index As Integer) As Integer
    Dim ilRet As Integer
    Dim ilMsfUpper As Integer
    Dim ilMsfRecLen As Integer
    Dim tlMsfSrchKey2 As MSFKEY2    'ChfIDCode
    Dim ilMgfUpper As Integer
    Dim ilMgfRecLen As Integer
    Dim tlMgfSrchKey1 As MGFKEY1    'ChfIDCode
    Dim ilCxfRecLen As Integer
    Dim slStr As String
    ReDim tgMsfCntr(0 To 0) As MSFLIST
    tgMsfCntr(0).iStatus = -1
    tgMsfCntr(0).iFirstMgf = -1
    tgMsfCntr(0).iCxfIndex = -1
    ReDim tgMgfCntr(0 To 0) As MGFLIST
    tgMgfCntr(0).iStatus = -1
    tgMgfCntr(0).iNextMgf = -1
    ReDim sgMsfCntrCxf(0 To 0) As String
    If (ilStep1Index = 0) Or (ilStep1Index = 1) Then
        mReadMultiMediaRec = True
        Exit Function
    End If
    ilMsfUpper = 0
    ilMgfUpper = 0
    ilMsfRecLen = Len(tgMsfCntr(0).MsfRec)
    ilMgfRecLen = Len(tgMgfCntr(0).MgfRec)
    tlMsfSrchKey2.lChfCode = tgChfCntr.lCode
    ilRet = btrGetGreaterOrEqual(hlMsf, tgMsfCntr(ilMsfUpper).MsfRec, ilMsfRecLen, tlMsfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tgMsfCntr(ilMsfUpper).MsfRec.lChfCode = tgChfCntr.lCode)
        tgMsfCntr(ilMsfUpper).iStatus = 1 'Old and retain
        tgMsfCntr(ilMsfUpper).iFirstMgf = -1
        tgMsfCntr(ilMsfUpper).iCxfIndex = -1
        tmCxfSrchKey.lCode = tgMsfCntr(ilMsfUpper).MsfRec.lCxfCode
        If tmCxfSrchKey.lCode <> 0 Then
            tmCxf.sComment = ""
            ilCxfRecLen = Len(tmCxf) '5027
            ilRet = gCXFGetEqual(hlCxf, tmCxf, ilCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet = BTRV_ERR_NONE Then
                'If tmCxf.iStrLen > 0 Then
                slStr = gStripChr0(tmCxf.sComment)
                If slStr <> "" Then
                    tgMsfCntr(ilMsfUpper).iCxfIndex = UBound(sgMsfCntrCxf)
                    sgMsfCntrCxf(UBound(sgMsfCntrCxf)) = Trim$(tmCxf.sComment)  'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                    ReDim Preserve sgMsfCntrCxf(0 + UBound(sgMsfCntrCxf) + 1) As String
                End If
            End If
        End If
        tlMgfSrchKey1.lMsfCode = tgMsfCntr(ilMsfUpper).MsfRec.lCode
        tlMgfSrchKey1.iGameNo = 0
        ilRet = btrGetGreaterOrEqual(hlMgf, tgMgfCntr(ilMgfUpper).MgfRec, ilMgfRecLen, tlMgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tgMgfCntr(ilMgfUpper).MgfRec.lMsfCode = tgMsfCntr(ilMsfUpper).MsfRec.lCode)
            tgMgfCntr(ilMgfUpper).iStatus = 1 'Old and retain
            If tgMsfCntr(ilMsfUpper).iFirstMgf = -1 Then
                tgMsfCntr(ilMsfUpper).iFirstMgf = ilMgfUpper
            Else
                tgMgfCntr(ilMgfUpper - 1).iNextMgf = ilMgfUpper
            End If
            tgMgfCntr(ilMgfUpper).iNextMgf = -1
            ilMgfUpper = ilMgfUpper + 1
            ReDim Preserve tgMgfCntr(0 To ilMgfUpper) As MGFLIST
            tgMgfCntr(ilMgfUpper).iStatus = -1 'Not Used
            tgMgfCntr(ilMgfUpper).iNextMgf = -1
            ilRet = btrGetNext(hlMgf, tgMgfCntr(ilMgfUpper).MgfRec, ilMgfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        ilMsfUpper = ilMsfUpper + 1
        ReDim Preserve tgMsfCntr(0 To ilMsfUpper) As MSFLIST
        tgMsfCntr(ilMsfUpper).iStatus = -1 'Not Used
        tgMsfCntr(ilMsfUpper).iCxfIndex = -1
        ilRet = btrGetNext(hlMsf, tgMsfCntr(ilMsfUpper).MsfRec, ilMsfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
End Function

Sub mResortLines(hlMnf As Integer)
    Dim ilLoop As Integer
    Dim llRif As Long
    Dim ilClf As Integer
    Dim ilUpper As Integer
    Dim ilIndex As Integer
    Dim slStr As String
    Dim slKey As String
    Dim ilRet As Integer
    Dim ilTest As Integer
    Dim ilVef As Integer
    Dim slGpSort As String
    Dim slVehName As String
    Dim slVehSort As String
    Dim slDPSort As String
    Dim slLine As String
    Dim slRevNo As String
    Dim slPropVer As String
    Screen.MousePointer = vbHourglass
    imMnfRecLen = Len(tmMnf)
    'Save index to resort
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        tgClfCntr(ilClf).iSaveIndex = ilClf + 1
    Next ilClf
    ilUpper = UBound(smLnSave, LINEBOUNDINDEX)
    ReDim sgTmpLnSave(0 To UBound(smLnSave, FIELDBOUNDINDEX), 0 To ilUpper) As String
    ReDim igTmpLnSave(0 To UBound(imLnSave, FIELDBOUNDINDEX), 0 To ilUpper) As Integer
    ReDim sgTmpLnShow(0 To UBound(smLnShow, FIELDBOUNDINDEX), 0 To ilUpper) As String
    ReDim sgTmpLnComment(0 To ilUpper) As String
    ReDim sgTmpLnInitComment(0 To ilUpper) As String
    ReDim igTmpLnCommShowOn(0 To 4, 0 To ilUpper) As Integer
    ReDim igTmpLnInitCommShowOn(0 To 4, 0 To ilUpper) As Integer
    For ilLoop = LBound(smLnSave, LINEBOUNDINDEX) To UBound(smLnSave, LINEBOUNDINDEX) Step 1
        For ilIndex = LBound(smLnSave, FIELDBOUNDINDEX) To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
            sgTmpLnSave(ilIndex, ilLoop) = smLnSave(ilIndex, ilLoop)
        Next ilIndex
    Next ilLoop
    For ilLoop = LBound(imLnSave, LINEBOUNDINDEX) To UBound(imLnSave, LINEBOUNDINDEX) Step 1
        For ilIndex = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            igTmpLnSave(ilIndex, ilLoop) = imLnSave(ilIndex, ilLoop)
        Next ilIndex
    Next ilLoop
    For ilLoop = LBound(smLnShow, LINEBOUNDINDEX) To UBound(smLnShow, LINEBOUNDINDEX) Step 1
        For ilIndex = LBound(smLnShow, FIELDBOUNDINDEX) To UBound(smLnShow, FIELDBOUNDINDEX) Step 1
            sgTmpLnShow(ilIndex, ilLoop) = smLnShow(ilIndex, ilLoop)
        Next ilIndex
    Next ilLoop
    For ilLoop = LBound(smLnComment) To UBound(smLnComment) Step 1
        sgTmpLnComment(ilLoop) = smLnComment(ilLoop)
    Next ilLoop
    For ilLoop = LBound(smLnInitComment) To UBound(smLnInitComment) Step 1
        sgTmpLnInitComment(ilLoop) = smLnInitComment(ilLoop)
    Next ilLoop
    For ilLoop = LBound(imLnCommShowOn, LINEBOUNDINDEX) To UBound(imLnCommShowOn, LINEBOUNDINDEX) Step 1
        For ilIndex = LBound(imLnCommShowOn, FIELDBOUNDINDEX) To UBound(imLnCommShowOn, FIELDBOUNDINDEX) Step 1
            igTmpLnCommShowOn(ilIndex, ilLoop) = imLnCommShowOn(ilIndex, ilLoop)
        Next ilIndex
    Next ilLoop
    For ilLoop = LBound(imLnInitCommShowOn, LINEBOUNDINDEX) To UBound(imLnInitCommShowOn, LINEBOUNDINDEX) Step 1
        For ilIndex = LBound(imLnInitCommShowOn, FIELDBOUNDINDEX) To UBound(imLnInitCommShowOn, FIELDBOUNDINDEX) Step 1
            igTmpLnInitCommShowOn(ilIndex, ilLoop) = imLnInitCommShowOn(ilIndex, ilLoop)
        Next ilIndex
    Next ilLoop
    'Sort
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        ilRet = gParseItem(tgClfCntr(ilClf).sKey, 2, "|", slKey)
        If ilRet <> CP_MSG_NONE Then
            'Build sort key (Vehicle Group Sort #; Vehicle Sort #; Vehicle Name; Daypart Sort #; Line #
            slVehSort = "999"
            slVehName = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
            '    If tgClfCntr(ilClf).ClfRec.iVefCode = tgMVef(ilVef).iCode Then
                ilVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                If ilVef <> -1 Then
                    slVehName = tgMVef(ilVef).sName
                    slVehSort = Trim$(str$(tgMVef(ilVef).iSort))
                    tmMnfSrchKey.iCode = tgMVef(ilVef).iOwnerMnfCode
                    If tmMnf.iCode <> tmMnfSrchKey.iCode Then
                        ilRet = btrGetEqual(hlMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet <> BTRV_ERR_NONE Then
                            tmMnf.iGroupNo = 999
                            tmMnf.iCode = 0
                        End If
                    End If
                    slGpSort = Trim$(str$(tmMnf.iGroupNo))
                    'Exit For
                End If
            'Next ilVef
            slDPSort = "999"
            If (Asc(tgSpf.sUsingFeatures5) And CNTRINVSORTRC) = CNTRINVSORTRC Then     'use rate card items sort code
                For llRif = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                    If (tgMRif(llRif).iVefCode = tgClfCntr(ilClf).ClfRec.iVefCode) And (tgMRif(llRif).iRdfCode = tgClfCntr(ilClf).ClfRec.iRdfCode) Then
                        If (tgMRif(llRif).iSort > 0) Then
                            slDPSort = Trim$(str$(tgMRif(llRif).iSort))
                        End If
                        Exit For
                    End If
                Next llRif
            End If
            If (Asc(tgSpf.sUsingFeatures5) And CNTRINVSORTLN) = CNTRINVSORTLN Then
                slDPSort = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
            Else
                If (slDPSort = "999") Then
                    ilLoop = gBinarySearchRdf(tgClfCntr(ilClf).ClfRec.iRdfCode)
                    If ilLoop <> -1 Then
                        If tgMRdf(ilLoop).iSortCode > 0 Then
                            slDPSort = Trim$(str$(tgMRdf(ilLoop).iSortCode))
                        End If
                    End If
                End If
                If (slDPSort = "999") Then
                    slDPSort = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
                End If
            End If
            Do While Len(slGpSort) < 3
                slGpSort = "0" & slGpSort
            Loop
            Do While Len(slVehSort) < 3
                slVehSort = "0" & slVehSort
            Loop
            Do While Len(slDPSort) < 4
                slDPSort = "0" & slDPSort
            Loop
            slLine = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
            Do While Len(slLine) < 4
                slLine = "0" & slLine
            Loop
            slRevNo = Trim$(str$(999 - tgClfCntr(ilClf).ClfRec.iCntRevNo))
            Do While Len(slRevNo) < 3
                slRevNo = "0" & slRevNo
            Loop
            slPropVer = Trim$(str$(tgClfCntr(ilClf).ClfRec.iPropVer))
            Do While Len(slPropVer) < 3
                slPropVer = "0" & slPropVer
            Loop
            slKey = slGpSort & slVehSort & slVehName & slDPSort & slLine & slRevNo & slPropVer
        End If
        slStr = "9999~9999" 'First 9999 replaced by standard line #'s and Package Line Numbers; second 9999 replaced by hidden line nubers
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilLoop).iLineNo = tgClfCntr(ilClf).ClfRec.iLine) Then
                If (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "E") Then
                    slStr = Trim$(str$(tgPackLn(ilLoop).iLineNo))
                    Do While Len(slStr) < 4
                        slStr = "0" & slStr
                    Loop
                    slLine = slStr
                    slStr = slStr & "A" '& slLine
                    If bgSortByLineNo Then
                        slLine = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
                        Do While Len(slLine) < 4
                            slLine = "0" & slLine
                        Loop
                    End If
                    slStr = slStr & slLine
                Else    'Find parent to get line number
                    For ilTest = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                        If (tgPackLn(ilTest).sType = "A") Or (tgPackLn(ilTest).sType = "O") Or (tgPackLn(ilTest).sType = "E") Then
                            ilIndex = tgPackLn(ilTest).iIndex
                            Do While ilIndex >= 0
                                If tgClfCntr(ilClf).ClfRec.iLine = tgPackLn(ilIndex).iLineNo Then
                                    slStr = Trim$(str$(tgPackLn(ilTest).iLineNo))
                                    Do While Len(slStr) < 4
                                        slStr = "0" & slStr
                                    Loop
                                    slLine = slStr
                                    slStr = slStr & "C"
                                    If bgSortByLineNo Then
                                        slLine = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
                                        Do While Len(slLine) < 4
                                            slLine = "0" & slLine
                                        Loop
                                    End If
                                    slStr = slStr & slLine
                                End If
                                ilIndex = tgPackLn(ilIndex).iIndex
                            Loop
                        End If
                    Next ilTest
                End If
                Exit For
            End If
        Next ilLoop
        If slStr = "9999~9999" And bgSortByLineNo Then
            slStr = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
            Do While Len(slStr) < 4
                slStr = "0" & slStr
            Loop
            slLine = slStr
            slStr = slStr & "~" & slLine
        End If
        tgClfCntr(ilClf).sKey = slStr & "|" & Trim$(slKey)
    Next ilClf
    If UBound(tgClfCntr) - 1 > 0 Then
        ArraySortTyp fnAV(tgClfCntr(), 0), UBound(tgClfCntr), 0, LenB(tgClfCntr(0)), 0, LenB(tgClfCntr(0).sKey), 0
    End If
    'Resort save values
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        ilLoop = tgClfCntr(ilClf).iSaveIndex
        For ilIndex = LBound(smLnSave, FIELDBOUNDINDEX) To UBound(smLnSave, FIELDBOUNDINDEX) Step 1
            smLnSave(ilIndex, ilClf + 1) = sgTmpLnSave(ilIndex, ilLoop)
        Next ilIndex
        For ilIndex = LBound(imLnSave, FIELDBOUNDINDEX) To UBound(imLnSave, FIELDBOUNDINDEX) Step 1
            imLnSave(ilIndex, ilClf + 1) = igTmpLnSave(ilIndex, ilLoop)
        Next ilIndex
        For ilIndex = LBound(smLnShow, FIELDBOUNDINDEX) To UBound(smLnShow, FIELDBOUNDINDEX) Step 1
            smLnShow(ilIndex, ilClf + 1) = sgTmpLnShow(ilIndex, ilLoop)
        Next ilIndex
        smLnComment(ilClf + 1) = sgTmpLnComment(ilLoop)
        smLnInitComment(ilClf + 1) = sgTmpLnInitComment(ilLoop)
        For ilIndex = LBound(imLnCommShowOn, FIELDBOUNDINDEX) To UBound(imLnCommShowOn, FIELDBOUNDINDEX) Step 1
            imLnCommShowOn(ilIndex, ilClf + 1) = igTmpLnCommShowOn(ilIndex, ilLoop)
        Next ilIndex
        For ilIndex = LBound(imLnInitCommShowOn, FIELDBOUNDINDEX) To UBound(imLnInitCommShowOn, FIELDBOUNDINDEX) Step 1
            imLnInitCommShowOn(ilIndex, ilClf + 1) = igTmpLnInitCommShowOn(ilIndex, ilLoop)
        Next ilIndex
    Next ilClf
    Erase sgTmpLnSave
    Erase igTmpLnSave
    Erase sgTmpLnShow
    Erase sgTmpLnComment
    Erase sgTmpLnInitComment
    Erase igTmpLnCommShowOn
    Erase igTmpLnInitCommShowOn
    mBuildMapLinePaint
    Screen.MousePointer = vbDefault
End Sub

Function mCntrSetDeleteFlag(hmCHF As Integer, hmClf As Integer, hmCff As Integer) As Integer
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilCRet As Integer
    Dim llChfRecPos As Long
    Dim llTChfRecPos As Long
    Dim llChfCode As Long
    Dim llTChfCode As Long
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim ilCffRecLen As Integer
    Dim ilCntRevNo As Integer
    Dim tlChf As CHF
    Dim tlClf As CLF
    Dim tlCff As CFF
    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    ilCffRecLen = Len(tlCff)
    If (tgChfCntr.sStatus = "O") Or (tgChfCntr.sStatus = "H") Then
        'Change any previous Order to Delete
        ilRet = gObtainCntr(hmCHF, hmClf, hmCff, tgChfCntr.lCode, True, tlChf, tgClfCntr(), tgCffCntr())
        If ilRet Then
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                'ilRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                ilRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet <> BTRV_ERR_NONE Then
                    mCntrSetDeleteFlag = ilRet
                    Exit Function
                End If
                tmChfSrchKey.lCode = tlClf.lChfCode
                ilRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                If ilRet <> BTRV_ERR_NONE Then
                    mCntrSetDeleteFlag = ilRet
                    Exit Function
                End If
                If (tgChfCntr.lCode <> tlChf.lCode) And ((tlChf.sStatus = "H") Or (tlChf.sStatus = "O")) Then
                    If tlChf.sDelete <> "Y" Then
                        Do
                            tlChf.sDelete = "Y"
                            'tlChf.iSourceID = tgUrf(0).iRemoteUserID
                            'gPackDate smSyncDate, tlChf.iSyncDate(0), tlChf.iSyncDate(1)
                            'gPackTime smSyncTime, tlChf.iSyncTime(0), tlChf.iSyncTime(1)
                            ilRet = btrUpdate(hmCHF, tlChf, ilChfRecLen)
                            If ilRet = BTRV_ERR_CONFLICT Then
                                tmChfSrchKey.lCode = tlClf.lChfCode
                                ilCRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                                If ilCRet <> BTRV_ERR_NONE Then
                                    mCntrSetDeleteFlag = ilCRet
                                    Exit Function
                                End If
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            mCntrSetDeleteFlag = ilRet
                            Exit Function
                        End If
                    End If
                    'Check if line is replaced- if so, then set line as delete
                    If tlClf.sDelete <> "Y" Then
                        For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If (tgClfCntr(ilLoop).ClfRec.iLine = tlClf.iLine) And (tgClfCntr(ilLoop).ClfRec.iCntRevNo >= tlClf.iCntRevNo) Then
                                ilCff = tgClfCntr(ilClf).iFirstCff
                                Do While ilCff <> -1
                                    'ilRet = btrGetDirect(hmCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                    tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                    ilRet = btrGetEqual(hmCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                    If ilRet <> BTRV_ERR_NONE Then
                                        mCntrSetDeleteFlag = ilRet
                                        Exit Function
                                    End If
                                    Do
                                        'tmRec = tlCff
                                        'ilRet = gGetByKeyForUpdate("Cff", hmCff, tmRec)
                                        'tlCff = tmRec
                                        'If ilRet <> BTRV_ERR_NONE Then
                                        '    mCntrSetDeleteFlag = ilRet
                                        '    Exit Function
                                        'End If
                                        tlCff.sDelete = "Y"
                                        ilRet = btrUpdate(hmCff, tlCff, ilCffRecLen)
                                        If ilRet = BTRV_ERR_CONFLICT Then
                                            'ilCRet = btrGetDirect(hmCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                            tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                            ilCRet = btrGetEqual(hmCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                            If ilCRet <> BTRV_ERR_NONE Then
                                                mCntrSetDeleteFlag = ilRet
                                                Exit Function
                                            End If
                                        End If
                                    Loop While ilRet = BTRV_ERR_CONFLICT
                                    If ilRet <> BTRV_ERR_NONE Then
                                        mCntrSetDeleteFlag = ilRet
                                        Exit Function
                                    End If
                                    ilCff = tgCffCntr(ilCff).iNextCff
                                Loop
                                'ilRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                                ilRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                                If ilRet <> BTRV_ERR_NONE Then
                                    mCntrSetDeleteFlag = ilRet
                                    Exit Function
                                End If
                                Do
                                    'tmRec = tlClf
                                    'ilRet = gGetByKeyForUpdate("Clf", hmClf, tmRec)
                                    'tlClf = tmRec
                                    'If ilRet <> BTRV_ERR_NONE Then
                                    '    mCntrSetDeleteFlag = ilRet
                                    '    Exit Function
                                    'End If
                                    tlClf.sDelete = "Y"
                                    ilRet = btrUpdate(hmClf, tlClf, ilClfRecLen)
                                    If ilRet = BTRV_ERR_CONFLICT Then
                                        'ilCRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                        tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                                        ilCRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                                        If ilCRet <> BTRV_ERR_NONE Then
                                            mCntrSetDeleteFlag = ilRet
                                            Exit Function
                                        End If
                                    End If
                                Loop While ilRet = BTRV_ERR_CONFLICT
                                If ilRet <> BTRV_ERR_NONE Then
                                    mCntrSetDeleteFlag = ilRet
                                    Exit Function
                                End If
                                Exit For
                            End If
                        Next ilLoop
                    End If
                End If
            Next ilClf
            'Loop thru contracts and set any contract to delete (header without lines (cause when line added to schedule header, the line moves to schedule header)
            ilCntRevNo = tgChfCntr.iCntRevNo - 1
            tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
            tmChfSrchKey1.iCntRevNo = ilCntRevNo
            tmChfSrchKey1.iPropVer = 32000
            ilRet = btrGetGreaterOrEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            Do While (ilRet = BTRV_ERR_NONE) And (tlChf.lCntrNo = tgChfCntr.lCntrNo)
                If (tlChf.lCode <> tgChfCntr.lCode) And ((tlChf.sStatus = "H") Or (tlChf.sStatus = "O")) Then
                    ilRet = btrGetPosition(hmCHF, llChfRecPos)
                    llChfCode = tlChf.lCode
                    If ilRet <> BTRV_ERR_NONE Then
                        mCntrSetDeleteFlag = ilRet
                        Exit Function
                    End If
                    If tlChf.sDelete <> "Y" Then
                        Do
                            'tmRec = tlChf
                            'ilRet = gGetByKeyForUpdate("Chf", hmChf, tmRec)
                            'tlChf = tmRec
                            'If ilRet <> BTRV_ERR_NONE Then
                            '    mCntrSetDeleteFlag = ilRet
                            '    Exit Function
                            'End If
                            tlChf.sDelete = "Y"
                            'tlChf.iSourceID = tgUrf(0).iRemoteUserID
                            'gPackDate smSyncDate, tlChf.iSyncDate(0), tlChf.iSyncDate(1)
                            'gPackTime smSyncTime, tlChf.iSyncTime(0), tlChf.iSyncTime(1)
                            ilRet = btrUpdate(hmCHF, tlChf, ilChfRecLen)
                            If ilRet = BTRV_ERR_CONFLICT Then
                                'ilCRet = btrGetDirect(hmCHF, tlChf, ilChfRecLen, llChfRecPos, INDEXKEY1, BTRV_LOCK_NONE)
                                tmChfSrchKey.lCode = llChfCode
                                ilCRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                                If ilCRet <> BTRV_ERR_NONE Then
                                    mCntrSetDeleteFlag = ilRet
                                    Exit Function
                                End If
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            mCntrSetDeleteFlag = ilRet
                            Exit Function
                        End If
                    End If
                End If
                'ilRet = btrGetNext(hmChf, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                'ilCntRevNo = ilCntRevNo - 1
                If tlChf.iPropVer > 1 Then
                    tlChf.iPropVer = tlChf.iPropVer - 1
                    ilCntRevNo = tlChf.iCntRevNo
                Else
                    tlChf.iPropVer = 32000
                    ilCntRevNo = ilCntRevNo - 1
                End If
                tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
                tmChfSrchKey1.iCntRevNo = ilCntRevNo
                tmChfSrchKey1.iPropVer = tlChf.iPropVer '32000
                ilRet = btrGetGreaterOrEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                If ilRet = BTRV_ERR_NONE Then
                    ilRet = btrGetPosition(hmCHF, llTChfRecPos)
                    llTChfCode = tlChf.lCode
                    If ilRet <> BTRV_ERR_NONE Then
                        mCntrSetDeleteFlag = ilRet
                        Exit Function
                    End If
                    'If llTChfRecPos = llChfRecPos Then
                    If llTChfCode = llChfCode Then
                        ilRet = btrGetNext(hmCHF, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                    End If
                End If
            Loop
        Else
            If igBtrError > 0 Then
                mCntrSetDeleteFlag = igBtrError
            Else
                mCntrSetDeleteFlag = 30000
            End If
            Exit Function
        End If
    End If
    mCntrSetDeleteFlag = BTRV_ERR_NONE
    Exit Function
End Function

Sub mSetDemoBarBooks(ilLnRowNo As Integer, ilDnfCode As Integer, ilCPPCPM As Integer, ilGetFlag As Integer, ilVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer, ilChgMode As Integer)
    Dim ilLoop As Integer
    Dim ilSort As Integer
    Dim ilShow As Integer
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilMnfDemo As Integer
    Dim ilVef As Integer
    Dim ilIndex As Integer
    Dim slLineType As String
    Dim slBookName As String
    Dim slDemoName As String
    Dim ilFound As Integer
    Dim ilDnf As Integer

    ilChgMode = True
    slLineType = mGetLineType(ilLnRowNo)
    If (smLnSave(1, ilLnRowNo) = "") Then
        Contract.lbcDBBook.Clear
        Contract.edcDBBook.Text = ""
        Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
    '2/9/20: Research number are computed in the call to mTSummary and values need to be set
    'ElseIf (sgCntrScreen = "Orders") Then
    ElseIf tgSpf.sGUsePropSys <> "Y" Then
        Contract.lbcDBBook.Clear
        Contract.edcDBBook.Text = ""
        Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
        ilDnfCode = tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode
    Else
        mCVehOptIndex ilLnRowNo, ilVefCode, ilVpfIndex, ilTerminate
        If ilVpfIndex < 0 Then
            Contract.lbcDBBook.Clear
            Contract.edcDBBook.Text = ""
            Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
        Else
            ilSort = 1
            ilShow = 1  '0  changed 10/22 since two books can have same name but different dates, Ok by Jim
            If Contract.lbcDBDemo.ListCount = 0 Then
                ilChgMode = True
                Contract.lbcDBDemo.Clear
                For ilLoop = 0 To 3 Step 1
                    If Contract.lbcDemo(ilLoop).ListIndex >= 1 Then
                        Contract.lbcDBDemo.AddItem Contract.lbcDemo(ilLoop).List(Contract.lbcDemo(ilLoop).ListIndex)
                        imDemoMap(Contract.lbcDBDemo.ListCount - 1) = ilLoop
                    End If
                Next ilLoop
                'Load with all demo names
                If Contract.lbcDBDemo.ListCount = 0 Then
                    For ilLoop = 1 To Contract.lbcDemo(0).ListCount - 1 Step 1
                        Contract.lbcDBDemo.AddItem Contract.lbcDemo(0).List(ilLoop)
                    Next ilLoop
                End If
                If (ilCPPCPM = 1) Or (ilCPPCPM = 2) Then
                    If tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo > 0 Then
                        ilMnfDemo = tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo
                    Else
                        If Contract.lbcDemo(0).ListIndex >= 1 Then
                            slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(lbcDemo(0).ListIndex - 1)
                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                            ilMnfDemo = Val(slCode)
                        End If
                    End If
                End If
                ilChgMode = False
            End If
            If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                If Contract.lbcDBBook.ListIndex >= 0 Then
                    slBookName = Contract.lbcDBBook.List(Contract.lbcDBBook.ListIndex)
                Else
                    slBookName = ""
                End If
                'ilRet = gPopBookNameBox(Contract, ilVefCode, ilSort, ilShow, lbcDBBook, Traffic!lbcBookNameCode)
                ilDnf = -1
                If (ilGetFlag = 2) And (tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode > 0) And (Contract.plcDemoBar.Visible = False) Then
                    ilDnf = gBinarySearchDnfInfo(tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode)
                End If
                If ilDnf <> -1 Then
                    Contract.lbcDBBook.Clear
                    Contract.lbcDBBook.AddItem Trim$(tgBookNameInfo(ilDnf).sName) & ": " & Trim$(tgBookNameInfo(ilDnf).sBookDate)
                    sgBookNameCodeTag = ""
                    ReDim tgBookNameCode(0 To 1) As SORTCODE
                    tgBookNameCode(0).sKey = Trim$(tgBookNameInfo(ilDnf).sName) & ": " & Trim$(tgBookNameInfo(ilDnf).sBookDate) & "\" & tgBookNameInfo(ilDnf).iDnfCode
                    Contract.lbcDBBook.ListIndex = 0
                    Contract.edcDBBook.Text = Contract.lbcDBBook.List(0)
                Else
                    ilRet = gPopBookNameBox(Contract, ilGetFlag, tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode, ilVefCode, ilSort, ilShow, Contract.lbcDBBook, tgBookNameCode(), sgBookNameCodeTag)
                    Contract.lbcDBBook.height = gListBoxHeight(Contract.lbcDBBook.ListCount, 10)
                    Contract.lbcDBBook.ListIndex = -1
                    Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
                    ilFound = False
                    'Set books from lines instead of selected book
                    'For ilLoop = 0 To Contract.lbcDBBook.ListCount - 1 Step 1
                    '    If slBookName = Contract.lbcDBBook.List(ilLoop) Then
                    '        Contract.lbcDBBook.ListIndex = ilLoop
                    '        slNameCode = tgBookNameCode(ilLoop).sKey   'Traffic!lbcBookNameCode.List(ilLoop)
                    '        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    '        ilDnfCode = Val(slCode)
                    '        ilFound = True
                    '        Exit For
                    '    End If
                    'Next ilLoop
                    If Not ilFound Then
                        If tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode > 0 Then
                            ilDnfCode = tgClfCntr(ilLnRowNo - 1).ClfRec.iDnfCode
                        Else
                            ilDnfCode = -1
                            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                            '    If ilVefCode = tgMVef(ilVef).iCode Then
                                ilVef = gBinarySearchVef(ilVefCode)
                                If ilVef <> -1 Then
                                    ilDnfCode = tgMVef(ilVef).iDnfCode
                                    'Exit For
                                End If
                            'Next ilVef
                        End If
                        If ilDnfCode > 0 Then
                            For ilLoop = 0 To Contract.lbcDBBook.ListCount - 1 Step 1
                                slNameCode = tgBookNameCode(ilLoop).sKey   'Traffic!lbcBookNameCode.List(ilLoop)
                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                If Val(slCode) = ilDnfCode Then
                                    Contract.lbcDBBook.ListIndex = ilLoop
                                    Contract.edcDBBook.Text = Contract.lbcDBBook.List(ilLoop)
                                    Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
                                    Exit For
                                End If
                            Next ilLoop
                        End If
                        If (Contract.lbcDBBook.ListIndex < 0) Then  'Get book from vehicle
                            If (Contract.lbcDBBook.ListCount > 0) Then  'Get book from vehicle
                                For ilLoop = 0 To Contract.lbcDBBook.ListCount - 1 Step 1
                                    If slBookName = Contract.lbcDBBook.List(ilLoop) Then
                                        Contract.lbcDBBook.ListIndex = ilLoop
                                        slNameCode = tgBookNameCode(ilLoop).sKey   'Traffic!lbcBookNameCode.List(ilLoop)
                                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                        ilDnfCode = Val(slCode)
                                        ilFound = True
                                        Exit For
                                    End If
                                Next ilLoop
                                If Not ilFound Then
                                    '5/11/20: If no default defined, leave book undefined. TTP 9834
                                    'Contract.lbcDBBook.ListIndex = 0
                                    'Contract.edcDBBook.Text = Contract.lbcDBBook.List(0)
                                    'slNameCode = tgBookNameCode(0).sKey   'Traffic!lbcBookNameCode.List(ilLoop)
                                    'ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                    'ilDnfCode = Val(slCode)
                                    Contract.edcDBBook.Text = ""
                                End If
                            Else
                                Contract.edcDBBook.Text = ""
                            End If
                            Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
                        End If
                    Else
                        slBookName = ""
                    End If
                End If
            End If
        End If
    End If
    If (Contract.lbcDBDemo.ListCount > 0) And (Contract.edcDBDemo.Text <> "") Then
        ilChgMode = False
        Exit Sub
    End If
    ilChgMode = False
    ilChgMode = True
    If Contract.lbcDBDemo.ListIndex >= 0 Then
        slDemoName = Contract.lbcDBDemo.List(Contract.lbcDBDemo.ListIndex)
    End If
    Contract.lbcDBDemo.Clear
    For ilLoop = 0 To 3 Step 1
        If Contract.lbcDemo(ilLoop).ListIndex >= 1 Then
            Contract.lbcDBDemo.AddItem Contract.lbcDemo(ilLoop).List(Contract.lbcDemo(ilLoop).ListIndex)
            imDemoMap(Contract.lbcDBDemo.ListCount - 1) = ilLoop
        End If
    Next ilLoop
    'Load with all demo names
    If Contract.lbcDBDemo.ListCount = 0 Then
        For ilLoop = 1 To Contract.lbcDemo(0).ListCount - 1 Step 1
            Contract.lbcDBDemo.AddItem Contract.lbcDemo(0).List(ilLoop)
        Next ilLoop
    End If
    Contract.lbcDBDemo.height = gListBoxHeight(Contract.lbcDBDemo.ListCount, 4)
    Contract.lbcDBDemo.ListIndex = -1
    ilMnfDemo = -1
    ilFound = False
    If slDemoName <> "" Then
        For ilLoop = 0 To Contract.lbcDBDemo.ListCount - 1 Step 1
            If slDemoName = Contract.lbcDBDemo.List(ilLoop) Then
                Contract.lbcDBDemo.ListIndex = ilLoop
                ilFound = True
                Exit For
            End If
        Next ilLoop
    End If
    If Not ilFound Then
        If Contract.lbcDBDemo.ListCount > 0 Then
            If (ilCPPCPM = 1) Or (ilCPPCPM = 2) Then
                If tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo > 0 Then
                    ilMnfDemo = tgClfCntr(ilLnRowNo - 1).ClfRec.iMnfDemo
                Else
                    If Contract.lbcDemo(0).ListIndex >= 1 Then
                        slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(lbcDemo(0).ListIndex - 1)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        ilMnfDemo = Val(slCode)
                    End If
                End If
            End If
        End If
        If ilMnfDemo > 0 Then
            For ilLoop = 0 To Contract.lbcDBDemo.ListCount - 1 Step 1
                If (Contract.lbcDemo(0).ListIndex >= 1) Or (Contract.lbcDemo(1).ListIndex >= 1) Or (Contract.lbcDemo(2).ListIndex >= 1) Or (Contract.lbcDemo(3).ListIndex >= 1) Then
                    ilIndex = Contract.lbcDemo(imDemoMap(ilLoop)).ListIndex
                    If ilIndex >= 1 Then
                        slNameCode = tgDemoCode(ilIndex - 1).sKey  'tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
                    Else
                        slNameCode = ""
                    End If
                Else
                    slNameCode = tgDemoCode(ilLoop).sKey  'tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
                End If
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                If Val(slCode) = ilMnfDemo Then
                    Contract.lbcDBDemo.ListIndex = ilLoop
                    Contract.edcDBDemo.Text = Contract.lbcDBDemo.List(ilLoop)
                    Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
                    Exit For
                End If
            Next ilLoop
        End If
        If Contract.lbcDBDemo.ListIndex < 0 Then
            Contract.edcDBDemo.Text = ""
            Screen.MousePointer = vbHourglass 'Reset in subs calling this sub
        End If
    End If
    ilChgMode = False
End Sub

Function mSetDPShowName(ilLnRowNo As Integer, ilBoxNo As Integer, ilFlDays() As Integer) As String
'
'   ilLnRowNo(I)- Line Row Number
'   ilBoxNo(I)- DPINDEX number (-1 indicates not to set show, only return the name)
'   ilFlDays(I)- Allowed Days obtained from flights and/or daypart(0=Air day; 1=Not an Air Day, 2=Mixed)
'
    Dim ilLoop As Integer
    Dim ilTest As Integer
    Dim slStr As String
    Dim slEDays As String
    Dim slLineType As String
    Dim slTime As String
    Dim ilDayMatch As Integer
    Dim slDPName As String
    Dim ilRdfCode As Integer
    ReDim ilDPDays(0 To 6) As Integer
    ReDim ilDays(0 To 6) As Integer
    ReDim slDays(0 To 6) As String * 1
    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        mDPAllowedDays imLnSave(1, ilLnRowNo), ilDPDays()
    Else
        For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                mDPAllowedDays tgMRdf(ilLoop).iCode, ilDPDays()
                Exit For
            End If
        Next ilLoop
    End If
    ilDayMatch = True
    If Not mIsLnGame(ilLnRowNo) Then
        For ilLoop = 0 To 6 Step 1
            If (ilFlDays(ilLoop) = 0) And (ilDPDays(ilLoop) <> True) Then
                ilDayMatch = False
            ElseIf (ilFlDays(ilLoop) = 1) And (ilDPDays(ilLoop) <> False) Then
                ilDayMatch = False
            ElseIf (ilFlDays(ilLoop) = 2) And (ilDPDays(ilLoop) <> True) Then
                ilDayMatch = False
            End If
        Next ilLoop
    End If
    slDPName = ""
    If (Not ilDayMatch) Or (imLnSave(4, ilLnRowNo) = 1) Then
        ilRdfCode = 0
        For ilLoop = 0 To 6 Step 1
            If ilFlDays(ilLoop) = 1 Then
                ilDays(ilLoop) = 0
            Else
                ilDays(ilLoop) = 1
            End If
            slDays(ilLoop) = ""
        Next ilLoop
        slDPName = "* " & gDayNames(ilDays(), slDays(), 2, slEDays)
        If imLnSave(4, ilLnRowNo) = 1 Then
            slTime = smLnSave(2, ilLnRowNo)
            slStr = gFormatTime(slTime, "A", "1")
            slTime = smLnSave(3, ilLnRowNo)
            slDPName = slDPName & " " & slStr & "-" & gFormatTime(slTime, "A", "1")
        Else
            ilRdfCode = -1
            If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                ilRdfCode = imLnSave(1, ilLnRowNo)
            Else
                For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                    If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                        ilRdfCode = tgMRdf(ilLoop).iCode
                        Exit For
                    End If
                Next ilLoop
            End If
            'For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            '    If ilRdfCode = tgMRdf(ilLoop).iCode Then
                ilLoop = gBinarySearchRdf(ilRdfCode)
                If ilLoop <> -1 Then
                    If (tgMRdf(ilLoop).iLtfCode(0) <> 0) Or (tgMRdf(ilLoop).iLtfCode(1) <> 0) Or (tgMRdf(ilLoop).iLtfCode(2) <> 0) Then
                        ilRdfCode = -1
                    Else
                        For ilTest = UBound(tgMRdf(ilLoop).iStartTime, 2) To LBound(tgMRdf(ilLoop).iStartTime, 2) Step -1
                            If (tgMRdf(ilLoop).iStartTime(0, ilTest) <> 1) Or (tgMRdf(ilLoop).iStartTime(1, ilTest) <> 0) Then
                                gUnpackTime tgMRdf(ilLoop).iStartTime(0, ilTest), tgMRdf(ilLoop).iStartTime(1, ilTest), "A", "1", slStr
                                gUnpackTime tgMRdf(ilLoop).iEndTime(0, ilTest), tgMRdf(ilLoop).iEndTime(1, ilTest), "A", "1", slTime
                            End If
                        Next ilTest
                    End If
                    slDPName = slDPName & " " & slStr & "-" & slTime
            '        Exit For
                End If
            'Next ilLoop
        End If
    Else
        ilRdfCode = -1
    End If
    If (ilRdfCode = -1) Then
        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
            'For ilLoop = 0 To Contract.lbcLnProgram(igTabMapIndex).ListCount - 1 Step 1
            '    If Contract.lbcPrg(igTabMapIndex).ItemData(ilLoop) = imLnSave(1, ilLnRowNo) Then
            'For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            '    If imLnSave(1, ilLnRowNo) = tgMRdf(ilLoop).iCode Then
                ilLoop = gBinarySearchRdf(imLnSave(1, ilLnRowNo))
                If ilLoop <> -1 Then
                    If slDPName = "" Then
                        slDPName = Trim$(tgMRdf(ilLoop).sName)   'Contract.lbcLnProgram(igTabMapIndex).List(ilLoop)
                    Else
                        slDPName = slDPName & "; " & Trim$(tgMRdf(ilLoop).sName)   'Contract.lbcLnProgram(igTabMapIndex).List(ilLoop)
                    End If
            '        Exit For
                End If
            'Next ilLoop
        Else
            If slDPName = "" Then
                slDPName = smLnSave(20, ilLnRowNo)
            Else
                slDPName = slDPName & "; " & smLnSave(20, ilLnRowNo)
            End If
        End If
    End If
    If ilBoxNo >= 0 Then
        gSetShow Contract.pbcLine, slDPName, tmLnCtrls(ilBoxNo)
        smLnShow(ilBoxNo, ilLnRowNo) = tmLnCtrls(ilBoxNo).sShow
    End If
    mSetDPShowName = slDPName
    Exit Function
End Function

Sub mSetFlightDays(ilLnRowNo As Integer, ilAllowedDays() As Integer, ilPkLnRowNo As Integer, slDGSave() As String, Optional blFromOverrides As Boolean = False)
'
'   ilLnRowNo(I)- Line Row Number
'   ilAllowedDays(I)- Allowed days (0=Air Day; 1=Not an Air Day; 2=Mix- tried as Aired)
'
    Dim ilCff As Integer
    Dim ilLoop As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llMoFlStartdate As Long
    Dim llDate As Long
    Dim ilDay As Integer
    Dim ilSame As Integer
    Dim ilLIndex As Integer
    Dim ilNonZeroDaily As Integer
    Dim slLineType As String

    ilSame = True
    ilLIndex = LBound(ilAllowedDays)
    'Check daily and weekly buys
    'If imLnSave(8, ilLnRowNo) <> 0 Then
        mGetFlightDays ilLnRowNo, imInitOvDays()
        For ilLoop = 0 To 6 Step 1
            If imInitOvDays(ilLoop) <> ilAllowedDays(ilLoop + ilLIndex) Then
                ilSame = False
                Exit For
            End If
            If (blFromOverrides) And (imLnSave(8, ilLnRowNo) = 0) Then
                slLineType = mGetLineType(ilPkLnRowNo)
                If (slLineType = "O") Or (slLineType = "A") Then
                    If imOrigPkDailySpots(ilLoop) <> Val(slDGSave(3 + ilLoop)) Then
                        ilSame = False
                        Exit For
                    End If
                End If
            End If
        Next ilLoop
        If ilSame Then
            Exit Sub
        End If
    'End If
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date

            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If llFlEndDate < llFlStartDate Then
                Exit Sub
            End If

            If llFlStartDate + 6 <= llFlEndDate Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    If ilPkLnRowNo = ilLnRowNo Then
                        If (blFromOverrides) Then
                            For ilLoop = 0 To 6 Step 1
                                'If (imInitOvDays(ilLoop) <> ilAllowedDays(ilLoop + ilLIndex)) Or (imInitOvDays(ilLoop) = -1) Or (ilAllowedDays(ilLoop + ilLIndex) = -1) Then
                                    tgCffCntr(ilCff).CffRec.iDay(ilLoop) = Val(slDGSave(3 + ilLoop))
                                'End If
                            Next ilLoop
                        Else
                            For ilLoop = 0 To 6 Step 1
                                If (imInitOvDays(ilLoop) <> ilAllowedDays(ilLoop + ilLIndex)) Or (imInitOvDays(ilLoop) = -1) Or (ilAllowedDays(ilLoop + ilLIndex) = -1) Then
                                    tgCffCntr(ilCff).CffRec.iDay(ilLoop) = Val(slDGSave(3 + ilLoop))
                                End If
                            Next ilLoop
                        End If
                    Else
                        If (blFromOverrides) And ((tgClfCntr(ilLnRowNo - 1).sOwnership = "B") Or (tgClfCntr(ilLnRowNo - 1).sOwnership = "D")) Then
                            For ilLoop = 0 To 6 Step 1
                                'If (imInitOvDays(ilLoop) <> ilAllowedDays(ilLoop + ilLIndex)) Or (imInitOvDays(ilLoop) = -1) Or (ilAllowedDays(ilLoop + ilLIndex) = -1) Then
                                    tgCffCntr(ilCff).CffRec.iDay(ilLoop) = Val(slDGSave(3 + ilLoop))
                                'End If
                            Next ilLoop
                        Else
                            'ilNonZeroDaily = -1
                            'For ilLoop = 0 To 6 Step 1
                            '    If (imInitOvDays(ilLoop) <> ilAllowedDays(ilLoop + ilLIndex)) Or (imInitOvDays(ilLoop) = -1) Or (ilAllowedDays(ilLoop + ilLIndex) = -1) Then
                            '        If imOrigPkDailySpots(ilLoop) > 0 Then
                            '            tgCffCntr(ilCff).CffRec.iDay(ilLoop) = (CLng(tgCffCntr(ilCff).CffRec.iDay(ilLoop)) * Val(slDGSave(3 + ilLoop))) / imOrigPkDailySpots(ilLoop)
                            '            If tgCffCntr(ilCff).CffRec.iDay(ilLoop) <> 0 Then
                            '                ilNonZeroDaily = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                            '            End If
                            '        End If
                            '    End If
                            'Next ilLoop
                            'If ilNonZeroDaily <> -1 Then
                            '    For ilLoop = 0 To 6 Step 1
                            '        If (imInitOvDays(ilLoop) <> ilAllowedDays(ilLoop + ilLIndex)) Or (imInitOvDays(ilLoop) = -1) Or (ilAllowedDays(ilLoop + ilLIndex) = -1) Then
                            '            If (imOrigPkDailySpots(ilLoop) = 0) And (Val(slDGSave(3 + ilLoop)) > 0) Then
                            '                tgCffCntr(ilCff).CffRec.iDay(ilLoop) = ilNonZeroDaily
                            '            End If
                            '        End If
                            '    Next ilLoop
                            'End If
                            For ilLoop = 0 To 6 Step 1
                                If (ilAllowedDays(ilLoop + ilLIndex) > 0) Or (imInitOvDays(ilLoop) = -1) Or (ilAllowedDays(ilLoop + ilLIndex) = -1) Then
                                    tgCffCntr(ilCff).CffRec.iDay(ilLoop) = Val(slDGSave(3 + ilLoop))
                                End If
                            Next ilLoop
                        End If
                    End If
                    For ilLoop = 0 To 6 Step 1
                        smLnSave(7 + ilLoop, ilLnRowNo) = Trim$(str$(tgCffCntr(ilCff).CffRec.iDay(ilLoop)))
                    Next ilLoop
                Else
                    For ilLoop = 0 To 6 Step 1
                        If ilAllowedDays(ilLoop + ilLIndex) = 1 Then
                            tgCffCntr(ilCff).CffRec.iDay(ilLoop) = 0
                            'tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "N"
                        ElseIf ilAllowedDays(ilLoop + ilLIndex) = 0 Then
                            tgCffCntr(ilCff).CffRec.iDay(ilLoop) = 1
                        End If
                    Next ilLoop
                End If
            Else
                llMoFlStartdate = llFlStartDate
                Do While gWeekDayLong(llMoFlStartdate) <> 0
                    llMoFlStartdate = llMoFlStartdate - 1
                Loop
                For llDate = llMoFlStartdate To llFlEndDate Step 1
                    ilDay = gWeekDayLong(llDate)
                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        'If ilAllowedDays(ilDay + ilLIndex) = 1 Then
                        '    tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                        'End If
                        If ilPkLnRowNo = ilLnRowNo Then
                            tgCffCntr(ilCff).CffRec.iDay(ilDay) = Val(slDGSave(3 + ilDay))
                        Else
                            If imOrigPkDailySpots(ilLoop) > 0 Then
                                tgCffCntr(ilCff).CffRec.iDay(ilDay) = (CLng(tgCffCntr(ilCff).CffRec.iDay(ilDay)) * Val(slDGSave(3 + ilDay))) / imOrigPkDailySpots(ilDay)
                            Else
                                tgCffCntr(ilCff).CffRec.iDay(ilDay) = Val(slDGSave(3 + ilDay))
                            End If
                        End If
                        smLnSave(7 + ilDay, ilLnRowNo) = Trim$(str$(tgCffCntr(ilCff).CffRec.iDay(ilDay)))
                    Else
                        If ilAllowedDays(ilDay + ilLIndex) = 1 Then
                            tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                        ElseIf ilAllowedDays(ilDay + ilLIndex) = 0 Then
                            tgCffCntr(ilCff).CffRec.iDay(ilDay) = 1
                        End If
                    End If
                Next llDate
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
End Sub

Sub mSetFlightPriceForWk(ilLnRowNo As Integer, llDate As Long, slPrice As String, ilOVDays() As Integer, tlRcf As RCF, ilVefCode As Integer, imDGSave() As Integer, ilLnTotalType As Integer)
    Dim slDate As String
    Dim llWkPrice As Long
    Dim slStr As String
    Dim ilCff As Integer
    Dim tlCff As CFF
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llSpotCount As Long
    Dim ilDay As Integer
    Dim ilLastCff As Integer
    Dim slInPrice As String
    Dim llPrice As Long
    Dim llWkEndDate As Long
    Dim llSpots As Long
    Dim ilLoop As Integer
    Dim slWkPrice As String
    Dim slTotalPrice As String
    'Dim ilTotalSpots As Integer
    Dim llTotalSpots As Long
    Dim llAvgPrice As Long
    Dim slAvgPrice As String
    Dim slRound As String
    Dim slPriceType As String
    Dim llRCPrice As Long
    Dim llTPrice As Long    'Temp price, but not used but required in mGetFlightSpots call
    Dim slLineType As String
    Dim llSDate As Long
    Dim llEDate As Long
    Dim ilMonth As Integer
    Dim ilYear As Integer
    Dim llWkNoSpots As Long
    ReDim ilDays(0 To 6) As Integer
    Dim slWDFlag As String
    ReDim ilDailySpots(0 To 6) As Integer

    slInPrice = Trim$(slPrice)
    slTotalPrice = ".00"
    llTotalSpots = 0
    slLineType = mGetLineType(ilLnRowNo)
    'If (igFreezeState = 1) And (slLineType = "H") Then
    '    Exit Sub
    'End If
    If slInPrice = Contract.lbcPriceType(0).List(2) Then  'Use average rate card price
        '10843 remove dead code
'        If (tgSpf.sCLnStdQt = "Y") And (ilLnTotalType > 1) Then
'            llSDate = lmHSStartDate + 7 * (imHSCurWkNo - 1)
'            'llEDate = lmHSStartDate + 7 * (imHSEndWkNo) - 1
'            'If llSDate + 7 * 13 - 1 < llEDate Then
'            '    llEDate = llSDate + 7 * 13 - 1
'            'End If
'            slDate = Format(llSDate, "m/d/yy")
'            gObtainMonthYear 0, slDate, ilMonth, ilYear
'            slDate = Trim$(str$(3 * ((ilMonth - 1) \ 3) + 1)) & "/15/" & Trim$(str$(ilYear))
'            llSDate = gDateValue(gObtainStartStd(slDate))
'            llEDate = llSDate + 7 * 12 - 1
'            ilMonth = (ilMonth - 1) \ 3 + 1
'            llSpots = ilMonth
'            Do While llSpots = ilMonth
'                llEDate = llEDate + 7
'                slDate = Format(llEDate, "m/d/yy")
'                gObtainMonthYear 0, slDate, ilMonth, ilYear
'                ilMonth = (ilMonth - 1) \ 3 + 1
'            Loop
'            llEDate = llEDate - 7
'            llSpots = 0
'        Else
            llSDate = 0
            llEDate = 999999999
 '       End If
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                llDate = llFlStartDate
                llWkEndDate = llDate + 6
                If llWkEndDate > llFlEndDate Then
                    llWkEndDate = llFlEndDate
                End If
                Do
                    If (llDate >= llSDate) And (llDate <= llEDate) Then
                        slDate = Format$(llDate, "m/d/yy")
                        'If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        '    llSpots = 0
                        '    For ilLoop = gWeekDayLong(llDate) To gWeekDayLong(llWkEndDate) Step 1
                        '        llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                        '    Next ilLoop
                        'Else
                        '    llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                        'End If
                        mGetFlightDaysForDate ilLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llSpots
                        llWkPrice = mComputeRCWkPrice(tlRcf.iCode, imLnSave(1, ilLnRowNo), slDate, ilVefCode, ilLnRowNo)
                        If llWkPrice > 0 Then
                            slStr = mRCPriceAdjust(tlRcf, llWkPrice, False, ilLnRowNo, imDGSave(), 0, 0, Val(smLnSave(16, ilLnRowNo)), llSpots, ilDays(), imLnSave(1, ilLnRowNo))
                            slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                            llWkPrice = gStrDecToLong(slStr, 0)
                        End If
                        'llTotalPrice = llTotalPrice + llSpots * llWkPrice
                        If slLineType <> "E" Then
                            slWkPrice = gMulStr(gLongToStrDec(llSpots, 0), gLongToStrDec(llWkPrice, 2))
                            slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                            llTotalSpots = llTotalSpots + llSpots
                        Else
                            slWkPrice = gLongToStrDec(llWkPrice, 2)
                            slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                            llTotalSpots = llTotalSpots + 1
                        End If
                    ElseIf llDate > llEDate Then
                        Exit Do
                    End If
                    llDate = llDate + 1
                    Do While gWeekDayLong(llDate) <> 0
                        llDate = llDate + 1
                    Loop
                    llWkEndDate = llDate + 6
                    If llWkEndDate > llFlEndDate Then
                        llWkEndDate = llFlEndDate
                    End If
                Loop While llDate <= llFlEndDate
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
        If llTotalSpots > 0 Then
            llAvgPrice = gStrDecToInt(gDivStr(slTotalPrice, gLongToStrDec(llTotalSpots, 0)), 0)   'llTotalPrice / ilTotalSpots
        Else
            llAvgPrice = 0
        End If
        slAvgPrice = Trim$(str$(llAvgPrice)) & ".00"
        If tlRcf.iCode <> 0 Then
            slRound = gLongToStrDec(tlRcf.lRound, 2)
            slAvgPrice = gRoundStr(slAvgPrice, slRound, 2)
        End If
    End If
    If slInPrice = "" Then  'Use adjacent price
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                If (llDate < llFlStartDate) And (slInPrice <> "") Then
                    Exit Do
                End If
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "N"
                        slInPrice = Contract.lbcPriceType(0).List(3)
                    Case "M"
                        slInPrice = Contract.lbcPriceType(0).List(4)
                    Case "B"
                        slInPrice = Contract.lbcPriceType(0).List(5)
                    Case "S"
                        slInPrice = Contract.lbcPriceType(0).List(6)
                    Case "P"
                        slInPrice = Contract.lbcPriceType(0).List(7)
                    Case "R"
                        slInPrice = Contract.lbcPriceType(0).List(8)
                    Case "A"
                        slInPrice = Contract.lbcPriceType(0).List(9)
                    Case "T"
                        If tgCffCntr(ilCff).CffRec.lActPrice = tgCffCntr(ilCff).CffRec.lPropPrice Then
                            slInPrice = Contract.lbcPriceType(0).List(1)
                        Else
                            slInPrice = gLongToStrDec(tgCffCntr(ilCff).CffRec.lActPrice, 2)
                        End If
                End Select
                If (llDate < llFlStartDate) Then
                    Exit Do
                End If
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
    End If
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    llSpots = 0
                    For ilLoop = gWeekDayLong(llDate) To gWeekDayLong(llWkEndDate) Step 1
                        llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                    Next ilLoop
                Else
                    llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                Exit Do
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    ilLastCff = 0
    '6/6/16: Replaced GoSub. Moved code here as only used by one call
    'GoSub GetPrice
    mGetFlightDaysForDate ilLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llSpots
    slDate = Format$(llDate, "m/d/yy")
    llWkPrice = mComputeRCWkPrice(tlRcf.iCode, imLnSave(1, ilLnRowNo), slDate, ilVefCode, ilLnRowNo)
    If llWkPrice > 0 Then
        slStr = mRCPriceAdjust(tlRcf, llWkPrice, False, ilLnRowNo, imDGSave(), 0, 0, Val(smLnSave(16, ilLnRowNo)), llSpots, ilDays(), imLnSave(1, ilLnRowNo))
        llWkPrice = gStrDecToLong(slStr, 0)
    End If
    llRCPrice = llWkPrice
    If slInPrice = Contract.lbcPriceType(0).List(1) Then  'Use rate card price
        slPriceType = "T"
        llPrice = 100 * llWkPrice
    ElseIf slInPrice = Contract.lbcPriceType(0).List(2) Then  'Use average rate card price
        slPriceType = "T"
        llPrice = gStrDecToLong(slAvgPrice, 2)  'llAvgPrice
    Else
        gFindMatch slInPrice, 1, Contract.lbcPriceType(0)
        If gLastFound(Contract.lbcPriceType(0)) > 0 Then
            Contract.lbcPriceType(0).ListIndex = gLastFound(Contract.lbcPriceType(0))
            llPrice = 0
            Select Case Contract.lbcPriceType(0).ListIndex
                Case 3  'N/C
                    slPriceType = "N"
                Case 4  'MG
                    slPriceType = "M"
                Case 5  'Bonus
                    slPriceType = "B"
                Case 6  'Spinoff
                    slPriceType = "S"
                Case 7  'Package
                    slPriceType = "P"
                Case 8  'Recaptureable
                    slPriceType = "R"
                Case 9  'ADU
                    slPriceType = "A"
            End Select
        Else
            slPriceType = "T"
            llPrice = gStrDecToLong(slInPrice, 2)
        End If
    End If
    If ilCff = -1 Then
        mGetFlightDaysForDate ilLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
        If slWDFlag = "D" Then
            mAddWeek ilLastCff, ilLnRowNo, llDate, slWDFlag, llSpots, ilDailySpots()
        Else
            mAddWeek ilLastCff, ilLnRowNo, llDate, slWDFlag, llSpotCount, ilDays()
        End If
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                    tgCffCntr(ilCff).CffRec.sPriceType = "T"
                    If tgCffCntr(ilCff).CffRec.lActPrice <> llPrice Then
                        tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                    End If
                    tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                    tgCffCntr(ilCff).CffRec.lPropPrice = llRCPrice
                    Exit Sub
                End If
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
    Else
        'If tgCffCntr(ilCff).CffRec.lActPrice = llPrice Then
        If (tgCffCntr(ilCff).CffRec.lActPrice = llPrice) And (tgCffCntr(ilCff).CffRec.sPriceType <> "*") Then
            Exit Sub
        End If
        llSpotCount = mGetFlightSpots(ilLnRowNo, llDate, llTPrice)
        tlCff = tgCffCntr(ilCff).CffRec
        If llFlEndDate - llFlStartDate >= 7 Then
            mGetFlightDaysForDate ilLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
            If slWDFlag = "D" Then
                mAddWeek ilLastCff, ilLnRowNo, llDate, slWDFlag, llSpotCount, ilDailySpots()
            Else
                mAddWeek ilLastCff, ilLnRowNo, llDate, slWDFlag, llSpotCount, ilDays()
            End If
        End If
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                llFlStartDate = tgCffCntr(ilCff).lStartDate
                llFlEndDate = tgCffCntr(ilCff).lEndDate
                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                    'tgCffCntr(ilCff).CffRec = tlCff
                    tgCffCntr(ilCff).CffRec.sDyWk = tlCff.sDyWk
                    If tgCffCntr(ilCff).CffRec.iSpotsWk <> tlCff.iSpotsWk Then
                        tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                    End If
                    tgCffCntr(ilCff).CffRec.iSpotsWk = tlCff.iSpotsWk
                    For ilDay = 0 To 6 Step 1
                        If tgCffCntr(ilCff).CffRec.iDay(ilDay) <> tlCff.iDay(ilDay) Then
                            tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                        End If
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = tlCff.iDay(ilDay)
                    Next ilDay
                    tgCffCntr(ilCff).CffRec.sPriceType = slPriceType    '"T"
                    If slLineType <> "E" Then
                        If tgCffCntr(ilCff).CffRec.lActPrice = llPrice Then
                            tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                        End If
                        tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                    Else
                        If llSpotCount > 0 Then
                            If tgCffCntr(ilCff).CffRec.lActPrice = llPrice Then
                                tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                            End If
                            tgCffCntr(ilCff).CffRec.lActPrice = llPrice
                        Else
                            If tgCffCntr(ilCff).CffRec.lActPrice = 0 Then
                                tgClfCntr(ilLnRowNo - 1).sLineChgd = "Y"
                            End If
                            tgCffCntr(ilCff).CffRec.lActPrice = 0
                        End If
                    End If
                    tgCffCntr(ilCff).CffRec.lPropPrice = llRCPrice
                    Exit Sub
                End If
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
    End If
    Exit Sub
'GetPrice:
'    mGetFlightDaysForDate ilLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llSpots
'    slDate = Format$(llDate, "m/d/yy")
'    llWkPrice = mComputeRCWkPrice(tlRcf.iCode, imLnSave(1, ilLnRowNo), slDate, ilVefCode, ilLnRowNo)
'    If llWkPrice > 0 Then
'        slStr = mRCPriceAdjust(tlRcf, llWkPrice, False, ilLnRowNo, imDGSave(), 0, 0, Val(smLnSave(16, ilLnRowNo)), llSpots, ilDays(), imLnSave(1, ilLnRowNo))
'        llWkPrice = gStrDecToLong(slStr, 0)
'    End If
'    llRCPrice = llWkPrice
'    If slInPrice = Contract.lbcPriceType(0).List(1) Then  'Use rate card price
'        slPriceType = "T"
'        llPrice = 100 * llWkPrice
'    ElseIf slInPrice = Contract.lbcPriceType(0).List(2) Then  'Use average rate card price
'        slPriceType = "T"
'        llPrice = gStrDecToLong(slAvgPrice, 2)  'llAvgPrice
'    Else
'        gFindMatch slInPrice, 1, Contract.lbcPriceType(0)
'        If gLastFound(Contract.lbcPriceType(0)) > 0 Then
'            Contract.lbcPriceType(0).ListIndex = gLastFound(Contract.lbcPriceType(0))
'            llPrice = 0
'            Select Case Contract.lbcPriceType(0).ListIndex
'                Case 3  'N/C
'                    slPriceType = "N"
'                Case 4  'MG
'                    slPriceType = "M"
'                Case 5  'Bonus
'                    slPriceType = "B"
'                Case 6  'Spinoff
'                    slPriceType = "S"
'                Case 7  'Package
'                    slPriceType = "P"
'                Case 8  'Recaptureable
'                    slPriceType = "R"
'                Case 9  'ADU
'                    slPriceType = "A"
'            End Select
'        Else
'            slPriceType = "T"
'            llPrice = gStrDecToLong(slInPrice, 2)
'        End If
'    End If
'    Return
End Sub

Function mSetHdVeh(hlVsf As Integer, ilStep1Index As Integer)
    ReDim tlNewVsf(0 To 1) As VSF    'Combo Vehicle
    Dim ilNoFac As Integer
    Dim ilOldCount As Integer
    ReDim tlOldVsf(0 To 1) As VSF
    Dim ilRecLen As Integer     'Vsf record length
    Dim tlVsfSrchKey As LONGKEY0
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilFound As Integer
    Dim ilMatch As Integer
    Dim ilRes As Integer
    Dim ilRet As Integer
    Dim ilClf As Integer
    Dim ilVef As Integer
    Dim ilVsf As Integer
    Dim ilVpf As Integer
    Dim ilOldVsf As Integer
    Dim ilCount As Integer
    Dim llLkVsfCode As Long
    Dim ilFoundSBF As Integer
    Dim ilFoundCPM As Integer
    Dim llRow As Long

    tgChfCntr.sPodSpotDefined = "N"
    ilNoFac = 0
    ilCount = 0
    ilIndex = LBound(tlNewVsf)
    ilRecLen = Len(tlOldVsf(0))  'btrRecordLength(hlVpf)  'Get and save record length
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        'Ignore package vehicles
        If (tgClfCntr(ilClf).iStatus >= 0) And (tgClfCntr(ilClf).ClfRec.sType <> "O") And (tgClfCntr(ilClf).ClfRec.sType <> "A") And (tgClfCntr(ilClf).ClfRec.sType <> "E") Then
            ilVpf = gBinarySearchVpf(tgClfCntr(ilClf).ClfRec.iVefCode)
            If ilVpf <> -1 Then
                tgChfCntr.sPodSpotDefined = "Y"
            End If
            ilFound = False
            For ilVsf = LBound(tlNewVsf) To UBound(tlNewVsf) - 1 Step 1
                For ilLoop = LBound(tlNewVsf(0).iFSCode) To UBound(tlNewVsf(0).iFSCode) Step 1
                    If tlNewVsf(ilVsf).iFSCode(ilLoop) > 0 Then
                        If tlNewVsf(ilVsf).iFSCode(ilLoop) = tgClfCntr(ilClf).ClfRec.iVefCode Then
                            ilFound = True
                        End If
                    Else
                        Exit For
                    End If
                Next ilLoop
            Next ilVsf
            If Not ilFound Then
                If ilNoFac > UBound(tlNewVsf(0).iFSCode) Then
                    'ilRes = MsgBox("Max of" & Trim$(Str$(UBound(tlNewVsf.iFSCode) + 1)) & " Vehicle for contract exceded", vbOkOnly + vbExclamation, "Incomplete")
                    'mSetHdVeh = False
                    'Exit Function
                    ilNoFac = 0
                    ilIndex = ilIndex + 1
                    ReDim Preserve tlNewVsf(0 To UBound(tlNewVsf) + 1) As VSF
                End If
                tlNewVsf(ilIndex).iFSCode(ilNoFac) = tgClfCntr(ilClf).ClfRec.iVefCode
                ilNoFac = ilNoFac + 1
                ilCount = ilCount + 1
            End If
        End If
    Next ilClf
    ilFoundSBF = False
    For ilClf = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
        If tgIBSbf(ilClf).iStatus >= 0 Then
            If (tgIBSbf(ilClf).iStatus = 0) Or (tgIBSbf(ilClf).iStatus = 1) Then 'New selected
                ilFoundSBF = True
                ilFound = False
                For ilVsf = LBound(tlNewVsf) To UBound(tlNewVsf) - 1 Step 1
                    For ilLoop = LBound(tlNewVsf(0).iFSCode) To UBound(tlNewVsf(0).iFSCode) Step 1
                        If tlNewVsf(ilVsf).iFSCode(ilLoop) > 0 Then
                            If tlNewVsf(ilVsf).iFSCode(ilLoop) = tgIBSbf(ilClf).SbfRec.iBillVefCode Then
                                ilFound = True
                            End If
                        Else
                            Exit For
                        End If
                    Next ilLoop
                Next ilVsf
                If Not ilFound Then
                    If ilNoFac > UBound(tlNewVsf(0).iFSCode) Then
                        'ilRes = MsgBox("Max of" & Trim$(Str$(UBound(tlNewVsf.iFSCode) + 1)) & " Vehicle for contract exceded", vbOkOnly + vbExclamation, "Incomplete")
                        'mSetHdVeh = False
                        'Exit Function
                        ilNoFac = 0
                        ilIndex = ilIndex + 1
                        ReDim Preserve tlNewVsf(0 To UBound(tlNewVsf) + 1) As VSF
                    End If
                    tlNewVsf(ilIndex).iFSCode(ilNoFac) = tgIBSbf(ilClf).SbfRec.iBillVefCode
                    ilNoFac = ilNoFac + 1
                    ilCount = ilCount + 1
                End If
            ElseIf tgIBSbf(ilClf).iStatus = 2 Then
                'ilFoundSBF = True
            End If
        End If
    Next ilClf
    ilFoundCPM = False
    For llRow = Contract.grdCPMBuy.FixedRows To Contract.grdCPMBuy.rows - 1 Step 1
        If (Contract.grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
            ilFoundCPM = True
            ilFound = False
            For ilVsf = LBound(tlNewVsf) To UBound(tlNewVsf) - 1 Step 1
                For ilLoop = LBound(tlNewVsf(0).iFSCode) To UBound(tlNewVsf(0).iFSCode) Step 1
                    If tlNewVsf(ilVsf).iFSCode(ilLoop) > 0 Then
                        If tlNewVsf(ilVsf).iFSCode(ilLoop) = Val(Contract.grdCPMBuy.TextMatrix(llRow, CPMVEFCODE)) Then
                            ilFound = True
                        End If
                    Else
                        Exit For
                    End If
                Next ilLoop
            Next ilVsf
            If Not ilFound Then
                If ilNoFac > UBound(tlNewVsf(0).iFSCode) Then
                    'ilRes = MsgBox("Max of" & Trim$(Str$(UBound(tlNewVsf.iFSCode) + 1)) & " Vehicle for contract exceded", vbOkOnly + vbExclamation, "Incomplete")
                    'mSetHdVeh = False
                    'Exit Function
                    ilNoFac = 0
                    ilIndex = ilIndex + 1
                    ReDim Preserve tlNewVsf(0 To UBound(tlNewVsf) + 1) As VSF
                End If
                tlNewVsf(ilIndex).iFSCode(ilNoFac) = Val(Contract.grdCPMBuy.TextMatrix(llRow, CPMVEFCODE))
                ilNoFac = ilNoFac + 1
                ilCount = ilCount + 1
            End If
        End If
    Next llRow
    
    If ilCount = 0 Then
        '1-14-05 allow ntr contract without lines and all ntr transaction removed to be saved
        If ((UBound(tgClfCntr) < 1) And (UBound(tgDelClf) >= 1)) Or (tgChfCntr.sNTRDefined = "Y") Or (tgChfCntr.sAdServerDefined = "Y") Then  'All lines delete
            '10/19/15: Jim wants the NTR defined flag reset on each version independent of the previous versions.
            'If (Not ilFoundSBF) And (smOrigNTRDefined <> "Y") Then
            '    tgChfCntr.sNTRDefined = "N"
            'End If
            If ilFoundSBF Then
                tgChfCntr.sNTRDefined = "Y"
            Else
                tgChfCntr.sNTRDefined = "N"
            End If
            If ilFoundCPM Then
                tgChfCntr.sAdServerDefined = "Y"
            Else
                tgChfCntr.sAdServerDefined = "N"
            End If
            tgChfCntr.lVefCode = 0
            mSetHdVeh = True
            Exit Function
        End If
        '10/19/15: Jim wants the NTR defined flag reset on each version independent of the previous versions.
        If ilFoundSBF Then
            tgChfCntr.sNTRDefined = "Y"
        Else
            tgChfCntr.sNTRDefined = "N"
        End If
        If ilFoundCPM Then
            tgChfCntr.sAdServerDefined = "Y"
        Else
            tgChfCntr.sAdServerDefined = "N"
        End If
        '2-4-05 allow contract without lines or ntr transaction to be saved if Changing an Order
        If (UBound(tgClfCntr) < 1) And (((sgCntrScreen = "Orders") And (ilStep1Index = 2)) Or ((sgCntrScreen <> "Orders") And (ilStep1Index = 4))) Then  'All lines delete
            tgChfCntr.lVefCode = 0
            mSetHdVeh = True
            Exit Function
        End If
        'CPM only buys
        llRow = Contract.grdCPMBuy.FixedRows
        If (UBound(tgClfCntr) < 1) And (Contract.grdCPMBuy.TextMatrix(llRow, CPMVEHICLE) <> "") And (Contract.grdCPMBuy.TextMatrix(llRow, CPMDAYPART) <> "") Then
            tgChfCntr.lVefCode = 0
            mSetHdVeh = True
            Exit Function
        End If
        If UBound(tgClfCntr) <= 1 Then
            ilRes = MsgBox("Line definition not complete or no lines defined", vbOKOnly + vbExclamation, "Incomplete")
        Else
            ilRes = MsgBox("No Vehicle defined for the lines", vbOKOnly + vbExclamation, "Incomplete")
        End If
        mSetHdVeh = False
        Exit Function
    ElseIf ilCount = 1 Then
        '10/19/15: Jim wants the NTR defined flag reset on each version independent of the previous versions.
        'If (Not ilFoundSBF) And (smOrigNTRDefined <> "Y") Then
        '    tgChfCntr.sNTRDefined = "N"
        'End If
        If ilFoundSBF Then
            tgChfCntr.sNTRDefined = "Y"
        Else
            tgChfCntr.sNTRDefined = "N"
        End If
        If ilFoundCPM Then
            tgChfCntr.sAdServerDefined = "Y"
        Else
            tgChfCntr.sAdServerDefined = "N"
        End If
        tgChfCntr.lVefCode = tlNewVsf(0).iFSCode(0)
    Else
        '10/19/15: Jim wants the NTR defined flag reset on each version independent of the previous versions.
        'If (Not ilFoundSBF) And (smOrigNTRDefined <> "Y") Then
        '    tgChfCntr.sNTRDefined = "N"
        'End If
        If ilFoundSBF Then
            tgChfCntr.sNTRDefined = "Y"
        Else
            tgChfCntr.sNTRDefined = "N"
        End If
        If ilFoundCPM Then
            tgChfCntr.sAdServerDefined = "Y"
        Else
            tgChfCntr.sAdServerDefined = "N"
        End If
        For ilVsf = LBound(tlNewVsf) To UBound(tlNewVsf) - 1 Step 1
            For ilVef = LBound(tlNewVsf(0).iFSCode) To UBound(tlNewVsf(0).iFSCode) Step 1
                If tlNewVsf(ilVsf).iFSCode(ilVef) > 0 Then
                    For ilLoop = LBound(tgCShtTitle) To UBound(tgCShtTitle) - 1 Step 1
                        If tgCShtTitle(ilLoop).iVefCode = tlNewVsf(ilVsf).iFSCode(ilVef) Then
                            tlNewVsf(ilVsf).lFSComm(ilVef) = tgCShtTitle(ilLoop).lSifCode
                            Exit For
                        End If
                    Next ilLoop
                End If
            Next ilVef
        Next ilVsf
        'If igUserByVeh Then
            'Test if any combo exist that uses the same Vehicles
            ilFound = False
            If tgChfCntr.lVefCode < 0 Then
                tlVsfSrchKey.lCode = -tgChfCntr.lVefCode
                ilRet = btrGetEqual(hlVsf, tlOldVsf(0), ilRecLen, tlVsfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet = BTRV_ERR_NONE Then
                    llLkVsfCode = tlOldVsf(0).lLkVsfCode
                    Do While llLkVsfCode > 0
                        tlVsfSrchKey.lCode = llLkVsfCode
                        ilRet = btrGetEqual(hlVsf, tlOldVsf(UBound(tlOldVsf)), ilRecLen, tlVsfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet <> BTRV_ERR_NONE Then
                            Exit Do
                        End If
                        llLkVsfCode = tlOldVsf(UBound(tlOldVsf)).lLkVsfCode
                        ReDim Preserve tlOldVsf(0 To UBound(tlOldVsf) + 1) As VSF
                    Loop
            'ilRet = btrGetFirst(hlVsf, tlOldVsf, ilRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            'Do While ilRet = BTRV_ERR_NONE
                    ilFound = False
                    If tlOldVsf(0).sType = "F" Then
                        ilOldCount = 0
                        For ilVsf = LBound(tlOldVsf) To UBound(tlOldVsf) - 1 Step 1
                            For ilLoop = LBound(tlOldVsf(0).iFSCode) To UBound(tlOldVsf(0).iFSCode) Step 1
                                If tlOldVsf(ilVsf).iFSCode(ilLoop) > 0 Then
                                    ilOldCount = ilOldCount + 1
                                Else
                                    Exit For
                                End If
                            Next ilLoop
                        Next ilVsf
                        If ilOldCount = ilCount Then
                            For ilVsf = LBound(tlNewVsf) To UBound(tlNewVsf) - 1 Step 1
                                For ilLoop = LBound(tlNewVsf(0).iFSCode) To UBound(tlNewVsf(0).iFSCode) Step 1
                                    If tlNewVsf(ilVsf).iFSCode(ilLoop) > 0 Then
                                        ilMatch = False
                                        For ilOldVsf = LBound(tlOldVsf) To UBound(tlOldVsf) - 1 Step 1
                                            For ilIndex = LBound(tlOldVsf(0).iFSCode) To UBound(tlOldVsf(0).iFSCode) Step 1
                                                If (tlNewVsf(ilVsf).iFSCode(ilLoop) = tlOldVsf(ilOldVsf).iFSCode(ilIndex)) And (tlNewVsf(ilVsf).lFSComm(ilLoop) = tlOldVsf(ilOldVsf).lFSComm(ilIndex)) Then
                                                    ilMatch = True
                                                    Exit For
                                                End If
                                            Next ilIndex
                                            If ilMatch Then
                                                Exit For
                                            End If
                                        Next ilOldVsf
                                        If Not ilMatch Then
                                            Exit For
                                        End If
                                    Else
                                        ilMatch = True
                                    End If
                                Next ilLoop
                                If Not ilMatch Then
                                    Exit For
                                End If
                            Next ilVsf
                        Else
                            ilMatch = False
                        End If
                        If ilMatch Then
                            ilFound = True
                            'Exit Do
                        End If
                    End If
                End If
            End If
                'ilRet = btrGetNext(hlVsf, tlOldVsf, ilRecLen, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'Loop
            'If ilRet <> BTRV_ERR_END_OF_FILE Then
            '    On Error GoTo mSetHdVehErr
            '    gBtrvErrorMsg ilRet, "mSetHdVeh (btrGetEqual)", Contract
            '    On Error GoTo 0
            'End If
            If ilFound Then
                tgChfCntr.lVefCode = -tlOldVsf(0).lCode
            Else
                llLkVsfCode = 0
                For ilVsf = UBound(tlNewVsf) - 1 To 0 Step -1
                    tlNewVsf(ilVsf).lCode = 0
                    tlNewVsf(ilVsf).sType = "F"
                    tlNewVsf(ilVsf).sName = ""
                    'tlNewVsf.sMktName = ""
                    tlNewVsf(ilVsf).lLkVsfCode = llLkVsfCode
                    For ilLoop = LBound(tlNewVsf(0).lFSComm) To UBound(tlNewVsf(0).lFSComm) Step 1
                        'slStr = ""
                        'gStrToPDN slStr, 4, 4, tlNewVsf.sFSComm(ilLoop)
                        'tlNewVsf.lFSComm(ilLoop) = 0
                        tlNewVsf(ilVsf).iNoSpots(ilLoop) = 0
                    Next ilLoop
                    tlNewVsf(ilVsf).sSource = "S"
                    tlNewVsf(ilVsf).iMerge = 0
                    ilRet = btrInsert(hlVsf, tlNewVsf(ilVsf), ilRecLen, INDEXKEY0)
                    On Error GoTo mSetHdVehErr
                    gBtrvErrorMsg ilRet, "mSetHdVeh (btrInsert)", Contract
                    On Error GoTo 0
                    llLkVsfCode = tlNewVsf(ilVsf).lCode    '.lLkVsfCode chged to .lcode
                Next ilVsf
                tgChfCntr.lVefCode = -tlNewVsf(0).lCode
            End If
        'Else
        '    tgChfCntr.iVefCode = 0
        'End If
    End If
    mSetHdVeh = True
    Exit Function
mSetHdVehErr:
    On Error GoTo 0
    mSetHdVeh = False
    Exit Function
End Function

Sub mSetHiddenOverrides(ilPkLnRowNo As Integer, ilStdOvChg As Integer, ilDPIndex As Integer, ilOVINDEX As Integer, slDGSave() As String, ilLnTotalType As Integer, ilPRICEINDEX As Integer)
'
'     ilStdOvChg(I)- Bit Map: 1= Set Preempt; 2=Set Rank; 4=Set Time; 8=Set Days
'
    Dim slLineType As String
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilRet As Integer
    Dim ilDay As Integer
    Dim ilFound As Integer
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilRdf As Integer
    Dim llSTime As Long
    Dim llETime As Long
    Dim slStr As String
    Dim ilLine As Integer
    Dim ilWDFlag As Integer
    ReDim ilDPDays(0 To 6) As Integer
    ReDim ilDays(0 To 6) As Integer
    ReDim ilOVDays(0 To 6) As Integer
    'If (igFreezeState = 1) Then
    '    Exit Sub
    'End If
    If ilStdOvChg = 0 Then
        Exit Sub
    End If
    slLineType = mGetLineType(ilPkLnRowNo)
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        Exit Sub
    End If
    If (imLnSave(8, ilPkLnRowNo) <> 0) Or ((ilStdOvChg And &H1) = &H1) Or ((ilStdOvChg And &H2) = &H2) Or ((ilStdOvChg And &H4) = &H4) Or ((ilStdOvChg And &H10) = &H10) Or ((ilStdOvChg And &H20) = &H20) Then
        ilRet = MsgBox("Copy Package overrides to Hidden Lines", vbYesNo + vbDefaultButton2 + vbQuestion, "Override")
    Else
        ilRet = vbYes
    End If
    If ilRet = vbYes Then
        ilWDFlag = imLnSave(8, ilPkLnRowNo)
        If (ilStdOvChg And &H4) = &H4 Then
            llOvStartTime = gTimeToLong(smLnSave(2, ilPkLnRowNo), False)
            llOvEndTime = gTimeToLong(smLnSave(3, ilPkLnRowNo), True)
        Else
            llOvStartTime = 0
            llOvEndTime = 0
        End If
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
                ilLine = tgPackLn(ilLoop).iIndex
                Do While ilLine >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilLine).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                            'Preempt
                            If (ilStdOvChg And &H1) = &H1 Then
                                imLnSave(6, ilClf + 1) = imLnSave(6, ilPkLnRowNo)
                            End If
                            'Rank
                            If (ilStdOvChg And &H2) = &H2 Then
                                imLnSave(19, ilClf + 1) = imLnSave(19, ilPkLnRowNo)
                            End If
                            'BB Open
                            If (ilStdOvChg And &H10) = &H10 Then
                                imLnSave(20, ilClf + 1) = imLnSave(20, ilPkLnRowNo)
                            End If
                            'BB Close
                            If (ilStdOvChg And &H20) = &H20 Then
                                imLnSave(21, ilClf + 1) = imLnSave(21, ilPkLnRowNo)
                            End If
                            'Live/Recorded
                            If (ilStdOvChg And &H40) = &H40 Then
                                imLnSave(31, ilClf + 1) = imLnSave(31, ilPkLnRowNo)
                            End If
                            'Start/End Time
                            If (ilStdOvChg And &H4) = &H4 Then
                                If (tgClfCntr(ilClf).sOwnership = "B") Or (tgClfCntr(ilClf).sOwnership = "D") Then
                                    imLnSave(4, ilClf + 1) = imLnSave(4, ilPkLnRowNo)
                                    smLnSave(2, ilClf + 1) = smLnSave(2, ilPkLnRowNo)
                                    smLnSave(3, ilClf + 1) = smLnSave(3, ilPkLnRowNo)
                                Else
                                    If (imLnSave(4, ilPkLnRowNo) = 1) Then
                                        'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                                        '    If tgMRdf(ilRdf).iCode = imLnSave(1, ilClf + 1) Then
                                            ilRdf = gBinarySearchRdf(imLnSave(1, ilClf + 1))
                                            If ilRdf <> -1 Then
                                                For ilIndex = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1
                                                    If (tgMRdf(ilRdf).iStartTime(0, ilIndex) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilIndex) <> 0) Then
                                                        gUnpackTimeLong tgMRdf(ilRdf).iStartTime(0, ilIndex), tgMRdf(ilRdf).iStartTime(1, ilIndex), False, llSTime
                                                        gUnpackTimeLong tgMRdf(ilRdf).iEndTime(0, ilIndex), tgMRdf(ilRdf).iEndTime(1, ilIndex), True, llETime
                                                        If (llOvStartTime <= llETime) And (llOvEndTime > llSTime) Then
                                                            If llOvStartTime > llSTime Then
                                                                imLnSave(4, ilClf + 1) = imLnSave(4, ilPkLnRowNo)  'Time override
                                                                smLnSave(2, ilClf + 1) = smLnSave(2, ilPkLnRowNo)
                                                            End If
                                                            If llOvEndTime < llETime Then
                                                                If imLnSave(4, ilClf + 1) = 0 Then
                                                                    gUnpackTime tgMRdf(ilRdf).iStartTime(0, ilIndex), tgMRdf(ilRdf).iStartTime(1, ilIndex), "A", "1", smLnSave(2, ilClf + 1)
                                                                End If
                                                                imLnSave(4, ilClf + 1) = imLnSave(4, ilPkLnRowNo)  'Time override
                                                                smLnSave(3, ilClf + 1) = smLnSave(3, ilPkLnRowNo)
                                                            Else
                                                                If imLnSave(4, ilClf + 1) = 1 Then
                                                                    smLnSave(3, ilClf + 1) = gFormatTimeLong(llETime, "A", "1")
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                Next ilIndex
    
                                        '        Exit For
                                            End If
                                        'Next ilRdf
                                    Else
                                        imLnSave(4, ilClf + 1) = 0
                                        smLnSave(2, ilClf + 1) = ""
                                        smLnSave(3, ilClf + 1) = ""
                                    End If
                                End If
                            End If
                            'Days
                            If (ilStdOvChg And &H8) = &H8 Then
                                If (imLnSave(8, ilClf + 1) = 0) And (ilWDFlag = 0) Then
                                    'Package and hidden line defined as Daily
                                    'Daily, reset number per day
                                    For ilDay = 0 To 6 Step 1
                                        ilOVDays(ilDay) = -1    'Force all days to be changed
                                    Next ilDay
                                    mSetFlightDays ilClf + 1, ilOVDays(), ilPkLnRowNo, slDGSave(), True
                                    'mSetLnTotals ilClf + 1
                                    mInitLnTotals ilClf + 1, ilLnTotalType, ilPRICEINDEX
                                ElseIf (imLnSave(8, ilClf + 1) <> 0) And (ilWDFlag <> 0) Then
                                    'Package and hidden line defined as weekly
                                    mDPAllowedDays imLnSave(1, ilClf + 1), ilDPDays()
                                    ilFound = False
                                    For ilDay = 0 To 6 Step 1
                                        If (ilDPDays(ilDay) = True) And (imOvDays(ilDay) = 0) Then
                                            ilFound = True
                                        End If
                                    Next ilDay
                                    If ilFound Or (tgClfCntr(ilClf).sOwnership = "B") Or (tgClfCntr(ilClf).sOwnership = "D") Then
                                        If (tgClfCntr(ilClf).sOwnership = "B") Or (tgClfCntr(ilClf).sOwnership = "D") Then
                                            For ilDay = 0 To 6 Step 1
                                                imLnSave(12 + ilDay, ilClf + 1) = imOvDays(ilDay)
                                                ilOVDays(ilDay) = imOvDays(ilDay)
                                            Next ilDay
                                        Else
                                            For ilDay = 0 To 6 Step 1
                                                If (ilDPDays(ilDay) = True) Then
                                                    imLnSave(12 + ilDay, ilClf + 1) = imOvDays(ilDay)
                                                    ilOVDays(ilDay) = imOvDays(ilDay)
                                                Else
                                                    imLnSave(12 + ilDay, ilClf + 1) = 1 'False
                                                    ilOVDays(ilDay) = 1
                                                End If
                                            Next ilDay
                                        End If
                                        For ilDay = 0 To 6 Step 1
                                            If ((Asc(tgSpf.sOverrideOptions) And &H8) = &H8) Or (imLnSave(24, ilClf + 1) <> -1) Then
                                                If imLnSave(12 + ilDay, ilClf + 1) = 1 Then
                                                    imLnSave(24 + ilDay, ilClf + 1) = 1
                                                Else
                                                    If imLnSave(24 + ilDay, ilClf + 1) = -1 Then
                                                        imLnSave(24 + ilDay, ilClf + 1) = imLnSave(12 + ilDay, ilClf + 1)
                                                    End If
                                                End If
                                            End If
                                        Next ilDay
                                        mSetFlightDays ilClf + 1, ilOVDays(), ilPkLnRowNo, slDGSave(), True
                                    End If
                                End If
                            End If
                            mGetFlightDays ilClf + 1, ilDays()
                            slStr = mSetDPShowName(ilClf + 1, ilDPIndex, ilDays())
                            slStr = " "
                            If imLnSave(8, ilClf + 1) = 0 Then
                                slStr = "D"
                            Else
                                If Left$(tmLnCtrls(ilDPIndex).sShow, 1) = "*" Then
                                    slStr = "*"
                                ElseIf (imLnSave(20, ilClf + 1) > 0) Or (imLnSave(21, ilClf + 1) > 0) Then
                                    slStr = "*"
                                End If
                            End If
                            gSetShow Contract.pbcLine, slStr, tmLnCtrls(ilOVINDEX)
                            smLnShow(ilOVINDEX, ilClf + 1) = tmLnCtrls(ilOVINDEX).sShow
                            Exit For
                        End If
                    Next ilClf
                    ilLine = tgPackLn(ilLine).iIndex
                Loop
                Exit For
            End If
        Next ilLoop
    End If
End Sub

Sub mSetLnTotals(ilLnRowNo As Integer)
    Dim ilCff As Integer
    Dim llDate As Long
    Dim llMoFlStartdate As Long
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim ilDay As Integer
    Dim ilSpots As Integer
    Dim llPrice As Long
    'Dim llTotalPrice As Long
    Dim slTotalPrice As String
    Dim slWkPrice As String
    'Dim ilTotalSpots As Integer
    Dim llTotalSpots As Long

    'llTotalPrice = 0
    slTotalPrice = ".00"
    llTotalSpots = 0
    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            llMoFlStartdate = llFlStartDate
            Do While gWeekDayLong(llMoFlStartdate) <> 0
                llMoFlStartdate = llMoFlStartdate - 1
            Loop
            For llDate = llMoFlStartdate To llFlEndDate Step 7
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    ilSpots = 0
                    For ilDay = 0 To 6 Step 1
                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                            ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                        End If
                    Next ilDay
                Else
                    ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "T"
                        If tgCffCntr(ilCff).CffRec.lActPrice >= 0 Then
                            llPrice = tgCffCntr(ilCff).CffRec.lActPrice
                        Else
                            llPrice = 0
                        End If
                    Case Else
                        llPrice = 0
                End Select
                'llTotalPrice = llTotalPrice + llPrice * ilSpots
                If mGetLineType(ilLnRowNo) <> "E" Then
                    slWkPrice = gMulStr(gIntToStrDec(ilSpots, 0), gLongToStrDec(llPrice, 2))
                Else
                    slWkPrice = gLongToStrDec(llPrice, 2)
                End If
                slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                llTotalSpots = llTotalSpots + ilSpots
            Next llDate
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    smLnSave(18, ilLnRowNo) = slTotalPrice  'gLongToStrDec(llTotalPrice, 2)
    'imLnSave(11, ilLnRowNo) = ilTotalSpots
    smLnSave(23, ilLnRowNo) = Trim$(str$(llTotalSpots))
End Sub

Sub mSetPowerBar(ilType As Integer, flAdjFactorW As Single, tlRBCtrls() As FIELDAREA)


    Dim llAdjHeight As Long
    Contract.plcPower.Visible = False
    Contract.lbcDaypart.Clear
        ReDim tmSvChk(0 To 0) As FLWKINFO
        Contract.edcRB(0).Visible = False
        Contract.edcRB(1).Visible = False
        'Contract.plcPower.Caption = " Rate Bar"
        Contract.plcPower.Cls
        Contract.plcPower.CurrentX = (Contract.plcPower.Width - Contract.plcPower.TextWidth(" Rate Bar")) / 2
        Contract.plcPower.CurrentY = 0
        Contract.plcPower.Print " Speed Bar"
        smPowerCaption = " Rate Bar"
        Contract.plcPower.Move 60, Contract.plcHeader.Top, Contract.Width - 180, Contract.cmcDone.Top + Contract.cmcDone.height - Contract.plcHeader.Top
        'Contract.plcPower.Move 60, 510, 9325, 5685 + 285 - 510
        Contract.frcPBDates.Move 60, 165, Contract.plcLine.Width - 240, 1940 '990
        Contract.lacPBDates(0).Move 60, 225, 3180, 210
        Contract.edcPBDate(0).Move 60, 435, flAdjFactorW * 870, 210
        Contract.cmcPBDate(0).Move Contract.edcPBDate(0).Left + Contract.edcPBDate(0).Width + 15, 435, 195, 210
        Contract.lacPBDates(1).Move Contract.cmcPBDate(0).Left + Contract.cmcPBDate(0).Width + 240, 225, 3180, 210
        Contract.edcRBWks(2).Move Contract.cmcPBDate(0).Left + Contract.cmcPBDate(0).Width + 240, 435, flAdjFactorW * 540, 210
        'Contract.cmcPBNoWks.Move Contract.edcRBWks(2).Left + Contract.edcRBWks(2).Width + 15, 435, 195, 210
        Contract.lacPBDates(2).Move Contract.edcRBWks(2).Left + Contract.edcRBWks(2).Width + 240, 225, 3180, 210
        Contract.edcPBDate(1).Move Contract.edcRBWks(2).Left + Contract.edcRBWks(2).Width + 240, 435, flAdjFactorW * 870, 210
        Contract.cmcPBDate(1).Move Contract.edcPBDate(1).Left + Contract.edcPBDate(1).Width, 435, 195, 210
        Contract.lacPBSpots.Caption = "Spots/Week"
        Contract.lacPBSpots.Move Contract.edcPBDate(0).Left, 1020, 2850, 210 '1005, 2850, 210
        Contract.edcRBWks(3).Move Contract.edcPBDate(0).Left + 1130, Contract.lacPBSpots.Top, 540, 210
        Contract.lacRBWks(0).Move Contract.edcPBDate(0).Left, 720  '1305
        Contract.edcRBWks(0).Move Contract.lacRBWks(0).Left + Contract.lacRBWks(0).Width + 60, Contract.lacRBWks(0).Top
        Contract.lacRBWks(1).Move Contract.edcRBWks(0).Left + Contract.edcRBWks(0).Width + 120, Contract.lacRBWks(0).Top
        Contract.edcRBWks(1).Move Contract.lacRBWks(1).Left + Contract.lacRBWks(1).Width + 60, Contract.lacRBWks(0).Top
        Contract.lacRBWks(0).Visible = True
        Contract.lacRBWks(1).Visible = True
        Contract.edcRBWks(0).Visible = True
        Contract.edcRBWks(1).Visible = True
        Contract.cmcRBGenGrid.Move Contract.edcPBDate(0).Left + (Contract.edcPBDate(1).Left + Contract.edcPBDate(1).Width + Contract.cmcPBDate(0).Width - Contract.edcPBDate(0).Left) \ 2 - Contract.cmcRBGenGrid.Width \ 2, Contract.edcRBWks(0).Top + Contract.edcRBWks(0).height + 60 + 285
        Contract.cmcRBGenGrid.Visible = True
        Contract.cmcRBGenGrid.Enabled = False
        Contract.lbcRBDatesSpots(0).Move Contract.cmcPBDate(1).Left + Contract.cmcPBDate(1).Width + 120, 135, 1425 * flAdjFactorW, 1790 '2115, 1560
        Contract.pbcLbcRBDatesSpots(0).Move Contract.lbcRBDatesSpots(0).Left + 15, Contract.lbcRBDatesSpots(0).Top + 15, Contract.pbcLbcRBDatesSpots(0).Width - 30, Contract.lbcRBDatesSpots(0).height - 30 '2115, 1560
        Contract.lbcRBDatesSpots(0).Visible = True
        Contract.pbcLbcRBDatesSpots(0).Visible = True
        Contract.pbcRBDatesSpotsSTab(0).Visible = True
        Contract.pbcRBDatesSpotsTab(0).Visible = True
        Contract.ckcRBAllVeh.Move Contract.lbcRBDatesSpots(0).Left + Contract.lbcRBDatesSpots(0).Width + 120, 135
        Contract.ckcRBAllVeh.Visible = True
        Contract.lbcRBVehicle.height = 1790 - fgListHtArial825
        Contract.lbcRBVehicle.Move Contract.ckcRBAllVeh.Left, Contract.lbcRBDatesSpots(0).Top + Contract.lbcRBDatesSpots(0).height - Contract.lbcRBVehicle.height, 1560 * flAdjFactorW
        Contract.lbcRBVehicle.Visible = True
        Contract.ckcRBAllVeh.Width = Contract.lbcRBVehicle.Width
        If Contract.lbcRBVehicle.ListCount > 0 Then
            Contract.ckcRBAllVeh.Caption = "All (" & Contract.lbcRBVehicle.SelCount & " of " & Contract.lbcRBVehicle.ListCount & ")"
        Else
            Contract.ckcRBAllVeh.Caption = "All"
        End If
        Contract.pbclbcRBVehicle.Move Contract.lbcRBVehicle.Left + 15, Contract.lbcRBVehicle.Top + 15, Contract.pbclbcRBVehicle.Width - 30, Contract.lbcRBVehicle.height - 30 '2115, 1560
        Contract.ckcRBAllDP.Move Contract.lbcRBVehicle.Left + Contract.lbcRBVehicle.Width + 120, Contract.ckcRBAllVeh.Top
        Contract.ckcRBAllDP.Visible = True
        Contract.lbcRBDaypart.Move Contract.ckcRBAllDP.Left, Contract.lbcRBVehicle.Top, 1560 * flAdjFactorW, 1790 - fgListHtArial825 '2115, 1560
        Contract.lbcRBDaypart.Visible = True
        Contract.ckcRBAllDP.Width = Contract.lbcRBDaypart.Width
        If Contract.lbcRBDaypart.ListCount > 0 Then
            Contract.ckcRBAllDP.Caption = "All (" & Contract.lbcRBDaypart.SelCount & " of " & Contract.lbcRBDaypart.ListCount & ")"
        Else
            Contract.ckcRBAllDP.Caption = "All"
        End If
        Contract.lbcPBLen.Move Contract.lbcRBDaypart.Left + Contract.lbcRBDaypart.Width + 120, 135, 750 * flAdjFactorW, 1790
        Contract.lbcPBLen.Visible = True
        Contract.frcPBDates.Width = Contract.lbcPBLen.Left + Contract.lbcPBLen.Width + 60
        Contract.frcPBVeh.Caption = "Vehicle/Daypart"
        Contract.frcPBVeh.Move 60, Contract.frcPBDates.Top + Contract.frcPBDates.height + 60, Contract.plcPower.Width - 120 - flAdjFactorW * 1350 - 150, Contract.plcPower.height - Contract.frcPBDates.Top - Contract.frcPBDates.height - 160
        Contract.frcRBSum.Move Contract.frcPBDates.Left, Contract.frcPBDates.Top, Contract.frcPBVeh.Width, Contract.frcPBDates.height
        ''Contract.lbcAllVehicle.Move 120, 300, 7275, 2325    '2600
        'Contract.pbcRBVeh(0).Move 120, 380, Contract.pbcRBVeh(0).Width, Contract.frcPBVeh.Height - 380 - Contract.edcPBEqualValueSpots.Height - Contract.edcPBFactor.Height - 60 '240, 7245, 2565
        Contract.pbcRBVeh(0).Move 120, 380, Contract.pbcRBVeh(0).Width, Contract.frcPBVeh.height - Contract.edcPBEqualValueSpots.height - Contract.edcPBFactor.height - 210 '240, 7245, 2565
        llAdjHeight = Contract.pbcRBVeh(0).height
        Do While (llAdjHeight Mod 15) <> 0
            llAdjHeight = llAdjHeight + 1
        Loop
        Do While ((llAdjHeight Mod (CInt(fgBoxGridH) + 15))) <> 0
            llAdjHeight = llAdjHeight - 1
        Loop
        Contract.pbcRBVeh(0).height = llAdjHeight + 30
        Contract.vbcRBVeh(0).Move Contract.pbcRBVeh(0).Left + Contract.pbcRBVeh(0).Width, Contract.pbcRBVeh(0).Top, Contract.vbcRBVeh(0).Width, Contract.pbcRBVeh(0).height
        Contract.ckcRBGridAll.Move 150, 180, 2430
        Contract.ckcRBGridAll.Visible = True
        Contract.pbcRBVeh(1).Move 120, 210, Contract.pbcRBVeh(1).Width, 1590 '240, 7245, 2565
        Contract.vbcRBVeh(1).Move Contract.pbcRBVeh(1).Left + Contract.pbcRBVeh(1).Width, Contract.pbcRBVeh(1).Top, Contract.vbcRBVeh(0).Width, Contract.pbcRBVeh(1).height
        Contract.lacPBEqualValue.Move tlRBCtrls(4).fBoxX + Contract.pbcRBVeh(0).Left - Contract.lacPBEqualValue.Width - 60, 150
        Contract.edcPBEqualValueSpots.Move tlRBCtrls(4).fBoxX + Contract.pbcRBVeh(0).Left, 150, tlRBCtrls(4).fBoxW
        Contract.edcPBEqualValuePrice.Move tlRBCtrls(5).fBoxX + Contract.pbcRBVeh(0).Left, 150, tlRBCtrls(5).fBoxW
        Contract.edcPBEqualValueCPP.Move tlRBCtrls(8).fBoxX + Contract.pbcRBVeh(0).Left, 150, tlRBCtrls(8).fBoxW
        Contract.edcPBEqualValueCPM.Move tlRBCtrls(9).fBoxX + Contract.pbcRBVeh(0).Left, 150, tlRBCtrls(9).fBoxW
        Contract.edcPBEqualValueSpots.Text = ""
        Contract.edcPBEqualValuePrice.Text = ""
        Contract.edcPBEqualValueCPP.Text = ""
        Contract.edcPBEqualValueCPM.Text = ""
        'Contract.lacRBSummary.Move Contract.frcPBVeh.Left, Contract.pbcRBVeh(0).Top + Contract.pbcRBVeh(0).Height
        'Contract.lacRBSummary.Visible = True
        'Contract.rbcRBSummary(0).Move Contract.lacRBSummary.Left + Contract.lacRBSummary.Width + 120, Contract.lacRBSummary.Top + 15
        'Contract.rbcRBSummary(0).Visible = True
        'Contract.rbcRBSummary(1).Move Contract.rbcRBSummary(0).Left + Contract.rbcRBSummary(0).Width + 120, Contract.rbcRBSummary(0).Top
        'Contract.rbcRBSummary(1).Visible = True
        'Contract.rbcRBSummary(2).Move Contract.rbcRBSummary(1).Left + Contract.rbcRBSummary(1).Width + 120, Contract.rbcRBSummary(0).Top
        'Contract.rbcRBSummary(2).Visible = True
        Contract.edcPBFactor.Move Contract.pbcRBVeh(0).Left + Contract.pbcRBVeh(0).Width - Contract.edcPBFactor.Width, Contract.pbcRBVeh(0).Top + Contract.pbcRBVeh(0).height + 15
        Contract.lacPBFactor.Move Contract.edcPBFactor.Left - Contract.lacPBFactor.Width - 60, Contract.pbcRBVeh(0).Top + Contract.pbcRBVeh(0).height
        Contract.lacPBFactor.Visible = True
        Contract.edcPBFactor.Visible = True

        'Contract.lacVehTotal.Move 3600, Contract.lbcAllVehicle.Top + Contract.lbcAllVehicle.Height + 30, 3675, 210'2600
        'Contract.lacVehTotal.Caption = ""
        'Contract.lacVehTotal.Visible = True
        Contract.pbcRBVeh(0).Visible = True
        Contract.vbcRBVeh(0).Visible = True
        Contract.lacPBEqualValue.Visible = True
        Contract.edcPBEqualValueSpots.Visible = True
        Contract.edcPBEqualValuePrice.Visible = True
        If (sgCntrScreen <> "Orders") And ((Asc(tgSpf.sOptionFields) And &H80) = &H80) Then
            Contract.edcPBEqualValueCPP.Visible = True
            Contract.edcPBEqualValueCPM.Visible = True
        End If
        Contract.lbcRBDatesSpots(1).Move 0, 0, Contract.lbcRBDatesSpots(0).Width, Contract.lbcRBDatesSpots(0).height
        Contract.pbcLbcRBDatesSpots(1).Move 15, 15, Contract.pbcLbcRBDatesSpots(0).Width, Contract.pbcLbcRBDatesSpots(0).height
        Contract.frcRBVehSpots.Move 0, 0, Contract.lbcRBDatesSpots(1).Width, Contract.lbcRBDatesSpots(1).height
        Contract.frcRBVehSpots.Visible = False
        Contract.frcPBDaypart.Caption = "Demo"  '"Dayparts"
        'Contract.frcPBDaypart.Move 7890, 935, 1350, 1440    '1065, 1350, 1440   '1185
        Contract.frcPBDaypart.Move Contract.frcPBVeh.Left + Contract.frcPBVeh.Width + 60, Contract.frcPBVeh.Top, flAdjFactorW * 1350, 1440 '1065, 1350, 1440   '1185
        Contract.lbcDaypart.Move 120, 300, flAdjFactorW * 1110, 1050   '795
        
        'Contract.frcPBLen.Caption = "Sort"   '"Lengths"
        'Contract.frcPBLen.Move 7890, 2280, 1350, 1185
        'Contract.cmcGenLineBar.Move 7890, 3160, 1350, 285
        Contract.cmcGenLineBar.Move Contract.frcPBDaypart.Left, Contract.frcPBVeh.Top + Contract.frcPBVeh.height - 885 - 60, flAdjFactorW * 1350, 285
        'Contract.cmcGenPkgLine.Move 7890, 3460, 1350, 285
        Contract.cmcGenPkgLine.Move Contract.frcPBDaypart.Left, Contract.frcPBVeh.Top + Contract.frcPBVeh.height - 585 - 30, flAdjFactorW * 1350, 285
        Contract.cmcGenPkgLine.Visible = True
        'Contract.cmcPBCancel.Move 8135, 3760, 945, 285
        Contract.cmcPBCancel.Move Contract.frcPBDaypart.Left + Contract.frcPBDaypart.Width / 2 - Contract.cmcPBCancel.Width / 2, Contract.frcPBVeh.Top + Contract.frcPBVeh.height - 285, 945, 285
        
        Contract.frcRBBookName.Caption = "Book Name"
        Contract.frcRBBookName.Move Contract.frcPBDaypart.Left, Contract.frcPBDaypart.Top + Contract.frcPBDaypart.height + 120, Contract.frcPBDaypart.Width, Contract.cmcGenLineBar.Top - (Contract.frcPBDaypart.Top + Contract.frcPBDaypart.height + 120) - 120 '1065, 1350, 1440   '1185
        Contract.lbcRBBookName.Move 120, 300, flAdjFactorW * 1110, Contract.frcRBBookName.height - 600 '795

        Contract.cbcRBView.Move Contract.frcPBDates.Left + 120, Contract.frcPBDates.Top - 90
        If UBound(tmPB1DP) > LBound(tmPB1DP) Then
            Contract.cbcRBView.Visible = True
        Else
            Contract.cbcRBView.Visible = False
        End If
        'If Contract.cbcRBView.ListIndex < 0 Then
            Contract.cbcRBView.ListIndex = 0
        'End If
        mSetGridCount
End Sub

Sub mSetPriDemoResearch(hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilStep1Index As Integer, llCPriDemoGRP As Long, llCPriDemoGrImp As Long, llCPriDemoCPP As Long, llCPriDemoCPM As Long, ilCPriDemoRating As Integer, Optional ilDemoIndex As Integer = 0, Optional rsDemo As Recordset, Optional blAct1AdditionalMoveToRec As Boolean = False)
'Sub mSetPriDemoResearch(hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilStep1Index As Integer, llCPriDemoGRP As Long, llCPriDemoGrImp As Long, llCPriDemoCPP As Long, llCPriDemoCPM As Long, ilCPriDemoRating As Integer)
'10256 optional blAct1AdditionalMoveToRec added to call
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilClf As Integer
    Dim slLineType As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilLnRowNo As Integer
    Dim ilDay As Integer        'Day loop index
    Dim ilVefCode As Integer    'Vehicle code for a line
    Dim ilDnfCode As Integer    'Book Name Code for a Line
    Dim ilMnfDemo As Integer    'Demo Code for a line
    Dim ilMnfSocEco As Integer  'Social Eco (0)
    Dim ilRdfCode As Integer
    Dim llOvStartTime As Long   'Start override time
    Dim llOvEndTime As Long     'End override time
    ReDim ilDays(0 To 6) As Integer 'Airing day map for a week
    Dim ilSpots As Integer  '# spots for week
    Dim llPop As Long       'Population for a line
    Dim llAvgAud As Long    'Average audience value for week
    Dim ilRet As Integer
    Dim ilVef As Integer
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim ilCff As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llMoFlStartdate As Long
    Dim llDate As Long
    Dim ilWkUpper As Integer
    Dim ilLnUpper As Integer
    Dim llCPP As Long
    Dim llCPM As Long
    Dim llAvgAudAvg As Long
    Dim llCntrPop As Long
    Dim ilWkOk As Integer
    Dim ilLoop As Integer
    'Dim ilLnTSpots As Integer
    Dim llLnTSpots As Long
    Dim llTotalSpots As Long
    'Dim llTotalCost As Long
    Dim dlTotalCost As Double 'TTP 10439 - Rerate 21,000,000
    Dim dlTmpCost As Double 'TTP 10439 - Rerate 21,000,000
    Dim ilAvgRating As Integer
    Dim llGrImp As Long
    Dim llGRP As Long
    Dim llPopEst As Long
    Dim slStr As String
    Dim llRafCode As Long
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long


    llCPriDemoGRP = 0
    llCPriDemoGrImp = 0
    llCPriDemoCPP = 0
    llCPriDemoCPM = 0
    ilCPriDemoRating = 0
    If tgSpf.sGUsePropSys <> "Y" Then
        Contract.lacAudTotals.Visible = False
        tgChfCntr.lGrImp = 0
        tgChfCntr.lGRP = 0
        Exit Sub
    End If
    If (sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And &H80) <> &H80) Then
        Contract.lacAudTotals.Visible = False
    Else
        Contract.lacAudTotals.Visible = True
    End If
    'Contract.lacAudTotals.Caption = "GrImp: CPM: GRP: CPP:"
    '11/8/00 Jim wants the order to match the Rate Bar order
    If ((Asc(tgSaf(0).sFeatures6) And CALCULATESEARCHONLINECHG) = CALCULATESEARCHONLINECHG) Then
        Contract.lacAudTotals.ForeColor = BLACK
        Contract.lacAudTotals.Caption = "GRP: GrImp: CPP: CPM:"
    Else
        Contract.lacAudTotals.ForeColor = BLACK
        Contract.lacAudTotals.Caption = "Click to Compute->GRP: GrImp: CPP: CPM:"
    End If
    ilMnfSocEco = 0
    'Is the primary demo defined, if not then set GrImp to zero. ilDemoIndex
    '5908
    If Contract.lbcDemo(ilDemoIndex).ListIndex <= 0 Then
    'If Contract.lbcDemo(0).ListIndex <= 0 Then
        tgChfCntr.lGrImp = 0
        tgChfCntr.lGRP = 0
        Exit Sub
    End If
    '5908
    slNameCode = tgDemoCode(Contract.lbcDemo(ilDemoIndex).ListIndex - 1).sKey
    'slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey  'Traffic!lbcDemoCode.List(lbcDemo(ilLoop).ListIndex - 1)
    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    If ilRet <> 0 Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass  'Wait
    ilMnfDemo = CInt(slCode)
    ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
    'If smLnSave(1, UBound(smLnSave, 2)) = "" Then
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
    'Else
    '    ilEndRow = UBound(smLnSave, 2)
    'End If
    ilStartRow = ilStartRow - 1
    ilEndRow = ilEndRow - 1

    For ilClf = ilStartRow To ilEndRow Step 1
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo, True)
        If (Not tgClfCntr(ilClf).iCancel) And ((slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E")) Then
            llStartDate = gDateValue(smLnSave(14, ilLnRowNo))
            llEndDate = gDateValue(smLnSave(15, ilLnRowNo))
            ilSpots = 0
            ilCff = tgClfCntr(ilClf).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                        For ilDay = 0 To 6 Step 1
                            ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                        Next ilDay
                    Else
                        ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                    End If
                End If
                If ilSpots > 0 Then
                    Exit Do
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If (llEndDate >= llStartDate) And (ilSpots > 0) And (ilMnfDemo > 0) Then
                ilRdfCode = imLnSave(1, ilLnRowNo)
                gFindMatch smLnSave(1, ilLnRowNo), 0, Contract.lbcLnVehicle(0)  'Contract.lbcLnVehicle(igTabMapIndex)
                'If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                If gLastFound(Contract.lbcLnVehicle(0)) < 0 Then
                    ilVefCode = 0
                Else
                    'slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(0))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVefCode = CInt(slCode)
                End If
                If tgClfCntr(ilClf).ClfRec.iDnfCode = 0 Then
                    'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                    '    If ilVefCode = tgMVef(ilVef).iCode Then
                        ilVef = gBinarySearchVef(ilVefCode)
                        If ilVef <> -1 Then
                            ilDnfCode = tgMVef(ilVef).iDnfCode
                            'Exit For
                        End If
                    'Next ilVef
                Else
                    ilDnfCode = tgClfCntr(ilClf).ClfRec.iDnfCode
                End If
                'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, ilDBTotals, False, ilCppCpm, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM
                If imLnSave(4, ilLnRowNo) = 1 Then
                    llOvStartTime = CLng(gTimeToCurrency(smLnSave(2, ilLnRowNo), False))
                    llOvEndTime = CLng(gTimeToCurrency(smLnSave(3, ilLnRowNo), True))
                Else
                    llOvStartTime = 0
                    llOvEndTime = 0
                End If
                If (ilVefCode > 0) And (ilDnfCode > 0) And (ilMnfDemo > 0) Then
                    ilCff = tgClfCntr(ilClf).iFirstCff
                    If ((tgClfCntr(ilClf).lPriDemoPop <= 0) Or (tgClfCntr(ilClf).iPriDemoBook <> ilDnfCode) Or (igPriDemoMnfDemo <> ilMnfDemo) Or (tgClfCntr(ilClf).iPriChgd)) Then
                        ilRet = gGetDemoPop(hlDrf, hlMnf, hlDpf, ilDnfCode, ilMnfSocEco, ilMnfDemo, llPop)
                        tgClfCntr(ilClf).lPriDemoPop = llPop
                    End If
                    Do While ilCff <> -1
                        If ((tgCffCntr(ilCff).lPriDemoAvgAud <= 0) Or (tgClfCntr(ilClf).iPriDemoBook <> ilDnfCode) Or (igPriDemoMnfDemo <> ilMnfDemo) Or (tgClfCntr(ilClf).iPriChgd)) Then
                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                llFlStartDate = tgCffCntr(ilCff).lStartDate
                                llFlEndDate = tgCffCntr(ilCff).lEndDate
                                llMoFlStartdate = llFlStartDate
                                Do While gWeekDayLong(llMoFlStartdate) <> 0
                                    llMoFlStartdate = llMoFlStartdate - 1
                                Loop
                                For llDate = llMoFlStartdate To llFlEndDate Step 7
                                    For ilDay = 0 To 6 Step 1
                                        ilDays(ilDay) = False
                                    Next ilDay
                                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                        ilSpots = 0
                                        For ilDay = 0 To 6 Step 1
                                            If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                                    ilDays(ilDay) = True
                                                End If
                                            End If
                                        Next ilDay
                                    Else
                                        ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                        For ilDay = 0 To 6 Step 1
                                            If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                If (tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilDay) = "1") Then
                                                    ilDays(ilDay) = True
                                                End If
                                            End If
                                        Next ilDay
                                    End If
                                    slStr = mGetLineType(ilClf + 1, True)
                                    llRafCode = mGetRafCode(ilClf + 1, tlRegionCode())
                                    ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                                    tgCffCntr(ilCff).lPriDemoAvgAud = llAvgAud
                                    tgCffCntr(ilCff).lPriDemoPop = llPopEst
                                    '10256
                                    mActOneLineInfoSet ilLnRowNo, blAct1AdditionalMoveToRec
                                    Exit For
                                Next llDate
                            End If
                        End If
                        ilCff = tgCffCntr(ilCff).iNextCff
                    Loop
                    tgClfCntr(ilClf).iPriDemoBook = ilDnfCode
                Else
                    If (ilVefCode <= 0) Or (ilDnfCode <= 0) Or (ilMnfDemo <= 0) Then
                        ilCff = tgClfCntr(ilClf).iFirstCff
                        Do While ilCff <> -1
                            tgCffCntr(ilCff).lPriDemoAvgAud = 0
                            tgCffCntr(ilCff).lPriDemoPop = 0
                            ilCff = tgCffCntr(ilCff).iNextCff
                        Loop
                    End If
                End If
                tgClfCntr(ilClf).iPriChgd = False
            End If
        End If
    Next ilClf
    igPriDemoMnfDemo = ilMnfDemo
    llCntrPop = -1
    ilLnUpper = -1  '0
    llTotalSpots = 0
    ReDim lgLnCost(0 To 0) As Long
    ReDim igLnAvgRating(0 To 0) As Integer
    ReDim lgLnGrImp(0 To 0) As Long
    ReDim lgLnGRP(0 To 0) As Long
    For ilClf = ilStartRow To ilEndRow Step 1
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo, True)
        If (Not tgClfCntr(ilClf).iCancel) And ((slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E")) Then
            ReDim lgWkSpotCount(0 To 0) As Long
            ReDim lgWkActPrice(0 To 0) As Long
            ReDim lgWkAvgAud(0 To 0) As Long
            ReDim igWkRating(0 To 0) As Integer
            ReDim lgWkGRImp(0 To 0) As Long
            ReDim lgWkGRP(0 To 0) As Long
            ReDim lgWkPopEst(0 To 0) As Long
            llLnTSpots = 0
            ilWkUpper = -1  '0
            ilCff = tgClfCntr(ilClf).iFirstCff
            Do While ilCff <> -1
                'If ((tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1)) And (tgClfCntr(ilClf).lPriDemoPop > 0) Then
                If ((tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1)) Then
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    llMoFlStartdate = llFlStartDate
                    Do While gWeekDayLong(llMoFlStartdate) <> 0
                        llMoFlStartdate = llMoFlStartdate - 1
                    Loop
                    For llDate = llMoFlStartdate To llFlEndDate Step 7
                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                            ilSpots = 0
                            For ilDay = 0 To 6 Step 1
                                If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                    ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                End If
                            Next ilDay
                        Else
                            ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                        End If
                        ilWkOk = True
                        '4/17/06 Jim: Remove test for Version zero lines.  Not sure which client this was for but it is now affecting other clients when they add in N/C lines that the Research does not include those lines.
                        '              Also code in mBuildVer0Lines bypassed
                        'If (tgCffCntr(ilCff).CffRec.sPriceType <> "T") Or ((tgCffCntr(ilCff).CffRec.sPriceType = "T") And (tgCffCntr(ilCff).CffRec.lActPrice = 0)) Then
                        '    If (sgCntrScreen = "Orders") Then
                        '        If ilStep1Index > 1 Then
                        '            ilWkOk = False
                        '            For ilLoop = LBound(igVer0LineNo) To UBound(igVer0LineNo) - 1 Step 1
                        '                If tgClfCntr(ilClf).ClfRec.iLine = igVer0LineNo(ilLoop) Then
                        '                    ilWkOk = True
                        '                End If
                        '            Next ilLoop
                        '        End If
                        '    Else
                        '        If ilStep1Index > 3 Then
                        '            ilWkOk = False
                        '            For ilLoop = LBound(igVer0LineNo) To UBound(igVer0LineNo) - 1 Step 1
                        '                If tgClfCntr(ilClf).ClfRec.iLine = igVer0LineNo(ilLoop) Then
                        '                    ilWkOk = True
                        '                End If
                        '            Next ilLoop
                        '        End If
                        '    End If
                        'End If
                        If ilWkOk Then

                            ilWkUpper = ilWkUpper + 1
                            ReDim Preserve lgWkSpotCount(0 To ilWkUpper) As Long
                            ReDim Preserve lgWkActPrice(0 To ilWkUpper) As Long
                            ReDim Preserve lgWkAvgAud(0 To ilWkUpper) As Long
                            ReDim igWkRating(0 To ilWkUpper) As Integer
                            ReDim lgWkGRImp(0 To ilWkUpper) As Long
                            ReDim lgWkGRP(0 To ilWkUpper) As Long
                            ReDim Preserve lgWkPopEst(0 To ilWkUpper) As Long
                            lgWkSpotCount(ilWkUpper) = ilSpots
                            llTotalSpots = llTotalSpots + ilSpots
                            llLnTSpots = llLnTSpots + ilSpots
                            Select Case tgCffCntr(ilCff).CffRec.sPriceType
                                Case "T"
                                    lgWkActPrice(ilWkUpper) = tgCffCntr(ilCff).CffRec.lActPrice
                                Case Else
                                    lgWkActPrice(ilWkUpper) = 0
                            End Select
                            lgWkAvgAud(ilWkUpper) = tgCffCntr(ilCff).lPriDemoAvgAud
                            lgWkPopEst(ilWkUpper) = tgCffCntr(ilCff).lPriDemoPop
                        End If
                    Next llDate
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
            If ilWkUpper >= 0 Then
                ilLnUpper = ilLnUpper + 1
                ReDim Preserve lgLnCost(0 To ilLnUpper) As Long
                ReDim Preserve igLnAvgRating(0 To ilLnUpper) As Integer
                ReDim Preserve lgLnGrImp(0 To ilLnUpper) As Long
                ReDim Preserve lgLnGRP(0 To ilLnUpper) As Long
                'gAvgAudToLnResearch smCntr1or2PlaceRating, False, tgClfCntr(ilClf).lPriDemoPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), lgLnCost(ilLnUpper), llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst
                dlTmpCost = CDbl(lgLnCost(ilLnUpper))
                gAvgAudToLnResearch smCntr1or2PlaceRating, False, tgClfCntr(ilClf).lPriDemoPop, lgWkPopEst(), lgWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), dlTmpCost, llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), lgWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst 'TTP 10439 - Rerate 21,000,000
                lgLnCost(ilLnUpper) = dlTmpCost
                tgClfCntr(ilClf).lPriDemoAvgAud = llAvgAudAvg
                tgClfCntr(ilClf).iPriDemoAvgRating = igLnAvgRating(ilLnUpper)
                tgClfCntr(ilClf).lPriDemoGRP = lgLnGRP(ilLnUpper)
                tgClfCntr(ilClf).lPriDemoCPP = llCPP
                tgClfCntr(ilClf).lPriDemoCPM = llCPM
                tgClfCntr(ilClf).lPriDemoGrImp = lgLnGrImp(ilLnUpper)
                tgClfCntr(ilClf).lCost = lgLnCost(ilLnUpper)
                If tgSpf.sDemoEstAllowed = "Y" Then
                    tgClfCntr(ilClf).lPriDemoPop = llPopEst
                End If
                tgClfCntr(ilClf).lTSpots = llLnTSpots
                '10567 added to if
                If (tgClfCntr(ilClf).iPriDemoBook > 0) And (tgClfCntr(ilClf).lPriDemoPop > 0) Then
               ' If (tgClfCntr(ilClf).iPriDemoBook > 0)  Then
                    If llCntrPop = -1 Then
                        llCntrPop = tgClfCntr(ilClf).lPriDemoPop
                    ElseIf llCntrPop > 0 Then
                        If llCntrPop <> tgClfCntr(ilClf).lPriDemoPop Then
                            llCntrPop = 0
                        End If
                    End If
                End If
                '5908--average audience not formatted properly
                If Not rsDemo Is Nothing Then
                    '10/28/14: Handle 2 place rating
                    'rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(igLnAvgRating(ilLnUpper), 1), llAvgAudAvg)
                    If smCntr1or2PlaceRating <> "2" Then
                        rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(igLnAvgRating(ilLnUpper), 1), llAvgAudAvg)
                    Else
                        rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(igLnAvgRating(ilLnUpper), 2), llAvgAudAvg)
                    End If
                    'rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(igLnAvgRating(ilLnUpper), 1), gLongToStrDec(llAvgAudAvg, 1))
                End If
            Else
                tgClfCntr(ilClf).lPriDemoAvgAud = 0
                tgClfCntr(ilClf).iPriDemoAvgRating = 0
                tgClfCntr(ilClf).lPriDemoGRP = 0
                tgClfCntr(ilClf).lPriDemoCPP = 0
                tgClfCntr(ilClf).lPriDemoCPM = 0
                tgClfCntr(ilClf).lPriDemoGrImp = 0
                tgClfCntr(ilClf).lCost = 0
                tgClfCntr(ilClf).lTSpots = 0
            End If
        End If
    Next ilClf
    'If ilLnUpper > 0 Then
    If ilLnUpper >= 0 Then
        'gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTotalSpots, llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
        gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTotalSpots, dlTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
        llCPriDemoGRP = llGRP
        llCPriDemoGrImp = llGrImp
        llCPriDemoCPP = llCPP
        llCPriDemoCPM = llCPM
        ilCPriDemoRating = ilAvgRating
    Else
        llGrImp = 0
        llGRP = 0
    End If
    tgChfCntr.lGrImp = llGrImp
    tgChfCntr.lGRP = llGRP
'    If tgSpf.sSAudData <> "H" Then
'        'Contract.lacAudTotals.Caption = "GrImp:" & Trim$(Str$(llGrImp)) & " CPM:" & gLongToStrDec(llCPM, 2) & " GRP: " & gLongToStrDec(llGRP, 1) & " CPP:" & Trim$(Str$(llCPP)) & " "
'        Contract.lacAudTotals.Caption = "GRP: " & gLongToStrDec(llGRP, 1) & " GrImp:" & Trim$(Str$(llGrImp)) & " CPP:" & Trim$(Str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "
'    Else
'        Contract.lacAudTotals.Caption = " GRP:" & gLongToStrDec(llGRP, 1) & " GrImp:" & gLongToStrDec(llGrImp, 1) & " CPP:" & Trim$(Str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "
'    End If
    Contract.lacAudTotals.ForeColor = BLACK
    If tgSpf.sSAudData = "H" Then
        Contract.lacAudTotals.Caption = "GRP:" & gLongToStrDec(llGRP, 1) & " GrImp:" & gLongToStrDec(llGrImp, 1) & " CPP:" & Trim$(str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "
    ElseIf tgSpf.sSAudData = "N" Then
        Contract.lacAudTotals.Caption = "GRP:" & gLongToStrDec(llGRP, 1) & " GrImp:" & gLongToStrDec(llGrImp, 2) & " CPP:" & Trim$(str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "
    ElseIf tgSpf.sSAudData = "U" Then
        Contract.lacAudTotals.Caption = "GRP:" & gLongToStrDec(llGRP, 1) & " GrImp:" & gLongToStrDec(llGrImp, 3) & " CPP:" & Trim$(str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "
    Else
        Contract.lacAudTotals.Caption = "GRP: " & gLongToStrDec(llGRP, 1) & " GrImp:" & Trim$(str$(llGrImp)) & " CPP:" & Trim$(str$(llCPP)) & " CPM:" & gLongToStrDec(llCPM, 2) & " "
    End If
    'Set Package line values
    'Loop on each package and build area, then call gResearchTotals
    For ilClf = ilStartRow To ilEndRow Step 1
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo, True)
        If (Not tgClfCntr(ilClf).iCancel) And ((slLineType = "O") Or (slLineType = "A") Or (slLineType = "E")) Then
            llCntrPop = -1
            ilLnUpper = -1
            ReDim llLnCost(0 To 0) As Long
            ReDim ilLnAvgRating(0 To 0) As Integer
            ReDim llLnGrImp(0 To 0) As Long
            ReDim llLnGRP(0 To 0) As Long
            For ilLoop = ilStartRow To ilEndRow Step 1
                ilLnRowNo = ilLoop + 1
                slLineType = mGetLineType(ilLnRowNo, True)
                If (Not tgClfCntr(ilLoop).iCancel) And ((slLineType = "H")) Then
                    If tgClfCntr(ilClf).ClfRec.iLine = tgClfCntr(ilLoop).ClfRec.iPkLineNo Then
                        ilLnUpper = ilLnUpper + 1
                        ReDim Preserve llLnCost(0 To ilLnUpper) As Long
                        ReDim Preserve ilLnAvgRating(0 To ilLnUpper) As Integer
                        ReDim Preserve llLnGrImp(0 To ilLnUpper) As Long
                        ReDim Preserve llLnGRP(0 To ilLnUpper) As Long
                        llLnCost(ilLnUpper) = tgClfCntr(ilLoop).lCost
                        ilLnAvgRating(ilLnUpper) = tgClfCntr(ilLoop).iPriDemoAvgRating
                        llLnGrImp(ilLnUpper) = tgClfCntr(ilLoop).lPriDemoGrImp
                        llLnGRP(ilLnUpper) = tgClfCntr(ilLoop).lPriDemoGRP
                        '10188 added if book is 0, don't calculate
                        '10567 added to end of if
                        If (tgClfCntr(ilLoop).iPriDemoBook > 0) And (tgClfCntr(ilLoop).lPriDemoPop > 0) Then
                        'If (tgClfCntr(ilLoop).iPriDemoBook > 0) Then
                            If llCntrPop = -1 Then
                                llCntrPop = tgClfCntr(ilLoop).lPriDemoPop
                            ElseIf llCntrPop > 0 Then
                                If llCntrPop <> tgClfCntr(ilLoop).lPriDemoPop Then
                                    llCntrPop = 0
                                End If
                            End If
                        End If
                    End If
                End If
            Next ilLoop
            'If ilLnUpper > 0 Then
            If ilLnUpper >= 0 Then
                'llTotalSpots = imLnSave(11, ilClf + 1)
                llTotalSpots = Val(smLnSave(23, ilClf + 1))
                'gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, llLnCost(), llLnGrImp(), llLnGRP(), llTotalSpots, llTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
                gResearchTotals smCntr1or2PlaceRating, False, llCntrPop, llLnCost(), llLnGrImp(), llLnGRP(), llTotalSpots, dlTotalCost, ilAvgRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
                tgClfCntr(ilClf).lPriDemoAvgAud = llAvgAud
                tgClfCntr(ilClf).iPriDemoAvgRating = ilAvgRating
                tgClfCntr(ilClf).lPriDemoGRP = llGRP
                tgClfCntr(ilClf).lPriDemoCPP = llCPP
                tgClfCntr(ilClf).lPriDemoCPM = llCPM
                tgClfCntr(ilClf).lPriDemoGrImp = llGrImp
                'tgClfCntr(ilClf).lCost = llTotalCost
                tgClfCntr(ilClf).lCost = dlTotalCost 'TTP 10439 - Rerate 21,000,000
                'tgClfCntr(ilClf).iTSpots = imLnSave(11, ilClf + 1)
                If Trim$(smLnSave(23, ilClf + 1)) <> "" Then
                    'tgClfCntr(ilClf).lTSpots = Trim$(str$(smLnSave(23, ilClf + 1)))
                    'dan 8/24/16 per dick
                    tgClfCntr(ilClf).lTSpots = Val(smLnSave(23, ilClf + 1))
                Else
                    tgClfCntr(ilClf).lTSpots = 0
                End If
                '5908
                If Not rsDemo Is Nothing Then
                    '10/28/14: Handle 2 place rating
                    'rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(ilAvgRating, 1), llAvgAud)
                    If smCntr1or2PlaceRating <> "2" Then
                        rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(ilAvgRating, 1), llAvgAud)
                    Else
                        rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(ilAvgRating, 2), llAvgAud)
                    End If
                    'rsDemo.AddNew Array("LineIndex", "DemoIndex", "Rating", "Audience"), Array(ilClf, ilDemoIndex, gIntToStrDec(ilAvgRating, 1), gLongToStrDec(llAvgAud, 1))
                End If
            Else
                tgClfCntr(ilClf).lPriDemoAvgAud = 0
                tgClfCntr(ilClf).iPriDemoAvgRating = 0
                tgClfCntr(ilClf).lPriDemoGRP = 0
                tgClfCntr(ilClf).lPriDemoCPP = 0
                tgClfCntr(ilClf).lPriDemoCPM = 0
                tgClfCntr(ilClf).lPriDemoGrImp = 0
                tgClfCntr(ilClf).lCost = 0
                tgClfCntr(ilClf).lTSpots = 0
            End If
        End If
    Next ilClf

    If (sgCntrScreen = "Orders") Or ((Asc(tgSpf.sOptionFields) And &H80) <> &H80) Then
        Contract.lacAudTotals.Visible = False
    Else
        Contract.lacAudTotals.Visible = True
    End If
    Contract.mSetCpmInfo
    Screen.MousePointer = vbDefault
End Sub

Sub mSetSchStatus(slOrigStatus As String)
    Dim ilClf As Integer
    Dim ilSchStatus As Integer  '0=Fully scheduled; 1=Partially scheduled; 2=Not scheduled

    ilSchStatus = -1
    If (tgChfCntr.sSchStatus = "A") Then
        ilSchStatus = 2
    ElseIf (tgChfCntr.sSchStatus = "I") Then
        If ilSchStatus = -1 Then
            ilSchStatus = 2
        ElseIf ilSchStatus = 0 Then
            ilSchStatus = 1
        End If
    End If
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If ((tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1)) And (Not tgClfCntr(ilClf).iCancel) Then
            Select Case tgClfCntr(ilClf).ClfRec.sSchStatus
                Case "M"    'Deferred
                Case "P"    'Prevent
                Case "A"    'Needs scheduling
                    If ilSchStatus = -1 Then
                        ilSchStatus = 2
                    ElseIf ilSchStatus = 0 Then
                        ilSchStatus = 1
                    End If
                Case "I"    'Interrupted scheduling
                    If ilSchStatus = -1 Then
                        ilSchStatus = 2
                    ElseIf ilSchStatus = 0 Then
                        ilSchStatus = 1
                    End If
                Case "F"    'Fully scheduled
                    If ilSchStatus = -1 Then
                        ilSchStatus = 0
                    ElseIf ilSchStatus = 2 Then
                        ilSchStatus = 1
                    End If
                Case Else
                    If ilSchStatus = -1 Then
                        ilSchStatus = 2
                    ElseIf ilSchStatus = 0 Then
                        ilSchStatus = 1
                    End If
            End Select
        End If
    Next ilClf
    If (ilSchStatus = -1) Or (sgCntrScreen <> "Orders") Or ((sgCntrScreen = "Orders") And ((slOrigStatus = "W") Or (slOrigStatus = "C") Or (slOrigStatus = "I"))) Then
        Contract.lacSchStatus.Visible = False
        '2/13/10: Change font size and move SctStatus to the right of CreditInfo
        Contract.lacCreditInfo.Left = Contract.lacSchStatus.Left + Contract.lacSchStatus.Width - Contract.lacCreditInfo.Width
    Else
        Contract.lacSchStatus.ForeColor = BLACK
        Select Case ilSchStatus
            Case 0
                Contract.lacSchStatus.BackColor = GREEN
                Contract.lacSchStatus.Caption = "Scheduled"
            Case 1
                Contract.lacSchStatus.BackColor = Yellow
                Contract.lacSchStatus.Caption = "Scheduling Required"
            Case 2
                Contract.lacSchStatus.BackColor = Red
                Contract.lacSchStatus.ForeColor = WHITE
                Contract.lacSchStatus.Caption = "Not Scheduled"
        End Select
        Contract.lacSchStatus.Visible = True
        '2/13/10: Change font size and move SctStatus to the right of CreditInfo
        Contract.lacCreditInfo.Left = Contract.lacSchStatus.Left - Contract.lacCreditInfo.Width - 15
    End If
End Sub

Sub mStatusPop(slStatus As String, ilCntRevNo As Integer, ilStep1Map() As Integer)
'
'   mStatusPop slStatus
'
'   Where:
'       slStatus(I)- Blank if new; W=Work; D=Dead; C=Complete; I=Unapproved; H=Hold; O=Order
'       slSchStatus(I)- Blank if new; M=Manual
'
    Dim ilIndex As Integer

    Contract.lbcStatus.Clear
    ilIndex = Contract.lbcStep(0).ListIndex
    If ilIndex < 0 Then
        Exit Sub
    End If
    ilIndex = ilStep1Map(ilIndex)
    If sgCntrScreen = "Orders" Then
        Select Case ilIndex
            Case 0  'Build from scratch
                Contract.lbcStatus.AddItem "Approved Hold"
                Contract.lbcStatus.AddItem "Approved Order"
            Case 1  'Model- show all advertisers
                Contract.lbcStatus.AddItem "Approved Hold"
                Contract.lbcStatus.AddItem "Approved Order"
            Case 2  'Revise
                Contract.lbcStatus.AddItem "Approved Hold"
                'Contract.lbcStatus.AddItem "Hold"
                Contract.lbcStatus.AddItem "Approved Order"
                'Contract.lbcStatus.AddItem "Order"
            Case 3  'Change Hold to Order
                Contract.lbcStatus.AddItem "Hold"
                If tgUrf(0).sHoldToOrder = "Y" Then
                    Contract.lbcStatus.AddItem "Order"
                End If
            Case 4  'View
                If slStatus = "G" Then
                    Contract.lbcStatus.AddItem "Approved Hold"
                ElseIf slStatus = "H" Then
                    Contract.lbcStatus.AddItem "Hold"
                ElseIf slStatus = "N" Then
                    Contract.lbcStatus.AddItem "Approved Order"
                ElseIf slStatus = "D" Then
                    Contract.lbcStatus.AddItem "Rejected"
                Else
                    Contract.lbcStatus.AddItem "Order"
                End If
        End Select
    Else
        Select Case ilIndex
            Case 0  'Build from scratch
                Contract.lbcStatus.AddItem "Working Proposal"
                If tgUrf(0).sWorkToComp = "Y" Then
                    Contract.lbcStatus.AddItem "Completed Proposal"
                End If
                If tgUrf(0).sCompToIncomp = "Y" Then
                    Contract.lbcStatus.AddItem "Unapproved Proposal"
                End If
                If (tgUrf(0).sWorkToHold = "Y") And (tgUrf(0).sCompToHold = "Y") And (tgUrf(0).sIncompToHold = "Y") Then
                    Contract.lbcStatus.AddItem "Approved Hold"
                End If
                If (tgUrf(0).sWorkToOrder = "Y") And (tgUrf(0).sCompToOrder = "Y") And (tgUrf(0).sIncompToOrder = "Y") Then
                    Contract.lbcStatus.AddItem "Approved Order"
                End If
            Case 1  'Model- show all advertisers
                Contract.lbcStatus.AddItem "Working Proposal"
                If tgUrf(0).sWorkToComp = "Y" Then
                    Contract.lbcStatus.AddItem "Completed Proposal"
                End If
                If tgUrf(0).sCompToIncomp = "Y" Then
                    Contract.lbcStatus.AddItem "Unapproved Proposal"
                End If
                If (tgUrf(0).sWorkToHold = "Y") And (tgUrf(0).sCompToHold = "Y") And (tgUrf(0).sIncompToHold = "Y") Then
                    Contract.lbcStatus.AddItem "Approved Hold"
                End If
                If (tgUrf(0).sWorkToOrder = "Y") And (tgUrf(0).sCompToOrder = "Y") And (tgUrf(0).sIncompToOrder = "Y") Then
                    Contract.lbcStatus.AddItem "Approved Order"
                End If
            Case 2  'Change Existing Proposal
                If slStatus = "W" Then
                    Contract.lbcStatus.AddItem "Working Proposal"
                    If tgUrf(0).sWorkToDead = "Y" Then
                        Contract.lbcStatus.AddItem "Rejected"
                    End If
                    If tgUrf(0).sWorkToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Completed Proposal"
                    End If
                    If tgUrf(0).sWorkToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sWorkToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                ElseIf slStatus = "C" Then
                    Contract.lbcStatus.AddItem "Working Proposal"
                    Contract.lbcStatus.AddItem "Completed Proposal"
                    If tgUrf(0).sCompToIncomp = "Y" Then
                        Contract.lbcStatus.AddItem "Unapproved Proposal"
                    End If
                    If tgUrf(0).sCompToDead = "Y" Then
                        Contract.lbcStatus.AddItem "Rejected"
                    End If
                    If tgUrf(0).sCompToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sCompToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                ElseIf slStatus = "I" Then
                    Contract.lbcStatus.AddItem "Working Proposal"
                    Contract.lbcStatus.AddItem "Unapproved Proposal"
                    If tgUrf(0).sIncompToDead = "Y" Then
                        Contract.lbcStatus.AddItem "Rejected"
                    End If
                    If tgUrf(0).sIncompToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Completed Proposal"
                    End If
                    If tgUrf(0).sIncompToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sIncompToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                ElseIf slStatus = "D" Then
                    Contract.lbcStatus.AddItem "Rejected"
                    If tgUrf(0).sDeadToWork = "Y" Then
                        Contract.lbcStatus.AddItem "Working Proposal"
                    End If
                'ElseIf slStatus = "H" Then
                '    Contract.lbcStatus.AddItem "Hold"
                '    If tgUrf(0).sHoldToOrder = "Y" Then
                '        Contract.lbcStatus.AddItem "Order"
                '    End If
                End If
            Case 3  'New version of Existing Proposals
                If slStatus = "W" Then
                    Contract.lbcStatus.AddItem "Working Proposal"
                    If tgUrf(0).sWorkToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Completed Proposal"
                    End If
                ElseIf slStatus = "C" Then
                    Contract.lbcStatus.AddItem "Working Proposal"
                    Contract.lbcStatus.AddItem "Completed Proposal"
                    If tgUrf(0).sCompToIncomp = "Y" Then
                        Contract.lbcStatus.AddItem "Unapproved Proposal"
                    End If
                ElseIf slStatus = "I" Then
                    Contract.lbcStatus.AddItem "Working Proposal"
                    Contract.lbcStatus.AddItem "Unapproved Proposal"
                    If tgUrf(0).sIncompToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Completed Proposal"
                    End If
                End If
            Case 4  'Revise an existing Order
                If slStatus = "W" Then
                    Contract.lbcStatus.AddItem "Rev Working"
                    If tgUrf(0).sWorkToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Rev Completed"
                    End If
                    If tgUrf(0).sWorkToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sWorkToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                ElseIf slStatus = "C" Then
                    Contract.lbcStatus.AddItem "Rev Working"
                    Contract.lbcStatus.AddItem "Rev Completed"
                    If tgUrf(0).sCompToIncomp = "Y" Then
                        Contract.lbcStatus.AddItem "Rev Unapproved"
                    End If
                    If tgUrf(0).sCompToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sCompToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                ElseIf slStatus = "I" Then
                    Contract.lbcStatus.AddItem "Rev Working"
                    Contract.lbcStatus.AddItem "Rev Unapproved"
                    If tgUrf(0).sIncompToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Rev Completed"
                    End If
                    If tgUrf(0).sIncompToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sIncompToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                Else
                    Contract.lbcStatus.AddItem "Rev Working"
                    If tgUrf(0).sWorkToComp = "Y" Then
                        Contract.lbcStatus.AddItem "Rev Completed"
                    End If
                    If tgUrf(0).sWorkToHold = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Hold"
                    End If
                    If tgUrf(0).sWorkToOrder = "Y" Then
                        Contract.lbcStatus.AddItem "Approved Order"
                    End If
                End If
            Case 5  'Change Hold to Order
                Contract.lbcStatus.AddItem "Hold"
                If tgUrf(0).sHoldToOrder = "Y" Then
                    Contract.lbcStatus.AddItem "Order"
                End If
            Case 6  'View
                If slStatus = "G" Then
                    Contract.lbcStatus.AddItem "Approved Hold"
                ElseIf slStatus = "H" Then
                    Contract.lbcStatus.AddItem "Hold"
                ElseIf slStatus = "N" Then
                    Contract.lbcStatus.AddItem "Approved Order"
                ElseIf slStatus = "O" Then
                    Contract.lbcStatus.AddItem "Order"
                ElseIf slStatus = "D" Then
                    Contract.lbcStatus.AddItem "Rejected"
                ElseIf slStatus = "W" Then
                    If ilCntRevNo > 0 Then
                        Contract.lbcStatus.AddItem "Rev Working"
                    Else
                        Contract.lbcStatus.AddItem "Working Proposal"
                    End If
                ElseIf slStatus = "C" Then
                    If ilCntRevNo > 0 Then
                        Contract.lbcStatus.AddItem "Rev Completed"
                    Else
                        Contract.lbcStatus.AddItem "Completed Proposal"
                    End If
                ElseIf slStatus = "I" Then
                    If ilCntRevNo > 0 Then
                        Contract.lbcStatus.AddItem "Rev Unapproved"
                    Else
                        Contract.lbcStatus.AddItem "Unapproved Proposal"
                    End If
                End If
        End Select
    End If
End Sub

Function mSwapCodes(ilHdChgOnly As Integer, hmCHF As Integer, hmClf As Integer, hmCff As Integer, hmDsf As Integer, hlSbf As Integer, hlMsf As Integer) As Integer
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilRet As Integer
    Dim ilFound As Integer
    Dim ilPrevChf As Integer
    Dim llPChfRecPos As Long
    Dim llPChfCode As Long
    Dim llPCode As Long
    'Dim ilPRemoteID As Integer
    'Dim llPAutoCode As Long
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim ilCffRecLen As Integer
    Dim tlChf As CHF
    Dim tlClf As CLF
    Dim tlCff As CFF

    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    ilCffRecLen = Len(tlCff)
    imSbfRecLen = Len(tmSbf)
    imDsfRecLen = Len(tmDsf)
    ilRet = gObtainCntr(hmCHF, hmClf, hmCff, tgChfCntr.lCode, True, tmChf, tgClfCntr(), tgCffCntr())
    If ilRet Then
        tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
        tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo - 1
        tmChfSrchKey1.iPropVer = 32000
        ilRet = btrGetGreaterOrEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        If (ilRet <> BTRV_ERR_NONE) Or (tlChf.lCntrNo <> tgChfCntr.lCntrNo) Then
            ilPrevChf = False
        Else
            llPChfCode = tlChf.lCode
            ilRet = btrGetPosition(hmCHF, llPChfRecPos)
            If ilRet <> BTRV_ERR_NONE Then
                mSwapCodes = ilRet
                Exit Function
            End If
            llPCode = tlChf.lCode
            'ilPRemoteID = tlChf.iRemoteID
            'llPAutoCode = tlChf.lAutoCode
            ilPrevChf = True
        End If
    Else
        ilPrevChf = False
    End If
    If ilPrevChf Then
        If csiHandleValue(0, 15) <= 0 Then
'            ilRet = btrBeginTrans(hmCHF, -1000) 'Wait for file locks
'            If ilRet <> BTRV_ERR_NONE Then
'                mSwapCodes = ilRet
'                Exit Function
'            End If
        End If
        If Not ilHdChgOnly Then
            'ilRet = btrBeginTrans(hmChf, 1000) 'Wait for file locks
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                'ilRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                ilRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet <> BTRV_ERR_NONE Then
                    mSwapCodes = ilRet
'                    ilRet = btrAbortTrans(hmCHF)
                    Exit Function
                End If
                If (tlChf.lCode = tlClf.lChfCode) And (tlClf.sDelete <> "Y") Then
                    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        'If lines have the same CntRevNo, then lines don't need to be swapped
                        'as they are the same
                        If (tgClfCntr(ilLoop).ClfRec.iLine = tlClf.iLine) And (tgClfCntr(ilLoop).ClfRec.iCntRevNo > tlClf.iCntRevNo) Then
                            ilCff = tgClfCntr(ilClf).iFirstCff
                            Do While ilCff <> -1
                                Do
                                    'ilRet = btrGetDirect(hmCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                    tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                    ilRet = btrGetEqual(hmCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                    If ilRet <> BTRV_ERR_NONE Then
                                        mSwapCodes = ilRet
 '                                       ilRet = btrAbortTrans(hmCHF)
                                        Exit Function
                                    End If
                                    'tmRec = tlCff
                                    'ilRet = gGetByKeyForUpdate("Cff", hmCff, tmRec)
                                    'tlCff = tmRec
                                    'If ilRet <> BTRV_ERR_NONE Then
                                    '    mSwapCodes = ilRet
                                    '    ilRet = btrAbortTrans(hmChf)
                                    '    Exit Function
                                    'End If
                                    ilRet = btrDelete(hmCff)
                                Loop While ilRet = BTRV_ERR_CONFLICT
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                            ilCff = tgClfCntr(ilLoop).iFirstCff
                            Do While ilCff <> -1
                                Do
                                    'ilRet = btrGetDirect(hmCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                    tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                    ilRet = btrGetEqual(hmCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                    If ilRet <> BTRV_ERR_NONE Then
                                        mSwapCodes = ilRet
'                                        ilRet = btrAbortTrans(hmCHF)
                                        Exit Function
                                    End If
                                    'tmRec = tlCff
                                    'ilRet = gGetByKeyForUpdate("Cff", hmCff, tmRec)
                                    'tlCff = tmRec
                                    'If ilRet <> BTRV_ERR_NONE Then
                                    '    mSwapCodes = ilRet
                                    '    ilRet = btrAbortTrans(hmChf)
                                    '    Exit Function
                                    'End If
                                    ilRet = btrDelete(hmCff)
                                Loop While ilRet = BTRV_ERR_CONFLICT
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                            Do
                                'ilRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                                ilRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                'tmRec = tlClf
                                'ilRet = gGetByKeyForUpdate("Clf", hmClf, tmRec)
                                'tlClf = tmRec
                                'If ilRet <> BTRV_ERR_NONE Then
                                '    mSwapCodes = ilRet
                                '    ilRet = btrAbortTrans(hmChf)
                                '    Exit Function
                                'End If
                                ilRet = btrDelete(hmClf)
                            Loop While ilRet = BTRV_ERR_CONFLICT
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If
                            Do
                                'ilRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                tmClfSrchKey2.lCode = tgClfCntr(ilLoop).ClfRec.lCode
                                ilRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                'tmRec = tlClf
                                'ilRet = gGetByKeyForUpdate("Clf", hmClf, tmRec)
                                'tlClf = tmRec
                                'If ilRet <> BTRV_ERR_NONE Then
                                '    mSwapCodes = ilRet
                                '    ilRet = btrAbortTrans(hmChf)
                                '    Exit Function
                                'End If
                                ilRet = btrDelete(hmClf)
                            Loop While ilRet = BTRV_ERR_CONFLICT
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If

                            ilCff = tgClfCntr(ilClf).iFirstCff
                            Do While ilCff <> -1
                                tgCffCntr(ilCff).CffRec.lChfCode = tmChf.lCode
                                tgCffCntr(ilCff).CffRec.lCode = 0
                                ilRet = btrInsert(hmCff, tgCffCntr(ilCff).CffRec, ilCffRecLen, INDEXKEY1)
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                            ilCff = tgClfCntr(ilLoop).iFirstCff
                            Do While ilCff <> -1
                                tgCffCntr(ilCff).CffRec.lChfCode = tlChf.lCode
                                tgCffCntr(ilCff).CffRec.lCode = 0
                                ilRet = btrInsert(hmCff, tgCffCntr(ilCff).CffRec, ilCffRecLen, INDEXKEY1)
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                            tgClfCntr(ilClf).ClfRec.lChfCode = tmChf.lCode
                            ilRet = btrInsert(hmClf, tgClfCntr(ilClf).ClfRec, ilClfRecLen, INDEXKEY0)
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If
                            tgClfCntr(ilLoop).ClfRec.lChfCode = tlChf.lCode
                            ilRet = btrInsert(hmClf, tgClfCntr(ilLoop).ClfRec, ilClfRecLen, INDEXKEY0)
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If

                            Exit For
                        End If
                    Next ilLoop
                Else
                    'Test if new line
                    ilFound = False
                    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If (tgClfCntr(ilClf).ClfRec.iLine = tgClfCntr(ilLoop).ClfRec.iLine) And (ilClf <> ilLoop) Then
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        ilCff = tgClfCntr(ilClf).iFirstCff
                        Do While ilCff <> -1
                            Do
                                'ilRet = btrGetDirect(hmCff, tlCff, ilCffRecLen, tgCffCntr(ilCff).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                tmCffSrchKey1.lCode = tgCffCntr(ilCff).CffRec.lCode
                                ilRet = btrGetEqual(hmCff, tlCff, ilCffRecLen, tmCffSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                If ilRet <> BTRV_ERR_NONE Then
                                    mSwapCodes = ilRet
'                                    ilRet = btrAbortTrans(hmCHF)
                                    Exit Function
                                End If
                                'tmRec = tlCff
                                'ilRet = gGetByKeyForUpdate("Cff", hmCff, tmRec)
                                'tlCff = tmRec
                                'If ilRet <> BTRV_ERR_NONE Then
                                '    mSwapCodes = ilRet
                                '    ilRet = btrAbortTrans(hmChf)
                                '    Exit Function
                                'End If
                                ilRet = btrDelete(hmCff)
                            Loop While ilRet = BTRV_ERR_CONFLICT
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If
                            ilCff = tgCffCntr(ilCff).iNextCff
                        Loop
                        Do
                            'ilRet = btrGetDirect(hmClf, tlClf, ilClfRecLen, tgClfCntr(ilClf).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            tmClfSrchKey2.lCode = tgClfCntr(ilClf).ClfRec.lCode
                            ilRet = btrGetEqual(hmClf, tlClf, ilClfRecLen, tmClfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If
                            'tmRec = tlClf
                            'ilRet = gGetByKeyForUpdate("Clf", hmClf, tmRec)
                            'tlClf = tmRec
                            'If ilRet <> BTRV_ERR_NONE Then
                            '    mSwapCodes = ilRet
                            '    ilRet = btrAbortTrans(hmChf)
                            '    Exit Function
                            'End If
                            ilRet = btrDelete(hmClf)
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            mSwapCodes = ilRet
'                            ilRet = btrAbortTrans(hmCHF)
                            Exit Function
                        End If
                        ilCff = tgClfCntr(ilClf).iFirstCff
                        Do While ilCff <> -1
                            tgCffCntr(ilCff).CffRec.lChfCode = tlChf.lCode
                            tgCffCntr(ilCff).CffRec.lCode = 0
                            ilRet = btrInsert(hmCff, tgCffCntr(ilCff).CffRec, ilCffRecLen, INDEXKEY1)
                            If ilRet <> BTRV_ERR_NONE Then
                                mSwapCodes = ilRet
'                                ilRet = btrAbortTrans(hmCHF)
                                Exit Function
                            End If
                            ilCff = tgCffCntr(ilCff).iNextCff
                        Loop
                        tgClfCntr(ilClf).ClfRec.lChfCode = tlChf.lCode
                        ilRet = btrInsert(hmClf, tgClfCntr(ilClf).ClfRec, ilClfRecLen, INDEXKEY0)
                        If ilRet <> BTRV_ERR_NONE Then
                            mSwapCodes = ilRet
'                            ilRet = btrAbortTrans(hmCHF)
                            Exit Function
                        End If
                    End If
                End If
            Next ilClf
            'ilRet = btrEndTrans(hmClf)
        End If
        'Swap Code in Chf
        'ilRet = btrBeginTrans(hmChf, 1000) 'Wait for file locks
        Do
            tmChfSrchKey.lCode = tgChfCntr.lCode
            ilRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapCodes = ilRet
'                ilRet = btrAbortTrans(hmCHF)
                Exit Function
            End If
            ilRet = btrDelete(hmCHF)
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapCodes = ilRet
'            ilRet = btrAbortTrans(hmCHF)
            Exit Function
        End If
'        If tgSpf.sRemoteUsers = "Y" Then
'            tmDsf.lCode = 0
'            tmDsf.sFileName = "CHF"
'            gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'            gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'            tmDsf.iRemoteID = tlChf.iRemoteID
'            tmDsf.lAutoCode = tlChf.lAutoCode
'            tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'            tmDsf.lCntrNo = tlChf.lCntrNo
'            ilRet = btrInsert(hmDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'            If ilRet <> BTRV_ERR_NONE Then
'                mSwapCodes = ilRet
'                ilRet = btrAbortTrans(hmChf)
'                Exit Function
'            End If
'        End If
        Do
            'ilRet = btrGetDirect(hmCHF, tlChf, ilChfRecLen, llPChfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            tmChfSrchKey.lCode = llPChfCode
            ilRet = btrGetEqual(hmCHF, tlChf, ilChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet <> BTRV_ERR_NONE Then
                mSwapCodes = ilRet
'                ilRet = btrAbortTrans(hmCHF)
                Exit Function
            End If
            'tmRec = tlChf
            'ilRet = gGetByKeyForUpdate("Chf", hmChf, tmRec)
            'If ilRet <> BTRV_ERR_NONE Then
            '    mSwapCodes = ilRet
            '    ilRet = btrAbortTrans(hmChf)
            '    Exit Function
            'End If
            'tlChf = tmRec
            ilRet = btrDelete(hmCHF)
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapCodes = ilRet
'            ilRet = btrAbortTrans(hmCHF)
            Exit Function
        End If
'        If tgSpf.sRemoteUsers = "Y" Then
'            tmDsf.lCode = 0
'            tmDsf.sFileName = "CHF"
'            gPackDate smSyncDate, tmDsf.iSyncDate(0), tmDsf.iSyncDate(1)
'            gPackTime smSyncTime, tmDsf.iSyncTime(0), tmDsf.iSyncTime(1)
'            tmDsf.iRemoteID = tmChf.iRemoteID
'            tmDsf.lAutoCode = tmChf.lAutoCode
'            tmDsf.iSourceID = tgUrf(0).iRemoteUserID
'            tmDsf.lCntrNo = tlChf.lCntrNo
'            ilRet = btrInsert(hmDsf, tmDsf, imDsfRecLen, INDEXKEY0)
'            If ilRet <> BTRV_ERR_NONE Then
'                mSwapCodes = ilRet
'                ilRet = btrAbortTrans(hmChf)
'                Exit Function
'            End If
'        End If
        tlChf.lCode = tgChfCntr.lCode
        'tlChf.iRemoteID = tgChfCntr.iRemoteID
        'tlChf.lAutoCode = tgChfCntr.lAutoCode
        tlChf.sDelete = "Y"
        'gPackDate smSyncDate, tlChf.iSyncDate(0), tlChf.iSyncDate(1)
        'gPackTime smSyncTime, tlChf.iSyncTime(0), tlChf.iSyncTime(1)
        'tlChf.iSourceID = tgUrf(0).iRemoteUserID
        ilRet = btrInsert(hmCHF, tlChf, ilChfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapCodes = ilRet
'            ilRet = btrAbortTrans(hmCHF)
            Exit Function
        End If
        tgChfCntr.lCode = llPCode
        'tgChfCntr.iRemoteID = ilPRemoteID
        'tgChfCntr.lAutoCode = llPAutoCode
        tgChfCntr.iHdChg = 0
        If tgChfCntr.sStatus = "G" Then
            tgChfCntr.sStatus = "H"
        ElseIf tgChfCntr.sStatus = "N" Then
            tgChfCntr.sStatus = "O"
        End If
        tgChfCntr.sDelete = "N"
        'gPackDate smSyncDate, tgChfCntr.iSyncDate(0), tgChfCntr.iSyncDate(1)
        'gPackTime smSyncTime, tgChfCntr.iSyncTime(0), tgChfCntr.iSyncTime(1)
        'tgChfCntr.iSourceID = tgUrf(0).iRemoteUserID
        ilRet = btrInsert(hmCHF, tgChfCntr, ilChfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapCodes = ilRet
'            ilRet = btrAbortTrans(hmCHF)
            Exit Function
        End If
        'Swap NTR records
        ilRet = mSwapSbfMsfPcf(hlSbf, hlMsf, tlChf.lCode, tgChfCntr.lCode)
        If ilRet <> BTRV_ERR_NONE Then
'            ilRet = btrEndTrans(hmCHF)
        End If
    End If
    mSwapCodes = BTRV_ERR_NONE
    Exit Function
End Function

Private Function mSwapSbfMsfPcf(hlSbf As Integer, hlMsf As Integer, llFromChfCode As Long, llToChfCode As Long) As Integer
    Dim ilRet As Integer
    Dim ilUpper As Integer
    Dim ilLoop As Integer
    Dim hlPcf As Integer

    'Get SBF records to be moved
    ReDim tmCSbf(0 To 0) As SBF
    ilUpper = 0
    imSbfRecLen = Len(tmSbf)
    tmSbfSrchKey0.lChfCode = llFromChfCode
    tmSbfSrchKey0.iDate(0) = 0
    tmSbfSrchKey0.iDate(1) = 0
    tmSbfSrchKey0.sTranType = " "
    ilRet = btrGetGreaterOrEqual(hlSbf, tmCSbf(ilUpper), imSbfRecLen, tmSbfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmCSbf(ilUpper).lChfCode = llFromChfCode)
        If (tmCSbf(ilUpper).sTranType = "I") Or (tmCSbf(ilUpper).sTranType = "F") Then
            ilUpper = ilUpper + 1
            ReDim Preserve tmCSbf(0 To ilUpper) As SBF
        End If
        ilRet = btrGetNext(hlSbf, tmCSbf(ilUpper), imSbfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    ReDim tmPSbf(0 To 0) As SBF
    ilUpper = 0
    tmSbfSrchKey0.lChfCode = llToChfCode
    tmSbfSrchKey0.iDate(0) = 0
    tmSbfSrchKey0.iDate(1) = 0
    tmSbfSrchKey0.sTranType = " "
    ilRet = btrGetGreaterOrEqual(hlSbf, tmPSbf(ilUpper), imSbfRecLen, tmSbfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmPSbf(ilUpper).lChfCode = llToChfCode)
        If (tmPSbf(ilUpper).sTranType = "I") Or (tmPSbf(ilUpper).sTranType = "F") Then
            ilUpper = ilUpper + 1
            ReDim Preserve tmPSbf(0 To ilUpper) As SBF
        End If
        ilRet = btrGetNext(hlSbf, tmPSbf(ilUpper), imSbfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    'Delete records from SBF
    For ilLoop = LBound(tmCSbf) To UBound(tmCSbf) - 1 Step 1
        Do
            tmSbfSrchKey1.lCode = tmCSbf(ilLoop).lCode
            ilRet = btrGetEqual(hlSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapSbfMsfPcf = ilRet
                Exit Function
            End If
            ilRet = btrDelete(hlSbf)
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Delete records from SBF
    For ilLoop = LBound(tmPSbf) To UBound(tmPSbf) - 1 Step 1
        Do
            tmSbfSrchKey1.lCode = tmPSbf(ilLoop).lCode
            ilRet = btrGetEqual(hlSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapSbfMsfPcf = ilRet
                Exit Function
            End If
            ilRet = btrDelete(hlSbf)
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Restore the records
    For ilLoop = LBound(tmCSbf) To UBound(tmCSbf) - 1 Step 1
        tmCSbf(ilLoop).lChfCode = llToChfCode
        ilRet = btrInsert(hlSbf, tmCSbf(ilLoop), imSbfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    For ilLoop = LBound(tmPSbf) To UBound(tmPSbf) - 1 Step 1
        tmPSbf(ilLoop).lChfCode = llFromChfCode
        ilRet = btrInsert(hlSbf, tmPSbf(ilLoop), imSbfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Get MSF records to be moved
    ReDim tmCMsf(0 To 0) As MSF
    ilUpper = 0
    imMsfRecLen = Len(tmMsf)
    tmMsfSrchKey2.lChfCode = llFromChfCode
    ilRet = btrGetGreaterOrEqual(hlMsf, tmCMsf(ilUpper), imMsfRecLen, tmMsfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmCMsf(ilUpper).lChfCode = llFromChfCode)
        ilUpper = ilUpper + 1
        ReDim Preserve tmCMsf(0 To ilUpper) As MSF
        If igDoEvent Then
            DoEvents
        End If
        ilRet = btrGetNext(hlMsf, tmCMsf(ilUpper), imMsfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    ReDim tmPMsf(0 To 0) As MSF
    ilUpper = 0
    tmMsfSrchKey2.lChfCode = llToChfCode
    ilRet = btrGetGreaterOrEqual(hlMsf, tmPMsf(ilUpper), imMsfRecLen, tmMsfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmPMsf(ilUpper).lChfCode = llToChfCode)
        ilUpper = ilUpper + 1
        ReDim Preserve tmPMsf(0 To ilUpper) As MSF
        If igDoEvent Then
            DoEvents
        End If
        ilRet = btrGetNext(hlMsf, tmPMsf(ilUpper), imMsfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    'Delete records from Msf
    For ilLoop = LBound(tmCMsf) To UBound(tmCMsf) - 1 Step 1
        Do
            tmMsfSrchKey0.lCode = tmCMsf(ilLoop).lCode
            ilRet = btrGetEqual(hlMsf, tmMsf, imMsfRecLen, tmMsfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapSbfMsfPcf = ilRet
                Exit Function
            End If
            ilRet = btrDelete(hlMsf)
            If igDoEvent Then
                DoEvents
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Delete records from Msf
    For ilLoop = LBound(tmPMsf) To UBound(tmPMsf) - 1 Step 1
        Do
            tmMsfSrchKey0.lCode = tmPMsf(ilLoop).lCode
            ilRet = btrGetEqual(hlMsf, tmMsf, imMsfRecLen, tmMsfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapSbfMsfPcf = ilRet
                Exit Function
            End If
            ilRet = btrDelete(hlMsf)
            If igDoEvent Then
                DoEvents
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Restore the records
    For ilLoop = LBound(tmCMsf) To UBound(tmCMsf) - 1 Step 1
        tmCMsf(ilLoop).lChfCode = llToChfCode
        ilRet = btrInsert(hlMsf, tmCMsf(ilLoop), imMsfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
        If igDoEvent Then
            DoEvents
        End If
    Next ilLoop
    For ilLoop = LBound(tmPMsf) To UBound(tmPMsf) - 1 Step 1
        tmPMsf(ilLoop).lChfCode = llFromChfCode
        ilRet = btrInsert(hlMsf, tmPMsf(ilLoop), imMsfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
        If igDoEvent Then
            DoEvents
        End If
    Next ilLoop

    'Get PCF records to be moved
    hlPcf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hlPcf, "", sgDBPath & "Pcf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    ReDim tmCPcf(0 To 0) As PCF
    ilUpper = 0
    imPcfRecLen = Len(tmPcf)
    tmPcfSrchKey2.lChfCode = llFromChfCode
    tmPcfSrchKey2.iVefCode = 0
    ilRet = btrGetGreaterOrEqual(hlPcf, tmCPcf(ilUpper), imPcfRecLen, tmPcfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmCPcf(ilUpper).lChfCode = llFromChfCode)
        ilUpper = ilUpper + 1
        ReDim Preserve tmCPcf(0 To ilUpper) As PCF
        If igDoEvent Then
            DoEvents
        End If
        ilRet = btrGetNext(hlPcf, tmCPcf(ilUpper), imPcfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    ReDim tmPPcf(0 To 0) As PCF
    ilUpper = 0
    tmPcfSrchKey2.lChfCode = llToChfCode
    tmPcfSrchKey2.iVefCode = 0
    ilRet = btrGetGreaterOrEqual(hlPcf, tmPPcf(ilUpper), imPcfRecLen, tmPcfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmPPcf(ilUpper).lChfCode = llToChfCode)
        ilUpper = ilUpper + 1
        ReDim Preserve tmPPcf(0 To ilUpper) As PCF
        If igDoEvent Then
            DoEvents
        End If
        ilRet = btrGetNext(hlPcf, tmPPcf(ilUpper), imPcfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    'Delete records from Pcf
    For ilLoop = LBound(tmCPcf) To UBound(tmCPcf) - 1 Step 1
        Do
            tmPcfSrchKey0.lCode = tmCPcf(ilLoop).lCode
            ilRet = btrGetEqual(hlPcf, tmPcf, imPcfRecLen, tmPcfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapSbfMsfPcf = ilRet
                Exit Function
            End If
            ilRet = btrDelete(hlPcf)
            If igDoEvent Then
                DoEvents
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Delete records from Pcf
    For ilLoop = LBound(tmPPcf) To UBound(tmPPcf) - 1 Step 1
        Do
            tmPcfSrchKey0.lCode = tmPPcf(ilLoop).lCode
            ilRet = btrGetEqual(hlPcf, tmPcf, imPcfRecLen, tmPcfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                mSwapSbfMsfPcf = ilRet
                Exit Function
            End If
            ilRet = btrDelete(hlPcf)
            If igDoEvent Then
                DoEvents
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
    Next ilLoop
    'Restore the records
    For ilLoop = LBound(tmCPcf) To UBound(tmCPcf) - 1 Step 1
        tmCPcf(ilLoop).lChfCode = llToChfCode
        ilRet = btrInsert(hlPcf, tmCPcf(ilLoop), imPcfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
        If igDoEvent Then
            DoEvents
        End If
    Next ilLoop
    For ilLoop = LBound(tmPPcf) To UBound(tmPPcf) - 1 Step 1
        tmPPcf(ilLoop).lChfCode = llFromChfCode
        ilRet = btrInsert(hlPcf, tmPPcf(ilLoop), imPcfRecLen, INDEXKEY0)
        If ilRet <> BTRV_ERR_NONE Then
            mSwapSbfMsfPcf = ilRet
            Exit Function
        End If
        If igDoEvent Then
            DoEvents
        End If
    Next ilLoop

    ilRet = btrClose(hlPcf)
    btrDestroy hlPcf

    Erase tmCSbf
    Erase tmPSbf
    Erase tmCMsf
    Erase tmPMsf
    Erase tmCPcf
    Erase tmPPcf

    mSwapSbfMsfPcf = BTRV_ERR_NONE
    Exit Function

End Function

Function mTestMPBalance(hlAgf As Integer, slLnGrossTotal As String) As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slATotal As String
    Dim slBTotal As String
    Dim slPercent As String
    Dim slAgyRate As String
    Dim slLnTNet As String
    Dim ilRet As Integer
    Dim slLnTGross As String

    If tgUrf(0).iRemoteUserID > 0 Then
        mTestMPBalance = True
        Exit Function
    End If
    imAgfRecLen = Len(tmAgf) 'btrRecordLength(hmAgf)    'Get Cff size
    gUnformatStr slLnGrossTotal, 0, slLnTGross
    slAgyRate = ""
    If tgChfCntr.iAgfCode > 0 Then
        tmAgfSrchKey.iCode = tgChfCntr.iAgfCode
        ilRet = btrGetEqual(hlAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        If tgChfCntr.iPctTrade <= 0 Then
            slAgyRate = gIntToStrDec(tmAgf.iComm, 2)
        Else
            If tgChfCntr.sAgyCTrade = "Y" Then
                slAgyRate = gIntToStrDec(tmAgf.iComm, 2)
            Else
                slAgyRate = ""
            End If
        End If
        If slAgyRate <> "" Then
            slLnTNet = gDivStr(gMulStr(slLnTGross, gSubStr("100.00", slAgyRate)), "100.00")
        Else
            slLnTNet = slLnTGross
        End If
    Else
        slLnTNet = slLnTGross
    End If
    '6/13/06: Balance checking not required for precent of zero
    'If tgChfCntr.iMerchPct <> 0 Then
    If (Asc(tgSpf.sUsingFeatures2) And MERCHPROMOBYDOLLAR) <> MERCHPROMOBYDOLLAR Then
        'slPercent = gIntToStrDec(tgChfCntr.iMerchPct, 3)
        'Jim: 4/2/99- change to two places as abc requested
        slPercent = gIntToStrDec(tgChfCntr.iMerchPct, 2)
        slBTotal = gDivStr(gMulStr(slLnTNet, slPercent), "100")
        slBTotal = gRoundStr(slBTotal, ".01", 2)
        slATotal = ".00"
        For ilLoop = 0 To UBound(tgMBSbf) - 1 Step 1
            If (tgMBSbf(ilLoop).iStatus = 0) Or (tgMBSbf(ilLoop).iStatus = 1) Then
                'gPDNToStr tgMBSbf(ilLoop).SbfRec.sItemAmount, 2, slStr
                slStr = gLongToStrDec(tgMBSbf(ilLoop).SbfRec.lGross, 2)
                slATotal = gAddStr(slATotal, slStr)
            End If
        Next ilLoop
        slATotal = gRoundStr(slATotal, ".01", 2)
        If Val(slBTotal) <> Val(slATotal) Then
            ilRet = MsgBox("Merchandising Amount " & slATotal & " Not in Balance with Contract Amount " & slBTotal & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
            If ilRet = vbNo Then
                mTestMPBalance = False
                Exit Function
            End If
        End If
    End If
    'Promotion
    If (Asc(tgSpf.sUsingFeatures2) And MERCHPROMOBYDOLLAR) <> MERCHPROMOBYDOLLAR Then
        'slPercent = gIntToStrDec(tgChfCntr.iPromoPct, 3)
        slPercent = gIntToStrDec(tgChfCntr.iPromoPct, 2)
        slBTotal = gDivStr(gMulStr(slLnTNet, slPercent), "100")
        slBTotal = gRoundStr(slBTotal, ".01", 2)
        slATotal = ".00"
        For ilLoop = 0 To UBound(tgPBSbf) - 1 Step 1
            If (tgPBSbf(ilLoop).iStatus = 0) Or (tgPBSbf(ilLoop).iStatus = 1) Then
                'gPDNToStr tgPBSbf(ilLoop).SbfRec.sItemAmount, 2, slStr
                slStr = gLongToStrDec(tgPBSbf(ilLoop).SbfRec.lGross, 2)
                slATotal = gAddStr(slATotal, slStr)
            End If
        Next ilLoop
        slATotal = gRoundStr(slATotal, ".01", 2)
        If Val(slBTotal) <> Val(slATotal) Then
            ilRet = MsgBox("Promotion Amount " & slATotal & " Not in Balance with Contract Amount " & slBTotal & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
            If ilRet = vbNo Then
                mTestMPBalance = False
                Exit Function
            End If
        End If
    End If
    mTestMPBalance = True
End Function

Sub mTSummary(ilLnRowNo As Integer, hmDrf As Integer, hmMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilDBTotals As Integer, ilOnFlightScreen As Integer, ilCPPCPM As Integer, imVefCode As Integer, ilVpfIndex As Integer, ilTerminate As Integer, ilChgMode As Integer, ilInResearch As Integer, ilVehIndex As Integer, ilDPIndex As Integer, ilStep1Index As Integer, ilSetTOVDSumValue As Integer, ilPartSum As Integer)
    Dim ilSvLnRowNo As Integer
    Dim ilSvDBTotals As Integer
    Dim ilClf As Integer
    Dim slLineType As String
    Dim ilUpper As Integer
    Dim slStr As String
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llCntrPop As Long   '-1=Not assigned; 0=Lines contain different populations; >0 = Line Population if same
    'Dim llCTotalCost As Long     'Total Cost for Contract
    Dim dlCTotalCost As Double     'Total Cost for Contract'TTP 10439 - Rerate 21,000,000
    Dim llCTotalSpots As Long    'Total Spots for Contract
    Dim ilCAvgRating As Integer  'Average Rating for line and contract (not used)
    Dim llCGRP As Long           'GRP (1 place)
    Dim llCCPP As Long           'CPP (0 places) for line and contract
    Dim llCCPM As Long           'CPM (2 places) for line and contract
    Dim llCGrImp As Long         'Gross Impression for contract
    'Dim llTotalCost As Long     'Total Cost for Contract
    Dim dlTotalCost As Double     'Total Cost for Contract'TTP 10439 - Rerate 21,000,000
    Dim llTotalSpots As Long    'Total Spots for Contract
    Dim ilAvgRating As Integer  'Average Rating for line and contract (not used)
    Dim llGRP As Long           'GRP (1 place)
    Dim llCPP As Long           'CPP (0 places) for line and contract
    Dim llCPM As Long           'CPM (2 places) for line and contract
    Dim llGrImp As Long         'Gross Impression for contract
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilIndex As Integer
    Dim ilNoSel As Integer
    Dim slVDStr As String
    Dim ilInclude As Integer
    Dim slGroupName As String
    Dim blGroupFd As Boolean
    Dim slNameCode As String
    Dim slCode As String
    Dim ilDP As Integer
    Dim ilRet As Integer
    
    If bmInCancel Then
        Exit Sub
    End If
    If imInTSummary Then
        Exit Sub
    End If
    imInTSummary = True
    ilSvLnRowNo = ilLnRowNo
    ilSvDBTotals = ilDBTotals
    ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
    If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
    Else
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
    End If
    ilStartRow = ilStartRow - 1
    ilEndRow = ilEndRow - 1
    'Set all Package lines
    For ilClf = ilStartRow To ilEndRow Step 1
        ilDBTotals = 0
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo, True)
        If (Not tgClfCntr(ilClf).iCancel) And ((slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E")) Then
            'mGetResearchTotals False
            'mGetResearchTotals ilLnRowNo, hmDrf, hmMnf, ilDBTotals, False, ilCppCpm, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch
            'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM
            mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM 'TTP 10439 - Rerate 21,000,000
            Exit For
        End If
    Next ilClf
    For ilClf = ilStartRow To ilEndRow Step 1
        ilDBTotals = 4
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo, True)
        If (Not tgClfCntr(ilClf).iCancel) And ((slLineType = "O") Or (slLineType = "A") Or (slLineType = "E")) Then
            'mGetResearchTotals False
            'mGetResearchTotals ilLnRowNo, hmDrf, hmMnf, ilDBTotals, False, ilCppCpm, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch
            'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM
            mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM 'TTP 10439 - Rerate 21,000,000
        End If
    Next ilClf
    If Not ilPartSum Then
        ilDBTotals = 1  'Get Contract totals so that all lines except package lines are computed
    Else
        ilDBTotals = 1
        If ilSvDBTotals = 5 Then
            For ilLoop = imLB1Or2 To UBound(smLnSumShow, 2) Step 1
                If Trim$(smLnSumShow(12, ilLoop)) = "T" Then
                    ilDBTotals = 11
                    Exit For
                End If
            Next ilLoop
        ElseIf ilSvDBTotals = 8 Then
            For ilLoop = imLB1Or2 To UBound(smVSumShow, 2) Step 1
                If Trim$(smVSumShow(12, ilLoop)) = "T" Then
                    ilDBTotals = 12
                    Exit For
                End If
            Next ilLoop
        ElseIf ilSvDBTotals = 9 Then
            For ilLoop = imLB1Or2 To UBound(smDPSumShow, 2) Step 1
                If Trim$(smDPSumShow(12, ilLoop)) = "T" Then
                    ilDBTotals = 13
                    Exit For
                End If
            Next ilLoop
        End If
        If ilDBTotals = 1 Then
            ilNoSel = True
        Else
            ilNoSel = False
        End If
    End If
    'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM
    mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlCTotalCost, llCTotalSpots, ilCAvgRating, llCGrImp, llCGRP, llCCPP, llCCPM 'TTP 10439 - Rerate 21,000,000
    mGetMajorityPopulation
    'GRP
    slStr = ""
    If llCGRP > 0 Then
        slStr = gLongToStrDec(llCGRP, 1)
    End If
    If Not ilSetTOVDSumValue Then
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(4)
        smTSumShow(1) = tmSumCtrls(4).sShow
    Else
        smTOVDSumValue(1) = slStr
    End If
    '% GRP
    If llCGRP > 0 Then
        slStr = gLongToStrDec(CCur(llCGRP) * 100 / llCGRP, 0)
    Else
        slStr = ""
    End If
    If Not ilSetTOVDSumValue Then
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(5)
        smTSumShow(2) = tmSumCtrls(5).sShow
    Else
        smTOVDSumValue(2) = slStr
    End If
    'GrImp
    slStr = ""
    If llCGrImp > 0 Then
'        If tgSpf.sSAudData <> "H" Then
'            slStr = Trim$(Str$(llCGrImp))
'        Else
'            slStr = gLongToStrDec(llCGrImp, 1)
'        End If
        If tgSpf.sSAudData = "H" Then
            slStr = gLongToStrDec(llCGrImp, 1)
        ElseIf tgSpf.sSAudData = "N" Then
            slStr = gLongToStrDec(llCGrImp, 2)
        ElseIf tgSpf.sSAudData = "U" Then
            slStr = gLongToStrDec(llCGrImp, 3)
        Else
            slStr = Trim$(str$(llCGrImp))
        End If
    End If
    If Not ilSetTOVDSumValue Then
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(6)
        smTSumShow(3) = tmSumCtrls(6).sShow
    Else
        smTOVDSumValue(3) = slStr
    End If
    '% Gr Imp
    If llCGrImp > 0 Then
        slStr = gLongToStrDec(CCur(llCGrImp) * 100 / llCGrImp, 0)
    Else
        slStr = ""
    End If
    If Not ilSetTOVDSumValue Then
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(7)
        smTSumShow(4) = tmSumCtrls(7).sShow
    Else
        smTOVDSumValue(4) = slStr
    End If
    'CPM
    'If tgSpf.sSAudData <> "H" Then
        slStr = gLongToStrDec(llCCPM, 2)
    'Else
    '    slStr = gLongToStrDec(10 * llCCPM, 2)
    'End If
    If Not ilSetTOVDSumValue Then
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(8)
        smTSumShow(5) = tmSumCtrls(8).sShow
    Else
        smTOVDSumValue(5) = slStr
    End If
    'CPP
    slStr = gLongToStrDec(llCCPP, 0)
    If Not ilSetTOVDSumValue Then
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(9)
        smTSumShow(6) = tmSumCtrls(9).sShow
    Else
        smTOVDSumValue(6) = slStr
    End If
    'Avg Price
    If (llCTotalSpots > 0) Then
        'slStr = gDivStr(gLongToStrDec(llCTotalCost, 2), gLongToStrDec(llCTotalSpots, 0))
        slStr = gDivStr(gDblToStrDec(dlCTotalCost, 2), gLongToStrDec(llCTotalSpots, 0)) 'TTP 10439 - Rerate 21,000,000
    Else
        slStr = ""
    End If
    If Not ilSetTOVDSumValue Then
        gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(10)
        smTSumShow(7) = tmSumCtrls(10).sShow
    Else
        smTOVDSumValue(7) = slStr
    End If
    'Total Price
    'slStr = gLongToStrDec(llCTotalCost, 2)
    slStr = gDblToStrDec(dlCTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
    If Not ilSetTOVDSumValue Then
        gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
        gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(11)
        smTSumShow(8) = tmSumCtrls(11).sShow
    Else
        smTOVDSumValue(8) = slStr
    End If
    If ilSvDBTotals = 5 Then    'Line Summary
        'ilDBTotals = 1  'Get Contract totals so that all lines except package lines are computed
        'mGetResearchTotals ilLnRowNo, hmDrf, hmMnf, ilDBTotals, False, ilCppCpm, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch
        'For ilClf = ilStartRow To ilEndRow Step 1
        '    ilDBTotals = 4
        '    ilLnRowNo = ilClf + 1
        '    slLineType = mGetLineType(ilLnRowNo)
        '    If (slLineType = "O") Or (slLineType = "A") Then
        '        mGetResearchTotals ilLnRowNo, hmDrf, hmMnf, ilDBTotals, False, ilCppCpm, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch
        '    End If
        'Next ilClf
        'llTotalGRP = 0
        'llTotalGrImp = 0
        'For ilClf = ilStartRow To ilEndRow Step 1
        '    If Not tgClfCntr(ilClf).iCancel Then
        '        ilLnRowNo = ilClf + 1
        '        slLineType = mGetLineType(ilLnRowNo)
        '        If (slLineType <> "H") Then
        '            llTotalGRP = llTotalGRP + tgClfCntr(ilClf).lGRP
        '            llTotalGrImp = llTotalGrImp + tgClfCntr(ilClf).lGrImp
        '        End If
        '    End If
        'Next ilClf
        'Build Display
        If Not ilPartSum Then
            ReDim smLnSumShow(0 To 12, 0 To 1) As String
        End If
        ilUpper = imLB1Or2  '1
        'For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        For ilClf = ilStartRow To ilEndRow Step 1
            '3/28/16: Bypass Hidden lines if research by package
            'If Not tgClfCntr(ilClf).iCancel Then
            ilInclude = True
            slStr = mGetLineType(ilClf + 1, True)
            If (slStr = "H") And (tgSaf(0).sAudByPackage = "Y") Then
                ilInclude = False
            End If
            If (Not tgClfCntr(ilClf).iCancel) And (ilInclude) Then
                ilLnRowNo = ilClf + 1
                slLineType = mGetLineType(ilLnRowNo, True)
                'If (slLineType <> "H") Then
                If ((slLineType <> "H") And (imSumType = 1)) Or (((slLineType = "S") Or (slLineType = "H")) And (imSumType = 0)) Then
                    If ilPartSum Then
                        For ilLoop = imLB1Or2 To UBound(smLnSumShow, 2) Step 1
                            If Val(smLnSumShow(1, ilLoop)) = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                                ilUpper = ilLoop
                                Exit For
                            End If
                        Next ilLoop
                    End If
                    smLnSumShow(1, ilUpper) = Trim$(str$(tgClfCntr(ilClf).ClfRec.iLine))
                    smLnSumShow(2, ilUpper) = smLnShow(ilVehIndex, ilLnRowNo)
                    smLnSumShow(3, ilUpper) = smLnShow(ilDPIndex, ilLnRowNo)
                    'GRP
                    slStr = ""
                    If tgClfCntr(ilClf).lGRP > 0 Then
                        slStr = gLongToStrDec(tgClfCntr(ilClf).lGRP, 1)
                    End If
                    smLnSumShow(4, ilUpper) = slStr
                    '% GRP
                    If Not ilPartSum Then
                        If llCGRP > 0 Then  'llTotalGRP > 0 Then
                            slStr = gLongToStrDec(CCur(tgClfCntr(ilClf).lGRP) * 100 / llCGRP, 0)  'llTotalGRP, 0)
                        Else
                            slStr = ""
                        End If
                    Else
                        If (ilNoSel) Or (Trim$(smLnSumShow(12, ilUpper)) = "T") Then
                            If llCGRP > 0 Then  'llTotalGRP > 0 Then
                                slStr = gLongToStrDec(CCur(tgClfCntr(ilClf).lGRP) * 100 / llCGRP, 0)  'llTotalGRP, 0)
                            Else
                                slStr = ""
                            End If
                        Else
                            slStr = ""
                        End If
                    End If
                    smLnSumShow(5, ilUpper) = slStr
                    'GrImp
                    slStr = ""
                    If tgClfCntr(ilClf).lGrImp > 0 Then
'                        If tgSpf.sSAudData <> "H" Then
'                            slStr = Trim$(Str$(tgClfCntr(ilClf).lGrImp))
'                        Else
'                            slStr = gLongToStrDec(tgClfCntr(ilClf).lGrImp, 1)
'                        End If
                        If tgSpf.sSAudData = "H" Then
                            slStr = gLongToStrDec(tgClfCntr(ilClf).lGrImp, 1)
                        ElseIf tgSpf.sSAudData = "N" Then
                            slStr = gLongToStrDec(tgClfCntr(ilClf).lGrImp, 2)
                        ElseIf tgSpf.sSAudData = "U" Then
                            slStr = gLongToStrDec(tgClfCntr(ilClf).lGrImp, 3)
                        Else
                            slStr = Trim$(str$(tgClfCntr(ilClf).lGrImp))
                        End If
                    End If
                    smLnSumShow(6, ilUpper) = slStr
                    '% Gr Imp
                    If Not ilPartSum Then
                        If llCGrImp > 0 Then    'llTotalGrImp > 0 Then
                            slStr = gLongToStrDec(CCur(tgClfCntr(ilClf).lGrImp) * 100 / llCGrImp, 0)  'llTotalGrImp, 0)
                        Else
                            slStr = ""
                        End If
                    Else
                        If (ilNoSel) Or (Trim$(smLnSumShow(12, ilUpper)) = "T") Then
                            If llCGrImp > 0 Then    'llTotalGrImp > 0 Then
                                slStr = gLongToStrDec(CCur(tgClfCntr(ilClf).lGrImp) * 100 / llCGrImp, 0)  'llTotalGrImp, 0)
                            Else
                                slStr = ""
                            End If
                        Else
                            slStr = ""
                        End If
                    End If
                    smLnSumShow(7, ilUpper) = slStr
                    'CPM
                    'If tgSpf.sSAudData <> "H" Then
                        slStr = gLongToStrDec(tgClfCntr(ilClf).lCPM, 2)
                    'Else
                    '    slStr = gLongToStrDec(10 * tgClfCntr(ilClf).lCPM, 2)
                    'End If
                    smLnSumShow(8, ilUpper) = slStr
                    'CPP
                    slStr = gLongToStrDec(tgClfCntr(ilClf).lCPP, 0)
                    smLnSumShow(9, ilUpper) = slStr
                    'Avg Price
                    'If (imLnSave(11, ilLnRowNo) > 0) And ((Left$(smLnSave(18, ilLnRowNo), 1) >= "0") And (Left$(smLnSave(18, ilLnRowNo), 1) <= "9")) Then
                    If (Val(smLnSave(23, ilLnRowNo)) > 0) And ((Left$(smLnSave(18, ilLnRowNo), 1) >= "0") And (Left$(smLnSave(18, ilLnRowNo), 1) <= "9")) Then
                        'slStr = gDivStr(smLnSave(18, ilLnRowNo), Trim$(Str$(imLnSave(11, ilLnRowNo))))
                        slStr = gDivStr(smLnSave(18, ilLnRowNo), smLnSave(23, ilLnRowNo))
                    Else
                        slStr = ""
                    End If
                    If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                        gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                    End If
                    smLnSumShow(10, ilUpper) = slStr
                    'Total Price
                    slStr = smLnSave(18, ilLnRowNo)
                    If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                        gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                    End If
                    smLnSumShow(11, ilUpper) = slStr
                    If Not ilPartSum Then
                        smLnSumShow(12, ilUpper) = "F"
                    End If
                    ilUpper = ilUpper + 1
                    If Not ilPartSum Then
                        ReDim Preserve smLnSumShow(0 To 12, 0 To ilUpper) As String
                    End If
                End If
            End If
        Next ilClf
        ilDBTotals = ilSvDBTotals
    ElseIf (ilSvDBTotals = 6) Or (ilSvDBTotals = 7) Then    'Week Summary or Quarterly Summary
        'ReDim smWkSumShow(1 To 9, 1 To 1) As String
        ReDim smWkSumShow(0 To 9, 0 To 1) As String
        ReDim tgWkAud(0 To 0) As WKAUD
        'If smLnSave(1, UBound(smLnSave, 2)) = "" Then
        '    mSetHdDate False, False
        'Else
        '    mSetHdDate True, False
        'End If
        gUnpackDateLong tgChfCntr.iStartDate(0), tgChfCntr.iStartDate(1), llStartDate
        gUnpackDateLong tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1), llEndDate
        llStartDate = gDateValue(gObtainPrevMonday(Format$(llStartDate, "m/d/yy")))
        llCntrPop = -1
        For ilClf = ilStartRow To ilEndRow Step 1
            '3/28/16: Bypass Hidden lines if research by package
            'If Not tgClfCntr(ilClf).iCancel Then
            ilInclude = True
            slStr = mGetLineType(ilClf + 1, True)
            If (slStr = "H") And (tgSaf(0).sAudByPackage = "Y") Then
                ilInclude = False
            End If
            If (Not tgClfCntr(ilClf).iCancel) And (ilInclude) Then
                ilLnRowNo = ilClf + 1
                slLineType = mGetLineType(ilLnRowNo, True)
                If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                    ilInResearch = True
                    mInitBookDemoForLn ilLnRowNo, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode
                    ilLnRowNo = ilClf + 1
                    ilInResearch = False
                    mBuildWkAud hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilLnRowNo, ilStep1Index, llStartDate, llEndDate
                    If tgClfCntr(ilLnRowNo - 1).lPop > 0 Then
                        If llCntrPop = -1 Then
                            llCntrPop = tgClfCntr(ilLnRowNo - 1).lPop
                        Else
                            If llCntrPop <> tgClfCntr(ilLnRowNo - 1).lPop Then
                                llCntrPop = 0
                            End If
                        End If
                    End If
                End If
            End If
        Next ilClf
        If ilSvDBTotals = 6 Then
            mBuildWkAudSum llStartDate, llEndDate, llCntrPop
        Else
            mBuildQAudSum llStartDate, llEndDate, llCntrPop
        End If
        'Contract.vbcSummary.Min = LBound(smWkSumShow, 2)
        'If UBound(smWkSumShow, 2) - 2 <= Contract.vbcSummary.LargeChange Then
        '    Contract.vbcSummary.Max = LBound(smWkSumShow, 2)
        'Else
        '    Contract.vbcSummary.Max = UBound(smWkSumShow, 2) - 1 - Contract.vbcSummary.LargeChange
        'End If
        'If Contract.vbcSummary.Value = Contract.vbcSummary.Min Then
        '    'Contract.pbcDemoBar_Paint 3
        'Else
        '    Contract.vbcSummary.Value = Contract.vbcSummary.Min
        'End If
    ElseIf (ilSvDBTotals = 8) Then     'Vehicle Summary
        'Determine each unique vehicle
        If Not ilPartSum Then
            ReDim smVSumShow(0 To 12, 0 To 1) As String
            ilUpper = imLB1Or2  '1
            For ilClf = ilStartRow To ilEndRow Step 1
                '3/28/16: Bypass Hidden lines if research by package
                'If Not tgClfCntr(ilClf).iCancel Then
                ilInclude = True
                slStr = mGetLineType(ilClf + 1, True)
                If (slStr = "H") And (tgSaf(0).sAudByPackage = "Y") Then
                    ilInclude = False
                End If
                If (Not tgClfCntr(ilClf).iCancel) And (ilInclude) Then
                    ilLnRowNo = ilClf + 1
                    slLineType = mGetLineType(ilLnRowNo, True)
                    'If slLineType <> "H" Then   '(slLineType <> "O") And (slLineType <> "A") Then
                    If ((slLineType <> "H") And (imSumType = 1)) Or (((slLineType = "S") Or (slLineType = "H")) And (imSumType = 0)) Then
                        ilFound = False
                        For ilLoop = imLB1Or2 To UBound(smVSumShow, 2) - 1 Step 1
                            If smVSumShow(1, ilLoop) = smLnSave(1, ilLnRowNo) Then  'smLnShow(ilVEHINDEX, ilLnRowNo) Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            smVSumShow(1, ilUpper) = smLnSave(1, ilLnRowNo) 'smLnShow(ilVEHINDEX, ilLnRowNo)
                            smVSumShow(10, ilUpper) = Trim$(str$(ilLnRowNo))
                            smVSumShow(11, ilUpper) = slLineType
                            smVSumShow(12, ilUpper) = "F"
                            ilUpper = ilUpper + 1
                            ReDim Preserve smVSumShow(0 To 12, 0 To ilUpper) As String
                        End If
                    End If
                End If
            Next ilClf
        Else
            ilUpper = UBound(smVSumShow, 2)
        End If
        For ilLoop = imLB1Or2 To ilUpper - 1 Step 1
            ilDBTotals = 2  'Get Vehicle totals
            ilLnRowNo = Val(smVSumShow(10, ilLoop))
            'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llTotalCost, llTotalSpots, ilAvgRating, llGrImp, llGRP, llCPP, llCPM
            mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlTotalCost, llTotalSpots, ilAvgRating, llGrImp, llGRP, llCPP, llCPM 'TTP 10439 - Rerate 21,000,000
            'GRP
            slStr = ""
            If llGRP > 0 Then
                slStr = gLongToStrDec(llGRP, 1)
            End If
            smVSumShow(2, ilLoop) = slStr
            '% GRP
            If Not ilPartSum Then
                If llCGRP > 0 Then
                    slStr = gLongToStrDec(CCur(llGRP) * 100 / llCGRP, 0)
                Else
                    slStr = ""
                End If
            Else
                If (ilNoSel) Or (Trim$(smVSumShow(12, ilLoop)) = "T") Then
                    If llCGRP > 0 Then
                        slStr = gLongToStrDec(CCur(llGRP) * 100 / llCGRP, 0)
                    Else
                        slStr = ""
                    End If
                Else
                    slStr = ""
                End If
            End If
            smVSumShow(3, ilLoop) = slStr
            'GrImp
            slStr = ""
            If llGrImp > 0 Then
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = Trim$(Str$(llGrImp))
'                Else
'                    slStr = gLongToStrDec(llGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(llGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(llGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(llGrImp, 3)
                Else
                    slStr = Trim$(str$(llGrImp))
                End If
            End If
            smVSumShow(4, ilLoop) = slStr
            '% Gr Imp
            If Not ilPartSum Then
                If llCGrImp > 0 Then
                    slStr = gLongToStrDec(CCur(llGrImp) * 100 / llCGrImp, 0)
                Else
                    slStr = ""
                End If
            Else
                If (ilNoSel) Or (Trim$(smVSumShow(12, ilLoop)) = "T") Then
                    If llCGrImp > 0 Then
                        slStr = gLongToStrDec(CCur(llGrImp) * 100 / llCGrImp, 0)
                    Else
                        slStr = ""
                    End If
                Else
                    slStr = ""
                End If
            End If
            smVSumShow(5, ilLoop) = slStr
            'CPM
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(llCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * llCPM, 2)
            'End If
            smVSumShow(6, ilLoop) = slStr
            'CPP
            slStr = gLongToStrDec(llCPP, 0)
            smVSumShow(7, ilLoop) = slStr
            'Avg Price
            If (llTotalSpots > 0) Then
                'slStr = gDivStr(gLongToStrDec(llTotalCost, 2), gLongToStrDec(llTotalSpots, 0))
                slStr = gDivStr(gDblToStrDec(dlTotalCost, 2), gLongToStrDec(llTotalSpots, 0)) 'TTP 10439 - Rerate 21,000,000
            Else
                slStr = ""
            End If
            If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            End If
            smVSumShow(8, ilLoop) = slStr
            'Total Price
            'slStr = gLongToStrDec(llTotalCost, 2)
            slStr = gDblToStrDec(dlTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
            If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            End If
            smVSumShow(9, ilLoop) = slStr
        Next ilLoop
        'Contract.vbcSummary.Min = LBound(smVSumShow, 2)
        'If UBound(smVSumShow, 2) - 2 <= Contract.vbcSummary.LargeChange Then
        '    Contract.vbcSummary.Max = LBound(smVSumShow, 2)
        'Else
        '    Contract.vbcSummary.Max = UBound(smVSumShow, 2) - 1 - Contract.vbcSummary.LargeChange
        'End If
        'If Contract.vbcSummary.Value = Contract.vbcSummary.Min Then
        '    Contract.pbcDemoBar_Paint 3
        'Else
        '    Contract.vbcSummary.Value = Contract.vbcSummary.Min
        'End If
    ElseIf (ilSvDBTotals = 9) Then     'Daypart Summary
        'Determine each unique vehicle
        If Not ilPartSum Then
            blGroupFd = False
            ReDim smDPSumShow(0 To 12, 0 To 1) As String
            ilUpper = imLB1Or2  '1
            For ilClf = ilStartRow To ilEndRow Step 1
                '3/28/16: Bypass Hidden lines if research by package
                'If Not tgClfCntr(ilClf).iCancel Then
                ilInclude = True
                slStr = mGetLineType(ilClf + 1, True)
                If (slStr = "H") And (tgSaf(0).sAudByPackage = "Y") Then
                    ilInclude = False
                End If
                If (Not tgClfCntr(ilClf).iCancel) And (ilInclude) Then
                    ilLnRowNo = ilClf + 1
                    slLineType = mGetLineType(ilLnRowNo, True)
                    If ((slLineType <> "H") And (imSumType = 1)) Or (((slLineType = "S") Or (slLineType = "H")) And (imSumType = 0)) Then
                        ilFound = False
                        '6/7/99- changed to match on Daypart name not Override name (smLnShow(ilDPIndex, ilLnRowNo)-  Jim request
                        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
                            slStr = mMakePrgName(imLnSave(1, ilLnRowNo))
                        Else
                            slStr = smLnSave(20, ilLnRowNo)
                        End If
                        slGroupName = mGetDaypartGroup(ilLnRowNo, hmMnf)
                        If slGroupName <> "" Then
                            slStr = slGroupName
                            blGroupFd = True
                        End If
                        For ilLoop = imLB1Or2 To UBound(smDPSumShow, 2) - 1 Step 1
                            If smDPSumShow(1, ilLoop) = slStr Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            smDPSumShow(1, ilUpper) = slStr 'smLnShow(ilDPINDEX, ilLnRowNo)
                            smDPSumShow(10, ilUpper) = Trim$(str$(ilLnRowNo))
                            smDPSumShow(11, ilUpper) = slLineType
                            smDPSumShow(12, ilUpper) = "F"
                            ilUpper = ilUpper + 1
                            ReDim Preserve smDPSumShow(0 To 12, 0 To ilUpper) As String
                        End If
                    End If
                End If
            Next ilClf
            If blGroupFd Then
                'Sort daypart group names
                ReDim tgTmpSort(0 To UBound(smDPSumShow, 2) - imLB1Or2) As SORTCODE
                For ilLoop = imLB1Or2 To UBound(smDPSumShow, 2) - 1 Step 1
                    slStr = smDPSumShow(1, ilLoop)
                    If InStr(1, slStr, "|") <= 0 Then
                        slStr = "999|" & slStr
                    End If
                    tgTmpSort(ilLoop - imLB1Or2).sKey = slStr & "\" & ilLoop
                Next ilLoop
                If UBound(tgTmpSort) - 1 > 0 Then
                    ArraySortTyp fnAV(tgTmpSort(), 0), UBound(tgTmpSort), 0, LenB(tgTmpSort(0)), 0, LenB(tgTmpSort(0).sKey), 0
                End If
                'Move records
                ReDim slDPSumShow(0 To 12, 0 To UBound(smDPSumShow, 2)) As String
                For ilLoop = 0 To UBound(tgTmpSort) - 1 Step 1
                    slNameCode = tgTmpSort(ilLoop).sKey
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilIndex = Val(Trim$(slCode))
                    For ilDP = 0 To 12 Step 1
                        slDPSumShow(ilDP, ilLoop + imLB1Or2) = smDPSumShow(ilDP, ilIndex)
                    Next ilDP
                Next ilLoop
                For ilLoop = imLB1Or2 To UBound(slDPSumShow, 2) - 1 Step 1
                    For ilDP = 0 To 12 Step 1
                        smDPSumShow(ilDP, ilLoop) = slDPSumShow(ilDP, ilLoop)
                    Next ilDP
                    If InStr(1, smDPSumShow(1, ilLoop), "|") > 0 Then
                    smDPSumShow(1, ilLoop) = Trim$(Mid$(smDPSumShow(1, ilLoop), 5))
                    End If
                Next ilLoop
            End If
        Else
            ilUpper = UBound(smDPSumShow, 2)
        End If
        For ilLoop = imLB1Or2 To ilUpper - 1 Step 1
            ilDBTotals = 3  'Get Daypart totals
            ilLnRowNo = Val(smDPSumShow(10, ilLoop))
            'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llTotalCost, llTotalSpots, ilAvgRating, llGrImp, llGRP, llCPP, llCPM
            mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlTotalCost, llTotalSpots, ilAvgRating, llGrImp, llGRP, llCPP, llCPM 'TTP 10439 - Rerate 21,000,000
            'GRP
            slStr = ""
            If llGRP > 0 Then
                slStr = gLongToStrDec(llGRP, 1)
            End If
            smDPSumShow(2, ilLoop) = slStr
            '% GRP
            If Not ilPartSum Then
                If llCGRP > 0 Then
                    slStr = gLongToStrDec(CCur(llGRP) * 100 / llCGRP, 0)
                Else
                    slStr = ""
                End If
            Else
                If (ilNoSel) Or (Trim$(smDPSumShow(12, ilLoop)) = "T") Then
                    If llCGRP > 0 Then
                        slStr = gLongToStrDec(CCur(llGRP) * 100 / llCGRP, 0)
                    Else
                        slStr = ""
                    End If
                Else
                    slStr = ""
                End If
            End If
            smDPSumShow(3, ilLoop) = slStr
            'GrImp
            slStr = ""
            If llGrImp > 0 Then
'                If tgSpf.sSAudData <> "H" Then
'                    slStr = Trim$(Str$(llGrImp))
'                Else
'                    slStr = gLongToStrDec(llGrImp, 1)
'                End If
                If tgSpf.sSAudData = "H" Then
                    slStr = gLongToStrDec(llGrImp, 1)
                ElseIf tgSpf.sSAudData = "N" Then
                    slStr = gLongToStrDec(llGrImp, 2)
                ElseIf tgSpf.sSAudData = "U" Then
                    slStr = gLongToStrDec(llGrImp, 3)
                Else
                    slStr = Trim$(str$(llGrImp))
                End If
            End If
            smDPSumShow(4, ilLoop) = slStr
            '% Gr Imp
            If Not ilPartSum Then
                If llCGrImp > 0 Then
                    slStr = gLongToStrDec(CCur(llGrImp) * 100 / llCGrImp, 0)
                Else
                    slStr = ""
                End If
            Else
                If (ilNoSel) Or (Trim$(smDPSumShow(12, ilLoop)) = "T") Then
                    If llCGrImp > 0 Then
                        slStr = gLongToStrDec(CCur(llGrImp) * 100 / llCGrImp, 0)
                    Else
                        slStr = ""
                    End If
                Else
                    slStr = ""
                End If
            End If
            smDPSumShow(5, ilLoop) = slStr
            'CPM
            'If tgSpf.sSAudData <> "H" Then
                slStr = gLongToStrDec(llCPM, 2)
            'Else
            '    slStr = gLongToStrDec(10 * llCPM, 2)
            'End If
            smDPSumShow(6, ilLoop) = slStr
            'CPP
            slStr = gLongToStrDec(llCPP, 0)
            smDPSumShow(7, ilLoop) = slStr
            'Avg Price
            If (llTotalSpots > 0) Then
                'slStr = gDivStr(gLongToStrDec(llTotalCost, 2), gLongToStrDec(llTotalSpots, 0))
                slStr = gDivStr(gDblToStrDec(dlTotalCost, 2), gLongToStrDec(llTotalSpots, 0)) 'TTP 10439 - Rerate 21,000,000
            Else
                slStr = ""
            End If
            If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            End If
            smDPSumShow(8, ilLoop) = slStr
            'Total Price
            'slStr = gLongToStrDec(llTotalCost, 2)
            slStr = gDblToStrDec(dlTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
            If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
            End If
            smDPSumShow(9, ilLoop) = slStr
        Next ilLoop
    ElseIf (ilSvDBTotals = 10) Then
        'Determine each unique vehicle
        ReDim smVSumShow(0 To 12, 0 To 1) As String
        ReDim smVDSumShow(0 To 11, 0 To 1) As String
        ilUpper = imLB1Or2  '1
        For ilClf = ilStartRow To ilEndRow Step 1
            If Not tgClfCntr(ilClf).iCancel Then
                ilLnRowNo = ilClf + 1
                slLineType = mGetLineType(ilLnRowNo, True)
                'If slLineType <> "H" Then   '(slLineType <> "O") And (slLineType <> "A") Then
                If ((slLineType <> "H") And (imSumType = 1)) Or (((slLineType = "S") Or (slLineType = "H")) And (imSumType = 0)) Then
                    ilFound = False
                    For ilLoop = imLB1Or2 To UBound(smVSumShow, 2) - 1 Step 1
                        If smVSumShow(1, ilLoop) = smLnSave(1, ilLnRowNo) Then  'smLnShow(ilVEHINDEX, ilLnRowNo) Then
                            ilFound = True
                            Exit For
                        End If
                    Next ilLoop
                    If Not ilFound Then
                        smVSumShow(1, ilUpper) = smLnSave(1, ilLnRowNo) 'smLnShow(ilVEHINDEX, ilLnRowNo)
                        smVSumShow(10, ilUpper) = Trim$(str$(ilLnRowNo))
                        ilUpper = ilUpper + 1
                        ReDim Preserve smVSumShow(0 To 12, 0 To ilUpper) As String
                    End If
                End If
            End If
        Next ilClf
        For ilLoop = imLB1Or2 To ilUpper - 1 Step 1
            ilDBTotals = 2  'Get Vehicle totals
            ilLnRowNo = Val(smVSumShow(10, ilLoop))
            'mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, llTotalCost, llTotalSpots, ilAvgRating, llGrImp, llGRP, llCPP, llCPM
            mGetResearchValues ilLnRowNo, hmDrf, hmMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), ilDBTotals, False, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode, ilInResearch, dlTotalCost, llTotalSpots, ilAvgRating, llGrImp, llGRP, llCPP, llCPM 'TTP 10439 - Rerate 21,000,000
            ilFound = False
            For ilIndex = LBound(smOVDSumValue, 2) To UBound(smOVDSumValue, 2) - 1 Step 1
                '3/12/08:  Added test for line type
                If ((Trim$(smOVDSumValue(11, ilIndex)) <> "H") And (imSumType = 1)) Or (((Trim$(smOVDSumValue(11, ilIndex)) = "S") Or (Trim$(smOVDSumValue(11, ilIndex)) = "H")) And (imSumType = 0)) Then
                    If StrComp(smVSumShow(1, ilLoop), smOVDSumValue(1, ilIndex), 1) = 0 Then
                        smVDSumShow(1, UBound(smVDSumShow, 2)) = smOVDSumValue(1, ilIndex)
                        slStr = gSubStr(gLongToStrDec(llGRP, 1), smOVDSumValue(2, ilIndex))
                        If gCompNumberStr(slStr, ".0") <> 0 Then
                            smVDSumShow(2, UBound(smVDSumShow, 2)) = slStr
                        Else
                            smVDSumShow(2, UBound(smVDSumShow, 2)) = ""
                        End If
                        smVDSumShow(3, UBound(smVDSumShow, 2)) = ""
                        If llCGRP > 0 Then
                            slStr = gSubStr(gLongToStrDec(CCur(llGRP) * 100 / llCGRP, 0), smOVDSumValue(3, ilIndex))
                            If gCompNumberStr(slStr, "0") <> 0 Then
                                smVDSumShow(3, UBound(smVDSumShow, 2)) = slStr
                            Else
                                smVDSumShow(3, UBound(smVDSumShow, 2)) = ""
                            End If
                        Else
                            slStr = ""
                        End If
    '                    If tgSpf.sSAudData <> "H" Then
    '                        slStr = gSubStr(gLongToStrDec(llGrImp, 0), smOVDSumValue(4, ilIndex))
    '                    Else
    '                        slStr = gSubStr(gLongToStrDec(llGrImp, 1), smOVDSumValue(4, ilIndex))
    '                    End If
                        If tgSpf.sSAudData = "H" Then
                            slStr = gSubStr(gLongToStrDec(llGrImp, 1), smOVDSumValue(4, ilIndex))
                        ElseIf tgSpf.sSAudData = "N" Then
                            slStr = gSubStr(gLongToStrDec(llGrImp, 2), smOVDSumValue(4, ilIndex))
                        ElseIf tgSpf.sSAudData = "U" Then
                            slStr = gSubStr(gLongToStrDec(llGrImp, 3), smOVDSumValue(4, ilIndex))
                        Else
                            slStr = gSubStr(gLongToStrDec(llGrImp, 0), smOVDSumValue(4, ilIndex))
                        End If
                        If gCompNumberStr(slStr, "0") <> 0 Then
                            smVDSumShow(4, UBound(smVDSumShow, 2)) = slStr
                        Else
                            smVDSumShow(4, UBound(smVDSumShow, 2)) = ""
                        End If
                        smVDSumShow(5, UBound(smVDSumShow, 2)) = ""
                        If llCGrImp > 0 Then
                            slStr = gSubStr(gLongToStrDec(CCur(llGrImp) * 100 / llCGrImp, 0), smOVDSumValue(5, ilIndex))
                            If gCompNumberStr(slStr, "0") <> 0 Then
                                smVDSumShow(5, UBound(smVDSumShow, 2)) = slStr
                            Else
                                smVDSumShow(5, UBound(smVDSumShow, 2)) = ""
                            End If
                        Else
                            slStr = ""
                        End If
                        slStr = gSubStr(gLongToStrDec(llCPM, 2), smOVDSumValue(6, ilIndex))
                        If gCompNumberStr(slStr, ".0") <> 0 Then
                            smVDSumShow(6, UBound(smVDSumShow, 2)) = slStr
                        Else
                            smVDSumShow(6, UBound(smVDSumShow, 2)) = ""
                        End If
                        slStr = gSubStr(gLongToStrDec(llCPP, 0), smOVDSumValue(7, ilIndex))
                        If gCompNumberStr(slStr, "0") <> 0 Then
                            smVDSumShow(7, UBound(smVDSumShow, 2)) = slStr
                        Else
                            smVDSumShow(7, UBound(smVDSumShow, 2)) = ""
                        End If
                        gUnformatStr smOVDSumValue(8, ilIndex), UNFMTDEFAULT, slVDStr
                        If (llTotalSpots > 0) Then
                            'slStr = gDivStr(gLongToStrDec(llTotalCost, 2), gLongToStrDec(llTotalSpots, 0))
                            slStr = gDivStr(gDblToStrDec(dlTotalCost, 2), gLongToStrDec(llTotalSpots, 0)) 'TTP 10439 - Rerate 21,000,000
                            slStr = gSubStr(slStr, slVDStr)
                            If gCompNumberStr(slStr, ".0") <> 0 Then
                                smVDSumShow(8, UBound(smVDSumShow, 2)) = slStr
                            Else
                                smVDSumShow(8, UBound(smVDSumShow, 2)) = ""
                            End If
                        Else
                            smVDSumShow(8, UBound(smVDSumShow, 2)) = ""
                        End If
                        gUnformatStr smOVDSumValue(9, ilIndex), UNFMTDEFAULT, slVDStr
                        'slStr = gSubStr(gLongToStrDec(llTotalCost, 2), slVDStr)
                        slStr = gSubStr(gDblToStrDec(dlTotalCost, 2), slVDStr) 'TTP 10439 - Rerate 21,000,000
                        If gCompNumberStr(slStr, ".0") <> 0 Then
                            smVDSumShow(9, UBound(smVDSumShow, 2)) = slStr
                        Else
                            smVDSumShow(9, UBound(smVDSumShow, 2)) = ""
                        End If
                        ReDim Preserve smVDSumShow(0 To 11, 0 To UBound(smVDSumShow, 2) + 1) As String
                        ilFound = True
                        Exit For
                    End If
                End If
            Next ilIndex

            If Not ilFound Then
                smVDSumShow(1, UBound(smVDSumShow, 2)) = smVSumShow(1, ilLoop)
                'GRP
                slStr = ""
                If llGRP > 0 Then
                    slStr = gLongToStrDec(llGRP, 1)
                End If
                smVDSumShow(2, UBound(smVDSumShow, 2)) = slStr
                '% GRP
                If llCGRP > 0 Then
                    slStr = gLongToStrDec(CCur(llGRP) * 100 / llCGRP, 0)
                Else
                    slStr = ""
                End If
                smVDSumShow(3, UBound(smVDSumShow, 2)) = slStr
                'GrImp
                slStr = ""
                If llGrImp > 0 Then
'                    If tgSpf.sSAudData <> "H" Then
'                        slStr = Trim$(Str$(llGrImp))
'                    Else
'                        slStr = gLongToStrDec(llGrImp, 1)
'                    End If
                    If tgSpf.sSAudData = "H" Then
                        slStr = gLongToStrDec(llGrImp, 1)
                    ElseIf tgSpf.sSAudData = "N" Then
                        slStr = gLongToStrDec(llGrImp, 2)
                    ElseIf tgSpf.sSAudData = "U" Then
                        slStr = gLongToStrDec(llGrImp, 3)
                    Else
                        slStr = Trim$(str$(llGrImp))
                    End If
                End If
                smVDSumShow(4, UBound(smVDSumShow, 2)) = slStr
                '% Gr Imp
                If llCGrImp > 0 Then
                    slStr = gLongToStrDec(CCur(llGrImp) * 100 / llCGrImp, 0)
                Else
                    slStr = ""
                End If
                smVDSumShow(5, UBound(smVDSumShow, 2)) = slStr
                'CPM
                'If tgSpf.sSAudData <> "H" Then
                    slStr = gLongToStrDec(llCPM, 2)
                'Else
                '    slStr = gLongToStrDec(10 * llCPM, 2)
                'End If
                smVDSumShow(6, UBound(smVDSumShow, 2)) = slStr
                'CPP
                slStr = gLongToStrDec(llCPP, 0)
                smVDSumShow(7, UBound(smVDSumShow, 2)) = slStr
                'Avg Price
                If (llTotalSpots > 0) Then
                    'slStr = gDivStr(gLongToStrDec(llTotalCost, 2), gLongToStrDec(llTotalSpots, 0))
                    slStr = gDivStr(gDblToStrDec(dlTotalCost, 2), gLongToStrDec(llTotalSpots, 0)) 'TTP 10439 - Rerate 21,000,000
                Else
                    slStr = ""
                End If
                If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                End If
                smVDSumShow(8, UBound(smVDSumShow, 2)) = slStr
                'Total Price
                'slStr = gLongToStrDec(llTotalCost, 2)
                slStr = gDblToStrDec(dlTotalCost, 2) 'TTP 10439 - Rerate 21,000,000
                If (Left$(slStr, 1) >= "0") And (Left$(slStr, 1) <= "9") Then
                    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                End If
                smVDSumShow(9, UBound(smVDSumShow, 2)) = slStr
                ReDim Preserve smVDSumShow(0 To 11, 0 To UBound(smVDSumShow, 2) + 1) As String
            End If
        Next ilLoop
        For ilLoop = LBound(smOVDSumValue, 2) To UBound(smOVDSumValue, 2) - 1 Step 1
            '3/12/08:  Added test for line type
            If ((Trim$(smOVDSumValue(11, ilLoop)) <> "H") And (imSumType = 1)) Or (((Trim$(smOVDSumValue(11, ilLoop)) = "S") Or (Trim$(smOVDSumValue(11, ilLoop)) = "H")) And (imSumType = 0)) Then
                ilFound = False
                For ilIndex = imLB1Or2 To ilUpper - 1 Step 1
                    If StrComp(smOVDSumValue(1, ilLoop), smVSumShow(1, ilIndex), 1) = 0 Then
                        ilFound = True
                        Exit For
                    End If
                Next ilIndex
                If Not ilFound Then
                    For ilIndex = LBound(smOVDSumValue, 1) To UBound(smOVDSumValue) Step 1
                        If ilIndex = 1 Then
                            smVDSumShow(ilIndex, UBound(smVDSumShow, 2)) = smOVDSumValue(ilIndex, ilLoop)
                        Else
                            smVDSumShow(ilIndex, UBound(smVDSumShow, 2)) = "-" & smOVDSumValue(ilIndex, ilLoop)
                        End If
                    Next ilIndex
                    ReDim Preserve smVDSumShow(0 To 11, 0 To UBound(smVDSumShow, 2) + 1) As String
                End If
            End If
        Next ilLoop
        slStr = gSubStr(gLongToStrDec(llCGRP, 1), smTOVDSumValue(1))
        If gCompNumberStr(slStr, ".0") <> 0 Then
            gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(4)
            smTSumShow(1) = tmSumCtrls(4).sShow
        Else
            smTSumShow(1) = ""
        End If
        smTSumShow(2) = ""
'        If tgSpf.sSAudData <> "H" Then
'            slStr = gSubStr(gLongToStrDec(llCGrImp, 0), smTOVDSumValue(3))
'        Else
'            slStr = gSubStr(gLongToStrDec(llCGrImp, 1), smTOVDSumValue(3))
'        End If
        If tgSpf.sSAudData = "H" Then
            slStr = gSubStr(gLongToStrDec(llCGrImp, 1), smTOVDSumValue(3))
        ElseIf tgSpf.sSAudData = "N" Then
            slStr = gSubStr(gLongToStrDec(llCGrImp, 2), smTOVDSumValue(3))
        ElseIf tgSpf.sSAudData = "U" Then
            slStr = gSubStr(gLongToStrDec(llCGrImp, 3), smTOVDSumValue(3))
        Else
            slStr = gSubStr(gLongToStrDec(llCGrImp, 0), smTOVDSumValue(3))
        End If
        If gCompNumberStr(slStr, "0") <> 0 Then
            gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(6)
            smTSumShow(3) = tmSumCtrls(6).sShow
        Else
            smTSumShow(3) = ""
        End If
        smTSumShow(4) = ""
        slStr = gSubStr(gLongToStrDec(llCCPM, 2), smTOVDSumValue(5))
        If gCompNumberStr(slStr, ".0") <> 0 Then
            gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(8)
            smTSumShow(5) = tmSumCtrls(8).sShow
        Else
            smTSumShow(5) = ""
        End If
        slStr = gSubStr(gLongToStrDec(llCCPP, 0), smTOVDSumValue(6))
        If gCompNumberStr(slStr, "0") <> 0 Then
            gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(9)
            smTSumShow(6) = tmSumCtrls(9).sShow
        Else
            smTSumShow(6) = ""
        End If
        gUnformatStr smTOVDSumValue(7), UNFMTDEFAULT, slVDStr
        If (llCTotalSpots > 0) Then
            'slStr = gDivStr(gLongToStrDec(llCTotalCost, 2), gLongToStrDec(llCTotalSpots, 0))
            slStr = gDivStr(gDblToStrDec(dlCTotalCost, 2), gLongToStrDec(llCTotalSpots, 0)) 'TTP 10439 - Rerate 21,000,000
            slStr = gSubStr(slStr, slVDStr)
            If gCompNumberStr(slStr, ".0") <> 0 Then
                gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(10)
                smTSumShow(7) = tmSumCtrls(10).sShow
            Else
                smTSumShow(7) = ""
            End If
        Else
            smTSumShow(7) = ""
        End If
        gUnformatStr smTOVDSumValue(8), UNFMTDEFAULT, slVDStr
        'slStr = gSubStr(gLongToStrDec(llCTotalCost, 2), slVDStr)
        slStr = gSubStr(gDblToStrDec(dlCTotalCost, 2), slVDStr) 'TTP 10439 - Rerate 21,000,000
        If gCompNumberStr(slStr, "0") <> 0 Then
            gSetShow Contract.pbcDemoBar(2), slStr, tmSumCtrls(11)
            smTSumShow(8) = tmSumCtrls(11).sShow
        Else
            smTSumShow(8) = ""
        End If
    End If
    ilLnRowNo = ilSvLnRowNo
    'If ilLnRowNo >= 0 Then
    If ilLnRowNo > 0 Then
        mInitBookDemoForLn ilLnRowNo, ilCPPCPM, imVefCode, ilVpfIndex, ilTerminate, ilChgMode
    End If
    ilDBTotals = ilSvDBTotals
    imInTSummary = False
End Sub

Function mUpdateAdvtAgy(hlAdf As Integer, tlAdf As ADF, hlAgf As Integer, tlagf As AGF, slChgdDollars As String, ilTerminate As Integer)
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim slMsg As String
    Dim ilUpdateAdvt As Integer
    Dim ilUpdateAgy As Integer
    Dim slStamp As String
    Dim slCntrDate As String
    Dim slAdvtDate As String
    Dim slNameCode As String
    Dim slCode As String
    Dim ilAdfRecLen As Integer
    Dim ilAgfRecLen As Integer
    Dim slUnbilled As String
    '2/3/16: Handle agency commission
    Dim slAgyRate As String
    Dim slChgNet As String
    
    ilAdfRecLen = Len(tlAdf)
    ilAgfRecLen = Len(tlagf)
    ilUpdateAdvt = False
    ilUpdateAgy = False
    tmAdfSrchKey.iCode = tgChfCntr.iAdfCode
    ilRet = btrGetEqual(hlAdf, tlAdf, ilAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
    On Error GoTo mUpdateAdvtAgyErr
    gBtrvErrorMsg ilRet, "mUpdateAdvtAgy (btrGetEqual: Advertiser)", Contract
    On Error GoTo 0
    If tgChfCntr.iAgfCode > 0 Then
        tmAgfSrchKey.iCode = tgChfCntr.iAgfCode
        ilRet = btrGetEqual(hlAgf, tlagf, ilAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
        On Error GoTo mUpdateAdvtAgyErr
        gBtrvErrorMsg ilRet, "mUpdateAdvtAgy (btrGetEqual: Agency)", Contract
        On Error GoTo 0
    Else
        tlagf.iSlfCode = 0
    End If
    gUnpackDate tgChfCntr.iEndDate(0), tgChfCntr.iEndDate(1), slCntrDate
    gUnpackDate tlAdf.iEndDate(0), tlAdf.iEndDate(1), slAdvtDate
    If slAdvtDate <> "" Then
        If gDateValue(slCntrDate) > gDateValue(slAdvtDate) Then
            tlAdf.iEndDate(0) = tgChfCntr.iEndDate(0)
            tlAdf.iEndDate(1) = tgChfCntr.iEndDate(1)
            ilUpdateAdvt = True
        End If
    Else
        tlAdf.iEndDate(0) = tgChfCntr.iEndDate(0)
        tlAdf.iEndDate(1) = tgChfCntr.iEndDate(1)
        ilUpdateAdvt = True
    End If
    If tlAdf.sNewBus <> "Y" Then
        If Trim$(tgChfCntr.sNewBus) = "" Then
            tgChfCntr.sNewBus = "N"
        End If
    Else
        tgChfCntr.sNewBus = "Y"
        tlAdf.sNewBus = "N"
        ilUpdateAdvt = True
    End If
    'Check product
    If Trim$(tgChfCntr.sProduct) <> "" Then
        If StrComp(Trim$(tgChfCntr.sProduct), Trim$(tlAdf.sProduct), 1) <> 0 Then
            tlAdf.sProduct = tgChfCntr.sProduct
            tlAdf.iMnfComp(0) = tgChfCntr.iMnfComp(0)
            tlAdf.iMnfComp(1) = tgChfCntr.iMnfComp(1)
            tlAdf.iMnfExcl(0) = tgChfCntr.iMnfExcl(0)
            tlAdf.iMnfExcl(1) = tgChfCntr.iMnfExcl(1)
            tlAdf.iMnfBus = tgChfCntr.iMnfBus
            tlAdf.lGuar = tgChfCntr.lGuar
            ilUpdateAdvt = True
        Else
            If (tgChfCntr.iMnfComp(0) <> 0) And (tgChfCntr.iMnfComp(0) <> tlAdf.iMnfComp(0)) Then
                tlAdf.iMnfComp(0) = tgChfCntr.iMnfComp(0)
                ilUpdateAdvt = True
            End If
            If (tgChfCntr.iMnfComp(1) <> 0) And (tgChfCntr.iMnfComp(1) <> tlAdf.iMnfComp(1)) Then
                tlAdf.iMnfComp(1) = tgChfCntr.iMnfComp(1)
                ilUpdateAdvt = True
            End If
            If (tgChfCntr.iMnfExcl(0) <> 0) And (tgChfCntr.iMnfExcl(0) <> tlAdf.iMnfExcl(0)) Then
                tlAdf.iMnfExcl(0) = tgChfCntr.iMnfExcl(0)
                ilUpdateAdvt = True
            End If
            If (tgChfCntr.iMnfExcl(1) <> 0) And (tgChfCntr.iMnfExcl(1) <> tlAdf.iMnfExcl(1)) Then
                tlAdf.iMnfExcl(1) = tgChfCntr.iMnfExcl(1)
                ilUpdateAdvt = True
            End If
            If (tgChfCntr.iMnfBus <> 0) And (tgChfCntr.iMnfBus <> tlAdf.iMnfBus) Then
                tlAdf.iMnfBus = tgChfCntr.iMnfBus
                ilUpdateAdvt = True
            End If
            If (tgChfCntr.lGuar <> 0) And (tgChfCntr.lGuar <> tlAdf.lGuar) Then
                tlAdf.lGuar = tgChfCntr.lGuar
                ilUpdateAdvt = True
            End If
        End If
    End If
    '5/17/00- update both (the salesperson in the agency file was not really needed)
    'If (tlAdf.iSlfCode <> 0)  Then
        If tgChfCntr.iSlfCode(0) <> tlAdf.iSlfCode Then
            'If (tgChfCntr.iSlfCode(0) > 0) And (tlAdf.iSlfCode > 0) Then
                tlAdf.iSlfCode = tgChfCntr.iSlfCode(0)
                ilUpdateAdvt = True
            'ElseIf (tgChfCntr.iSlfCode(0) < 0) And (tlAdf.iSlfCode < 0) Then
            '    tlAdf.iSlfCode = tgChfCntr.iSlfCode(0)
            '    ilUpdateAdvt = True
            'End If
        End If
    'Else
        If tgChfCntr.iSlfCode(0) <> tlagf.iSlfCode Then
            'If (tgChfCntr.iSlfCode(0) > 0) And (tlAgf.iSlfCode > 0) Then
                tlagf.iSlfCode = tgChfCntr.iSlfCode(0)
                ilUpdateAgy = True
            'ElseIf (tgChfCntr.iSlfCode(0) < 0) And (tlAgf.iSlfCode < 0) Then
            '    tlAgf.iSlfCode = tgChfCntr.iSlfCode(0)
            '    ilUpdateAgy = True
            'ElseIf tlAgf.iSlfCode = 0 Then
            '    tlAgf.iSlfCode = tgChfCntr.iSlfCode(0)
            '    ilUpdateAgy = True
            'End If
        End If
    'End If
    'If Trim$(tlAdf.sBuyer) <> "" Then
    '    If StrComp(Trim$(tgChfCntr.sBuyer), Trim$(tlAdf.sBuyer), 1) <> 0 Then
    '        tlAdf.sBuyer = tgChfCntr.sBuyer
    '        ilUpdateAdvt = True
    '    End If
    '    If StrComp(Trim$(tgChfCntr.sPhone), Trim$(tlAdf.sPhone), 1) <> 0 Then
    '        tlAdf.sPhone = tgChfCntr.sPhone
    '        ilUpdateAdvt = True
    '    End If
    'Else
    '    If StrComp(Trim$(tgChfCntr.sBuyer), Trim$(tlAgf.sBuyer), 1) <> 0 Then
    '        tlAgf.sBuyer = tgChfCntr.sBuyer
    '        ilUpdateAgy = True
    '    End If
    '    If StrComp(Trim$(tgChfCntr.sPhone), Trim$(tlAgf.sPhone), 1) <> 0 Then
    '        tlAgf.sPhone = tgChfCntr.sPhone
    '        ilUpdateAgy = True
    '    End If
    'End If
    If tgChfCntr.sCppCpm <> tlAdf.sCppCpm Then
        tlAdf.sCppCpm = tgChfCntr.sCppCpm
        ilUpdateAdvt = True
    End If
    For ilLoop = LBound(tlAdf.iMnfDemo) To UBound(tlAdf.iMnfDemo) Step 1
        If StrComp(tgChfCntr.iMnfDemo(ilLoop), tlAdf.iMnfDemo(ilLoop), 1) <> 0 Then
            tlAdf.iMnfDemo(ilLoop) = tgChfCntr.iMnfDemo(ilLoop)
            ilUpdateAdvt = True
        End If
    Next ilLoop
    For ilLoop = LBound(tlAdf.lTarget) To UBound(tlAdf.lTarget) Step 1
        'If StrComp(tgChfCntr.sTarget(ilLoop), tlAdf.sTarget(ilLoop), 1) <> 0 Then
        If tgChfCntr.lTarget(ilLoop) <> tlAdf.lTarget(ilLoop) Then
            tlAdf.lTarget(ilLoop) = tgChfCntr.lTarget(ilLoop)
            ilUpdateAdvt = True
        End If
    Next ilLoop
    If tgChfCntr.iAgfCode <> 0 Then
        If tlAdf.sBillAgyDir <> "A" Then
            tlAdf.sBillAgyDir = "A"
            ilUpdateAdvt = True
        End If
    End If
    If tgChfCntr.iAgfCode <> tlAdf.iAgfCode Then
        tlAdf.iAgfCode = tgChfCntr.iAgfCode
        ilUpdateAdvt = True
    End If
    If Contract.lbcBuyer.ListIndex > 1 Then
        slNameCode = tmCntBuyerCode(Contract.lbcBuyer.ListIndex - 2).sKey  'Traffic!lbcBuyerCode.List(lbcBuyer.ListIndex - 2)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        slCode = Trim$(slCode)
        If tlAdf.sBillAgyDir = "D" Then
            If tlAdf.iPnfBuyer <> Val(slCode) Then
                tlAdf.iPnfBuyer = Val(slCode)
                ilUpdateAdvt = True
            End If
        Else
            If tlagf.iPnfBuyer <> Val(slCode) Then
                tlagf.iPnfBuyer = Val(slCode)
                ilUpdateAgy = True
            End If
        End If
    End If
    If slChgdDollars <> "" Then
        '2/3/16: Only change the unbilled if using Credit Limit.  To code for cash in advance would require that the origianl contract be read and dollars for x weeks determined.
        '        then the current contract would have to be processed to dtermine dollar value for x weeks
        '        The Credit limit is not perfect and it should be checking the number of week specified in site to determine how far in the future to determine the price
        If tlAdf.sCreditRestr = "L" Then
            gPDNToStr tlAdf.sUnbilled, 2, slUnbilled
            '2/3/16: Handle agency commission
            'slUnbilled = gAddStr(slUnbilled, slChgdDollars)
            If tgChfCntr.iAgfCode <> 0 Then
                slAgyRate = gIntToStrDec(tlagf.iComm, 2)
                slChgNet = gDivStr(gMulStr(slChgdDollars, gSubStr("100.00", slAgyRate)), "100.00")
                slUnbilled = gAddStr(slUnbilled, slChgNet)
            Else
                slUnbilled = gAddStr(slUnbilled, slChgdDollars)
            End If
            If Val(slUnbilled) < 0 Then
                slUnbilled = "0.00"
            End If
            gStrToPDN slUnbilled, 2, 6, tlAdf.sUnbilled
            ilUpdateAdvt = True
        End If
        If tgChfCntr.iAgfCode <> 0 Then
            '2/3/16: Only change the unbilled if using Credit Limit.  To code for cash in advance would require that the origianl contract be read and dollars for x weeks determined.
            '        then the current contract would have to be processed to dtermine dollar value for x weeks
            '        The Credit limit is not perfect and it should be checking the number of week specified in site to determine how far in the future to determine the price
            If tlagf.sCreditRestr = "L" Then
                gPDNToStr tlagf.sUnbilled, 2, slUnbilled
                '2/3/16: Handle agency commission
                slAgyRate = gIntToStrDec(tlagf.iComm, 2)
                slChgNet = gDivStr(gMulStr(slChgdDollars, gSubStr("100.00", slAgyRate)), "100.00")
                slUnbilled = gAddStr(slUnbilled, slChgNet)
                If Val(slUnbilled) < 0 Then
                    slUnbilled = "0.00"
                End If
                gStrToPDN slUnbilled, 2, 6, tlagf.sUnbilled
                ilUpdateAgy = True
            End If
        End If
    End If
    If ilUpdateAdvt Then
        'slStamp = gFileDateTime(sgDBPath & "Adf.Btr")
        Do  'Loop until record updated or added
            ilRet = btrUpdate(hlAdf, tlAdf, ilAdfRecLen)
            slMsg = "mUpdateAdvtAgy (btrUpdate: Advertiser)"
        Loop While ilRet = BTRV_ERR_CONFLICT
        On Error GoTo mUpdateAdvtAgyErr
        gBtrvErrorMsg ilRet, slMsg, Contract
        On Error GoTo 0
        'If StrComp(slStamp, smCntAdvertiserTag, 1) = 0 Then
        '    smCntAdvertiserTag = gFileDateTime(sgDBPath & "Adf.Btr")
        'End If
        slStamp = gFileDateTime(sgDBPath & "Adf.Btr")
        smCntAdvertiserTag = slStamp
    End If
    If (tgChfCntr.iAgfCode > 0) And ilUpdateAgy Then
        'slStamp = gFileDateTime(sgDBPath & "Agf.Btr")
        Do  'Loop until record updated or added
            ilRet = btrUpdate(hlAgf, tlagf, ilAgfRecLen)
            slMsg = "mUpdateAdvtAgy (btrUpdate: Agency)"
        Loop While ilRet = BTRV_ERR_CONFLICT
        On Error GoTo mUpdateAdvtAgyErr
        gBtrvErrorMsg ilRet, slMsg, Contract
        On Error GoTo 0
        'If StrComp(slStamp, smCntAgencyTag, 1) = 0 Then
        '    smCntAgencyTag = gFileDateTime(sgDBPath & "Agf.Btr")
        'End If
        slStamp = gFileDateTime(sgDBPath & "Agf.Btr")
        smCntAgencyTag = slStamp
    End If
    mUpdateAdvtAgy = True
    Exit Function
mUpdateAdvtAgyErr:
    On Error GoTo 0
    ilTerminate = True
    mUpdateAdvtAgy = False
    Exit Function
End Function

Function mUpdateCntrNoInRvf(llOrigCntrNo As Long, llNewCntrNo As Long, hlRvf As Integer, hlPhf As Integer) As Integer
    Dim llNoRec As Long         'Number of records in Mnf
    Dim ilExtLen As Integer
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilUpperBound As Integer
    Dim ilOffSet As Integer
    Dim tlLTypeBuff As POPLCODE   'Type field record
    Dim hlFile As Integer
    Dim ilPass As Integer
    Dim llRecPos As Long

    For ilPass = 0 To 1 Step 1
        If ilPass = 0 Then
            hlFile = hlRvf
        Else
            hlFile = hlPhf
        End If
        ReDim lmPjfRecPos(0 To 0) As Long
        imRvfRecLen = Len(tmRvf) 'btrRecordLength(hlVef)  'Get and save record length
        ilUpperBound = UBound(lmPjfRecPos)
        ilExtLen = Len(tmRvf)  'Extract operation record size
        llNoRec = gExtNoRec(ilExtLen) 'btrRecords(hlVef) 'Obtain number of records
        btrExtClear hlFile   'Clear any previous extend operation
        ilRet = btrGetFirst(hlFile, tmRvf, imRvfRecLen, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet <> BTRV_ERR_END_OF_FILE Then
            If ilRet <> BTRV_ERR_NONE Then
                mUpdateCntrNoInRvf = ilRet
                Exit Function
            End If
            Call btrExtSetBounds(hlFile, llNoRec, -1, "UC", "RVF", "") 'Set extract limits (all records)
            tlLTypeBuff.lCode = llOrigCntrNo
            ilOffSet = gFieldOffset("Rvf", "RVFCNTRNO")
            ilRet = btrExtAddLogicConst(hlFile, BTRV_KT_INT, ilOffSet, 4, BTRV_EXT_EQUAL, BTRV_EXT_LAST_TERM, tlLTypeBuff, 4)
            ilOffSet = 0
            ilRet = btrExtAddField(hlFile, ilOffSet, ilExtLen)  'Extract First Name field
            If ilRet <> BTRV_ERR_NONE Then
                mUpdateCntrNoInRvf = ilRet
                Exit Function
            End If
            ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
            If (ilRet <> BTRV_ERR_END_OF_FILE) And (ilRet <> BTRV_ERR_FILTER_LIMIT) Then
                If (ilRet <> BTRV_ERR_NONE) And (ilRet <> BTRV_ERR_REJECT_COUNT) Then
                    mUpdateCntrNoInRvf = ilRet
                    Exit Function
                End If
                ilUpperBound = UBound(lmPjfRecPos)
                ilExtLen = Len(tmRvf)  'Extract operation record size
                'ilRet = btrExtGetFirst(hlVef, tgCompMnf(ilUpperBound), ilExtLen, llRecPos)
                Do While ilRet = BTRV_ERR_REJECT_COUNT
                    ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                Loop
                Do While ilRet = BTRV_ERR_NONE
                    If tmRvf.lCntrNo = llOrigCntrNo Then
                        lmPjfRecPos(ilUpperBound) = tmRvf.lCode
                        ilUpperBound = ilUpperBound + 1
                        ReDim Preserve lmPjfRecPos(0 To ilUpperBound) As Long
                    End If
                    ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                    Do While ilRet = BTRV_ERR_REJECT_COUNT
                        ilRet = btrExtGetNext(hlFile, tmRvf, ilExtLen, llRecPos)
                    Loop
                Loop
            End If
            For ilLoop = LBound(lmPjfRecPos) To UBound(lmPjfRecPos) - 1 Step 1
                Do  'Loop until record updated or added
                    tmRvfSrchKey2.lCode = lmPjfRecPos(ilLoop)
                    ilRet = btrGetEqual(hlFile, tmRvf, imRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)   'Get current record
                    If ilRet <> BTRV_ERR_NONE Then
                        mUpdateCntrNoInRvf = ilRet
                        Exit Function
                    End If
                    tmRvf.lCntrNo = llNewCntrNo
                    ilRet = btrUpdate(hlFile, tmRvf, imRvfRecLen)
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    mUpdateCntrNoInRvf = ilRet
                    Exit Function
                End If
            Next ilLoop
        End If
    Next ilPass
    mUpdateCntrNoInRvf = BTRV_ERR_NONE
    Exit Function

End Function


Function mWarningMsg(ilStep1Index As Integer, slComment() As String) As Integer
    Dim ilTestReq As Integer
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilLen As Integer
    Dim ilClf As Integer
    Dim ilTest As Integer
    Dim ilCff As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long

    'If new line, check if any spots defined prior to last log date
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If (Not tgClfCntr(ilClf).iCancel) And ((tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1)) Then
            ilCff = tgClfCntr(ilClf).iFirstCff
            If ilCff <> -1 Then
                'If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                If (tgCffCntr(ilCff).iStatus = 0) Then
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    If llFlStartDate <= llFlEndDate Then
                        If llFlStartDate <= tgClfCntr(ilClf).lLLD Then
                            ilRet = MsgBox("At least one vehicle has spots defined prior to last generated log" & ", Do you want to review before continuing with Save", vbYesNo + vbQuestion, "Warning")
                            If ilRet = vbYes Then
                                mWarningMsg = False
                                Exit Function
                            End If
                            Exit For
                        End If
                    End If
                End If
            End If
        End If
    Next ilClf
    If (sgCntrScreen <> "Orders") Then
        'Test that books for same vehicle being used
        ilTestReq = True
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            If (Not tgClfCntr(ilClf).iCancel) And (tgClfCntr(ilClf).ClfRec.iDnfCode > 0) Then
                ilCff = tgClfCntr(ilClf).iFirstCff
                If ilCff <> -1 Then
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                        If llFlStartDate <= llFlEndDate Then
                            For ilTest = ilClf + 1 To UBound(tgClfCntr) - 1 Step 1
                                If Not tgClfCntr(ilTest).iCancel Then
                                    ilCff = tgClfCntr(ilTest).iFirstCff
                                    If ilCff <> -1 Then
                                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                            llFlStartDate = tgCffCntr(ilCff).lStartDate
                                            llFlEndDate = tgCffCntr(ilCff).lEndDate
                                            If llFlStartDate <= llFlEndDate Then
                                                If tgClfCntr(ilClf).ClfRec.iVefCode = tgClfCntr(ilTest).ClfRec.iVefCode Then
                                                    If tgClfCntr(ilClf).ClfRec.iDnfCode <> tgClfCntr(ilTest).ClfRec.iDnfCode Then
                                                        ilRet = MsgBox("At least one Vehicle has inconsistent Book Names" & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
                                                        If ilRet = vbNo Then
                                                            mWarningMsg = False
                                                            Exit Function
                                                        End If
                                                        ilTestReq = False
                                                        Exit For
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            Next ilTest
                            If Not ilTestReq Then
                                Exit For
                            End If
                        End If
                    End If
                End If
            End If
        Next ilClf
    End If
    If Trim$(tgChfCntr.sRepDBID) <> "" Then
        If tgChfCntr.iMnfComp(0) <= 0 Then
            If Contract.lbcStatus.ListIndex >= 0 Then
                slStr = Contract.lbcStatus.List(Contract.lbcStatus.ListIndex)
                If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                    ilRet = MsgBox("Product Protection missing" & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
                    If ilRet = vbNo Then
                        mWarningMsg = False
                        Exit Function
                    End If
                End If
            End If
        End If
    End If

    If tgSpf.sCWarnMsg <> "Y" Then
        mWarningMsg = True
        Exit Function
    End If
    ilTestReq = False
    If (sgCntrScreen <> "Orders") Then
        If (tgChfCntr.sType <> "T") And (tgChfCntr.sType <> "Q") And (tgChfCntr.sType <> "S") And (tgChfCntr.sType <> "M") Then
            If Contract.lbcStatus.ListIndex >= 0 Then
                slStr = Contract.lbcStatus.List(Contract.lbcStatus.ListIndex)
                If (InStr(1, slStr, "Order", 1) > 0) Or (InStr(1, slStr, "Hold", 1) > 0) Then
                    ilTestReq = True
                End If
            End If
        End If
    End If
    If Not ilTestReq Then
        mWarningMsg = True
        Exit Function
    End If
    If (sgCntrScreen <> "Orders") And (ilStep1Index = 4) Then
        'Change Reason is required
        ilLen = Len(smComment(4))
        If ilLen <= 0 Then
            ilRet = MsgBox("Change Reason Missing" & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
            If ilRet = vbNo Then
                mWarningMsg = False
                Exit Function
            End If
        End If
    End If
    'Cancel Clause is required
    ilLen = Len(smComment(3))
    If ilLen <= 0 Then
        ilRet = MsgBox("Cancel Clause Missing" & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
        If ilRet = vbNo Then
            mWarningMsg = False
            Exit Function
        End If
    End If
    'Business Category is required
    If tgChfCntr.iMnfBus <= 0 Then
        ilRet = MsgBox("Business Category Missing (Click in Product Protection Area)" & ", Continue with Save", vbYesNo + vbQuestion, "Warning")
        If ilRet = vbNo Then
            mWarningMsg = False
            Exit Function
        End If
    End If
    mWarningMsg = True
    Exit Function
End Function
Public Function mCheckMPAgainstCntr(llMPEndDate As Long) As Integer
    Dim ilClf As Integer
    Dim llSDate As Long
    Dim llEDate As Long
    Dim llLnSDate As Long
    Dim llLnEDate As Long
    Dim ilLoop As Integer
    Dim llDate As Long

    llMPEndDate = 0
    If (UBound(tgMBSbf) <= LBound(tgMBSbf)) And (UBound(tgPBSbf) <= LBound(tgPBSbf)) Then
        mCheckMPAgainstCntr = 0
        Exit Function
    End If
    llSDate = -1
    llEDate = -1
    'Obtain schedule line date range
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If (tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1) Then
            gUnpackDateLong tgClfCntr(ilClf).ClfRec.iStartDate(0), tgClfCntr(ilClf).ClfRec.iStartDate(1), llLnSDate
            gUnpackDateLong tgClfCntr(ilClf).ClfRec.iEndDate(0), tgClfCntr(ilClf).ClfRec.iEndDate(1), llLnEDate
            If llLnSDate <= llLnEDate Then
                If (llSDate = -1) Or (llLnSDate < llSDate) Then
                    llSDate = llLnSDate
                End If
                If (llEDate = -1) Or (llLnEDate > llEDate) Then
                    llEDate = llLnEDate
                End If
            End If
        End If
    Next ilClf
    '8/15/12: Handle the three billing cycles
    'llEDate = gDateValue(gObtainEndStd(Format$(llEDate, "m/d/yy")))
    If tgChfCntr.sBillCycle = "C" Then
        llEDate = gDateValue(gObtainEndCal(Format$(llEDate, "m/d/yy")))
    ElseIf tgChfCntr.sBillCycle = "W" Then
        llEDate = gDateValue(gObtainNextSunday(Format$(llEDate, "m/d/yy")))
    Else
        llEDate = gDateValue(gObtainEndStd(Format$(llEDate, "m/d/yy")))
    End If
    For ilLoop = LBound(tgMBSbf) To UBound(tgMBSbf) - 1 Step 1
        '12/2/08:  Status = 2 needs that items has been removed but required to negate rvf
        'If (tgMBSbf(ilLoop).iStatus >= 0)  Then
        If (tgMBSbf(ilLoop).iStatus = 0) Or (tgMBSbf(ilLoop).iStatus = 1) Then
            '5/5/10:  Bypass date test if dollar amount is zero
            If tgMBSbf(ilLoop).SbfRec.lGross <> 0 Then
                gUnpackDateLong tgMBSbf(ilLoop).SbfRec.iDate(0), tgMBSbf(ilLoop).SbfRec.iDate(1), llDate
                If (llDate < llSDate) Or (llDate > llEDate) Then
                    llMPEndDate = 0
                    mCheckMPAgainstCntr = 1
                    Exit Function
                End If
                If llDate > llMPEndDate Then
                    llMPEndDate = llDate
                End If
            End If
        End If
    Next ilLoop
    For ilLoop = LBound(tgPBSbf) To UBound(tgPBSbf) - 1 Step 1
        '12/2/08:  Status = 2 needs that items has been removed but required to negate rvf
        'If tgPBSbf(ilLoop).iStatus >= 0 Then
        If (tgPBSbf(ilLoop).iStatus = 0) Or (tgPBSbf(ilLoop).iStatus = 1) Then
            '5/5/10:  Bypass date test if dollar amount is zero
            If tgPBSbf(ilLoop).SbfRec.lGross <> 0 Then
                gUnpackDateLong tgPBSbf(ilLoop).SbfRec.iDate(0), tgPBSbf(ilLoop).SbfRec.iDate(1), llDate
                If (llDate < llSDate) Or (llDate > llEDate) Then
                    llMPEndDate = 0
                    mCheckMPAgainstCntr = 2
                    Exit Function
                End If
                If llDate > llMPEndDate Then
                    llMPEndDate = llDate
                End If
            End If
        End If
    Next ilLoop
    mCheckMPAgainstCntr = 0
    Exit Function
End Function


Public Sub mCFFConvertDW(ilLnRowNo As Integer, slWDFlag As String, slDGSave() As String, ilOVDays() As Integer)
    Dim ilDay As Integer
    Dim ilCff As Integer
    Dim ilNoSpots As Integer

    ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            If slWDFlag = "D" Then
                For ilDay = 0 To 6 Step 1
                    tgCffCntr(ilCff).CffRec.iDay(ilDay) = Val(slDGSave(3 + ilDay))
                Next ilDay
                tgCffCntr(ilCff).CffRec.sDyWk = "D"
                tgCffCntr(ilCff).CffRec.iSpotsWk = 0
            Else
                ilNoSpots = 0
                For ilDay = 0 To 6 Step 1
                    ilNoSpots = ilNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                Next ilDay
                For ilDay = 0 To 6 Step 1
                    If ilOVDays(ilDay) = 0 Then
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 1
                    Else
                        tgCffCntr(ilCff).CffRec.iDay(ilDay) = 0
                    End If
                Next ilDay
                tgCffCntr(ilCff).CffRec.sDyWk = "W"
                tgCffCntr(ilCff).CffRec.iSpotsWk = ilNoSpots
            End If
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
End Sub

Public Function mRBSummary() As Boolean

    Dim ilLoop As Integer
    Dim ilVef As Integer
    Dim ilRdf As Integer
    Dim ilFound As Integer
    Dim ilRow As Integer
    Dim ilBox As Integer
    Dim llRatePop As Long
    Dim llNoWks As Long
    Dim llGrImp As Long
    'Dim llTotalCost As Long
    Dim dlTotalCost As Double 'TTP 10439 - Rerate 21,000,000
    Dim llGRP As Long
    Dim llCPP As Long
    Dim llCPM As Long
    Dim ilRating As Integer
    Dim llAvgAud As Long
    'Dim llTempGRP As Long
    Dim llNoSpots As Long
    Dim llTNoSpots As Long
    Dim llTime As Long
    Dim llRdfStartTime As Long
    Dim llRdfEndTime As Long
    Dim ilPass As Integer
    Dim ilTest As Integer
    Dim ilOneRdfCode As Integer    'used to see if only one daypart summary
    Dim ilOneVefCode As Integer

    On Error GoTo TotalErr:
    mRBSummary = True
    Contract.pbcRBVeh(1).Cls
    If imRBView = 1 Then  'Vehicle
        'Create an array of unique vehicles
        ReDim tmRB1DP(0 To 0) As PBDPGEN
        ReDim ilVefCode(0 To 0) As Integer
        For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
            ilFound = False
            For ilVef = 0 To UBound(ilVefCode) - 1 Step 1
                If (tmPB1DP(ilLoop).iVefCode = ilVefCode(ilVef)) Then
                    ilFound = True
                    Exit For
                End If
            Next ilVef
            If Not ilFound Then
                ilVefCode(UBound(ilVefCode)) = tmPB1DP(ilLoop).iVefCode
                ReDim Preserve ilVefCode(0 To UBound(ilVefCode) + 1) As Integer
            End If
        Next ilLoop
        'Create a summary for each unique vehicle
        For ilVef = 0 To UBound(ilVefCode) - 1 Step 1
            For ilPass = 0 To 1 Step 1
                ilRow = UBound(tmRB1DP)
                llRatePop = -1
                'llTotalCost = 0
                dlTotalCost = 0 'TTP 10439 - Rerate 21,000,000
                llGrImp = 0
                llGRP = 0
                llNoSpots = 0
                llTNoSpots = 0
                llRdfStartTime = 9999999
                llRdfEndTime = -1
                ilOneRdfCode = -1
                If Contract.edcRBWks(2).Text = "" Then
                    llNoWks = 0
                Else
                    llNoWks = Val(Contract.edcRBWks(2).Text)
                End If
                ilBox = -1  '0
                For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
                    If ilPass = 0 Then
                        If (tmPB1DP(ilLoop).iVefCode = ilVefCode(ilVef)) And (tmPB1DP(ilLoop).iChk) Then
                            ilBox = ilBox + 1
                        End If
                    Else
                        If tmPB1DP(ilLoop).iVefCode = ilVefCode(ilVef) Then
                            ilBox = ilBox + 1
                        End If
                    End If
                Next ilLoop
                If ilBox >= 0 Then  '1 Then
                    ReDim lgLnCost(0 To ilBox) As Long
                    ReDim igLnAvgRating(0 To ilBox) As Integer
                    ReDim lgLnGrImp(0 To ilBox) As Long
                    ReDim lgLnGRP(0 To ilBox) As Long
                    ilBox = -1  '0
                    For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
                        If (tmPB1DP(ilLoop).iVefCode = ilVefCode(ilVef)) And (((tmPB1DP(ilLoop).iChk) And (ilPass = 0)) Or (ilPass = 1)) Then
                            tmRB1DP(ilRow) = tmPB1DP(ilLoop)
                            If ilOneRdfCode = -1 Then
                                ilOneRdfCode = ilLoop
                            ElseIf ilOneRdfCode >= 0 Then
                                If tmPB1DP(ilOneRdfCode).iRdfCode <> tmPB1DP(ilLoop).iRdfCode Then
                                    ilOneRdfCode = -2
                                End If
                            End If
                            ilBox = ilBox + 1
                            lgLnCost(ilBox) = tmRB1DP(ilRow).lTNoSpots * tmRB1DP(ilRow).lAvgPrice   'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lAvgPrice
                            igLnAvgRating(ilBox) = tmRB1DP(ilRow).iAvgRating
                            lgLnGrImp(ilBox) = tmRB1DP(ilRow).lGrImp    'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGrImp
                            lgLnGRP(ilBox) = tmRB1DP(ilRow).lGRP    'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGRP
                            llNoSpots = llNoSpots + tmRB1DP(ilRow).lNoSpots
                            llTNoSpots = llTNoSpots + tmRB1DP(ilRow).lTNoSpots
                            'llTotalCost = llTotalCost + lgLnCost(ilBox)
                            dlTotalCost = dlTotalCost + lgLnCost(ilBox) 'TTP 10439 - Rerate 21,000,000
                            If llRatePop = -1 Then
                                llRatePop = tmRB1DP(ilRow).lPop
                            Else
                                If llRatePop <> tmRB1DP(ilRow).lPop Then
                                    llRatePop = 0
                                End If
                            End If
                            ilRdf = gBinarySearchRdf(tmPB1DP(ilLoop).iRdfCode)
                            If ilRdf <> -1 Then
                                For ilTest = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1 'Row
                                    If (tgMRdf(ilRdf).iStartTime(0, ilTest) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilTest) <> 0) Then
                                        gUnpackTimeLong tgMRdf(ilRdf).iStartTime(0, ilTest), tgMRdf(ilRdf).iStartTime(1, ilTest), False, llTime
                                        If llTime < llRdfStartTime Then
                                            llRdfStartTime = llTime
                                        End If
                                        gUnpackTimeLong tgMRdf(ilRdf).iEndTime(0, ilTest), tgMRdf(ilRdf).iEndTime(1, ilTest), True, llTime
                                        If llTime > llRdfEndTime Then
                                            llRdfEndTime = llTime
                                        End If
                                    End If
                                Next ilTest
                            End If
                        End If
                    Next ilLoop
                    'gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTNoSpots, llTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
                    gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTNoSpots, dlTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
                    If ilOneRdfCode >= 0 Then
                        tmRB1DP(ilRow).iRdfCode = tmPB1DP(ilOneRdfCode).iRdfCode
                        tmRB1DP(ilRow).sDPName = tmPB1DP(ilOneRdfCode).sDPName
                    Else
                        tmRB1DP(ilRow).iRdfCode = 0
                        If llRdfStartTime = 9999999 Then
                            tmRB1DP(ilRow).sDPName = "Mixture"
                        Else
                            tmRB1DP(ilRow).sDPName = gFormatTimeLong(llRdfStartTime, "A", "1") & "-" & gFormatTimeLong(llRdfEndTime, "A", "1") & " Mixture"
                        End If
                    End If
                    tmRB1DP(ilRow).lNoSpots = llTNoSpots
                    tmRB1DP(ilRow).lPopEst = llRatePop
                    If llTNoSpots > 0 Then
                        'tmRB1DP(ilRow).lAvgPrice = llTotalCost / llTNoSpots
                        tmRB1DP(ilRow).lAvgPrice = dlTotalCost / llTNoSpots 'TTP 10439 - Rerate 21,000,000
                    Else
                        tmRB1DP(ilRow).lAvgPrice = 0
                    End If
                    tmRB1DP(ilRow).lAvgAud = llAvgAud
                    tmRB1DP(ilRow).lGrImp = llGrImp
                    tmRB1DP(ilRow).lGRP = llGRP
                    tmRB1DP(ilRow).lCPP = llCPP
                    tmRB1DP(ilRow).lCPM = llCPM
                    ReDim Preserve tmRB1DP(0 To ilRow + 1) As PBDPGEN
                    Exit For
                End If
            Next ilPass
        Next ilVef
    ElseIf imRBView = 2 Then  'Daypart
        'Create an array of unique dayparts
        ReDim tmRB1DP(0 To 0) As PBDPGEN
        ReDim ilRdfCode(0 To 0) As Integer
        For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
            ilFound = False
            For ilRdf = 0 To UBound(ilRdfCode) - 1 Step 1
                If (tmPB1DP(ilLoop).iRdfCode = ilRdfCode(ilRdf)) Then
                    ilFound = True
                    Exit For
                End If
            Next ilRdf
            If Not ilFound Then
                ilRdfCode(UBound(ilRdfCode)) = tmPB1DP(ilLoop).iRdfCode
                ReDim Preserve ilRdfCode(0 To UBound(ilRdfCode) + 1) As Integer
            End If
        Next ilLoop
        'Create a summary for each unique dayparts
        For ilRdf = 0 To UBound(ilRdfCode) - 1 Step 1
            For ilPass = 0 To 1 Step 1
                ilRow = UBound(tmRB1DP)
                llRatePop = -1
                'llTotalCost = 0
                dlTotalCost = 0 'TTP 10439 - Rerate 21,000,000
                llGrImp = 0
                llGRP = 0
                llNoSpots = 0
                llTNoSpots = 0
                ilOneVefCode = -1
                If Contract.edcRBWks(2).Text = "" Then
                    llNoWks = 0
                Else
                    llNoWks = Val(Contract.edcRBWks(2).Text)
                End If
                ilBox = -1  '0
                For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
                    If ilPass = 0 Then
                        If (tmPB1DP(ilLoop).iRdfCode = ilRdfCode(ilRdf)) And (tmPB1DP(ilLoop).iChk) Then
                            ilBox = ilBox + 1
                        End If
                    Else
                        If tmPB1DP(ilLoop).iRdfCode = ilRdfCode(ilRdf) Then
                            ilBox = ilBox + 1
                        End If
                    End If
                Next ilLoop
                If ilBox >= 0 Then  '1 Then
                    ReDim lgLnCost(0 To ilBox) As Long
                    ReDim igLnAvgRating(0 To ilBox) As Integer
                    ReDim lgLnGrImp(0 To ilBox) As Long
                    ReDim lgLnGRP(0 To ilBox) As Long
                    ilBox = -1  '0
                    For ilLoop = 0 To UBound(tmPB1DP) - 1 Step 1
                        If (tmPB1DP(ilLoop).iRdfCode = ilRdfCode(ilRdf)) And (((tmPB1DP(ilLoop).iChk) And (ilPass = 0)) Or (ilPass = 1)) Then
                            tmRB1DP(ilRow) = tmPB1DP(ilLoop)
                            If ilOneVefCode = -1 Then
                                ilOneVefCode = ilLoop
                            ElseIf ilOneVefCode >= 0 Then
                                If tmPB1DP(ilOneVefCode).iVefCode <> tmPB1DP(ilLoop).iVefCode Then
                                    ilOneVefCode = -2
                                End If
                            End If
                            ilBox = ilBox + 1
                            lgLnCost(ilBox) = tmRB1DP(ilRow).lTNoSpots * tmRB1DP(ilRow).lAvgPrice  'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lAvgPrice
                            igLnAvgRating(ilBox) = tmRB1DP(ilRow).iAvgRating
                            lgLnGrImp(ilBox) = tmRB1DP(ilRow).lGrImp    'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGrImp
                            lgLnGRP(ilBox) = tmRB1DP(ilRow).lGRP    'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGRP
                            llNoSpots = llNoSpots + tmRB1DP(ilRow).lNoSpots 'llNoWks * tmPB1DP(ilRow).iNoSpots
                            llTNoSpots = llTNoSpots + tmRB1DP(ilRow).lTNoSpots
                            'llTotalCost = llTotalCost + lgLnCost(ilBox)
                            dlTotalCost = dlTotalCost + lgLnCost(ilBox) 'TTP 10439 - Rerate 21,000,000
                            If llRatePop = -1 Then
                                llRatePop = tmRB1DP(ilRow).lPop
                            Else
                                If llRatePop <> tmRB1DP(ilRow).lPop Then
                                    llRatePop = 0
                                End If
                            End If
                        End If
                    Next ilLoop
                    'gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTNoSpots, llTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
                    gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), llTNoSpots, dlTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
                    If ilOneVefCode >= 0 Then
                        tmRB1DP(ilRow).iVefCode = tmPB1DP(ilOneVefCode).iVefCode
                        tmRB1DP(ilRow).sVehName = tmPB1DP(ilOneVefCode).sVehName
                    Else
                        tmRB1DP(ilRow).iVefCode = 0
                        tmRB1DP(ilRow).sVehName = "0|0|Mixture"
                    End If
                    tmRB1DP(ilRow).lNoSpots = llTNoSpots
                    tmRB1DP(ilRow).lPopEst = llRatePop
                    If llTNoSpots > 0 Then
                        'tmRB1DP(ilRow).lAvgPrice = llTotalCost / llTNoSpots
                        tmRB1DP(ilRow).lAvgPrice = dlTotalCost / llTNoSpots 'TTP 10439 - Rerate 21,000,000
                    Else
                        tmRB1DP(ilRow).lAvgPrice = 0
                    End If
                    tmRB1DP(ilRow).lAvgAud = llAvgAud
                    tmRB1DP(ilRow).lGrImp = llGrImp
                    tmRB1DP(ilRow).lGRP = llGRP
                    tmRB1DP(ilRow).lCPP = llCPP
                    tmRB1DP(ilRow).lCPM = llCPM
                    ReDim Preserve tmRB1DP(0 To ilRow + 1) As PBDPGEN
                    Exit For
                End If
            Next ilPass
        Next ilRdf
    Else
        ReDim tmRB1DP(0 To 0) As PBDPGEN
    End If
    Exit Function
TotalErr:
    mRBSummary = False
    Exit Function
End Function

Public Function mRBGetAud(ilType As Integer, hlLcf As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, hlPvf As Integer, tlPB1DP As PBDPGEN, ilSetPrice As Integer) As Boolean

    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilIndex As Integer
    Dim llSpots As Long
    Dim slDate As String
    Dim llDate As Long
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim ilWkCount As Integer
    Dim ilDnfCode As Integer
    Dim ilRBDnfCode As Integer
    Dim ilMnfSocEco As Integer
    Dim ilMnfDemo As Integer
    Dim ilStdPkg As Integer
    Dim llPvfCode As Long
    Dim ilLen As Integer
    Dim ilVef As Integer
    Dim llPop As Long
    Dim llAvgAud As Long
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilDay As Integer
    Dim ilOk As Integer
    Dim llWkPrice As Long
    ReDim ilPkgAllowedDays(0 To 6) As Integer
    ReDim ilDays(0 To 6) As Integer
    ReDim llWkSpotCount(0 To 0) As Long
    ReDim llWkActPrice(0 To 0) As Long
    ReDim llWkAvgAud(0 To 0) As Long
    ReDim llWkPopEst(0 To 0) As Long
    'Dim llLnCost As Long
    Dim dlLnCost As Double 'TTP 10439 - Rerate 21,000,000
    Dim llAvgAudAvg As Long
    ReDim ilWkRating(0 To 0) As Integer
    Dim ilLnAvgRating As Integer
    ReDim llWkGrImp(0 To 0) As Long
    ReDim llWkGRP(0 To 0) As Long
    Dim llLnGRP As Long
    Dim llLnGrImp As Long
    Dim llCPP As Long
    Dim llCPM As Long
    Dim slStr As String
    Dim llPopEst As Long
    Dim ilDGSave(0 To 3) As Integer
    Dim ilRBIndex As Integer
    Dim ilPvfIndex As Integer
    Dim ilPvfSpotAdj As Integer
    Dim ilFound As Integer
    Dim llRif2 As Long
    Dim ilRdf2 As Integer
    Dim llEDate As Long
    Dim llLDate As Long
    Dim llDate0 As Long
    Dim llDate1 As Long
    Dim ilHidden As Integer
    Dim ilBox As Integer
    Dim llNoSpots As Long
    'Dim llTotalCost As Long
    Dim dlTotalCost As Double 'TTP 10439 - Rerate 21,000,000
    Dim llRatePop As Long
    Dim ilRating As Integer
    Dim llGrImp As Long
    Dim llChgSpots As Long
    Dim llGRP As Long
    Dim slvalue As String
    Dim ilIndex1 As Integer
    Dim ilVefIndex As Integer
    Dim llRafCode As Long
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long
    Dim llSumGRP As Long

    On Error GoTo TotalDollarErr:
    mRBGetAud = True
    'ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, ilDnfCode, ilCode, ilMnfSocEco, ilMnfDemo, llDate0, llDate1, ilPassRdfCode, llOvStartTime, llOvEndTime, ilDays(), llAvgAud, llPopEst)
    'gAvgAudToLnResearch False, llPop, lgWkPopEst(), igWkSpotCount(), lgWkActPrice(), lgWkAvgAud(), lgLnCost(ilLnUpper), llAvgAudAvg, igWkRating(), igLnAvgRating(ilLnUpper), igWkGRImp(), lgLnGrImp(ilLnUpper), lgWkGRP(), lgLnGRP(ilLnUpper), llCPP, llCPM, llPopEst
    ilMnfSocEco = 0
    ilDnfCode = 0
    llOvStartTime = 0
    llOvEndTime = 0
    ilMnfDemo = 0
    slStr = Contract.edcPBDate(0).Text
    llDate0 = gDateValue(slStr)
    slStr = Contract.edcPBDate(1).Text
    llDate1 = gDateValue(slStr)
    If Contract.lbcDaypart.ListIndex >= 0 Then
        'Find matching name
        If (Contract.lbcDemo(0).ListIndex >= 1) Or (Contract.lbcDemo(1).ListIndex >= 1) Or (Contract.lbcDemo(2).ListIndex >= 1) Or (Contract.lbcDemo(3).ListIndex >= 1) Then
            ilIndex = Contract.lbcDemo(imDemoMap(Contract.lbcDaypart.ListIndex)).ListIndex
            slNameCode = tgDemoCode(ilIndex - 1).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
        Else
            ilIndex = Contract.lbcDaypart.ListIndex
            slNameCode = tgDemoCode(ilIndex).sKey  'Traffic!lbcDemoCode.List(ilIndex - 1)
        End If
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilMnfDemo = Val(slCode)
    Else
        If Contract.lbcDemo(0).ListIndex >= 1 Then
            Contract.lbcDaypart.ListIndex = 0
            If (Contract.lbcDemo(0).ListIndex >= 1) Or (Contract.lbcDemo(1).ListIndex >= 1) Or (Contract.lbcDemo(2).ListIndex >= 1) Or (Contract.lbcDemo(3).ListIndex >= 1) Then
                slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey 'Traffic!lbcDemoCode.List(Contract.lbcDemo(0).ListIndex - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                ilMnfDemo = Val(slCode)
            Else
                slNameCode = tgDemoCode(Contract.lbcDaypart.ListIndex).sKey 'Traffic!lbcDemoCode.List(Contract.lbcDemo(0).ListIndex - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                ilMnfDemo = Val(slCode)
            End If
        End If
    End If
    If Contract.lbcPBLen.ListIndex >= 0 Then
        ilLen = Contract.lbcPBLen.List(Contract.lbcPBLen.ListIndex)
    End If
    ReDim ilRBLoop(0 To 0) As Integer
    If ilType = 1 Then  'Vehicle
        For ilIndex = 0 To UBound(tmPB1DP) - 1 Step 1
            If (tlPB1DP.iVefCode = tmPB1DP(ilIndex).iVefCode) Then
                ilRBLoop(UBound(ilRBLoop)) = ilIndex
                ReDim Preserve ilRBLoop(0 To UBound(ilRBLoop) + 1) As Integer
            End If
        Next ilIndex
    ElseIf ilType = 2 Then  'Daypart
        For ilIndex = 0 To UBound(tmPB1DP) - 1 Step 1
            If (tlPB1DP.iRdfCode = tmPB1DP(ilIndex).iRdfCode) Then
                ilRBLoop(UBound(ilRBLoop)) = ilIndex
                ReDim Preserve ilRBLoop(0 To UBound(ilRBLoop) + 1) As Integer
                Exit For
            End If
        Next ilIndex
    Else
        For ilIndex = 0 To UBound(tmPB1DP) - 1 Step 1
            If (tlPB1DP.iVefCode = tmPB1DP(ilIndex).iVefCode) And (tlPB1DP.iRdfCode = tmPB1DP(ilIndex).iRdfCode) Then
                ilRBLoop(UBound(ilRBLoop)) = ilIndex
                ReDim Preserve ilRBLoop(0 To UBound(ilRBLoop) + 1) As Integer
                Exit For
            End If
        Next ilIndex
    End If
    For ilIndex = 0 To UBound(ilRBLoop) - 1 Step 1
        ilRBIndex = ilRBLoop(ilIndex)
        If tmPB1DP(ilRBIndex).iAudSet = False Then
            ilStdPkg = tmPB1DP(ilRBIndex).iStdPkg
            ilVef = gBinarySearchVef(tmPB1DP(ilRBIndex).iVefCode)
            If ilVef <> -1 Then
                ilDnfCode = tgMVef(ilVef).iDnfCode
                If (tgMVef(ilVef).sType = "P") And (tgMVef(ilVef).lPvfCode > 0) Then
                    If (tgSaf(0).sAudByPackage <> "Y") Then
                        ilStdPkg = True
                        llPvfCode = tgMVef(ilVef).lPvfCode
                    Else
                        ilStdPkg = False
                        llPvfCode = 0
                    End If
                Else
                    ilStdPkg = False
                    For ilRBDnfCode = UBound(imRBDnfCode) - 1 To LBound(imRBDnfCode) Step -1
                        If mRBVehBookExist(hlDrf, imRBDnfCode(ilRBDnfCode), tgMVef(ilVef).iCode) Then
                            ilDnfCode = imRBDnfCode(ilRBDnfCode)
                            Exit For
                        End If
                    Next ilRBDnfCode
                End If
            End If
            If Not ilStdPkg Then
                If (ilDnfCode > 0) And (ilMnfDemo > 0) Then
                    ilRet = gGetDemoPop(hlDrf, hlMnf, hlDpf, ilDnfCode, ilMnfSocEco, ilMnfDemo, llPop)
                Else
                    llPop = 0
                End If
                tmPB1DP(ilRBIndex).lPop = llPop
                If tmPB1DP(ilRBIndex).iOvDays(0) <> -1 Then
                    For ilDay = 0 To 6 Step 1
                        If tmPB1DP(ilRBIndex).iOvDays(ilDay) = 0 Then
                            ilDays(ilDay) = True
                        Else
                            ilDays(ilDay) = False
                        End If
                    Next ilDay
                Else
                    mDPAllowedDays tmPB1DP(ilRBIndex).iRdfCode, imAllowedDays()
                    For ilDay = 0 To 6 Step 1
                        ilDays(ilDay) = imAllowedDays(ilDay + LBound(imAllowedDays))
                    Next ilDay
                End If
                If Trim$(tmPB1DP(ilRBIndex).sOvStartTime) <> "" Then
                    llOvStartTime = gTimeToLong(Trim$(tmPB1DP(ilRBIndex).sOvStartTime), False)
                    llOvEndTime = gTimeToLong(Trim$(tmPB1DP(ilRBIndex).sOvEndTime), False)
                Else
                    llOvStartTime = 0
                    llOvEndTime = 0
                End If
                'For ilLoop = 0 To Contract.lbcRBDateSpot.ListItems.Count - 1 Step 1
                If tmPB1DP(ilRBIndex).iSpotChg Then
                    llChgSpots = tmPB1DP(ilRBIndex).lNoSpots
                End If
                tmPB1DP(ilRBIndex).lNoSpots = 0
                ilWkCount = -1  '0
                If (tmPB1DP(ilRBIndex).lMixStartDate > 0) Then
                    slDate = Format$(tmPB1DP(ilRBIndex).lMixStartDate, "m/d/yy")
                End If
                ilLoop = 0
                Do
                    If (tmPB1DP(ilRBIndex).lMixStartDate > 0) Then
                        slStr = smRBMixDatesSpots(tmPB1DP(ilRBIndex).iMixSpotIndex)
                        ilRet = gParseItem(slStr, ilLoop + 1, "|", slvalue)
                        If ilRet <> CP_MSG_NONE Then
                            Exit Do
                        End If
                        If Left$(slvalue, 1) = "-" Then
                            llSpots = 0
                        Else
                            llSpots = Val(slvalue)
                        End If
                    Else
                        If ilLoop >= Contract.lbcRBDatesSpots(0).ListCount Then
                            Exit Do
                        End If
                        If Contract.lbcRBDatesSpots(0).Selected(ilLoop) Then
                            slNameCode = Contract.lbcRBDatesSpots(0).List(ilLoop)
                            ilRet = gParseItem(slNameCode, 1, "|", slDate)
                            ilRet = gParseItem(slNameCode, 2, "|", slCode)
                            If tmPB1DP(ilRBIndex).iSpotChg Then
                                llSpots = llChgSpots
                            Else
                                If Trim$(slCode) <> "" Then
                                    llSpots = Val(slCode)
                                Else
                                    llSpots = 0
                                End If
                            End If
                        Else
                            llSpots = 0
                        End If
                    End If
                    If llSpots > 0 Then
                        tmPB1DP(ilRBIndex).lNoSpots = tmPB1DP(ilRBIndex).lNoSpots + llSpots
                        ilWkCount = ilWkCount + 1
                        If ilWkCount > UBound(llWkSpotCount) Then
                            ReDim Preserve llWkSpotCount(0 To ilWkCount) As Long
                            ReDim Preserve llWkActPrice(0 To ilWkCount) As Long
                            ReDim Preserve llWkAvgAud(0 To ilWkCount) As Long
                            ReDim Preserve llWkPopEst(0 To ilWkCount) As Long
                            ReDim ilWkRating(0 To ilWkCount) As Integer
                        End If
                        llWkSpotCount(ilWkCount) = llSpots
                        llStartDate = gDateValue(slDate)
                        llEndDate = llStartDate + 6
                        If (ilSetPrice) And (tmPB1DP(ilRBIndex).lOrigAvgPrice = -1) Then
                            llWkPrice = mComputeRCWkPrice(tmRcf.iCode, tmPB1DP(ilRBIndex).iRdfCode, slDate, tmPB1DP(ilRBIndex).iVefCode, -1) * 100
                            If llWkPrice > 0 Then
                                ilDGSave(3) = 1  'Preempt
                                slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, 0, ilDGSave(), llOvStartTime, llOvEndTime, ilLen, llWkSpotCount(ilWkCount), ilDays(), tmPB1DP(ilRBIndex).iRdfCode)
                                slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                                llWkPrice = gStrDecToLong(slStr, 0)
                            End If
                        Else
                            llWkPrice = tmPB1DP(ilRBIndex).lAvgPrice
                        End If
                        llWkActPrice(ilWkCount) = llWkPrice
                        llRafCode = 0
                        ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilDnfCode, tmPB1DP(ilRBIndex).iVefCode, ilMnfSocEco, ilMnfDemo, llStartDate, llEndDate, tmPB1DP(ilRBIndex).iRdfCode, llOvStartTime, llOvEndTime, ilDays(), "S", llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                        llWkAvgAud(ilWkCount) = llAvgAud
                        llWkPopEst(ilWkCount) = llPopEst
                    End If
                    slDate = gIncOneWeek(slDate)
                    ilLoop = ilLoop + 1
                Loop
                If ilWkCount >= 0 Then
                    ReDim ilWkRating(0 To ilWkCount) As Integer
                    ReDim llWkGrImp(0 To ilWkCount) As Long
                    ReDim llWkGRP(0 To ilWkCount) As Long
                    'gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, llWkPopEst(), llWkSpotCount(), llWkActPrice(), llWkAvgAud(), llLnCost, llAvgAudAvg, ilWkRating(), ilLnAvgRating, llWkGrImp(), llLnGrImp, llWkGRP(), llLnGRP, llCPP, llCPM, llPopEst
                    gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, llWkPopEst(), llWkSpotCount(), llWkActPrice(), llWkAvgAud(), dlLnCost, llAvgAudAvg, ilWkRating(), ilLnAvgRating, llWkGrImp(), llLnGrImp, llWkGRP(), llLnGRP, llCPP, llCPM, llPopEst 'TTP 10439 - Rerate 21,000,000
                    tmPB1DP(ilRBIndex).lAvgAud = llAvgAudAvg
                    tmPB1DP(ilRBIndex).lGrImp = llLnGrImp
                    tmPB1DP(ilRBIndex).lGRP = llLnGRP
                    tmPB1DP(ilRBIndex).iAvgRating = ilLnAvgRating
                    tmPB1DP(ilRBIndex).lCPP = llCPP
                    tmPB1DP(ilRBIndex).lCPM = llCPM
                    'tmPB1DP(ilRBIndex).lTCost = llLnCost
                    tmPB1DP(ilRBIndex).dTCost = dlLnCost 'TTP 10439 - Rerate 21,000,000
                    tmPB1DP(ilRBIndex).lTNoSpots = tmPB1DP(ilRBIndex).lNoSpots
                    'tmPB1DP(ilRBIndex).lAvgPrice = llLnCost / tmPB1DP(ilRBIndex).lNoSpots
                    tmPB1DP(ilRBIndex).lAvgPrice = dlLnCost / tmPB1DP(ilRBIndex).lNoSpots 'TTP 10439 - Rerate 21,000,000
                    tmPB1DP(ilRBIndex).lNoSpots = tmPB1DP(ilRBIndex).lNoSpots / (ilWkCount + 1)
                    If tmPB1DP(ilRBIndex).lOrigAvgPrice = -1 Then
                        tmPB1DP(ilRBIndex).lOrigAvgPrice = tmPB1DP(ilRBIndex).lAvgPrice
                    End If
                End If
                tmPB1DP(ilRBIndex).iAudSet = True
            Else
                ReDim tmPBDPGen(0 To 0) As PBDPGEN
                ReDim lmPvfCode(0 To 0) As Long
                ReDim imPvfSpotAdj(0 To 0) As Integer
                ilPvfIndex = 0
                ilPvfSpotAdj = 1
                'Loop thru standard packge getting values for each vehicle
                tmPvfSrchKey.lCode = llPvfCode
                ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                Do While ilRet = BTRV_ERR_NONE
                    For ilVef = LBound(tmPvf.iVefCode) To UBound(tmPvf.iVefCode) Step 1
                        If (tmPvf.iVefCode(ilVef) > 0) And (tmPvf.iRdfCode(ilVef) > 0) Then
                            tmPBDPGen(UBound(tmPBDPGen)).iRdfCode = tmPvf.iRdfCode(ilVef)
                            tmPBDPGen(UBound(tmPBDPGen)).iVefCode = tmPvf.iVefCode(ilVef)
                            tmPBDPGen(UBound(tmPBDPGen)).lNoSpots = ilPvfSpotAdj * tmPvf.iNoSpot(ilVef)
                            ilFound = False
                            ilIndex1 = gBinarySearchVef(tmPvf.iVefCode(ilVef))
                            If ilIndex1 <> -1 Then
                                If tgMVef(ilIndex1).sState = "A" Then
                                    If (tgMVef(ilIndex1).sType = "P") And (tgMVef(ilIndex1).lPvfCode > 0) Then
                                        ilFound = False
                                        lmPvfCode(UBound(lmPvfCode)) = tgMVef(ilIndex1).lPvfCode
                                        imPvfSpotAdj(UBound(imPvfSpotAdj)) = tmPvf.iNoSpot(ilVef)
                                        ReDim Preserve lmPvfCode(0 To UBound(lmPvfCode) + 1) As Long
                                        ReDim Preserve imPvfSpotAdj(0 To UBound(imPvfSpotAdj) + 1) As Integer
                                    ElseIf (tgMVef(ilIndex1).sType = "P") Then
                                        ilFound = False
                                    Else
                                        ilFound = True
                                        tmPBDPGen(UBound(tmPBDPGen)).sVehName = Trim$(str$(ilIndex1))
                                    End If
                                End If
                                'Exit For
                            End If
                            If ilFound Then
                                ilFound = False
                                For llRif2 = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                                    If (tgMRif(llRif2).iRcfCode = tmRcf.iCode) Then
                                        If (tgMRif(llRif2).iVefCode = tmPvf.iVefCode(ilVef)) And (tgMRif(llRif2).iRdfCode = tmPvf.iRdfCode(ilVef)) Then
                                            ilFound = True
                                            Exit For
                                        End If
                                    End If
                                Next llRif2
                            End If
                            If ilFound Then
                                ilFound = False
                                ilRdf2 = gBinarySearchRdf(tmPvf.iRdfCode(ilVef))
                                If ilRdf2 <> -1 Then
                                    If tgMRdf(ilRdf2).sState = "A" Then
                                        ilFound = True
                                        tmPBDPGen(UBound(tmPBDPGen)).sDPName = Trim$(str$(ilRdf2))
                                    End If
                                End If
                            End If
                            If ilFound Then
                                llEDate = gGetEarliestLCFDate(hlLcf, "C", tmPvf.iVefCode(ilVef))
                                llLDate = gGetLatestLCFDate(hlLcf, "C", tmPvf.iVefCode(ilVef))
                                ilOk = False
                                If ((llDate1 >= llEDate) And (llDate0 <= llLDate)) Or (llEDate = -1) Then
                                    ilOk = True
                                Else
                                    'Test if TFN exist
                                    ilVefIndex = gBinarySearchVef(tmPvf.iVefCode(ilVef))
                                    If ilVefIndex <> -1 Then
                                        If tgMVef(ilVefIndex).sType <> "G" Then
                                            If (llDate1 >= llEDate) Then
                                                For ilDay = 1 To 7 Step 1
                                                    tmLcfSrchKey.iType = 0
                                                    tmLcfSrchKey.sStatus = "C"
                                                    tmLcfSrchKey.iVefCode = tmPvf.iVefCode(ilVef)
                                                    tmLcfSrchKey.iLogDate(0) = ilDay  '1=Monday; 2= Tuesday;...
                                                    tmLcfSrchKey.iLogDate(1) = 0
                                                    tmLcfSrchKey.iSeqNo = 1
                                                    ilRet = btrGetLessOrEqual(hlLcf, tmLcf, imLcfRecLen, tmLcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get last current record to obtain date
                                                    If (ilRet = BTRV_ERR_NONE) And (tmLcf.sStatus = "C") And (tmLcf.iVefCode = tmPvf.iVefCode(ilVef)) And (tmLcf.iType = 0) Then
                                                        ilOk = True
                                                        Exit For
                                                    End If
                                                Next ilDay
                                            End If
                                        End If
                                    End If
                                End If
                                ilFound = ilOk
                            End If
                            If ilFound Then
                                ReDim Preserve tmPBDPGen(0 To UBound(tmPBDPGen) + 1) As PBDPGEN
                            End If
                        End If
                    Next ilVef
                    If tmPvf.lLkPvfCode <= 0 Then
                        If ilPvfIndex >= UBound(lmPvfCode) Then
                            Exit Do
                        Else
                            tmPvf.lLkPvfCode = lmPvfCode(ilPvfIndex)
                            ilPvfSpotAdj = imPvfSpotAdj(ilPvfIndex)
                            ilPvfIndex = ilPvfIndex + 1
                        End If
                    End If
                    tmPvfSrchKey.lCode = tmPvf.lLkPvfCode
                    ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                Loop
                If tmPB1DP(ilRBIndex).iSpotChg Then
                    llChgSpots = tmPB1DP(ilRBIndex).lNoSpots
                End If
                tmPB1DP(ilRBIndex).lNoSpots = 0
                For ilHidden = LBound(tmPBDPGen) To UBound(tmPBDPGen) - 1 Step 1
                    ilVef = gBinarySearchVef(tmPBDPGen(ilHidden).iVefCode)
                    If ilVef <> -1 Then
                        ilDnfCode = tgMVef(ilVef).iDnfCode
                        For ilRBDnfCode = UBound(imRBDnfCode) - 1 To LBound(imRBDnfCode) Step -1
                            If mRBVehBookExist(hlDrf, imRBDnfCode(ilRBDnfCode), tgMVef(ilVef).iCode) Then
                                ilDnfCode = imRBDnfCode(ilRBDnfCode)
                                Exit For
                            End If
                        Next ilRBDnfCode
                    End If
                    If (ilDnfCode > 0) And (ilMnfDemo > 0) Then
                        ilRet = gGetDemoPop(hlDrf, hlMnf, hlDpf, ilDnfCode, ilMnfSocEco, ilMnfDemo, llPop)
                    Else
                        llPop = 0
                    End If
                    tmPBDPGen(ilHidden).lPop = llPop
                    mDPAllowedDays tmPBDPGen(ilHidden).iRdfCode, imAllowedDays()
                    If tmPB1DP(ilRBIndex).iOvDays(0) <> -1 Then
                        For ilDay = 0 To 6 Step 1
                            If (tmPB1DP(ilRBIndex).iOvDays(ilDay) = 0) And (imAllowedDays(ilDay + LBound(imAllowedDays)) = True) Then
                                ilDays(ilDay) = True
                            Else
                                ilDays(ilDay) = False
                            End If
                        Next ilDay
                    Else
                        '3/8/06- Changed as the old code was just using the package whereas mChkForStdPkg used the combination
                        'mDPAllowedDays tmPB1DP(ilRBIndex).iRdfcode, imAllowedDays()
                        'For ilDay = 0 To 6 Step 1
                        '    ilDays(ilDay) = imAllowedDays(ilDay + LBound(imAllowedDays))
                        'Next ilDay
                        mDPAllowedDays tmPB1DP(ilRBIndex).iRdfCode, ilPkgAllowedDays()
                        For ilDay = 0 To 6 Step 1
                            If (ilPkgAllowedDays(ilDay) = True) And (imAllowedDays(ilDay) = True) Then
                                ilDays(ilDay) = True
                            Else
                                ilDays(ilDay) = False
                            End If
                        Next ilDay
                    End If
                    If Trim$(tmPB1DP(ilRBIndex).sOvStartTime) <> "" Then
                        llOvStartTime = gTimeToLong(Trim$(tmPB1DP(ilRBIndex).sOvStartTime), False)
                        llOvEndTime = gTimeToLong(Trim$(tmPB1DP(ilRBIndex).sOvEndTime), False)
                    Else
                        llOvStartTime = 0
                        llOvEndTime = 0
                    End If
                    ilWkCount = -1  '0
                    If (tmPB1DP(ilRBIndex).lMixStartDate > 0) Then
                        slDate = Format$(tmPB1DP(ilRBIndex).lMixStartDate, "m/d/yy")
                    End If
                    ilLoop = 0
                    Do
                        If (tmPB1DP(ilRBIndex).lMixStartDate > 0) Then
                            slStr = smRBMixDatesSpots(tmPB1DP(ilRBIndex).iMixSpotIndex)
                            ilRet = gParseItem(slStr, ilLoop + 1, "|", slvalue)
                            If ilRet <> CP_MSG_NONE Then
                                Exit Do
                            End If
                            If Left$(slvalue, 1) = "-" Then
                                llSpots = 0
                            Else
                                llSpots = Val(slvalue)
                            End If
                        Else
                            If ilLoop >= Contract.lbcRBDatesSpots(0).ListCount Then
                                Exit Do
                            End If
                            If Contract.lbcRBDatesSpots(0).Selected(ilLoop) Then
                                slNameCode = Contract.lbcRBDatesSpots(0).List(ilLoop)
                                ilRet = gParseItem(slNameCode, 1, "|", slDate)
                                ilRet = gParseItem(slNameCode, 2, "|", slCode)
                                If tmPB1DP(ilRBIndex).iSpotChg Then
                                    llSpots = llChgSpots
                                Else
                                    If Trim$(slCode) <> "" Then
                                        llSpots = Val(slCode)
                                    Else
                                        llSpots = 0
                                    End If
                                End If
                            Else
                                llSpots = 0
                            End If
                        End If
                        If llSpots > 0 Then
                            'tmPB1DP(ilRBIndex).iNoSpots = tmPB1DP(ilRBIndex).iNoSpots + llSpots * tmPBDPGen(ilHidden).iNoSpots
                            If ilHidden = LBound(tmPBDPGen) Then
                                tmPB1DP(ilRBIndex).lNoSpots = tmPB1DP(ilRBIndex).lNoSpots + llSpots
                            End If
                            ilWkCount = ilWkCount + 1
                            If ilWkCount > UBound(llWkSpotCount) Then
                                ReDim Preserve llWkSpotCount(0 To ilWkCount) As Long
                                ReDim Preserve llWkActPrice(0 To ilWkCount) As Long
                                ReDim Preserve llWkAvgAud(0 To ilWkCount) As Long
                                ReDim Preserve llWkPopEst(0 To ilWkCount) As Long
                                ReDim ilWkRating(0 To ilWkCount) As Integer
                            End If
                            llWkSpotCount(ilWkCount) = llSpots * tmPBDPGen(ilHidden).lNoSpots
                            llStartDate = gDateValue(slDate)
                            llEndDate = llDate + 6
                            llWkPrice = mComputeRCWkPrice(tmRcf.iCode, tmPBDPGen(ilHidden).iRdfCode, slDate, tmPBDPGen(ilHidden).iVefCode, -1) * 100
                            If llWkPrice > 0 Then
                                ilDGSave(3) = 1  'Preempt
                                slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, 0, ilDGSave(), llOvStartTime, llOvEndTime, ilLen, llWkSpotCount(ilWkCount), ilDays(), tmPBDPGen(ilHidden).iRdfCode)
                                slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                                llWkPrice = gStrDecToLong(slStr, 0)
                            End If
                            If (ilSetPrice) And (tmPB1DP(ilRBIndex).lOrigAvgPrice = -1) Then
                                llWkActPrice(ilWkCount) = llWkPrice
                            Else
                                If (tmPB1DP(ilRBIndex).lOrigAvgPrice <> 0) And (tmPB1DP(ilRBIndex).lOrigAvgPrice <> -1) Then
                                    llWkActPrice(ilWkCount) = (llWkPrice * CSng(tmPB1DP(ilRBIndex).lAvgPrice)) / tmPB1DP(ilRBIndex).lOrigAvgPrice
                                Else
                                    llWkActPrice(ilWkCount) = llWkPrice
                                End If
                            End If
                            llRafCode = 0
                            ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilDnfCode, tmPBDPGen(ilHidden).iVefCode, ilMnfSocEco, ilMnfDemo, llStartDate, llEndDate, tmPBDPGen(ilHidden).iRdfCode, llOvStartTime, llOvEndTime, ilDays(), "H", llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                            llWkAvgAud(ilWkCount) = llAvgAud
                            llWkPopEst(ilWkCount) = llPopEst
                        End If
                        slDate = gIncOneWeek(slDate)
                        ilLoop = ilLoop + 1
                    Loop
                    ReDim ilWkRating(0 To ilWkCount) As Integer
                    ReDim llWkGrImp(0 To ilWkCount) As Long
                    ReDim llWkGRP(0 To ilWkCount) As Long
                    'gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, llWkPopEst(), llWkSpotCount(), llWkActPrice(), llWkAvgAud(), llLnCost, llAvgAudAvg, ilWkRating(), ilLnAvgRating, llWkGrImp(), llLnGrImp, llWkGRP(), llLnGRP, llCPP, llCPM, llPopEst
                    gAvgAudToLnResearch smCntr1or2PlaceRating, False, llPop, llWkPopEst(), llWkSpotCount(), llWkActPrice(), llWkAvgAud(), dlLnCost, llAvgAudAvg, ilWkRating(), ilLnAvgRating, llWkGrImp(), llLnGrImp, llWkGRP(), llLnGRP, llCPP, llCPM, llPopEst 'TTP 10439 - Rerate 21,000,000
                    tmPBDPGen(ilHidden).lAvgAud = llAvgAudAvg
                    tmPBDPGen(ilHidden).lGrImp = llLnGrImp
                    tmPBDPGen(ilHidden).lGRP = llLnGRP
                    tmPBDPGen(ilHidden).iAvgRating = ilLnAvgRating
                    tmPBDPGen(ilHidden).lCPP = llCPP
                    tmPBDPGen(ilHidden).lCPM = llCPM
                    'tmPBDPGen(ilHidden).lTCost = llLnCost
                    tmPBDPGen(ilHidden).dTCost = dlLnCost 'TTP 10439 - Rerate 21,000,000
                    tmPBDPGen(ilHidden).lTNoSpots = tmPB1DP(ilRBIndex).lNoSpots
                    'tmPBDPGen(ilHidden).lAvgPrice = llLnCost / tmPBDPGen(ilHidden).lNoSpots
                    tmPBDPGen(ilHidden).lAvgPrice = dlLnCost / tmPBDPGen(ilHidden).lNoSpots 'TTP 10439 - Rerate 21,000,000
                Next ilHidden

                'Get Total
                If LBound(tmPBDPGen) = 1 Then
                    ilBox = UBound(tmPBDPGen) - 2
                Else
                    ilBox = UBound(tmPBDPGen) - 1
                End If
                If ilBox >= 0 Then
                    ReDim lgLnCost(0 To ilBox) As Long
                    ReDim igLnAvgRating(0 To ilBox) As Integer
                    ReDim lgLnGrImp(0 To ilBox) As Long
                    ReDim lgLnGRP(0 To ilBox) As Long
                    ilBox = -1  '0
                    llNoSpots = 0
                    'llTotalCost = 0
                    dlTotalCost = 0 'TTP 10439 - Rerate 21,000,000
                    llRatePop = -1
                    tmPB1DP(ilRBIndex).lAvgAud = 0
                    tmPB1DP(ilRBIndex).iAvgRating = 0
                    llSumGRP = 0
                    For ilLoop = LBound(tmPBDPGen) To UBound(tmPBDPGen) - 1 Step 1
                        ilBox = ilBox + 1
                        lgLnCost(ilBox) = tmPBDPGen(ilLoop).lNoSpots * tmPBDPGen(ilLoop).lAvgPrice   'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lAvgPrice
                        igLnAvgRating(ilBox) = tmPBDPGen(ilLoop).iAvgRating
                        lgLnGrImp(ilBox) = tmPBDPGen(ilLoop).lGrImp    'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGrImp
                        lgLnGRP(ilBox) = tmPBDPGen(ilLoop).lGRP    'llNoWks * tmPB1DP(ilRow).iNoSpots * tmPB1DP(ilRow).lGRP
                        llNoSpots = llNoSpots + tmPBDPGen(ilLoop).lNoSpots
                        'llTotalCost = llTotalCost + lgLnCost(ilBox)
                        dlTotalCost = dlTotalCost + lgLnCost(ilBox) 'TTP 10439 - Rerate 21,000,000
                        If llRatePop = -1 Then
                            llRatePop = tmPBDPGen(ilLoop).lPop
                        Else
                            If llRatePop <> tmPBDPGen(ilLoop).lPop Then
                                llRatePop = 0
                            End If
                        End If
                        'tmPB1DP(ilRBIndex).lAvgAud = tmPB1DP(ilRBIndex).lAvgAud + tmPBDPGen(ilLoop).lAvgAud
                        'tmPB1DP(ilRBIndex).iAvgRating = tmPB1DP(ilRBIndex).iAvgRating + tmPBDPGen(ilLoop).iAvgRating
                        '3/11/06:  Sum Gross Impression instead of audience as the avg aud formula is Sum(GrImp)/#PackAgesSpots
                        '          Formula separated to use package number of spots
                        tmPB1DP(ilRBIndex).lAvgAud = tmPB1DP(ilRBIndex).lAvgAud + tmPBDPGen(ilLoop).lGrImp  'tmPBDPGen(ilLoop).lAvgAud
                        '12/7/18: Computing sum of GRP as long to avoid overflow error
                        'tmPB1DP(ilRBIndex).iAvgRating = tmPB1DP(ilRBIndex).iAvgRating + tmPBDPGen(ilLoop).lGRP  'tmPBDPGen(ilLoop).iAvgRating
                        llSumGRP = llSumGRP + tmPBDPGen(ilLoop).lGRP  'tmPBDPGen(ilLoop).iAvgRating
                    Next ilLoop
                    If tmPB1DP(ilRBIndex).lNoSpots > 0 Then
                        '10/28/14: Handle two place rating
                        'If llRatePop > 0 Then
                        '    tmPB1DP(ilRBIndex).iAvgRating = ((1000 * CSng(tmPB1DP(ilRBIndex).lAvgAud)) / llRatePop) / tmPB1DP(ilRBIndex).lNoSpots
                        'Else
                        '    tmPB1DP(ilRBIndex).iAvgRating = tmPB1DP(ilRBIndex).iAvgRating / tmPB1DP(ilRBIndex).lNoSpots
                        'End If
                        If (smCntr1or2PlaceRating <> "2") Or (tgSpf.sSGRPCPPCal <> "A") Then
                            If llRatePop > 0 Then
                                tmPB1DP(ilRBIndex).iAvgRating = ((1000 * CSng(tmPB1DP(ilRBIndex).lAvgAud)) / llRatePop) / tmPB1DP(ilRBIndex).lNoSpots
                            Else
                                '12/7/18: Computing sum of GRP as long to avoid overflow error
                                'tmPB1DP(ilRBIndex).iAvgRating = tmPB1DP(ilRBIndex).iAvgRating / tmPB1DP(ilRBIndex).lNoSpots
                                tmPB1DP(ilRBIndex).iAvgRating = llSumGRP / tmPB1DP(ilRBIndex).lNoSpots
                            End If
                        Else
                            If llRatePop > 0 Then
                                tmPB1DP(ilRBIndex).iAvgRating = ((10000 * CSng(tmPB1DP(ilRBIndex).lAvgAud)) / llRatePop) / tmPB1DP(ilRBIndex).lNoSpots
                            Else
                                '12/7/18: Computing sum of GRP as long to avoid overflow error
                                'tmPB1DP(ilRBIndex).iAvgRating = (10 * CLng(tmPB1DP(ilRBIndex).iAvgRating)) / tmPB1DP(ilRBIndex).lNoSpots
                                tmPB1DP(ilRBIndex).iAvgRating = (10 * llSumGRP) / tmPB1DP(ilRBIndex).lNoSpots
                            End If
                        End If
                        tmPB1DP(ilRBIndex).lAvgAud = tmPB1DP(ilRBIndex).lAvgAud / tmPB1DP(ilRBIndex).lNoSpots
                    End If
                    tmPB1DP(ilRBIndex).lPop = llRatePop
                    
                    '11/9/16: Use package spot rate instead of the hidden line rates.
                    For ilLoop = LBound(lgLnCost) To UBound(lgLnCost) Step 1
                        If ilLoop = LBound(lgLnCost) Then
                            '5/1/18: Only compute from RC the first time
                            If tmPB1DP(ilRBIndex).lOrigAvgPrice = -1 Then
                                'Get RC package price
                                llStartDate = gDateValue(slDate)
                                llEndDate = llDate + 6
                                llWkPrice = mComputeRCWkPrice(tmRcf.iCode, tmPB1DP(ilRBIndex).iRdfCode, slDate, tmPB1DP(ilRBIndex).iVefCode, -1) * 100
                                If llWkPrice > 0 Then
                                    mDPAllowedDays tmPB1DP(ilRBIndex).iRdfCode, imAllowedDays()
                                    If tmPB1DP(ilRBIndex).iOvDays(0) <> -1 Then
                                        For ilDay = 0 To 6 Step 1
                                            If (tmPB1DP(ilRBIndex).iOvDays(ilDay) = 0) And (imAllowedDays(ilDay + LBound(imAllowedDays)) = True) Then
                                                ilDays(ilDay) = True
                                            Else
                                                ilDays(ilDay) = False
                                            End If
                                        Next ilDay
                                    Else
                                        For ilDay = 0 To 6 Step 1
                                            If (ilPkgAllowedDays(ilDay) = True) And (imAllowedDays(ilDay) = True) Then
                                                ilDays(ilDay) = True
                                            Else
                                                ilDays(ilDay) = False
                                            End If
                                        Next ilDay
                                    End If
                                    slStr = mRCPriceAdjust(tmRcf, llWkPrice, True, 0, ilDGSave(), llOvStartTime, llOvEndTime, ilLen, CInt(tmPB1DP(ilRBIndex).lNoSpots), ilDays(), tmPB1DP(ilRBIndex).iRdfCode)
                                    slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                                    lgLnCost(ilLoop) = gStrDecToLong(slStr, 0)
                                End If
                            Else
                                lgLnCost(ilLoop) = tmPB1DP(ilRBIndex).lAvgPrice * tmPB1DP(ilRBIndex).lNoSpots
                            End If
                        Else
                            lgLnCost(ilLoop) = 0
                        End If
                    Next ilLoop
                    
                    'gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), CLng(llNoSpots), llTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud
                    gResearchTotals smCntr1or2PlaceRating, False, llRatePop, lgLnCost(), lgLnGrImp(), lgLnGRP(), CLng(llNoSpots), dlTotalCost, ilRating, llGrImp, llGRP, llCPP, llCPM, llAvgAud 'TTP 10439 - Rerate 21,000,000
                    tmPB1DP(ilRBIndex).lPopEst = llRatePop
                    'tmPB1DP(ilRBIndex).lAvgPrice = llTotalCost / tmPB1DP(ilRBIndex).lNoSpots
                    tmPB1DP(ilRBIndex).lAvgPrice = dlTotalCost / tmPB1DP(ilRBIndex).lNoSpots 'TTP 10439 - Rerate 21,000,000
                    'tmPB1DP(ilRBIndex).lTCost = llTotalCost
                    tmPB1DP(ilRBIndex).dTCost = dlTotalCost 'TTP 10439 - Rerate 21,000,000
                    'tmPB1DP(ilRBIndex).lAvgAud = llAvgAud
                    'tmPB1DP(ilRBIndex).iAvgRating = ilRating
                    tmPB1DP(ilRBIndex).lGrImp = llGrImp
                    tmPB1DP(ilRBIndex).lGRP = llGRP
                    tmPB1DP(ilRBIndex).lCPP = llCPP
                    tmPB1DP(ilRBIndex).lCPM = llCPM
                    'Average number of spots
                    tmPB1DP(ilRBIndex).lTNoSpots = tmPB1DP(ilRBIndex).lNoSpots
                    tmPB1DP(ilRBIndex).lNoSpots = tmPB1DP(ilRBIndex).lNoSpots / (ilWkCount + 1)
                    If tmPB1DP(ilRBIndex).lOrigAvgPrice = -1 Then
                        tmPB1DP(ilRBIndex).lOrigAvgPrice = tmPB1DP(ilRBIndex).lAvgPrice
                    End If
                End If
                tmPB1DP(ilRBIndex).iAudSet = True
            End If
        End If
    Next ilIndex
    Exit Function
TotalDollarErr:
    mRBGetAud = False
End Function

Public Sub mRateBarSort(ilRBIndex As Integer, ilListIndex As Integer, ilSortIndex() As Integer, tlPB1DP() As PBDPGEN)
    Dim ilLoop As Integer
    Dim ilRdf As Integer
    Dim slName As String
    Dim slStr As String
    Dim slTemp As String
    Dim ilIndex As Integer
    Dim ilRet As Integer

    Contract.pbcRBVeh(ilRBIndex).Cls
    'lacVehTotal.Caption = ""
    If Abs(ilSortIndex(LBound(ilSortIndex))) - 1 <> ilListIndex Then
        For ilLoop = UBound(ilSortIndex) To LBound(ilSortIndex) + 1 Step -1
            ilSortIndex(ilLoop) = ilSortIndex(ilLoop - 1)
        Next ilLoop
        ilSortIndex(LBound(ilSortIndex)) = ilListIndex + 1
    Else
        ilSortIndex(LBound(ilSortIndex)) = -ilSortIndex(LBound(ilSortIndex))
    End If
    For ilLoop = LBound(tlPB1DP) To UBound(tlPB1DP) - 1 Step 1
        tlPB1DP(ilLoop).sKey = ""
    Next ilLoop
    'Sort
    For ilLoop = LBound(tlPB1DP) To UBound(tlPB1DP) - 1 Step 1
        slName = ""
        For ilIndex = LBound(ilSortIndex) To UBound(ilSortIndex) Step 1
            If ilSortIndex(ilIndex) <> 0 Then
                Select Case ilSortIndex(ilIndex)
                    Case 1  'Check
                        If tlPB1DP(ilLoop).iChk Then
                            slName = slName & "A"
                        Else
                            slName = slName & "B"
                        End If
                    Case 2  'Vehicle
                        slName = slName & Trim$(tlPB1DP(ilLoop).sVehName)
                    Case 3  'Daypart
                        'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                        '    If tmPB1DP(ilLoop).iRdfcode = tgMRdf(ilRdf).iCode Then
                            ilRdf = gBinarySearchRdf(tlPB1DP(ilLoop).iRdfCode)
                            If ilRdf <> -1 Then
                                slName = slName & mMakePrgSort(-1, ilRdf)
                        '        Exit For
                            End If
                        'Next ilRdf
                    Case 4  'Spots
                        slStr = Trim$(str$(999 - tlPB1DP(ilLoop).lNoSpots))
                        Do While Len(slStr) < 3
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case 5  'Price
                        slStr = Trim$(str$(999999999 - tlPB1DP(ilLoop).lAvgPrice))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case 6  'Rating
                        slStr = Trim$(str$(99999 - tlPB1DP(ilLoop).iAvgRating))
                        Do While Len(slStr) < 5
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case 7  'Audience
                        slStr = Trim$(str$(999999999 - tlPB1DP(ilLoop).lAvgAud))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case 8  'CPP
                        slStr = Trim$(str$(999999999 - tlPB1DP(ilLoop).lCPP))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case 9  'CPM
                        slStr = Trim$(str$(999999999 - tlPB1DP(ilLoop).lCPM))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case -1  'Check
                        If tlPB1DP(ilLoop).iChk Then
                            slName = slName & "B"
                        Else
                            slName = slName & "A"
                        End If
                    Case -2  'Vehicle
                        slTemp = Trim$(tlPB1DP(ilLoop).sVehName)
                        slStr = ""
                        For ilRet = 1 To Len(slTemp) Step 1
                            slStr = slStr & Chr$((Asc(Mid$(slTemp, ilRet, 1)) Xor &H7F&))
                        Next ilRet
                        slName = slName & slStr
                    Case -3  'Daypart
                        'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                        '    If tmPB1DP(ilLoop).iRdfcode = tgMRdf(ilRdf).iCode Then
                            ilRdf = gBinarySearchRdf(tlPB1DP(ilLoop).iRdfCode)
                            If ilRdf <> -1 Then
                                slTemp = mMakePrgSort(-1, ilRdf)
                        '        Exit For
                            End If
                        'Next ilRdf
                        slStr = ""
                        For ilRet = 1 To Len(slTemp) Step 1
                            slStr = slStr & Chr$((Asc(Mid$(slTemp, ilRet, 1)) Xor &H7F&))
                        Next ilRet
                        slName = slName & slStr
                    Case -4  'Spots
                        slStr = Trim$(str$(tlPB1DP(ilLoop).lNoSpots))
                        Do While Len(slStr) < 3
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case -5  'Price
                        slStr = Trim$(str$(tlPB1DP(ilLoop).lAvgPrice))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case -6  'Rating
                        slStr = Trim$(str$(tlPB1DP(ilLoop).iAvgRating))
                        Do While Len(slStr) < 5
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case -7  'Audience
                        slStr = Trim$(str$(tlPB1DP(ilLoop).lAvgAud))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case -8  'CPP
                        slStr = Trim$(str$(tlPB1DP(ilLoop).lCPP))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                    Case -9  'CPM
                        slStr = Trim$(str$(tlPB1DP(ilLoop).lCPM))
                        Do While Len(slStr) < 9
                            slStr = "0" & slStr
                        Loop
                        slName = slName & slStr
                End Select
            End If
        Next ilIndex
        tlPB1DP(ilLoop).sKey = slName
    Next ilLoop
    If UBound(tlPB1DP) - 1 > 0 Then
        ArraySortTyp fnAV(tlPB1DP(), 0), UBound(tlPB1DP), 0, LenB(tlPB1DP(0)), 0, LenB(tlPB1DP(0).sKey), 0
    End If

End Sub

Public Function mSetRBDPShowName(tlPB1DP As PBDPGEN) As String

    Dim ilDay As Integer
    Dim slEDays As String
    Dim ilRdfIndex As Integer
    Dim slDPName As String
    Dim slSTime As String
    Dim slETime As String
    Dim ilTest As Integer
    ReDim ilDays(0 To 6) As Integer
    ReDim ilAllowedDays(0 To 6) As Integer
    ReDim slXDays(0 To 6) As String * 1

    If (tlPB1DP.iOvDays(0) <> -1) Or (Trim$(tlPB1DP.sOvStartTime) <> "") Then
        If (tlPB1DP.iOvDays(0) = -1) Then
            mDPAllowedDays tlPB1DP.iRdfCode, ilAllowedDays()
            For ilDay = 0 To 6 Step 1
                If ilAllowedDays(ilDay) Then
                    ilDays(ilDay) = 1
                Else
                    ilDays(ilDay) = 0
                End If
            Next ilDay
        Else
            For ilDay = 0 To 6 Step 1
                If tlPB1DP.iOvDays(ilDay) = 0 Then
                    ilDays(ilDay) = 1
                Else
                    ilDays(ilDay) = 0
                End If
            Next ilDay
        End If
        For ilDay = 0 To 6 Step 1
            slXDays(ilDay) = ""
        Next ilDay
        slDPName = gDayNames(ilDays(), slXDays(), 2, slEDays)
        If Trim$(tlPB1DP.sOvStartTime) <> "" Then
            slDPName = slDPName & " " & Trim$(tlPB1DP.sOvStartTime) & "-" & Trim$(tlPB1DP.sOvEndTime)
        Else
            ilRdfIndex = gBinarySearchRdf(tlPB1DP.iRdfCode)
            If ilRdfIndex <> -1 Then
                If (tgMRdf(ilRdfIndex).iLtfCode(0) <> 0) Or (tgMRdf(ilRdfIndex).iLtfCode(1) <> 0) Or (tgMRdf(ilRdfIndex).iLtfCode(2) <> 0) Then
                    slDPName = slDPName & " " & Trim$(tgMRdf(ilRdfIndex).sName)
                Else
                    For ilTest = LBound(tgMRdf(ilRdfIndex).iStartTime, 2) To UBound(tgMRdf(ilRdfIndex).iStartTime, 2) Step 1
                        If (tgMRdf(ilRdfIndex).iStartTime(0, ilTest) <> 1) Or (tgMRdf(ilRdfIndex).iStartTime(1, ilTest) <> 0) Then
                            gUnpackTime tgMRdf(ilRdfIndex).iStartTime(0, ilTest), tgMRdf(ilRdfIndex).iStartTime(1, ilTest), "A", "1", slSTime
                            gUnpackTime tgMRdf(ilRdfIndex).iEndTime(0, ilTest), tgMRdf(ilRdfIndex).iEndTime(1, ilTest), "A", "1", slETime
                        End If
                    Next ilTest
                End If
                slDPName = slDPName & " " & slSTime & "-" & slETime
            End If
        End If
    Else
        slDPName = tlPB1DP.sDPName
    End If
    mSetRBDPShowName = slDPName
End Function

Public Sub mSetGridCount()
    Dim ilLoop As Integer
    Dim ilCount As Integer

    For ilLoop = LBound(tmPB1DP) To UBound(tmPB1DP) - 1 Step 1
        If tmPB1DP(ilLoop).iChk Then
            ilCount = ilCount + 1
        End If
    Next ilLoop
    If UBound(tmPB1DP) > 0 Then
        Contract.ckcRBGridAll.Caption = "All (" & ilCount & " of " & UBound(tmPB1DP) & ")"
    Else
        Contract.ckcRBGridAll.Caption = "All"
    End If

End Sub

Public Sub mSplitFlightsIntoWeeks(ilLnRowNo As Integer)

    'ilLnRowNo (I)-  -1=All
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim ilCffIndex As Integer
    Dim ilLastCffUsed As Integer
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilTestCff As Integer
    Dim llSDate As Long
    Dim llEDate As Long
    Dim llWkEndDate As Long
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llDate As Long
    Dim ilFirstWk As Integer
    Dim ilLine As Integer

    If (tgSpf.sDemoEstAllowed <> "Y") And (ilLnRowNo = -1) Then
        Exit Sub
    End If
    ilLastCffUsed = LBound(tgCffCntr)
    ilLine = LBound(tgClfCntr)
    Do While ilLine < UBound(tgClfCntr)
        If (ilLnRowNo = -1) Or (ilLnRowNo = ilLine + 1) Then
            llSDate = 0
            llEDate = 999999999
            ilCff = tgClfCntr(ilLine).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    llDate = llFlStartDate
                    llWkEndDate = llDate + 6
                    If llWkEndDate > llFlEndDate Then
                        llWkEndDate = llFlEndDate
                    End If
                    ilFirstWk = True
                    Do
                        If (llDate >= llSDate) And (llDate <= llEDate) Then
                            If ilFirstWk Then
                                ilFirstWk = False
                            Else
                                '6/6/16: Replaced GoSub
                                'GoSub lObtainNextCff
                                mObtainNextCFF ilCffIndex, ilLastCffUsed
                                tgCffCntr(ilCffIndex) = tgCffCntr(ilCff)
                                tgCffCntr(ilCffIndex).iStatus = 0
                                tgCffCntr(ilCff).iNextCff = ilCffIndex
                                'Set End Date
                                gPackDateLong llDate - 1, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)
                                tgCffCntr(ilCff).lEndDate = llDate - 1
                                ilCff = ilCffIndex
                                gPackDateLong llDate, tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1)
                                tgCffCntr(ilCff).lStartDate = llDate
                                tgCffCntr(ilCff).lPriDemoAvgAud = 0
                                tgCffCntr(ilCff).lPriDemoPop = 0
                            End If
                        ElseIf llDate > llEDate Then
                            Exit Do
                        End If
                        llDate = llDate + 1
                        Do While gWeekDayLong(llDate) <> 0
                            llDate = llDate + 1
                        Loop
                        llWkEndDate = llDate + 6
                        If llWkEndDate > llFlEndDate Then
                            llWkEndDate = llFlEndDate
                        End If
                    Loop While llDate <= llFlEndDate
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
        End If
        ilLine = ilLine + 1
    Loop
    Exit Sub
'lObtainNextCff:
'    ilCffIndex = -1
'    For ilLoop = ilLastCffUsed To UBound(tgCffCntr) - 1 Step 1
'        If tgCffCntr(ilLoop).iStatus = -1 Then
'            'Test Chain
'            ilFound = False
'            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
'                ilTestCff = tgClfCntr(ilClf).iFirstCff
'                If ilTestCff = ilLoop Then
'                    ilFound = True
'                    Exit For
'                End If
'                Do While ilTestCff <> -1
'                    ilTestCff = tgCffCntr(ilTestCff).iNextCff
'                    If ilTestCff = ilLoop Then
'                        ilFound = True
'                        Exit For
'                    End If
'                Loop
'            Next ilClf
'            If Not ilFound Then
'                ilCffIndex = ilLoop
'                ilLastCffUsed = ilLoop
'                Exit For
'            End If
'        End If
'    Next ilLoop
'    If ilCffIndex = -1 Then
'        ilCffIndex = UBound(tgCffCntr)
'        ilLastCffUsed = ilCffIndex
'        ReDim Preserve tgCffCntr(0 To ilCffIndex + 100) As CFFLIST
'        For ilLoop = ilCffIndex + 1 To UBound(tgCffCntr) Step 1
'            tgCffCntr(ilLoop).iStatus = -1 'Not Used
'            tgCffCntr(ilLoop).lRecPos = 0
'            tgCffCntr(ilLoop).iNextCff = -1
'        Next ilLoop
'    End If
'    Return
End Sub

Private Sub mOV2MoveRecToCtrl(tlClf As CLF, ilRowNo As Integer, tlRegionCode() As SORTCODE)
    Dim ilDay As Integer
    Dim ilPreDay As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim slName As String

    For ilDay = 0 To 6 Step 1
        imLnSave(24 + ilDay, ilRowNo) = -1
    Next ilDay
    smLnSave(25, ilRowNo) = ""
    smLnSave(26, ilRowNo) = ""
    'If (Asc(tgSpf.sOverrideOptions) And &H8) = &H8 Then
        ilPreDay = False
        For ilDay = 0 To 6 Step 1
            If (Trim$(tlClf.sPrefDays(ilDay)) <> "N") And (Trim$(tlClf.sPrefDays(ilDay)) <> "") Then
                ilPreDay = True
                Exit For
            End If
        Next ilDay
        If ilPreDay Then
            For ilDay = 0 To 6 Step 1
                If tlClf.sPrefDays(ilDay) = "Y" Then
                    imLnSave(24 + ilDay, ilRowNo) = 0
                Else
                    imLnSave(24 + ilDay, ilRowNo) = 1
                End If
            Next ilDay
        End If
        gUnpackTime tlClf.iPrefStartTime(0), tlClf.iPrefStartTime(1), "A", "1", smLnSave(25, ilRowNo)
        gUnpackTime tlClf.iPrefEndTime(0), tlClf.iPrefEndTime(1), "A", "1", smLnSave(26, ilRowNo)
    'End If
    smLnSave(28, ilRowNo) = ""
    If (Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS Then  'Allocation
        For ilLoop = 0 To UBound(tlRegionCode) - 1 Step 1
            slNameCode = tlRegionCode(ilLoop).sKey    'lbcVehicle.List(ilTest)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            If tlClf.lRafCode = Val(slCode) Then
                ilRet = gParseItem(slNameCode, 1, "\", slName)
                smLnSave(28, ilRowNo) = slName
                Exit For
            End If
        Next ilLoop
    End If
    smLnSave(27, ilRowNo) = ""
    'If (Asc(tgSpf.sOverrideOptions) And &H1) = &H1 Then  'Allocation
    If (Asc(tlClf.sOV2DefinedBits) And LNALLOCATION) = LNALLOCATION Then  'Allocation
        'If tlClf.iPctAllocation > 0 Then
            smLnSave(27, ilRowNo) = gIntToStrDec(tlClf.iPctAllocation, 2)
        'End If
    End If
    smLnSave(24, ilRowNo) = ""
    'If (Asc(tgSpf.sOverrideOptions) And &H2) = &H2 Then  'Acquisition
    If (Asc(tlClf.sOV2DefinedBits) And LNACQUISITION) = LNACQUISITION Then  'Acquisition
        'If tlClf.lAcquisitionCost > 0 Then
            smLnSave(24, ilRowNo) = gLongToStrDec(tlClf.lAcquisitionCost, 2)
        'End If
    End If
    imLnSave(23, ilRowNo) = -1
    'If (Asc(tgSpf.sOverrideOptions) And &H10) = &H10 Then  'Solo
        If tlClf.sSoloAvail = "Y" Then
            imLnSave(23, ilRowNo) = 0
        ElseIf tlClf.sSoloAvail = "N" Then
            imLnSave(23, ilRowNo) = 1
        End If
    'End If
    imLnSave(22, ilRowNo) = -1
    'If (Asc(tgSpf.sOverrideOptions) And &H4) = &H4 Then  '1St
    If (Asc(tlClf.sOV2DefinedBits) And LN1STPOSITION) = LN1STPOSITION Then  '1St
        If tlClf.iPosition = 1 Then
            imLnSave(22, ilRowNo) = 0
        Else
            imLnSave(22, ilRowNo) = 1
        End If
    End If
End Sub


Public Sub mSetPropPriceForNewWks(ilLnRowNo As Integer, tlRcf As RCF)

    Dim slLineType As String
    Dim ilCff As Integer
    Dim ilDays(0 To 6) As Integer
    Dim ilDailySpots(0 To 6) As Integer
    Dim ilLoop As Integer
    Dim llWkNoSpots As Long
    Dim ilDGSave(0 To 3) As Integer
    Dim llWkPrice As Long
    Dim slDate As String
    Dim slStr As String
    Dim ilVefCode As Integer
    Dim ilVpfIndex As Integer
    Dim ilTerminate As Integer

    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType <> "O") And (slLineType <> "A") And ((slLineType <> "H") Or (mGetPkLineType(ilLnRowNo) <> "E")) Then
        ilCff = tgClfCntr(ilLnRowNo - 1).iFirstCff
        Do While ilCff <> -1
            If (tgCffCntr(ilCff).iStatus = 0) Then
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    llWkNoSpots = 0
                    For ilLoop = 0 To 6 Step 1
                        If tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0 Then
                            ilDays(ilLoop) = True
                        Else
                            ilDays(ilLoop) = False
                        End If
                        ilDailySpots(ilLoop) = tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                        llWkNoSpots = llWkNoSpots + tgCffCntr(ilCff).CffRec.iDay(ilLoop)
                    Next ilLoop
                Else
                    For ilLoop = 0 To 6 Step 1
                        If (tgCffCntr(ilCff).CffRec.iDay(ilLoop) > 0) Or (tgCffCntr(ilCff).CffRec.sXDay(ilLoop) = "1") Then
                            ilDays(ilLoop) = True
                        Else
                            ilDays(ilLoop) = False
                        End If
                    Next ilLoop
                    llWkNoSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                gUnpackDate tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), slDate
                mCVehOptIndex ilLnRowNo, ilVefCode, ilVpfIndex, ilTerminate
                llWkPrice = mComputeRCWkPrice(tlRcf.iCode, imLnSave(1, ilLnRowNo), slDate, ilVefCode, ilLnRowNo)
                If llWkPrice > 0 Then
                    slStr = mRCPriceAdjust(tlRcf, llWkPrice, False, ilLnRowNo, ilDGSave(), 0, 0, Val(smLnSave(16, ilLnRowNo)), llWkNoSpots, ilDays(), imLnSave(1, ilLnRowNo))
                    slStr = gRoundStr(slStr, "1.00", 0)    'gLongToStrDec(llWkPrice, 0) '& ".00"
                    llWkPrice = gStrDecToLong(slStr, 0)
                    tgCffCntr(ilCff).CffRec.lPropPrice = llWkPrice
                End If
            End If
            ilCff = tgCffCntr(ilCff).iNextCff
        Loop
    End If
End Sub

Public Function mIsLnGame(ilLnRowNo As Integer) As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilVef As Integer

    ilRet = 0
    On Error GoTo mIsLnGameErr:
    'If (ilLnRowNo < LBound(smLnSave, 2)) Or (ilLnRowNo > UBound(smLnSave, 2)) Then
    If (ilLnRowNo < imLB1Or2) Or (ilLnRowNo > UBound(smLnSave, LINEBOUNDINDEX)) Then
        mIsLnGame = False
        Exit Function
    End If
    gFindMatch smLnSave(1, ilLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) >= 0 Then
        slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey    'lbcVehicle.List(gLastFound(lbcLnVehicle(igTabMapIndex)))
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            ilVef = gBinarySearchVef(CInt(slCode))
            If ilVef <> -1 Then
                If tgMVef(ilVef).sType = "G" Then
                    mIsLnGame = True
                    Exit Function
                End If
            End If
        End If
    End If
    mIsLnGame = False
    Exit Function
mIsLnGameErr:
    mIsLnGame = False
    Exit Function
End Function

Public Sub mPackageInfoToHidden(ilLnRowNo As Integer, ilType As Integer, Optional ilLENINDEX As Integer = -1)
    Dim slLineType As String
    Dim ilPkLineNo As Integer
    Dim ilClf As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilVefCode As Integer
    Dim ilVpfIndex As Integer
    Dim ilLen As Integer
    Dim ilVpf As Integer
    Dim ilTerminate As Integer

    If ilLnRowNo <= 0 Then
        Exit Sub
    End If
    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType = "A") Or (slLineType = "O") Or (slLineType = "E") Then
        If ilType = 8 Then
            ilLen = Val(smLnSave(16, ilLnRowNo))
        End If
        ilPkLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilLoop).iLineNo = ilPkLineNo) Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                             Select Case ilType
                                Case 1  'Island
                                    imLnSave(23, ilClf + 1) = imLnSave(23, ilLnRowNo)
                                Case 2  '1st
                                    imLnSave(22, ilClf + 1) = imLnSave(22, ilLnRowNo)
                                Case 3  'Billboard Open Length
                                    imLnSave(20, ilClf + 1) = imLnSave(20, ilLnRowNo)
                                Case 4  'Billboard Close Length
                                    imLnSave(21, ilClf + 1) = imLnSave(21, ilLnRowNo)
                                Case 5  'Preferred days
                                Case 6  'Preferred times
                                Case 7  'Region
                                    smLnSave(28, ilClf + 1) = smLnSave(28, ilLnRowNo)
                                Case 8  'Spot Length
                                    mCVehOptIndex ilClf + 1, ilVefCode, ilVpfIndex, ilTerminate
                                    If ilVpfIndex <> -1 Then
                                        For ilVpf = LBound(tgVpf(ilVpfIndex).iSLen) To UBound(tgVpf(ilVpfIndex).iSLen) Step 1
                                            If tgVpf(ilVpfIndex).iSLen(ilVpf) = ilLen Then
                                                smLnSave(16, ilClf + 1) = smLnSave(16, ilLnRowNo)
                                                smLnShow(ilLENINDEX, ilClf + 1) = smLnShow(ilLENINDEX, ilLnRowNo)
                                                Exit For
                                            End If
                                        Next ilVpf
                                    End If
                            End Select
                            tgClfCntr(ilClf).sLineChgd = "Y"
                            Exit For
                        End If
                    Next ilClf
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
                Exit For
            End If
        Next ilLoop
    End If
End Sub

Public Sub mGetCurrentWkNoSpots(ilRowNo As Integer, hlChf As Integer, hlClf As Integer)

    Dim ilRet As Integer
    Dim ilVefCode As Integer
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llNowDate As Long
    Dim llMoNowDate As Long
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim llDate As Long
    Dim ilLoop As Integer
    Dim ilVef As Integer
    Dim tlChf As CHF
    Dim tlClf As CLF

    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    If (tgClfCntr(ilRowNo - 1).iStatus > 0) And (tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = -1) And (tgClfCntr(ilRowNo - 1).iLineSchd) Then
        If (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "P") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "A") Or (tgClfCntr(ilRowNo - 1).ClfRec.sSchStatus = "N") Then
            'Find original line
            tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
            tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
            tmChfSrchKey1.iPropVer = tgChfCntr.iPropVer
            ilRet = btrGetGreaterOrEqual(hlChf, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            Do While (ilRet = BTRV_ERR_NONE) And (tlChf.lCntrNo = tgChfCntr.lCntrNo) And (tlChf.sSchStatus <> "F")
                ilRet = btrGetNext(hlChf, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If (ilRet <> BTRV_ERR_NONE) Or (tlChf.lCntrNo <> tgChfCntr.lCntrNo) Then
                tlClf = tgClfCntr(ilRowNo - 1).ClfRec
            Else
                'Find Line
                tmClfSrchKey.lChfCode = tlChf.lCode
                tmClfSrchKey.iLine = tgClfCntr(ilRowNo - 1).ClfRec.iLine
                tmClfSrchKey.iCntRevNo = tlChf.iCntRevNo ' 0 show latest version
                tmClfSrchKey.iPropVer = tlChf.iPropVer ' 0 show latest version
                ilRet = btrGetGreaterOrEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                If (ilRet <> BTRV_ERR_NONE) Or (tlClf.lChfCode <> tlChf.lCode) Or (tlClf.iLine <> tgClfCntr(ilRowNo - 1).ClfRec.iLine) Then
                    tlClf = tgClfCntr(ilRowNo - 1).ClfRec
                End If
            End If
        Else
            tlChf = tgChfCntr
            tlClf = tgClfCntr(ilRowNo - 1).ClfRec
        End If
        If (tlClf.sSchStatus = "F") Then
            If (tlChf.sType = "C") Or ((tlChf.sType = "M") And (tgSpf.sSchdPromo = "Y")) Or ((tlChf.sType = "S") And (tgSpf.sSchdPSA = "Y")) Or ((tlChf.sType = "T") And (tgSpf.sSchdRemnant = "Y")) Then
                llNowDate = gDateValue(Format$(gNow(), "m/d/yy"))
                ilVefCode = tlClf.iVefCode
                gUnpackDateLong tlClf.iStartDate(0), tlClf.iStartDate(1), llStartDate
                gUnpackDateLong tlClf.iEndDate(0), tlClf.iEndDate(1), llEndDate
                If (llStartDate <= llNowDate) And (llEndDate >= llNowDate) And (llStartDate <= llEndDate) Then
                    If (tlClf.sType <> "O") And (tlClf.sType <> "A") And (tlClf.sType <> "E") Then
                        ilVef = gBinarySearchVef(ilVefCode)
                        If ilVef <> -1 Then
                            If tgMVef(ilVef).sType <> "G" Then
                                tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = 0
                                llMoNowDate = llNowDate
                                Do While gWeekDayLong(llMoNowDate) <> 0
                                    llMoNowDate = llMoNowDate - 1
                                Loop
                                ilRet = gObtainCntrSpot(-1, False, tlClf.lChfCode, tlClf.iLine, "O", Format(llMoNowDate, "m/d/yy"), Format(llNowDate, "m/d/yy"), tmSdfExtSort(), tmSdfExt(), 0, True)
                                For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
                                    If (tmSdfExt(ilLoop).sSpotType <> "X") And (tmSdfExt(ilLoop).sSpotType <> "C") And (tmSdfExt(ilLoop).sSpotType <> "O") Then
                                        If tmSdfExt(ilLoop).sSchStatus = "S" Then
                                            tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots + 1
                                        ElseIf (tmSdfExt(ilLoop).sSchStatus = "O") Or (tmSdfExt(ilLoop).sSchStatus = "G") Then
                                            gUnpackDateLong tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), llDate
                                            If llDate <= llNowDate Then
                                                tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots = tgClfCntr(ilRowNo - 1).iMonThruToDaysSpots + 1
                                            End If
                                        End If
                                    End If
                                Next ilLoop
                                Erase tmSdfExtSort
                                Erase tmSdfExt
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If
End Sub

Public Function mRvfExistForCntr(hlRvf As Integer, hlPhf As Integer) As Integer

'   tgChfCntr(I)- CHF Record
'   llInvNo(O) Invoice Number
'   ilAirTimeOrNTR(I)- 0=Air Time (or Rep); 1=NTR
'   ilRet:  True if RVF or PHF matching record exist;  False if no matching record exist
'
    Dim ilFound As Integer
    Dim ilRet As Integer

    ilFound = False
    imRvfRecLen = Len(tmRvf)
    tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
    tmRvfSrchKey4.iTranDate(0) = 0
    tmRvfSrchKey4.iTranDate(1) = 0
    ilRet = btrGetGreaterOrEqual(hlRvf, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.lCntrNo = tgChfCntr.lCntrNo)
        If tmRvf.sTranType = "IN" Then
            If (tmRvf.sCashTrade = "C") Or (tmRvf.sCashTrade = "T") Then
                ilFound = True
                Exit Do
            End If
        End If
        ilRet = btrGetNext(hlRvf, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    If (Not ilFound) Then
        tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
        tmRvfSrchKey4.iTranDate(0) = 0
        tmRvfSrchKey4.iTranDate(1) = 0
        ilRet = btrGetGreaterOrEqual(hlPhf, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.lCntrNo = tgChfCntr.lCntrNo)
            If tmRvf.sTranType = "IN" Then
                If (tmRvf.sCashTrade = "C") Or (tmRvf.sCashTrade = "T") Then
                    ilFound = True
                    Exit Do
                End If
            End If
            ilRet = btrGetNext(hlPhf, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
    End If
    mRvfExistForCntr = ilFound
End Function

Public Sub mGetInstallAdjustments(hlAgf As Integer, hlRvf As Integer, hlPhf As Integer)
'   tgChfCntr(I)- CHF Record
'   llInvNo(O) Invoice Number
'   ilAirTimeOrNTR(I)- 0=Air Time (or Rep); 1=NTR
'   ilRet:  True if RVF or PHF matching record exist;  False if no matching record exist
'
    Dim ilFound As Integer
    Dim ilRet As Integer
    Dim slGross As String
    Dim llGross As Long
    Dim slNet As String
    Dim llNet As Long
    Dim llRvfTypeI_Adj As Long          'Sum of AN and W- for Install contracts (rvfType = "I")
    Dim llRvfTypeA_Adj As Long          'Sum of AN and W- for Install contracts (rvfType = "A")

    ilFound = False
    llRvfTypeI_Adj = 0
    llRvfTypeA_Adj = 0
    smRvfTypeI_Adj = "0.00"
    smRvfTypeA_Adj = "0.00"
    If tgChfCntr.sInstallDefined <> "Y" Then
        Exit Sub
    End If
    imAgfRecLen = Len(tmAgf) 'btrRecordLength(hmAgf)    'Get Cff size
    If tgChfCntr.iAgfCode > 0 Then
        tmAgfSrchKey.iCode = tgChfCntr.iAgfCode
        ilRet = btrGetEqual(hlAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    End If
    imRvfRecLen = Len(tmRvf)
    tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
    tmRvfSrchKey4.iTranDate(0) = 0
    tmRvfSrchKey4.iTranDate(1) = 0
    ilRet = btrGetGreaterOrEqual(hlRvf, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.lCntrNo = tgChfCntr.lCntrNo)
        If tmRvf.sType = "I" Then
            llGross = 0
            If (tmRvf.sTranType = "AN") Then
                gPDNToStr tmRvf.sGross, 2, slGross
                llGross = gStrDecToLong(slGross, 2)
                If llGross = 0 Then
                    gPDNToStr tmRvf.sNet, 2, slNet
                    If tgChfCntr.iAgfCode > 0 Then
                        If tmRvf.sCashTrade = "C" Then
                            slGross = gDivStr(gMulStr(slNet, "100"), gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)))
                            llGross = gStrDecToLong(slGross, 2)
                        Else
                            If tgChfCntr.sAgyCTrade = "Y" Then
                                llGross = llNet / (10000 - tmAgf.iComm)
                            Else
                                llGross = llNet
                            End If
                        End If
                    Else
                        llGross = llNet
                    End If
                End If
            ElseIf (Left$(tmRvf.sTranType, 1) = "W") Then
                gPDNToStr tmRvf.sNet, 2, slNet
                If tgChfCntr.iAgfCode > 0 Then
                    If tmRvf.sCashTrade = "C" Then
                        slGross = gDivStr(gMulStr(slNet, "100"), gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)))
                        llGross = gStrDecToLong(slGross, 2)
                    Else
                        If tgChfCntr.sAgyCTrade = "Y" Then
                            llGross = llNet / (10000 - tmAgf.iComm)
                        Else
                            llGross = llNet
                        End If
                    End If
                Else
                    llGross = llNet
                End If
            End If
            llRvfTypeI_Adj = llRvfTypeI_Adj + llGross
        End If
        ilRet = btrGetNext(hlRvf, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    tmRvfSrchKey4.lCntrNo = tgChfCntr.lCntrNo
    tmRvfSrchKey4.iTranDate(0) = 0
    tmRvfSrchKey4.iTranDate(1) = 0
    ilRet = btrGetGreaterOrEqual(hlPhf, tmRvf, imRvfRecLen, tmRvfSrchKey4, INDEXKEY4, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmRvf.lCntrNo = tgChfCntr.lCntrNo)
        If (tmRvf.sType = "I") Or (tmRvf.sType = "A") Then
            llGross = 0
            If (tmRvf.sTranType = "AN") Then
                gPDNToStr tmRvf.sGross, 2, slGross
                llGross = gStrDecToLong(slGross, 2)
                If llGross = 0 Then
                    gPDNToStr tmRvf.sNet, 2, slNet
                    If tgChfCntr.iAgfCode > 0 Then
                        If tmRvf.sCashTrade = "C" Then
                            slGross = gDivStr(gMulStr(slNet, "100"), gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)))
                            llGross = gStrDecToLong(slGross, 2)
                        Else
                            If tgChfCntr.sAgyCTrade = "Y" Then
                                llGross = llNet / (10000 - tmAgf.iComm)
                            Else
                                llGross = llNet
                            End If
                        End If
                    Else
                        llGross = llNet
                    End If
                End If
            ElseIf (Left$(tmRvf.sTranType, 1) = "W") Then
                gPDNToStr tmRvf.sNet, 2, slNet
                If tgChfCntr.iAgfCode > 0 Then
                    If tmRvf.sCashTrade = "C" Then
                        slGross = gDivStr(gMulStr(slNet, "100"), gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)))
                        llGross = gStrDecToLong(slGross, 2)
                    Else
                        If tgChfCntr.sAgyCTrade = "Y" Then
                            llGross = llNet / (10000 - tmAgf.iComm)
                        Else
                            llGross = llNet
                        End If
                    End If
                Else
                    llGross = llNet
                End If
            End If
            If (tmRvf.sType = "I") Then
                llRvfTypeI_Adj = llRvfTypeI_Adj + llGross
            ElseIf tmRvf.sType = "A" Then
                llRvfTypeA_Adj = llRvfTypeA_Adj + llGross
            End If
        End If
        ilRet = btrGetNext(hlPhf, tmRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    smRvfTypeI_Adj = gLongToStrDec(llRvfTypeI_Adj, 2)
    smRvfTypeA_Adj = gLongToStrDec(llRvfTypeA_Adj, 2)
End Sub

Public Function mTestFBBalance(slAirNTRTotal As String) As Integer

    Dim ilLoop As Integer
    Dim ilInstallmentDefined As Integer
    Dim ilIndex As Integer
    Dim llOrderDollars As Long
    Dim llBillDollars As Long
    Dim ilVef As Integer
    Dim ilRet As Integer
    Dim ilAirTimeNTRConflict As Integer
    '12/18/17: Break out NTR separate from Air Time
    Dim slVefCode As String
    Dim slMnfItem As String

    mTestFBBalance = True
    If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) <> INSTALLMENT Then
        Exit Function
    End If
    ilInstallmentDefined = False
    For ilLoop = LBound(tgFBSbf) To UBound(tgFBSbf) - 1 Step 1
        If (tgFBSbf(ilLoop).iStatus >= 0) And (tgFBSbf(ilLoop).iStatus <= 1) Then
            ilInstallmentDefined = True
            Exit For
        End If
    Next ilLoop
    If Not ilInstallmentDefined Then
        Exit Function
    End If
    ilAirTimeNTRConflict = mAirTimeNTRConflict()
    If ilAirTimeNTRConflict > 0 Then
        If ilAirTimeNTRConflict = 1 Then
            ilRet = MsgBox("For Installment: Air Time and NTR Agency Commission in Conflict", vbExclamation + vbOKOnly, "Conflict")
        ElseIf ilAirTimeNTRConflict = 2 Then
            ilRet = MsgBox("For Installment:Agency or Direct Advertiser and NTR Tax in Conflict", vbExclamation + vbOKOnly, "Conflict")
        Else
            ilRet = MsgBox("For Installment:Air Time and NTR Agency Commission in Conflict plus Agency or Direct Advertiser and NTR Tax in Conflict", vbExclamation + vbOKOnly, "Conflict")
        End If
        mTestFBBalance = False
        Exit Function
    End If
    If mAnyRepWithCntr() Then
        ilRet = MsgBox("For Installment: Air Time or NTR referencing Rep Vehicle not Permitted", vbExclamation + vbOKOnly, "Conflict")
        mTestFBBalance = False
        Exit Function
    End If
    'Compare each vehicle total
    mInitInstallBill
    mMoveIBRecToCtrl tgIBSbf()
    mMoveFBRecToCtrl tgFBSbf()
    mInitInstallVeh
    '12/18/17: Break out NTR separate from Air Time
    For ilIndex = 0 To UBound(tmInstallVehInfo) - 1 Step 1
        slVefCode = Trim$(str$(tmInstallVehInfo(ilIndex).iVefCode))
        Do While Len(slVefCode) < 5
            slVefCode = "0" + slVefCode
        Loop
        slMnfItem = Trim$(str$(tmInstallVehInfo(ilIndex).iMnfItem))
        Do While Len(slMnfItem) < 5
            slMnfItem = "0" + slMnfItem
        Loop
        tmInstallVehInfo(ilIndex).sKey = slVefCode + slMnfItem
    Next ilIndex
    If UBound(tmInstallVehInfo) > 1 Then
        '12/18/17: Break out NTR separate from Air Time
        'ArraySortTyp fnAV(tmInstallVehInfo(), 0), UBound(tmInstallVehInfo) - 1, 0, LenB(tmInstallVehInfo(0)), 0, -1, 0
        ArraySortTyp fnAV(tmInstallVehInfo(), 0), UBound(tmInstallVehInfo) - 1, 0, LenB(tmInstallVehInfo(0)), 0, LenB(tmInstallVehInfo(0).sKey), 0
    End If
    
    ilIndex = 0
    llOrderDollars = 0
    llBillDollars = 0
    '12/18/17: Break out NTR separate from Air Time
    'tmInstallVehInfo(UBound(tmInstallVehInfo)).iVefCode = 0
    tmInstallVehInfo(UBound(tmInstallVehInfo)).sKey = "~"
    Do While ilIndex < UBound(tmInstallVehInfo)
        llOrderDollars = llOrderDollars + tmInstallVehInfo(ilIndex).lOrderedDollars
        llBillDollars = llBillDollars + tmInstallVehInfo(ilIndex).lTotalBillDollars
        '12/18/17: Break out NTR separate from Air Time
        'If tmInstallVehInfo(ilIndex).iVefCode <> tmInstallVehInfo(ilIndex + 1).iVefCode Then
        If tmInstallVehInfo(ilIndex).sKey <> tmInstallVehInfo(ilIndex + 1).sKey Then
            If llBillDollars <> llOrderDollars Then
                mTestFBBalance = False
                ilVef = gBinarySearchVef(tmInstallVehInfo(ilIndex).iVefCode)
                If ilVef <> -1 Then
                    ilRet = MsgBox("Installment Amount " & gLongToStrDec(llBillDollars, 2) & " Not in Balance with Contract Amount " & gLongToStrDec(llOrderDollars, 2) & " for " & Trim$(tgMVef(ilVef).sName) & ", Continue with Installment Check", vbYesNo + vbQuestion, "Installment")
                Else
                    ilRet = MsgBox("Installment Amount Not in Balance with Contract Amount", vbOKOnly + vbExclamation, "Installment")
                    ilRet = vbNo
                End If
                If ilRet = vbNo Then
                    Exit Function
                End If
            Else
                llOrderDollars = 0
                llBillDollars = 0
            End If
        End If
        ilIndex = ilIndex + 1
    Loop
End Function

Public Sub mInitInstallBill()

    Dim slLineType As String
    Dim ilClf As Integer
    Dim slCode As String
    Dim ilTest As Integer
    Dim slName As String
    Dim ilRet As Integer
    Dim ilUpper As Integer
    Dim ilFirstIndex As Integer
    Dim ilCff As Integer
    Dim slDate As String
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llDate As Long
    Dim llSpotPrice As Long
    Dim llDollars As Long
    Dim ilSpots As Integer
    Dim ilInstall As Integer
    Dim ilFound As Integer
    Dim ilVefCode As Integer
    Dim slNameCode As String


    ReDim tmInstallBillInfo(0 To 0) As INSTALLBILLINFO
    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        slLineType = mGetLineType(ilClf + 1)
        'Ignore package lines
        If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
            If ((tgClfCntr(ilClf).iStatus = 0) Or (tgClfCntr(ilClf).iStatus = 1)) And (Not tgClfCntr(ilClf).iCancel) Then
                For ilTest = 0 To UBound(tmVehicleCode) - 1 Step 1  'Contract.lbcVehicle.ListCount - 1 Step 1
                    slNameCode = tmVehicleCode(ilTest).sKey
                    ilRet = gParseItem(slNameCode, 1, "\", slName)
                    ilRet = gParseItem(slNameCode, 3, "|", slName)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVefCode = Val(slCode)
                    If tgClfCntr(ilClf).ClfRec.iVefCode = ilVefCode Then
                        ilFirstIndex = -1
                        ilCff = tgClfCntr(ilClf).iFirstCff
                        Do While ilCff <> -1
                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llStartDate    'Week Start date
                                gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llEndDate    'Week Start date
                                For llDate = llStartDate To llEndDate Step 7
                                    slDate = Format$(llDate, "m/d/yy")
                                    If (tgChfCntr.sBillCycle = "C") Then    'Or (tgChfCntr.sBillCycle = "D") Then
                                        slDate = gObtainEndCal(slDate)
                                    ElseIf tgChfCntr.sBillCycle = "W" Then
                                        slDate = gObtainNextSunday(slDate)
                                    Else
                                        slDate = gObtainEndStd(slDate)
                                    End If
                                    ilSpots = mGetFlightSpots(ilClf + 1, llDate, llSpotPrice)
                                    llDollars = ilSpots * llSpotPrice
                                    ilFound = False
                                    For ilInstall = LBound(tmInstallBillInfo) To UBound(tmInstallBillInfo) - 1 Step 1
                                        If tmInstallBillInfo(ilInstall).iVefCode = ilVefCode Then
                                            If gDateValue(slDate) = tmInstallBillInfo(ilInstall).lBillDate Then
                                                tmInstallBillInfo(ilInstall).lAirOrderedDollars = tmInstallBillInfo(ilInstall).lAirOrderedDollars + llDollars
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    Next ilInstall
                                    If Not ilFound Then
                                        ilUpper = UBound(tmInstallBillInfo)
                                        tmInstallBillInfo(ilUpper).iVefCode = Val(slCode)
                                        tmInstallBillInfo(ilUpper).sVehName = slName
                                        tmInstallBillInfo(ilUpper).lAirOrderedDollars = llDollars
                                        tmInstallBillInfo(ilUpper).lNTROrderedDollars = 0
                                        tmInstallBillInfo(ilUpper).lBillDate = gDateValue(slDate)
                                        tmInstallBillInfo(ilUpper).lBillDollars = 0
                                        tmInstallBillInfo(ilUpper).sBilledFlag = "N"
                                        tmInstallBillInfo(ilUpper).sType = "O"
                                        '12/18/17: Break out NTR separate from Air Time
                                        tmInstallBillInfo(ilUpper).iMnfItem = 0
                                        ReDim Preserve tmInstallBillInfo(0 To ilUpper + 1) As INSTALLBILLINFO
                                    End If
                                Next llDate
                            End If
                            ilCff = tgCffCntr(ilCff).iNextCff
                        Loop
                        Exit For
                    End If
                Next ilTest
            End If
        End If
    Next ilClf
End Sub

Public Sub mMoveFBRecToCtrl(tlFBSbf() As SBFLIST)

'
'   mMoveFBRecToCtrl
'   Where:
'
    Dim ilLoop As Integer
    Dim ilTest As Integer
    Dim llDate As Long
    Dim ilFound As Integer
    Dim ilUpper As Integer
    Dim ilVef As Integer
    '12/18/17: Add separation of NTR from AirTime
    Dim hlMnf As Integer
    Dim ilMnfRecLen As Integer     'Record length
    Dim tlMnf As MNF
    Dim tlMnfSrchKey As INTKEY0
    Dim ilRet As Integer
    
    '12/18/17: Break out NTR separate from Air Time
    bgBreakoutNTR = False
    For ilLoop = 0 To UBound(tlFBSbf) - 1 Step 1
        If tlFBSbf(ilLoop).SbfRec.iMnfItem > 0 Then
            bgBreakoutNTR = True
            hlMnf = CBtrvTable(ONEHANDLE)
            ilRet = btrOpen(hlMnf, "", sgDBPath & "Mnf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
            ilMnfRecLen = Len(tlMnf)  'btrRecordLength(hlMnf)  'Get and save record length
            Exit For
        End If
    Next ilLoop
    For ilLoop = 0 To UBound(tlFBSbf) - 1 Step 1
        If (tlFBSbf(ilLoop).iStatus >= 0) And (tlFBSbf(ilLoop).iStatus <= 1) Then
            ilFound = False
            gUnpackDateLong tlFBSbf(ilLoop).SbfRec.iDate(0), tlFBSbf(ilLoop).SbfRec.iDate(1), llDate
            For ilTest = LBound(tmInstallBillInfo) To UBound(tmInstallBillInfo) - 1 Step 1
                If tlFBSbf(ilLoop).SbfRec.iBillVefCode = tmInstallBillInfo(ilTest).iVefCode Then
                    '12/18/17: Break out NTR separate from Air Time
                    If (Not bgBreakoutNTR) Or ((bgBreakoutNTR) And (tlFBSbf(ilLoop).SbfRec.iMnfItem = tmInstallBillInfo(ilTest).iMnfItem)) Then
                        If llDate = tmInstallBillInfo(ilTest).lBillDate Then
                            ilFound = True
                            tmInstallBillInfo(ilTest).lBillDollars = tmInstallBillInfo(ilTest).lBillDollars + tlFBSbf(ilLoop).SbfRec.lGross
                            If tlFBSbf(ilLoop).SbfRec.sBilled = "Y" Then
                                If tmInstallBillInfo(ilTest).sType <> "B" Then
                                    If tmInstallBillInfo(ilTest).sType = "O" Then
                                        tmInstallBillInfo(ilTest).sType = "B"
                                    Else
                                        tmInstallBillInfo(ilTest).sType = "I"
                                    End If
                                End If
                                tmInstallBillInfo(ilTest).sBilledFlag = tlFBSbf(ilLoop).SbfRec.sBilled
                            End If
                        End If
                    End If
                End If
            Next ilTest
            If Not ilFound Then
                ilUpper = UBound(tmInstallBillInfo)
                tmInstallBillInfo(ilUpper).iVefCode = tlFBSbf(ilLoop).SbfRec.iBillVefCode
                ilVef = gBinarySearchVef(tmInstallBillInfo(ilUpper).iVefCode)
                If ilVef <> -1 Then
                    tmInstallBillInfo(ilUpper).sVehName = tgMVef(ilVef).sName
                    tmInstallBillInfo(ilUpper).lAirOrderedDollars = 0
                    tmInstallBillInfo(ilUpper).lNTROrderedDollars = 0
                    tmInstallBillInfo(ilUpper).lBillDate = llDate
                    If tlFBSbf(ilLoop).SbfRec.sBilled = "Y" Then
                        tmInstallBillInfo(ilUpper).lBillDollars = tlFBSbf(ilLoop).SbfRec.lGross
                        tmInstallBillInfo(ilUpper).sType = "I"
                    Else
                        tmInstallBillInfo(ilUpper).lBillDollars = tlFBSbf(ilLoop).SbfRec.lGross
                        tmInstallBillInfo(ilUpper).sType = "N"
                    End If
                    tmInstallBillInfo(ilUpper).sBilledFlag = tlFBSbf(ilLoop).SbfRec.sBilled
                    '12/18/17: Break out NTR separate from Air Time
                    tmInstallBillInfo(ilUpper).iMnfItem = 0
                    tmInstallBillInfo(ilUpper).sMnfItem = ""
                    If bgBreakoutNTR Then
                        tmInstallBillInfo(ilUpper).iMnfItem = tlFBSbf(ilLoop).SbfRec.iMnfItem
                        tlMnfSrchKey.iCode = tmInstallBillInfo(ilUpper).iMnfItem
                        ilRet = btrGetEqual(hlMnf, tlMnf, ilMnfRecLen, tlMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet = BTRV_ERR_NONE Then
                            tmInstallBillInfo(ilUpper).sMnfItem = Trim$(tlMnf.sName)
                        End If
                    End If
                    ReDim Preserve tmInstallBillInfo(0 To ilUpper + 1) As INSTALLBILLINFO
                End If
            End If
        End If
    Next ilLoop
    '12/18/17: Add separation of NTR from AirTime
    If bgBreakoutNTR Then
        ilRet = btrClose(hlMnf)
        btrDestroy hlMnf
    End If
    Exit Sub
End Sub

Private Sub mMoveIBRecToCtrl(tlIBSbf() As SBFLIST)

'
'   mMoveIBRecToCtrl
'   Where:
'
    Dim ilLoop As Integer
    Dim ilTest As Integer
    Dim llDate As Long
    Dim ilFound As Integer
    Dim ilUpper As Integer
    Dim ilVef As Integer
    '12/18/17: Add separation of NTR from AirTime
    Dim hlMnf As Integer
    Dim ilMnfRecLen As Integer     'Record length
    Dim tlMnf As MNF
    Dim tlMnfSrchKey As INTKEY0
    Dim ilRet As Integer
    
    '12/18/17: Add separation of NTR from AirTime
    If bgBreakoutNTR Then
        hlMnf = CBtrvTable(ONEHANDLE)
        ilRet = btrOpen(hlMnf, "", sgDBPath & "Mnf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
        ilMnfRecLen = Len(tlMnf)  'btrRecordLength(hlMnf)  'Get and save record length
    End If
    For ilLoop = 0 To UBound(tlIBSbf) - 1 Step 1
        If tgIBSbf(ilLoop).iStatus >= 0 Then
            ilFound = False
            For ilTest = LBound(tmInstallBillInfo) To UBound(tmInstallBillInfo) - 1 Step 1
                gUnpackDateLong tlIBSbf(ilLoop).SbfRec.iDate(0), tlIBSbf(ilLoop).SbfRec.iDate(1), llDate
                If tlIBSbf(ilLoop).SbfRec.iBillVefCode = tmInstallBillInfo(ilTest).iVefCode Then
                    '12/18/17: Break out NTR separate from Air Time
                    If (Not bgBreakoutNTR) Or (bgBreakoutNTR And (tlIBSbf(ilLoop).SbfRec.iMnfItem = tmInstallBillInfo(ilTest).iMnfItem)) Then
                        If llDate = tmInstallBillInfo(ilTest).lBillDate Then
                            ilFound = True
                            tmInstallBillInfo(ilTest).lNTROrderedDollars = tmInstallBillInfo(ilTest).lNTROrderedDollars + tlIBSbf(ilLoop).SbfRec.iNoItems * tlIBSbf(ilLoop).SbfRec.lGross
                        End If
                    End If
                End If
            Next ilTest
            If Not ilFound Then
                ilUpper = UBound(tmInstallBillInfo)
                tmInstallBillInfo(ilUpper).iVefCode = tlIBSbf(ilLoop).SbfRec.iBillVefCode
                ilVef = gBinarySearchVef(tmInstallBillInfo(ilUpper).iVefCode)
                If ilVef <> -1 Then
                    tmInstallBillInfo(ilUpper).sVehName = tgMVef(ilVef).sName
                    tmInstallBillInfo(ilUpper).lAirOrderedDollars = 0
                    tmInstallBillInfo(ilUpper).lNTROrderedDollars = tlIBSbf(ilLoop).SbfRec.iNoItems * tlIBSbf(ilLoop).SbfRec.lGross
                    tmInstallBillInfo(ilUpper).lBillDate = llDate
                    If tlIBSbf(ilLoop).SbfRec.sBilled = "Y" Then
                        tmInstallBillInfo(ilUpper).lBillDollars = 0
                        tmInstallBillInfo(ilUpper).sType = "I"
                    Else
                        tmInstallBillInfo(ilUpper).lBillDollars = 0
                        tmInstallBillInfo(ilUpper).sType = "N"
                    End If
                    tmInstallBillInfo(ilUpper).sBilledFlag = tlIBSbf(ilLoop).SbfRec.sBilled
                    tmInstallBillInfo(ilTest).iMnfItem = 0
                    tmInstallBillInfo(ilTest).sMnfItem = ""
                    If bgBreakoutNTR Then
                        tmInstallBillInfo(ilTest).iMnfItem = tlIBSbf(ilLoop).SbfRec.iMnfItem
                        tlMnfSrchKey.iCode = tmInstallBillInfo(ilUpper).iMnfItem
                        ilRet = btrGetEqual(hlMnf, tlMnf, ilMnfRecLen, tlMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        If ilRet = BTRV_ERR_NONE Then
                            tmInstallBillInfo(ilUpper).sMnfItem = Trim$(tlMnf.sName)
                        End If
                    End If
                    ReDim Preserve tmInstallBillInfo(0 To ilUpper + 1) As INSTALLBILLINFO
                End If
            End If
        End If
    Next ilLoop
    '12/18/17: Add separation of NTR from AirTime
    If bgBreakoutNTR Then
        ilRet = btrClose(hlMnf)
        btrDestroy hlMnf
    End If
    Exit Sub
End Sub

Public Sub mInitInstallVeh()
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilVef As Integer
    ReDim tmInstallVehInfo(0 To 0) As INSTALLVEHINFO
    For ilLoop = LBound(tmInstallBillInfo) To UBound(tmInstallBillInfo) - 1 Step 1
        ilFound = False
        For ilVef = 0 To UBound(tmInstallVehInfo) - 1 Step 1
            If tmInstallVehInfo(ilVef).iVefCode = tmInstallBillInfo(ilLoop).iVefCode Then
                '12/18/17: Break out NTR separate from Air Time
                If (Not bgBreakoutNTR) Or (bgBreakoutNTR And ((tmInstallBillInfo(ilLoop).iMnfItem = tmInstallVehInfo(ilVef).iMnfItem))) Then
                    ilFound = True
                    tmInstallVehInfo(ilVef).lOrderedDollars = tmInstallVehInfo(ilVef).lOrderedDollars + tmInstallBillInfo(ilLoop).lAirOrderedDollars + tmInstallBillInfo(ilLoop).lNTROrderedDollars
                    tmInstallVehInfo(ilVef).lTotalBillDollars = tmInstallVehInfo(ilVef).lTotalBillDollars + tmInstallBillInfo(ilLoop).lBillDollars
                    If tmInstallBillInfo(ilLoop).sBilledFlag = "Y" Then
                        tmInstallVehInfo(ilVef).lBilledDollars = tmInstallVehInfo(ilVef).lBilledDollars + tmInstallBillInfo(ilLoop).lBillDollars
                    End If
                    Exit For
                End If
            End If
        Next ilVef
        If Not ilFound Then
            ilVef = UBound(tmInstallVehInfo)
            tmInstallVehInfo(ilVef).iVefCode = tmInstallBillInfo(ilLoop).iVefCode
            tmInstallVehInfo(ilVef).lOrderedDollars = tmInstallBillInfo(ilLoop).lAirOrderedDollars + tmInstallBillInfo(ilLoop).lNTROrderedDollars
            tmInstallVehInfo(ilVef).lTotalBillDollars = tmInstallBillInfo(ilLoop).lBillDollars
            If tmInstallBillInfo(ilLoop).sBilledFlag = "Y" Then
                tmInstallVehInfo(ilVef).lBilledDollars = tmInstallBillInfo(ilLoop).lBillDollars
            Else
                tmInstallVehInfo(ilVef).lBilledDollars = 0
            End If
            '12/18/17: Break out NTR separate from Air Time
            tmInstallVehInfo(ilVef).iMnfItem = 0
            If bgBreakoutNTR And tmInstallBillInfo(ilLoop).iMnfItem > 0 Then
                tmInstallVehInfo(ilVef).iMnfItem = tmInstallBillInfo(ilLoop).iMnfItem
            End If
            ReDim Preserve tmInstallVehInfo(0 To UBound(tmInstallVehInfo) + 1) As INSTALLVEHINFO
        End If
    Next ilLoop
End Sub

Public Sub mGetNTRDateRange(llSNTRDate As Long, llENTRDate As Long)
    Dim ilLoop As Integer
    Dim llDate As Long

    llSNTRDate = 0
    llENTRDate = 0

    For ilLoop = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
        If tgIBSbf(ilLoop).iStatus >= 0 Then
            If tgIBSbf(ilLoop).iStatus = 0 Then 'New selected
                tgChfCntr.sNTRDefined = "Y"
                gUnpackDateLong tgIBSbf(ilLoop).SbfRec.iDate(0), tgIBSbf(ilLoop).SbfRec.iDate(1), llDate
                If llSNTRDate = 0 Then
                    llSNTRDate = llDate
                    llENTRDate = llDate
                Else
                    If llDate < llSNTRDate Then
                        llSNTRDate = llDate
                    End If
                    If llDate > llENTRDate Then
                        llENTRDate = llDate
                    End If
                End If
            Else 'Old record-Update
                If tgIBSbf(ilLoop).iStatus = 2 Then
                    '1-14-05 keep the NTR flag set so that the contract can be saved without lines
                    tgChfCntr.sNTRDefined = "Y"
                Else
                    tgChfCntr.sNTRDefined = "Y"
                    gUnpackDateLong tgIBSbf(ilLoop).SbfRec.iDate(0), tgIBSbf(ilLoop).SbfRec.iDate(1), llDate
                    If llSNTRDate = 0 Then
                        llSNTRDate = llDate
                        llENTRDate = llDate
                    Else
                        If llDate < llSNTRDate Then
                            llSNTRDate = llDate
                        End If
                        If llDate > llENTRDate Then
                            llENTRDate = llDate
                        End If
                    End If
                End If
            End If
        End If
    Next ilLoop
End Sub

Public Sub mGetInstallmentDateRange(llSInstallDate As Long, llEInstallDate As Long)
    Dim ilLoop As Integer
    Dim llDate As Long

    llSInstallDate = 0
    llEInstallDate = 0
    If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) = INSTALLMENT Then
        For ilLoop = LBound(tgFBSbf) To UBound(tgFBSbf) - 1 Step 1
            If (tgFBSbf(ilLoop).iStatus >= 0) Then
                If tgFBSbf(ilLoop).iStatus = 0 Then 'New selected
                    gUnpackDateLong tgFBSbf(ilLoop).SbfRec.iDate(0), tgFBSbf(ilLoop).SbfRec.iDate(1), llDate
                    If llSInstallDate = 0 Then
                        llSInstallDate = llDate
                        llEInstallDate = llDate
                    Else
                        If llDate < llSInstallDate Then
                            llSInstallDate = llDate
                        End If
                        If llDate > llEInstallDate Then
                            llEInstallDate = llDate
                        End If
                    End If
                Else 'Old record-Update
                    If tgFBSbf(ilLoop).iStatus = 2 Then
                    Else
                        gUnpackDateLong tgFBSbf(ilLoop).SbfRec.iDate(0), tgFBSbf(ilLoop).SbfRec.iDate(1), llDate
                        If llSInstallDate = 0 Then
                            llSInstallDate = llDate
                            llEInstallDate = llDate
                        Else
                            If llDate < llSInstallDate Then
                                llSInstallDate = llDate
                            End If
                            If llDate > llEInstallDate Then
                                llEInstallDate = llDate
                            End If
                        End If
                    End If
                End If
            End If
        Next ilLoop
    End If
End Sub

Public Function mAirTimeNTRConflict() As Integer
'
'mAirTimeNTRConflict(O): 0= Ok; 1=Commission in conflict; 2=Tax in Conflict; 3=Both in conflict
'
    Dim ilLoop As Integer
    Dim ilOk As Integer
    Dim ilTrfAgyAdvt As Integer
    Dim ilAdfCode As Integer
    Dim ilAgfCode As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilCommPct As Integer        'agency commission %
    Dim ilAgfInx As Integer         'agency inx into tgcommagf array

    mAirTimeNTRConflict = 0
    If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) <> INSTALLMENT Then
        Exit Function
    End If
    If UBound(tgFBSbf) <= LBound(tgFBSbf) Then
        Exit Function
    End If
    If UBound(tgIBSbf) <= LBound(tgIBSbf) Then
        Exit Function
    End If
    If UBound(tgClfCntr) <= LBound(tgClfCntr) Then
        Exit Function
    End If
    If Contract.lbcAdvt.ListIndex >= 1 Then
        slNameCode = tmCntAdvertiser(Contract.lbcAdvt.ListIndex - 1).sKey  'Traffic!lbcAdvertiser.List(lbcAdvt.ListIndex - 1)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        slCode = Trim$(slCode)
        ilAdfCode = CInt(slCode)
    Else
        ilAdfCode = 0
    End If
    ilCommPct = 0                       '10-10-18  sometimes the agency comm can be set to other than 15%
    If Contract.lbcAgency.ListIndex >= 2 Then
        slNameCode = tmCntAgency(Contract.lbcAgency.ListIndex - 2).sKey    'Traffic!lbcAgency.List(lbcAgency.ListIndex - 2)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        slCode = Trim$(slCode)
        ilAgfCode = CInt(slCode)
        ilAgfInx = gBinarySearchAgf(ilAgfCode)
        If ilAgfInx >= 0 Then              '10-10-18
            ilCommPct = tgCommAgf(ilAgfInx).iCommPct
        End If
    Else
        ilAgfCode = 0
    End If
    ilTrfAgyAdvt = gGetTrfIndexForAgyAdvt(ilAdfCode, ilAgfCode)
    ilOk = 0
    For ilLoop = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
        '12/18/17: Bypass those records that are removed
        If tgIBSbf(ilLoop).iStatus >= 0 And tgIBSbf(ilLoop).iStatus < 2 Then
            If tgIBSbf(ilLoop).SbfRec.sAgyComm = "Y" Then
                If ilAgfCode = 0 Then
                    If ilOk = 0 Then
                        ilOk = 1
                    ElseIf ilOk = 2 Then
                        ilOk = 3
                    End If
                End If
            Else
                'If ilAgfCode > 0 Then
                If ilCommPct > 0 Then           '10-10-18 sometimes agy comm can be 0%, the presence of agency doesnt always reflect a comm
                    If ilOk = 0 Then
                        ilOk = 1
                    ElseIf ilOk = 2 Then
                        ilOk = 3
                    End If
                End If
            End If
            If ((Asc(tgSpf.sUsingFeatures3) And TAXONAIRTIME) = TAXONAIRTIME) Or ((Asc(tgSpf.sUsingFeatures3) And TAXONNTR) = TAXONNTR) Then
                If tgIBSbf(ilLoop).SbfRec.iTrfCode > 0 Then
                    If ilOk = 0 Then
                        ilOk = 2
                    ElseIf ilOk = 1 Then
                        ilOk = 3
                    End If
                Else
                    'Check Advertiser to see if taxable
                    If ilTrfAgyAdvt > 0 Then
                        If ilOk = 0 Then
                            ilOk = 2
                        ElseIf ilOk = 1 Then
                            ilOk = 3
                        End If
                    End If
                End If
            End If
        End If
    Next ilLoop
    mAirTimeNTRConflict = ilOk
End Function


Public Function mAnyRepWithCntr() As Integer
    Dim ilLoop As Integer
    Dim ilVef As Integer

    mAnyRepWithCntr = False
    If sgRepDef = "N" Then
        Exit Function
    End If
    On Error GoTo mAnyRepWithCntrErr:
    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If tgClfCntr(ilLoop).iStatus >= 0 Then
            ilVef = gBinarySearchVef(tgClfCntr(ilLoop).ClfRec.iVefCode)
            If ilVef <> -1 Then
                If tgMVef(ilVef).sType = "R" Then
                    mAnyRepWithCntr = True
                    Exit Function
                End If
            End If
        End If
    Next ilLoop
    For ilLoop = LBound(tgIBSbf) To UBound(tgIBSbf) - 1 Step 1
        '12/18/17: bypass deleted records
        If tgIBSbf(ilLoop).iStatus >= 0 And tgIBSbf(ilLoop).iStatus < 2 Then
            ilVef = gBinarySearchVef(tgIBSbf(ilLoop).SbfRec.iBillVefCode)
            If ilVef <> -1 Then
                If tgMVef(ilVef).sType = "R" Then
                    mAnyRepWithCntr = True
                    Exit Function
                End If
            End If
        End If
    Next ilLoop
    Exit Function
mAnyRepWithCntrErr:
    Exit Function
End Function


Public Function mRBVehBookExist(hlDrf As Integer, ilDnfCode As Integer, ilVefCode As Integer) As Integer
    
'   Determine if vehicle exist within the book
    Dim tlDrfSrchKey As DRFKEY0
    Dim tlDrf As DRF
    Dim ilRet As Integer
    Dim ilDrfRecLen As Integer
    
    mRBVehBookExist = False
    If ilDnfCode <= 0 Then
        Exit Function
    End If
    ilDrfRecLen = Len(tlDrf)
    tlDrfSrchKey.iDnfCode = ilDnfCode
    tlDrfSrchKey.sDemoDataType = "D"
    tlDrfSrchKey.iMnfSocEco = 0
    tlDrfSrchKey.iVefCode = ilVefCode
    tlDrfSrchKey.sInfoType = ""
    tlDrfSrchKey.iRdfCode = 0
    ilRet = btrGetGreaterOrEqual(hlDrf, tlDrf, ilDrfRecLen, tlDrfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    If (ilRet = BTRV_ERR_NONE) And (tlDrf.iDnfCode = ilDnfCode) And (tlDrf.iMnfSocEco = 0) And (tlDrf.iVefCode = ilVefCode) Then
        mRBVehBookExist = True
        Exit Function
    End If
    tlDrfSrchKey.iDnfCode = ilDnfCode
    tlDrfSrchKey.sDemoDataType = "M"
    tlDrfSrchKey.iMnfSocEco = 0
    tlDrfSrchKey.iVefCode = ilVefCode
    tlDrfSrchKey.sInfoType = ""
    tlDrfSrchKey.iRdfCode = 0
    ilRet = btrGetGreaterOrEqual(hlDrf, tlDrf, ilDrfRecLen, tlDrfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    If (ilRet = BTRV_ERR_NONE) And (tlDrf.iDnfCode = ilDnfCode) And (tlDrf.iMnfSocEco = 0) And (tlDrf.iVefCode = ilVefCode) Then
        mRBVehBookExist = True
        Exit Function
    End If
        

End Function
Public Function mGetMGCount(ilLnRowNo As Integer, hlChf As Integer, hlClf As Integer, hlSdf As Integer, hlSmf As Integer, llStartDate As Long, llEndDate As Long, ilBilledMGCount As Integer, Optional ilGameNo As Integer = 0, Optional blCheckCurrentAndPastWks As Boolean = False) As Integer
    Dim ilMGNoSpots As Integer
    Dim llSpotMGDate As Long
    Dim ilRet As Integer
    Dim llDate As Long
    Dim llCheckDate As Long
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilChfRecLen As Integer
    Dim ilClfRecLen As Integer
    Dim tlChf As CHF
    Dim tlClf As CLF
    
    ilChfRecLen = Len(tlChf)
    ilClfRecLen = Len(tlClf)
    imSdfRecLen = Len(tmSdf)
    imSmfRecLen = Len(tmSmf)
    ilMGNoSpots = 0
    ilBilledMGCount = 0
    llCheckDate = gDateValue(Format(gNow(), "m/d/yy"))
    '3/14/13:  Test current and Past weeks for MG/Outsides
    If blCheckCurrentAndPastWks Then
        Do While gWeekDayLong(llCheckDate) <> 6
            llCheckDate = llCheckDate + 1
        Loop
        llCheckDate = llCheckDate + 1
    End If
    If (tgClfCntr(ilLnRowNo - 1).lUnbilledDate > 0) And (tgClfCntr(ilLnRowNo - 1).lUnbilledDate > llCheckDate) Then
        llCheckDate = tgClfCntr(ilLnRowNo - 1).lUnbilledDate
    End If
    If (tgClfCntr(ilLnRowNo - 1).iStatus > 0) And (tgClfCntr(ilLnRowNo - 1).iLineSchd) Then
        If (tgClfCntr(ilLnRowNo - 1).ClfRec.sSchStatus = "P") Or (tgClfCntr(ilLnRowNo - 1).ClfRec.sSchStatus = "A") Or (tgClfCntr(ilLnRowNo - 1).ClfRec.sSchStatus = "N") Then
            'Find original line
            tmChfSrchKey1.lCntrNo = tgChfCntr.lCntrNo
            tmChfSrchKey1.iCntRevNo = tgChfCntr.iCntRevNo
            tmChfSrchKey1.iPropVer = tgChfCntr.iPropVer
            ilRet = btrGetGreaterOrEqual(hlChf, tlChf, ilChfRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
            Do While (ilRet = BTRV_ERR_NONE) And (tlChf.lCntrNo = tgChfCntr.lCntrNo) And (tlChf.sSchStatus <> "F")
                ilRet = btrGetNext(hlChf, tlChf, ilChfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If (ilRet <> BTRV_ERR_NONE) Or (tlChf.lCntrNo <> tgChfCntr.lCntrNo) Then
                tlClf = tgClfCntr(ilLnRowNo - 1).ClfRec
            Else
                'Find Line
                tmClfSrchKey.lChfCode = tlChf.lCode
                tmClfSrchKey.iLine = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine
                tmClfSrchKey.iCntRevNo = tlChf.iCntRevNo ' 0 show latest version
                tmClfSrchKey.iPropVer = tlChf.iPropVer ' 0 show latest version
                ilRet = btrGetGreaterOrEqual(hlClf, tlClf, ilClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                If (ilRet <> BTRV_ERR_NONE) Or (tlClf.lChfCode <> tlChf.lCode) Or (tlClf.iLine <> tgClfCntr(ilLnRowNo - 1).ClfRec.iLine) Then
                    tlClf = tgClfCntr(ilLnRowNo - 1).ClfRec
                End If
            End If
        Else
            tlChf = tgChfCntr
            tlClf = tgClfCntr(ilLnRowNo - 1).ClfRec
        End If
        If (tlClf.sSchStatus = "F") Then
            If (tlChf.sType = "C") Or ((tlChf.sType = "M") And (tgSpf.sSchdPromo = "Y")) Or ((tlChf.sType = "S") And (tgSpf.sSchdPSA = "Y")) Or ((tlChf.sType = "T") And (tgSpf.sSchdRemnant = "Y")) Then
                If (tlClf.sType <> "O") And (tlClf.sType <> "A") And (tlClf.sType <> "E") Then
                    tmSmfSrchKey0.lChfCode = tlClf.lChfCode
                    tmSmfSrchKey0.iLineNo = tlClf.iLine
                    tmSmfSrchKey0.lFsfCode = 0
                    gPackDateLong llStartDate, tmSmfSrchKey0.iMissedDate(0), tmSmfSrchKey0.iMissedDate(1)
                    ilRet = btrGetGreaterOrEqual(hlSmf, tmSmf, imSmfRecLen, tmSmfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                    Do While (ilRet = BTRV_ERR_NONE) And (tmSmf.lChfCode = tlClf.lChfCode) And (tmSmf.iLineNo = tlClf.iLine)
                        If ilGameNo = 0 Then
                            gUnpackDateLong tmSmf.iMissedDate(0), tmSmf.iMissedDate(1), llDate
                            If llDate > llEndDate Then
                                Exit Do
                            End If
                            If (llDate >= llStartDate) And (llDate <= llEndDate) Then
                                gUnpackDateLong tmSmf.iActualDate(0), tmSmf.iActualDate(1), llDate
                                If (llDate < llCheckDate) Then
                                    tmSdfSrchKey3.lCode = tmSmf.lSdfCode
                                    ilRet = btrGetEqual(hlSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)
                                    If ilRet = BTRV_ERR_NONE Then
                                        If tmSdf.sSpotType <> "X" Then
                                            ilMGNoSpots = ilMGNoSpots + 1
                                            If tmSdf.sBill = "Y" Then
                                                ilBilledMGCount = ilBilledMGCount + 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If tmSmf.iGameNo = ilGameNo Then
                                gUnpackDateLong tmSmf.iActualDate(0), tmSmf.iActualDate(1), llDate
                                If (llDate < llCheckDate) Then
                                    tmSdfSrchKey3.lCode = tmSmf.lSdfCode
                                    ilRet = btrGetEqual(hlSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)
                                    If ilRet = BTRV_ERR_NONE Then
                                        If tmSdf.sSpotType <> "X" Then
                                            ilMGNoSpots = ilMGNoSpots + 1
                                            If tmSdf.sBill = "Y" Then
                                                ilBilledMGCount = ilBilledMGCount + 1
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        ilRet = btrGetNext(hlSmf, tmSmf, imSmfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    Loop
                ElseIf (tlClf.sType = "O") Or (tlClf.sType = "A") Then
                    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
                            ilIndex = tgPackLn(ilLoop).iIndex
                            Do While ilIndex >= 0
                                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                    If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                        tmSmfSrchKey0.lChfCode = tlClf.lChfCode
                                        tmSmfSrchKey0.iLineNo = tgPackLn(ilIndex).iLineNo
                                        tmSmfSrchKey0.lFsfCode = 0
                                        gPackDateLong llStartDate, tmSmfSrchKey0.iMissedDate(0), tmSmfSrchKey0.iMissedDate(1)
                                        ilRet = btrGetGreaterOrEqual(hlSmf, tmSmf, imSmfRecLen, tmSmfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                                        Do While (ilRet = BTRV_ERR_NONE) And (tmSmf.lChfCode = tlClf.lChfCode) And (tmSmf.iLineNo = tgPackLn(ilIndex).iLineNo)
                                            gUnpackDateLong tmSmf.iMissedDate(0), tmSmf.iMissedDate(1), llDate
                                            If llDate > llEndDate Then
                                                Exit Do
                                            End If
                                            If (llDate >= llStartDate) And (llDate <= llEndDate) Then
                                                gUnpackDateLong tmSmf.iActualDate(0), tmSmf.iActualDate(1), llDate
                                                If (llDate < llCheckDate) Then
                                                    tmSdfSrchKey3.lCode = tmSmf.lSdfCode
                                                    ilRet = btrGetEqual(hlSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)
                                                    If ilRet = BTRV_ERR_NONE Then
                                                        If tmSdf.sSpotType <> "X" Then
                                                            ilMGNoSpots = ilMGNoSpots + 1
                                                            If tmSdf.sBill = "Y" Then
                                                                ilBilledMGCount = ilBilledMGCount + 1
                                                            End If
                                                            'mGetMGCount = ilMGNoSpots
                                                            'Exit Function
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            ilRet = btrGetNext(hlSmf, tmSmf, imSmfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                        Loop
                                    End If
                                Next ilClf
                                ilIndex = tgPackLn(ilIndex).iIndex
                            Loop
                        End If
                    Next ilLoop
                End If
            End If
        End If
    End If
    mGetMGCount = ilMGNoSpots
End Function



Public Function mGameInStdPkg(hlPvf, llPvfCode As Long) As Integer
    Dim ilRet As Integer
    Dim ilPvf As Integer
    Dim ilTVef As Integer
    Dim ilTPvf As Integer
    
    mGameInStdPkg = False
    If llPvfCode <= 0 Then
        Exit Function
    End If
    tmPvfSrchKey.lCode = llPvfCode
    ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
    Do While ilRet = BTRV_ERR_NONE
        For ilPvf = LBound(tmPvf.iVefCode) To UBound(tmPvf.iVefCode) Step 1
            ilTVef = gBinarySearchVef(tmPvf.iVefCode(ilPvf))
            If ilTVef <> -1 Then
                If (tgMVef(ilTVef).sType = "G") Then
                    mGameInStdPkg = True
                    Exit Function
                End If
                If (tgMVef(ilTVef).sType = "P") And (tgMVef(ilTVef).lPvfCode > 0) Then
                    tmPvfSrchKey.lCode = tgMVef(ilTVef).lPvfCode
                    ilRet = btrGetEqual(hlPvf, tmTPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                    Do While ilRet = BTRV_ERR_NONE
                        For ilTPvf = LBound(tmTPvf.iVefCode) To UBound(tmTPvf.iVefCode) Step 1
                            ilTVef = gBinarySearchVef(tmTPvf.iVefCode(ilPvf))
                            If ilTVef <> -1 Then
                                If (tgMVef(ilTVef).sType = "G") Then
                                    mGameInStdPkg = True
                                    Exit Function
                                End If
                            End If
                        Next ilTPvf
                        tmPvfSrchKey.lCode = tmTPvf.lLkPvfCode
                        ilRet = btrGetEqual(hlPvf, tmTPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
                    Loop
                End If
            End If
        Next ilPvf
        tmPvfSrchKey.lCode = tmPvf.lLkPvfCode
        ilRet = btrGetEqual(hlPvf, tmPvf, imPvfRecLen, tmPvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get current record
    Loop

End Function

Public Function mGameInPkg(ilLnRowNo As Integer) As Integer
    Dim ilLoop As Integer
    Dim ilVef As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    
    mGameInPkg = False
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine Then
            If (tgPackLn(ilLoop).sType = "O") Or (tgPackLn(ilLoop).sType = "A") Or (tgPackLn(ilLoop).sType = "E") Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                            ilVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                            If ilVef <> -1 Then
                                If (tgMVef(ilVef).sType = "G") Then
                                    mGameInPkg = True
                                    Exit Function
                                End If
                            End If
                            Exit For
                        End If
                    Next ilClf
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
            End If
        End If
    Next ilLoop
End Function

Public Function mAddGames(hlGhf As Integer, hlGsf As Integer, ilVefCode As Integer, llNoSpotsPerGame As Long, ilLnRowNo As Integer, llDate As Long, ilAllowedDays() As Integer) As Integer
    Dim ilRet As Integer    'Return status
    Dim ilUpper As Integer
    Dim ilGsf As Integer
    Dim ilFound As Integer
    Dim ilCgf As Integer
    Dim ilPrevCgf As Integer
    Dim ilTotalSpots As Integer
    Dim ilGameNo As Integer
    Dim llAirDate As Long
    Dim llSeasonStart As Long
    Dim llSeasonEnd As Long
    Dim ilGhfFound As Integer
    
    If ilVefCode <> tmGhf.iVefCode Then
        ReDim tmGsf(0 To 0) As GSF
        ilUpper = 0
        ilGhfFound = False
        imGhfRecLen = Len(tmGhf)
        tmGhfSrchKey1.iVefCode = ilVefCode
        ilRet = btrGetEqual(hlGhf, tmGhf, imGhfRecLen, tmGhfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)
        Do While (ilRet = BTRV_ERR_NONE) And (tmGhf.iVefCode = ilVefCode)
            gUnpackDateLong tmGhf.iSeasonStartDate(0), tmGhf.iSeasonStartDate(1), llSeasonStart
            gUnpackDateLong tmGhf.iSeasonEndDate(0), tmGhf.iSeasonEndDate(1), llSeasonEnd
            If (llDate >= llSeasonStart) And (llDate <= llSeasonEnd) Then
                ilGhfFound = True
                Exit Do
            End If
            ilRet = btrGetNext(hlGhf, tmGhf, imGhfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
        Loop
        If Not ilGhfFound Then
            mAddGames = 0
            Exit Function
        End If
        imGsfRecLen = Len(tmGsf(0))
        tmGsfSrchKey1.lghfcode = tmGhf.lCode
        tmGsfSrchKey1.iGameNo = 0
        ilRet = btrGetGreaterOrEqual(hlGsf, tmGsf(ilUpper), imGsfRecLen, tmGsfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
        Do While (ilRet = BTRV_ERR_NONE) And (tmGhf.lCode = tmGsf(ilUpper).lghfcode)
            ReDim Preserve tmGsf(0 To UBound(tmGsf) + 1) As GSF
            ilUpper = UBound(tmGsf)
            ilRet = btrGetNext(hlGsf, tmGsf(ilUpper), imGsfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
        Loop
    End If
    tgClfCntr(ilLnRowNo - 1).ClfRec.lghfcode = tmGhf.lCode
    ilTotalSpots = 0
    For ilGsf = 0 To UBound(tmGsf) - 1 Step 1
        gUnpackDateLong tmGsf(ilGsf).iAirDate(0), tmGsf(ilGsf).iAirDate(1), llAirDate
        If (llAirDate >= llDate) And (llAirDate <= llDate + 6) Then
            ilGameNo = tmGsf(ilGsf).iGameNo
            If ilAllowedDays(gWeekDayLong(llAirDate) + LBound(ilAllowedDays)) Then
                ilFound = False
                ilCgf = tgClfCntr(ilLnRowNo - 1).iFirstCgf
                Do While ilCgf <> -1
                    'Date
                    If tgCgfCntr(ilCgf).iStatus <> 2 Then
                        If tgCgfCntr(ilCgf).CgfRec.iGameNo = ilGameNo Then
                            ilFound = True
                            ilTotalSpots = ilTotalSpots + (llNoSpotsPerGame - tgCgfCntr(ilCgf).CgfRec.iNoSpots)
                            tgCgfCntr(ilCgf).CgfRec.iNoSpots = llNoSpotsPerGame
                            Exit Do
                        End If
                    End If
                    ilCgf = tgCgfCntr(ilCgf).iNextCgf
                Loop
                If Not ilFound Then
                    'Create CGF record in game number order within CGF
                    ilUpper = UBound(tgCgfCntr)
                    ilPrevCgf = -1
                    ilCgf = tgClfCntr(ilLnRowNo - 1).iFirstCgf
                    Do While ilCgf <> -1
                        'Date
                        If tgCgfCntr(ilCgf).iStatus <> 2 Then
                            If ilGameNo < tgCgfCntr(ilCgf).CgfRec.iGameNo Then
                                Exit Do
                            End If
                            ilPrevCgf = ilCgf
                        End If
                        ilCgf = tgCgfCntr(ilCgf).iNextCgf
                    Loop
                    If ilPrevCgf = -1 Then
                        ilCgf = tgClfCntr(ilLnRowNo - 1).iFirstCgf
                        tgClfCntr(ilLnRowNo - 1).iFirstCgf = ilUpper
                        tgCgfCntr(ilUpper).iNextCgf = ilCgf
                    Else
                        tgCgfCntr(ilPrevCgf).iNextCgf = UBound(tgCgfCntr)
                        tgCgfCntr(ilUpper).iNextCgf = ilCgf
                    End If
                    'Set All CFF value
                    tgCgfCntr(ilUpper).iStatus = 0
                    tgCgfCntr(ilUpper).lStartDate = llDate
                    tgCgfCntr(ilUpper).lEndDate = llDate + 6
                    tgCgfCntr(ilUpper).CgfRec.lCode = 0
                    tgCgfCntr(ilUpper).CgfRec.lClfCode = 0
                    tgCgfCntr(ilUpper).CgfRec.iGameNo = ilGameNo
                    tgCgfCntr(ilUpper).CgfRec.iNoSpots = llNoSpotsPerGame
                    ilTotalSpots = ilTotalSpots + llNoSpotsPerGame
                    gPackDateLong llAirDate, tgCgfCntr(ilUpper).CgfRec.iAirDate(0), tgCgfCntr(ilUpper).CgfRec.iAirDate(1)
                    ReDim Preserve tgCgfCntr(0 To ilUpper + 1) As CGFLIST
                    tgCgfCntr(ilUpper + 1).iStatus = -1
                    tgCgfCntr(ilUpper + 1).iNextCgf = -1
                End If
            End If
        End If
    Next ilGsf
    mAddGames = ilTotalSpots
End Function

Public Function mReplaceWithFills(hmCHF As Integer, hmClf As Integer, hmSdf As Integer, hmSmf As Integer, llDate As Long, llMonNowDate As Long, ilPastMsgAsked As Integer, slCheckDayOrWeek As String) As Integer
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilBilledCount As Integer
    
    mReplaceWithFills = True
    ilRet = 0
    If (tgClfCntr(imLnRowNo - 1).ClfRec.sType <> "O") And (tgClfCntr(imLnRowNo - 1).ClfRec.sType <> "A") And (tgUrf(0).sChgCntr = "I") Then
        If (tgClfCntr(imLnRowNo - 1).iLineSchd) Then
            If tgClfCntr(imLnRowNo - 1).lLLD > llMonNowDate + 6 Then
                If (llDate <= tgClfCntr(imLnRowNo - 1).lLLD) Then
                    ilRet = 1
                End If
            Else
                If (llDate <= llMonNowDate + 6) Then
                    ilRet = 1
                End If
            End If
            If (ilRet = 0) Or (tgSpf.sInvAirOrder = "A") Or (tgSpf.sInvAirOrder = "2") Then
                'Week in future of current week, Check for MG and Outsides placed into current week or before current week
                If slCheckDayOrWeek = "D" Then
                    ilRet = mGetMGCount(imLnRowNo, hmCHF, hmClf, hmSdf, hmSmf, llDate, llDate, ilBilledCount, 0, True)
                Else
                    ilRet = mGetMGCount(imLnRowNo, hmCHF, hmClf, hmSdf, hmSmf, llDate, llDate + 6, ilBilledCount, 0, True)
                End If
                If (ilBilledCount > 0) And ((tgSpf.sInvAirOrder = "A") Or (tgSpf.sInvAirOrder = "2")) Then
                    mReplaceWithFills = False
                    MsgBox "Billed MG Spots exits, can't reduce number of spots to zero", vbInformation + vbOKOnly, "Warning"
                    Exit Function
                End If
            End If
        End If
    Else
        'Pack, check hidden lines
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(imLnRowNo - 1).ClfRec.iLine Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                            If (tgClfCntr(imLnRowNo - 1).iLineSchd) Then
                                If tgClfCntr(ilClf).lLLD > llMonNowDate + 6 Then
                                    If (llDate <= tgClfCntr(ilClf).lLLD) Then
                                        ilRet = 1
                                    End If
                                Else
                                    If (llDate <= llMonNowDate + 6) Then
                                        ilRet = 1
                                    End If
                                End If
                                If ilRet = 0 Then
                                    'Week in future of current week, Check for MG and Outsides placed into current week or before current week
                                    If slCheckDayOrWeek = "D" Then
                                        ilRet = mGetMGCount(ilClf + 1, hmCHF, hmClf, hmSdf, hmSmf, llDate, llDate, ilBilledCount, 0, True)
                                    Else
                                        ilRet = mGetMGCount(ilClf + 1, hmCHF, hmClf, hmSdf, hmSmf, llDate, llDate + 6, ilBilledCount, 0, True)
                                    End If
                                    If (ilBilledCount > 0) And ((tgSpf.sInvAirOrder = "A") Or (tgSpf.sInvAirOrder = "2")) Then
                                        mReplaceWithFills = False
                                        MsgBox "Billed MG Spots exits, can't reduce number of package spots to zero", vbInformation + vbOKOnly, "Warning"
                                        Exit Function
                                    End If
                                End If
                                If (ilRet = 1) And ((tgSpf.sInvAirOrder = "O") Or (tgSpf.sInvAirOrder = "S")) Then
                                    Exit For
                                End If
                            End If
                        End If
                    Next ilClf
                    If (ilRet = 1) And ((tgSpf.sInvAirOrder = "O") Or (tgSpf.sInvAirOrder = "S")) Then
                        Exit Do
                    End If
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
                Exit For
            End If
        Next ilLoop
                    
    End If
    If ilRet > 0 Then
        If (tgUrf(0).sChgCntr <> "I") Then
            'MsgBox "Cannot remove spots as some already aired", vbOkOnly + vbExclamation, "Incomplete"
            'ilChg = False
            'imPaintLnRowNo = -1
            If (tgClfCntr(imLnRowNo - 1).iStatus = 0) Or (Not tgClfCntr(imLnRowNo - 1).iLineSchd) Or (imLnRowNo = UBound(tgClfCntr) + 1) Then
                If ilPastMsgAsked = 0 Then
                    ilRet = MsgBox("You are Changing a Past Week, Ok to Proceed", vbYesNo + vbDefaultButton2 + vbQuestion, "Warning")
                    ilPastMsgAsked = ilRet
                    If ilRet = vbNo Then
                        mReplaceWithFills = False
                        'imPaintLnRowNo = -1
                    End If
                Else
                    If ilPastMsgAsked = vbNo Then
                        mReplaceWithFills = False
                        'imPaintLnRowNo = -1
                    End If
                End If
            Else
                MsgBox "Changing a Past Week not Permitted", vbOKOnly + vbExclamation, "Warning"
                mReplaceWithFills = False
                'imPaintLnRowNo = -1
            End If
        Else
            ''Ask Question
            'ilRet = MsgBox("This will Change the Aired Spots in the Current and Previous Weeks to N/C Fills", vbExclamation + vbOKCancel, "Warning")
            'If ilRet = vbCancel Then
            '    ilChg = False
            '    imPaintLnRowNo = -1
            'End If
        End If
    End If
End Function


Private Sub mObtainNextCFF(ilCffIndex As Integer, ilLastCffUsed As Integer)
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilTestCff As Integer
    Dim ilFound As Integer
    
    ilCffIndex = -1
    For ilLoop = ilLastCffUsed To UBound(tgCffCntr) - 1 Step 1
        If tgCffCntr(ilLoop).iStatus = -1 Then
            'Test Chain
            ilFound = False
            For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) Step 1
                ilTestCff = tgClfCntr(ilClf).iFirstCff
                If ilTestCff = ilLoop Then
                    ilFound = True
                    Exit For
                End If
                Do While ilTestCff <> -1
                    ilTestCff = tgCffCntr(ilTestCff).iNextCff
                    If ilTestCff = ilLoop Then
                        ilFound = True
                        Exit For
                    End If
                Loop
            Next ilClf
            If Not ilFound Then
                ilCffIndex = ilLoop
                ilLastCffUsed = ilLoop
                Exit For
            End If
        End If
    Next ilLoop
    If ilCffIndex = -1 Then
        ilCffIndex = UBound(tgCffCntr)
        ilLastCffUsed = ilCffIndex
        ReDim Preserve tgCffCntr(0 To ilCffIndex + 100) As CFFLIST
        For ilLoop = ilCffIndex + 1 To UBound(tgCffCntr) Step 1
            tgCffCntr(ilLoop).iStatus = -1 'Not Used
            tgCffCntr(ilLoop).lRecPos = 0
            tgCffCntr(ilLoop).iNextCff = -1
        Next ilLoop
    End If
End Sub

Private Function mAdjustHiddenWk(ilLoop As Integer, blGame As Boolean, ilGameWeekTotal As Integer, ilFlSpots As Integer, llSpots As Long, llSpotCount As Long, llOldSpots As Long, llDate As Long, ilMGSpots As Integer, hlChf As Integer, hlClf As Integer, hlSdf As Integer, hlSmf As Integer, ilBilledCount As Integer, llPrice As Long, slPrice As String, ilOVDays() As Integer, slWDFlag As String, ilDays() As Integer, llWkNoSpots As Long, ilDailySpots() As Integer, ilLastCffUsed As Integer, ilLnTotalType As Integer, ilPRICEINDEX As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, slLineType As String, ilPkLnRowNo As Integer) As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilGVef As Integer
    Dim ilCgf As Integer
    Dim ilDay As Integer
    Dim ilRet As Integer
    
    mAdjustHiddenWk = True
    'If (igFreezeState = 1) Then
    '    Exit Function
    'End If
    ilIndex = tgPackLn(ilLoop).iIndex
    Do While ilIndex >= 0
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                '7/19/12: Add Game
                blGame = False
                ilGVef = gBinarySearchVef(tgClfCntr(ilClf).ClfRec.iVefCode)
                If ilGVef <> -1 Then
                    If tgMVef(ilGVef).sType = "G" Then
                        'Adjust game spots
                        blGame = True
                        ilGameWeekTotal = 0
                        ilCgf = tgClfCntr(ilClf).iFirstCgf
                        Do While ilCgf <> -1
                            If (tgCgfCntr(ilCgf).lStartDate >= llDate) And (tgCgfCntr(ilCgf).lEndDate <= llDate + 6) Then
                                ilFlSpots = tgCgfCntr(ilCgf).CgfRec.iNoSpots
                                llSpots = CInt((CLng(ilFlSpots) * CLng(llSpotCount)) / CLng(llOldSpots))
                                If (llSpots <= 0) And (llSpotCount <> 0) Then
                                    llSpots = 1
                                End If
                                If llSpotCount < llOldSpots Then
                                    '3/14/13
                                    '3/14/13
                                    'ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6, tgCgfCntr(ilCgf).CgfRec.iGameNo)
                                    'If ilMGSpots > llSpots Then
                                    '    llSpots = ilMGSpots
                                    'End If
                                    If (llSpotCount = 0) And (Asc(tgSpf.sUsingFeatures10) And REPLACEDELWKWITHFILLS) = REPLACEDELWKWITHFILLS Then
                                        llSpots = 0
                                    Else
                                        ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6, ilBilledCount, 0)
                                        If ilMGSpots > llSpots Then
                                            llSpots = ilMGSpots
                                        End If
                                    End If
                                End If
                                If tgCgfCntr(ilCgf).CgfRec.iNoSpots <> llSpots Then
                                    tgClfCntr(ilClf).sLineChgd = "Y"
                                End If
                                tgCgfCntr(ilCgf).CgfRec.iNoSpots = llSpots
                                ilGameWeekTotal = ilGameWeekTotal + llSpots
                            End If
                            ilCgf = tgCgfCntr(ilCgf).iNextCgf
                        Loop
                    End If
                End If
                
                ilFlSpots = mGetFlightSpots(ilClf + 1, llDate, llPrice)
                If ilFlSpots > 0 Then
                    mGetFlightDays ilClf + 1, ilOVDays()
                    mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDays(), llWkNoSpots
                    If slWDFlag = "D" Then
                        For ilDay = 0 To 6 Step 1
                            ilDays(ilDay) = ilDailySpots(ilDay)
                        Next ilDay
                        mAddWeek ilLastCffUsed, ilClf + 1, llDate, "D", llSpots, ilDays()
                    Else
                        'llSpots = (ilFlSpots * llSpotCount) / llOldSpots
                        If blGame Then
                            llSpots = ilGameWeekTotal
                        Else
                            llSpots = CInt((CLng(ilFlSpots) * CLng(llSpotCount)) / CLng(llOldSpots))
                            If (llSpots <= 0) And (llSpotCount <> 0) Then
                                llSpots = 1
                            End If
                            If llSpotCount < llOldSpots Then
                                '3/14/13
                                'ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6)
                                'If ilMGSpots > llSpots Then
                                '    llSpots = ilMGSpots
                                'End If
                                If (llSpotCount = 0) And (Asc(tgSpf.sUsingFeatures10) And REPLACEDELWKWITHFILLS) = REPLACEDELWKWITHFILLS Then
                                    llSpots = 0
                                Else
                                    ilMGSpots = mGetMGCount(ilClf + 1, hlChf, hlClf, hlSdf, hlSmf, llDate, llDate + 6, ilBilledCount, 0)
                                    If ilMGSpots > llSpots Then
                                        llSpots = ilMGSpots
                                    End If
                                End If
                            End If
                        End If
                        mAddWeek ilLastCffUsed, ilClf + 1, llDate, "W", llSpots, ilDays()
                    End If
                    mLnTotals ilClf + 1, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), slWDFlag, ilDays()           'Set associated package lines values
                    mGetLnPriceInfo ilClf + 1, slPrice, ilLnTotalType, ilPRICEINDEX
                End If
            End If
        Next ilClf
        ilIndex = tgPackLn(ilIndex).iIndex
    Loop
    If (slLineType = "A") Then
        ilRet = mGetDailySpots(ilPkLnRowNo, llDate, llSpotCount, ilDays())
        If ilRet <> -2 Then '-2 indicates that it is not daily
            For ilDay = 0 To 6 Step 1
                If smLnSave(7 + ilDay, ilPkLnRowNo) <> Trim$(str$(ilDays(ilDay))) Then
                    tgClfCntr(ilPkLnRowNo - 1).sLineChgd = "Y"
                End If
                smLnSave(7 + ilDay, ilPkLnRowNo) = Trim$(str$(ilDays(ilDay)))
            Next ilDay
        End If
    End If
End Function

Private Sub mBalanceHidden(llAdjPrice As Long, llNewPrice As Long, ilPkCff As Integer, ilPkLnRowNo As Integer, ilLoop As Integer, llDate As Long, llFlPrice As Long, llFlSpots As Long, ilRepeat As Integer, ilLnTotalType As Integer, ilPRICEINDEX As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, tlRegionCode() As SORTCODE, ilDays() As Integer, ilOVDays() As Integer, slWDFlag As String, ilDailySpots() As Integer, llWkNoSpots As Long, ilLastCffUsed As Integer)
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilLnRowNo As Integer
    Dim ilCff As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim slStr As String
    
    If (igFreezeState = 1) Then
        Exit Sub
    End If
    llAdjPrice = llNewPrice - tgCffCntr(ilPkCff).CffRec.lActPrice
    llFlSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llFlPrice)
    llAdjPrice = llFlSpots * llAdjPrice
    ilIndex = tgPackLn(ilLoop).iIndex
    Do While ilIndex >= 0
        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
            ilLnRowNo = ilClf + 1
            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                ilRepeat = False
                ilCff = tgClfCntr(ilClf).iFirstCff
                Do While ilCff <> -1
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                            If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (ilRepeat) Then
                                llFlSpots = mGetFlightSpots(ilClf + 1, llDate, llFlPrice)
                                If (llFlSpots > 0) And (llFlPrice > 0) Then
                                    If ((Abs(llAdjPrice) Mod llFlSpots) = 0) And ((tgCffCntr(ilCff).CffRec.lActPrice + llAdjPrice / llFlSpots) >= 0) Then
                                        If llFlStartDate + 6 >= llFlEndDate Then
                                            tgCffCntr(ilCff).CffRec.sPriceType = "T"
                                            If tgCffCntr(ilCff).CffRec.lActPrice <> tgCffCntr(ilCff).CffRec.lActPrice + llAdjPrice / llFlSpots Then
                                                tgClfCntr(ilClf).sLineChgd = "Y"
                                            End If
                                            tgCffCntr(ilCff).CffRec.lActPrice = tgCffCntr(ilCff).CffRec.lActPrice + llAdjPrice / llFlSpots
                                            mLnTotals ilLnRowNo, ilLnTotalType, ilPRICEINDEX, hlDrf, hlMnf, hlDpf, hlDef, hlRaf, tlRegionCode(), "", ilDays()           'Set associated package lines values
                                            mGetLnPriceInfo ilLnRowNo, slStr, ilLnTotalType, ilPRICEINDEX
                                            'Return
                                            Exit Sub
                                        Else
                                            mGetFlightDays ilClf + 1, ilOVDays()
                                            mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots

                                            llFlSpots = mGetFlightSpots(ilClf + 1, llDate, llFlPrice)
                                            If slWDFlag = "D" Then
                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDailySpots()
                                            Else
                                                mAddWeek ilLastCffUsed, ilClf + 1, llDate, slWDFlag, llFlSpots, ilDays()
                                            End If
                                            ilRepeat = True
                                        End If
                                    Else
                                        Exit Do
                                    End If
                                Else
                                    Exit Do
                                End If
                            Else
                                Exit Do
                            End If
                        Else
                            ilCff = tgCffCntr(ilCff).iNextCff
                        End If
                    Else
                        ilCff = tgCffCntr(ilCff).iNextCff
                    End If
                Loop
            End If
        Next ilClf
        ilIndex = tgPackLn(ilIndex).iIndex
    Loop
End Sub

Private Sub mAvgPkLn(ilPkLnRowNo As Integer, llPrevBilledDollars As Long, llPrevBilledSpots As Long, ilSpots As Integer, llPrice As Long)
    Dim slLineType As String
    Dim llPkStartDate As Long
    Dim llPkEndDate As Long
    Dim llDate As Long
    Dim slDate As String
    Dim ilCff As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim ilDay As Integer
    Dim ilCffIndex As Integer
    
    slLineType = mGetLineType(ilPkLnRowNo)
    mGetPkDates ilPkLnRowNo, llPkStartDate, llPkEndDate
    'Compute week price from all hidden lines of the package, then set package line week price
    llPkStartDate = gDateValue(gObtainPrevMonday(Format$(llPkStartDate, "m/d/yy")))
    llPrevBilledDollars = 0
    llPrevBilledSpots = 0
    For llDate = llPkStartDate To tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate Step 7
        ilSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llPrice)
        llPrevBilledSpots = llPrevBilledSpots + ilSpots
        llPrevBilledDollars = llPrevBilledDollars + ilSpots * llPrice
    Next llDate
    For llDate = llPkStartDate To llPkEndDate Step 7
        If llDate > tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate Then
            ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
            Do While ilCff <> -1
                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                    'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                    If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                            ilSpots = 0
                            For ilDay = 0 To 6 Step 1
                                ilSpots = ilSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                            Next ilDay
                        Else
                            ilSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                        End If
                        If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (Trim$(tgCffCntr(ilCff).CffRec.sPriceType) = "") Or (Trim$(tgCffCntr(ilCff).CffRec.sPriceType) = "*") Then
                            'Test if flight must be split-
                            If llFlStartDate <= tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate Then
                                'Split flight- If calendar bill, it might need to be split if end date is not sunday- do later
                                ilCffIndex = UBound(tgCffCntr)
                                tgCffCntr(ilCffIndex) = tgCffCntr(ilCff)
                                tgCffCntr(ilCffIndex).iStatus = 0
                                tgCffCntr(ilCffIndex).lRecPos = 0
                                tgCffCntr(ilCff).iNextCff = ilCffIndex
                                ReDim Preserve tgCffCntr(0 To UBound(tgCffCntr) + 1) As CFFLIST
                                tgCffCntr(UBound(tgCffCntr)).iStatus = -1 'Not Used
                                tgCffCntr(UBound(tgCffCntr)).lRecPos = 0
                                tgCffCntr(UBound(tgCffCntr)).iNextCff = -1
                                slDate = gObtainNextSunday(Format$(tgClfCntr(ilPkLnRowNo - 1).lEndBilledDate, "m/d/yy"))
                                gPackDate slDate, tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1)   'Week Start date
                                tgCffCntr(ilCff).lEndDate = gDateValue(slDate)
                                slDate = gObtainNextMonday(slDate)
                                gPackDate slDate, tgCffCntr(ilCffIndex).CffRec.iStartDate(0), tgCffCntr(ilCffIndex).CffRec.iStartDate(1)   'Week Start date
                                tgCffCntr(ilCffIndex).lStartDate = gDateValue(slDate)
                                ilCff = ilCffIndex
                            End If
                            'If (imLnSave(11, ilPkLnRowNo) > 0) And (ilSpots > 0) Then
                            If (Val(smLnSave(23, ilPkLnRowNo)) > 0) And (ilSpots > 0) Then
                                'If imLnSave(11, ilPkLnRowNo) <> ilPrevBilledSpots Then
                                If Val(smLnSave(23, ilPkLnRowNo)) <> llPrevBilledSpots Then
                                    'tgCffCntr(ilCff).CffRec.lActPrice = (gStrDecToLong(smLnSave(18, ilPkLnRowNo), 2) - llPrevBilledDollars) / (imLnSave(11, ilPkLnRowNo) - ilPrevBilledSpots) '+ .5
                                    tgCffCntr(ilCff).CffRec.lActPrice = (gStrDecToLong(smLnSave(18, ilPkLnRowNo), 2) - llPrevBilledDollars) / (Val(smLnSave(23, ilPkLnRowNo)) - llPrevBilledSpots) '+ .5
                                Else
                                    tgCffCntr(ilCff).CffRec.lActPrice = 0
                                End If
                                If tgCffCntr(ilCff).CffRec.lActPrice < 0 Then
                                    tgCffCntr(ilCff).CffRec.lActPrice = 0
                                End If
                            Else
                                tgCffCntr(ilCff).CffRec.lActPrice = 0
                            End If
                            tgCffCntr(ilCff).CffRec.sPriceType = "T"
                        End If
                        Exit Do
                    End If
                End If
                ilCff = tgCffCntr(ilCff).iNextCff
            Loop
        End If
    Next llDate
End Sub

Private Sub mSetSPChg(ilLnRowNo As Integer)
    Dim ilLoop As Integer
    
    tgClfCntr(ilLnRowNo - 1).iSPChg = False
    igLnSPChg = False
    For ilLoop = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
        If tgClfCntr(ilLoop).iSPChg Then
            igLnSPChg = True
            Exit For
        End If
    Next ilLoop
End Sub

Private Sub mAvgPkWk(ilPkLnRowNo As Integer, slPkLineType As String, ilSumDailySpots() As Integer, ilOVDays() As Integer, ilDays() As Integer, slWDFlag As String, ilDailySpots() As Integer, llWkNoSpots As Long, slNoWkWDFlag As String, ilLastCff As Integer, slDate As String, ilAudDays() As Integer, ilBypassEPriceComp As Integer, hlDrf As Integer, hlMnf As Integer, hlDpf As Integer, hlDef As Integer, hlRaf As Integer, ilNoWkDays() As Integer, tlRegionCode() As SORTCODE, ilLnTotalType As Integer, ilPRICEINDEX As Integer)
    Dim slLineType As String
    Dim llPkStartDate As Long
    Dim llPkEndDate As Long
    Dim slStdPrice As String
    Dim ilLoop As Integer
    Dim ilStdPkg As Integer
    Dim ilVefCode As Integer
    Dim ilVef As Integer
    Dim llReallDate As Long
    Dim llDate As Long
    Dim ilDay As Integer
    Dim ilIndex As Integer
    Dim ilClf As Integer
    Dim ilCff As Integer
    Dim llFlStartDate As Long
    Dim llFlEndDate As Long
    Dim llSpots As Long
    Dim llPrice As Long
    Dim llWkPrice As Long
    Dim llWkSpots As Long
    Dim llWkSpotPrice As Long
    Dim llSpotPrice As Long
    Dim ilAddWk As Integer
    Dim ilAirWk As Integer
    Dim ilRet As Integer
    Dim ilMnfSocEco As Integer
    Dim slNameCode As String
    Dim ilMnfDemo As Integer
    Dim slCode As String
    Dim slStr As String
    Dim slBDate As String
    Dim llBDate As Long
    Dim ilRWkSpots As Integer
    Dim llWkAvgAud As Long
    Dim ilNoAudLn As Integer
    Dim ilAnyRated As Integer
    Dim ilRdfCode As Integer
    Dim llAvgAud As Long
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim ilPassDnfCode As Integer
    Dim ilLp As Integer
    Dim llRafCode As Long
    Dim llPopEst As Long
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long
    Dim slPriceType As String
    Dim ilRated As Integer
    Dim slTotalPrice As String
    Dim llTotalSpots As Long
    Dim llMoFlStartdate As Long
    Dim slWkPrice As String
    
    slLineType = mGetLineType(ilPkLnRowNo)
    If (igFreezeState = 1) And (slLineType = "H") Then
        Exit Sub
    End If
    mGetPkDates ilPkLnRowNo, llPkStartDate, llPkEndDate
    'Compute week price from all hidden lines of the package, then set package line week price
    llPkStartDate = gDateValue(gObtainPrevMonday(Format$(llPkStartDate, "m/d/yy")))
    'If slLineType <> "E" Then
    slStdPrice = ""
    For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
        If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
            ilStdPkg = tgPackLn(ilLoop).iStdPkg
            If ilStdPkg Then
                ilVefCode = 0
                For ilVef = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                    If StrComp(Trim$(smLnSave(1, ilPkLnRowNo)), Trim$(tgPackVeh(ilVef).sName), 1) = 0 Then
                        ilVefCode = tgPackVeh(ilVef).iCode
                        Exit For
                    End If
                Next ilVef
                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                '    If tgMVef(ilVef).iCode = ilVefCode Then
                    ilVef = gBinarySearchVef(ilVefCode)
                    If ilVef <> -1 Then
                        slStdPrice = tgMVef(ilVef).sStdPrice
                        'Exit For
                    End If
                'Next ilVef
            Else
                If tgSpf.sCAudPkg = "Y" Then
                    slStdPrice = "A"
                End If
            End If
            Exit For
        End If
    Next ilLoop
    'If using audience, but not using reallocation, then ignore audience as it is used
    'only when yhidden first created
    If slStdPrice = "A" Then
        gUnpackDateLong tgSpf.iReallDate(0), tgSpf.iReallDate(1), llReallDate
        If llReallDate <= 0 Then
            slStdPrice = ""
        End If
    End If
    If (slLineType <> "E") Then
        ilBypassEPriceComp = False
    End If
    If (slLineType <> "E") And (slStdPrice <> "A") Then
        For llDate = llPkStartDate To llPkEndDate Step 7
            llWkPrice = 0
            llWkSpots = 0
            For ilDay = 0 To 6 Step 1
                ilSumDailySpots(ilDay) = 0
            Next ilDay
            For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
                If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
                    ilIndex = tgPackLn(ilLoop).iIndex
                    Do While ilIndex >= 0
                        For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                            If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                If Not tgClfCntr(ilClf).iCancel Then
                                    ilCff = tgClfCntr(ilClf).iFirstCff
                                    Do While ilCff <> -1
                                        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                                            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                                            llFlStartDate = tgCffCntr(ilCff).lStartDate
                                            llFlEndDate = tgCffCntr(ilCff).lEndDate
                                            If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                                                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                    llSpots = 0
                                                    For ilDay = 0 To 6 Step 1
                                                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                            llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                            ilSumDailySpots(ilDay) = ilSumDailySpots(ilDay) + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                        End If
                                                    Next ilDay
                                                Else
                                                    llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                End If
                                                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                                                    Case "T"
                                                        llPrice = tgCffCntr(ilCff).CffRec.lActPrice
                                                    Case Else
                                                        llPrice = 0
                                                End Select
                                                llWkPrice = llWkPrice + llPrice * llSpots
                                                llWkSpots = llWkSpots + llSpots
                                                Exit Do
                                            End If
                                        End If
                                        ilCff = tgCffCntr(ilCff).iNextCff
                                    Loop
                                End If
                                Exit For
                            End If
                        Next ilClf
                        ilIndex = tgPackLn(ilIndex).iIndex
                    Loop
                End If
            Next ilLoop
            'Determine if week defined- if not add week
            llSpots = mGetFlightSpots(ilPkLnRowNo, llDate, llSpotPrice)
            If llSpots <= 0 Then
                ilAddWk = True
                If slLineType = "A" Then
                    If llWkSpots > 0 Then
                        llSpots = llWkSpots
                    Else
                        ilAddWk = False
                    End If
                Else
                    If llWkSpots > 0 Then
                        llSpots = 1
                    Else
                        ilAddWk = False
                    End If
                End If
            Else
                If slLineType = "A" Then
                    If llWkSpots > 0 Then
                        If (llSpots = llWkSpots) And (llSpotPrice = llWkPrice / llWkSpots) Then
                            ilAddWk = False
                        Else
                            ilAddWk = True
                            llSpots = llWkSpots
                        End If
                    Else
                        'ilAddWk = False
                        ilAddWk = True
                        llSpots = llWkSpots
                    End If
                Else
                    '11/14/08:  Package week spots retained even if all hidden line spots removed
                    'If llSpotPrice = llWkPrice / llSpots Then
                    If (llWkSpots > 0) And (llSpotPrice = llWkPrice / llSpots) Then
                        ilAddWk = False
                    Else
                        ilAddWk = True
                        If llWkSpots <= 0 Then
                            llSpots = 0
                        End If
                    End If
                End If
            End If
            If ilAddWk Then
                mGetFlightDays ilPkLnRowNo, ilOVDays()
                mGetFlightDaysForDate ilPkLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
                If slWDFlag = "" Then
                    'No weeks exist, create from parameters
                    If slNoWkWDFlag <> "N" Then
                        slWDFlag = slNoWkWDFlag
                        If slWDFlag = "D" Then
                            For ilDay = 0 To 6 Step 1
                                ilSumDailySpots(ilDay) = ilNoWkDays(ilDay)
                                ilDailySpots(ilDay) = ilNoWkDays(ilDay)
                            Next ilDay
                        Else
                            For ilDay = 0 To 6 Step 1
                                ilDays(ilDay) = ilNoWkDays(ilDay)
                            Next ilDay
                        End If
                    End If
                End If
                If slWDFlag = "D" Then
                    If slLineType = "O" Then
                        mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llSpots, ilDailySpots()
                    Else
                        mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llSpots, ilSumDailySpots()
                    End If
                    If (slLineType = "A") And (slWDFlag = "D") Then
                        ilRet = mGetDailySpots(ilPkLnRowNo, llDate, llSpots, ilSumDailySpots())
                        For ilDay = 0 To 6 Step 1
                            smLnSave(7 + ilDay, ilPkLnRowNo) = Trim$(str$(ilSumDailySpots(ilDay)))
                        Next ilDay
                    End If
                Else
                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llSpots, ilDays()
                End If
                'Add price
                ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                Do While ilCff <> -1
                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
                        'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                            tgCffCntr(ilCff).CffRec.sPriceType = "T"   '* used to indicate price needs to be set
                            If llSpots > 0 Then
                                If slPkLineType <> "E" Then
                                    tgCffCntr(ilCff).CffRec.lActPrice = llWkPrice / llSpots 'Later- might want to store average package price
                                Else
                                    tgCffCntr(ilCff).CffRec.lActPrice = llWkPrice
                                End If
                            Else
                                tgCffCntr(ilCff).CffRec.lActPrice = 0 'Later- might want to store average package price
                            End If
                            Exit Do
                        End If
                    End If
                    ilCff = tgCffCntr(ilCff).iNextCff
                Loop
            End If
        Next llDate
    Else
        ilMnfSocEco = 0
        If Contract.lbcDemo(0).ListIndex >= 1 Then
            slNameCode = tgDemoCode(Contract.lbcDemo(0).ListIndex - 1).sKey  'Traffic!lbcDemoCode.List(lbcDemo(ilLoop).ListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilMnfDemo = CInt(slCode)
        Else
            ilMnfDemo = 0
        End If
        If slStdPrice = "A" Then
            gUnpackDateLong tgSpf.iReallDate(0), tgSpf.iReallDate(1), llReallDate
            'If (Contract.lbcBillCycle.ListIndex = 1) Then   'Or (Contract.lbcBillCycle.ListIndex = 3) Then
            '    gUnpackDate tgSpf.iBLastCalMnth(0), tgSpf.iBLastCalMnth(1), slBDate
            '    If slBDate <> "" Then
            '        slBDate = gObtainEndCal(slBDate)
            '    End If
            'Else
            '    gUnpackDate tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), slBDate
            '    If slBDate <> "" Then
            '        slBDate = gObtainEndStd(slBDate)
            '    End If
            'End If
            If (Contract.lbcBillCycle.ListIndex >= 0) And (Contract.lbcBillCycle.ListIndex <= 2) Then
                slStr = Left(Contract.lbcBillCycle.List(Contract.lbcBillCycle.ListIndex), 1)
                If slStr = "C" Then
                    gUnpackDate tgSpf.iBLastCalMnth(0), tgSpf.iBLastCalMnth(1), slBDate
                    If slBDate <> "" Then
                        slBDate = gObtainEndCal(slBDate)
                    End If
                ElseIf slStr = "W" Then
                    gUnpackDate tgSaf(0).iBLastWeeklyDate(0), tgSaf(0).iBLastWeeklyDate(1), slBDate
                    If (slBDate <> "") And (gDateValue(slDate) <> gDateValue("1/1/1990")) Then
                        slBDate = gObtainNextSunday(slDate)
                    Else
                        slBDate = ""
                    End If
                Else
                    gUnpackDate tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), slBDate
                    If slBDate <> "" Then
                        slBDate = gObtainEndStd(slBDate)
                    End If
                End If
            Else
                slBDate = ""
            End If
            If Trim$(slBDate) <> "" Then
                llBDate = gDateValue(slBDate)
                If llBDate > llReallDate Then
                    llReallDate = llBDate
                End If
            End If
        Else
            llReallDate = 0
        End If
        'Distribute Package price to hidden lines
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If tgPackLn(ilLoop).iLineNo = tgClfCntr(ilPkLnRowNo - 1).ClfRec.iLine Then
                'gFindMatch smLnSave(1, ilPkLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
                'If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                '    Exit For
                'End If
                'slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
                'ilRet = gParseItem(slNameCode, 2, "\", slCode)
                'ilVefCode = CInt(slCode)
                ilVefCode = 0
                For ilVef = LBound(tgPackVeh) To UBound(tgPackVeh) - 1 Step 1
                    If StrComp(Trim$(smLnSave(1, ilPkLnRowNo)), Trim$(tgPackVeh(ilVef).sName), 1) = 0 Then
                        ilVefCode = tgPackVeh(ilVef).iCode
                        Exit For
                    End If
                Next ilVef
                'slStdPrice = ""
                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                '    If tgMVef(ilVef).iCode = ilVefCode Then
                '        slStdPrice = tgMVef(ilVef).sStdPrice
                '        Exit For
                '    End If
                'Next ilVef
                If Not tgClfCntr(ilPkLnRowNo - 1).iCancel Then
                    For llDate = llPkStartDate To llPkEndDate Step 7
                        ilAirWk = False
                        llWkPrice = 0
                        ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                        Do While ilCff <> -1
                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                llFlStartDate = tgCffCntr(ilCff).lStartDate
                                llFlEndDate = tgCffCntr(ilCff).lEndDate
                                If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                                    ilAirWk = True
                                    If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                        llSpots = 0
                                        For ilDay = 0 To 6 Step 1
                                            If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                            End If
                                        Next ilDay
                                    Else
                                        llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                    End If
                                    Select Case tgCffCntr(ilCff).CffRec.sPriceType
                                        Case "T"
                                            llPrice = tgCffCntr(ilCff).CffRec.lActPrice
                                        Case Else
                                            llPrice = 0
                                    End Select
                                    llWkPrice = llPrice
                                    llWkSpotPrice = llSpots * llPrice
                                    Exit Do
                                End If
                            End If
                            ilCff = tgCffCntr(ilCff).iNextCff
                        Loop
                        If (slStdPrice = "A") And (llDate < llReallDate) Then
                            ilAirWk = False
                        End If
                        If ilAirWk Then
                            llWkSpots = 0
                            ilRWkSpots = 0
                            llWkAvgAud = 0
                            ilNoAudLn = 0
                            ilAnyRated = False
                            ilIndex = tgPackLn(ilLoop).iIndex
                            Do While ilIndex >= 0
                                For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                    If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                        If Not tgClfCntr(ilClf).iCancel Then

                                            gFindMatch smLnSave(1, ilClf + 1), 0, Contract.lbcLnVehicle(igTabMapIndex)
                                            If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                                                Exit For
                                            End If
                                            slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
                                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                            ilVefCode = CInt(slCode)
                                            ilRdfCode = imLnSave(1, ilClf + 1)
                                            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                            '    gFindMatch smLnSave(1, ilPkLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
                                            '    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                                            '        Exit For
                                            '    End If
                                            '    slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
                                            '    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                            '    ilVefCode = CInt(slCode)
                                            'Next ilVef

                                            ilCff = tgClfCntr(ilClf).iFirstCff
                                            Do While ilCff <> -1
                                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                                                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                                                    If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                                                        ilNoAudLn = ilNoAudLn + 1
                                                        For ilDay = 0 To 6 Step 1
                                                            ilAudDays(ilDay) = False
                                                        Next ilDay
                                                        If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                            llSpots = 0
                                                            For ilDay = 0 To 6 Step 1
                                                                If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                                    llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                                    If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                                                        ilAudDays(ilDay) = True
                                                                    End If
                                                                End If
                                                            Next ilDay
                                                        Else
                                                            llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                            For ilDay = 0 To 6 Step 1
                                                                If tgCffCntr(ilCff).CffRec.iDay(ilDay) > 0 Then
                                                                    ilAudDays(ilDay) = True
                                                                End If
                                                            Next ilDay
                                                        End If
                                                        llWkSpots = llWkSpots + llSpots
                                                        If Not ilBypassEPriceComp Then
                                                            'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                                            '    If tgMVef(ilVef).iCode = ilVefCode Then
                                                                ilVef = gBinarySearchVef(ilVefCode)
                                                                If ilVef <> -1 Then
                                                                    If tgMVef(ilVef).iMnfVehGp5Rsch > 0 Then
                                                                        For ilLp = LBound(tmRatedGp) To UBound(tmRatedGp) - 1 Step 1
                                                                            If tgMVef(ilVef).iMnfVehGp5Rsch = tmRatedGp(ilLp).iMnfVehGp5Rsch Then
                                                                                If tmRatedGp(ilLp).sRated <> "Y" Then
                                                                                    llSpots = 0
                                                                                Else
                                                                                    ilAnyRated = True
                                                                                End If
                                                                                Exit For
                                                                            End If
                                                                        Next ilLp
                                                                    End If
                                                                    'Exit For
                                                                End If
                                                            'Next ilVef
                                                        End If
                                                        ilRWkSpots = ilRWkSpots + llSpots
                                                        'If using Audience for distribution- get values
                                                        If slStdPrice = "A" Then
                                                            llAvgAud = 0
                                                            llOvStartTime = 0
                                                            llOvEndTime = 0
                                                            If (tgCffCntr(ilCff).CffRec.sPriceType = "T") Or (tgCffCntr(ilCff).CffRec.sPriceType = "*") Then
                                                                If (imLnSave(4, ilClf + 1) = 1) Then
                                                                    llOvStartTime = gTimeToLong(smLnSave(2, ilClf + 1), False)
                                                                    llOvEndTime = gTimeToLong(smLnSave(3, ilClf + 1), True)
                                                                End If
                                                                If tgSpf.iReallMnfDemo <= 0 Then
                                                                    'If tgClfCntr(ilClf).ClfRec.iDnfCode > 0 Then
                                                                    '    If (ilMnfDemo > 0) Then
                                                                    '        ilRet = gGetDemoAvgAud(hlDrf, hlMnf, tgClfCntr(ilClf).ClfRec.iDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, ilRdfCode, llOvStartTime, llOvEndTime, ilAudDays(), llAvgAud)
                                                                    '    End If
                                                                    'Else
                                                                        'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                                                        '    If tgMVef(ilVef).iCode = ilVefCode Then
                                                                            ilVef = gBinarySearchVef(ilVefCode)
                                                                            If ilVef <> -1 Then
                                                                                If (tgMVef(ilVef).iReallDnfCode > 0) And (ilMnfDemo > 0) Then
                                                                                    ilPassDnfCode = tgMVef(ilVef).iReallDnfCode
                                                                                    slStr = mGetLineType(ilClf + 1)
                                                                                    llRafCode = mGetRafCode(ilClf + 1, tlRegionCode())
                                                                                    ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilPassDnfCode, ilVefCode, ilMnfSocEco, ilMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilAudDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                                                                                End If
                                                                                'Exit For
                                                                            End If
                                                                        'Next ilVef
                                                                    'End If
                                                                Else
                                                                    'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                                                    '    If tgMVef(ilVef).iCode = ilVefCode Then
                                                                        ilVef = gBinarySearchVef(ilVefCode)
                                                                        If ilVef <> -1 Then
                                                                            If (tgMVef(ilVef).iReallDnfCode > 0) And (tgSpf.iReallMnfDemo > 0) Then
                                                                                ilPassDnfCode = tgMVef(ilVef).iReallDnfCode
                                                                                slStr = mGetLineType(ilClf + 1)
                                                                                llRafCode = mGetRafCode(ilClf + 1, tlRegionCode())
                                                                                ilRet = gGetDemoAvgAud(hlDrf, hlMnf, hlDpf, hlDef, hlRaf, ilPassDnfCode, ilVefCode, ilMnfSocEco, tgSpf.iReallMnfDemo, llDate, llDate, ilRdfCode, llOvStartTime, llOvEndTime, ilAudDays(), slStr, llRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                                                                            End If
                                                                            'Exit For
                                                                        End If
                                                                    'Next ilVef
                                                                End If
                                                            Else
                                                                ilNoAudLn = ilNoAudLn - 1
                                                                llWkSpots = llWkSpots - llSpots
                                                                ilRWkSpots = ilRWkSpots - llSpots
                                                            End If
                                                            tgCffCntr(ilCff).lAvgAud = llAvgAud
                                                            llWkAvgAud = llWkAvgAud + llSpots * llAvgAud
                                                        End If
                                                        Exit Do
                                                    End If
                                                End If
                                                ilCff = tgCffCntr(ilCff).iNextCff
                                            Loop
                                        End If
                                        Exit For
                                    End If
                                Next ilClf
                                ilIndex = tgPackLn(ilIndex).iIndex
                            Loop
                            If (Not ilAnyRated) Then
                                If llWkPrice > 0 Then
                                    ilRWkSpots = llWkSpots
                                Else
                                    ilAnyRated = True
                                End If
                            End If

                            ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                            Do While ilCff <> -1
                                If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                    slPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                                    llFlStartDate = tgCffCntr(ilCff).lStartDate
                                    llFlEndDate = tgCffCntr(ilCff).lEndDate
                                    If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                                        'Test if week needs to be added
                                        If (slLineType = "O") Then
                                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                llSpots = 0
                                                For ilDay = 0 To 6 Step 1
                                                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                        llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                    End If
                                                Next ilDay
                                            Else
                                                llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                            End If
                                        End If
                                        If llFlStartDate + 6 < llFlEndDate Then
                                            mGetFlightDays ilPkLnRowNo, ilOVDays()
                                            mGetFlightDaysForDate ilPkLnRowNo, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
                                            'mAddWeek ilLastCff, ilPkLnRowNo, llDate, llWkSpots, ilDays()
                                            If (slLineType = "O") And (llSpots > 0) Then
                                                If slWDFlag = "D" Then
                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llSpots, ilDailySpots()
                                                Else
                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llSpots, ilDays()
                                                End If
                                            Else
                                                If slWDFlag = "D" Then
                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llWkSpots, ilDailySpots()
                                                Else
                                                    mAddWeek ilLastCff, ilPkLnRowNo, llDate, slWDFlag, llWkSpots, ilDays()
                                                End If
                                            End If
                                        End If
                                        ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
                                        Do While ilCff <> -1
                                            If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                                llFlStartDate = tgCffCntr(ilCff).lStartDate
                                                llFlEndDate = tgCffCntr(ilCff).lEndDate
                                                If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                                                    If slPriceType = "*" Then
                                                        tgCffCntr(ilCff).CffRec.sPriceType = "T"
                                                    Else
                                                        tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
                                                    End If
                                                    If llWkSpots > 0 Then
                                                        tgCffCntr(ilCff).CffRec.lActPrice = llWkPrice
                                                    Else
                                                        tgCffCntr(ilCff).CffRec.lActPrice = 0
                                                    End If
                                                    'tgCffCntr(ilCff).CffRec.iSpotsWk = llWkSpots
                                                    If (slLineType = "O") And (llSpots > 0) Then
                                                        tgCffCntr(ilCff).CffRec.iSpotsWk = llSpots
                                                    Else
                                                        tgCffCntr(ilCff).CffRec.iSpotsWk = llWkSpots
                                                    End If
                                                    Exit Do
                                                End If
                                            End If
                                            ilCff = tgCffCntr(ilCff).iNextCff
                                        Loop
                                        Exit Do
                                    End If
                                End If
                                ilCff = tgCffCntr(ilCff).iNextCff
                            Loop
                            If Not ilBypassEPriceComp Then
                                ilIndex = tgPackLn(ilLoop).iIndex
                                Do While ilIndex >= 0
                                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                                            If Not tgClfCntr(ilClf).iCancel Then

                                                gFindMatch smLnSave(1, ilClf + 1), 0, Contract.lbcLnVehicle(igTabMapIndex)
                                                If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                                                    Exit For
                                                End If
                                                slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
                                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                                ilVefCode = CInt(slCode)
                                                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                                '    gFindMatch smLnSave(1, ilPkLnRowNo), 0, Contract.lbcLnVehicle(igTabMapIndex)
                                                '    If gLastFound(Contract.lbcLnVehicle(igTabMapIndex)) < 0 Then
                                                '        Exit For
                                                '    End If
                                                '    slNameCode = tmVehicleCode(gLastFound(Contract.lbcLnVehicle(igTabMapIndex))).sKey   'Contract.lbcVehicle.List(gLastFound(Contract.lbcLnVehicle(igTabMapIndex)))
                                                '    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                                '    ilVefCode = CInt(slCode)
                                                'Next ilVef

                                                ilCff = tgClfCntr(ilClf).iFirstCff
                                                Do While ilCff <> -1
                                                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                                                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                                                        slPriceType = tgCffCntr(ilCff).CffRec.sPriceType
                                                        If (llFlEndDate >= llDate) And (llFlStartDate <= llDate + 6) Then
                                                            If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                                                                llSpots = 0
                                                                For ilDay = 0 To 6 Step 1
                                                                    If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                                                                        llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                                                                    End If
                                                                Next ilDay
                                                            Else
                                                                llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                                                            End If
                                                            ilRated = True
                                                            If ilAnyRated Then
                                                                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                                                '    If tgMVef(ilVef).iCode = ilVefCode Then
                                                                    ilVef = gBinarySearchVef(ilVefCode)
                                                                    If ilVef <> -1 Then
                                                                        If tgMVef(ilVef).iMnfVehGp5Rsch > 0 Then
                                                                            For ilLp = LBound(tmRatedGp) To UBound(tmRatedGp) - 1 Step 1
                                                                                If tgMVef(ilVef).iMnfVehGp5Rsch = tmRatedGp(ilLp).iMnfVehGp5Rsch Then
                                                                                    If tmRatedGp(ilLp).sRated <> "Y" Then
                                                                                        ilRated = False
                                                                                    End If
                                                                                    Exit For
                                                                                End If
                                                                            Next ilLp
                                                                        End If
                                                                        'Exit For
                                                                    End If
                                                                'Next ilVef
                                                            End If
                                                            If slStdPrice = "A" Then
                                                                If (slPriceType = "T") Or (slPriceType = "*") Then
                                                                    If (ilRated) And (llWkAvgAud > 0) Then
                                                                        llSpotPrice = (CSng(llWkSpotPrice) * tgCffCntr(ilCff).lAvgAud) / llWkAvgAud
                                                                    ElseIf (ilRated) And (llWkAvgAud = 0) And (ilRWkSpots > 0) Then
                                                                        'Distribute evenly
                                                                        llSpotPrice = llWkSpotPrice / ilRWkSpots
                                                                    Else
                                                                        llSpotPrice = 0
                                                                    End If
                                                                Else
                                                                    llSpotPrice = 0
                                                                End If
                                                            Else
                                                                If (ilRated) And (ilRWkSpots > 0) Then
                                                                    llSpotPrice = llWkPrice / ilRWkSpots
                                                                Else
                                                                    llSpotPrice = 0
                                                                End If
                                                            End If
                                                            'Test if week needs to be added
                                                            If llFlStartDate + 6 >= llFlEndDate Then
                                                                If slPriceType = "*" Then
                                                                    tgCffCntr(ilCff).CffRec.sPriceType = "T"
                                                                Else
                                                                    tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
                                                                End If
                                                                tgCffCntr(ilCff).CffRec.lActPrice = llSpotPrice
                                                            Else
                                                                'Add Week
                                                                mGetFlightDays ilClf + 1, ilOVDays()
                                                                mGetFlightDaysForDate ilClf + 1, llDate, ilOVDays(), ilDays(), slWDFlag, ilDailySpots(), llWkNoSpots
                                                                If slWDFlag = "D" Then
                                                                    mAddWeek ilLastCff, ilClf + 1, llDate, slWDFlag, llSpots, ilDailySpots()
                                                                Else
                                                                    mAddWeek ilLastCff, ilClf + 1, llDate, slWDFlag, llSpots, ilDays()
                                                                End If
                                                                ilCff = tgClfCntr(ilClf).iFirstCff
                                                                Do While ilCff <> -1
                                                                    If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
                                                                        llFlStartDate = tgCffCntr(ilCff).lStartDate
                                                                        llFlEndDate = tgCffCntr(ilCff).lEndDate
                                                                        If (llDate >= llFlStartDate) And (llDate <= llFlEndDate) Then
                                                                            If slPriceType = "*" Then
                                                                                tgCffCntr(ilCff).CffRec.sPriceType = "T"
                                                                            Else
                                                                                tgCffCntr(ilCff).CffRec.sPriceType = slPriceType
                                                                            End If
                                                                            tgCffCntr(ilCff).CffRec.lActPrice = llSpotPrice
                                                                            Exit Do
                                                                        End If
                                                                    End If
                                                                    ilCff = tgCffCntr(ilCff).iNextCff
                                                                Loop
                                                            End If
                                                            mInitLnTotals ilClf + 1, ilLnTotalType, ilPRICEINDEX
                                                            Exit Do
                                                        End If
                                                    End If
                                                    ilCff = tgCffCntr(ilCff).iNextCff
                                                Loop
                                            End If
                                            Exit For
                                        End If
                                    Next ilClf
                                    ilIndex = tgPackLn(ilIndex).iIndex
                                Loop
                            End If
                        End If
                    Next llDate
                End If
                Exit For
            End If
        Next ilLoop
    End If
    'llTotalPrice = 0
    slTotalPrice = ".00"
    llTotalSpots = 0
    ilCff = tgClfCntr(ilPkLnRowNo - 1).iFirstCff
    Do While ilCff <> -1
        If (tgCffCntr(ilCff).iStatus = 0) Or (tgCffCntr(ilCff).iStatus = 1) Then
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iStartDate(0), tgCffCntr(ilCff).CffRec.iStartDate(1), llFlStartDate    'Week Start date
            'gUnpackDateLong tgCffCntr(ilCff).CffRec.iEndDate(0), tgCffCntr(ilCff).CffRec.iEndDate(1), llFlEndDate    'Week Start date
            llFlStartDate = tgCffCntr(ilCff).lStartDate
            llFlEndDate = tgCffCntr(ilCff).lEndDate
            llMoFlStartdate = llFlStartDate
            Do While gWeekDayLong(llMoFlStartdate) <> 0
                llMoFlStartdate = llMoFlStartdate - 1
            Loop
            For llDate = llMoFlStartdate To llFlEndDate Step 7
                If tgCffCntr(ilCff).CffRec.sDyWk = "D" Then
                    llSpots = 0
                    For ilDay = 0 To 6 Step 1
                        If (llDate + ilDay >= llFlStartDate) And (llDate + ilDay <= llFlEndDate) Then
                            llSpots = llSpots + tgCffCntr(ilCff).CffRec.iDay(ilDay)
                        End If
                    Next ilDay
                Else
                    llSpots = tgCffCntr(ilCff).CffRec.iSpotsWk + tgCffCntr(ilCff).CffRec.iXSpotsWk
                End If
                Select Case tgCffCntr(ilCff).CffRec.sPriceType
                    Case "T"
                        llPrice = tgCffCntr(ilCff).CffRec.lActPrice
                    Case Else
                        llPrice = 0
                End Select
                'llTotalPrice = llTotalPrice + llPrice * llSpots
                If mGetPkLineType(ilPkLnRowNo) <> "E" Then
                    slWkPrice = gMulStr(gLongToStrDec(llSpots, 0), gLongToStrDec(llPrice, 2))
                Else
                    slWkPrice = gLongToStrDec(llPrice, 2)
                End If
                slTotalPrice = gAddStr(slTotalPrice, slWkPrice)
                llTotalSpots = llTotalSpots + llSpots
            Next llDate
        End If
        ilCff = tgCffCntr(ilCff).iNextCff
    Loop
    smLnSave(18, ilPkLnRowNo) = slTotalPrice    'gLongToStrDec(llTotalPrice, 2)
    'imLnSave(11, ilPkLnRowNo) = ilTotalSpots
    smLnSave(23, ilPkLnRowNo) = Trim$(str$(llTotalSpots))
End Sub

Public Function mPackageHiddenLenMatch(ilLnRowNo As Integer, ilPackageLen As Integer) As Integer
    'Dan for more, see 10929 where I duplicated for digital lines
    'Return: 0 = All lengths match and length exist in all hidden vehicles
    '        1 = Not all lengths match the package length
    '        2 = Length varies across the hidden lines
    '        3 = Length does not exist with the hidden vehicle
    Dim slLineType As String
    Dim ilPkLineNo As Integer
    Dim ilLoop As Integer
    Dim ilClf As Integer
    Dim ilIndex As Integer
    Dim ilReturn As Integer
    Dim ilVefCode As Integer
    Dim ilVpfIndex As Integer
    Dim ilLen As Integer
    Dim ilVpf As Integer
    Dim ilTerminate As Integer
    Dim ilLenFd As Integer
    Dim ilLenHide As Integer
    
    ilReturn = 0
    If ilLnRowNo <= 0 Then
        mPackageHiddenLenMatch = ilReturn
        Exit Function
    End If
    ilLenHide = -1
    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType = "A") Or (slLineType = "O") Or (slLineType = "E") Then
        ilPkLineNo = tgClfCntr(ilLnRowNo - 1).ClfRec.iLine
        For ilLoop = LBound(tgPackLn) To UBound(tgPackLn) - 1 Step 1
            If (tgPackLn(ilLoop).iLineNo = ilPkLineNo) Then
                ilIndex = tgPackLn(ilLoop).iIndex
                Do While ilIndex >= 0
                    For ilClf = LBound(tgClfCntr) To UBound(tgClfCntr) - 1 Step 1
                        If tgPackLn(ilIndex).iLineNo = tgClfCntr(ilClf).ClfRec.iLine Then
                            'Test if spot length match
                            If Val(smLnSave(16, ilClf + 1)) <> ilPackageLen Then
                                If ilReturn = 0 Then
                                    ilReturn = 1
                                End If
                            End If
                            'test if hidden line length is consistent
                            If ilLenHide = -1 Then
                                ilLenHide = Val(smLnSave(16, ilClf + 1))
                            Else
                                If ilLenHide <> Val(smLnSave(16, ilClf + 1)) Then
                                    If ilReturn <= 1 Then
                                        ilReturn = 2
                                    End If
                                End If
                            End If
                            'test if spot length exist
                            If Val(smLnSave(16, ilClf + 1)) <> ilPackageLen Then
                                mCVehOptIndex ilClf + 1, ilVefCode, ilVpfIndex, ilTerminate
                                If ilVpfIndex <> -1 Then
                                    ilLenFd = False
                                    For ilVpf = LBound(tgVpf(ilVpfIndex).iSLen) To UBound(tgVpf(ilVpfIndex).iSLen) Step 1
                                        If tgVpf(ilVpfIndex).iSLen(ilVpf) = ilPackageLen Then
                                            ilLenFd = True
                                            Exit For
                                        End If
                                    Next ilVpf
                                    If Not ilLenFd Then
                                        ilReturn = 3
                                    End If
                                End If
                            End If
                            Exit For
                        End If
                    Next ilClf
                    ilIndex = tgPackLn(ilIndex).iIndex
                Loop
                Exit For
            End If
        Next ilLoop
    End If
    mPackageHiddenLenMatch = ilReturn
End Function


Public Sub gExceedLimitMsg()
    MsgBox "Contract Price or Contract Spots or Combination of Price, Spots and Audience Exceeded 21,000,000", vbOKOnly + vbExclamation, "Warning"
End Sub

Public Sub mPopListKey()
    Dim llMaxWidth As Long
    Contract.lbcComment(2).Clear
    Contract.lbcComment(2).AddItem "Line Color"
    Contract.lbcComment(2).AddItem "     Blue: Package and Hidden Lines"
    Contract.lbcComment(2).AddItem "     Magenta Line #: High Priority"
    Contract.lbcComment(2).AddItem "     Purple: Line Not Ready to be Saved"
    Contract.lbcComment(2).AddItem "     Red: Dormant Vehicle"
    Contract.lbcComment(2).AddItem "Background Color"
    Contract.lbcComment(2).AddItem "     Light Blue: Working with Proposals"
    Contract.lbcComment(2).AddItem "     Green: Working with Orders"
    Contract.lbcComment(2).AddItem "     Yellow: Viewing Proposals and Orders; No Change Allowed"
    Contract.lbcComment(2).AddItem "Week Date Color"
    Contract.lbcComment(2).AddItem "     Blue: First Quarter"
    Contract.lbcComment(2).AddItem "     Magenta: Second Quarter"
    Contract.lbcComment(2).AddItem "     Dark Green: Third Quarter"
    Contract.lbcComment(2).AddItem "     Red: Fourth Quarter"
    Contract.lbcComment(2).AddItem "Air Time Spot Color or Rep Vehicle"
    Contract.lbcComment(2).AddItem "     Blue or Black: Part of Air Week or All of Air Week in Future "
    Contract.lbcComment(2).AddItem "                    of Today's Date and Last Log Date"
    Contract.lbcComment(2).AddItem "     Red: Air Date in Past"
    Contract.lbcComment(2).AddItem "     Magenta: Air Date prior to Last Generated Log"
    Contract.lbcComment(2).AddItem "Avail Spot Color for Non-Rep Vehicles"
    Contract.lbcComment(2).AddItem "     Green: All spots will book"
    Contract.lbcComment(2).AddItem "     Orange: Some spots will book"
    Contract.lbcComment(2).AddItem "     Red: No spots will book"
    Contract.lbcComment(2).AddItem "     Black: Package Line and Non-Package Lines Past Dates"
    Contract.lbcComment(2).AddItem "Protection Spot Color for Non-Rep Vehicles"
    Contract.lbcComment(2).AddItem "     Green: All spots will book"
    Contract.lbcComment(2).AddItem "     Orange: Some spots will book"
    Contract.lbcComment(2).AddItem "     Red: No spots will book"
    Contract.lbcComment(2).AddItem "     Black: Package Line"
    Contract.lbcComment(2).AddItem "Research Color"
    Contract.lbcComment(2).AddItem "     Same as Air Time Spot Color"
    Contract.lbcComment(2).AddItem "Key Short Cuts"
    Contract.lbcComment(2).AddItem "     P: Jump to Price Field"
    Contract.lbcComment(2).AddItem "     C: Jump to Comment Field"
    Contract.lbcComment(2).AddItem "Abbreviation in Override Copy Field"
    Contract.lbcComment(2).AddItem "     RC: Recorded Commercial"
    Contract.lbcComment(2).AddItem "     RP: Recorded Promo"
    Contract.lbcComment(2).AddItem "     LC: Live Commercial"
    Contract.lbcComment(2).AddItem "     LP: Live Promo"
    Contract.lbcComment(2).AddItem "     PC: Pre-recorded Live Commercial"
    Contract.lbcComment(2).AddItem "     PP: Pre-recorded Live Promo"

    
    Traffic.pbcArial.FontBold = False
    Traffic.pbcArial.FontName = "Arial"
    Traffic.pbcArial.FontBold = False
    Traffic.pbcArial.FontSize = 8
    llMaxWidth = (Traffic.pbcArial.TextWidth("     Blue or Black: Part of Air Week or All of Air Week in Future MMMMMMMMMMM")) + 180
    Contract.lbcComment(2).Width = llMaxWidth
    Contract.lbcComment(2).FontBold = False
    Contract.lbcComment(2).FontName = "Arial"
    Contract.lbcComment(2).FontBold = False
    Contract.lbcComment(2).FontSize = 8
    Contract.lbcComment(2).height = (Contract.lbcComment(2).ListCount) * 225
    Contract.lbcComment(2).height = gListBoxHeight(Contract.lbcComment(2).ListCount, 20)
    Contract.lbcComment(2).Move Contract.imcKey.Left, Contract.imcKey.Top + Contract.imcKey.height
End Sub

Public Sub mGetMajorityPopulation()
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim ilClf As Integer
    Dim ilLnRowNo As Integer
    Dim blPopFd As Boolean
    Dim slLineType As String
    ReDim llPopValue(0 To 0) As Long
    ReDim llPopCount(0 To 0) As Long
    Dim ilPop As Integer
    Dim llTotalCount As Long
    Dim ilMaxIndex As Integer
    Dim ilRet As Integer
    
    lmMajorityPopulation = -1
    llTotalCount = 0
    ilStartRow = imLB1Or2   'LBound(smLnSave, 2)
    If smLnSave(1, UBound(smLnSave, LINEBOUNDINDEX)) = "" Then
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX) - 1
    Else
        ilEndRow = UBound(smLnSave, LINEBOUNDINDEX)
    End If
    ilStartRow = ilStartRow - 1
    ilEndRow = ilEndRow - 1
    
    For ilClf = ilStartRow To ilEndRow Step 1
        ilLnRowNo = ilClf + 1
        slLineType = mGetLineType(ilLnRowNo, True)
        If (Not tgClfCntr(ilClf).iCancel) And ((slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E")) Then
            If tgClfCntr(ilClf).lPop > 0 Then
                blPopFd = False
                For ilPop = 0 To UBound(llPopValue) - 1 Step 1
                    If llPopValue(ilPop) = tgClfCntr(ilClf).lPop Then
                        llPopCount(ilPop) = llPopCount(ilPop) + 1
                        llTotalCount = llTotalCount + 1
                        blPopFd = True
                        Exit For
                    End If
                Next ilPop
                If Not blPopFd Then
                    llPopValue(UBound(llPopValue)) = tgClfCntr(ilClf).lPop
                    llPopCount(UBound(llPopCount)) = 1
                    llTotalCount = llTotalCount + 1
                    ReDim Preserve llPopValue(0 To UBound(llPopValue) + 1) As Long
                    ReDim Preserve llPopCount(0 To UBound(llPopCount) + 1) As Long
                End If
            End If
        End If
    Next ilClf
    If llTotalCount > 0 Then
        If UBound(llPopValue) > 1 Then
            'Find max
            ilMaxIndex = 0
            For ilPop = 1 To UBound(llPopCount) - 1 Step 1
                If llPopCount(ilPop) > llPopCount(ilMaxIndex) Then
                    ilMaxIndex = ilPop
                End If
            Next ilPop
            lmMajorityPopulation = llPopValue(ilMaxIndex)
            If Not bmMixturePopulationMsgShown Then
                bmMixturePopulationMsgShown = True
                ilRet = MsgBox("Warning: Mixed Populations", vbOKOnly + vbExclamation, "Warning")
            End If
        Else
            lmMajorityPopulation = llPopValue(0)
        End If
    End If
End Sub

Public Function mGetDaypartGroup(ilLnRowNo As Integer, hlMnf As Integer) As String
    Dim ilRdf As Integer
    Dim ilRdfCode As Integer
    Dim slLineType As String
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilRet As Integer
    Dim ilMnfRecLen As Integer     'Mnf record length
    Dim tlMnf As MNF
    Dim tlMnfSrchKey As INTKEY0
    
    mGetDaypartGroup = ""
    'If (ilDBTotals <> 9) Then
    '    Exit Function
    'End If
    slStr = Contract.edcDBDisplay.Text
    If slStr <> "Daypart Group" Then
        Exit Function
    End If
    ilRdfCode = -1
    slLineType = mGetLineType(ilLnRowNo)
    If (slLineType <> "O") And (slLineType <> "A") And (slLineType <> "E") Then
        ilRdfCode = imLnSave(1, ilLnRowNo)
    Else
        For ilLoop = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
            If StrComp(smLnSave(20, ilLnRowNo), Trim$(tgMRdf(ilLoop).sName), 1) = 0 Then
                ilRdfCode = tgMRdf(ilLoop).iCode
                Exit For
            End If
        Next ilLoop
    End If
    ilRdf = gBinarySearchRdf(ilRdfCode)
    If ilRdf <> -1 Then
        If tgMRdf(ilRdf).iDPGroupMnfCode > 0 Then
            ilMnfRecLen = Len(tlMnf)  'btrRecordLength(hlMnf)  'Get and save record length
            tlMnfSrchKey.iCode = tgMRdf(ilRdf).iDPGroupMnfCode
            ilRet = btrGetEqual(hlMnf, tlMnf, ilMnfRecLen, tlMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet = BTRV_ERR_NONE Then
                slStr = tlMnf.iGroupNo
                Do While Len(slStr) < 3
                    slStr = "0" & slStr
                Loop
                mGetDaypartGroup = slStr & "|" & Trim$(tlMnf.sName)
            End If
        End If
    End If

End Function
Public Sub mActOneLineInfoSet(ilRowCounter As Integer, Optional blAdditionalMoveToRec As Boolean = False)
    '10256 RowCounter = the "line #"
    smLnSave(29, ilRowCounter) = sgActLineup
    imLnSave(32, ilRowCounter) = igActTime
    imLnSave(33, ilRowCounter) = igActSpots
    imLnSave(34, ilRowCounter) = igActPct
    imLnSave(35, ilRowCounter) = igActDaypart
    If blAdditionalMoveToRec Then
        mActOneSetClf ilRowCounter - 1
    End If
End Sub
Public Sub mActOneSetClf(ilClfCounter As Integer)
        If imACT1CodesDefined Then
            tgClfCntr(ilClfCounter).ClfRec.sACT1LineupCode = smLnSave(29, ilClfCounter + 1)
            If imLnSave(32, ilClfCounter + 1) = 0 Then
                tgClfCntr(ilClfCounter).ClfRec.sACT1StoredTime = "T"
            End If
            If imLnSave(33, ilClfCounter + 1) = 0 Then
                tgClfCntr(ilClfCounter).ClfRec.sACT1StoredSpots = "S"
            End If
            If imLnSave(34, ilClfCounter + 1) = 0 Then
                tgClfCntr(ilClfCounter).ClfRec.sACT1StoreClearPct = "C"
            End If
            If imLnSave(35, ilClfCounter + 1) = 0 Then
                tgClfCntr(ilClfCounter).ClfRec.sACT1DaypartFilter = "F"
            End If
        End If
End Sub
Public Function gVisibleTabNeedsResearch() As Boolean
    '10389 the test of advanceAvail is if the option to turn on 8,9, or 10 is even allowed.  Not really needed, but just in case
    Dim blRet As Boolean
    blRet = False
    If Contract.plcDemoBar.Visible Or ((Contract.imTscLineIndex = 8 Or Contract.imTscLineIndex = 9 Or Contract.imTscLineIndex = 10) And tgSaf(0).sAdvanceAvail = "Y") Then
        blRet = True
    End If
    gVisibleTabNeedsResearch = blRet
End Function
Private Function mGetSBFBilling(llChfCode As Long, slTranType As String) As Dictionary
    '10736  I need tlSBF.sBilled and tlSBF.lCode

    Dim tlSbf As Dictionary
    Set tlSbf = New Dictionary
    Dim slSql As String
    Dim sbf_rst As ADODB.Recordset
    Dim ilCount As Integer
    Dim llCode As Long
    Dim slBilled As String
    slSql = "Select sbfCode,sbfBilled from SBF_Special_Billing where sbfChfCode = " & llChfCode & " AND sbftrantype = '" & slTranType & "'"
    Set sbf_rst = gSQLSelectCall(slSql)
    Do While Not sbf_rst.EOF
        llCode = sbf_rst!sbfCode
        slBilled = sbf_rst!sbfBilled
        If Not tlSbf.Exists(llCode) Then
            tlSbf.Add llCode, slBilled
        End If
        sbf_rst.MoveNext
    Loop
    Set mGetSBFBilling = tlSbf
End Function
