VERSION 5.00
Object = "{C932BA88-4374-101B-A56C-00AA003668DC}#1.1#0"; "msmask32.ocx"
Begin VB.Form Collect 
   Appearance      =   0  'Flat
   BorderStyle     =   3  'Fixed Dialog
   ClientHeight    =   5985
   ClientLeft      =   6465
   ClientTop       =   3720
   ClientWidth     =   9495
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "Arial"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkMode        =   1  'Source
   LinkTopic       =   "DoneMsg"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   5985
   ScaleWidth      =   9495
   Begin VB.ListBox lbcSeason 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Collect.frx":0000
      Left            =   2490
      List            =   "Collect.frx":0002
      TabIndex        =   48
      TabStop         =   0   'False
      Top             =   1875
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.ListBox lbcEvent 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Collect.frx":0004
      Left            =   3210
      List            =   "Collect.frx":0006
      TabIndex        =   49
      TabStop         =   0   'False
      Top             =   2430
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.ListBox lbcNTRTax 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Collect.frx":0008
      Left            =   2130
      List            =   "Collect.frx":000A
      TabIndex        =   30
      TabStop         =   0   'False
      Top             =   2145
      Visible         =   0   'False
      Width           =   3705
   End
   Begin VB.ListBox lbcOnAcctVeh 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Collect.frx":000C
      Left            =   2640
      List            =   "Collect.frx":000E
      TabIndex        =   34
      TabStop         =   0   'False
      Top             =   1440
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.PictureBox plcCalendar 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1770
      Left            =   5085
      ScaleHeight     =   1740
      ScaleWidth      =   1965
      TabIndex        =   73
      TabStop         =   0   'False
      Top             =   4965
      Visible         =   0   'False
      Width           =   1995
      Begin VB.CommandButton cmcCalUp 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   8.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   225
         Left            =   1635
         TabIndex        =   77
         TabStop         =   0   'False
         Top             =   45
         Width           =   285
      End
      Begin VB.CommandButton cmcCalDn 
         Appearance      =   0  'Flat
         Caption         =   "s"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   8.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   225
         Left            =   45
         TabIndex        =   76
         TabStop         =   0   'False
         Top             =   45
         Width           =   285
      End
      Begin VB.PictureBox pbcCalendar 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ClipControls    =   0   'False
         ForeColor       =   &H00FF0000&
         Height          =   1440
         Left            =   45
         Picture         =   "Collect.frx":0010
         ScaleHeight     =   1410
         ScaleWidth      =   1845
         TabIndex        =   74
         TabStop         =   0   'False
         Top             =   255
         Width           =   1875
         Begin VB.Label lacDate 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FF0000&
            BorderStyle     =   1  'Fixed Single
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00FFFFFF&
            Height          =   240
            Left            =   510
            TabIndex        =   75
            Top             =   390
            Visible         =   0   'False
            Width           =   300
         End
      End
      Begin VB.Label lacCalName 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   210
         Left            =   315
         TabIndex        =   72
         Top             =   45
         Width           =   1305
      End
   End
   Begin VB.PictureBox plcNum 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   1170
      Left            =   3855
      ScaleHeight     =   1140
      ScaleWidth      =   1095
      TabIndex        =   83
      TabStop         =   0   'False
      Top             =   4950
      Visible         =   0   'False
      Width           =   1125
      Begin VB.PictureBox pbcNum 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         ForeColor       =   &H00FF0000&
         Height          =   1050
         Left            =   45
         Picture         =   "Collect.frx":2E2A
         ScaleHeight     =   1050
         ScaleWidth      =   1020
         TabIndex        =   84
         TabStop         =   0   'False
         Top             =   45
         Width           =   1020
         Begin VB.Image imcNumInv 
            Appearance      =   0  'Flat
            Enabled         =   0   'False
            Height          =   480
            Left            =   300
            Picture         =   "Collect.frx":399C
            Top             =   255
            Visible         =   0   'False
            Width           =   480
         End
         Begin VB.Image imcNumOutline 
            Appearance      =   0  'Flat
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            Height          =   285
            Left            =   0
            Top             =   15
            Visible         =   0   'False
            Width           =   360
         End
      End
   End
   Begin VB.PictureBox pbcKey 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   2745
      Left            =   345
      Picture         =   "Collect.frx":3CA6
      ScaleHeight     =   2715
      ScaleWidth      =   7890
      TabIndex        =   86
      TabStop         =   0   'False
      Top             =   5400
      Visible         =   0   'False
      Width           =   7920
   End
   Begin VB.PictureBox pbcPostBy 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BeginProperty Font 
         Name            =   "Arial"
         Size            =   6
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   180
      Left            =   6780
      ScaleHeight     =   150
      ScaleWidth      =   1005
      TabIndex        =   35
      TabStop         =   0   'False
      Top             =   1170
      Visible         =   0   'False
      Width           =   1035
   End
   Begin VB.TextBox edcTranComment 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   1155
      HelpContextID   =   8
      Left            =   8340
      MultiLine       =   -1  'True
      ScrollBars      =   2  'Vertical
      TabIndex        =   37
      Top             =   1920
      Visible         =   0   'False
      Width           =   4515
   End
   Begin VB.ListBox lbcNTRType 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   300
      TabIndex        =   27
      TabStop         =   0   'False
      Top             =   4890
      Visible         =   0   'False
      Width           =   2850
   End
   Begin VB.PictureBox pbcArrow 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      ClipControls    =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   180
      Left            =   30
      Picture         =   "Collect.frx":49A04
      ScaleHeight     =   180
      ScaleWidth      =   105
      TabIndex        =   38
      TabStop         =   0   'False
      Top             =   1515
      Visible         =   0   'False
      Width           =   105
   End
   Begin VB.ListBox lbcSSPart 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1005
      TabIndex        =   47
      TabStop         =   0   'False
      Top             =   5175
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.PictureBox plcRvfInfo 
      BackColor       =   &H00FFFF80&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   1110
      Left            =   2040
      ScaleHeight     =   1050
      ScaleWidth      =   8025
      TabIndex        =   87
      TabStop         =   0   'False
      Top             =   4680
      Visible         =   0   'False
      Width           =   8085
      Begin VB.Label lacRvfInfo 
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H00FFFF80&
         Caption         =   "Comment if teams exist"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   195
         Index           =   4
         Left            =   90
         TabIndex        =   101
         Top             =   795
         Width           =   7845
         WordWrap        =   -1  'True
      End
      Begin VB.Label lacRvfInfo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF80&
         Caption         =   "Contract #: xxxxxx  Check #  Transaction: Date xx/xx/xx  Type xx  Action  xx"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   2
         Left            =   90
         TabIndex        =   97
         Top             =   405
         Width           =   7845
      End
      Begin VB.Label lacRvfInfo 
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H00FFFF80&
         Caption         =   "Teams if exist otherwise Comment"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   195
         Index           =   3
         Left            =   90
         TabIndex        =   96
         Top             =   600
         Width           =   7845
         WordWrap        =   -1  'True
      End
      Begin VB.Label lacRvfInfo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF80&
         Caption         =   "Invoice #: xxxxxx  Vehicle Name:"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   0
         Left            =   90
         TabIndex        =   88
         Top             =   15
         Width           =   7890
      End
      Begin VB.Label lacRvfInfo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF80&
         Caption         =   "Contract #: xxxxxx  Check #  Transaction: Date xx/xx/xx  Type xx  Action  xx"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   1
         Left            =   90
         TabIndex        =   89
         Top             =   210
         Width           =   7845
      End
   End
   Begin VB.ListBox lbcVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   6810
      TabIndex        =   31
      TabStop         =   0   'False
      Top             =   2895
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcStatAgency 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5385
      TabIndex        =   92
      TabStop         =   0   'False
      Top             =   5070
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcStatAdvt 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5415
      TabIndex        =   91
      TabStop         =   0   'False
      Top             =   5400
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcBDDate 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   4755
      TabIndex        =   36
      TabStop         =   0   'False
      Top             =   930
      Visible         =   0   'False
      Width           =   4290
   End
   Begin VB.ListBox lbcCashTrade 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6960
      TabIndex        =   22
      TabStop         =   0   'False
      Top             =   2595
      Visible         =   0   'False
      Width           =   2445
   End
   Begin VB.ListBox lbcAction 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Collect.frx":49D0E
      Left            =   7485
      List            =   "Collect.frx":49D10
      TabIndex        =   25
      TabStop         =   0   'False
      Top             =   2460
      Visible         =   0   'False
      Width           =   2115
   End
   Begin VB.ListBox lbcTranType 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5040
      TabIndex        =   26
      TabStop         =   0   'False
      Top             =   3780
      Visible         =   0   'False
      Width           =   2850
   End
   Begin VB.ListBox lbcProd 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6585
      TabIndex        =   28
      TabStop         =   0   'False
      Top             =   2715
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcVehicle 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   4455
      TabIndex        =   29
      TabStop         =   0   'False
      Top             =   1605
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcSalesperson 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   7440
      TabIndex        =   32
      TabStop         =   0   'False
      Top             =   2190
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcAdvertiser 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   3000
      TabIndex        =   33
      TabStop         =   0   'False
      Top             =   1080
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcAdvt 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1965
      TabIndex        =   46
      TabStop         =   0   'False
      Top             =   4095
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcAgency 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   465
      TabIndex        =   50
      TabStop         =   0   'False
      Top             =   4875
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcPayables 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   3420
      TabIndex        =   60
      TabStop         =   0   'False
      Top             =   4215
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcPaymRating 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1605
      TabIndex        =   58
      TabStop         =   0   'False
      Top             =   4275
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcCreditRestr 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   2985
      TabIndex        =   57
      TabStop         =   0   'False
      Top             =   4335
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.TextBox edcInfoDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   2505
      MaxLength       =   20
      TabIndex        =   55
      TabStop         =   0   'False
      Top             =   4185
      Visible         =   0   'False
      Width           =   2310
   End
   Begin VB.CommandButton cmcInfoDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1500
      Picture         =   "Collect.frx":49D12
      TabIndex        =   56
      TabStop         =   0   'False
      Top             =   4815
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.TextBox edcInputComment 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   1155
      HelpContextID   =   8
      Left            =   3030
      MultiLine       =   -1  'True
      ScrollBars      =   2  'Vertical
      TabIndex        =   45
      Top             =   3525
      Visible         =   0   'False
      Width           =   4515
   End
   Begin VB.CommandButton cmcInvoice 
      Appearance      =   0  'Flat
      Caption         =   "In&voice # ?"
      Height          =   270
      Left            =   8220
      TabIndex        =   70
      Top             =   5385
      Width           =   1230
   End
   Begin VB.CommandButton cmcReport 
      Appearance      =   0  'Flat
      Caption         =   "&Report"
      Height          =   270
      Left            =   8220
      TabIndex        =   69
      Top             =   5100
      Width           =   1230
   End
   Begin VB.CommandButton cmcUndo 
      Appearance      =   0  'Flat
      Caption         =   "&Undo"
      Enabled         =   0   'False
      Height          =   270
      Left            =   8220
      TabIndex        =   68
      Top             =   4815
      Width           =   1230
   End
   Begin VB.CommandButton cmcZeroPurge 
      Appearance      =   0  'Flat
      Caption         =   "&Zero-Purge"
      Height          =   270
      Left            =   8220
      TabIndex        =   67
      Top             =   4530
      Width           =   1230
   End
   Begin VB.CommandButton cmcReconcile 
      Appearance      =   0  'Flat
      Caption         =   "R&econcile"
      Height          =   270
      Left            =   8220
      TabIndex        =   66
      Top             =   4245
      Width           =   1230
   End
   Begin VB.CommandButton cmcDone 
      Appearance      =   0  'Flat
      Caption         =   "&Done"
      Height          =   270
      Left            =   8220
      TabIndex        =   63
      Top             =   3390
      Width           =   1230
   End
   Begin VB.CommandButton cmcUpdate 
      Appearance      =   0  'Flat
      Caption         =   "&Save"
      Enabled         =   0   'False
      Height          =   270
      Left            =   8220
      TabIndex        =   65
      Top             =   3960
      Width           =   1230
   End
   Begin VB.CommandButton cmcCancel 
      Appearance      =   0  'Flat
      Caption         =   "&Cancel"
      Height          =   270
      Left            =   8220
      TabIndex        =   64
      Top             =   3675
      Width           =   1230
   End
   Begin VB.TextBox edcDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   4545
      MaxLength       =   20
      TabIndex        =   23
      TabStop         =   0   'False
      Top             =   1665
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.CommandButton cmcDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   5535
      Picture         =   "Collect.frx":49E0C
      TabIndex        =   24
      TabStop         =   0   'False
      Top             =   1680
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.TextBox edcCashTrade 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1200
      MaxLength       =   20
      TabIndex        =   21
      TabStop         =   0   'False
      Top             =   1680
      Visible         =   0   'False
      Width           =   975
   End
   Begin VB.CommandButton cmcCommDropDown 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1140
      Picture         =   "Collect.frx":49F06
      TabIndex        =   44
      TabStop         =   0   'False
      Top             =   4350
      Visible         =   0   'False
      Width           =   195
   End
   Begin MSMask.MaskEdBox mkcPhone 
      Height          =   210
      Left            =   4335
      TabIndex        =   59
      Tag             =   "The number and extension of the buyer."
      Top             =   4515
      Visible         =   0   'False
      Width           =   2985
      _ExtentX        =   5265
      _ExtentY        =   370
      _Version        =   393216
      BorderStyle     =   0
      BackColor       =   16776960
      ForeColor       =   0
      MaxLength       =   24
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Mask            =   "(AAA) AAA-AAAA Ext(AAAA)"
      PromptChar      =   "_"
   End
   Begin VB.TextBox edcCommDropDown 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   285
      MaxLength       =   20
      TabIndex        =   43
      TabStop         =   0   'False
      Top             =   4065
      Visible         =   0   'False
      Width           =   1095
   End
   Begin VB.ListBox lbcBDSort 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   2730
      Sorted          =   -1  'True
      TabIndex        =   85
      TabStop         =   0   'False
      Top             =   -45
      Visible         =   0   'False
      Width           =   1575
   End
   Begin VB.PictureBox pbcTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   90
      Left            =   0
      ScaleHeight     =   90
      ScaleWidth      =   90
      TabIndex        =   39
      Top             =   3000
      Width           =   90
   End
   Begin VB.PictureBox pbcSTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   75
      Left            =   15
      ScaleHeight     =   75
      ScaleWidth      =   75
      TabIndex        =   6
      Top             =   960
      Width           =   75
   End
   Begin VB.PictureBox plcScreen 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      ForeColor       =   &H00000000&
      Height          =   240
      Left            =   15
      ScaleHeight     =   240
      ScaleWidth      =   855
      TabIndex        =   0
      TabStop         =   0   'False
      Top             =   -30
      Width           =   855
   End
   Begin VB.PictureBox plcSelect 
      ForeColor       =   &H00000000&
      Height          =   345
      Left            =   870
      ScaleHeight     =   285
      ScaleWidth      =   8520
      TabIndex        =   1
      TabStop         =   0   'False
      Top             =   30
      Width           =   8580
      Begin VB.TextBox edcCommentDate 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   3690
         MaxLength       =   10
         TabIndex        =   3
         Top             =   45
         Visible         =   0   'False
         Width           =   855
      End
      Begin VB.ComboBox cbcSelection 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   315
         Left            =   4785
         TabIndex        =   5
         Top             =   0
         Width           =   3765
      End
      Begin VB.ComboBox cbcSort 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   315
         ItemData        =   "Collect.frx":4A000
         Left            =   -15
         List            =   "Collect.frx":4A002
         TabIndex        =   2
         Top             =   0
         Width           =   3690
      End
      Begin VB.CommandButton cmcCommentDate 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   6
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   4560
         Picture         =   "Collect.frx":4A004
         TabIndex        =   4
         TabStop         =   0   'False
         Top             =   45
         Visible         =   0   'False
         Width           =   210
      End
   End
   Begin VB.PictureBox pbcClickFocus 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   165
      Left            =   1320
      ScaleHeight     =   165
      ScaleWidth      =   120
      TabIndex        =   71
      TabStop         =   0   'False
      Top             =   -15
      Width           =   120
   End
   Begin VB.PictureBox pbcInfoTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   90
      Left            =   0
      ScaleHeight     =   90
      ScaleWidth      =   15
      TabIndex        =   61
      Top             =   5880
      Width           =   15
   End
   Begin VB.TextBox edcLinkDestDoneMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   7995
      TabIndex        =   80
      TabStop         =   0   'False
      Top             =   30
      Visible         =   0   'False
      Width           =   435
   End
   Begin VB.ListBox lbcCommentCode 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6870
      Sorted          =   -1  'True
      TabIndex        =   79
      TabStop         =   0   'False
      Top             =   -60
      Visible         =   0   'False
      Width           =   1575
   End
   Begin VB.ListBox lbcSelectionCode 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6105
      Sorted          =   -1  'True
      TabIndex        =   78
      TabStop         =   0   'False
      Top             =   -60
      Visible         =   0   'False
      Width           =   1530
   End
   Begin VB.PictureBox pbcInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1095
      Left            =   135
      Picture         =   "Collect.frx":4A0FE
      ScaleHeight     =   1095
      ScaleWidth      =   8085
      TabIndex        =   54
      TabStop         =   0   'False
      Top             =   4800
      Width           =   8085
   End
   Begin VB.PictureBox pbcComment 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   375
      Left            =   135
      Picture         =   "Collect.frx":67588
      ScaleHeight     =   375
      ScaleWidth      =   8085
      TabIndex        =   42
      TabStop         =   0   'False
      Top             =   3240
      Width           =   8085
   End
   Begin VB.PictureBox plcCommStatis 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   2715
      Left            =   60
      ScaleHeight     =   2655
      ScaleWidth      =   8115
      TabIndex        =   40
      TabStop         =   0   'False
      Top             =   3195
      Width           =   8175
      Begin VB.PictureBox pbcCommentBox 
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         Height          =   960
         Left            =   0
         ScaleHeight     =   960
         ScaleWidth      =   7815
         TabIndex        =   102
         Top             =   480
         Width           =   7815
      End
      Begin VB.VScrollBar vbcCommentBox 
         Height          =   975
         Left            =   7800
         TabIndex        =   103
         Top             =   480
         Width           =   240
      End
      Begin VB.TextBox edcStatDropDown 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   1095
         MaxLength       =   40
         TabIndex        =   100
         TabStop         =   0   'False
         Top             =   1380
         Width           =   2250
      End
      Begin VB.CommandButton cmcStatDropDown 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   3375
         Picture         =   "Collect.frx":6ACF2
         TabIndex        =   99
         TabStop         =   0   'False
         Top             =   1365
         Width           =   195
      End
      Begin VB.TextBox edcComment 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         Height          =   960
         Left            =   60
         MultiLine       =   -1  'True
         ScrollBars      =   2  'Vertical
         TabIndex        =   52
         TabStop         =   0   'False
         Top             =   405
         Width           =   8070
      End
      Begin VB.Label lacStatis 
         Appearance      =   0  'Flat
         Caption         =   "Statistics for"
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   225
         Left            =   60
         TabIndex        =   98
         Top             =   1365
         Width           =   1005
      End
   End
   Begin VB.PictureBox pbcCommTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   105
      Left            =   15
      ScaleHeight     =   105
      ScaleWidth      =   75
      TabIndex        =   51
      Top             =   3795
      Width           =   75
   End
   Begin VB.PictureBox pbcInfoSTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   135
      Left            =   30
      ScaleHeight     =   135
      ScaleWidth      =   105
      TabIndex        =   53
      Top             =   3345
      Width           =   105
   End
   Begin VB.ListBox lbcAdvtCode 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5025
      Sorted          =   -1  'True
      TabIndex        =   82
      TabStop         =   0   'False
      Top             =   -225
      Visible         =   0   'False
      Width           =   945
   End
   Begin VB.ListBox lbcAgyCode 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5190
      Sorted          =   -1  'True
      TabIndex        =   81
      TabStop         =   0   'False
      Top             =   -105
      Visible         =   0   'False
      Width           =   945
   End
   Begin VB.Timer tmcClick 
      Enabled         =   0   'False
      Interval        =   6
      Left            =   7710
      Top             =   -60
   End
   Begin VB.TextBox edcLinkSrceDoneMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   4800
      TabIndex        =   95
      TabStop         =   0   'False
      Top             =   15
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.TextBox edcLinkDestHelpMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   4350
      TabIndex        =   94
      TabStop         =   0   'False
      Top             =   -15
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.TextBox edcLinkSrceHelpMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   0
      TabIndex        =   93
      Top             =   4545
      Visible         =   0   'False
      Width           =   255
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   12
      Left            =   5670
      Picture         =   "Collect.frx":6ADEC
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   19
      TabStop         =   0   'False
      Top             =   3030
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   11
      Left            =   5820
      Picture         =   "Collect.frx":B399E
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   18
      TabStop         =   0   'False
      Top             =   2895
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2145
      Index           =   10
      Left            =   6000
      Picture         =   "Collect.frx":CBE00
      ScaleHeight     =   2145
      ScaleWidth      =   8490
      TabIndex        =   17
      TabStop         =   0   'False
      Top             =   2790
      Visible         =   0   'False
      Width           =   8490
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   9
      Left            =   6105
      Picture         =   "Collect.frx":107CC2
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   16
      TabStop         =   0   'False
      Top             =   2625
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   8
      Left            =   6240
      Picture         =   "Collect.frx":150874
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   15
      TabStop         =   0   'False
      Top             =   2505
      Visible         =   0   'False
      Width           =   8730
      Begin VB.PictureBox pbcShow 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   7650
         ScaleHeight     =   180
         ScaleWidth      =   1275
         TabIndex        =   90
         TabStop         =   0   'False
         Top             =   15
         Width           =   1300
      End
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   7
      Left            =   6390
      Picture         =   "Collect.frx":168CD6
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   20
      TabStop         =   0   'False
      Top             =   2400
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   6
      Left            =   6525
      Picture         =   "Collect.frx":1B1888
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   14
      TabStop         =   0   'False
      Top             =   2280
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   5
      Left            =   6675
      Picture         =   "Collect.frx":1FA43A
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   13
      TabStop         =   0   'False
      Top             =   2160
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   4
      Left            =   6765
      Picture         =   "Collect.frx":242FEC
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   12
      TabStop         =   0   'False
      Top             =   2040
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   3
      Left            =   6960
      Picture         =   "Collect.frx":28BB9E
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   11
      TabStop         =   0   'False
      Top             =   1905
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   2
      Left            =   6900
      Picture         =   "Collect.frx":2D4750
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   10
      TabStop         =   0   'False
      Top             =   1920
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   1
      Left            =   315
      Picture         =   "Collect.frx":31D302
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   9
      TabStop         =   0   'False
      Top             =   615
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox pbcCollect 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   2550
      Index           =   0
      Left            =   300
      Picture         =   "Collect.frx":365EB4
      ScaleHeight     =   2550
      ScaleWidth      =   8730
      TabIndex        =   8
      TabStop         =   0   'False
      Top             =   720
      Visible         =   0   'False
      Width           =   8730
   End
   Begin VB.PictureBox plcCollect 
      BackColor       =   &H00FFFFFF&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   2670
      Left            =   210
      ScaleHeight     =   2610
      ScaleWidth      =   9030
      TabIndex        =   7
      TabStop         =   0   'False
      Top             =   480
      Width           =   9090
      Begin VB.VScrollBar vbcCollect 
         Height          =   2175
         LargeChange     =   7
         Left            =   8775
         TabIndex        =   62
         TabStop         =   0   'False
         Top             =   405
         Width           =   240
      End
   End
   Begin VB.PictureBox pbcCommSTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   135
      Left            =   0
      ScaleHeight     =   135
      ScaleWidth      =   150
      TabIndex        =   41
      Top             =   3180
      Width           =   150
   End
   Begin VB.Image imcKey 
      Appearance      =   0  'Flat
      Height          =   480
      Left            =   60
      Picture         =   "Collect.frx":37E316
      Top             =   195
      Width           =   480
   End
End
Attribute VB_Name = "Collect"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'******************************************************************************************
'***** VB Compress Pro 6.11.32 generated this copy of Collect.frm on Wed 6/17/09 @ 12:56 PM
'***** Mode: AutoSelect Standard Mode (Internal References Only)***************************
'******************************************************************************************

' Copyright 1993 Counterpoint Software, Inc. All rights reserved.
' Proprietary Software, Do not copy
'
' File Name: Collect.Frm
'
' Release: 1.0
'
' Description:
'   This file contains the Collection input screen code
Option Explicit
Option Compare Text
Dim tmTranTypeCode() As SORTCODE
Dim smTranTypeCodeTag As String

Dim tmNTRTypeCode() As SORTCODE
Dim smNTRTypeCodeTag As String

Dim tmTaxSortCode() As SORTCODE
Dim smTaxSortCodeTag As String

Dim tmPayableCode() As SORTCODE
Dim smPayableCodeTag As String

Dim tmSalesperson() As SORTCODE
Dim smSalespersonTag As String

Dim tmProdCode() As SORTCODE
Dim smProdCodeTag As String

Dim smHMnfStamp As String
Dim tmHMnf() As MNF
Dim smSMnfStamp As String
Dim tmSMnf() As MNF
Dim tmSSPart() As SSPART

Dim hmPif As Integer
Dim tmPif() As PIF

Dim imTerminate As Integer  'True = terminating task, False= OK
Dim imChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imStartMode As Integer
Dim imSelectDelay As Integer    'True=cbcSelect change mode
Dim imCTChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imBSMode As Integer     'Backspace flag
Dim imBypassFocus As Integer
Dim imSelectedIndex As Integer  'Index of selected record (0 if new)
Dim imFirstActivate As Integer
Dim imCashTradeIndex As Integer
Dim imType As Integer       '0=Cash; 1=Cash History; 2=Trade; 3=Trade history; 4=Merchandising; 5=Merchandising History; 6=Promotion; 7=Promotion History; 8=Revenue Adjustment
Dim imSvType As Integer       '0=Cash; 1=Cash History; 2=Trade; 3=Trade history; 4=Merchandising; 5=Merchandising History; 6=Promotion; 7=Promotion History; 8=Revenue Adjustment
Dim imHistory As Integer
Dim imSortListIndex As Integer   'List index from cbcSort
Dim imSvSortListIndex As Integer    'Save index that was lasted used to populated list box.  Use this instead of time stamp
Dim imActionListIndex As Integer 'List index from lbcAction
Dim imSvActionListIndex As Integer 'List index from lbcAction
Dim imInitCollectCallRequired As Integer    'Indicates if call to mInitCollect required within edcCashTrade
Dim imCollectIndex As Integer       'pbcCollect index visible
'                     ------------------imActionIndex---------------------  imCollectionIndex
'  imType =           Cash(0)  CashHistory(1)    Trade(2)  TradeHistory(3)
'                                                Merch(4)  MerchHistory(5)
'                                                Promo(6)  PromoHistory(7)
'  imAgencyFlag(0, 1) Agy  Adv  Agy   Adv        Agy  Adv  Agy  Adv
'  View Aging         0     0                    0     0                      8
'  Post Cash          1                          1                            1
'  On Account         2                          2                            2
'  Transfer           3                          3                            3
'  Reverse            4                          4                            4
'  Post Return Chk    5                                                       5
'  Redeposit          6                                                       6
'  Journal            7                          5                            9
'  Invoice            8                          6                            10
'  Invoice Adjustment 9                          7                            12 it was 10
'  View History                  0     0                   0     0            0
'  Restore History               1     1                   1     1            11
                                '0=View History;1=Post cash; 2=Apply on Account;
                                '3=Transfer Entry; 4=Reverse Entry; 5=Post returned check;
                                '6=Redeposit returned check; 8=View aging;
                                '9=Journal; 10=Invoice; 10=Invoice adjustments; 11=Restore History
Dim smPostCashDate As String    'Retain posting date from one transaction to another
Dim imTranSort As Integer       '0=Major: Name, then Inv #, 1= Major Inve #, then Name
Dim imAdvtListIndex As Integer  'On Account
Dim imOnAcctVehListIndex As Integer
Dim imComboBoxIndex As Integer
Dim imSelComboboxIndex As Integer
Dim imCTComboBoxIndex As Integer
Dim smPhoneImage As String  'Blank phone image- obtained from mkcPhone.text before input
Dim imDoubleClickName As Integer    'Name from a list was selected by double clicking
Dim imLbcArrowSetting As Integer 'True = Processing arrow key- retain current list box visibly
                                'False= Make list box invisible
Dim imDirProcess As Integer
Dim imTabDirection As Integer   '0=left to right (Tab); -1=right to left (Shift tab)
Dim imCombo As Integer  'True=Combo salesperson; False=Standard allow salesperson
Dim imBoxNo As Integer   'Current Collections Box
Dim lmRowNo As Long   'Row number of within transaction area
Dim imPopReqd As Integer 'False= pop not required
Dim smCreditR As String * 1 'Credit restricion code (saved to check for change)
Dim smPayR As String * 1    'Payment rating (saved to check for change)
Dim imPostBy As Integer     '0=Combine invoices, 1=Separate by Bill, 2=separate by Bill/air/PkLineNo/Participant/NTR
Dim imAgfCode As Integer    'Saved Agency Code
Dim imAdfCode As Integer    'Saved advertiser Code
Dim imCommentBoxNo As Integer 'Comment pbc Control Index #
Dim smActionDate As String     'Saved Action Date
Dim smEnterDate As String      'Saved entry date
Dim smEnterTime As String      'Saved entry time
Dim imColCount As Integer       'Transaction screens max number of columns
Dim lmRowCount As Long       'Transaction screens max number of display rows
Dim lmRowCountMax As Long    'Total number of transactions read form file
Dim smTranDate As String
Dim smPrevEndPeriodDate As String
Dim smNextEndPeriodDate As String
Dim smNowDate As String
Dim imProdFirstTime As Integer
Dim imSalespersonFirstTime As Integer
Dim imButton As Integer 'Value 1= Left button; 2=Right button; 4=Middle button
Dim lmButtonRow As Long
Dim imIgnoreRightMove As Integer
Dim imInComment As Integer
Dim imAgeingShow As Integer '0=By Advertiser; 1= By Invoice  '0=Summary; 1=Detail
Dim imUpdateAllowed As Integer
Dim imVbcIngoreChg As Integer
Dim imFirstTime As Integer
Dim smPnfPhoneNumber As String
Dim smPnfName As String
'Calendar
Dim tmCDCtrls(0 To 7) As FIELDAREA
Dim imLBCDCtrls As Integer
Dim imCalYear As Integer    'Month of displayed calendar
Dim imCalMonth As Integer   'Year of displayed calendar
Dim lmCalStartDate As Long  'Start date of displayed calendar
Dim lmCalEndDate As Long    'End date of displayed calendar
Dim imCalType As Integer
Dim imComCalMonth As Integer 'Month of displayed calendar (comment section)
Dim imComCalYear As Integer  'Year of displayed claendar (comment section)
'Mouse down
Dim imLbcMouseDown As Integer
'Save values to check for changes
Dim smAgency As String      'Agency name, saved to determine if changed
Dim smAdvt As String        'Advertiser name, saved to determine if changed
'Btrieve Files
Dim tmAdf As ADF            'ADF record image
Dim tmAdfSrchKey As INTKEY0 'ADF key record image
Dim imAdfRecLen As Integer  'ADF record length
Dim hmAdf As Integer        'Advertiser file handle
Dim tmAgf As AGF            'AGF record image
Dim tmAgfSrchKey As INTKEY0 'AGF key record image
Dim imAgfRecLen As Integer  'AGF record length
Dim hmAgf As Integer        'Agency file handle
Dim tmPnf As PNF            'PNF record image
Dim tmPnfSrchKey As INTKEY0 'PNF key record image
Dim imPnfRecLen As Integer  'PNF record length
Dim hmPnf As Integer        'Payable Names file handle
Dim tmSlf As SLF            'SLF record image
Dim tmSlfSrchKey As INTKEY0 'SLF key record image
Dim imSlfRecLen As Integer  'SLF record length
Dim hmSlf As Integer        'Salesperson file handle
Dim tmSbf As SBF            'SBF record image
Dim tmSbfSrchKey0 As SBFKEY0
Dim tmSbfSrchKey1 As LONGKEY0 'SBF key record image
Dim imSbfRecLen As Integer  'SBF record length
Dim hmSbf As Integer        'Special Billing file handle
Dim tmChf As CHF            'SBF record image
Dim tmChfSrchKey1 As CHFKEY1 'SBF key record image
Dim imCHFRecLen As Integer  'SBF record length
Dim hmCHF As Integer        'Special Billing file handle
Dim tmSof As SOF            'SOF record image
Dim tmSofSrchKey As INTKEY0 'SOF key record image
Dim imSofRecLen As Integer  'SOF record length
Dim hmSof As Integer        'Selling Office file handle
Dim tmCdf As CDF            'CDF record image
Dim imCdfRecLen As Integer  'CDF record length
Dim hmCdf As Integer        'Comment-Dunning file handle
Dim tmCef As CEF            'CEF record image
Dim tmCefSrchKey As LONGKEY0 'CEF key record image
Dim imCefRecLen As Integer  'CEF record length
Dim hmCef As Integer        'Event comment file handle
Dim tmRvf As RVF            'RVF or PHF record image
Dim tmRvfSrchKey As RVFKEY0 'RVF key record image
Dim tmRvfSrchKey1 As RVFKEY1 'RVF key record image
Dim tmRvfSrchKey2 As LONGKEY0
Dim tmRvfSrchKey5 As RVFKEY5 'RVF key record image
Dim imRvfRecLen As Integer  'RVF record length
Dim hmRvf As Integer        'RVF or PHF file handle
Dim tmGsf As GSF            'CEF record image
Dim tmGsfSrchKey As LONGKEY0 'CEF key record image
Dim imGsfRecLen As Integer  'CEF record length
Dim hmGsf As Integer        'Sport event file handle
Dim tmGsfInfo() As GSFINFO
Dim hmGhf As Integer
Dim tmGhf As GHF        'GHF record image
Dim tmGhfSrchKey0 As LONGKEY0    'GHF key record image
Dim tmGhfSrchKey1 As GHFKEY1    'GHF key record image
Dim imGhfRecLen As Integer        'GHF record length
Dim imSpfRecLen As Integer  'SPF record length
Dim hmSpf As Integer        'Advertiser file handle
Dim tmPrf As PRF            'PRF record image
Dim imPrfRecLen As Integer  'PRF record length
Dim hmPrf As Integer        'Product Advertiser file handle
Dim lmStatAgfRecPos As Long     'AGF record position
Dim lmStatAdfRecPos As Long     'ADF record position
Dim lmAgfRecPos As Long     'AGF record position
Dim lmAdfRecPos As Long     'ADF record position

Dim hmApf As Integer
Dim tmApf As APF        'CFF record image
Dim tmApfSrchKey0 As LONGKEY0    'CFF key record image
Dim tmApfSrchKey5 As LONGKEY0    'CFF key record image
Dim imApfRecLen As Integer        'CFF record length

Dim tmRvfUserVehicle() As SORTCODE
Dim smRvfUserVehicleTag As String

Dim tmOnAcctVeh() As SORTCODE
Dim smOnAcctVehTag As String

Dim tmTeam() As MNF
Dim smTeamTag As String

Dim hmLcf As Integer

Dim hmRlf As Integer
Dim lmLockRecCode As Long

'Dim tmRec As LPOPREC
'Section 4 Active field control arrays
Dim tmInfoCtrls(0 To 6) As FIELDAREA 'control field area images
Dim imLBInfoCtrls As Integer
Dim smInfoCtrls(0 To 6) As String 'Saved control field strings
'Vehicle Invoice disbursement
Dim tmVehInv() As VEHINV
Dim tmUserVehicle() As SORTCODE
Dim smUserVehicleTag As String
'Invoice and Invoice adjustment
Dim imIAdfCode As Integer
Dim imIAdvtListIndex As Integer
Dim smIProduct As String
Dim imISalespersonListIndex As Integer
Dim smIInvoiceNo As String
Dim smIRefInvoiceNo As String
Dim smIContractNo As String
Dim imIBillVehicleListIndex As Integer
Dim imIAirVehicleListIndex As Integer
Dim imIAirVefCode As Integer
Dim imISvAirVefCode As Integer
Dim imISvSeasonListIndex As Integer
Dim smIPkLine As String
Dim smITranDate As String
Dim smITranType As String
Dim imINTRTypeListIndex As Integer
Dim imINTRTaxListIndex As Integer
Dim smIGross As String
Dim smINet As String
Dim smIAcquisition As String
Dim imISeasonListIndex As Integer
Dim imIEventListIndex As Integer
Dim lmISeasonGhfCode As Long
Dim tmSeasonInfo() As SEASONINFO

Dim smCompressedShow() As String * 40
'Dim lmMapRowNo() As Long
Dim imDisplayMode As Integer '0=Expand; 1=Compressed
Private Type ROWINFO
    lMapRowNo As Long
    iRowStatus As Integer    '0=Expanded; 1=Compressed; 2=Detail row
End Type
Dim tmRowInfo() As ROWINFO

Dim imRestoreZeroBalance As Integer '0=Invoice Number; 1= Contract #

Dim imTaxDefined As Integer
Dim lmTax1 As Long              '1-18-02 Sales Tax1 amount if applicable
Dim lmTax2 As Long              '1-18-02 Sales Tax2 amount if applicable

Dim imISSPartListIndex As Integer
'Comment Section Controls pbcComment
Dim tmComCtrls(0 To 3) As FIELDAREA 'control field area images
Dim imLBComCtrls As Integer
Dim smComCtrls(0 To 3) As String 'Saved control field strings

Dim fmAdjFactorW As Single  'Width adjustment factor
Dim fmAdjFactorH As Single  'Width adjustment factor

Private Type AVGTOPAYINFO
    lInvNo As Long
    lInvDate As Long
    bAdfUpdated As Boolean
    bAgfUpdated As Boolean
End Type
Dim tmAvgToPayInfo() As AVGTOPAYINFO

Private rst_Rvf As ADODB.Recordset

Const COMACTDATEINDEX = 1       'Comment action date list field
Const COMADVAGYINDEX = 2      'Comment Advt/Agency field
Const COMMENTINDEX = 3   'Comment field
'tmInfoCtrls field indexes
Const COMNTINDEX = 1       'Comment list field
Const CREDITRINDEX = 2      'Section 4 credit restriction control index
Const CREDITAMTINDEX = 3   'Section 4 credit restriction amount
Const PAYRATEINDEX = 4     'Section 4 payment rating control index
Const PAYABLESINDEX = 5       'Section 4 payables control index
Const PHONEINDEX = 6        'Section 4 phone and extension control index
Const STATSINDEX = 7       'Statistics control
Dim imInfoBoxNo As Integer 'Section 4 index number
'Section 4 Variables
Dim tmS4Info(0 To 11) As FIELDAREA 'Section 4 info field area images
Dim imLBS4Info As Integer
Dim smS4Info(0 To 11) As String 'Saved Section 4 information field strings
'tmS4Info field indexes
Const OVR90INDEX = 1        'Section 4 percent over 90 days info field index
Const CURARINDEX = 2        'Section 4 current A/R total info field index
Const UNBILLINDEX = 3       'Section 4 unbilled total info field index
Const HIARINDEX = 4         'Section 4 highest A/R total info field index
Const TGROSSINDEX = 5       'Section 4 total gross info field index
Const TGDATEINDEX = 6       'Section 4 total gross last date info field index
Const NSFINDEX = 7          'Section 4 # NSF Checks info field index
Const LBILLINDEX = 8        'Section 4 last bill date info field index
Const LPAYINDEX = 9         'Section 4 last payment date info field index
Const AVGPAYINDEX = 10      'Section 4 average days to pay info field index
Const DAYSLPAYINDEX = 11    'Section 4 days to pay last payment info field index
'Module Flags
Dim imAgencyFlag As Integer '0=Agency selected ; 1=Advertiser selected
Dim imDirectFlag As Integer 'True = direct advertiser
Dim imComActDateFlag As Integer 'True=call to calendar from pbcComments
Dim imAgfFlag As Integer     'True = agency record read in
Dim imAdfFlag As Integer     'True = advertiser record read in
Dim imNewComment As Integer  'True=add new comment ; False=update existing comment record
'Section 1 control field index
Dim tmCtrls() As FIELDAREA
Dim imLBCtrls As Integer
Dim imTabMax As Integer 'Max allowed tabs
Dim smCheckDate As String
Dim smCheckNo As String
Dim smAmount As String
Dim lmBDCheckDate() As Long     'Bounded or redeposited check dates
'6/7/15: Changed check number to string
'Dim lmBDCheckNo() As Long       'Bounded or redeposited check numbers
Dim smBDCheckNo() As String       'Bounded or redeposited check numbers
Dim smBDAmount() As String      'Bounded or redeposited check amounts
Dim smBDVariance() As String    'Bounded or redeposited variance
Dim smTotalUnapplied As String
Dim smTotalNoChecks As String
Dim smTotalAllChecks As String
Dim smPostOnAccount As String
Dim smTotalDue As String
Dim smTotalAppliedDue As String
Dim smTotalAppliedWriteOff As String
Dim smTotalJournal As String
Dim smTotalAdjGross As String
Const CASHTRADEINDEX = 1
Const ACTIONINDEX = 2
Dim imCheckDate As Integer
Dim imCheckNo As Integer
Dim imAmount As Integer
Dim imWriteOff As Integer
Dim imTotalUnapplied As Integer
Dim imTotalNoChecks As Integer
Dim imTotalAllChecks As Integer
Dim imPostOnAccount As Integer
Dim imOnAccountTo As Integer
Dim imOnAccountVeh As Integer
Dim imOnAccountComment As Integer
Dim imTotalDue As Integer
Dim imTotalAppliedDue As Integer
Dim imTotalJournal As Integer
Dim imTotalAdjGross As Integer
Dim imTotalAppliedWriteOff As Integer
Dim smVariance As String    'From site table
Dim tmTransCtrls() As FIELDAREA  'Collection transaction screen fields
Dim imLBTransCtrls As Integer
Dim smShow() As String * 40
Dim smSave() As String * 43 'Index: 1=Total Invoice net amount Plus Tax (only on last transaction of the invoice); 2=Paid amount;
                            '3= write off or journal type;4= net amount plus tax on transaction;
                                    '5=Transaction type; 6=Action; 7=Check #; 8=Invoice #; 9=N if not package line, Y=Package line;
                                    '10= Bill Vehicle; 11=Air Vehicle; 12=Participant; 13=NTR Flag; 14=Adj Gross; 15=Entered date;
                                    '16=Salesperson Name; 17=Purge Date (History view)
                                    '18=Original Gross; 19=Sum of Original Gross (only on last transaction of the invoice); 20=Acquisition Cost; 21=rvf.type (added 6-12-08 to allow installments to be distinguished in cash history Dan M)
                                    '22 = Visiting @ Home team, 23=Contract #
                            'For ageing (imCollectIndex = 8)
                            '1=Inv #; 2=Bill Vehicle Name; 3= Contract #; 4=Check #; 5=Tran Date; 6= Tran Type; 7=Action Type; 8=Not used; 9=N if not package line, Y=Package line; 10= Bill Vehicle (same as 2); 11=Air Vehicle; 12=Participant; 13=NTR Flag; 14=Adj Gross; 15=Entered date
Dim lmSave() As Long        '1=CefCode; 2=Tax 1; 3=Tax2
Dim lmNTRSbfCode() As Long       '2-24-04
Dim imBacklogTrfCode() As Integer
Dim smTranComment() As String   'Cooments associated with each transaction
Dim smItemComment() As String   'Comment associated with a JE or On Account when being created
Dim smOnAccountComment As String
Dim smAgingTotal(0 To 6) As String
Dim imPORowNo As Integer    'Row number of PO
Dim imXRowNo As Integer    'Row number of Transfer
Dim lmUpdateRvfRecPos() As Long   'Rvf code numbers that where created in save
'Restore
Dim smRestoreCheckNo As String
Dim smRestoreContractNo As String
Dim smRestoreInvNo() As String
Dim smRestoreCheckTotal As String
Dim smRestoreTotal As String
Dim smRestoreCheckTotalShow As String
Dim smRestoreTotalShow As String
'Zero Balance
'Dim lmZBInvNo() As Long     'Invoice numbers
'Dim imZBAgfCode() As Integer     'Agency Code
'Dim imZBAdfCode() As Integer     'Advertiser Code
'Dim smZBAmount() As String * 20
'Dim smZBType() As String * 1
Dim tmZP() As ZEROPURGE
Dim tmZPLink() As ZPLINK
Dim lmZBRvfCode() As Long
'Reset Advt and Agy
Dim imAdf() As Integer
Dim smAdfCurrAR() As String * 20
Dim smAdfOver90() As String * 20
Dim imAgf() As Integer
Dim smAgfCurrAR() As String * 20
Dim smAgfOver90() As String * 20
Dim sComments() As String 'L.Bianchi comment truncate issue fix
Const LBONE = 1

'View receivables constants
Const ADVTAGENCY = 1
Const INVOICENO = 2
Const VEHICLENAME = 3
Const EVENTNUMBER = 4
Const CONTRACTNO = 5    '4
Const TRANSDATE = 6 '5
Const TRANSTYPE = 7 '6
Const NET = 8   '7
Const ASTERICK = 9  '8
Const AMNTDUE = 10  '9
Const AMNTPAID = 11 '10
Const WRITEOFF = 12 '11
Const COMMENT = 13  '12
Const VCHECKNO = 6  '5
Const VTRANSDATE = 7    '6
Const VTRANSTYPE = 8    '7
Const VNET = 9  '8
Const VASTERICK = 10    '9
Const IANET = 8 '7
Const IAASTERICK = 9 ' 8
Const IAAMTDUE = 10 '9
Const IAAMTPAID = 11    '10
Const IAGROSS = 12  '11
Const IACOMMENT = 13    '12
'Invoice and Invoice ref #
Const IADVTINDEX = 3
Const IPRDINDEX = 4
Const ISPERSONINDEX = 5
Const IINVNOINDEX = 6
Const IREFINVNOINDEX = 7
Const ICNTRINDEX = 8
Const IBILLVEHINDEX = 9
Const IAIRVEHINDEX = 10
Const IPKLINEINDEX = 11
Const ITRANDATEINDEX = 12
Const ITRANTYPEINDEX = 13
Const INTRTYPEINDEX = 14
Const INTRTAXINDEX = 15
Const IGROSSINDEX = 16
Const INETINDEX = 17
Const IACQUISITIONINDEX = 18
Const ISSPARTINDEX = 19
Const ISEASONINDEX = 20
Const IEVENTINDEX = 21
'Const DATEINDEX = 1         'Date field
'Const CHECKNOINDEX = 2      'Check number field
'Const AMOUNTINDEX = 3       'Check amount field
'Const ORIGCHKNOINDEX = 4    'Original check number field
'Const AMTPD1INDEX = 5      'Amount paid row # 1
'Const WOFF1INDEX = 6       'Write off Amount row # 1
'Const AMTPD2INDEX = 7      'Amount paid row # 2
'Const WOFF2INDEX = 8      'Write off Amount row # 2
'Const AMTPD3INDEX = 9      'Amount paid row # 3
'Const WOFF3INDEX = 10       'Write off Amount row # 3
'Const AMTPD4INDEX = 11      'Amount paid row # 4
'Const WOFF4INDEX = 12       'Write off Amount row # 4
'Const AMTPD5INDEX = 13      'Amount paid row # 5
'Const WOFF5INDEX = 14       'Write off Amount row # 5
'Const AMTPD6INDEX = 15      'Amount paid row # 6
'Const WOFF6INDEX = 16       'Write off Amount row # 6

'*******************************************************
'*                                                     *
'*      Procedure Name:mPersonnelBranch                *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      personnel and process          *
'*                      communication back from        *
'*                      personnel                      *
'*                                                     *
'*                                                     *
'*  General flow: pbc--Tab calls this function which   *
'*                initiates a task as a MODAL form.    *
'*                This form and the control loss focus *
'*                When the called task terminates two  *
'*                events are generated (Form activated;*
'*                GotFocus to pbc-Tab).  Also, control *
'*                is sent back to this function (the   *
'*                GotFocus event is initiated after    *
'*                this function finishes processing)   *
'*                                                     *
'*******************************************************
Private Function mPersonnelBranch() As Integer
'
'   ilRet = mPersonnelBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    Dim slBuyerOrPayable As String
    Dim slName30 As String * 30
    Dim ilBoxNo As Integer
    Dim slNewFlag As String
'    If imBoxNo = BUYERINDEX Then
'        slBuyerOrPayable = "B"
'        ilRet = gOptionalLookAhead(edcDropDown, lbcBuyer, imBSMode, slStr)
'    Else
        slBuyerOrPayable = "P"
        ilRet = gOptionalLookAhead(edcInfoDropDown, lbcPayables, imBSMode, slStr)
'    End If
    If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcInfoDropDown.Text = "[None]") Then
        imDoubleClickName = False
        mPersonnelBranch = False
        Exit Function
    End If
    'If Not gWinRoom(igNoExeWinRes(ADVTPRODEXE)) Then
    '    imDoubleClickName = False
    '    mPersonnelBranch = True
    '    mEnableBox imBoxNo
    '    Exit Function
    'End If
'        ilRet = gOptionalLookAhead(edcDropDown, lbcPersonnel, imBSMode, slStr)
    igPersonnelCallSource = CALLSOURCECOLLECT
    'Screen.MousePointer = vbHourGlass  'Wait
    'sgPersonnelName = cbcSelect.List(imSelectedIndex)
    If edcInfoDropDown.Text = "[New]" Then
        'sgPersonnelName = sgPersonnelName & "\" & " "
        sgPersonnelName = " "
    Else
        'sgPersonnelName = sgPersonnelName & "\" & Trim$(edcDropDown.Text)
        sgPersonnelName = Trim$(edcInfoDropDown.Text)
    End If
    ilUpdateAllowed = imUpdateAllowed
    'igChildDone = False
    'edcLinkSrceDoneMsg.Text = ""
'    If imSelectedIndex = 0 Then
'        tmAgf.iCode = 0
'    End If
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
        If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or (imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0) Then
            If igTestSystem Then
                slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igPersonnelCallSource)) & "\Agy" & "\" & Trim$(str$(tmAgf.iCode)) & "\" & slBuyerOrPayable & "\" & sgPersonnelName
            Else
                slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igPersonnelCallSource)) & "\Agy" & "\" & Trim$(str$(tmAgf.iCode)) & "\" & slBuyerOrPayable & "\" & sgPersonnelName
            End If
        Else
            If igTestSystem Then
                slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igPersonnelCallSource)) & "\Advt" & "\" & Trim$(str$(tmAdf.iCode)) & "\" & slBuyerOrPayable & "\" & sgPersonnelName
            Else
                slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igPersonnelCallSource)) & "\Advt" & "\" & Trim$(str$(tmAdf.iCode)) & "\" & slBuyerOrPayable & "\" & sgPersonnelName
            End If
        End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Agency^Test^NOHELP\" & sgUserName & "\" & Trim$(Str$(igPersonnelCallSource)) & "\Agy" & "\" & Trim$(Str$(tmAgf.iCode)) & "\" & slBuyerOrPayable & "\" & sgPersonnelName
    '    Else
    '        slStr = "Agency^Prod^NOHELP\" & sgUserName & "\" & Trim$(Str$(igPersonnelCallSource)) & "\Agy" & "\" & Trim$(Str$(tmAgf.iCode)) & "\" & slBuyerOrPayable & "\" & sgPersonnelName
    '    End If
    'End If
    ilBoxNo = imInfoBoxNo
    'lgShellRet = Shell(sgExePath & "Persnnel.Exe " & slStr, 1)
    'Agency.Enabled = False
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    sgCommandStr = slStr
    Persnnel.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgPersonnelName)
    igPersonnelCallSource = Val(sgPersonnelName)
    ilParse = gParseItem(slStr, 2, "\", sgPersonnelName)
    ilParse = gParseItem(slStr, 3, "\", slNewFlag)
    'Agency.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    imInfoBoxNo = ilBoxNo
    'Screen.MousePointer = vbDefault    'Default
    imDoubleClickName = False
    mPersonnelBranch = True
    imUpdateAllowed = ilUpdateAllowed
    'If imUpdateAllowed = False Then
    '    mSendHelpMsg "BF"
    'Else
    '    mSendHelpMsg "BT"
    'End If
    gShowBranner imUpdateAllowed
    If igPersonnelCallSource = CALLDONE Then  'Done
        igPersonnelCallSource = CALLNONE
'        gSetMenuState True
'        If imBoxNo = BUYERINDEX Then
'            lbcBuyer.Clear
'            sgBuyerCodeTag = ""
'            mBuyerPop tmAgf.iCode, sgPersonnelName
'            If imTerminate Then
'                mPersonnelBranch = False
'                Exit Function
'            End If
'            slName30 = sgPersonnelName  'Don't test phone Number
'            gFindPartialMatch slName30, 2, 30, lbcBuyer
'            sgPersonnelName = ""
'            If gLastFound(lbcBuyer) > 1 Then
'                imChgMode = True
'                lbcBuyer.ListIndex = gLastFound(lbcBuyer)
'                edcDropDown.Text = lbcBuyer.List(lbcBuyer.ListIndex)
'                imChgMode = False
'                'slNameCode = tgBuyerCode(lbcBuyer.ListIndex - 2).sKey  'lbcBuyerCode.List(lbcBuyer.ListIndex - 2)
'                'ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                'imNewPnfCode(UBound(imNewPnfCode)) = Val(slCode)
'                'ReDim Preserve imNewPnfCode(1 To UBound(imNewPnfCode) + 1) As Integer
''                If slNewFlag = "Y" Then
''                    slNameCode = tgBuyerCode(lbcBuyer.ListIndex - 2).sKey  'lbcBuyerCode.List(lbcBuyer.ListIndex - 2)
''                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
''                    imNewPnfCode(UBound(imNewPnfCode)) = Val(slCode)
''                    ReDim Preserve imNewPnfCode(1 To UBound(imNewPnfCode) + 1) As Integer
''                End If
'                mPersonnelBranch = False
'                mSetChg BUYERINDEX
'            Else
'                imChgMode = True
'                lbcBuyer.ListIndex = 1
'                edcDropDown.Text = lbcBuyer.List(1)
'                imChgMode = False
'                mSetChg BUYERINDEX
'                'edcDropDown.SetFocus
'                If edcDropDown.Visible Then
'                    edcDropDown.SetFocus
'                Else
'                    pbcClickFocus.SetFocus
'                End If
'                Exit Function
'            End If
'        Else
            lbcPayables.Clear
            smPayableCodeTag = ""
            If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or (imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0) Then
                mPayablePop tmAgf.iCode
            Else
                mPayablePop tmAdf.iCode
            End If
            If imTerminate Then
                mPersonnelBranch = False
                Exit Function
            End If
            slName30 = sgPersonnelName  'Don't test phone number
            gFindPartialMatch slName30, 2, 30, lbcPayables
            sgPersonnelName = ""
            If gLastFound(lbcPayables) > 1 Then
                imChgMode = True
                lbcPayables.ListIndex = gLastFound(lbcPayables)
                edcInfoDropDown.Text = lbcPayables.List(lbcPayables.ListIndex)
                imChgMode = False
                'slNameCode = tmPayableCode(lbcPayable.ListIndex - 2).sKey  'lbcPayableCode.List(lbcPayable.ListIndex - 2)
                'ilRet = gParseItem(slNameCode, 2, "\", slCode)
                'imNewPnfCode(UBound(imNewPnfCode)) = Val(slCode)
                'ReDim Preserve imNewPnfCode(1 To UBound(imNewPnfCode) + 1) As Integer
'                If slNewFlag = "Y" Then
'                    slNameCode = tmPayableCode(lbcPayable.ListIndex - 2).sKey  'lbcPayableCode.List(lbcPayable.ListIndex - 2)
'                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                    imNewPnfCode(UBound(imNewPnfCode)) = Val(slCode)
'                    ReDim Preserve imNewPnfCode(1 To UBound(imNewPnfCode) + 1) As Integer
'                End If
                mPersonnelBranch = False
                'Update record
                mInfoSetShow PAYABLESINDEX
                If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or (imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0) Then
                    mReadPnf tmAgf.iPnfPay
                Else
                    mReadPnf tmAdf.iPnfPay
                End If
            Else
                imChgMode = True
                lbcPayables.ListIndex = 1
                edcInfoDropDown.Text = lbcPayables.List(1)
                imChgMode = False
                mInfoSetChg PAYABLESINDEX
                If edcInfoDropDown.Visible Then
                    edcInfoDropDown.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
                Exit Function
            End If
        End If
'    End If
    If igPersonnelCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igPersonnelCallSource = CALLNONE
        sgPersonnelName = ""
        mEnableInfoBox imInfoBoxNo
        Exit Function
    End If
    If igPersonnelCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igPersonnelCallSource = CALLNONE
        sgPersonnelName = ""
        mEnableInfoBox imInfoBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mPayablePop                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Payable Personnel     *
'*                      list box if required           *
'*                                                     *
'*******************************************************
Private Sub mPayablePop(ilAdvAgyCode As Integer)
'
'   mPayablePop
'   Where:
'       ilAgyCode (I)- Agency code value
'
    Dim ilRet As Integer
    Dim slName As String
    Dim ilIndex As Integer
    ilIndex = lbcPayables.ListIndex
    If ilIndex > 0 Then
        slName = lbcPayables.List(ilIndex)
    End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'If imSelectedIndex > 0 Then 'Change mode
        'If imSelectedIndex = 0 Then
        '    ilRet = gPopPersonnelBox(Advt, 0, ilAdvtCode, "P", False, lbcPayable, lbcPayableCode)
        'Else
            'ilRet = gPopPersonnelBox(Agency, 1, ilAgyCode, "P", True, 2, lbcPayable, lbcPayableCode)
        If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Then
            ilRet = gPopPersonnelBox(Collect, 1, ilAdvAgyCode, "P", True, 0, lbcPayables, tmPayableCode(), smPayableCodeTag)
        ElseIf (imDirectFlag) And (lbcStatAgency.ListIndex = 0) Then
            ilRet = gPopPersonnelBox(Collect, 0, ilAdvAgyCode, "P", True, 0, lbcPayables, tmPayableCode(), smPayableCodeTag)
        ElseIf (imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0) Then
            ilRet = gPopPersonnelBox(Collect, 1, ilAdvAgyCode, "P", True, 0, lbcPayables, tmPayableCode(), smPayableCodeTag)
        Else
            Exit Sub
        End If
        'End If
        If ilRet <> CP_MSG_NOPOPREQ Then
            On Error GoTo mPayablePopErr
            gCPErrorMsg ilRet, "mPayablePop (gPopPersonnelBox)", Collect
            On Error GoTo 0
            'Filter out any contact not associated with this agency
'            If imSelectedIndex = 0 Then
'                For ilLoop = UBound(tmPayableCode) - 1 To 0 Step -1 'lbcPayableCode.ListCount - 1 To 0 Step -1
'                    ilFound = False
'                    slNameCode = tmPayableCode(ilLoop).sKey    'lbcPayableCode.List(ilLoop)
'                    ilRet = gParseItem(slNameCode, 1, "\", slName)
'                    If (StrComp(Trim$(slRetainName), Trim$(Left$(slName, 30)), 1) = 0) And (slRetainName <> "") Then
'                        ilFound = True
'                    Else
'                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
'                        ilCode = Val(slCode)
'                        For ilPnf = 1 To UBound(imNewPnfCode) - 1 Step 1
'                            If imNewPnfCode(ilPnf) = ilCode Then
'                                ilFound = True
'                                Exit For
'                            End If
'                        Next ilPnf
'                    End If
'                    If Not ilFound Then
'                        lbcPayable.RemoveItem ilLoop
'                        'lbcPayableCode.RemoveItem ilLoop
'                        gRemoveItemFromSortCode ilLoop, tmPayableCode()
'                    End If
'                Next ilLoop
'            End If
            lbcPayables.AddItem "[None]", 0  'Force as first item on list
            lbcPayables.AddItem "[New]", 0  'Force as first item on list
            imChgMode = True
            If ilIndex > 0 Then
                gFindMatch slName, 1, lbcPayables
                If gLastFound(lbcPayables) > 0 Then
                    lbcPayables.ListIndex = gLastFound(lbcPayables)
                Else
                    lbcPayables.ListIndex = -1
                End If
            Else
                lbcPayables.ListIndex = ilIndex
            End If
            imChgMode = False
        End If
    'Else
    '    If lbcPayable.ListCount = 0 Then
    '        lbcPayable.AddItem "[None]", 0  'Force as first item on list
    '        lbcPayable.AddItem "[New]", 0  'Force as first item on list
    '    End If
    'End If
    Exit Sub
mPayablePopErr:
    On Error GoTo 0
    imTerminate = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mNTRTypePop                    *
'*                                                     *
'*             Created:9/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate NTR Types             *
'*                      list box if required           *
'*                                                     *
'*******************************************************
Private Sub mNTRTypePop()
'
'   mAgyDPPop
'   Where:
'
    Dim ilRet As Integer
    Dim slName As String
    Dim ilIndex As Integer
    ilIndex = lbcNTRType.ListIndex
    If ilIndex > 0 Then
        slName = lbcNTRType.List(ilIndex)
    End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopMnfPlusFieldsBox(Collect, lbcNTRType, lbcNTRTypeCode, "YW")
    ilRet = gPopMnfPlusFieldsBox(Collect, lbcNTRType, tmNTRTypeCode(), smNTRTypeCodeTag, "I")
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mNTRTypePopErr
        gCPErrorMsg ilRet, "mNTRTypePop (gPopMnfPlusFieldsBox)", Collect
        On Error GoTo 0
        lbcNTRType.AddItem "[None]", 0  'Force as first item on list
        imChgMode = True
        If ilIndex > 0 Then
            gFindMatch slName, 1, lbcNTRType
            If gLastFound(lbcNTRType) > 0 Then
                lbcNTRType.ListIndex = gLastFound(lbcNTRType)
            Else
                lbcNTRType.ListIndex = -1
            End If
        Else
            lbcNTRType.ListIndex = ilIndex
        End If
        imChgMode = False
    End If
    Exit Sub
mNTRTypePopErr:
    On Error GoTo 0
    imTerminate = True
End Sub

Private Sub cbcSelection_Change()
    Dim ilRet As Integer

    If imStartMode Then
        imStartMode = False
        For ilRet = 0 To 11 Step 1
            pbcCollect(ilRet).Cls      'Clear collection screens
        Next ilRet
        ilRet = 0
        pbcInfo.Cls      'Clear info pbc
        mClearCtrlFields 'Reset fields and sShow strings
        mCbcSelectionChange
        Exit Sub
    End If
    If imChgMode = False Then 'If currently in change mode- bypass any other changes (avoid infinite loop)
        mClearCtrlFields 'Reset fields and sShow strings
        For ilRet = 0 To 11 Step 1
            pbcCollect(ilRet).Cls      'Clear collection screens
        Next ilRet
        ilRet = 0
        pbcInfo.Cls      'Clear info pbc
        If cbcSelection.Text <> "" Then
            gManLookAhead cbcSelection, imBSMode, imSelComboboxIndex
            If igCollCallFrom = 1 Then
                mCbcSelectionChange
            Else
                tmcClick.Enabled = False
                imSelectDelay = True
                tmcClick.Interval = 2000    '2 seconds
                tmcClick.Enabled = True
            End If
        End If
    End If
    Exit Sub


End Sub
Private Sub cbcSelection_Click()
    imSelComboboxIndex = cbcSelection.ListIndex
    cbcSelection_Change
End Sub
Private Sub cbcSelection_DropDown()
    plcCalendar.Visible = False
    tmcClick.Enabled = False
    imSelectDelay = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
    mPopulate   'Populate is done within GotFocus- if only one then
                ' code froze when cbcSelection.ListIndex set to 0
                'in mPopulate- removed the setting to 0 because this mPopulate
                'is required so dropdown shows all names
                '(if this mPopulate removed then the selection works if one one but
                ' if more then one, then not all names show)
End Sub
Private Sub cbcSelection_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
    mPopulate   'Populate resets index
    imSelComboboxIndex = imSelectedIndex
    gCtrlGotFocus cbcSelection

End Sub
Private Sub cbcSelection_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub cbcSelection_KeyPress(KeyAscii As Integer)
    tmcClick.Enabled = False
    imSelectDelay = False
    'Backspace character cause selected test to be deleted or
    'the first character to the lEtf of the cursor if no text selected
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If cbcSelection.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
End Sub
Private Sub cbcSelection_LostFocus()
    '4/16/18
    'If imSelectDelay Then
    '    tmcClick.Enabled = False
    '    imSelectDelay = False
    '    mCbcSelectionChange
    'End If
End Sub
Private Sub cbcSort_Change()
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilCollectIndex As Integer
    imAgencyFlag = -1
    If imChgMode = False Then
        imChgMode = True
        If cbcSort.Text <> "" Then
            gManLookAhead cbcSort, imBSMode, imComboBoxIndex
        End If
        imSortListIndex = cbcSort.ListIndex
        'Set agency / advertiser test flag
        If cbcSort.ListIndex < 12 And cbcSort.ListIndex > -1 Then  'Agency
            imAgencyFlag = 0
        ElseIf cbcSort.ListIndex > -1 And cbcSort.ListIndex > 11 Then  'Advertiser
            imAgencyFlag = 1
        End If
        pbcInfo.Cls    'Clear info pbc
        lbcStatAgency.Clear
        lbcStatAdvt.Clear
        edcStatDropDown.Text = ""
        cmcStatDropDown.Enabled = False
        edcStatDropDown.Enabled = False
        ilCollectIndex = imCollectIndex
        imSelectedIndex = -1
        imSvType = -1
        imSvActionListIndex = -1
        cbcSelection.ListIndex = -1 'Clear cbcSelections box
        lbcAction.ListIndex = -1
        imActionListIndex = -1
        imCollectIndex = 8  'View Aging
        imColCount = -1
        lmRowCount = -1
        lmRowCountMax = 0
        pbcCollect(8).Visible = True
        If (ilCollectIndex >= 0) And (ilCollectIndex <> 8) Then
            pbcCollect(ilCollectIndex).Visible = False
        End If
        For ilRet = 0 To 11 Step 1
            pbcCollect(ilRet).Cls      'Clear collection screens
        Next ilRet
        mClearCtrlFields
'        pbcCollect(imCollectIndex).Cls 'Clear collect pbc
        ReDim smShow(0 To 11, 0 To 1) As String * 40  'reinitialize transaction fields array
        ReDim smSave(0 To 23, 0 To 1) As String * 43  'reinitialize transaction fields array
        ReDim lmSave(0 To 3, 0 To 1) As Long
        ReDim lmNTRSbfCode(0 To 1) As Long         '2-24-04
        ReDim imBacklogTrfCode(0 To 1) As Integer
        ReDim smTranComment(0 To 1) As String
        ReDim smItemComment(0 To 1) As String
        For ilLoop = LBound(smAgingTotal) To UBound(smAgingTotal) Step 1
            smAgingTotal(ilLoop) = ""
        Next ilLoop
        lmSave(1, 1) = 0
        lmSave(2, 1) = 0
        lmSave(3, 1) = 0
        'pbcCollect(imCollectIndex).Cls
        'pbcCollect_Paint imCollectIndex
        Screen.MousePointer = vbDefault    'Default mouse cursor
        'pbcStatistics_Paint
        If ((imSortListIndex >= 8) And (imSortListIndex <= 11)) Or ((imSortListIndex >= 20) And (imSortListIndex <= 23)) Then
            edcCommentDate.Visible = True
            cmcCommentDate.Visible = True
        Else
            edcCommentDate.Visible = False
            cmcCommentDate.Visible = False
        End If
        imChgMode = False
    End If
    mSetCommands
End Sub
Private Sub cbcSort_Click()
    imComboBoxIndex = cbcSort.ListIndex
    cbcSort_Change
End Sub
Private Sub cbcSort_DropDown()
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub cbcSort_GotFocus()
    plcCalendar.Visible = False
    If imFirstTime Then
        imFirstTime = False
    End If
    If cbcSort.Text = "" Then
        cbcSort.ListIndex = 0
    End If
    gCtrlGotFocus cbcSort
    imComboBoxIndex = cbcSort.ListIndex
    imSortListIndex = imComboBoxIndex
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

End Sub
Private Sub cbcSort_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub cbcSort_KeyPress(KeyAscii As Integer)
    'Backspace character cause selected test to be deleted or
    'the first character to the lEtf of the cursor if no text selected
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If cbcSort.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
End Sub


Private Sub cmcCalDn_Click()
    imCalMonth = imCalMonth - 1
    If imCalMonth <= 0 Then
        imCalMonth = 12
        imCalYear = imCalYear - 1
    End If
    pbcCalendar_Paint
    If (lmRowNo < 1) And ((imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 1) And (imBoxNo = imCheckDate) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 10) And (imBoxNo = ITRANDATEINDEX) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf Not imComActDateFlag Then
        edcCommentDate.SelStart = 0
        edcCommentDate.SelLength = Len(edcCommentDate.Text)
        edcCommentDate.SetFocus
    Else
        edcCommDropDown.SelStart = 0
        edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
        edcCommDropDown.SetFocus
    End If
End Sub
Private Sub cmcCalUp_Click()
    imCalMonth = imCalMonth + 1
    If imCalMonth > 12 Then
        imCalMonth = 1
        imCalYear = imCalYear + 1
    End If
    pbcCalendar_Paint
    If (lmRowNo < 1) And ((imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 1) And (imBoxNo = imCheckDate) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 10) And (imBoxNo = ITRANDATEINDEX) Then
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    ElseIf Not imComActDateFlag Then
        edcCommentDate.SelStart = 0
        edcCommentDate.SelLength = Len(edcCommentDate.Text)
        edcCommentDate.SetFocus
    Else
        edcCommDropDown.SelStart = 0
        edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
        edcCommDropDown.SetFocus
    End If
End Sub
Private Sub cmcCancel_Click()
    mTerminate
End Sub
Private Sub cmcCancel_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub cmcCommDropDown_Click()
    Select Case imCommentBoxNo
        Case COMACTDATEINDEX        'Action Date
            plcCalendar.Visible = Not plcCalendar.Visible
            If plcCalendar.Visible Then
                imComActDateFlag = True
            Else
                imComActDateFlag = False
            End If
        Case COMADVAGYINDEX       'Agency / Advertiser
            If (imAgencyFlag = 0) And (Not imDirectFlag) Then
                If lbcAdvt.ListCount > 0 Then
                    lbcAdvt.Visible = Not lbcAdvt.Visible
                Else
                    lbcAdvt.Visible = False
                End If
            Else
                If lbcAgency.ListCount > 0 Then
                    lbcAgency.Visible = Not lbcAgency.Visible
                Else
                    lbcAgency.Visible = False
                End If
            End If
    End Select
    edcCommDropDown.SelStart = 0
    edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
    edcCommDropDown.SetFocus
    mS4SetShow
End Sub
Private Sub cmcCommentDate_Click()
    plcCalendar.Visible = Not plcCalendar.Visible
    edcCommentDate.SelStart = 0
    edcCommentDate.SelLength = Len(edcCommentDate.Text)
    edcCommentDate.SetFocus
End Sub
Private Sub cmcCommentDate_GotFocus()
    plcCalendar.Move plcSelect.Left + cmcCommentDate.Left + cmcCommentDate.Width - plcCalendar.Width, plcSelect.Top + edcCommentDate.height + fgBevelY
End Sub
Private Sub cmcDone_Click()
    Dim ilRes As Integer
    If Not imUpdateAllowed Then
        cmcCancel_Click
        Exit Sub
    End If
    If cmcUpdate.Enabled Then
        ilRes = MsgBox("Update transactions", vbYesNoCancel + vbQuestion, "Update")
        If ilRes = vbCancel Then
            Exit Sub
        End If
        If ilRes = vbYes Then
            ilRes = mSaveRec()
            If imTerminate Then
                cmcCancel_Click
                Exit Sub
            End If
            If (ilRes = False) And (imCollectIndex = 9) Then
                mEnableBox imBoxNo
                Exit Sub
            End If
        End If
    End If
    mTerminate
End Sub
Private Sub cmcDone_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

End Sub
Private Sub cmcDropDown_Click()
    If lmRowNo < 1 Then
        Select Case imBoxNo
            Case CASHTRADEINDEX       'Cash/Trade list box
                lbcCashTrade.Visible = Not lbcCashTrade.Visible
                edcCashTrade.SelStart = 0
                edcCashTrade.SelLength = Len(edcCashTrade.Text)
                edcCashTrade.SetFocus
                Exit Sub
            Case ACTIONINDEX       'Action list box
                lbcAction.Visible = Not lbcAction.Visible
            Case Else
                If imCollectIndex = 1 Then
                    Select Case imBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = Not plcCalendar.Visible
                        Case imCheckNo
                            plcNum.Visible = Not plcNum.Visible
                        Case imAmount
                            plcNum.Visible = Not plcNum.Visible
                        Case imOnAccountTo
                            lbcAdvertiser.Visible = Not lbcAdvertiser.Visible
                        Case imOnAccountVeh
                            lbcOnAcctVeh.Visible = Not lbcOnAcctVeh.Visible
                    End Select
                ElseIf imCollectIndex = 3 Then
                    Select Case imBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = Not plcCalendar.Visible
                        Case imOnAccountTo
                            lbcAdvertiser.Visible = Not lbcAdvertiser.Visible
                    End Select
                'ElseIf ((imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
                ElseIf ((imCollectIndex = 4) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
                    plcCalendar.Visible = Not plcCalendar.Visible
                ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then
                    Select Case imBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = Not plcCalendar.Visible
                        Case imCheckNo
                            lbcBDDate.Visible = Not lbcBDDate.Visible
                    End Select
                ElseIf imCollectIndex = 9 Then
                    Select Case imBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = Not plcCalendar.Visible
                    End Select
                ElseIf (imCollectIndex = 10) Then
                    Select Case imBoxNo
                        Case IADVTINDEX  'Advertiser
                            lbcAdvertiser.Visible = Not lbcAdvertiser.Visible
                        Case IPRDINDEX  'Product
                            lbcProd.Visible = Not lbcProd.Visible
                        Case ISPERSONINDEX  'Salesperson
                            lbcSalesperson.Visible = Not lbcSalesperson.Visible
                        Case IINVNOINDEX  'Inv #
                        Case IREFINVNOINDEX  'Ref Inv #
                        Case ICNTRINDEX  'Contract #
                        Case IBILLVEHINDEX  'Vehicle
                            lbcVehicle(0).Visible = Not lbcVehicle(0).Visible
                        Case IAIRVEHINDEX  'Vehicle
                            lbcVehicle(1).Visible = Not lbcVehicle(1).Visible
                        Case ITRANDATEINDEX 'Tran Date
                            plcCalendar.Visible = Not plcCalendar.Visible
                        Case ITRANTYPEINDEX 'Tran Type
                        Case INTRTYPEINDEX  'Advertiser
                            lbcNTRType.Visible = Not lbcNTRType.Visible
                        Case INTRTAXINDEX  'Advertiser
                            lbcNTRTax.Visible = Not lbcNTRTax.Visible
                        Case IGROSSINDEX 'Gross
                            plcNum.Visible = Not plcNum.Visible
                        Case INETINDEX 'Net
                            plcNum.Visible = Not plcNum.Visible
                        Case IACQUISITIONINDEX 'Acquisition
                            plcNum.Visible = Not plcNum.Visible
                        Case ISSPARTINDEX  'Vehicle
                            lbcSSPart.Visible = Not lbcSSPart.Visible
                        Case ISEASONINDEX  'Vehicle
                            lbcSeason.Visible = Not lbcSeason.Visible
                        Case IEVENTINDEX  'Vehicle
                            lbcEvent.Visible = Not lbcEvent.Visible
                    End Select
                ElseIf imCollectIndex = 12 Then
                    Select Case imBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = Not plcCalendar.Visible
                    End Select
                End If
        End Select
        edcDropDown.SelStart = 0
        edcDropDown.SelLength = Len(edcDropDown.Text)
        edcDropDown.SetFocus
    Else
        If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Then
            Select Case imBoxNo
                Case AMNTPAID
                    plcNum.Visible = Not plcNum.Visible
                Case WRITEOFF
                    plcNum.Visible = Not plcNum.Visible
            End Select
        ElseIf imCollectIndex = 7 Then
            Select Case imBoxNo
                Case AMNTPAID
                    plcNum.Visible = Not plcNum.Visible
            End Select
        ElseIf imCollectIndex = 9 Then
            Select Case imBoxNo
                Case AMNTPAID
                    plcNum.Visible = Not plcNum.Visible
                Case WRITEOFF
                    lbcTranType.Visible = Not lbcTranType.Visible
                    edcDropDown.SelStart = 0
                    edcDropDown.SelLength = Len(edcDropDown.Text)
                    edcDropDown.SetFocus
            End Select
        ElseIf imCollectIndex = 12 Then
            Select Case imBoxNo
                Case IAAMTPAID
                    plcNum.Visible = Not plcNum.Visible
            End Select
        End If
    End If
End Sub
Private Sub cmcInfoDropDown_Click()
    Select Case imInfoBoxNo
        Case COMNTINDEX         'Comment list field
        Case PHONEINDEX         'Phone number
        Case STATSINDEX         'Statistics control
        Case PAYABLESINDEX        'Sales person
            lbcPayables.Visible = Not lbcPayables.Visible
            If Not lbcPayables.Visible Then
                mS4SetShow ' repaint info area
            End If
        Case CREDITRINDEX       'Credit restrictions
            lbcCreditRestr.Visible = Not lbcCreditRestr.Visible
            If Not lbcCreditRestr.Visible Then
                mS4SetShow ' repaint info area
            End If
        Case PAYRATEINDEX        'payment rating
            lbcPaymRating.Visible = Not lbcPaymRating.Visible
            If Not lbcPaymRating.Visible Then
                mS4SetShow ' repaint info area
            End If
    End Select
    edcInfoDropDown.SelStart = 0
    edcInfoDropDown.SelLength = Len(edcInfoDropDown.Text)
    edcInfoDropDown.SetFocus
End Sub
Private Sub cmcInfoDropDown_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcInvoice_Click()
    'If Not gWinRoom(igNoExeWinRes(CREVNOEXE)) Then
    '    Exit Sub
    'End If
    'igRptCallType = COLLECTIONSJOB    'Using collectionsjob instead spotsjob
    Screen.MousePointer = vbHourglass  'Wait
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
    '    If igTestSystem Then
    '        slStr = "Collect^Test\" & sgUserName
    '    Else
    '        slStr = "Collect^Prod\" & sgUserName
    '    End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Collect^Test^NOHELP\" & sgUserName
    '    Else
    '        slStr = "Collect^Prod^NOHELP\" & sgUserName
    '    End If
    'End If
    'lgShellRet = Shell(sgExePath & "ARInvNo.Exe " & slStr, 1)
    'Collect.Enabled = False
    'Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    'slStr = sgDoneMsg
    'Collect.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'MousePointer = vbDefault
    sgInvNoName = ""
    ARInvNo.Show vbModal
    If Trim$(sgInvNoName) <> "" Then
        igCollCallFrom = 1
        cbcSort.Text = cbcSort.List(0)
        mPopulate
        cbcSelection_Change
        imStartMode = False
        cbcSelection.Text = sgInvNoName
        lbcCashTrade.ListIndex = 0
        lmRowNo = -1
        mSetShow CASHTRADEINDEX
        imType = 0
        imAgencyFlag = 0
        mPopAction
        lmRowNo = -1
        imBoxNo = ACTIONINDEX
        If edcDropDown.Text = lbcAction.List(1) Then
            edcDropDown_Change
        Else
            edcDropDown.Text = lbcAction.List(1)
        End If
        mSetShow ACTIONINDEX
        pbcCollect(8).Visible = False
        pbcCollect(8).Enabled = False
        igCollCallFrom = -1
        pbcCollect_Paint 1

    End If
End Sub
Private Sub cmcReconcile_Click()
    Dim slStr As String        'General string
    Dim slUserName As String
    Dim ilRet As Integer
    Dim llLockRecCode As Long

    'If Not gWinRoom(igNoExeWinRes(RPTNOSELEXE)) Then
    '    Exit Sub
    'End If
    If Not imUpdateAllowed Then
        Exit Sub
    End If
    If gFindLockRec(hmRlf, "R", "P", -1, True, slUserName) Then
        ilRet = MsgBox("Collections currently being used by " & slUserName & ", you are unable to run Reconcile at this time", vbOKOnly + vbInformation, "Block")
        Exit Sub
    ElseIf gFindLockRec(hmRlf, "I", "U", -1, False, slUserName) Then
        ilRet = MsgBox("Undo Invoicing currently being run by " & slUserName & ",  unable to run Reconcile at this time", vbOKOnly + vbInformation, "Block")
        Exit Sub
    ElseIf gFindLockRec(hmRlf, "I", "F", -1, False, slUserName) Then
        ilRet = MsgBox("Final Invoicing currently being run by " & slUserName & ",  unable to run Reconcile at this time", vbOKOnly + vbInformation, "Block")
        Exit Sub
    Else
        llLockRecCode = gCreateLockRec(hmRlf, "R", "R", 0, True, slUserName)
        If llLockRecCode <= 0 Then
            ilRet = MsgBox("Reconcile currently being run by " & slUserName & ", unable to run Reconcile at this time", vbOKOnly + vbInformation, "Block")
            Exit Sub
        End If
    End If
    'Bypass test if Reconcile by Corporate (Fiscal) Month
    'If (tgSpf.sRRP = "C") Or (tgSpf.sRRP = "S") Then
    '    gSpfRead
    '    gUnpackDate tgSpf.iRPRP(0), tgSpf.iRPRP(1), slPrevEndPeriodDate
    '    gUnpackDate tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), slLastInvDate
    '    If Month(slPrevEndPeriodDate) >= Month(slLastInvDate) Then
    '        ilRet = MsgBox("Month must be Invoiced Prior to next Reconcile", vbOkOnly + vbExclamation, "Reconcile")
    '        Exit Sub
    '    End If
    'End If
    igRptCallType = COLLECTIONSJOB
    'Screen.MousePointer = vbHourglass  'Wait
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
        If igTestSystem Then
            slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igRptCallType)) & "\0"
        Else
            slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igRptCallType)) & "\0"
        End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Collect^Test^NOHELP\" & sgUserName & "\" & Trim$(Str$(igRptCallType)) & "\0"
    '    Else
    '        slStr = "Collect^Prod^NOHELP\" & sgUserName & "\" & Trim$(Str$(igRptCallType)) & "\0"
    '    End If
    'End If
    'lgShellRet = Shell(sgExePath & "RptNoSel.Exe " & slStr & "\||" & Trim$(Str$(COLLECTIONSJOB)) & "\Reconcile", 1)
    'Collect.Enabled = False
    'Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    sgCommandStr = slStr & "\||" & Trim$(str$(COLLECTIONSJOB)) & "\Reconcile"
    On Error Resume Next
    RptNoSel.Show vbModal
    slStr = sgDoneMsg
    'Collect.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'MousePointer = vbDefault
    gSpfRead
    'gSetUsingTraffic
    gUnpackDate tgSpf.iRPRP(0), tgSpf.iRPRP(1), smPrevEndPeriodDate
    gUnpackDate tgSpf.iRNRP(0), tgSpf.iRNRP(1), smNextEndPeriodDate
    gUnpackDate tgSpf.iRLastPay(0), tgSpf.iRLastPay(1), smPostCashDate
    If Trim$(smPostCashDate) = "" Then
        smPostCashDate = smNowDate
    End If
    If Not gDeleteLockRec_ByRlfCode(hmRlf, llLockRecCode) Then
        ilRet = MsgBox("Unable to remove Reconcile Lock", vbOKOnly + vbInformation, "Zero Purge")
    End If
End Sub
Private Sub cmcReconcile_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

End Sub
Private Sub cmcReport_Click()
    Dim slStr As String        'General string
    Dim ilRptType As Integer
    'If Not gWinRoom(igNoExeWinRes(RPTSELEXE)) Then
    '    Exit Sub
    'End If
    igRptCallType = COLLECTIONSJOB    'Using collectionsjob instead spotsjob
    igRptType = 0
    ''Screen.MousePointer = vbHourGlass  'Wait
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
        If igTestSystem Then
            slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igRptCallType)) & "\" & Trim$(str$(ilRptType))
        Else
            slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igRptCallType)) & "\" & Trim$(str$(ilRptType))
        End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Collect^Test^NOHELP\" & sgUserName & "\" & Trim$(Str$(igRptCallType)) & "\" & Trim$(Str$(ilRptType))
    '    Else
    '        slStr = "Collect^Prod^NOHELP\" & sgUserName & "\" & Trim$(Str$(igRptCallType)) & "\" & Trim$(Str$(ilRptType))
    '    End If
    'End If
    ''lgShellRet = Shell(sgExePath & "RptSel.Exe " & slStr, 1)
    'lgShellRet = Shell(sgExePath & "RptList.Exe " & slStr, 1)
    'Collect.Enabled = False
    ''Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    'slStr = sgDoneMsg
    'Collect.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    sgCommandStr = slStr
    RptList.Show vbModal
    ''MousePointer = vbDefault
End Sub
Private Sub cmcReport_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

End Sub
Private Sub cmcStatDropDown_Click()
    If (imAgencyFlag = 0) And (Not imDirectFlag) Then
        If lbcStatAdvt.ListCount > 0 Then
            lbcStatAdvt.Visible = Not lbcStatAdvt.Visible
        Else
            lbcStatAdvt.Visible = False
        End If
    Else
        If lbcStatAgency.ListCount > 0 Then
            lbcStatAgency.Visible = Not lbcStatAgency.Visible
        Else
            lbcStatAgency.Visible = False
        End If
    End If
    edcStatDropDown.SelStart = 0
    edcStatDropDown.SelLength = Len(edcStatDropDown.Text)
    edcStatDropDown.SetFocus
End Sub
Private Sub cmcStatDropDown_GotFocus()
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub cmcUndo_Click()
    cbcSort.Enabled = True
    cbcSelection.Enabled = True
    mInitCollect False, True
End Sub
Private Sub cmcUndo_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub cmcUpdate_Click()
    Dim ilRet As Integer
    If Not imUpdateAllowed Then
        Exit Sub
    End If
    cbcSort.Enabled = True
    cbcSelection.Enabled = True
    ilRet = mSaveRec()
    If imTerminate Then
        cmcCancel_Click
        Exit Sub
    End If
    If ilRet Then
        pbcCollect(imCollectIndex).Cls
        pbcInfo.Cls
        mInitCollect False, True
    Else
        If (imCollectIndex = 9) Then
            pbcClickFocus.SetFocus  'mEnableBox imBoxNo problem imRow might be off screen
            Exit Sub
        Else
            pbcClickFocus.SetFocus
        End If
    End If
End Sub
Private Sub cmcUpdate_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub cmcZeroPurge_Click()
    Dim ilRet As Integer
    Dim slEndPrevPeriod As String
    Dim llLockRecCode As Long
    Dim slUserName As String
    
    If Not imUpdateAllowed Then
        Exit Sub
    End If
    
    If gFindLockRec(hmRlf, "R", "P", -1, True, slUserName) Then
        ilRet = MsgBox("Collection currently being run by " & slUserName & ", unable to run Zero-Purge at this time", vbOKOnly + vbInformation, "Block")
        Exit Sub
    ElseIf gFindLockRec(hmRlf, "I", "U", -1, False, slUserName) Then
        ilRet = MsgBox("Undo Invoicing currently being run by " & slUserName & ",  unable to run Zero-Purge at this time", vbOKOnly + vbInformation, "Block")
        Exit Sub
    ElseIf gFindLockRec(hmRlf, "I", "F", -1, False, slUserName) Then
        ilRet = MsgBox("Final Invoicing currently being run by " & slUserName & ",  unable to run Zero-Purge at this time", vbOKOnly + vbInformation, "Block")
        Exit Sub
    Else
        llLockRecCode = gCreateLockRec(hmRlf, "R", "Z", 0, True, slUserName)
        If llLockRecCode <= 0 Then
            ilRet = MsgBox("Zero-Purge currently being run by " & slUserName & ", unable to run Zero-Purge at this time", vbOKOnly + vbInformation, "Block")
        End If
    End If
    
    'Dim slEndCurrPeriod As String
    gUnpackDate tgSpf.iRPRP(0), tgSpf.iRPRP(1), slEndPrevPeriod
    'gUnpackDate tgSpf.iRCRP(0), tgSpf.iRCRP(1), slEndCurrPeriod
    ilRet = MsgBox("Zero-purge examines all transactions dates on or prior to " & slEndPrevPeriod & ". It transfers to payment history all Cash transactions whose invoices zero balance, and transfers all Trade transactions of any amount. Ok to proceed?", vbYesNo + vbQuestion, "Zero Purge")
    If ilRet <> vbNo Then
        mZeroBalance
    End If
    If Not gDeleteLockRec_ByRlfCode(hmRlf, llLockRecCode) Then
        ilRet = MsgBox("Unable to remove Zero-Purge Lock", vbOKOnly + vbInformation, "Zero Purge")
    End If
End Sub
Private Sub cmcZeroPurge_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub edcCashTrade_Change()
    If lmRowNo < 1 Then
        If imBoxNo = CASHTRADEINDEX Then
            imLbcArrowSetting = True
            imInitCollectCallRequired = True
            gMatchLookAhead edcCashTrade, lbcCashTrade, imBSMode, imCTComboBoxIndex
            mSetType
            DoEvents
            If imInitCollectCallRequired Then
                If (imType <> imSvType) Or (imActionListIndex <> imSvActionListIndex) Then
                    mInitCollect False, True
                End If
            End If
            imSvType = imType
        End If
    End If
End Sub
Private Sub edcCashTrade_GotFocus()
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcCashTrade_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcCashTrade_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If lmRowNo < 1 Then
        If imBoxNo = CASHTRADEINDEX Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcCashTrade.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcCashTrade_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If lmRowNo < 1 Then
            Select Case imBoxNo
                Case CASHTRADEINDEX    'Cash/Trade
                    gProcessArrowKey Shift, KeyCode, lbcCashTrade, imLbcArrowSetting
            End Select
            edcCashTrade.SelStart = 0
            edcCashTrade.SelLength = Len(edcCashTrade.Text)
        End If
    End If
End Sub
Private Sub edcCommDropDown_Change()
    Dim slStr As String
    If imCommentBoxNo = 1 Then
        slStr = edcCommDropDown.Text
        If Not gValidDate(slStr) Then
            If slStr = "" Then
                smActionDate = ""
            End If
            Exit Sub
        Else
            smActionDate = edcCommDropDown.Text
        End If
        gObtainMonthYear imCalType, slStr, imComCalMonth, imComCalYear
        pbcCalendar_Paint   'mBoxCalDate called within paint
   End If
   If imCommentBoxNo = 2 Then
        imLbcArrowSetting = True
        If (imAgencyFlag = 0) And (Not imDirectFlag) Then
            gMatchLookAhead edcCommDropDown, lbcAdvt, imBSMode, imComboBoxIndex
        ElseIf imAgencyFlag = 1 Then
            gMatchLookAhead edcCommDropDown, lbcAgency, imBSMode, imComboBoxIndex
        End If
        imLbcArrowSetting = False
   End If
End Sub
Private Sub edcCommDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcCommDropDown_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
    If imCommentBoxNo = 1 Then
        If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
            If edcCommDropDown.SelLength <> 0 Then    'avoid deleting two characters
                imBSMode = True 'Force deletion of character prior to selected text
            End If
        End If
        'Filter characters (allow only BackSpace, numbers 0 thru 9
        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
   Else
        If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
            If edcCommDropDown.SelLength <> 0 Then    'avoid deleting two characters
                imBSMode = True 'Force deletion of character prior to selected text
            End If
        End If
   End If
   If imCommentBoxNo = 2 Then
        If imAgencyFlag = 0 Then   'agency
        Else 'advertiser
        End If
   End If
End Sub
Private Sub edcCommDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    If imCommentBoxNo = COMACTDATEINDEX Then
        If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
            If (Shift And vbAltMask) > 0 Then
                plcCalendar.Visible = Not plcCalendar.Visible
            Else
                slDate = edcCommDropDown.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYUP Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                    End If
                    gObtainMonthYear imCalType, slDate, imComCalMonth, imComCalYear
                    edcCommDropDown.Text = slDate
                End If
            End If
            edcCommDropDown.SelStart = 0
            edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
        End If
        If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
            If (Shift And vbAltMask) > 0 Then
            Else
                slDate = edcCommDropDown.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYLEFT Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                    End If
                    gObtainMonthYear imCalType, slDate, imComCalMonth, imComCalYear
                    edcCommDropDown.Text = slDate
                End If
            End If
            edcCommDropDown.SelStart = 0
            edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
        End If
    End If
    If imCommentBoxNo = COMADVAGYINDEX Then
        If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then

            If (imAgencyFlag = 0) And (Not imDirectFlag) Then 'agency
                gProcessArrowKey Shift, KeyCode, lbcAdvt, imLbcArrowSetting
            Else  'advertiser
                gProcessArrowKey Shift, KeyCode, lbcAgency, imLbcArrowSetting
            End If
            edcCommDropDown.SelStart = 0
            edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
        End If
    End If
End Sub

Private Sub edcComment_Change()
    Dim slStr As String
    
    If imInComment Then
        Exit Sub
    End If
    imInComment = True
    slStr = edcComment.Text
    '4/16/18: check not required during selection. Aviod the date beep because of slash (/)
    If Not imChgMode Then
        edcComment.Text = gReplaceIllegalCharacters(slStr)
    End If
    imInComment = False
End Sub

Private Sub edcComment_GotFocus()
    plcCalendar.Visible = False
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

End Sub
Private Sub edcComment_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    ilKey = KeyAscii
    'If Not gCheckKeyAscii(ilKey) Then
    '    KeyAscii = 0
    '    Exit Sub
    'End If

    If Not gCheckEnteredChar(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcCommentDate_Change()
    Dim slStr As String
    slStr = edcCommentDate.Text
    If Not gValidDate(slStr) Then
        Exit Sub
    Else
        smEnterDate = edcCommentDate.Text
    End If
    gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
    pbcCalendar_Paint   'mBoxCalDate called within paint
End Sub
Private Sub edcCommentDate_GotFocus()
    plcCalendar.Move plcSelect.Left + cmcCommentDate.Left + cmcCommentDate.Width - plcCalendar.Width, plcSelect.Top + edcCommentDate.height + fgBevelY
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub edcCommentDate_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcCommentDate_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcCommentDate.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcCommentDate_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If (Shift And vbAltMask) > 0 Then
            plcCalendar.Visible = Not plcCalendar.Visible
        Else
            slDate = edcCommentDate.Text
            If gValidDate(slDate) Then
                If KeyCode = KEYUP Then 'Up arrow
                    slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                Else
                    slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                End If
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                edcCommentDate.Text = slDate
            End If
        End If
        edcCommentDate.SelStart = 0
        edcCommentDate.SelLength = Len(edcCommentDate.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If (Shift And vbAltMask) > 0 Then
        Else
            slDate = edcCommentDate.Text
            If gValidDate(slDate) Then
                If KeyCode = KEYLEFT Then 'Up arrow
                    slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                Else
                    slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                End If
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                edcCommentDate.Text = slDate
            End If
        End If
        edcCommentDate.SelStart = 0
        edcCommentDate.SelLength = Len(edcCommentDate.Text)
    End If
End Sub
Private Sub edcDropDown_Change()
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilActionListIndex As Integer
    Dim ilCollectIndex As Integer
    If lmRowNo < 1 Then
        If imBoxNo = ACTIONINDEX Then
            ilCollectIndex = imCollectIndex
            imLbcArrowSetting = True
            gMatchLookAhead edcDropDown, lbcAction, imBSMode, imComboBoxIndex
            ilActionListIndex = imActionListIndex
            imActionListIndex = lbcAction.ListIndex
            If (imType = imSvType) And (imActionListIndex = imSvActionListIndex) Then
                Exit Sub
            End If
            imSvActionListIndex = imActionListIndex
            If StrComp(lbcAction.List(imActionListIndex), "Revenue Adjustment", vbTextCompare) = 0 Then
                imType = 8
            Else
                If (imCashTradeIndex >= 0) And (imType = 8) Then
                    slStr = lbcCashTrade.List(imCashTradeIndex)
                    If StrComp(slStr, "Cash", 1) = 0 Then
                        imType = 0
                    ElseIf StrComp(slStr, "Trade", 1) = 0 Then
                        imType = 2
                    End If
                End If
            End If
            If (imType = 0) And (imAgencyFlag = 0) Then
                Select Case imActionListIndex
                    Case 0  'View Aging
                        pbcCollect(8).Visible = True
                        imCollectIndex = 8
                        pbcCollect(imCollectIndex).Cls
                    Case 1  'Post cash
                        pbcCollect(1).Visible = True
                        imCollectIndex = 1
                        pbcCollect(imCollectIndex).Cls
                    Case 2  'On Account
                        pbcCollect(2).Visible = True
                        imCollectIndex = 2
                        pbcCollect(imCollectIndex).Cls
                    Case 3  'Transfer
                        pbcCollect(3).Visible = True
                        imCollectIndex = 3
                        pbcCollect(imCollectIndex).Cls
                    Case 4  'Reverse
                        pbcCollect(4).Visible = True
                        imCollectIndex = 4
                        pbcCollect(imCollectIndex).Cls
                    Case 5  'Post return check
                        pbcCollect(5).Visible = True
                        imCollectIndex = 5
                        pbcCollect(imCollectIndex).Cls
                    Case 6  'Redeposit
                        pbcCollect(6).Visible = True
                        imCollectIndex = 6
                        pbcCollect(imCollectIndex).Cls
                    'Case 7  'WriteOff
                    '    pbcCollect(7).Visible = True
                    '    imCollectIndex = 7
                    '    pbcCollect(imCollectIndex).Cls
                    Case 7  'Journal
                        pbcCollect(9).Visible = True
                        imCollectIndex = 9
                        pbcCollect(imCollectIndex).Cls
                    Case 8  'Invoice
                        pbcCollect(10).Visible = True
                        imCollectIndex = 10
                        pbcCollect(imCollectIndex).Cls
                    Case 9  'Invoice Adjustment
'                        pbcCollect(10).Visible = True
'                        imCollectIndex = 10
'                        pbcCollect(imCollectIndex).Cls
                        pbcCollect(12).Visible = True
                        imCollectIndex = 12
                        pbcCollect(imCollectIndex).Cls
                End Select
                If imCollectIndex <> ilCollectIndex Then
                    pbcCollect(ilCollectIndex).Visible = False
                End If
                mInitCollect False, True
                imActionListIndex = ilActionListIndex
                imSvType = imType
            ElseIf ((imType = 2) Or (imType = 4) Or (imType = 6)) And (imAgencyFlag = 0) Then
                Select Case imActionListIndex
                    Case 0  'View Aging
                        pbcCollect(8).Visible = True
                        imCollectIndex = 8
                        pbcCollect(imCollectIndex).Cls
                    Case 1  'Post cash
                        pbcCollect(1).Visible = True
                        imCollectIndex = 1
                        pbcCollect(imCollectIndex).Cls
                    Case 2  'On Account
                        pbcCollect(2).Visible = True
                        imCollectIndex = 2
                        pbcCollect(imCollectIndex).Cls
                    Case 3  'Transfer
                        pbcCollect(3).Visible = True
                        imCollectIndex = 3
                        pbcCollect(imCollectIndex).Cls
                    Case 4  'Reverse
                        pbcCollect(4).Visible = True
                        imCollectIndex = 4
                        pbcCollect(imCollectIndex).Cls
                    'Case 5  'WriteOff
                    '    pbcCollect(7).Visible = True
                    '    imCollectIndex = 7
                    '    pbcCollect(imCollectIndex).Cls
                    Case 5  'Journel
                        pbcCollect(9).Visible = True
                        imCollectIndex = 9
                        pbcCollect(imCollectIndex).Cls
                    Case 6  'Invoice
                        pbcCollect(10).Visible = True
                        imCollectIndex = 10
                        pbcCollect(imCollectIndex).Cls
                    Case 7  'Invoice Adjustment
'                        pbcCollect(10).Visible = True
'                        imCollectIndex = 10
'                        pbcCollect(imCollectIndex).Cls
                        pbcCollect(12).Visible = True
                        imCollectIndex = 12
                        pbcCollect(imCollectIndex).Cls
                End Select
                If imCollectIndex <> ilCollectIndex Then
                    pbcCollect(ilCollectIndex).Visible = False
                End If
                mInitCollect False, True
                imActionListIndex = ilActionListIndex
            ElseIf (imType = 0) Or (imType = 2) Or (imType = 4) Or (imType = 6) Then 'Cash or trade by advertiser
                Select Case imActionListIndex
                    Case 0  'View
                        pbcCollect(8).Visible = True
                        imCollectIndex = 8
                        pbcCollect(imCollectIndex).Cls
                End Select
                If imCollectIndex <> ilCollectIndex Then
                    pbcCollect(ilCollectIndex).Visible = False
                End If
                mInitCollect False, True
                imActionListIndex = ilActionListIndex
            ElseIf (imType = 1) Or (imType = 3) Or (imType = 5) Or (imType = 7) Then 'History
                Select Case imActionListIndex
                    Case 0  'View History
                        pbcCollect(0).Visible = True
                        imCollectIndex = 0
                        pbcCollect(imCollectIndex).Cls
                    Case 1  'Restore History (cash only)
                        pbcCollect(11).Visible = True
                        imCollectIndex = 11
                        pbcCollect(imCollectIndex).Cls
                End Select
                If imCollectIndex <> ilCollectIndex Then
                    pbcCollect(ilCollectIndex).Visible = False
                End If
                   '6-13-08 data recalled.  Chose to look at previous value to keep 'cash history' selection from showing data rather than date range. Dan M
                   If (ilActionListIndex = 1 And imActionListIndex = 0) Or (ilActionListIndex = 0 And imActionListIndex = 1) Then
                    mInitCollect False, True
                Else
                    mInitCollect False, False
                End If
                imActionListIndex = ilActionListIndex
            ElseIf imType = 8 Then
                If imAgencyFlag = 0 Then
                    pbcCollect(12).Visible = True
                    imCollectIndex = 12
                    pbcCollect(imCollectIndex).Cls
            '    Else
            '        pbcCollect(0).Visible = True
            '        imCollectIndex = 0
            '        pbcCollect(imCollectIndex).Cls
                End If
                If imCollectIndex <> ilCollectIndex Then
                    pbcCollect(ilCollectIndex).Visible = False
                End If
                mInitCollect False, True
                imActionListIndex = ilActionListIndex
            End If
            imActionListIndex = lbcAction.ListIndex
            imLbcArrowSetting = False
        'ElseIf ((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
        ElseIf ((imCollectIndex = 1) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
            slStr = edcDropDown.Text
            If Not gValidDate(slStr) Then
                Exit Sub
            End If
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        ElseIf (imCollectIndex = 1) And (imBoxNo = imCheckNo) Then
        ElseIf (imCollectIndex = 1) And (imBoxNo = imAmount) Then
        ElseIf (imCollectIndex = 1) And (imBoxNo = imOnAccountTo) Then
            imLbcArrowSetting = True
            gMatchLookAhead edcDropDown, lbcAdvertiser, imBSMode, imComboBoxIndex
            imAdvtListIndex = lbcAdvertiser.ListIndex
        ElseIf (imCollectIndex = 1) And (imBoxNo = imOnAccountVeh) Then
            imLbcArrowSetting = True
            gMatchLookAhead edcDropDown, lbcOnAcctVeh, imBSMode, imComboBoxIndex
            imOnAcctVehListIndex = lbcOnAcctVeh.ListIndex
        ElseIf (imCollectIndex = 3) And (imBoxNo = imOnAccountTo) Then
            imLbcArrowSetting = True
            gMatchLookAhead edcDropDown, lbcAdvertiser, imBSMode, imComboBoxIndex
            imAdvtListIndex = lbcAdvertiser.ListIndex
        ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then
            Select Case imBoxNo
                Case imCheckDate
                    slStr = edcDropDown.Text
                    If Not gValidDate(slStr) Then
                        Exit Sub
                    End If
                    gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                    pbcCalendar_Paint   'mBoxCalDate called within paint
                Case imCheckNo
                    imLbcArrowSetting = True
                    gMatchLookAhead edcDropDown, lbcBDDate, imBSMode, imComboBoxIndex
            End Select
        ElseIf (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
            slStr = edcDropDown.Text
            If Not gValidDate(slStr) Then
                Exit Sub
            End If
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        ElseIf imCollectIndex = 10 Then
            Select Case imBoxNo
                Case IADVTINDEX  'Advertiser
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcAdvertiser, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcAdvertiser.ListIndex = 0
                    End If
                    imIAdvtListIndex = lbcAdvertiser.ListIndex
                Case IPRDINDEX  'Product
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcProd, imBSMode, slStr)
                    If ilRet = 1 Then   'input was ""
                        lbcProd.ListIndex = 0
                    End If
                    smIProduct = edcDropDown.Text
                Case ISPERSONINDEX  'Salesperson
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcSalesperson, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcSalesperson.ListIndex = 0
                    End If
                    imISalespersonListIndex = lbcSalesperson.ListIndex
                Case IINVNOINDEX  'Invoice #
                Case IREFINVNOINDEX  'Ref Invoice #
                Case ICNTRINDEX  'Contract #
                Case IBILLVEHINDEX  'Vehicle
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcVehicle(0), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcVehicle(0).ListIndex = 0
                    End If
                    imIBillVehicleListIndex = lbcVehicle(0).ListIndex
                Case IAIRVEHINDEX  'Vehicle
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcVehicle(1), imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcVehicle(1).ListIndex = 0
                    End If
                    imIAirVehicleListIndex = lbcVehicle(1).ListIndex
                Case ITRANDATEINDEX 'Tran Date
                    slStr = edcDropDown.Text
                    If Not gValidDate(slStr) Then
                        Exit Sub
                    End If
                    gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                    pbcCalendar_Paint   'mBoxCalDate called within paint
                Case ITRANTYPEINDEX 'Tran Type
                Case INTRTYPEINDEX  'Salesperson
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcNTRType, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcNTRType.ListIndex = 0
                    End If
                    imINTRTypeListIndex = lbcNTRType.ListIndex
                Case INTRTAXINDEX  'Salesperson
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcNTRTax, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcNTRTax.ListIndex = 0
                    End If
                    imINTRTaxListIndex = lbcNTRTax.ListIndex
                Case IGROSSINDEX 'gross
                Case INETINDEX 'Net
                Case IACQUISITIONINDEX 'Acquisition
                Case ISSPARTINDEX  'Vehicle
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcSSPart, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcSSPart.ListIndex = 0
                    End If
                    imISSPartListIndex = lbcSSPart.ListIndex
                Case ISEASONINDEX  'Vehicle
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcSeason, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcSeason.ListIndex = 0
                    End If
                    imISeasonListIndex = lbcSeason.ListIndex
                Case IEVENTINDEX  'Vehicle
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcEvent, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcEvent.ListIndex = 0
                    End If
                    imIEventListIndex = lbcEvent.ListIndex
            End Select
        End If
    Else
        If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 7) Then
            Select Case imBoxNo
                Case AMNTPAID
                Case WRITEOFF
            End Select
        ElseIf imCollectIndex = 9 Then
            Select Case imBoxNo
                Case AMNTPAID
                Case WRITEOFF
                    imLbcArrowSetting = True
                    ilRet = gOptionalLookAhead(edcDropDown, lbcTranType, imBSMode, slStr)
                    If ilRet = 1 Then
                        lbcTranType.ListIndex = 0
                    End If
                    imLbcArrowSetting = False
            End Select
        ElseIf (imCollectIndex = 12) Then
            Select Case imBoxNo
                Case IAAMTPAID
                Case IACOMMENT
            End Select
        End If
    End If
End Sub
Private Sub edcDropDown_DblClick()
    imDoubleClickName = True    'Double click event foolowed by mouse up
End Sub
Private Sub edcDropDown_GotFocus()
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcDropDown_KeyPress(KeyAscii As Integer)
    Dim llRowNo As Long
    Dim ilColNo As Integer
    Dim flY As Single
    Dim flX As Single
    Dim slStr As String
    Dim ilKeyAscii As Integer
    Dim ilKey As Integer
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
    ilKeyAscii = KeyAscii
    If lmRowNo < 1 Then
        If imBoxNo = CASHTRADEINDEX Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        ElseIf imBoxNo = ACTIONINDEX Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        'lseIf ((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
        ElseIf ((imCollectIndex = 1) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        ElseIf (imCollectIndex = 1) And (imBoxNo = imCheckNo) Then
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcDropDown.Text
            slStr = Left$(slStr, edcDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDropDown.SelStart - edcDropDown.SelLength)
            If gCompNumberStr(slStr, "999999999") > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            If KeyAscii <> KEYBACKSPACE Then
                Select Case Chr(KeyAscii)
                    Case "7"
                        llRowNo = 1
                        ilColNo = 1
                    Case "8"
                        llRowNo = 1
                        ilColNo = 2
                    Case "9"
                        llRowNo = 1
                        ilColNo = 3
                    Case "4"
                        llRowNo = 2
                        ilColNo = 1
                    Case "5"
                        llRowNo = 2
                        ilColNo = 2
                    Case "6"
                        llRowNo = 2
                        ilColNo = 3
                    Case "1"
                        llRowNo = 3
                        ilColNo = 1
                    Case "2"
                        llRowNo = 3
                        ilColNo = 2
                    Case "3"
                        llRowNo = 3
                        ilColNo = 3
                    Case "0"
                        llRowNo = 4
                        ilColNo = 1
                    Case "00"   'Not possible
                        llRowNo = 4
                        ilColNo = 2
                    Case "."
                        llRowNo = 4
                        ilColNo = 3
                End Select
                flX = fgPadMinX + (ilColNo - 1) * fgPadDeltaX
                flY = fgPadMinY + (llRowNo - 1) * fgPadDeltaY
                imcNumOutline.Move flX - 15, flY - 15
                imcNumOutline.Visible = True
            Else
                imcNumOutline.Visible = False
            End If
        ElseIf (imCollectIndex = 1) And (imBoxNo = imAmount) Then
            If Not mDropDownKeyPress(ilKeyAscii, False) Then
                KeyAscii = 0
                Exit Sub
            End If
        ElseIf (imCollectIndex = 1) And (imBoxNo = imOnAccountTo) Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        ElseIf (imCollectIndex = 1) And (imBoxNo = imOnAccountVeh) Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        ElseIf (imCollectIndex = 3) And (imBoxNo = imOnAccountTo) Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        ElseIf ((imCollectIndex = 5) Or (imCollectIndex = 6)) And (imBoxNo = imCheckDate) Then
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        ElseIf ((imCollectIndex = 5) Or (imCollectIndex = 6)) And (imBoxNo = imCheckNo) Then
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
        ElseIf (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        ElseIf imCollectIndex = 10 Then
            Select Case imBoxNo
                Case IADVTINDEX  'Advertiser
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case IPRDINDEX  'Product
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case ISPERSONINDEX  'Salesperson
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case IINVNOINDEX  'Invoice #
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case IREFINVNOINDEX  'Ref Invoice #
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case ICNTRINDEX  'Contract #
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case IBILLVEHINDEX  'Vehicle
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case IAIRVEHINDEX  'Vehicle
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case IPKLINEINDEX
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case ITRANDATEINDEX 'Tran Date
                    'Filter characters (allow only BackSpace, numbers 0 thru 9
                    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case ITRANTYPEINDEX 'Tran Type
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case INTRTYPEINDEX  'Salesperson
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case INTRTAXINDEX  'Salesperson
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case IGROSSINDEX 'Gross
                    If (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                        If Not mDropDownKeyPress(ilKeyAscii, False) Then
                            KeyAscii = 0
                            Exit Sub
                        End If
                    Else
                        If Not mDropDownKeyPress(ilKeyAscii, True) Then
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                Case INETINDEX 'Net
                    If (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                        If Not mDropDownKeyPress(ilKeyAscii, False) Then
                            KeyAscii = 0
                            Exit Sub
                        End If
                    Else
                        If Not mDropDownKeyPress(ilKeyAscii, True) Then
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                Case IACQUISITIONINDEX 'Gross
                    If (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                        If Not mDropDownKeyPress(ilKeyAscii, False) Then
                            KeyAscii = 0
                            Exit Sub
                        End If
                    Else
                        If Not mDropDownKeyPress(ilKeyAscii, True) Then
                            KeyAscii = 0
                            Exit Sub
                        End If
                    End If
                Case ISSPARTINDEX  'Sales Source plus Participant
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case ISEASONINDEX  'Sales Source plus Participant
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
                Case IEVENTINDEX  'Sales Source plus Participant
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
            End Select
        End If
    Else
        If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 7) Then
            Select Case imBoxNo
                Case AMNTPAID
                    If Not mDropDownKeyPress(ilKeyAscii, False) Then
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case WRITEOFF
                    If Not mDropDownKeyPress(ilKeyAscii, False) Then
                        KeyAscii = 0
                        Exit Sub
                    End If
            End Select
        ElseIf imCollectIndex = 9 Then
            Select Case imBoxNo
                Case AMNTPAID
                    If Not mDropDownKeyPress(ilKeyAscii, True) Then
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case WRITEOFF
                    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                        If edcDropDown.SelLength <> 0 Then    'avoid deleting two characters
                            imBSMode = True 'Force deletion of character prior to selected text
                        End If
                    End If
            End Select
        ElseIf imCollectIndex = 12 Then
            Select Case imBoxNo
                Case IAAMTPAID
                    If Not mDropDownKeyPress(ilKeyAscii, True) Then
                        KeyAscii = 0
                        Exit Sub
                    End If
                Case IACOMMENT
            End Select
        End If
    End If
End Sub
Private Sub edcDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If lmRowNo < 1 Then
            Select Case imBoxNo
                Case ACTIONINDEX    'Actions
                    gProcessArrowKey Shift, KeyCode, lbcAction, imLbcArrowSetting
                Case Else
                    If imCollectIndex = 1 Then
                        Select Case imBoxNo
                            Case imCheckDate
                                If (Shift And vbAltMask) > 0 Then
                                    plcCalendar.Visible = Not plcCalendar.Visible
                                Else
                                    slDate = edcDropDown.Text
                                    If gValidDate(slDate) Then
                                        If KeyCode = KEYUP Then 'Up arrow
                                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                        Else
                                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                        End If
                                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                        edcDropDown.Text = slDate
                                    End If
                                End If
                            Case imCheckNo
                                If (Shift And vbAltMask) > 0 Then
                                    plcNum.Visible = Not plcNum.Visible
                                    Exit Sub
                                End If
                            Case imAmount
                                If (Shift And vbAltMask) > 0 Then
                                    plcNum.Visible = Not plcNum.Visible
                                    Exit Sub
                                End If
                            Case imOnAccountTo
                                gProcessArrowKey Shift, KeyCode, lbcAdvertiser, imLbcArrowSetting
                            Case imOnAccountVeh
                                gProcessArrowKey Shift, KeyCode, lbcOnAcctVeh, imLbcArrowSetting
                        End Select
                    ElseIf imCollectIndex = 3 Then
                        Select Case imBoxNo
                            Case imCheckDate
                                If (Shift And vbAltMask) > 0 Then
                                    plcCalendar.Visible = Not plcCalendar.Visible
                                Else
                                    slDate = edcDropDown.Text
                                    If gValidDate(slDate) Then
                                        If KeyCode = KEYUP Then 'Up arrow
                                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                        Else
                                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                        End If
                                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                        edcDropDown.Text = slDate
                                    End If
                                End If
                            Case imOnAccountTo
                                gProcessArrowKey Shift, KeyCode, lbcAdvertiser, imLbcArrowSetting
                        End Select
                    'ElseIf ((imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
                    ElseIf ((imCollectIndex = 4) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
                        If (Shift And vbAltMask) > 0 Then
                            plcCalendar.Visible = Not plcCalendar.Visible
                        Else
                            slDate = edcDropDown.Text
                            If gValidDate(slDate) Then
                                If KeyCode = KEYUP Then 'Up arrow
                                    slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                Else
                                    slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                End If
                                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                edcDropDown.Text = slDate
                            End If
                        End If
                    ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then
                        Select Case imBoxNo
                            Case imCheckDate
                                If (Shift And vbAltMask) > 0 Then
                                    plcCalendar.Visible = Not plcCalendar.Visible
                                Else
                                    slDate = edcDropDown.Text
                                    If gValidDate(slDate) Then
                                        If KeyCode = KEYUP Then 'Up arrow
                                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                        Else
                                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                        End If
                                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                        edcDropDown.Text = slDate
                                    End If
                                End If
                            Case imCheckNo
                                gProcessArrowKey Shift, KeyCode, lbcBDDate, imLbcArrowSetting
                        End Select
                    ElseIf imCollectIndex = 9 Then
                        Select Case imBoxNo
                            Case imCheckDate
                                If (Shift And vbAltMask) > 0 Then
                                    plcCalendar.Visible = Not plcCalendar.Visible
                                Else
                                    slDate = edcDropDown.Text
                                    If gValidDate(slDate) Then
                                        If KeyCode = KEYUP Then 'Up arrow
                                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                        Else
                                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                        End If
                                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                        edcDropDown.Text = slDate
                                    End If
                                End If
                        End Select
                    ElseIf imCollectIndex = 10 Then
                        Select Case imBoxNo
                            Case IADVTINDEX  'Advertiser
                                gProcessArrowKey Shift, KeyCode, lbcAdvertiser, imLbcArrowSetting
                            Case IPRDINDEX  'Product
                                gProcessArrowKey Shift, KeyCode, lbcProd, imLbcArrowSetting
                            Case ISPERSONINDEX  'Salesperson
                                gProcessArrowKey Shift, KeyCode, lbcSalesperson, imLbcArrowSetting
                            Case IINVNOINDEX  'Invoice #
                            Case IREFINVNOINDEX  'ref Invoice #
                            Case ICNTRINDEX  'Contract #
                            Case IBILLVEHINDEX 'Vehicle
                                gProcessArrowKey Shift, KeyCode, lbcVehicle(0), imLbcArrowSetting
                            Case IAIRVEHINDEX 'Vehicle
                                gProcessArrowKey Shift, KeyCode, lbcVehicle(1), imLbcArrowSetting
                            Case ITRANDATEINDEX 'Tran Date
                                If (Shift And vbAltMask) > 0 Then
                                    plcCalendar.Visible = Not plcCalendar.Visible
                                Else
                                    slDate = edcDropDown.Text
                                    If gValidDate(slDate) Then
                                        If KeyCode = KEYUP Then 'Up arrow
                                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                        Else
                                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                        End If
                                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                        edcDropDown.Text = slDate
                                    End If
                                End If
                            Case ITRANTYPEINDEX 'Tran Type
                            Case INTRTYPEINDEX  'Salesperson
                                gProcessArrowKey Shift, KeyCode, lbcNTRType, imLbcArrowSetting
                            Case INTRTAXINDEX  'Salesperson
                                gProcessArrowKey Shift, KeyCode, lbcNTRTax, imLbcArrowSetting
                            Case IGROSSINDEX 'Gross
                                If (Shift And vbAltMask) > 0 Then
                                    plcNum.Visible = Not plcNum.Visible
                                    Exit Sub
                                End If
                            Case INETINDEX 'Net
                                If (Shift And vbAltMask) > 0 Then
                                    plcNum.Visible = Not plcNum.Visible
                                    Exit Sub
                                End If
                            Case IACQUISITIONINDEX 'Net
                                If (Shift And vbAltMask) > 0 Then
                                    plcNum.Visible = Not plcNum.Visible
                                    Exit Sub
                                End If
                            Case ISSPARTINDEX 'Vehicle
                                gProcessArrowKey Shift, KeyCode, lbcSSPart, imLbcArrowSetting
                            Case ISEASONINDEX 'Vehicle
                                gProcessArrowKey Shift, KeyCode, lbcSeason, imLbcArrowSetting
                            Case IEVENTINDEX 'Vehicle
                                gProcessArrowKey Shift, KeyCode, lbcEvent, imLbcArrowSetting
                        End Select
                    ElseIf imCollectIndex = 12 Then
                        Select Case imBoxNo
                            Case imCheckDate
                                If (Shift And vbAltMask) > 0 Then
                                    plcCalendar.Visible = Not plcCalendar.Visible
                                Else
                                    slDate = edcDropDown.Text
                                    If gValidDate(slDate) Then
                                        If KeyCode = KEYUP Then 'Up arrow
                                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                                        Else
                                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                                        End If
                                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                        edcDropDown.Text = slDate
                                    End If
                                End If
                        End Select
                    End If
            End Select
            edcDropDown.SelStart = 0
            edcDropDown.SelLength = Len(edcDropDown.Text)
        Else
            If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 7) Then
                Select Case imBoxNo
                    Case AMNTPAID
                        If (Shift And vbAltMask) > 0 Then
                            plcNum.Visible = Not plcNum.Visible
                            Exit Sub
                        End If
                    Case WRITEOFF
                        If (Shift And vbAltMask) > 0 Then
                            plcNum.Visible = Not plcNum.Visible
                            Exit Sub
                        End If
                End Select
            ElseIf (imCollectIndex = 9) Then
                Select Case imBoxNo
                    Case AMNTPAID
                        If (Shift And vbAltMask) > 0 Then
                            plcNum.Visible = Not plcNum.Visible
                            Exit Sub
                        End If
                    Case WRITEOFF
                        gProcessArrowKey Shift, KeyCode, lbcTranType, imLbcArrowSetting
                        edcDropDown.SelStart = 0
                        edcDropDown.SelLength = Len(edcDropDown.Text)
                End Select
            ElseIf (imCollectIndex = 12) Then
                Select Case imBoxNo
                    Case IAAMTPAID
                        If (Shift And vbAltMask) > 0 Then
                            plcNum.Visible = Not plcNum.Visible
                            Exit Sub
                        End If
                    Case IACOMMENT
                End Select
            End If
        End If
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If lmRowNo < 1 Then
            'If ((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
            If ((imCollectIndex = 1) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
                If (Shift And vbAltMask) > 0 Then
                Else
                    slDate = edcDropDown.Text
                    If gValidDate(slDate) Then
                        If KeyCode = KEYLEFT Then 'Up arrow
                            slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                        Else
                            slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                        End If
                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                        edcDropDown.Text = slDate
                    End If
                End If
            ElseIf (imCollectIndex = 1) And (imBoxNo = imCheckNo) Then
            ElseIf (imCollectIndex = 1) And (imBoxNo = imAmount) Then
            ElseIf (imCollectIndex = 1) And (imBoxNo = imOnAccountTo) Then
            ElseIf (imCollectIndex = 1) And (imBoxNo = imOnAccountVeh) Then
            ElseIf (imCollectIndex = 3) And (imBoxNo = imOnAccountTo) Then
            ElseIf imCollectIndex = 10 Then
                Select Case imBoxNo
                    Case IADVTINDEX  'Advertiser
                    Case IPRDINDEX  'Product
                    Case ISPERSONINDEX  'Salesperson
                    Case IINVNOINDEX  'Invoice #
                    Case IREFINVNOINDEX  'ref Invoice #
                    Case ICNTRINDEX  'Contract #
                    Case IBILLVEHINDEX  'Vehicle
                    Case IAIRVEHINDEX  'Vehicle
                    Case IPKLINEINDEX  'Package Line
                    Case ITRANDATEINDEX 'Tran Date
                        If (Shift And vbAltMask) > 0 Then
                        Else
                            slDate = edcDropDown.Text
                            If gValidDate(slDate) Then
                                If KeyCode = KEYLEFT Then 'Up arrow
                                    slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                                Else
                                    slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                                End If
                                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                                edcDropDown.Text = slDate
                            End If
                        End If
                    Case ITRANTYPEINDEX 'Tran Type
                    Case INTRTYPEINDEX  'NTR Type
                    Case INTRTAXINDEX  'NTR Type
                    Case IGROSSINDEX 'Gross
                    Case INETINDEX 'Net
                    Case IACQUISITIONINDEX 'Net
                End Select
            End If
            edcDropDown.SelStart = 0
            edcDropDown.SelLength = Len(edcDropDown.Text)
        Else
            If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 7) Then
                Select Case imBoxNo
                    Case AMNTPAID
                    Case WRITEOFF
                End Select
            ElseIf (imCollectIndex = 12) Then
                Select Case imBoxNo
                    Case IAAMTPAID
                    Case IACOMMENT
                End Select
            End If
        End If
    End If
End Sub
Private Sub edcDropDown_LostFocus()
    If lmRowNo < 1 Then
        If imCollectIndex = 10 Then
            Select Case imBoxNo
                Case IPRDINDEX  'Product
                    smIProduct = edcDropDown.Text
            End Select
        End If
        If imCollectIndex = 11 Then
        End If
    End If
End Sub
Private Sub edcDropDown_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If lmRowNo < 1 Then
        If imCollectIndex <> 10 Then
            imDoubleClickName = False
        Else
            If imDoubleClickName Then
                Select Case imBoxNo
                    Case IADVTINDEX, IPRDINDEX, ISPERSONINDEX, INTRTYPEINDEX    'Advertiser; Product; Salesperson
                        If imTabDirection = -1 Then  'Right To Left
                            pbcSTab.SetFocus
                        Else
                            pbcTab.SetFocus
                        End If
                        Exit Sub
                End Select
            End If
            imDoubleClickName = False
        End If
    Else
        If (imDoubleClickName) And (imCollectIndex = 9) Then
            Select Case imBoxNo
                Case WRITEOFF
                    If imTabDirection = -1 Then  'Right To Left
                        pbcSTab.SetFocus
                    Else
                        pbcTab.SetFocus
                    End If
                    Exit Sub
            End Select
            imDoubleClickName = False
        Else
            imDoubleClickName = False
        End If
    End If
End Sub
Private Sub edcInfoDropDown_Change()
    Dim slStr As String
    Dim ilRet As Integer
    Select Case imInfoBoxNo
        Case PAYABLESINDEX
            imLbcArrowSetting = True
            ilRet = gOptionalLookAhead(edcInfoDropDown, lbcPayables, imBSMode, slStr)
            If ilRet = 1 Then
                lbcPayables.ListIndex = 1
            End If
            smInfoCtrls(imInfoBoxNo) = edcInfoDropDown.Text
        Case CREDITRINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcInfoDropDown, lbcCreditRestr, imBSMode, imComboBoxIndex
            smInfoCtrls(imInfoBoxNo) = edcInfoDropDown.Text
        Case CREDITAMTINDEX
            imLbcArrowSetting = True
            'gMatchLookAhead edcInfoDropDown, lbcCreditRestr, imBSMode, imComboBoxIndex
            smInfoCtrls(imInfoBoxNo) = edcInfoDropDown.Text
        Case PAYRATEINDEX
            imLbcArrowSetting = True
            gMatchLookAhead edcInfoDropDown, lbcPaymRating, imBSMode, imComboBoxIndex
            smInfoCtrls(imInfoBoxNo) = edcInfoDropDown.Text
    End Select
    imLbcArrowSetting = False
    mInfoSetChg imInfoBoxNo
End Sub
Private Sub edcInfoDropDown_DblClick()
    imDoubleClickName = True    'Double click event followed by mouse up
End Sub
Private Sub edcInfoDropDown_GotFocus()
    Select Case imInfoBoxNo
        Case COMNTINDEX         'Comment list field
        Case PAYABLESINDEX
            If lbcPayables.ListCount = 1 Then
                lbcPayables.ListIndex = 0
                'If imTabDirection = -1 Then  'Right To Left
                '    pbcInfoSTab.SetFocus
                'Else
                '    pbcInfoTab.SetFocus
                'End If
                'Exit Sub
            End If
        Case CREDITRINDEX
            If lbcCreditRestr.ListCount = 1 Then
                lbcCreditRestr.ListIndex = 0
                'If imTabDirection = -1 Then  'Right To Left
                '    pbcInfoSTab.SetFocus
                'Else
                '    pbcInfoTab.SetFocus
                'End If
                'Exit Sub
            End If
        Case PAYRATEINDEX
            If lbcPaymRating.ListCount = 1 Then
                lbcPaymRating.ListIndex = 0
                'If imTabDirection = -1 Then  'Right To Left
                '    pbcInfoSTab.SetFocus
                'Else
                '    pbcInfoTab.SetFocus
                'End If
                'Exit Sub
            End If
        Case STATSINDEX      'Statistics control
    End Select
End Sub
Private Sub edcInfoDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcInfoDropDown_KeyPress(KeyAscii As Integer)
    Dim ilPos As Integer
    Dim slStr As String
    Dim ilKey As Integer
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
    Select Case imInfoBoxNo
        Case CREDITAMTINDEX
            ilPos = InStr(edcInfoDropDown.SelText, ".")
            If ilPos = 0 Then
                ilPos = InStr(edcInfoDropDown.Text, ".")    'Disallow multi-decimal points
                If ilPos > 0 Then
                    If KeyAscii = KEYDECPOINT Then
                        Beep
                        KeyAscii = 0
                        Exit Sub
                    End If
                End If
            End If
            'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
            slStr = edcInfoDropDown.Text
            slStr = Left$(slStr, edcInfoDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcInfoDropDown.SelStart - edcInfoDropDown.SelLength)
            If gCompNumberStr(slStr, "9999999.99") > 0 Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case Else
            If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
                If edcInfoDropDown.SelLength <> 0 Then    'avoid deleting two characters
                    imBSMode = True 'Force deletion of character prior to selected text
                End If
            End If
    End Select
End Sub
Private Sub edcInfoDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        Select Case imInfoBoxNo
            Case COMNTINDEX         'Comment list field
            Case PAYABLESINDEX     'Sales person
                gProcessArrowKey Shift, KeyCode, lbcPayables, imLbcArrowSetting
            Case CREDITRINDEX    'Credit restrictions
                gProcessArrowKey Shift, KeyCode, lbcCreditRestr, imLbcArrowSetting
            Case PAYRATEINDEX    'payment rating
                gProcessArrowKey Shift, KeyCode, lbcPaymRating, imLbcArrowSetting
            Case PHONEINDEX      'Phone Number
            Case STATSINDEX      'Statistics control

        End Select

        edcInfoDropDown.SelStart = 0
        edcInfoDropDown.SelLength = Len(edcInfoDropDown.Text)
    End If
End Sub
Private Sub edcInfoDropDown_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        Select Case imInfoBoxNo
            Case PAYABLESINDEX
                If imTabDirection = -1 Then  'Right To Left
                    pbcInfoSTab.SetFocus
                Else
                    pbcInfoTab.SetFocus
                End If
                Exit Sub
        End Select
        imDoubleClickName = False
    End If
End Sub

Private Sub edcInputComment_Change()
    Dim slStr As String
    
    If imInComment Then
        Exit Sub
    End If
    imInComment = True
    slStr = edcInputComment.Text
    edcInputComment.Text = gReplaceIllegalCharacters(slStr)
    imInComment = False
End Sub

Private Sub edcInputComment_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    ilKey = KeyAscii
    'If Not gCheckKeyAscii(ilKey) Then
    '    KeyAscii = 0
    '    Exit Sub
    'End If
    If Not gCheckEnteredChar(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcLinkDestHelpMsg_Change()
    igParentRestarted = True
End Sub
Private Sub edcStatDropDown_Change()
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    imLbcArrowSetting = True
    If (imAgencyFlag = 0) And (Not imDirectFlag) Then
        gMatchLookAhead edcStatDropDown, lbcStatAdvt, imBSMode, imComboBoxIndex
        If lbcStatAdvt.ListIndex = 0 Then
            ilRet = mReadAgfRec()
            lmStatAgfRecPos = lmAgfRecPos
            mMoveAgencyRecToCtrl
        ElseIf lbcStatAdvt.ListIndex > 0 Then
            slNameCode = lbcAdvtCode.List(lbcStatAdvt.ListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            slCode = Trim$(slCode)
            tmAdfSrchKey.iCode = CInt(slCode)
            'imAdfCode = CInt(slCode)
            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            ilRet = btrGetPosition(hmAdf, lmStatAdfRecPos)
            mMoveAdvtRecToCtrl
        End If
        pbcInfo.Cls
        pbcInfo_Paint
    ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then
        gMatchLookAhead edcStatDropDown, lbcStatAgency, imBSMode, imComboBoxIndex
        If lbcStatAgency.ListIndex = 0 Then
            ilRet = mReadAdfRec()
            lmStatAdfRecPos = lmAdfRecPos
            mMoveAdvtRecToCtrl
        ElseIf lbcStatAgency.ListIndex > 0 Then
            slNameCode = lbcAgyCode.List(lbcStatAgency.ListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            slCode = Trim$(slCode)
            tmAgfSrchKey.iCode = CInt(slCode)
            'imAgfCode = CInt(slCode)
            ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            ilRet = btrGetPosition(hmAgf, lmStatAgfRecPos)
            mMoveAgencyRecToCtrl
        End If
        pbcInfo.Cls
        pbcInfo_Paint
    End If
    imLbcArrowSetting = False
End Sub
Private Sub edcStatDropDown_GotFocus()
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub edcStatDropDown_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcStatDropDown_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcStatDropDown.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcStatDropDown_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KeyDown) Then
        If (imAgencyFlag = 0) And (Not imDirectFlag) Then 'agency
            gProcessArrowKey Shift, KeyCode, lbcStatAdvt, imLbcArrowSetting
        Else  'advertiser
            gProcessArrowKey Shift, KeyCode, lbcStatAgency, imLbcArrowSetting
        End If
        edcStatDropDown.SelStart = 0
        edcStatDropDown.SelLength = Len(edcStatDropDown.Text)
    End If
End Sub

Private Sub edcTranComment_Change()
    Dim slStr As String
    
    If imInComment Then
        Exit Sub
    End If
    imInComment = True
    slStr = edcTranComment.Text
    edcTranComment.Text = gReplaceIllegalCharacters(slStr)
    imInComment = False
End Sub

Private Sub edcTranComment_GotFocus()
    Dim ilTest As Integer
    'Statement required within GotFocus to make SetFocus work
    ilTest = 0
End Sub

Private Sub edcTranComment_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer

    ilKey = KeyAscii
    If Not gCheckEnteredChar(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub Form_Activate()
    Dim slUserName As String
    Dim ilRet As Integer
    
    If Not imFirstActivate Then
        DoEvents    'Process events so pending keys are not sent to this
                    'form when keypreview turn on
        gShowBranner imUpdateAllowed
        Collect.KeyPreview = True  'To get Alt J and Alt L keys
        'Me.Refresh
        Exit Sub
    End If
    imFirstActivate = False

    If (igWinStatus(COLLECTIONSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
        lmLockRecCode = 0
    Else
        If gFindLockRec(hmRlf, "R", "Z", -1, False, slUserName) Then
            lmLockRecCode = 0
            ilRet = MsgBox("Zero-Purge currently being run by " & slUserName & ", you will be placed into view mode", vbOKOnly + vbInformation, "Block")
        ElseIf gFindLockRec(hmRlf, "R", "R", -1, False, slUserName) Then
            lmLockRecCode = 0
            ilRet = MsgBox("Reconcile currently being run by " & slUserName & ", you will be placed into view mode", vbOKOnly + vbInformation, "Block")
        Else
            lmLockRecCode = gCreateLockRec(hmRlf, "R", "P", CLng(tgUrf(0).iCode), True, slUserName)
            If lmLockRecCode <= 0 Then
                ilRet = MsgBox("Collection currently being run by " & slUserName & ", you will be placed into view mode", vbOKOnly + vbInformation, "Block")
            End If
        End If
    End If
    
    If (igWinStatus(COLLECTIONSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Or (lmLockRecCode = 0) Then
        If igCollCallFrom <> 1 Then
            pbcCollect(8).Visible = True
            pbcCollect(8).Enabled = True
        End If
        pbcInfoSTab.Enabled = False
        pbcInfoTab.Enabled = False
        pbcInfo.Enabled = False
        pbcCommSTab.Enabled = False
        pbcCommTab.Enabled = False
        pbcComment.Enabled = False
        imUpdateAllowed = False
    Else
        pbcCollect(8).Visible = True
        pbcCollect(8).Enabled = True
        pbcInfoSTab.Enabled = True
        pbcInfoTab.Enabled = True
        pbcInfo.Enabled = True
        pbcCommSTab.Enabled = True
        pbcCommTab.Enabled = True
        pbcComment.Enabled = True
        imUpdateAllowed = True
    End If
    gShowBranner imUpdateAllowed
    DoEvents    'Process events so pending keys are not sent to this
                'form when keypreview turn on
    'Collect.KeyPreview = True  'To get Alt J and Alt L keys
    Me.KeyPreview = True
    Me.ZOrder 0 'Send to front
    mPaintInfoTitle
    If igCollCallFrom <> 1 Then
        imType = 0
        imCollectIndex = 8
        mInitCollect True, True
        pbcCollect_Paint 8
    Else
        pbcCollect(8).Visible = False
        pbcCollect(8).Enabled = False
        igCollCallFrom = -1
        pbcCollect_Paint 1
    End If
    Collect.Refresh
End Sub
Private Sub Form_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub Form_Deactivate()
    'Collect.KeyPreview = False
    Me.KeyPreview = False
End Sub
Private Sub Form_KeyUp(KeyCode As Integer, Shift As Integer)
    'If ((Shift And vbAltMask) > 0) And (KeyCode = 74) Then    'J=74
    '    Collect.KeyPreview = False
    '    Traffic!gpcBasicWnd.Value = True   'Button up and unload
    'End If
    'If ((Shift And vbAltMask) > 0) And (KeyCode = 76) Then    'L=76
    '    Collect.KeyPreview = False
    '    Traffic!gpcAuxWnd.Value = True   'Button up and unload
    'End If
    Dim ilReSet As Integer

    If (KeyCode = KEYF1) Or (KeyCode = KEYF4) Or (KeyCode = KEYF5) Then
        plcCalendar.Visible = False
        plcNum.Visible = False
        If cbcSelection.Enabled Then
            cbcSelection.Enabled = False
            ilReSet = True
        Else
            ilReSet = False
        End If
        gFunctionKeyBranch KeyCode
        If imInfoBoxNo > 0 Then
            mEnableInfoBox imInfoBoxNo
        ElseIf imCommentBoxNo > 0 Then
            mEnableComBox imCommentBoxNo
        Else
            mEnableBox imBoxNo
        End If
        If ilReSet Then
            cbcSelection.Enabled = True
        End If
    End If
End Sub
Private Sub Form_LinkExecute(CmdStr As String, Cancel As Integer)
    sgDoneMsg = CmdStr
    igChildDone = True
    Cancel = 0
End Sub
Private Sub Form_Load()
    If Screen.Width * 15 = 640 Then
        fmAdjFactorW = 1#
        fmAdjFactorH = 1#
    Else
        fmAdjFactorW = ((lgPercentAdjW * ((Screen.Width) / (640 * 15 / Me.Width))) / 100) / Me.Width
        Me.Width = (lgPercentAdjW * ((Screen.Width) / (640 * 15 / Me.Width))) / 100
        fmAdjFactorH = ((lgPercentAdjH * ((Screen.height) / (480 * 15 / Me.height))) / 100) / Me.height
        Me.height = (lgPercentAdjH * ((Screen.height) / (480 * 15 / Me.height))) / 100
    End If
    mInit
    If imTerminate Then
        cmcCancel_Click
    End If
End Sub
Private Sub Form_Unload(Cancel As Integer)
    Dim ilRet As Integer
    On Error Resume Next
    
    ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLockRecCode)
    Erase tmAvgToPayInfo
    Erase tmGsfInfo
    Erase tmSeasonInfo
    Erase tmTeam
    Erase lmZBRvfCode
    Erase tmTranTypeCode
    Erase tmNTRTypeCode
    Erase tmProdCode
    Erase tmHMnf
    Erase tmSMnf
    Erase tmSSPart
    Erase tmPif
    Erase tmPayableCode
    Erase tmZP
    Erase tmZPLink
    Erase imAdf
    Erase smAdfCurrAR
    Erase smAdfOver90
    Erase imAgf
    Erase smAgfCurrAR
    Erase smAgfOver90
    Erase tmCtrls
    Erase lmBDCheckDate
    Erase smBDCheckNo
    Erase smBDAmount
    Erase smBDVariance
    Erase tmTransCtrls
    Erase lmUpdateRvfRecPos
    Erase tmVehInv
    Erase smShow
    Erase smSave
    Erase lmSave
    Erase lmNTRSbfCode     '2-24-04
    Erase imBacklogTrfCode
    Erase smTranComment
    Erase smItemComment
    Erase tgTransactionCode
    Erase tmRvfUserVehicle
    Erase tmTaxSortCode
    Erase tmSalesperson
    Erase smRestoreInvNo
    smRvfUserVehicleTag = ""
    Erase tmOnAcctVeh
    smOnAcctVehTag = ""
    Erase tmUserVehicle
    'L.Bianchi
    Erase sComments
    'Close files and destroy handles
    ilRet = btrClose(hmPrf)
    btrDestroy hmPrf
    ilRet = btrClose(hmSpf)
    btrDestroy hmSpf
    ilRet = btrClose(hmAdf)
    btrDestroy hmAdf
    ilRet = btrClose(hmAgf)
    btrDestroy hmAgf
    ilRet = btrClose(hmPnf)
    btrDestroy hmPnf
    ilRet = btrClose(hmSlf)
    btrDestroy hmSlf
    ilRet = btrClose(hmSbf)
    btrDestroy hmSbf
    ilRet = btrClose(hmCHF)
    btrDestroy hmCHF
    ilRet = btrClose(hmSof)
    btrDestroy hmSof
    ilRet = btrClose(hmCdf)
    btrDestroy hmCdf
    ilRet = btrClose(hmCef)
    btrDestroy hmCef
    ilRet = btrClose(hmGhf)
    btrDestroy hmGhf
    ilRet = btrClose(hmGsf)
    btrDestroy hmGsf
    ilRet = btrClose(hmLcf)
    btrDestroy hmLcf
    ilRet = btrClose(hmRlf)
    btrDestroy hmRlf
    ilRet = btrClose(hmRvf)
    btrDestroy hmRvf
    ilRet = btrClose(hmPif)
    btrDestroy hmPif
    ilRet = btrClose(hmApf)
    btrDestroy hmApf
    
    rst_Rvf.Close
    
    igJobShowing(COLLECTIONSJOB) = False
    Set Collect = Nothing   'Remove data segment
End Sub

Private Sub imcKey_Click()
    pbcKey.Visible = Not pbcKey.Visible
End Sub

Private Sub imcKey_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    'pbcKey.Visible = True
End Sub
Private Sub imcKey_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    'pbcKey.Visible = False
End Sub
Private Sub lbcAction_Click()

    Dim ilCount As Integer
    For ilCount = 0 To 11 Step 1
        pbcCollect(ilCount).Cls
    Next ilCount
    imLbcArrowSetting = False
    gProcessLbcClick lbcAction, edcDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcAction_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcAction.Visible = False
    edcDropDown.SetFocus
End Sub
Private Sub lbcAdvertiser_Click()
    If imCollectIndex = 1 Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcAdvertiser, edcDropDown, imChgMode, imLbcArrowSetting
    ElseIf imCollectIndex = 3 Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcAdvertiser, edcDropDown, imChgMode, imLbcArrowSetting
    ElseIf imCollectIndex = 10 Then
        If imLbcMouseDown Then
            tmcClick.Interval = 300
            tmcClick.Enabled = True
            'pbcEatTab(1).Enabled = True
            'pbcEatTab(0).Enabled = True
            'pbcEatTab(0).SetFocus
            imLbcMouseDown = False
        Else
            imLbcArrowSetting = False
            gProcessLbcClick lbcAdvertiser, edcDropDown, imChgMode, imLbcArrowSetting
        End If
    End If
End Sub
Private Sub lbcAdvertiser_DblClick()
    If imCollectIndex = 10 Then
        tmcClick.Enabled = False
        'pbcEatTab(1).Enabled = False
        'pbcEatTab(0).Enabled = False
        imDoubleClickName = True    'Double click event is followed by a mouse up event
                                    'Process the double click event in the mouse up event
                                    'to avoid the mouse up event being in next form
    End If
End Sub
Private Sub lbcAdvertiser_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imCollectIndex = 10 Then
        imLbcMouseDown = True
    End If
End Sub
Private Sub lbcAdvertiser_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imCollectIndex = 10 Then
        If imDoubleClickName Then
            imLbcArrowSetting = False
            gProcessLbcClick lbcAdvertiser, edcDropDown, imChgMode, imLbcArrowSetting
            If imTabDirection = -1 Then  'Right To Left
                pbcSTab.SetFocus
            Else
                pbcTab.SetFocus
            End If
        End If
    End If
End Sub
Private Sub lbcAdvt_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcAdvt, edcCommDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcAdvt_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub
Private Sub lbcAdvt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        'If imTabDirection = -1 Then  'Right To Left
            'pbcCommSTab.SetFocus
        'Else
            'pbcCommTab.SetFocus
        'End If
        lbcAdvt.Visible = False
        edcCommDropDown.SetFocus
End Sub
Private Sub lbcAgency_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcAgency, edcCommDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcAgency_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub
Private Sub lbcAgency_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        'If imTabDirection = -1 Then  'Right To Left
            'pbcCommSTab.SetFocus
        'Else
            'pbcCommTab.SetFocus
        'End If
        lbcAgency.Visible = False
        edcCommDropDown.SetFocus
End Sub
Private Sub lbcBDDate_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcBDDate, edcDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcCashTrade_Click()
    Dim ilCount As Integer
    If lbcCashTrade.ListIndex <> imCashTradeIndex Then
        For ilCount = 0 To 11 Step 1
            pbcCollect(ilCount).Cls
        Next ilCount
    End If
    imLbcArrowSetting = False
    gProcessLbcClick lbcCashTrade, edcCashTrade, imCTChgMode, imLbcArrowSetting
End Sub
Private Sub lbcCashTrade_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcCashTrade.Visible = False
End Sub
Private Sub lbcCreditRestr_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcCreditRestr, edcInfoDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcCreditRestr_DblClick()
'    imInfoBoxNo = 1
'    mEnableInfoBox 1
End Sub
Private Sub lbcCreditRestr_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub
Private Sub lbcCreditRestr_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)

'        If imTabDirection = -1 Then  'Right To Left
'            imInfoBoxNo = imInfoBoxNo + 1
'            pbcInfoSTab.SetFocus
'        Else
'            imInfoBoxNo = imInfoBoxNo - 1
'            pbcInfoTab.SetFocus
'        End If
End Sub

Private Sub lbcEvent_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcEvent, edcDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcEvent_DblClick()
    tmcClick.Enabled = False
End Sub

Private Sub lbcEvent_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcNTRType_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcNTRType, edcDropDown, imChgMode, imLbcArrowSetting
End Sub

Private Sub lbcNTRType_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub lbcOnAcctVeh_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcOnAcctVeh, edcDropDown, imChgMode, imLbcArrowSetting
End Sub

Private Sub lbcOnAcctVeh_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub lbcPaymRating_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcPaymRating, edcInfoDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcPaymRating_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub
Private Sub lbcPaymRating_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
'    If imTabDirection = -1 Then  'Right To Left
'        imInfoBoxNo = imInfoBoxNo + 1
'        pbcInfoSTab.SetFocus
'    Else
'        imInfoBoxNo = imInfoBoxNo - 1
'        pbcInfoTab.SetFocus
'    End If
End Sub
Private Sub lbcProd_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        'pbcEatTab(1).Enabled = True
        'pbcEatTab(0).Enabled = True
        'pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcProd, edcDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub
Private Sub lbcProd_DblClick()
    tmcClick.Enabled = False
    'pbcEatTab(1).Enabled = False
    'pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub
Private Sub lbcProd_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub
Private Sub lbcProd_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcProd, edcDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcSTab.SetFocus
        Else
            pbcTab.SetFocus
        End If
    End If
End Sub
Private Sub lbcSalesperson_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        'pbcEatTab(1).Enabled = True
        'pbcEatTab(0).Enabled = True
        'pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcSalesperson, edcDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub
Private Sub lbcSalesperson_DblClick()
    tmcClick.Enabled = False
    'pbcEatTab(1).Enabled = False
    'pbcEatTab(0).Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub
Private Sub lbcSalesperson_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub
Private Sub lbcSalesperson_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcSalesperson, edcDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcSTab.SetFocus
        Else
            pbcTab.SetFocus
        End If
    End If
End Sub
Private Sub lbcPayables_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcPayables, edcInfoDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub
Private Sub lbcPayables_DblClick()
    tmcClick.Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub
Private Sub lbcPayables_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub
Private Sub lbcPayables_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub
Private Sub lbcPayables_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcPayables, edcInfoDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcInfoSTab.SetFocus
        Else
            pbcInfoTab.SetFocus
        End If
    End If
End Sub

Private Sub lbcSeason_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcSeason, edcDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcSeason_DblClick()
    tmcClick.Enabled = False
End Sub

Private Sub lbcSeason_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub

Private Sub lbcSSPart_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        'pbcEatTab(1).Enabled = True
        'pbcEatTab(0).Enabled = True
        'pbcEatTab(0).SetFocus
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcSSPart, edcDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub
Private Sub lbcSSPart_DblClick()
    tmcClick.Enabled = False
    'imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub
Private Sub lbcSSPart_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub
Private Sub lbcStatAdvt_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcStatAdvt, edcStatDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcStatAdvt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcStatAdvt.Visible = False
    edcStatDropDown.SetFocus
End Sub
Private Sub lbcStatAgency_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcStatAgency, edcStatDropDown, imChgMode, imLbcArrowSetting
End Sub
Private Sub lbcStatAgency_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcStatAgency.Visible = False
    edcStatDropDown.SetFocus
End Sub

Private Sub lbcNTRTax_Click()
    imLbcArrowSetting = False
    gProcessLbcClick lbcNTRTax, edcDropDown, imChgMode, imLbcArrowSetting
End Sub

Private Sub lbcTranType_Click()
    If imLbcMouseDown Then
        tmcClick.Interval = 300 'Delay processing encase double click
        tmcClick.Enabled = True
        imLbcMouseDown = False
    Else
        imLbcArrowSetting = False
        gProcessLbcClick lbcTranType, edcDropDown, imChgMode, imLbcArrowSetting
    End If
End Sub
Private Sub lbcTranType_DblClick()
    tmcClick.Enabled = False
    imDoubleClickName = True    'Double click event is followed by a mouse up event
                                'Process the double click event in the mouse up event
                                'to avoid the mouse up event being in next form
End Sub
Private Sub lbcTranType_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imLbcMouseDown = True
End Sub
Private Sub lbcTranType_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imDoubleClickName Then
        imLbcArrowSetting = False
        gProcessLbcClick lbcTranType, edcDropDown, imChgMode, imLbcArrowSetting
        If imTabDirection = -1 Then  'Right To Left
            pbcSTab.SetFocus
        Else
            pbcTab.SetFocus
        End If
    End If
End Sub
Private Sub lbcVehicle_Click(Index As Integer)
    imLbcArrowSetting = False
    gProcessLbcClick lbcVehicle(Index), edcDropDown, imChgMode, imLbcArrowSetting
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mAdvtBranch                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      advertiser and process         *
'*                      communication back from        *
'*                      advertiser                     *
'*                                                     *
'*                                                     *
'*  General flow: pbc--Tab calls this function which   *
'*                initiates a task as a MODAL form.    *
'*                This form and the control loss focus *
'*                When the called task terminates two  *
'*                events are generated (Form activated;*
'*                GotFocus to pbc-Tab).  Also, control *
'*                is sent back to this function (the   *
'*                GotFocus event is initiated after    *
'*                this function finishes processing)   *
'*                                                     *
'*******************************************************
Private Function mAdvtBranch() As Integer
'
'   ilRet = mAdvtBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    ilRet = gOptionalLookAhead(edcDropDown, lbcAdvertiser, imBSMode, slStr)
    If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcDropDown.Text = "[None]") Then
        mAdvtBranch = False
        Exit Function
    End If
    'If Not gWinRoom(igNoLJWinRes(ADVERTISERSLIST)) Then
    '    mAdvtBranch = True
    '    pbcClickFocus.SetFocus
    '    Exit Function
    'End If
    'Screen.MousePointer = vbHourglass  'Wait
    igAdvtCallSource = CALLSOURCECOLLECT
    If edcDropDown.Text = "[New]" Then
        sgAdvtName = ""
    Else
        sgAdvtName = slStr
    End If
    ilUpdateAllowed = imUpdateAllowed
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
        If igTestSystem Then
            slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & sgAdvtName
        Else
            slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtCallSource)) & "\" & sgAdvtName
        End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Collect^Test^NOHELP\" & sgUserName & "\" & Trim$(Str$(igAdvtCallSource)) & "\" & sgAdvtName
    '    Else
    '        slStr = "Collect^Prod^NOHELP\" & sgUserName & "\" & Trim$(Str$(igAdvtCallSource)) & "\" & sgAdvtName
    '    End If
    'End If
    'lgShellRet = Shell(sgExePath & "Advt.Exe " & slStr, 1)
    'Collect.Enabled = False
    'Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    sgCommandStr = slStr
    Advt.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgAdvtName)
    igAdvtCallSource = Val(sgAdvtName)
    ilParse = gParseItem(slStr, 2, "\", sgAdvtName)
    'Collect.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'MousePointer = vbDefault    'Default
    imDoubleClickName = False
    mAdvtBranch = True
    imUpdateAllowed = ilUpdateAllowed
    'If imUpdateAllowed = False Then
    '    mSendHelpMsg "BF"
    'Else
    '    mSendHelpMsg "BT"
    'End If
    gShowBranner imUpdateAllowed
    If igAdvtCallSource = CALLDONE Then  'Done
        igAdvtCallSource = CALLNONE
        lbcAdvertiser.Clear
        sgColAdvertiserTag = ""
        mAdvtPop
        If imTerminate Then
            mAdvtBranch = False
            Exit Function
        End If
'        End If
        gFindMatch sgAdvtName, 1, lbcAdvertiser
        sgAdvtName = ""
        If gLastFound(lbcAdvertiser) > 0 Then
            imChgMode = True
            lbcAdvertiser.ListIndex = gLastFound(lbcAdvertiser)
            edcDropDown.Text = lbcAdvertiser.List(lbcAdvertiser.ListIndex)
            imIAdvtListIndex = lbcAdvertiser.ListIndex
            imChgMode = False
            mAdvtBranch = False
        Else
            imChgMode = True
            lbcAdvertiser.ListIndex = 1
            edcDropDown.Text = lbcAdvertiser.List(lbcAdvertiser.ListIndex)
            imIAdvtListIndex = lbcAdvertiser.ListIndex
            imChgMode = False
            'cbcSelection.SetFocus
            pbcClickFocus.SetFocus
            Exit Function
        End If
    End If
    If igAdvtCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igAdvtCallSource = CALLNONE
        sgAdvtName = ""
        'cbcSelection.SetFocus
        pbcClickFocus.SetFocus
        Exit Function
    End If
    If igAdvtCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igAdvtCallSource = CALLNONE
        sgAdvtName = ""
        'cbcSelection.SetFocus
        pbcClickFocus.SetFocus
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mAdvtPop                        *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Advertiser list box   *
'*                      if requireds                   *
'*                                                     *
'*******************************************************
Private Sub mAdvtPop()
'
'   mAdvtPop
'   Where:
'
    Dim ilRet As Integer
    Dim slName As String
    Dim ilIndex As Integer
    ilIndex = lbcAdvertiser.ListIndex
    If ilIndex > 0 Then
        slName = lbcAdvertiser.List(ilIndex)
    End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopAdvtBox(Collect, lbcAdvertiser, Traffic!lbcAdvertiser)
    ilRet = gPopAdvtBox(Collect, lbcAdvertiser, tgColAdvertiser(), sgColAdvertiserTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mAdvtPopErr
        gCPErrorMsg ilRet, "mAdvtPop (gPopAdvtBox)", Collect
        On Error GoTo 0
        lbcAdvertiser.AddItem "[New]", 0  'Force as first item on list
        imChgMode = True
        If ilIndex > 0 Then
            gFindMatch slName, 1, lbcAdvertiser
            If gLastFound(lbcAdvertiser) > 0 Then
                lbcAdvertiser.ListIndex = gLastFound(lbcAdvertiser)
            Else
                lbcAdvertiser.ListIndex = -1
            End If
        Else
            lbcAdvertiser.ListIndex = ilIndex
        End If
        imChgMode = False
    End If
    Exit Sub
mAdvtPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mAmountOk                       *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Check that check amount is not *
'*                      below amount applied           *
'*                      Post Cash only test            *
'*                                                     *
'*******************************************************
Private Function mAmountOk()
    Dim slNewAmount As String
    Dim slDiffAmount As String
    If (imCollectIndex = 1) And (imBoxNo = imAmount) And (smAmount <> "") Then  'Test that check amount not set below amount applied
        slNewAmount = edcDropDown.Text
        slDiffAmount = gSubStr(smAmount, slNewAmount)
        If gCompNumberStr(slNewAmount, ".00") > 0 Then
            If gCompNumberStr(slDiffAmount, smTotalUnapplied) > 0 Then
                mAmountOk = False
                Exit Function
            End If
            'If amount changed- adjust other values (Total unapplied)
            'smTotalUnapplied = gSubStr(smTotalUnapplied, slDiffAmount)
            'gFormatStr smTotalUnapplied, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
            'gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
            'pbcCollect(imCollectIndex).Cls
            'pbcCollect_Paint imCollectIndex
        'ElseIf gCompNumberStr(slNewAmount, ".00") < 0 Then
            'smTotalUnapplied = gSubStr(smTotalUnapplied, slDiffAmount)  'slDiffAmount is megative
            'gFormatStr smTotalUnapplied, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
            'gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
            'pbcCollect(imCollectIndex).Cls
            'pbcCollect_Paint imCollectIndex
        End If
    End If
    mAmountOk = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mBoxCalDate                     *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Place box around calendar date *
'*                                                     *
'*******************************************************
Private Sub mBoxCalDate()
    Dim slStr As String
    Dim llRowNo As Long
    Dim llInputDate As Long
    Dim ilWkDay As Integer
    Dim slDay As String
    Dim llDate As Long

    If (lmRowNo < 1) And (imCollectIndex = 1) And (imBoxNo = imCheckDate) Then
        slStr = edcDropDown.Text
    'ElseIf (lmRowNo < 1) And ((imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
    ElseIf (lmRowNo < 1) And ((imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
        slStr = edcDropDown.Text
    ElseIf (lmRowNo < 1) And (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
        slStr = edcDropDown.Text
    ElseIf (lmRowNo < 1) And (imCollectIndex = 10) And (imBoxNo = ITRANDATEINDEX) Then
        slStr = edcDropDown.Text
    ElseIf Not imComActDateFlag Then
        slStr = edcCommentDate.Text
    Else
        slStr = edcCommDropDown.Text
    End If
    If gValidDate(slStr) Then
        llInputDate = gDateValue(slStr)
        If (llInputDate >= lmCalStartDate) And (llInputDate <= lmCalEndDate) Then
            llRowNo = 0
            llDate = lmCalStartDate
            Do
                ilWkDay = gWeekDayLong(llDate)
                slDay = Trim$(str$(Day(llDate)))
                If llDate = llInputDate Then
                    lacDate.Caption = slDay
                    lacDate.Move tmCDCtrls(ilWkDay + 1).fBoxX - 30, tmCDCtrls(ilWkDay + 1).fBoxY + llRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15) - 30
                    lacDate.Visible = True
                    Exit Sub
                End If
                If ilWkDay = 6 Then
                    llRowNo = llRowNo + 1
                End If
                llDate = llDate + 1
            Loop Until llDate > lmCalEndDate
            lacDate.Visible = False
        Else
            lacDate.Visible = False
        End If
    Else
        lacDate.Visible = False
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mCbcSelectionChange             *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process selection change       *
'*                                                     *
'*******************************************************
Private Sub mCbcSelectionChange()
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilLoop As Integer
    Dim ilLoopCount As Integer
    Dim ilParseNo As Integer
    If imChgMode = False Then
        imChgMode = True
        ilRet = 0
        ilLoopCount = 0
        tmcClick.Enabled = False    'For safety
        Do
            If ilLoopCount > 0 Then
                If cbcSelection.ListIndex >= 0 Then
                    cbcSelection.Text = cbcSelection.List(cbcSelection.ListIndex)
                End If
            End If
            ilLoopCount = ilLoopCount + 1
            If cbcSelection.Text <> "" Then
                gManLookAhead cbcSelection, imBSMode, imSelComboboxIndex
            End If
            imSelectedIndex = cbcSelection.ListIndex
            If cbcSelection.ListIndex >= 0 Then  'check flag for agency or advertiser
                imDirectFlag = False
                ilParseNo = 2
                ilRet = gParseItem(cbcSelection.List(cbcSelection.ListIndex), ilParseNo, "/", slStr)
                Do While ilRet = 0 'Then 'parse delimeter found
                    slStr = Trim$(slStr)
                    ilRet = gParseItem(slStr, 1, " ", slStr)
                    slStr = Trim$(slStr)
                    If (slStr = "Direct") Or (slStr = "Non-Payee") Then 'Direct advertiser
                        imDirectFlag = True
                        Exit Do
                    'Else
                    '    imDirectFlag = False
                    End If
                    ilParseNo = ilParseNo + 1
                    ilRet = gParseItem(cbcSelection.List(cbcSelection.ListIndex), ilParseNo, "/", slStr)
                'End If
                Loop
                If (imAgencyFlag = 1) Or imDirectFlag Then 'advertiser
                    ilRet = mReadAdfRec()
                    If Not imDirectFlag Then
                        ilRet = gPopAgencyFromRvfBox(Collect, imAdfCode, lbcAgency, lbcAgyCode)
                    Else
                        lbcAgency.Clear
                    End If
                    ilRet = gPopAdvtCommentCollectBox(Collect, imAdfCode, lbcCommentCode)
                    mShowComments lbcCommentCode
                    mReadPnf tmAdf.iPnfPay
                Else
                    ilRet = mReadAgfRec()
                    ilRet = gPopAdvtFromRvfBox(Collect, imAgfCode, lbcAdvt, lbcAdvtCode)
                    ilRet = gPopAgyCommentCollectBox(Collect, imAgfCode, lbcCommentCode)
                    mShowComments lbcCommentCode
                    mReadPnf tmAgf.iPnfPay
                End If
                If imCashTradeIndex < 0 Then
                    imCashTradeIndex = 0
                    imType = 0
                    slStr = lbcCashTrade.List(imCashTradeIndex)
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(CASHTRADEINDEX)
                End If
                If imActionListIndex < 0 Then
                    imActionListIndex = 0
                    mChgAction
                End If
                mInitCollect False, True
                If (imAgencyFlag = 1) Or imDirectFlag Then 'advertiser
                    If Not imDirectFlag Then
                        cmcStatDropDown.Enabled = True
                        edcStatDropDown.Enabled = True
                    Else
                        cmcStatDropDown.Enabled = False
                        edcStatDropDown.Enabled = False
                        edcStatDropDown.Text = ""
                    End If
                    lbcStatAgency.Clear
                    edcStatDropDown.Text = ""
                    For ilLoop = 0 To lbcAgency.ListCount - 1 Step 1
                        lbcStatAgency.AddItem lbcAgency.List(ilLoop), ilLoop
                    Next ilLoop
                    If lbcStatAdvt.List(0) <> "[Advt]" Then
                        lbcStatAgency.AddItem "[Advt]", 0
                    End If
                    'Also add to lbcAgency
                    If lbcAgency.List(0) <> "[Advertiser]" Then
                        lbcAgency.AddItem "[Advertiser]", 0
                    End If
                    lbcStatAgency.height = gListBoxHeight(lbcStatAgency.ListCount, 6)
                    lbcStatAgency.Move plcCommStatis.Left + edcStatDropDown.Left + fgBevelX - 15, plcCommStatis.Top + edcStatDropDown.Top - lbcStatAgency.height + fgBevelY - 15
                    lbcStatAgency.ListIndex = 0
                Else
                    cmcStatDropDown.Enabled = True
                    edcStatDropDown.Enabled = True
                    lbcStatAdvt.Clear
                    edcStatDropDown.Text = ""
                    For ilLoop = 0 To lbcAdvt.ListCount - 1 Step 1
                        lbcStatAdvt.AddItem lbcAdvt.List(ilLoop), ilLoop
                    Next ilLoop
                    If lbcStatAdvt.List(0) <> "[Agency]" Then
                        lbcStatAdvt.AddItem "[Agency]", 0
                    End If
                    lbcStatAdvt.height = gListBoxHeight(lbcStatAdvt.ListCount, 6)
                    lbcStatAdvt.Move plcCommStatis.Left + edcStatDropDown.Left + fgBevelX - 15, plcCommStatis.Top + edcStatDropDown.Top - lbcStatAdvt.height + fgBevelY - 15
                    If lbcAdvt.List(0) <> "[Agency]" Then
                        lbcAdvt.AddItem "[Agency]", 0
                    End If
                    lbcStatAdvt.ListIndex = 0
                End If
                If (imAgencyFlag = 1) Or imDirectFlag Then 'advertiser
                    edcStatDropDown.Text = lbcStatAgency.List(0)
                Else
                    edcStatDropDown.Text = lbcStatAdvt.List(0)
                End If
                imSvType = imType
                imSvActionListIndex = imActionListIndex
            End If
        Loop While imSelectedIndex <> cbcSelection.ListIndex
        mSetCommands
        imChgMode = False
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mChgAction                      *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Change action as cash/trade    *
'*                      changed                        *
'*                                                     *
'*******************************************************
Private Sub mChgAction()
    Dim ilActionListIndex As Integer
    Dim slStr As String
    Dim ilListIndex As Integer
    If imCollectIndex >= 0 Then
        pbcCollect(imCollectIndex).Cls
    End If
    ilActionListIndex = imActionListIndex

    mPopAction
    imBoxNo = ACTIONINDEX
    lmRowNo = -1
    If ilActionListIndex >= 0 Then
        If (imType = 0) And (imAgencyFlag = 0) Then 'cash transaction
            Select Case ilActionListIndex
                Case 0 ' View (History or Aging)
                    ilListIndex = 0 'Change to aging view
                Case 1 ' Post trade used
                    ilListIndex = 1
                Case 2 ' Apply on Account trade used
                    ilListIndex = 2
                Case 3 ' Transfer Entry
                    ilListIndex = 3
                Case 4 ' Reversal
                    ilListIndex = 4
                'Case 5 ' Writeoff unused trade
                '    ilListIndex = 7
                Case 5  ' Journel
                    ilListIndex = 7
                Case 6  ' Invoice
                    ilListIndex = 8
                Case 7  'Invoice adjustment
                    ilListIndex = 9
            End Select
        ElseIf ((imType = 2) Or (imType = 4) Or (imType = 6)) And (imAgencyFlag = 0) Then 'Trade transaction
            Select Case ilActionListIndex
                Case 0 ' View receivables
                    ilListIndex = 0
                Case 1 ' Post Cash
                    ilListIndex = 1
                Case 2 ' Apply on Account Payments
                    ilListIndex = 2
                Case 3 ' Transfer Entry
                    ilListIndex = 3
                Case 4 ' Reverse Entry
                    ilListIndex = 4
                Case 5 ' Post Returned Check
                    ilListIndex = 0
                Case 6 ' Redeposit returned check
                    ilListIndex = 0
                'Case 7 ' Writeoff bad debt
                '    ilListIndex = 5
                Case 7  ' Journel
                    ilListIndex = 5
                Case 8  ' Invoice
                    ilListIndex = 6
                Case 9  'Invoice adjustment
                    ilListIndex = 7
            End Select
        Else
            ilListIndex = 0 'Set to view

        End If
        If ilListIndex > -1 Then
            slStr = lbcAction.List(ilListIndex)
        Else
            slStr = ""
        End If
        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ACTIONINDEX)
        lbcAction.ListIndex = ilListIndex
    End If
    imBoxNo = CASHTRADEINDEX
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClearCtrlFields                *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Clear each control on the      *
'*                      screen                         *
'*                                                     *
'*******************************************************
Private Sub mClearCtrlFields()
'
'   mClearCtrlFields
'   Where:

    Dim ilLoop As Integer
    ReDim smRestoreInvNo(0 To 0) As String
    ReDim tmVehInv(0 To 0) As VEHINV
    imDirectFlag = False
    imAdfFlag = False
    imAgfFlag = False
    smCreditR = ""
    smPayR = ""
    lbcCreditRestr.ListIndex = -1
    lbcPaymRating.ListIndex = -1
    lbcPayables.ListIndex = -1
    smAgency = ""
    mkcPhone.Text = smPhoneImage
    lbcAdvt.ListIndex = -1
    lbcStatAdvt.ListIndex = -1
    lbcAdvtCode.ListIndex = -1
    lbcAgency.ListIndex = -1
    lbcStatAgency.ListIndex = -1
    lbcAgyCode.ListIndex = -1
    pbcComment.Cls
    imCommentBoxNo = -1
    edcComment.Text = ""
    imAgfCode = 0
    imAdfCode = 0
    imProdFirstTime = True
    imSalespersonFirstTime = True
    lbcAdvertiser.ListIndex = -1
    lbcProd.ListIndex = -1
    lbcVehicle(0).ListIndex = -1
    lbcVehicle(1).ListIndex = -1
    imIAdvtListIndex = -1
    imAdvtListIndex = -1
    imOnAcctVehListIndex = -1
    smIProduct = ""
    imISalespersonListIndex = -1
    smIInvoiceNo = ""
    smIRefInvoiceNo = ""
    smIContractNo = ""
    imIBillVehicleListIndex = -1
    imIAirVehicleListIndex = -1
    imIAirVefCode = -1
    imISvAirVefCode = -1
    lmISeasonGhfCode = -1
    imISeasonListIndex = -1
    imISvSeasonListIndex = -1
    imIEventListIndex = -1
    imISSPartListIndex = -1
    smIPkLine = ""
    smITranDate = ""
    smITranType = ""
    imINTRTypeListIndex = -1
    imINTRTaxListIndex = -1
    smIGross = ""
    smINet = ""
    smIAcquisition = ""
    For ilLoop = imLBCDCtrls To UBound(tmInfoCtrls) Step 1
        tmInfoCtrls(ilLoop).iChg = False
        smInfoCtrls(ilLoop) = ""
        tmInfoCtrls(ilLoop).sShow = ""
    Next ilLoop
    For ilLoop = imLBS4Info To UBound(tmS4Info) Step 1
        tmS4Info(ilLoop).iChg = False
        smS4Info(ilLoop) = ""
    Next ilLoop
    mS4SetShow
    For ilLoop = imLBComCtrls To UBound(tmComCtrls) Step 1
        tmComCtrls(ilLoop).iChg = False
        smComCtrls(ilLoop) = ""
        tmComCtrls(ilLoop).sShow = ""
    Next ilLoop
    pbcComment_Paint
End Sub
Private Sub mComSetChg(ilBoxNo As Integer)
'
'   mComSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim slStr As String
    If ilBoxNo < imLBComCtrls Or (ilBoxNo > UBound(tmComCtrls)) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case COMACTDATEINDEX  'Action Date
            If tmCdf.iActionDate(1) > 0 Then
                gUnpackDate tmCdf.iActionDate(0), tmCdf.iActionDate(1), slStr
            Else
                slStr = smComCtrls(ilBoxNo)
            End If
            gSetChgFlag slStr, edcCommDropDown, tmComCtrls(ilBoxNo)
        Case COMADVAGYINDEX  'Agency or Advertiser
            slStr = smComCtrls(ilBoxNo)
            If (imAgencyFlag = 0) And (Not imDirectFlag) Then 'agency (comments show associated advertisers)
                gSetChgFlag slStr, lbcAdvt, tmComCtrls(ilBoxNo)
            ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then 'advertiser (comments show associated agency)
                gSetChgFlag slStr, lbcAgency, tmComCtrls(ilBoxNo)
            End If
        Case COMMENTINDEX 'Comment
            'If tmCdf.iStrLen > 0 Then
            '    slStr = Trim$(Left$(tmCdf.sComment, tmCdf.iStrLen))
            'Else
            '    slStr = smComCtrls(ilBoxNo)
            'End If
            slStr = gStripChr0(tmCdf.sComment)
            If slStr = "" Then
                slStr = smComCtrls(ilBoxNo)
            End If
            gSetChgFlag slStr, edcInputComment, tmComCtrls(ilBoxNo)
    End Select
    mSetCommands
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mComSetFocus                     *
'*                                                     *
'*             Created:5/15/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                      in comment section             *
'*******************************************************
Private Sub mComSetFocus(ilBoxNo As Integer)
'   mComSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If ilBoxNo < imLBComCtrls Or ilBoxNo > UBound(tmComCtrls) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case COMACTDATEINDEX   'Action Date
            edcCommDropDown.SetFocus
        Case COMADVAGYINDEX   'Advertiser / Agency
            edcCommDropDown.SetFocus
        Case COMMENTINDEX  'Comments
            edcInputComment.SetFocus
    End Select
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mComSetShow                        *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mComSetShow(ilBoxNo As Integer)
'
'   mComSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim slStr As String     'string to pass to gsetshow
    Dim ilRet As Integer
    If (ilBoxNo < imLBComCtrls) Or (ilBoxNo > UBound(tmComCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)

        Case COMACTDATEINDEX   'Action Date
            lbcAdvt.Visible = False
            lbcAgency.Visible = False
            plcCalendar.Visible = False
            edcCommDropDown.Visible = False  'Set Visibility
            cmcCommDropDown.Visible = False
            If edcCommDropDown.Text <> "" Then
                slStr = edcCommDropDown.Text
            ElseIf smComCtrls(ilBoxNo) <> "" Then
                slStr = smComCtrls(ilBoxNo)
            Else
                slStr = ""
            End If
            smComCtrls(ilBoxNo) = slStr
            gSetShow pbcComment, slStr, tmComCtrls(ilBoxNo)
            mFillCommentBox
        Case COMADVAGYINDEX 'Credit Restriction limt
            lbcAdvt.Visible = False
            lbcAgency.Visible = False
            plcCalendar.Visible = False
            edcCommDropDown.Visible = False  'Set Visibility
            cmcCommDropDown.Visible = False
            If edcCommDropDown.Text <> "" Then
                slStr = edcCommDropDown.Text
            ElseIf lbcAgency.ListIndex > -1 And ((imAgencyFlag = 1) Or (imDirectFlag)) Then
                slStr = lbcAgency.List(lbcAgency.ListIndex)
            ElseIf lbcAdvt.ListIndex > -1 And (imAgencyFlag = 0) And (Not imDirectFlag) Then
                slStr = lbcAdvt.List(lbcAdvt.ListIndex)
            ElseIf smComCtrls(ilBoxNo) <> "" Then
                slStr = smComCtrls(ilBoxNo)
            Else
                slStr = ""
            End If
            smComCtrls(ilBoxNo) = slStr
            gSetShow pbcComment, slStr, tmComCtrls(ilBoxNo)
            If (imAgencyFlag = 0) And (Not imDirectFlag) Then
                If lbcAdvt.ListIndex > -1 Then
                    If lbcAdvt.ListIndex = 0 Then
                        imAdfCode = 0
                    Else
                        ilRet = gParseItem(lbcAdvtCode.List(lbcAdvt.ListIndex - 1), 2, "\", slStr)
                        imAdfCode = Val(Trim$(slStr))
                    End If
                End If
            ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                If lbcAgency.ListIndex > -1 Then
                    If lbcAgency.ListIndex = 0 Then
                        imAgfCode = 0
                    Else
                        ilRet = gParseItem(lbcAgyCode.List(lbcAgency.ListIndex - 1), 2, "\", slStr)
                        imAgfCode = Val(Trim$(slStr))
                    End If
                End If
            End If
        Case COMMENTINDEX   'Payment rating
            lbcAdvt.Visible = False
            lbcAgency.Visible = False
            plcCalendar.Visible = False
            edcInputComment.Visible = False  'Set Visibility
            If edcInputComment.Text <> "" Then
                slStr = edcInputComment.Text
            ElseIf smComCtrls(ilBoxNo) <> "" Then
                slStr = smComCtrls(ilBoxNo)
            Else
                slStr = ""
            End If
            mComSetChg ilBoxNo
            smComCtrls(ilBoxNo) = slStr
            gSetShow pbcComment, slStr, tmComCtrls(ilBoxNo)

            If (imAgencyFlag = 0) And Not imDirectFlag Then
                    If lbcAdvt.ListIndex > -1 Then
                        If lbcAdvt.ListIndex = 0 Then
                            imAdfCode = 0
                        Else
                            ilRet = gParseItem(lbcAdvtCode.List(lbcAdvt.ListIndex - 1), 2, "\", slStr)
                            imAdfCode = Val(Trim$(slStr))
                        End If
                        ilRet = mSaveCdfRec()
                    End If
            ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                If Not imDirectFlag Then
                    If lbcAgency.ListIndex > -1 Then
                        If lbcAgency.ListIndex = 0 Then
                            imAgfCode = 0
                        Else
                            ilRet = gParseItem(lbcAgyCode.List(lbcAgency.ListIndex - 1), 2, "\", slStr)
                            imAgfCode = Val(Trim$(slStr))
                        End If
                        ilRet = mSaveCdfRec()
                    End If
                Else
                    imAgfCode = 0
                    ilRet = mSaveCdfRec()
                End If
            End If
    End Select

End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mCreateVehInv                   *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Create tmVehInv for matching    *
'*                     Inventory #'s to tmRvf.lInvNo   *
'*                                                     *
'*******************************************************
Private Sub mCreateVehInv()
    Dim llTran As Long
    Dim ilRet As Integer
    Dim llRecPos As Long
    Dim tlVehRvf As RVF
    Dim ilFound As Integer
    Dim ilTest As Integer
    Dim slStr As String
    Dim slCode As String
    Dim llNetPlusTax As Long        '1-16-02
    Dim ilTranOk As Integer
    ReDim tmVehInv(0 To 0) As VEHINV
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
        'For ilTran = 0 To lbcTransactionCode.ListCount - 1 Step 1
        '    ilRet = gParseItem(lbcTransactionCode.List(ilTran), 2, "\", slCode)
        For llTran = 0 To UBound(tgTransactionCode) - 1 Step 1
            ilRet = gParseItem(tgTransactionCode(llTran).sKey, 2, "\", slCode)
            If ilRet = CP_MSG_NONE Then
                llRecPos = Val(slCode)
                ilRet = btrGetDirect(hmRvf, tlVehRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                If ilRet = BTRV_ERR_NONE Then
                    'If ((Left$(tlVehRvf.sTranType, 1) = "I") Or (tlVehRvf.sTranType = "AN") Or ((tlVehRvf.sTranType = "HI") And (imType = 8) And (imCollectIndex = 12))) And (tmRvf.lInvNo = tlVehRvf.lInvNo) And (tmRvf.iadfCode = tlVehRvf.iadfCode) Then
                    ''If ((Left$(tlVehRvf.sTranType, 1) = "I") Or (tlVehRvf.sTranType = "AN") Or (tlVehRvf.sTranType = "PI") Or ((tlVehRvf.sTranType = "HI") And (imType = 8) And (imCollectIndex = 12))) And (tmRvf.lInvNo = tlVehRvf.lInvNo) And (tmRvf.iadfCode = tlVehRvf.iadfCode) Then
                    ilTranOk = False
                    If imCollectIndex = 1 Then
                        '10/1/16: Add W test to obtain the total amount of all the transactions
                        If ((Left$(tlVehRvf.sTranType, 1) = "I") Or (tlVehRvf.sTranType = "AN") Or (tlVehRvf.sTranType = "PI") Or (Left$(tlVehRvf.sTranType, 1) = "W") Or ((tlVehRvf.sTranType = "HI") And (imType = 8) And (imCollectIndex = 12))) And (tmRvf.lInvNo = tlVehRvf.lInvNo) And (tmRvf.iAdfCode = tlVehRvf.iAdfCode) Then
                            ilTranOk = True
                        End If
                    Else
                        If ((Left$(tlVehRvf.sTranType, 1) = "I") Or (tlVehRvf.sTranType = "AN") Or ((tlVehRvf.sTranType = "HI") And (imType = 8) And (imCollectIndex = 12))) And (tmRvf.lInvNo = tlVehRvf.lInvNo) And (tmRvf.iAdfCode = tlVehRvf.iAdfCode) Then
                            ilTranOk = True
                        End If
                    End If
                    If ilTranOk Then
                        ilTranOk = False
                        If (imPostBy = 0) Then
                            ilTranOk = True
                        Else
                            If imPostBy = 1 Then
                                If (tmRvf.iBillVefCode = tlVehRvf.iBillVefCode) Then
                                    ilTranOk = True
                                End If
                            Else
                                If imPostBy = 2 Then
                                    If (tmRvf.iBillVefCode = tlVehRvf.iBillVefCode) And (tmRvf.iAirVefCode = tlVehRvf.iAirVefCode) And (tmRvf.iPkLineNo = tlVehRvf.iPkLineNo) And (tmRvf.iMnfGroup = tlVehRvf.iMnfGroup) And (tmRvf.iMnfItem = tlVehRvf.iMnfItem) Then
                                        ilTranOk = True
                                    End If
                                End If
                            End If
                        End If
                        If ilTranOk Then
                            ilFound = False
                            For ilTest = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                'TTP 10849 - Collections: invoice adjustment applied to a digital invoice (not by vehicle) gets the rvfPcfCode set to the same values instead of using different PcfCodes when there are multiple IN records the AN is applied to
                                'If (tmVehInv(ilTest).iAirVefCode = tlVehRvf.iAirVefCode) And (tmVehInv(ilTest).iBillVefCode = tlVehRvf.iBillVefCode) And (tmVehInv(ilTest).iPkLineNo = tlVehRvf.iPkLineNo) And (tmVehInv(ilTest).iMnfGroup = tlVehRvf.iMnfGroup) And (tmVehInv(ilTest).iMnfItem = tlVehRvf.iMnfItem) And (tmVehInv(ilTest).lSbfCode = tlVehRvf.lSbfCode) And (tmVehInv(ilTest).iBacklogTrfCode = tlVehRvf.iBacklogTrfCode) And (tmVehInv(ilTest).lGsfCode = tlVehRvf.lGsfCode) Then
                                 If (tmVehInv(ilTest).iAirVefCode = tlVehRvf.iAirVefCode) And (tmVehInv(ilTest).iBillVefCode = tlVehRvf.iBillVefCode) And (tmVehInv(ilTest).iPkLineNo = tlVehRvf.iPkLineNo) And (tmVehInv(ilTest).iMnfGroup = tlVehRvf.iMnfGroup) And (tmVehInv(ilTest).iMnfItem = tlVehRvf.iMnfItem) And (tmVehInv(ilTest).lSbfCode = tlVehRvf.lSbfCode) And (tmVehInv(ilTest).iBacklogTrfCode = tlVehRvf.iBacklogTrfCode) And (tmVehInv(ilTest).lGsfCode = tlVehRvf.lGsfCode) And (tlVehRvf.lPcfCode = 0 Or tmVehInv(ilTest).lPcfCode = tlVehRvf.lPcfCode) Then
                                    ilFound = True
                                    gPDNToStr tlVehRvf.sNet, 2, slStr
                                    tmVehInv(ilTest).sAmount = gAddStr(tmVehInv(ilTest).sAmount, slStr)

                                    '1-16-02
                                    gPDNToLong tlVehRvf.sNet, llNetPlusTax
                                    llNetPlusTax = llNetPlusTax + tlVehRvf.lTax1 + tlVehRvf.lTax2
                                    'tmVehInv(UBound(tmVehInv)).lNetPlusTax = tmVehInv(UBound(tmVehInv)).lNetPlusTax + llNetPlusTax
                                    'tmVehInv(UBound(tmVehInv)).lTax1 = tlVehRvf.lTax1
                                    'tmVehInv(UBound(tmVehInv)).lTax2 = tlVehRvf.lTax2
                                    tmVehInv(ilTest).lNetPlusTax = tmVehInv(ilTest).lNetPlusTax + llNetPlusTax
                                    tmVehInv(ilTest).lTax1 = tlVehRvf.lTax1 + tmVehInv(ilTest).lTax1        '2-25-04
                                    tmVehInv(ilTest).lTax2 = tlVehRvf.lTax2 + tmVehInv(ilTest).lTax2        '2-25-04
                                    gPDNToStr tlVehRvf.sGross, 2, slStr
                                    tmVehInv(ilTest).sAmountGross = gAddStr(tmVehInv(ilTest).sAmountGross, slStr)
                                    Exit For
                                End If
                            Next ilTest
                            
                            If Not ilFound Then
                                '8/9/06:  Added agency so that it can be passed to mGetAgyNet
                                tmVehInv(UBound(tmVehInv)).iAgfCode = tlVehRvf.iAgfCode
                                tmVehInv(UBound(tmVehInv)).iAdfCode = tlVehRvf.iAdfCode
                                tmVehInv(UBound(tmVehInv)).iAirVefCode = tlVehRvf.iAirVefCode
                                tmVehInv(UBound(tmVehInv)).iBillVefCode = tlVehRvf.iBillVefCode
                                tmVehInv(UBound(tmVehInv)).iPkLineNo = tlVehRvf.iPkLineNo
                                gPDNToStr tlVehRvf.sNet, 2, tmVehInv(UBound(tmVehInv)).sAmount

                                '1-16-02
                                gPDNToLong tlVehRvf.sNet, llNetPlusTax
                                tmVehInv(UBound(tmVehInv)).lNetPlusTax = llNetPlusTax + tlVehRvf.lTax1 + tlVehRvf.lTax2
                                tmVehInv(UBound(tmVehInv)).lTax1 = tlVehRvf.lTax1
                                tmVehInv(UBound(tmVehInv)).lTax2 = tlVehRvf.lTax2
                                tmVehInv(UBound(tmVehInv)).iMnfGroup = tlVehRvf.iMnfGroup
                                tmVehInv(UBound(tmVehInv)).iMnfItem = tlVehRvf.iMnfItem
                                '6-6-03
                                gPDNToStr tlVehRvf.sGross, 2, tmVehInv(UBound(tmVehInv)).sAmountGross
                                tmVehInv(UBound(tmVehInv)).lSbfCode = tlVehRvf.lSbfCode     '2-25-04
                                tmVehInv(UBound(tmVehInv)).iBacklogTrfCode = tlVehRvf.iBacklogTrfCode
                                tmVehInv(UBound(tmVehInv)).lGsfCode = tlVehRvf.lGsfCode
                                'TTP 10849 - Collections: invoice adjustment applied to a digital invoice (not by vehicle) gets the rvfPcfCode set to the same values instead of using different PcfCodes when there are multiple IN records the AN is applied to
                                tmVehInv(UBound(tmVehInv)).lPcfCode = tlVehRvf.lPcfCode
                                ReDim Preserve tmVehInv(0 To UBound(tmVehInv) + 1) As VEHINV
                            End If
                        End If
                    End If
                End If
            End If
        Next llTran
    Else
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mDropDownKeyPress               *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                      in transaction section         *
'*******************************************************
Private Function mDropDownKeyPress(KeyAscii As Integer, ilNegAllowed As Integer) As Integer
    Dim ilPos As Integer
    Dim llRowNo As Long
    Dim ilColNo As Integer
    Dim flY As Single
    Dim flX As Single
    Dim slStr As String
    ilPos = InStr(edcDropDown.SelText, ".")
    If ilPos = 0 Then
        ilPos = InStr(edcDropDown.Text, ".")    'Disallow multi-decimal points
        If ilPos > 0 Then
            If KeyAscii = KEYDECPOINT Then
                Beep
                mDropDownKeyPress = False
                Exit Function
            End If
        End If
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9, Decimal point (1 only)
    If ilNegAllowed Then
        If (KeyAscii = KEYNEG) And ((Len(edcDropDown.Text) = 0) Or (Len(edcDropDown.Text) = edcDropDown.SelLength)) Then
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) And (KeyAscii <> KEYNEG) Then
                Beep
                mDropDownKeyPress = False
                Exit Function
            End If
        Else
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
                Beep
                mDropDownKeyPress = False
                Exit Function
            End If
        End If
    Else
        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYDECPOINT) Then
            Beep
            mDropDownKeyPress = False
            Exit Function
        End If
    End If
    slStr = edcDropDown.Text
    slStr = Left$(slStr, edcDropDown.SelStart) & Chr$(KeyAscii) & right$(slStr, Len(slStr) - edcDropDown.SelStart - edcDropDown.SelLength)
    If gCompAbsNumberStr(slStr, "999999999.99") > 0 Then
        Beep
        mDropDownKeyPress = False
        Exit Function
    End If
    If KeyAscii <> KEYBACKSPACE Then
        Select Case Chr(KeyAscii)
            Case "7"
                llRowNo = 1
                ilColNo = 1
            Case "8"
                llRowNo = 1
                ilColNo = 2
            Case "9"
                llRowNo = 1
                ilColNo = 3
            Case "4"
                llRowNo = 2
                ilColNo = 1
            Case "5"
                llRowNo = 2
                ilColNo = 2
            Case "6"
                llRowNo = 2
                ilColNo = 3
            Case "1"
                llRowNo = 3
                ilColNo = 1
            Case "2"
                llRowNo = 3
                ilColNo = 2
            Case "3"
                llRowNo = 3
                ilColNo = 3
            Case "0"
                llRowNo = 4
                ilColNo = 1
            Case "00"   'Not possible
                llRowNo = 4
                ilColNo = 2
            Case "."
                llRowNo = 4
                ilColNo = 3
            Case "-"
                llRowNo = 0
        End Select
        If llRowNo > 0 Then
            flX = fgPadMinX + (ilColNo - 1) * fgPadDeltaX
            flY = fgPadMinY + (llRowNo - 1) * fgPadDeltaY
            imcNumOutline.Move flX - 15, flY - 15
            imcNumOutline.Visible = True
        Else
            imcNumOutline.Visible = False
        End If
    Else
        imcNumOutline.Visible = False
    End If
    mDropDownKeyPress = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mEnableBox                      *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                      in transaction section         *
'*******************************************************
Private Sub mEnableBox(ilBoxNo As Integer)
'
'   mEnableBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim slStr As String
    Dim llAdjRow As Long
    Dim slNameCode As String
    Dim slCode As String
    Dim slRecCode As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim llCurrentRowNo As Long
    
    If lmRowNo < 1 Then
        If ((imCollectIndex <> 1) And (imCollectIndex <> 2) And (imCollectIndex <> 3)) Or ((ilBoxNo <> imOnAccountVeh) And (ilBoxNo <> imOnAccountTo) And (ilBoxNo <> imOnAccountComment)) Then
            If (ilBoxNo < imLBCtrls) Or (ilBoxNo > imTabMax) Then
                Exit Sub
            End If
        End If
        Select Case ilBoxNo 'Branch on box type (control)

            Case CASHTRADEINDEX   'Cash/Trade toggle
                lbcCashTrade.height = gListBoxHeight(lbcCashTrade.ListCount, 4)
                edcCashTrade.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                edcCashTrade.MaxLength = 21
                gMoveFormCtrl pbcCollect(imCollectIndex), edcCashTrade, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                cmcDropDown.Move edcCashTrade.Left + edcCashTrade.Width, edcCashTrade.Top
                lbcCashTrade.Move edcCashTrade.Left, edcCashTrade.Top + edcCashTrade.height
                imCTChgMode = True
                If imCashTradeIndex = -1 Then
                    lbcCashTrade.ListIndex = 0
                    imCashTradeIndex = lbcCashTrade.ListIndex
                    imCTComboBoxIndex = lbcCashTrade.ListIndex
                    edcCashTrade.Text = lbcCashTrade.List(lbcCashTrade.ListIndex)
                Else
                    imCTComboBoxIndex = imCashTradeIndex
                    lbcCashTrade.ListIndex = imCashTradeIndex
                    If edcCashTrade.Text <> lbcCashTrade.List(lbcCashTrade.ListIndex) Then
                        edcCashTrade.Text = lbcCashTrade.List(lbcCashTrade.ListIndex)
                    Else
                        edcCashTrade_Change
                    End If
                End If
                imCTChgMode = False
                edcCashTrade.SelStart = 0
                edcCashTrade.SelLength = Len(edcCashTrade.Text)
                edcCashTrade.Visible = True
                cmcDropDown.Visible = True
                edcCashTrade.SetFocus
                mSetCommands
            Case ACTIONINDEX 'Advertiser / Agency
    '            edcDropDown.Text = ""
'                lbcAction.Height = gListBoxHeight(lbcAction.ListCount, 10)
                edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                edcDropDown.MaxLength = 19
                gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                lbcAction.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                imChgMode = True
                If lbcAction.ListIndex = -1 Then
                    mPopAction
'                    pbcCollect_Paint imCollectIndex
                    lbcAction.ListIndex = 0
                    imComboBoxIndex = lbcAction.ListIndex
                    edcDropDown.Text = lbcAction.List(lbcAction.ListIndex)
                Else
                    imComboBoxIndex = lbcAction.ListIndex
                    If edcDropDown.Text <> lbcAction.List(lbcAction.ListIndex) Then
                        edcDropDown.Text = lbcAction.List(lbcAction.ListIndex)
                    Else
                        edcDropDown_Change
                    End If
                End If
                imChgMode = False
                lbcAction.height = gListBoxHeight(lbcAction.ListCount, 11)
                edcDropDown.SelStart = 0
                edcDropDown.SelLength = Len(edcDropDown.Text)
                edcDropDown.Visible = True
                cmcDropDown.Visible = True
                edcDropDown.SetFocus
                mSetCommands
            Case Else
                If imCollectIndex = 1 Then  'Post Cash
                    Select Case ilBoxNo
                        Case imCheckDate
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW  ' - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smCheckDate = "" Then
                                slStr = smPostCashDate  'Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smCheckDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imCheckNo
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW
                            edcDropDown.MaxLength = 9
                            edcDropDown.Text = smCheckNo
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imAmount
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW
                            edcDropDown.MaxLength = 12
                            edcDropDown.Text = smAmount
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imOnAccountTo
                            lbcAdvertiser.height = gListBoxHeight(lbcAdvertiser.ListCount, 8)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 40
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcAdvertiser.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imAdvtListIndex < 0 Then
                                lbcAdvertiser.ListIndex = 0
                                imComboBoxIndex = lbcAdvertiser.ListIndex
                                edcDropDown.Text = lbcAdvertiser.List(lbcAdvertiser.ListIndex)
                            Else
                                imComboBoxIndex = lbcAdvertiser.ListIndex
                                If edcDropDown.Text <> lbcAdvertiser.List(imAdvtListIndex) Then
                                    edcDropDown.Text = lbcAdvertiser.List(imAdvtListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imAdvtListIndex = lbcAdvertiser.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imOnAccountVeh
                            lbcOnAcctVeh.height = gListBoxHeight(lbcOnAcctVeh.ListCount, 8)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 40
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcOnAcctVeh.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imOnAcctVehListIndex < 0 Then
                                lbcOnAcctVeh.ListIndex = 0
                                imComboBoxIndex = lbcOnAcctVeh.ListIndex
                                edcDropDown.Text = lbcOnAcctVeh.List(lbcOnAcctVeh.ListIndex)
                            Else
                                imComboBoxIndex = lbcOnAcctVeh.ListIndex
                                If edcDropDown.Text <> lbcOnAcctVeh.List(imOnAcctVehListIndex) Then
                                    edcDropDown.Text = lbcOnAcctVeh.List(imOnAcctVehListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imOnAcctVehListIndex = lbcOnAcctVeh.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imOnAccountComment
                            edcTranComment.Text = ""
                            edcTranComment.MaxLength = Len(tmCef.sComment) - 2
                            If smOnAccountComment <> "" Then
                                edcTranComment.Text = smOnAccountComment
                            Else
                                edcTranComment.Text = ""
                            End If
                            'gMoveFormCtrl pbcCollect(imCollectIndex), edcTranComment, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            'edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.Height
                            'edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.Height, pbcCollect(imCollectIndex).Width - tmCtrls(ilBoxNo).fBoxX
                            edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.height, 3540, 2295
                            edcTranComment.Visible = True  'Set visibility
                            edcTranComment.SetFocus
                    End Select
                ElseIf (imCollectIndex = 2) Then
                    Select Case ilBoxNo
'                        Case imOnAccountComment
'                            edcTranComment.Text = ""
'                            edcTranComment.MaxLength = 0
'                            If smOnAccountComment <> "" Then
'                                edcTranComment.Text = smOnAccountComment
'                            Else
'                                edcTranComment.Text = ""
'                            End If
'                            'edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.Height, pbcCollect(imCollectIndex).Width - tmCtrls(ilBoxNo).fBoxX
'                            edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.Height, 3540, 2295
'                            edcTranComment.Visible = True  'Set visibility
'                            edcTranComment.SetFocus
                    End Select
                ElseIf (imCollectIndex = 3) Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW  ' - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smTranDate = "" Then
                                slStr = smPostCashDate  'Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smTranDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imOnAccountTo
                            lbcAdvertiser.height = gListBoxHeight(lbcAdvertiser.ListCount, 8)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 40
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcAdvertiser.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imAdvtListIndex < 0 Then
                                lbcAdvertiser.ListIndex = 0
                                imComboBoxIndex = lbcAdvertiser.ListIndex
                                edcDropDown.Text = lbcAdvertiser.List(lbcAdvertiser.ListIndex)
                            Else
                                imComboBoxIndex = lbcAdvertiser.ListIndex
                                If edcDropDown.Text <> lbcAdvertiser.List(imAdvtListIndex) Then
                                    edcDropDown.Text = lbcAdvertiser.List(imAdvtListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imAdvtListIndex = lbcAdvertiser.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imOnAccountComment
                            edcTranComment.Text = ""
                            edcTranComment.MaxLength = Len(tmCef.sComment) - 2
                            If smOnAccountComment <> "" Then
                                edcTranComment.Text = smOnAccountComment
                            Else
                                edcTranComment.Text = ""
                            End If
                            'edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.Height, pbcCollect(imCollectIndex).Width - tmCtrls(ilBoxNo).fBoxX
                            edcTranComment.Move pbcCollect(imCollectIndex).Left + tmCtrls(ilBoxNo).fBoxX, pbcCollect(imCollectIndex).Top + tmCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.height, 3540, 2295
                            edcTranComment.Visible = True  'Set visibility
                            edcTranComment.SetFocus
                    End Select
                '       2=Apply on Account      3=Transfer              4=Reverse               7=Writeoff
                'ElseIf (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7) Then
                ElseIf (imCollectIndex = 4) Or (imCollectIndex = 7) Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW  ' - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smTranDate = "" Then
                                slStr = smPostCashDate  'Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smTranDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                    End Select
                '       5=Post return check     6=Redeposit return check
                ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW  ' - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smTranDate = "" Then
                                slStr = smPostCashDate  'Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smTranDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case imCheckNo
                            lbcBDDate.height = gListBoxHeight(lbcBDDate.ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 49
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcBDDate.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If lbcBDDate.ListIndex = -1 Then
                                lbcBDDate.ListIndex = 0
                                imComboBoxIndex = lbcBDDate.ListIndex
                                edcDropDown.Text = lbcBDDate.List(lbcBDDate.ListIndex)
                            Else
                                imComboBoxIndex = lbcBDDate.ListIndex
                                If edcDropDown.Text <> lbcBDDate.List(lbcBDDate.ListIndex) Then
                                    edcDropDown.Text = lbcBDDate.List(lbcBDDate.ListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                            mSetCommands
                    End Select
                ElseIf imCollectIndex = 9 Then  'Journal
                    Select Case ilBoxNo
                        Case imCheckDate
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW  ' - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smCheckDate = "" Then
                                slStr = Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smCheckDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                    End Select
                ElseIf imCollectIndex = 10 Then  'Invoice and Invoice Adjustment
                    Select Case ilBoxNo
                        Case IADVTINDEX  'Advertiser
                            lbcAdvertiser.height = gListBoxHeight(lbcAdvertiser.ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 50
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcAdvertiser.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imIAdvtListIndex < 0 Then
                                If lbcAdvertiser.ListCount > 1 Then
                                    lbcAdvertiser.ListIndex = 1
                                Else
                                    lbcAdvertiser.ListIndex = 0
                                End If
                                edcDropDown.Text = lbcAdvertiser.List(lbcAdvertiser.ListIndex)
                            Else
                                If edcDropDown.Text <> lbcAdvertiser.List(imIAdvtListIndex) Then
                                    edcDropDown.Text = lbcAdvertiser.List(imIAdvtListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imIAdvtListIndex = lbcAdvertiser.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IPRDINDEX  'Product
                            mProdPop    'tmAdf.iCode
                            If imTerminate Then
                                Exit Sub
                            End If
                            lbcProd.height = gListBoxHeight(lbcProd.ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 35  'tgSpf.iAProd
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcProd.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            gFindMatch smIProduct, 0, lbcProd
                            If gLastFound(lbcProd) >= 1 Then
                                lbcProd.ListIndex = gLastFound(lbcProd)
                                edcDropDown.Text = lbcProd.List(lbcProd.ListIndex)
                            Else
                                If smIProduct <> "" Then
                                    lbcProd.ListIndex = -1
                                    edcDropDown.Text = smIProduct
                                Else
                                    If imProdFirstTime Then
                                        gFindMatch tmAdf.sProduct, 1, lbcProd
                                        If gLastFound(lbcProd) >= 1 Then
                                            lbcProd.ListIndex = gLastFound(lbcProd)
                                        Else
                                            lbcProd.ListIndex = 0
                                        End If
                                    Else
                                        lbcProd.ListIndex = 0
                                    End If
                                    edcDropDown.Text = lbcProd.List(lbcProd.ListIndex)
                                End If
                            End If
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case ISPERSONINDEX  'Salesperson
                            mSPersonPop
                            If imTerminate Then
                                Exit Sub
                            End If
                            lbcSalesperson.height = gListBoxHeight(lbcSalesperson.ListCount, 9)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 42
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcSalesperson.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            ilFound = False
                            imChgMode = True
                            If (imISalespersonListIndex < 0) And (imSalespersonFirstTime) Then
                                If tmAdf.iCode > 0 Then
                                    'If tmAdf.iSlfCode >= 0 Then
                                        slRecCode = Trim$(str$(tmAdf.iSlfCode))
                                        For ilLoop = 0 To UBound(tmSalesperson) - 1 Step 1  'Traffic!lbcSalesperson.ListCount - 1 Step 1
                                            slNameCode = tmSalesperson(ilLoop).sKey    'Traffic!lbcSalesperson.List(ilLoop)
                                            ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                            If ilRet = CP_MSG_NONE Then
                                                If slRecCode = slCode Then
                                                    lbcSalesperson.ListIndex = ilLoop + 1
                                                    imISalespersonListIndex = lbcSalesperson.ListIndex
                                                    ilFound = True
                                                    Exit For
                                                End If
                                            End If
                                        Next ilLoop
                                    'Else
                                    '    slRecCode = Trim$(Str$(-tmAdf.iSlfCode))
                                    '    For ilLoop = 0 To Traffic!lbcPayablesCombo.ListCount - 1 Step 1
                                    '        slNameCode = Traffic!lbcPayablesCombo.List(ilLoop)
                                    '        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                    '        If ilRet = CP_MSG_NONE Then
                                    '            If slRecCode = slCode Then
                                    '                lbcSalesperson.ListIndex = ilLoop + 1 + Traffic!lbcSalesperson.ListCount
                                    '                imISalespersonListIndex = lbcSalesperson.ListIndex
                                    '                ilFound = True
                                    '                Exit For
                                    '            End If
                                    '        End If
                                    '    Next ilLoop
                                    'End If
                                End If
                                If Not ilFound Then
                                    If tmAgf.iCode > 0 Then
                                        'If tmAgf.iSlfCode >= 0 Then
                                            slRecCode = Trim$(str$(tmAgf.iSlfCode))
                                            For ilLoop = 0 To UBound(tmSalesperson) - 1 Step 1  'Traffic!lbcSalesperson.ListCount - 1 Step 1
                                                slNameCode = tmSalesperson(ilLoop).sKey    'Traffic!lbcSalesperson.List(ilLoop)
                                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                                If ilRet = CP_MSG_NONE Then
                                                    If slRecCode = slCode Then
                                                        lbcSalesperson.ListIndex = ilLoop + 1
                                                        imISalespersonListIndex = lbcSalesperson.ListIndex
                                                        ilFound = True
                                                        Exit For
                                                    End If
                                                End If
                                            Next ilLoop
                                        'Else
                                        '    slRecCode = Trim$(Str$(-tmAgf.iSlfCode))
                                        '    For ilLoop = 0 To Traffic!lbcPayablesCombo.ListCount - 1 Step 1
                                        '        slNameCode = Traffic!lbcPayablesCombo.List(ilLoop)
                                        '        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                        '        If ilRet = CP_MSG_NONE Then
                                        '            If slRecCode = slCode Then
                                        '                lbcSalesperson.ListIndex = ilLoop + 1 + Traffic!lbcSalesperson.ListCount
                                        '                imISalespersonListIndex = lbcSalesperson.ListIndex
                                        '                ilFound = True
                                        '                Exit For
                                        '            End If
                                        '        End If
                                        '    Next ilLoop
                                        'End If
                                    End If
                                    If Not ilFound Then
                                        lbcSalesperson.ListIndex = 0 '  "[New]"
                                        imISalespersonListIndex = 0
                                    End If
                                End If
                            End If
                            imSalespersonFirstTime = False
                            If imISalespersonListIndex < 0 Then
                                edcDropDown.Text = ""
                            Else
                                edcDropDown.Text = lbcSalesperson.List(imISalespersonListIndex)
                            End If
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IINVNOINDEX  'Invoice #
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW
                            edcDropDown.MaxLength = 6
                            edcDropDown.Text = smIInvoiceNo
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            edcDropDown.Visible = True  'Set visibility
                            edcDropDown.SetFocus
                        Case IREFINVNOINDEX  'Ref Invoice #
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW
                            edcDropDown.MaxLength = 6
                            edcDropDown.Text = smIRefInvoiceNo
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            edcDropDown.Visible = True  'Set visibility
                            edcDropDown.SetFocus
                        Case ICNTRINDEX  'Contract #
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW
                            edcDropDown.MaxLength = 8
                            edcDropDown.Text = smIContractNo
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            edcDropDown.Visible = True  'Set visibility
                            edcDropDown.SetFocus
                        Case IBILLVEHINDEX  'Vehicle
                            lbcVehicle(0).height = gListBoxHeight(lbcVehicle(0).ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            If tgSpf.iVehLen <= 40 Then
                                edcDropDown.MaxLength = tgSpf.iVehLen
                            Else
                                edcDropDown.MaxLength = 20
                            End If
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcVehicle(0).Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imIBillVehicleListIndex < 0 Then
                                If lbcVehicle(0).ListCount > 1 Then
                                    lbcVehicle(0).ListIndex = 1
                                Else
                                    lbcVehicle(0).ListIndex = 0
                                End If
                                edcDropDown.Text = lbcVehicle(0).List(lbcVehicle(0).ListIndex)
                            Else
                                lbcVehicle(0).ListIndex = imIBillVehicleListIndex
                                edcDropDown.Text = lbcVehicle(0).List(imIBillVehicleListIndex)
                                'If edcDropDown.Text <> lbcVehicle.List(imIBillVehicleListIndex) Then
                                '    edcDropDown.Text = lbcVehicle.List(imIBillVehicleListIndex)
                                'Else
                                '    edcDropDown_Change
                                'End If
                            End If
                            imIBillVehicleListIndex = lbcVehicle(0).ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IAIRVEHINDEX  'Vehicle
                            lbcVehicle(1).height = gListBoxHeight(lbcVehicle(1).ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            If tgSpf.iVehLen <= 40 Then
                                edcDropDown.MaxLength = tgSpf.iVehLen
                            Else
                                edcDropDown.MaxLength = 20
                            End If
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcVehicle(1).Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imIAirVehicleListIndex < 0 Then
                                If imIBillVehicleListIndex >= 0 Then
                                    'lbcVehicle(1).ListIndex = imIBillVehicleListIndex
                                    slStr = lbcVehicle(0).List(imIBillVehicleListIndex)
                                    gFindMatch slStr, 0, lbcVehicle(1)
                                    If gLastFound(lbcVehicle(1)) >= 0 Then
                                        lbcVehicle(1).ListIndex = gLastFound(lbcVehicle(1))
                                    Else
                                        If lbcVehicle(1).ListCount > 1 Then
                                            lbcVehicle(1).ListIndex = 1
                                        Else
                                            lbcVehicle(1).ListIndex = 0
                                        End If
                                    End If
                                Else
                                    If lbcVehicle(1).ListCount > 1 Then
                                        lbcVehicle(1).ListIndex = 1
                                    Else
                                        lbcVehicle(1).ListIndex = 0
                                    End If
                                End If
                                edcDropDown.Text = lbcVehicle(1).List(lbcVehicle(1).ListIndex)
                            Else
                                lbcVehicle(1).ListIndex = imIAirVehicleListIndex
                                edcDropDown.Text = lbcVehicle(1).List(imIAirVehicleListIndex)
                            End If
                            imIAirVehicleListIndex = lbcVehicle(1).ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IPKLINEINDEX 'Package Line Number
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW
                            edcDropDown.MaxLength = 3
                            edcDropDown.Text = smIPkLine
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            edcDropDown.Visible = True  'Set visibility
                            edcDropDown.SetFocus
                        Case ITRANDATEINDEX 'Transaction Date
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smITranDate = "" Then
                                slStr = smPostCashDate  'Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smITranDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case ITRANTYPEINDEX 'Transaction Type (always IN)
                        Case INTRTYPEINDEX  'NTR Type
                            'mNTRTypePop    'tmAdf.iCode
                            'If imTerminate Then
                            '    Exit Sub
                            'End If
                            lbcNTRType.height = gListBoxHeight(lbcNTRType.ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 20  'tgSpf.iAProd
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcNTRType.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imINTRTypeListIndex < 0 Then
                                lbcNTRType.ListIndex = 0
                                edcDropDown.Text = lbcNTRType.List(lbcNTRType.ListIndex)
                            Else
                                lbcNTRType.ListIndex = imINTRTypeListIndex
                                edcDropDown.Text = lbcNTRType.List(imINTRTypeListIndex)
                            End If
                            imINTRTypeListIndex = lbcNTRType.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case INTRTAXINDEX  'NTR Type
                            'mNTRTypePop    'tmAdf.iCode
                            'If imTerminate Then
                            '    Exit Sub
                            'End If
                            lbcNTRTax.height = gListBoxHeight(lbcNTRTax.ListCount, 10)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 0  'tgSpf.iAProd
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcNTRTax.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown - lbcNTRTax.Width, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imINTRTaxListIndex < 0 Then
                                lbcNTRTax.ListIndex = 0
                                edcDropDown.Text = lbcNTRTax.List(lbcNTRTax.ListIndex)
                            Else
                                lbcNTRTax.ListIndex = imINTRTaxListIndex
                                edcDropDown.Text = lbcNTRTax.List(imINTRTaxListIndex)
                            End If
                            imINTRTaxListIndex = lbcNTRTax.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IGROSSINDEX 'Gross
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 12
                            edcDropDown.Text = smIGross
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case INETINDEX 'Net
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 12
                            edcDropDown.Text = smINet
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IACQUISITIONINDEX 'Gross
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 12
                            edcDropDown.Text = smIAcquisition
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case ISSPARTINDEX
                            lbcSSPart.height = gListBoxHeight(lbcSSPart.ListCount, 4)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 41
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcSSPart.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imISSPartListIndex < 0 Then
                                'If lbcSSPart.ListCount > 1 Then
                                    lbcSSPart.ListIndex = 0
                                'End If
                                edcDropDown.Text = lbcSSPart.List(lbcSSPart.ListIndex)
                            Else
                                If edcDropDown.Text <> lbcSSPart.List(imISSPartListIndex) Then
                                    edcDropDown.Text = lbcSSPart.List(imISSPartListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imISSPartListIndex = lbcSSPart.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case ISEASONINDEX
                            lbcSeason.height = gListBoxHeight(lbcSeason.ListCount, 4)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 41
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcSeason.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imISeasonListIndex < 0 Then
                                If lbcSeason.ListCount >= 1 Then
                                    lbcSeason.ListIndex = 0
                                    edcDropDown.Text = lbcSeason.List(lbcSeason.ListIndex)
                                Else
                                    lbcSeason.ListIndex = -1
                                    edcDropDown.Text = ""
                                End If
                            Else
                                If edcDropDown.Text <> lbcSeason.List(imISeasonListIndex) Then
                                    edcDropDown.Text = lbcSeason.List(imISeasonListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imISeasonListIndex = lbcSeason.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        Case IEVENTINDEX
                            lbcEvent.height = gListBoxHeight(lbcEvent.ListCount, 4)
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                            edcDropDown.MaxLength = 41
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            lbcEvent.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            imChgMode = True
                            If imIEventListIndex < 0 Then
                                'If lbcSSPart.ListCount > 1 Then
                                    lbcEvent.ListIndex = 0
                                'End If
                                edcDropDown.Text = lbcEvent.List(lbcEvent.ListIndex)
                            Else
                                If edcDropDown.Text <> lbcEvent.List(imIEventListIndex) Then
                                    edcDropDown.Text = lbcEvent.List(imIEventListIndex)
                                Else
                                    edcDropDown_Change
                                End If
                            End If
                            imIEventListIndex = lbcEvent.ListIndex
                            imChgMode = False
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                    End Select
                ElseIf imCollectIndex = 12 Then     'Invoice Adjustment
                    Select Case ilBoxNo
                        Case imCheckDate
                            edcDropDown.Width = tmCtrls(ilBoxNo).fBoxW  ' - cmcDropDown.Width
                            edcDropDown.MaxLength = 10
                            gMoveFormCtrl pbcCollect(imCollectIndex), edcDropDown, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcCalendar.Move edcDropDown.Left, edcDropDown.Top + edcDropDown.height
                            If smTranDate = "" Then
                                slStr = Format$(gNow(), "m/d/yy")
                            Else
                                slStr = smTranDate
                            End If
                            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                            pbcCalendar_Paint
                            edcDropDown.Text = slStr
                            edcDropDown.SelStart = 0
                            edcDropDown.SelLength = Len(edcDropDown.Text)
                            edcDropDown.Visible = True
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                    End Select
                End If
        End Select
    Else
        If (ilBoxNo < imLBTransCtrls) Or (ilBoxNo > UBound(tmTransCtrls)) Then
            Exit Sub
        End If
        llCurrentRowNo = lmRowNo
        lmRowNo = mGetRowNo(llCurrentRowNo)
        If lmRowNo <= 0 Then
            Exit Sub
        End If
        'Check if Comment
        If (((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 9)) And (ilBoxNo = ASTERICK)) Or ((imCollectIndex = 12) And (ilBoxNo = IAASTERICK)) Then
            edcTranComment.Text = ""
            edcTranComment.MaxLength = Len(tmCef.sComment) - 2
            If smTranComment(lmRowNo) <> "" Then
                edcTranComment.Text = smTranComment(lmRowNo)
            Else
                edcTranComment.Text = ""
            End If
            edcTranComment.Width = 4515
            edcTranComment.height = 1155
            If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                gMoveTableCtrl pbcCollect(imCollectIndex), edcTranComment, tmTransCtrls(ilBoxNo).fBoxX - edcTranComment.Width, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value + 1) * (fgBoxGridH + 15)
            Else
                gMoveTableCtrl pbcCollect(imCollectIndex), edcTranComment, tmTransCtrls(ilBoxNo).fBoxX - edcTranComment.Width, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value + 1) * (fgBoxGridH + 15)
            End If
            edcTranComment.Visible = True  'Set visibility
            edcTranComment.SetFocus
            lmRowNo = llCurrentRowNo
            Exit Sub
        End If
        If imCollectIndex = 12 Then
            Select Case ilBoxNo
                Case IAAMTPAID
                    edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                    edcDropDown.MaxLength = 12
                    If Trim$(smSave(2, lmRowNo)) = "" Then
                        If Asc(Trim$(smSave(1, lmRowNo))) = Asc("-") Then
                            smSave(2, lmRowNo) = Mid$(Trim$(smSave(1, lmRowNo)), 2)
                        Else
                            smSave(2, lmRowNo) = "-" & Trim$(smSave(1, lmRowNo))
                        End If
                        smTotalDue = gAddStr(smTotalDue, smSave(2, lmRowNo))
                        gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(IAAMTDUE)
                                smShow(IAAMTDUE, llAdjRow) = tmTransCtrls(IAAMTDUE).sShow
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalAppliedDue = gAddStr(smTotalAppliedDue, smSave(2, lmRowNo))
                        gFormatStr smTotalAppliedDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedDue)
                        edcDropDown.Text = Trim$(smSave(2, lmRowNo))
                        'Don't go to next field automatically (remove pbcClickFocus.SetFocus to get to next field in pbcCollect_MouseUp)
                        'pbcClickFocus.SetFocus
                        pbcClickFocus.SetFocus
                    Else
                        edcDropDown.Text = Trim$(smSave(2, lmRowNo))
                        If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                            gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                        Else
                            gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                        End If
                        cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                        plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                        edcDropDown.Visible = True  'Set visibility
                        cmcDropDown.Visible = True
                        edcDropDown.SetFocus
                    End If
                Case IAGROSS
                    edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                    edcDropDown.MaxLength = 12
                    edcDropDown.Text = Trim$(smSave(14, lmRowNo))
                    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                        gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                    Else
                        gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                    End If
                    cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                    plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                    edcDropDown.Visible = True  'Set visibility
                    cmcDropDown.Visible = True
                    edcDropDown.SetFocus
                Case IACOMMENT
                    edcTranComment.Text = ""
                    edcTranComment.MaxLength = Len(tmCef.sComment) - 2
                    If smItemComment(lmRowNo) <> "" Then
                        edcTranComment.Text = smItemComment(lmRowNo)
                    Else
                        edcTranComment.Text = ""
                    End If
                    edcTranComment.Width = 4515
                    edcTranComment.height = 1155
                    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                        gMoveTableCtrl pbcCollect(imCollectIndex), edcTranComment, tmTransCtrls(ilBoxNo).fBoxX - edcTranComment.Width + tmTransCtrls(ilBoxNo).fBoxW, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value + 1) * (fgBoxGridH + 15)
                    Else
                        gMoveTableCtrl pbcCollect(imCollectIndex), edcTranComment, tmTransCtrls(ilBoxNo).fBoxX - edcTranComment.Width + tmTransCtrls(ilBoxNo).fBoxW, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value + 1) * (fgBoxGridH + 15)
                    End If
                    edcTranComment.Visible = True  'Set visibility
                    edcTranComment.SetFocus
            End Select
        Else
            Select Case ilBoxNo 'Branch on box type (control)
                Case AMNTPAID
                    If (imCollectIndex <> 7) And (imCollectIndex <> 9) Then
                        edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                        edcDropDown.MaxLength = 12
                        If Trim$(smSave(2, lmRowNo)) = "" Then
                            If gCompNumberStr(smSave(1, lmRowNo), smTotalUnapplied) <= 0 Then
                                If gCompAbsNumberStr(smVariance, gSubStr(smSave(1, lmRowNo), smTotalUnapplied)) < 0 Then
                                    smSave(2, lmRowNo) = smSave(1, lmRowNo)
                                Else
                                    smSave(2, lmRowNo) = smTotalUnapplied
                                End If
                            Else
                                smSave(2, lmRowNo) = smTotalUnapplied
                            End If
                            smTotalDue = gSubStr(smTotalDue, smSave(2, lmRowNo))
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                            For llAdjRow = lmRowNo To lmRowCountMax Step 1
                                If Trim$(smSave(1, llAdjRow)) <> "" Then
                                    smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                    gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                    smShow(AMNTDUE, llAdjRow) = tmTransCtrls(AMNTDUE).sShow
                                    Exit For
                                End If
                            Next llAdjRow
                            smTotalUnapplied = gSubStr(smTotalUnapplied, smSave(2, lmRowNo))
                            gFormatStr smTotalUnapplied, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                            smTotalAppliedDue = gAddStr(smTotalAppliedDue, smSave(2, lmRowNo))
                            gFormatStr smTotalAppliedDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedDue)
                            'Show amounts, don't set focus unless amount defined
        '                    pbcCollect(imCollectIndex).Cls
        '                    pbcCollect_Paint imCollectIndex
                            edcDropDown.Text = Trim$(smSave(2, lmRowNo))
                            pbcClickFocus.SetFocus
                        Else
                            edcDropDown.Text = Trim$(smSave(2, lmRowNo))
                            If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            Else
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            End If
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        End If
                    ElseIf imCollectIndex = 7 Then
                        edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                        edcDropDown.MaxLength = 12
                        If Trim$(smSave(3, lmRowNo)) = "" Then
                            smSave(3, lmRowNo) = smSave(1, lmRowNo)
                            smTotalDue = gSubStr(smTotalDue, smSave(3, lmRowNo))
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                            For llAdjRow = lmRowNo To lmRowCountMax Step 1
                                If Trim$(smSave(1, llAdjRow)) <> "" Then
                                    smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(3, lmRowNo))
                                    gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                    smShow(AMNTDUE, llAdjRow) = tmTransCtrls(AMNTDUE).sShow
                                    Exit For
                                End If
                            Next llAdjRow
                            smTotalAppliedWriteOff = gAddStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                            gFormatStr smTotalAppliedWriteOff, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                            edcDropDown.Text = Trim$(smSave(3, lmRowNo))
                            pbcClickFocus.SetFocus
                        Else
                            edcDropDown.Text = Trim$(smSave(3, lmRowNo))
                            If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            Else
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            End If
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        End If
                    ElseIf imCollectIndex = 9 Then
                        edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                        edcDropDown.MaxLength = 12
                        If Trim$(smSave(2, lmRowNo)) = "" Then
                            If Asc(Trim$(smSave(1, lmRowNo))) = Asc("-") Then
                                smSave(2, lmRowNo) = Mid$(Trim$(smSave(1, lmRowNo)), 2)
                            Else
                                smSave(2, lmRowNo) = "-" & Trim$(smSave(1, lmRowNo))
                            End If
                            smTotalDue = gAddStr(smTotalDue, smSave(2, lmRowNo))
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                            For llAdjRow = lmRowNo To lmRowCountMax Step 1
                                If Trim$(smSave(1, llAdjRow)) <> "" Then
                                    smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                    gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                    smShow(AMNTDUE, llAdjRow) = tmTransCtrls(AMNTDUE).sShow
                                    Exit For
                                End If
                            Next llAdjRow
                            smTotalJournal = gAddStr(smTotalJournal, smSave(2, lmRowNo))
                            gFormatStr smTotalJournal, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalJournal)
                            edcDropDown.Text = Trim$(smSave(2, lmRowNo))
                            'pbcClickFocus.SetFocus (focus set in pbcCollect)
                        Else
                            edcDropDown.Text = Trim$(smSave(2, lmRowNo))
                            If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            Else
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            End If
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        End If
                    End If
                Case WRITEOFF
                    If imCollectIndex <> 9 Then
                        edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                        edcDropDown.MaxLength = 12
                        If Trim$(smSave(3, lmRowNo)) = "" Then
                            If gCompAbsNumberStr(smVariance, smSave(1, lmRowNo)) > 0 Then
                                smSave(3, lmRowNo) = smSave(1, lmRowNo)
                                smSave(1, lmRowNo) = ".00"
                            End If
                            gFormatStr smSave(1, lmRowNo), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                            smShow(AMNTDUE, lmRowNo) = tmTransCtrls(AMNTDUE).sShow
                            smTotalDue = gSubStr(smTotalDue, smSave(3, lmRowNo))
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            smTotalAppliedWriteOff = gAddStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                            gFormatStr smTotalAppliedWriteOff, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                            'Show amounts, don't set focus unless amount defined
                            edcDropDown.Text = Trim$(smSave(3, lmRowNo))
                            pbcClickFocus.SetFocus
                        Else
                            edcDropDown.Text = Trim$(smSave(3, lmRowNo))
                            If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            Else
                                gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                            End If
                            cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                            plcNum.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - plcNum.Width, edcDropDown.Top + edcDropDown.height
                            edcDropDown.Visible = True  'Set visibility
                            cmcDropDown.Visible = True
                            edcDropDown.SetFocus
                        End If
                    ElseIf imCollectIndex = 9 Then
                        lbcTranType.height = gListBoxHeight(lbcTranType.ListCount, 4)
                        edcDropDown.Width = tmTransCtrls(ilBoxNo).fBoxW - cmcDropDown.Width
                        edcDropDown.MaxLength = 23
                        edcDropDown.Text = Trim$(smSave(3, lmRowNo))
                        If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                            gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                        Else
                            gMoveTableCtrl pbcCollect(imCollectIndex), edcDropDown, tmTransCtrls(ilBoxNo).fBoxX, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value) * (fgBoxGridH + 15)
                        End If
                        cmcDropDown.Move edcDropDown.Left + edcDropDown.Width, edcDropDown.Top
                        lbcTranType.Move edcDropDown.Left + edcDropDown.Width + cmcDropDown.Width - lbcTranType.Width, edcDropDown.Top + edcDropDown.height
                        imChgMode = True
                        If Trim$(smSave(3, lmRowNo)) = "" Then
                            gFindPartialMatch "WB", 0, 2, lbcTranType
                            lbcTranType.ListIndex = gLastFound(lbcTranType)
                        Else
                            gFindMatch smSave(3, lmRowNo), 0, lbcTranType
                            lbcTranType.ListIndex = gLastFound(lbcTranType)
                        End If
                        If lbcTranType.ListIndex > 0 Then
                            edcDropDown.Text = lbcTranType.List(lbcTranType.ListIndex)
                        Else
                            edcDropDown.Text = ""
                        End If
                        imChgMode = False
                        edcDropDown.Visible = True  'Set visibility
                        cmcDropDown.Visible = True
                        edcDropDown.SetFocus
                    End If
                Case COMMENT
                    edcTranComment.Text = ""
                    edcTranComment.MaxLength = Len(tmCef.sComment) - 2
                    If smItemComment(lmRowNo) <> "" Then
                        edcTranComment.Text = smItemComment(lmRowNo)
                    Else
                        edcTranComment.Text = ""
                    End If
                    edcTranComment.Width = 4515
                    edcTranComment.height = 1155
                    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 8) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                        gMoveTableCtrl pbcCollect(imCollectIndex), edcTranComment, tmTransCtrls(ilBoxNo).fBoxX - edcTranComment.Width + tmTransCtrls(ilBoxNo).fBoxW, tmTransCtrls(ilBoxNo).fBoxY + (lmRowNo - vbcCollect.Value + 1) * (fgBoxGridH + 15)
                    Else
                        gMoveTableCtrl pbcCollect(imCollectIndex), edcTranComment, tmTransCtrls(ilBoxNo).fBoxX - edcTranComment.Width + tmTransCtrls(ilBoxNo).fBoxW, tmTransCtrls(ilBoxNo).fBoxY + (llCurrentRowNo - vbcCollect.Value + 1) * (fgBoxGridH + 15)
                    End If
                    edcTranComment.Visible = True  'Set visibility
                    edcTranComment.SetFocus
            End Select
        End If
        lmRowNo = llCurrentRowNo
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mEnableComBox                   *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                      in Comment section             *
'*******************************************************
Private Sub mEnableComBox(ilBoxNo As Integer)
'
'   mEnableComBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim slStr As String
    If (ilBoxNo < imLBComCtrls) Or (ilBoxNo > UBound(tmComCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)

        Case COMACTDATEINDEX   'Action Date
            edcCommDropDown.Text = ""
            edcCommDropDown.Width = tmComCtrls(ilBoxNo).fBoxW - cmcCommDropDown.Width
            edcCommDropDown.MaxLength = 20
            gMoveFormCtrl pbcComment, edcCommDropDown, tmComCtrls(ilBoxNo).fBoxX, tmComCtrls(ilBoxNo).fBoxY
            cmcCommDropDown.Move edcCommDropDown.Left + edcCommDropDown.Width, edcCommDropDown.Top
            plcCalendar.Move edcCommDropDown.Left, edcCommDropDown.Top + edcCommDropDown.height
            pbcCalendar_Paint
            If smComCtrls(ilBoxNo) = "" Then
                slStr = gIncOneWeek(Format$(gNow(), "m/d/yy"))
                edcCommDropDown.Text = slStr
            Else
                edcCommDropDown = smComCtrls(ilBoxNo)
            End If
            pbcCalendar.Visible = True
            edcCommDropDown.SelStart = 0
            edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
            edcCommDropDown.Visible = True
            cmcCommDropDown.Visible = True
            edcCommDropDown.SetFocus
        Case COMADVAGYINDEX 'Advertiser / Agency
            edcCommDropDown.Text = ""
            If (imAgencyFlag = 0) And (Not imDirectFlag) Then ' agency
                lbcAdvt.height = gListBoxHeight(lbcAdvt.ListCount, 6)
            Else
                lbcAgency.height = gListBoxHeight(lbcAgency.ListCount, 6)
            End If
            edcCommDropDown.Width = tmComCtrls(ilBoxNo).fBoxW - cmcCommDropDown.Width
            edcCommDropDown.MaxLength = 24
            gMoveFormCtrl pbcComment, edcCommDropDown, tmComCtrls(ilBoxNo).fBoxX, tmComCtrls(ilBoxNo).fBoxY
            cmcCommDropDown.Move edcCommDropDown.Left + edcCommDropDown.Width, edcCommDropDown.Top
            If (imAgencyFlag = 0) And (Not imDirectFlag) Then
                lbcAdvt.Move edcCommDropDown.Left, edcCommDropDown.Top + edcCommDropDown.height
            Else
                lbcAgency.Move edcCommDropDown.Left, edcCommDropDown.Top + edcCommDropDown.height
            End If
            imChgMode = True
            If (imAgencyFlag = 0) And (Not imDirectFlag) Then 'agency
                If lbcAdvt.ListIndex = -1 And lbcAdvt.ListCount > 0 Then
                    lbcAdvt.ListIndex = 0
                    imComboBoxIndex = lbcAdvt.ListIndex
                    smComCtrls(ilBoxNo) = lbcAdvt.List(lbcAdvt.ListIndex)
                    edcCommDropDown.Text = lbcAdvt.List(lbcAdvt.ListIndex)
                Else
                    imComboBoxIndex = lbcAdvt.ListIndex
                    edcCommDropDown.Text = lbcAdvt.List(lbcAdvt.ListIndex)
                End If
            Else          'advertiser
                If lbcAgency.ListIndex = -1 And lbcAgency.ListCount > 0 Then
                    lbcAgency.ListIndex = 0
                    imComboBoxIndex = lbcAgency.ListIndex
                    smComCtrls(ilBoxNo) = lbcAgency.List(lbcAgency.ListIndex)
                    edcCommDropDown.Text = lbcAgency.List(lbcAgency.ListIndex)
                Else
                    imComboBoxIndex = lbcAgency.ListIndex
                    edcCommDropDown.Text = lbcAgency.List(lbcAgency.ListIndex)
                End If
            End If
            imChgMode = False
            edcCommDropDown.SelStart = 0
            edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
            edcCommDropDown.Visible = True
            cmcCommDropDown.Visible = True
            edcCommDropDown.SetFocus
        Case COMMENTINDEX 'Limit
            edcInputComment.Text = ""
            edcInputComment.Width = tmComCtrls(ilBoxNo).fBoxW
            edcInputComment.MaxLength = Len(tmCdf.sComment) - 2 '0
            If smComCtrls(ilBoxNo) <> "" Then
                edcInputComment.Text = smComCtrls(ilBoxNo)
            Else
                edcInputComment.Text = ""
            End If
            'gMoveFormCtrl pbcComment, edcInputComment, tmComCtrls(ilBoxNo).fBoxX, tmComCtrls(ilBoxNo).fBoxY
            'use edcCommDropDown height instead of edcInputComment height
            edcInputComment.Move pbcComment.Left + tmComCtrls(ilBoxNo).fBoxX, pbcComment.Top + tmComCtrls(ilBoxNo).fBoxY + fgBoxStH - edcCommDropDown.height
            edcInputComment.Visible = True  'Set visibility
            edcInputComment.SetFocus
    End Select

End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mEnableInfoBox                  *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                      in Section 4                   *
'*******************************************************
Private Sub mEnableInfoBox(ilBoxNo As Integer)
'
'   mEnableInfoBox ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    Dim slStr As String     'Salesperon name
    Dim slCode As String    'Credit restriction code
    If (ilBoxNo < imLBCDCtrls) Or (ilBoxNo > UBound(tmInfoCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case COMNTINDEX         'Comment list field

        Case CREDITRINDEX 'Credit restrictions
            lbcCreditRestr.height = gListBoxHeight(lbcCreditRestr.ListCount, 6)
            edcInfoDropDown.Width = tmInfoCtrls(ilBoxNo).fBoxW - cmcInfoDropDown.Width
            edcInfoDropDown.MaxLength = 24
            gMoveFormCtrl pbcInfo, edcInfoDropDown, tmInfoCtrls(ilBoxNo).fBoxX, tmInfoCtrls(ilBoxNo).fBoxY
            cmcInfoDropDown.Move edcInfoDropDown.Left + edcInfoDropDown.Width, edcInfoDropDown.Top
            lbcCreditRestr.Move edcInfoDropDown.Left, edcInfoDropDown.Top - lbcCreditRestr.height
            imChgMode = True
            If lbcCreditRestr.ListIndex = -1 Then
                If (imAgencyFlag = 1) Or imDirectFlag Then  'advertiser
                    If lbcStatAgency.ListIndex = 0 Then
                        slCode = tmAdf.sCreditRestr
                    Else
                        slCode = tmAgf.sCreditRestr
                   End If
                Else      'agency
                    If lbcStatAdvt.ListIndex = 0 Then
                        slCode = tmAgf.sCreditRestr
                    Else
                        slCode = tmAdf.sCreditRestr
                    End If
                End If
                If lbcCreditRestr.ListIndex < 0 Then
                    Select Case slCode
                        Case "N"
                            lbcCreditRestr.ListIndex = 0
                        Case "L"
                            lbcCreditRestr.ListIndex = 1
                        Case "W"
                            lbcCreditRestr.ListIndex = 2
                        Case "M"
                            lbcCreditRestr.ListIndex = 3
                        Case "T"
                            lbcCreditRestr.ListIndex = 4
                        Case "P"
                            lbcCreditRestr.ListIndex = 5
                    End Select
                End If
            End If
            imComboBoxIndex = lbcCreditRestr.ListIndex
            edcInfoDropDown.Text = lbcCreditRestr.List(lbcCreditRestr.ListIndex)
            imChgMode = False
            edcInfoDropDown.SelStart = 0
            edcInfoDropDown.SelLength = Len(edcInfoDropDown.Text)
            edcInfoDropDown.Visible = True
            cmcInfoDropDown.Visible = True
            edcInfoDropDown.SetFocus
        Case CREDITAMTINDEX 'Limit
            edcInfoDropDown.Width = tmInfoCtrls(ilBoxNo).fBoxW
            edcInfoDropDown.MaxLength = 10
            If smInfoCtrls(ilBoxNo) <> "" Then
                edcInfoDropDown.Text = smInfoCtrls(ilBoxNo)
            Else
                edcInfoDropDown.Text = ""
            End If
            gMoveFormCtrl pbcInfo, edcInfoDropDown, tmInfoCtrls(ilBoxNo).fBoxX, tmInfoCtrls(ilBoxNo).fBoxY
            edcInfoDropDown.SelStart = 0
            edcInfoDropDown.SelLength = Len(edcInfoDropDown.Text)
            edcInfoDropDown.Visible = True  'Set visibility
            edcInfoDropDown.SetFocus
        Case PAYRATEINDEX 'Payment rating
            lbcPaymRating.height = gListBoxHeight(lbcPaymRating.ListCount, 5)
            edcInfoDropDown.Width = tmInfoCtrls(ilBoxNo).fBoxW - cmcInfoDropDown.Width
            edcInfoDropDown.MaxLength = 13
            gMoveFormCtrl pbcInfo, edcInfoDropDown, tmInfoCtrls(ilBoxNo).fBoxX, tmInfoCtrls(ilBoxNo).fBoxY
            cmcInfoDropDown.Move edcInfoDropDown.Left + edcInfoDropDown.Width, edcInfoDropDown.Top
            lbcPaymRating.Move edcInfoDropDown.Left, edcInfoDropDown.Top - lbcPaymRating.height
            imChgMode = True
            If lbcPaymRating.ListIndex = -1 Then
                If (imAgencyFlag = 1) Or (imDirectFlag) Then  'advertiser
                    If lbcStatAgency.ListIndex = 0 Then
                        slCode = tmAdf.sPaymRating
                    Else
                        slCode = tmAgf.sPaymRating
                    End If
                Else      'agency
                    If lbcStatAdvt.ListIndex = 0 Then
                        slCode = tmAgf.sPaymRating
                    Else
                        slCode = tmAdf.sPaymRating
                    End If
                End If
                Select Case slCode
                    Case "0"
                        lbcPaymRating.ListIndex = 0
                    Case "1"
                        lbcPaymRating.ListIndex = 1
                    Case "2"
                        lbcPaymRating.ListIndex = 2
                    Case "3"
                        lbcPaymRating.ListIndex = 3
                    Case "4"
                        lbcPaymRating.ListIndex = 4
                End Select
            End If
            imComboBoxIndex = lbcPaymRating.ListIndex
            edcInfoDropDown.Text = lbcPaymRating.List(lbcPaymRating.ListIndex)
            imChgMode = False
            edcInfoDropDown.SelStart = 0
            edcInfoDropDown.SelLength = Len(edcInfoDropDown.Text)
            edcInfoDropDown.Visible = True
            cmcInfoDropDown.Visible = True
            edcInfoDropDown.SetFocus
        Case PAYABLESINDEX   'Payable Contact
            If lbcPayables.ListIndex < 0 Then
                If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or ((imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0)) Then
                    mPayablePop tmAgf.iCode
                Else
                    mPayablePop tmAdf.iCode
                End If
                If imTerminate Then
                    Exit Sub
                End If
            End If
            lbcPayables.height = gListBoxHeight(lbcPayables.ListCount, 6)
            edcInfoDropDown.Width = tmInfoCtrls(ilBoxNo).fBoxW - cmcInfoDropDown.Width
            edcInfoDropDown.MaxLength = 20
            gMoveFormCtrl pbcInfo, edcInfoDropDown, tmInfoCtrls(ilBoxNo).fBoxX, tmInfoCtrls(ilBoxNo).fBoxY
            cmcInfoDropDown.Move edcInfoDropDown.Left + edcInfoDropDown.Width, edcInfoDropDown.Top
            lbcPayables.Move edcInfoDropDown.Left - (lbcPayables.Width - tmInfoCtrls(ilBoxNo).fBoxW), edcInfoDropDown.Top - lbcPayables.height
            imChgMode = True
            If lbcPayables.ListIndex <> -1 Then
                slStr = lbcPayables.List(lbcPayables.ListIndex)
                smPnfName = slStr
            Else
                If smPnfName <> "" Then
                    gFindMatch smPnfName, 0, lbcPayables
                    lbcPayables.ListIndex = gLastFound(lbcPayables)
                    slStr = smPnfName
                End If
            End If
            edcInfoDropDown.Text = slStr
            imChgMode = False
            edcInfoDropDown.SelStart = 0
            edcInfoDropDown.SelLength = Len(edcInfoDropDown.Text)
            edcInfoDropDown.Visible = True
            cmcInfoDropDown.Visible = True
            edcInfoDropDown.SetFocus
        Case PHONEINDEX 'Phone and extension
            mkcPhone.Width = tmInfoCtrls(ilBoxNo).fBoxW
            gMoveFormCtrl pbcInfo, mkcPhone, tmInfoCtrls(ilBoxNo).fBoxX, tmInfoCtrls(ilBoxNo).fBoxY
            mkcPhone.Visible = True  'Set visibility
            mkcPhone.SetFocus
        Case STATSINDEX      'Statistics control
    End Select
    'mS4SetChg ilBoxNo 'set change flag encase the setting of the value didn't cause a change event
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetAdvtName                    *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Obtain advertiser name         *
'*                                                     *
'*******************************************************
Private Function mGetAdvtName(ilCode As Integer, ilFullName As Integer) As String
    Dim ilRet As Integer
    If ilCode <= 0 Then
        mGetAdvtName = ""
        Exit Function
    End If
    ilRet = gBinarySearchAdf(ilCode)
    If ilRet <> -1 Then
        If ilFullName Then
            If (tgCommAdf(ilRet).sBillAgyDir = "D") And (Trim$(tgCommAdf(ilRet).sAddrID) <> "") Then
                mGetAdvtName = Trim$(tgCommAdf(ilRet).sName) & ", " & Trim(tgCommAdf(ilRet).sAddrID)
            Else
                mGetAdvtName = Trim$(tgCommAdf(ilRet).sName)
            End If
        Else
            mGetAdvtName = Trim$(tgCommAdf(ilRet).sAbbr)
        End If
        Exit Function
    End If
    If tmAdf.iCode = ilCode Then
        If ilFullName Then
            If (tmAdf.sBillAgyDir = "D") And (Trim$(tmAdf.sAddrID) <> "") Then
                mGetAdvtName = Trim$(tmAdf.sName) & ", " & Trim(tmAdf.sAddrID)
            Else
                mGetAdvtName = Trim$(tmAdf.sName)
            End If
        Else
            mGetAdvtName = Trim$(tmAdf.sAbbr)
        End If
        Exit Function
    End If
    mGetAdvtName = ""
    tmAdfSrchKey.iCode = ilCode
    ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    On Error GoTo mGetAdvtNameErr
    gBtrvErrorMsg ilRet, "mGetAdvtName (btrGetEqual:Advertiser)", Collect
    On Error GoTo 0
    If ilRet = 0 Then
        If ilFullName Then
            If (tmAdf.sBillAgyDir = "D") And (Trim$(tmAdf.sAddrID) <> "") Then
                mGetAdvtName = Trim$(tmAdf.sName) & ", " & Trim(tmAdf.sAddrID)
            Else
                mGetAdvtName = Trim$(tmAdf.sName)
            End If
        Else
            mGetAdvtName = Trim$(tmAdf.sAbbr)
        End If
    Else
        mGetAdvtName = ""
    End If
    Exit Function
mGetAdvtNameErr:
    On Error GoTo 0
    mGetAdvtName = ""
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetAgyName                     *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Obtain agency name             *
'*                                                     *
'*******************************************************
Private Function mGetAgyName(ilCode As Integer, ilFullName As Integer) As String
    Dim ilRet As Integer
    If ilCode <= 0 Then
        mGetAgyName = ""
        Exit Function
    End If
    ilRet = gBinarySearchAgf(ilCode)
    'If ilRet > 0 Then
    If ilRet <> -1 Then
        If ilFullName Then
            mGetAgyName = Trim(tgCommAgf(ilRet).sName) & "," & Trim$(tgCommAgf(ilRet).sCityID)
        Else
            mGetAgyName = Left(Trim$(tgCommAgf(ilRet).sName), 5)
        End If
        Exit Function
    End If
    If tmAgf.iCode = ilCode Then
        If ilFullName Then
            mGetAgyName = Trim(tmAgf.sName) & "," & Trim$(tmAgf.sCityID)
        Else
            mGetAgyName = Trim$(tmAgf.sAbbr)
        End If
        Exit Function
    End If
    mGetAgyName = ""
    tmAgfSrchKey.iCode = ilCode
    ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    On Error GoTo mGetAgyNameErr
    gBtrvErrorMsg ilRet, "mGetAgyName (btrGetEqual:Agency)", Collect
    On Error GoTo 0
    If ilRet = 0 Then
        If ilFullName Then
            mGetAgyName = Trim(tmAgf.sName) & "," & Trim$(tmAgf.sCityID)
        Else
            mGetAgyName = Trim$(tmAgf.sAbbr)
        End If
    Else
        mGetAgyName = ""
    End If
    Exit Function
mGetAgyNameErr:
    On Error GoTo 0
    mGetAgyName = ""
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetCheckInfo                   *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Obtain bounce or redeposit     *
'*                      check information              *
'*                                                     *
'*******************************************************
Private Sub mGetCheckInfo(slBorD As String)
    Dim llRow As Long
    Dim ilFound As Integer
    Dim llRecPos As Long
    Dim ilRet As Integer
    Dim slCode As String
    Dim ilUpperBound As Integer
    Dim ilLoop As Integer
    Dim slDate As String
    Dim llDate As Long
    Dim slCheckNo As String
    Dim slStr As String
    Dim slAmount As String
    Dim slStamp As String
    Dim slNameCode As String
    Dim ilIndex As Integer
    Dim llNetPlusTax As Long            '1-18-02

    slStamp = Trim$(str$(imSortListIndex)) & Trim$(str$(imSelectedIndex)) & Trim$(str$(imType)) & Trim$(str$(imCollectIndex))
    If slStamp = lbcBDDate.Tag Then
        If lbcBDDate.ListCount <= 0 Then
            imTabMax = 2
        End If
        Exit Sub
    End If
    ReDim lmBDCheckDate(0 To 0) As Long
    '6/7/15: Changed check number to string
    'ReDim lmBDCheckNo(1 To 1) As Long
    ReDim smBDCheckNo(0 To 0) As String
    ReDim smBDAmount(0 To 0) As String
    ReDim smBDVariance(0 To 0) As String
    smBDAmount(0) = ".00"
    smBDVariance(0) = ".00"
    ilUpperBound = 0    '1
    'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
    For llRow = LBONE To lmRowCountMax Step 1
        ilFound = True
        'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
        ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            llRecPos = Val(slCode)
            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet <> BTRV_ERR_NONE Then
                ilFound = False
            Else
                '6/7/15: Changed check number to string
                'If tmRvf.lCheckNo <= 0 Then
                If Trim$(tmRvf.sCheckNo) = "0" Or Trim$(tmRvf.sCheckNo) = "" Then
                    ilFound = False
                Else
                    If slBorD = "B" Then
                        '6/7/15: Changed check number to string
                        'If (tmRvf.lCheckNo = 0) Or (tmRvf.sAction = "B") Or (tmRvf.sAction = "D") Then
                        If Trim$(tmRvf.sCheckNo) = "0" Or Trim$(tmRvf.sCheckNo) = "" Or (tmRvf.sAction = "B") Or (tmRvf.sAction = "D") Then
                            ilFound = False
                        End If
                    Else
                        If tmRvf.sAction <> "B" Then
                            ilFound = False
                        End If
                    End If
                End If
            End If
        Else
            ilFound = False
        End If
        If ilFound Then
            ilFound = False
            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
            llDate = gDateValue(slDate)
            For ilLoop = LBound(lmBDCheckDate) To UBound(lmBDCheckDate) - 1 Step 1
                '6/7/15: Changed check number to string
                'If (llDate = lmBDCheckDate(ilLoop)) And (tmRvf.lCheckNo = lmBDCheckNo(ilLoop)) Then
                If (llDate = lmBDCheckDate(ilLoop)) And (UCase$(Trim$(tmRvf.sCheckNo)) = UCase$(Trim$(smBDCheckNo(ilLoop)))) Then
                    ilFound = True
                    ilIndex = ilLoop
                    Exit For
                End If
            Next ilLoop

            '1-18-02 combine taxes with net
            'gPDNToStr tmRvf.sNet, 2, slStr
            gPDNToLong tmRvf.sNet, llNetPlusTax
            llNetPlusTax = llNetPlusTax + tmRvf.lTax1 + tmRvf.lTax2
            slStr = gLongToStrDec(llNetPlusTax, 2)

            If Asc(slStr) = Asc("-") Then
                slAmount = Mid$(slStr, 2)
            Else
                slAmount = "-" & slStr
            End If


            If ilFound Then
                If tmRvf.sTranType = "WV" Then
                    smBDVariance(ilIndex) = gAddStr(smBDVariance(ilIndex), slAmount)
                Else
                    smBDAmount(ilIndex) = gAddStr(smBDAmount(ilIndex), slAmount)
                End If
            Else
                lmBDCheckDate(ilUpperBound) = llDate
                '6/7/15: Changed check number to string
                'lmBDCheckNo(ilUpperBound) = tmRvf.lCheckNo
                smBDCheckNo(ilUpperBound) = UCase$(Trim$(tmRvf.sCheckNo))
                If tmRvf.sTranType = "WV" Then
                    smBDVariance(ilUpperBound) = slAmount
                    smBDAmount(ilUpperBound) = ".00"
                Else
                    smBDAmount(ilUpperBound) = slAmount
                    smBDVariance(ilUpperBound) = ".00"
                End If
                ilUpperBound = ilUpperBound + 1
                ReDim Preserve lmBDCheckDate(0 To ilUpperBound) As Long
                '6/7/15: Changed check number to string
                'ReDim Preserve lmBDCheckNo(1 To ilUpperBound) As Long
                ReDim Preserve smBDCheckNo(0 To ilUpperBound) As String
                ReDim Preserve smBDAmount(0 To ilUpperBound) As String
                ReDim Preserve smBDVariance(0 To ilUpperBound) As String
            End If
        End If
    Next llRow
    lbcBDSort.Clear
    lbcBDDate.Clear
    lbcBDDate.Tag = slStamp
    For ilLoop = LBound(lmBDCheckDate) To UBound(lmBDCheckDate) - 1 Step 1
        slDate = Trim$(str$(999999 - lmBDCheckDate(ilLoop)))
        Do While Len(slDate) < 6
            slDate = "0" & slDate
        Loop
        '6/7/15: Changed check number to string
        'slCheckNo = Trim$(str$(999999999 - smBDCheckNo(ilLoop)))
        slCheckNo = Trim$(smBDCheckNo(ilLoop))
        Do While Len(slCheckNo) < 10
            slCheckNo = " " & slCheckNo
        Loop
        lbcBDSort.AddItem slDate & "|" & slCheckNo & "\" & Trim$(str$(ilLoop))
    Next ilLoop
    For ilLoop = 0 To lbcBDSort.ListCount - 1 Step 1
        slNameCode = lbcBDSort.List(ilLoop)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        llRow = Val(slCode)
        slDate = Format$(lmBDCheckDate(llRow), "m/d/yy")
        gFormatStr smBDAmount(llRow), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slAmount
        '6/7/15: Changed check number to string
        'slStr = slDate & ": " & Trim$(str$(smBDCheckNo(llRow))) & ": " & slAmount
        slStr = slDate & ": " & Trim$(smBDCheckNo(llRow)) & ": " & slAmount
        gFormatStr smBDVariance(llRow), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slAmount
        slStr = slStr & ": " & slAmount
        lbcBDDate.AddItem slStr
    Next ilLoop
    If lbcBDDate.ListCount > 0 Then
'        slStr = lbcBDDate.List(0)
'        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imCheckDate)
'        slStr = lbcBDCheckNo.List(0)
'        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imCheckNo)
'        slStr = lbcBDCheckAmount.List(0)
'        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imAmount)
'        slStr = lbcBDVariance.List(0)
'        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imWriteOff)
    Else
        imTabMax = 2
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInfoSetChg                         *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if value for a       *
'*                      control is different from the  *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Sub mInfoSetChg(ilBoxNo As Integer)
'
'   mInfoSetChg ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be checked
'
    Dim slStr As String
    Dim slCode As String    'Agency / advertiser record value
    If ilBoxNo < imLBCDCtrls Or (ilBoxNo > UBound(tmInfoCtrls)) Then
        mSetCommands
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case CREDITRINDEX
'            If imAgencyFlag = 0 Then 'agency
'                slCode = tmAgf.sCreditRestr
'            Else 'advertiser
'                slCode = tmAdf.sCreditRestr
'            End If
'           ' smCreditR = slCode
            If (imAgencyFlag = 0) And Not imDirectFlag Then
                If lbcStatAdvt.ListIndex = 0 Then
                    slCode = tmAgf.sCreditRestr
                Else
                    slCode = tmAdf.sCreditRestr
                End If
            ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                If lbcStatAgency.ListIndex = 0 Then
                    slCode = tmAdf.sCreditRestr
                Else
                    slCode = tmAgf.sCreditRestr
                End If
            End If
            Select Case slCode
                Case "N"
                    slStr = lbcCreditRestr.List(0)
                Case "L"
                    slStr = lbcCreditRestr.List(1)
                Case "W"
                    slStr = lbcCreditRestr.List(2)
                Case "M"
                    slStr = lbcCreditRestr.List(3)
                Case "T"
                    slStr = lbcCreditRestr.List(4)
                Case "P"
                    slStr = lbcCreditRestr.List(5)
            End Select
            gSetChgFlag slStr, lbcCreditRestr, tmInfoCtrls(ilBoxNo)
        Case CREDITAMTINDEX
'            If imAgencyFlag = 0 Then
'                'gPDNToStr tmAgf.sCreditLimit, 2, slStr
'                slStr = gLongToStrDec(tmAgf.lCreditLimit, 2)
'            Else
'                'gPDNToStr tmAdf.sCreditLimit, 2, slStr
'                slStr = gLongToStrDec(tmAdf.lCreditLimit, 2)
'            End If
            If (imAgencyFlag = 0) And Not imDirectFlag Then
                If lbcStatAdvt.ListIndex = 0 Then
                    slStr = gLongToStrDec(tmAgf.lCreditLimit, 2)
                Else
                    slStr = gLongToStrDec(tmAdf.lCreditLimit, 2)
                End If
            ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                If lbcStatAgency.ListIndex = 0 Then
                    slStr = gLongToStrDec(tmAdf.lCreditLimit, 2)
                Else
                    slStr = gLongToStrDec(tmAgf.lCreditLimit, 2)
                End If
            End If
            gSetChgFlag slStr, edcInfoDropDown, tmInfoCtrls(ilBoxNo)
        Case PAYRATEINDEX
'            If imAgencyFlag = 0 Then 'agency
'                slCode = tmAgf.sPaymRating
'            Else 'advertiser
'                slCode = tmAdf.sPaymRating
'            End If
            If (imAgencyFlag = 0) And Not imDirectFlag Then
                If lbcStatAdvt.ListIndex = 0 Then
                    slCode = tmAgf.sPaymRating
                Else
                    slCode = tmAdf.sPaymRating
                End If
            ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                If lbcStatAgency.ListIndex = 0 Then
                    slCode = tmAdf.sPaymRating
                Else
                    slCode = tmAgf.sPaymRating
                End If
            End If
            Select Case slCode
                Case "0"
                    slStr = lbcPaymRating.List(0)
                Case "1"
                    slStr = lbcPaymRating.List(1)
                Case "2"
                    slStr = lbcPaymRating.List(2)
                Case "3"
                    slStr = lbcPaymRating.List(3)
                Case "4"
                    slStr = lbcPaymRating.List(4)
            End Select
            gSetChgFlag slStr, lbcPaymRating, tmInfoCtrls(ilBoxNo)
        Case PAYABLESINDEX   'Salesperson
            gSetChgFlag smPnfName, lbcPayables, tmInfoCtrls(ilBoxNo)
        Case PHONEINDEX 'Phone number plus extension
'            If imAgencyFlag = 0 Then 'agency
'                gSetChgFlag tmAgf.sPhone, mkcPhone, tmInfoCtrls(ilBoxNo)
'            Else  'advertiser
'                gSetChgFlag tmAdf.sPhone, mkcPhone, tmInfoCtrls(ilBoxNo)
'            End If
            gSetChgFlag smPnfPhoneNumber, mkcPhone, tmInfoCtrls(ilBoxNo)
    End Select
    mSetCommands
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInfoSetFocus                     *
'*                                                     *
'*             Created:5/15/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set focus to specified control *
'*                      in Section 4 (pbcInfo)         *
'*******************************************************
Private Sub mInfoSetFocus(ilBoxNo As Integer)
'
'   mInfoSetFocus ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control to be enabled
'
    If ilBoxNo < imLBCDCtrls Or ilBoxNo > UBound(tmInfoCtrls) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)
        Case COMNTINDEX         'Comment list field
        Case CREDITRINDEX   'Credit restrictions
            edcInfoDropDown.SetFocus
        Case CREDITAMTINDEX   'Credit restrictions
            edcInfoDropDown.SetFocus
        Case PAYRATEINDEX  'Payment Rating
            edcInfoDropDown.SetFocus
        Case PAYABLESINDEX  'Sales Person
            edcInfoDropDown.SetFocus
        Case PHONEINDEX   'Phone number
            mkcPhone.SetFocus
        Case STATSINDEX      'Statistics control
    End Select
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInfoSetShow                    *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mInfoSetShow(ilBoxNo As Integer)
'
'   mInfoSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim slStr As String     'string to pass to gsetshow
    Dim ilPos As Integer    'sales person name comma position
    Dim ilRet As Integer
    Dim slAmt As String
    If (ilBoxNo < imLBCDCtrls) Or (ilBoxNo > UBound(tmInfoCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)

        Case CREDITRINDEX   'Credit Restriction
            edcInfoDropDown.Visible = False  'Set Visibility
            cmcInfoDropDown.Visible = False
            lbcCreditRestr.Visible = False
            If lbcCreditRestr.ListIndex > -1 Then
                slStr = lbcCreditRestr.List(lbcCreditRestr.ListIndex)
            ElseIf smInfoCtrls(ilBoxNo) <> "" Then
                slStr = smInfoCtrls(ilBoxNo)
            Else
                slStr = ""
            End If
            smInfoCtrls(ilBoxNo) = slStr
            If lbcCreditRestr.ListIndex = 1 Then
                slStr = smInfoCtrls(CREDITAMTINDEX)
                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slAmt
                slStr = smInfoCtrls(CREDITRINDEX) & " " & slAmt
            End If
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
            If lbcCreditRestr.ListIndex <> 1 Then
                If (imAgencyFlag = 0) And Not imDirectFlag Then
                    If lbcStatAdvt.ListIndex = 0 Then
                        ilRet = mSaveAgfRec()
                    Else
                        ilRet = mSaveAdfRec()
                    End If
                ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                    If lbcStatAgency.ListIndex = 0 Then
                        ilRet = mSaveAdfRec()
                    Else
                        ilRet = mSaveAgfRec()
                    End If
                End If
            ElseIf smInfoCtrls(CREDITAMTINDEX) <> "" And lbcCreditRestr.ListIndex = 1 Then
                If (imAgencyFlag = 0) And Not imDirectFlag Then
                    If lbcStatAdvt.ListIndex = 0 Then
                        ilRet = mSaveAgfRec()
                    Else
                        ilRet = mSaveAdfRec()
                    End If
                ElseIf (imAgencyFlag = 1) Or imDirectFlag Then
                    If lbcStatAgency.ListIndex = 0 Then
                        ilRet = mSaveAdfRec()
                    Else
                        ilRet = mSaveAgfRec()
                    End If
                End If
            End If
            If lbcCreditRestr.ListIndex <> 1 And tmInfoCtrls(CREDITAMTINDEX).sShow <> "" Then
                smInfoCtrls(CREDITAMTINDEX) = ""
                tmInfoCtrls(CREDITAMTINDEX).sShow = ""
                tmInfoCtrls(CREDITAMTINDEX).iChg = False
                gPaintArea pbcInfo, tmInfoCtrls(CREDITAMTINDEX).fBoxX, tmInfoCtrls(CREDITAMTINDEX).fBoxY + fgOffset - 15, tmInfoCtrls(CREDITAMTINDEX).fBoxW - 15, fgBoxGridH, WHITE
            End If
        Case CREDITAMTINDEX 'Credit Restriction limt
            edcInfoDropDown.Visible = False  'Set Visibility
            cmcInfoDropDown.Visible = False
            lbcPaymRating.Visible = False
            lbcCreditRestr.Visible = False
            If edcInfoDropDown.Text = "" And lbcCreditRestr.ListIndex = 1 Then
                slStr = "0.0"
            Else
                slStr = smInfoCtrls(CREDITAMTINDEX)
            End If
            smInfoCtrls(ilBoxNo) = slStr
            slStr = smInfoCtrls(CREDITAMTINDEX)
            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slAmt
            slStr = smInfoCtrls(CREDITRINDEX) & " " & slAmt
            gSetShow pbcInfo, slStr, tmInfoCtrls(CREDITRINDEX)
            If smInfoCtrls(CREDITAMTINDEX) <> "" And lbcCreditRestr.ListIndex = 1 Then
                If (imAgencyFlag = 0) And Not imDirectFlag Then
                    If lbcStatAdvt.ListIndex = 0 Then
                        ilRet = mSaveAgfRec()
                    Else
                        ilRet = mSaveAdfRec()
                    End If
                ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then
                    If lbcStatAgency.ListIndex = 0 Then
                        ilRet = mSaveAdfRec()
                    Else
                        ilRet = mSaveAgfRec()
                    End If
                End If
            End If
        Case PAYRATEINDEX   'Payment rating
            edcInfoDropDown.Visible = False  'Set Visibility
            cmcInfoDropDown.Visible = False
            lbcPaymRating.Visible = False
            If lbcPaymRating.ListIndex > -1 Then
                slStr = lbcPaymRating.List(lbcPaymRating.ListIndex)
            ElseIf smInfoCtrls(ilBoxNo) <> "" Then
                slStr = smInfoCtrls(ilBoxNo)
            Else
                slStr = ""
            End If
            smInfoCtrls(ilBoxNo) = slStr
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
            If (imAgencyFlag = 0) And Not imDirectFlag Then
                If lbcStatAdvt.ListIndex = 0 Then
                    ilRet = mSaveAgfRec()
                Else
                    ilRet = mSaveAdfRec()
                End If
            ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then
                If lbcStatAgency.ListIndex = 0 Then
                    ilRet = mSaveAdfRec()
                Else
                    ilRet = mSaveAgfRec()
                End If
            End If
        Case PAYABLESINDEX   'Sales person
            edcInfoDropDown.Visible = False  'Set Visibility
            cmcInfoDropDown.Visible = False
            lbcPayables.Visible = False
            If lbcPayables.ListIndex >= 0 Then
                slStr = lbcPayables.List(lbcPayables.ListIndex)
                smPnfName = slStr
            Else
                slStr = smInfoCtrls(PAYABLESINDEX)
                gFindMatch slStr, 0, lbcPayables
                lbcPayables.ListIndex = gLastFound(lbcPayables)
            End If
'            If Not igSlfFirstNameFirst Then  'Check name order
'                ilPos = InStr(slStr, ",")
'                If ilPos > 0 Then
'                    slLast = Left$(slStr, ilPos - 1)
'                    slFirst = right$(slStr, Len(slStr) - ilPos - 1)
'                    slStr = slFirst & " " & slLast
'                End If
'            End If
            smInfoCtrls(ilBoxNo) = slStr
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
            If (imAgencyFlag = 0) And Not imDirectFlag Then
                If lbcStatAdvt.ListIndex = 0 Then
                    ilRet = mSaveAgfRec()
'                Else
'                    ilRet = mSaveAdfRec()
                End If
            ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then
                If lbcStatAgency.ListIndex = 0 Then
                    ilRet = mSaveAdfRec()
                Else
                    ilRet = mSaveAgfRec()
                End If
            End If
        Case PHONEINDEX 'Phone number plus extension
            edcInfoDropDown.Visible = False  'Set Visibility
            cmcInfoDropDown.Visible = False
            mkcPhone.Visible = False  'Set visibility
            If mkcPhone.Text = smPhoneImage Then
                slStr = ""
            Else
                slStr = mkcPhone.Text
            End If
            smInfoCtrls(ilBoxNo) = slStr
            If slStr <> "" Then
                If InStr(slStr, "(____)") <> 0 Then
                    ilPos = InStr(slStr, "Ext(")
                    slStr = Left$(slStr, ilPos - 1)
                End If
            End If
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
            If tmInfoCtrls(PHONEINDEX).iChg Then
                If (imAgencyFlag = 0) And Not imDirectFlag Then
                    If lbcStatAdvt.ListIndex = 0 Then
                        ilRet = mSavePnfRec(tmAgf.iPnfPay)
'                    Else
'                        ilRet = mSavePnfRec(tmAdf.iPnfPay)
                    End If
                ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then
                    If lbcStatAgency.ListIndex = 0 Then
                        ilRet = mSavePnfRec(tmAdf.iPnfPay)
                    Else
                        ilRet = mSavePnfRec(tmAgf.iPnfPay)
                    End If
                End If
                tmInfoCtrls(PHONEINDEX).iChg = False
            End If
        'Case STATSINDEX      'Statistics control
        '    If imAgencyFlag = 0 Then
        '        slStr = "Agency"
        '    Else
        '        slStr = "Advertiser"
        '    End If
            'gSetShow pbcStatistics, slStr,
    End Select
    mS4SetShow 'Repaint info area if display was corrupted by a list box drop-down
    mInfoSetChg ilBoxNo
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInit                           *
'*                                                     *
'*             Created:9/22/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize modular             *
'*                                                     *
'*******************************************************
Private Sub mInit()

'
'   mInit
'   Where:
'
    Dim ilRet As Integer
    Dim slDate As String
    Dim ilCount As Integer
    ReDim smRestoreInvNo(0 To 0) As String
    ReDim tmTransCtrls(0 To 1) As FIELDAREA 'reinitialize transaction fields array
    Screen.MousePointer = vbHourglass
    imLBTransCtrls = 1
    imLBCtrls = 1
    imLBS4Info = 1
    imLBComCtrls = 1
    imLBCDCtrls = 1
    igJobShowing(COLLECTIONSJOB) = True
    'Initialize variables
    imTerminate = False         'terminate if true
    imcKey.Picture = IconTraf!imcKey.Picture
    pbcArrow.Picture = IconTraf!imcArrow.Picture
    pbcArrow.Width = 90
    pbcArrow.height = 165
    'Collect.Height = plcCommStatis.Top + plcCommStatis.Height + 2 * cmcReport.Height / 3
    'gCenterForm Collect

    ReDim tmVehInv(0 To 0) As VEHINV
    imSvSortListIndex = -1
    imSelectDelay = False
    '4/16/18
    'imStartMode = True
    imStartMode = False
    'Initialize save arrays and save variables
    For ilCount = imLBInfoCtrls To UBound(tmInfoCtrls) Step 1
        smInfoCtrls(ilCount) = ""   'Clear section 4 saved control fields
    Next ilCount
    For ilCount = imLBS4Info To UBound(tmS4Info) Step 1
        smS4Info(ilCount) = ""     'Clear section 4 saved info fields
    Next ilCount
    For ilCount = imLBComCtrls To UBound(tmComCtrls) Step 1
        smComCtrls(ilCount) = ""   'Clear section 4 saved control fields
    Next ilCount
    imTranSort = 0
    imColCount = -1         'invalidate transaction screens column counter
    lmRowCount = -1         'invalidate transaction screens row counter
    lmRowCountMax = 0
    imDisplayMode = 0
    If ((Asc(tgSaf(0).sFeatures4) And COMPRESSTRANSACTIONS) = COMPRESSTRANSACTIONS) Then
        imDisplayMode = 1
    End If
    imCalType = 0
    imSelectedIndex = -1
    imActionListIndex = -1 '0   'Default
    imSvActionListIndex = -1 '0   'Default
    imAgeingShow = 0    'By Advertiser  'Summary
    imCollectIndex = 8  'View Aging
    imNewComment = False 'default comments to update record mode
    smActionDate = ""
    smEnterDate = ""
    smEnterTime = ""
    imComActDateFlag = False
    edcComment.Text = ""
    smAgency = ""     'Agency name, saved to determine if changed
    smAdvt = ""       'Advertiser name, saved to determine if changed
    imAgencyFlag = -1 'Invalidated
    imDirectFlag = False 'Not a direct advertiser
    imFirstActivate = True
    imTerminate = False
    imType = -1 'Cash
    imSvType = -1 'Cash
    imPORowNo = -1
    imXRowNo = -1
    imIgnoreRightMove = False
    imInComment = False
    imVbcIngoreChg = False
    imButton = 0
    imFirstTime = True
    gUnpackDate tgSpf.iRPRP(0), tgSpf.iRPRP(1), smPrevEndPeriodDate
    gUnpackDate tgSpf.iRNRP(0), tgSpf.iRNRP(1), smNextEndPeriodDate
    smNowDate = Format$(gNow(), "m/d/yy")
    gUnpackDate tgSpf.iRLastPay(0), tgSpf.iRLastPay(1), smPostCashDate
    If Trim$(smPostCashDate) = "" Then
        smPostCashDate = smNowDate
    End If
    smTranDate = ""
    smCreditR = ""
    imAgfFlag = False
    imAdfFlag = False
    imSortListIndex = -1
    imDoubleClickName = False
    smPhoneImage = mkcPhone.Text  'save blank phone number image
    smPnfName = ""
    smPnfPhoneNumber = ""
    imPopReqd = False
    imInfoBoxNo = -1 'Initialize current Box to N/A
    imDirProcess = -1
    imTabDirection = 0  'Left to right movement
    imLbcArrowSetting = False
    imLbcMouseDown = False
    imChgMode = False
    imCTChgMode = False
    imBSMode = False
    imBoxNo = -1
    lmRowNo = -1
    'Penny variance
    'gPDNToStr tgSpf.sRPenny, 2, smVariance
    smVariance = gLongToStrDec(tgSpf.lRPenny, 2)
'    mPopAction
    lbcBDSort.Clear
    lbcBDDate.Clear
    lbcBDDate.Tag = ""
    imCashTradeIndex = -1
    lbcCashTrade.AddItem "Cash"
    lbcCashTrade.AddItem "Cash History"
    If tgSpf.sRUseTrade = "Y" Then
        lbcCashTrade.AddItem "Trade"
        lbcCashTrade.AddItem "Trade History"
    End If
    If tgSpf.sRUseMerch = "Y" Then
        lbcCashTrade.AddItem "Merchandising"
        lbcCashTrade.AddItem "Merchandising History"
    End If
    If tgSpf.sRUsePromo = "Y" Then
        lbcCashTrade.AddItem "Promotion"
        lbcCashTrade.AddItem "Promotion History"
    End If
    lbcCreditRestr.AddItem "No Restrictions"
    lbcCreditRestr.AddItem "Credit Limit"
    lbcCreditRestr.AddItem "Cash in Advance- Weekly"
    lbcCreditRestr.AddItem "Cash in Advance- Monthly"
    lbcCreditRestr.AddItem "Cash in Advance- Quarterly"
    lbcCreditRestr.AddItem "Prohibit New Orders"
    lbcPaymRating.AddItem "Quick Pay"
    lbcPaymRating.AddItem "Normal Pay"
    lbcPaymRating.AddItem "Slow Pay"
    lbcPaymRating.AddItem "Difficult"
    lbcPaymRating.AddItem "In Collection"
    If (Asc(tgSpf.sUsingFeatures3) And TAXONNTR) <> TAXONNTR Then
        imTaxDefined = False
    Else
        imTaxDefined = True
        ilRet = gPopTaxRateBox(True, lbcNTRTax, tmTaxSortCode(), smTaxSortCodeTag)
    End If
    If Not imTaxDefined Then
        ReDim tmTaxSortCode(0 To 0) As SORTCODE
    End If
    lbcNTRTax.AddItem "[None]", 0
    'Open btrieve files
    hmAdf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmAdf, "", sgDBPath & "ADF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: ADF.Btr)", Collect
    On Error GoTo 0
    hmAgf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmAgf, "", sgDBPath & "AGF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: AGF.Btr)", Collect
    On Error GoTo 0
    hmPnf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmPnf, "", sgDBPath & "PNF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: PNF.Btr)", Collect
    On Error GoTo 0
    hmSlf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmSlf, "", sgDBPath & "SLF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: SLF.Btr)", Collect
    On Error GoTo 0
    hmSbf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmSbf, "", sgDBPath & "SBF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: SBF.Btr)", Collect
    On Error GoTo 0
    hmCHF = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCHF, "", sgDBPath & "CHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: CHF.Btr)", Collect
    On Error GoTo 0
    hmSof = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmSof, "", sgDBPath & "SOF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: SOF.Btr)", Collect
    On Error GoTo 0
    hmCdf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmCdf, "", sgDBPath & "CDF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: CDF.Btr)", Collect
    On Error GoTo 0
    hmCef = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmCef, "", sgDBPath & "CEF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: CEF.Btr)", Collect
    On Error GoTo 0
    hmGhf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmGhf, "", sgDBPath & "GHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: GHF.Btr)", Collect
    On Error GoTo 0
    hmGsf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmGsf, "", sgDBPath & "GSF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: GSF.Btr)", Collect
    On Error GoTo 0
    hmLcf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmLcf, "", sgDBPath & "LCF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: LCF.Btr)", Collect
    On Error GoTo 0
    hmRlf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmRlf, "", sgDBPath & "RLF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: RLF.Btr)", Collect
    On Error GoTo 0
    hmRvf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmRvf, "", sgDBPath & "RVF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: RVF.Btr)", Collect
    On Error GoTo 0
    hmSpf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmSpf, "", sgDBPath & "SPF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: SPF.Btr)", Collect
    On Error GoTo 0
    hmPrf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmPrf, "", sgDBPath & "PRF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: PRF.Btr)", Collect
    On Error GoTo 0
    hmPif = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmPif, "", sgDBPath & "PIF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: PIF.Btr)", Collect
    On Error GoTo 0
    hmApf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmApf, "", sgDBPath & "APF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: APF.Btr)", Collect
    On Error GoTo 0
    
    imAdfRecLen = Len(tmAdf)   'Save ADF record length
    imAgfRecLen = Len(tmAgf)   'Save AGF record length
    imPnfRecLen = Len(tmPnf)   'Save PNF record length
    imSlfRecLen = Len(tmSlf)   'Save SLF record length
    imSbfRecLen = Len(tmSbf)   'Save SBF record length
    imCHFRecLen = Len(tmChf)   'Save CHF record length
    imSofRecLen = Len(tmSof)   'Save SOF record length
    imCdfRecLen = Len(tmCdf)   'Save CDF record length
    imRvfRecLen = Len(tmRvf)   'Save RVF record length
    imGsfRecLen = Len(tmGsf)   'Save GSF record length
    imGhfRecLen = Len(tmGhf)   'Save GSF record length
    imSpfRecLen = Len(tgSpf)
    imPrfRecLen = Len(tmPrf)
    imApfRecLen = Len(tmApf)
    cbcSort.AddItem "Agencies- Alphabetic"
    cbcSort.AddItem "Agencies- % Over 90"
    cbcSort.AddItem "Agencies- Amount Owed"
    cbcSort.AddItem "Agencies- Days since Paid"
    cbcSort.AddItem "Agencies- Avg Days to Pay"
    cbcSort.AddItem "Agencies- Credit Restriction"
    cbcSort.AddItem "Agencies- Payment Rating"
    cbcSort.AddItem "Agencies- Salesperson"
    cbcSort.AddItem "Agencies- Comment Action this User"
    cbcSort.AddItem "Agencies- Comment Action any User"
    cbcSort.AddItem "Agencies- Comment Entry this User"
    cbcSort.AddItem "Agencies- Comment Entry any User"
    cbcSort.AddItem "Advertisers- Alphabetic"
    cbcSort.AddItem "Advertisers- % Over 90"
    cbcSort.AddItem "Advertisers- Amount Owed"
    cbcSort.AddItem "Advertisers- Days since Paid"
    cbcSort.AddItem "Advertisers- Avg Days to Pay"
    cbcSort.AddItem "Advertisers- Credit Restriction"
    cbcSort.AddItem "Advertisers- Payment Rating"
    cbcSort.AddItem "Advertisers- Salesperson"
    cbcSort.AddItem "Advertisers- Comment Action this User"
    cbcSort.AddItem "Advertisers- Comment Action any User"
    cbcSort.AddItem "Advertisers- Comment Entry this User"
    cbcSort.AddItem "Advertisers- Comment Entry any User"
    lbcTranType.Clear 'Force list box to be populated
    mTranTypePop
    If imTerminate Then
        Exit Sub
    End If
    lbcNTRType.Clear 'Force list box to be populated
    mNTRTypePop
    If imTerminate Then
        Exit Sub
    End If
    'Sales Source
    smSMnfStamp = ""
    ilRet = gObtainMnfForType("S", smSMnfStamp, tmSMnf())
    smHMnfStamp = ""
    ilRet = gObtainMnfForType("H1", smHMnfStamp, tmHMnf())
    ilRet = gObtainVef()
    ilRet = gObtainSalesperson()
    lbcAdvertiser.Clear 'Force list box to be populated
    mAdvtPop
    If imTerminate Then
        Exit Sub
    End If
    lbcSalesperson.Clear 'Force list box to be populated
    mSPersonPop
    If imTerminate Then
        Exit Sub
    End If
    
    smTeamTag = ""
    ilRet = gObtainMnfForType("Z", smTeamTag, tmTeam())

    lbcPayables.Clear
    lbcVehicle(0).Clear
    lbcVehicle(1).Clear
    mVehPop
    If imTerminate Then
        Exit Sub
    End If
    ilRet = gObtainCorpCal()
    'Collect.Height = plcCommStatis.Top + plcCommStatis.Height + 2 * cmcReport.Height / 3
    slDate = Format$(gDateValue(Format$(gNow(), "m/d/yy")) - 7, "m/d/yy")
    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
    edcCommentDate.Text = slDate

    'gCenterForm Collect
    'Traffic!plcHelp.Caption = ""

    mInitBox
    gCenterForm Collect
    imTabMax = 2
    gSetCtrlReadOnly edcComment
    If igCollCallFrom = 1 Then
        cbcSort.Text = cbcSort.List(0)
        mPopulate
        cbcSelection_Change
        imStartMode = False
        cbcSelection.Text = sgCollCallName
        lbcCashTrade.ListIndex = 0
        lmRowNo = -1
        mSetShow CASHTRADEINDEX
        imType = 0
        imAgencyFlag = 0
        mPopAction
        lmRowNo = -1
        imBoxNo = ACTIONINDEX
        edcDropDown.Text = lbcAction.List(1)
        mSetShow ACTIONINDEX
'        igCollCallFrom = -1
    End If
    'Moved from Collect to arReconc allowing reconc to be pressed.  Used as aid to determine how to balance.
    ''5/6/08: Convert the Currect period to standard broadcast month
    'gUnpackDateLong tgSpf.iRCRP(0), tgSpf.iRCRP(1), llRCRPDate
    'llStdRCRPDate = llRCRPDate - 15
    'slDate = Format$(llStdRCRPDate, "m/d/yy")
    'slDate = gObtainEndStd(slDate)
    'llStdRCRPDate = gDateValue(slDate)
    'gUnpackDateLong tgSpf.iBLastStdMnth(0), tgSpf.iBLastStdMnth(1), llStdLastInvDate
    'If llStdRCRPDate <= llStdLastInvDate Then
    '    cmcReconcile.Enabled = True
    'Else
    '    cmcReconcile.Enabled = False
    'End If
    Screen.MousePointer = vbDefault


    Exit Sub
mInitErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInitBox                        *
'*                                                     *
'*             Created:5/10/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set mouse and control locations*
'*                                                     *
'*******************************************************
Private Sub mInitBox()
'
'   mInitBox
'   Where:
'
    Dim flTextHeight As Single  'Standard text height
    Dim ilLoop As Integer
    Dim llMax As Long

    flTextHeight = pbcCollect(0).TextHeight("1") - 35
    ReDim tmCtrls(0 To 2) As FIELDAREA
    'Position panel and picture areas with panel
    pbcKey.Move plcCollect.Left, plcCollect.Top
    'Collection area
    'plcCollect.Move 165, 690, pbcCollect(0).Width + vbcCollect.Width + 2 * fgBevelX, pbcCollect(0).Height + 2 * fgBevelY 'plcCollect.Width, plcCollect.Height
    plcCollect.Move 210, 480, pbcCollect(0).Width + vbcCollect.Width + 2 * fgBevelX, pbcCollect(0).height + 2 * fgBevelY 'plcCollect.Width, plcCollect.Height
    For ilLoop = 0 To 12 Step 1
        pbcCollect(ilLoop).Move plcCollect.Left + fgBevelX, plcCollect.Top + fgBevelY
    Next ilLoop
    'Action
'    gSetCtrl tmCtrls(CASHTRADEINDEX), 30, 30, 840, fgBoxStH
    gSetCtrl tmCtrls(CASHTRADEINDEX), 30, 30, 1470, fgBoxStH
    'Action
'    gSetCtrl tmCtrls(ACTIONINDEX), 885, tmCtrls(CASHTRADEINDEX).fBoxY, 2610, fgBoxStH
    gSetCtrl tmCtrls(ACTIONINDEX), 1515, tmCtrls(CASHTRADEINDEX).fBoxY, 1980, fgBoxStH

    'Calendar
    For ilLoop = 1 To 7 Step 1
        gSetCtrl tmCDCtrls(ilLoop), 30 + 255 * (ilLoop - 1), 225, 240, fgBoxGridH
    Next ilLoop
    'Position panel and picture areas with panel
    plcCommStatis.Move 15, 3195, plcCommStatis.Width, plcCommStatis.height
    plcRvfInfo.Move plcCommStatis.Left + fgBevelX, plcCommStatis.Top + fgBevelY
    pbcComment.Move plcCommStatis.Left + fgBevelX, plcCommStatis.Top + fgBevelY
    edcComment.Move 30, 405
    pbcInfo.Move plcCommStatis.Left + fgBevelX, plcCommStatis.Top + fgBevelY + pbcComment.height + edcComment.height + 220  '15
    '********** Section 4 control and information fields **********
    'Credit Restrictions
    gSetCtrl tmInfoCtrls(CREDITRINDEX), 30, 30, 2310, fgBoxStH '1335, fgBoxStH
    'Credit restriction amount
    gSetCtrl tmInfoCtrls(CREDITAMTINDEX), tmInfoCtrls(CREDITRINDEX).fBoxX + tmInfoCtrls(CREDITRINDEX).fBoxW / 2, tmInfoCtrls(CREDITRINDEX).fBoxY, 975, fgBoxStH
    'Payment Rating
    gSetCtrl tmInfoCtrls(PAYRATEINDEX), 2355, tmInfoCtrls(CREDITRINDEX).fBoxY, 1185, fgBoxStH
    'Payabales
    gSetCtrl tmInfoCtrls(PAYABLESINDEX), 3555, tmInfoCtrls(CREDITRINDEX).fBoxY, 2370, fgBoxStH
    'Phone and extension
    gSetCtrl tmInfoCtrls(PHONEINDEX), 5940, tmInfoCtrls(CREDITRINDEX).fBoxY, 2115, fgBoxStH
    'Percent over 90 days
    gSetCtrl tmS4Info(OVR90INDEX), 30, 410, 1410, fgBoxStH
    'Current A/R Total
    gSetCtrl tmS4Info(CURARINDEX), 1450, tmS4Info(OVR90INDEX).fBoxY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Unbilled Total
    gSetCtrl tmS4Info(UNBILLINDEX), 2850, tmS4Info(OVR90INDEX).fBoxY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Highest A/R total
    gSetCtrl tmS4Info(HIARINDEX), 4310, tmS4Info(OVR90INDEX).fBoxY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Total Gross Amount
    gSetCtrl tmS4Info(TGROSSINDEX), 5730, tmS4Info(OVR90INDEX).fBoxY, 1500, fgBoxStH
    'Total Gross Date
    gSetCtrl tmS4Info(TGDATEINDEX), 7230, tmS4Info(OVR90INDEX).fBoxY, 830, fgBoxStH
    '# NSF Checks
    gSetCtrl tmS4Info(NSFINDEX), 30, tmS4Info(OVR90INDEX).fBoxY + fgStDeltaY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Last billing date
    gSetCtrl tmS4Info(LBILLINDEX), 1450, tmS4Info(NSFINDEX).fBoxY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Last payment date
    gSetCtrl tmS4Info(LPAYINDEX), 2850, tmS4Info(NSFINDEX).fBoxY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Average days to Pay
    gSetCtrl tmS4Info(AVGPAYINDEX), 4310, tmS4Info(NSFINDEX).fBoxY, tmS4Info(OVR90INDEX).fBoxW, fgBoxStH
    'Days to pay last payment
    gSetCtrl tmS4Info(DAYSLPAYINDEX), 5730, tmS4Info(NSFINDEX).fBoxY, 2330, fgBoxStH
    '******************************* End Section 4 ************************
    'PBC COMMENT SECTION **************************************************
    'Action Date
    gSetCtrl tmComCtrls(COMACTDATEINDEX), 30, 30, 1410, fgBoxStH
    'Advertiser / Agency Name
    gSetCtrl tmComCtrls(COMADVAGYINDEX), 1450, tmComCtrls(COMACTDATEINDEX).fBoxY, 2090, fgBoxStH
    'Comment
    gSetCtrl tmComCtrls(COMMENTINDEX), 3550, tmComCtrls(COMACTDATEINDEX).fBoxY, 4500, fgBoxStH


    llMax = 0
    For ilLoop = imLBComCtrls To UBound(tmComCtrls) Step 1
        If tmComCtrls(ilLoop).fBoxX >= 0 Then
            tmComCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmComCtrls(ilLoop).fBoxW)
            Do While (tmComCtrls(ilLoop).fBoxW Mod 15) <> 0
                tmComCtrls(ilLoop).fBoxW = tmComCtrls(ilLoop).fBoxW + 1
            Loop
            If tmComCtrls(ilLoop).fBoxX > 90 Then
                tmComCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmComCtrls(ilLoop).fBoxX)
                Do While (tmComCtrls(ilLoop).fBoxX Mod 15) <> 0
                    tmComCtrls(ilLoop).fBoxX = tmComCtrls(ilLoop).fBoxX + 1
                Loop
                Do
                    If tmComCtrls(ilLoop - 1).fBoxX + tmComCtrls(ilLoop - 1).fBoxW + 15 < tmComCtrls(ilLoop).fBoxX Then
                        tmComCtrls(ilLoop - 1).fBoxW = tmComCtrls(ilLoop - 1).fBoxW + 15
                    ElseIf tmComCtrls(ilLoop - 1).fBoxX + tmComCtrls(ilLoop - 1).fBoxW + 15 > tmComCtrls(ilLoop).fBoxX Then
                        tmComCtrls(ilLoop - 1).fBoxW = tmComCtrls(ilLoop - 1).fBoxW - 15
                    Else
                        Exit Do
                    End If
                Loop
            End If
        End If
        If tmComCtrls(ilLoop).fBoxX + tmComCtrls(ilLoop).fBoxW + 15 > llMax Then
            llMax = tmComCtrls(ilLoop).fBoxX + tmComCtrls(ilLoop).fBoxW + 15
        End If
    Next ilLoop
    pbcComment.Picture = LoadPicture("")
    For ilLoop = imLBInfoCtrls To UBound(tmInfoCtrls) Step 1
        If tmInfoCtrls(ilLoop).fBoxX >= 0 Then
            tmInfoCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmInfoCtrls(ilLoop).fBoxW)
            Do While (tmInfoCtrls(ilLoop).fBoxW Mod 15) <> 0
                tmInfoCtrls(ilLoop).fBoxW = tmInfoCtrls(ilLoop).fBoxW + 1
            Loop
            If tmInfoCtrls(ilLoop).fBoxX > 90 Then
                tmInfoCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmInfoCtrls(ilLoop).fBoxX)
                Do While (tmInfoCtrls(ilLoop).fBoxX Mod 15) <> 0
                    tmInfoCtrls(ilLoop).fBoxX = tmInfoCtrls(ilLoop).fBoxX + 1
                Loop
                Do
                    If tmInfoCtrls(ilLoop - 1).fBoxX + tmInfoCtrls(ilLoop - 1).fBoxW + 15 < tmInfoCtrls(ilLoop).fBoxX Then
                        tmInfoCtrls(ilLoop - 1).fBoxW = tmInfoCtrls(ilLoop - 1).fBoxW + 15
                    ElseIf tmInfoCtrls(ilLoop - 1).fBoxX + tmInfoCtrls(ilLoop - 1).fBoxW + 15 > tmInfoCtrls(ilLoop).fBoxX Then
                        tmInfoCtrls(ilLoop - 1).fBoxW = tmInfoCtrls(ilLoop - 1).fBoxW - 15
                    Else
                        Exit Do
                    End If
                Loop
            End If
        End If
    Next ilLoop
    pbcComment.Picture = LoadPicture("")
    Do While tmInfoCtrls(UBound(tmInfoCtrls)).fBoxX + tmInfoCtrls(UBound(tmInfoCtrls)).fBoxW + 15 <> llMax
        If tmInfoCtrls(UBound(tmInfoCtrls)).fBoxX + tmInfoCtrls(UBound(tmInfoCtrls)).fBoxW + 15 > llMax Then
            tmInfoCtrls(UBound(tmInfoCtrls)).fBoxW = tmInfoCtrls(UBound(tmInfoCtrls)).fBoxW - 15
        Else
            tmInfoCtrls(UBound(tmInfoCtrls)).fBoxW = tmInfoCtrls(UBound(tmInfoCtrls)).fBoxW + 15
        End If
    Loop
    For ilLoop = imLBS4Info To UBound(tmS4Info) Step 1
        If tmS4Info(ilLoop).fBoxX >= 0 Then
            tmS4Info(ilLoop).fBoxW = CLng(fmAdjFactorW * tmS4Info(ilLoop).fBoxW)
            Do While (tmS4Info(ilLoop).fBoxW Mod 15) <> 0
                tmS4Info(ilLoop).fBoxW = tmS4Info(ilLoop).fBoxW + 1
            Loop
            If tmS4Info(ilLoop).fBoxX > 90 Then
                tmS4Info(ilLoop).fBoxX = CLng(fmAdjFactorW * tmS4Info(ilLoop).fBoxX)
                Do While (tmS4Info(ilLoop).fBoxX Mod 15) <> 0
                    tmS4Info(ilLoop).fBoxX = tmS4Info(ilLoop).fBoxX + 1
                Loop
                Do
                    If tmS4Info(ilLoop - 1).fBoxX + tmS4Info(ilLoop - 1).fBoxW + 15 < tmS4Info(ilLoop).fBoxX Then
                        tmS4Info(ilLoop - 1).fBoxW = tmS4Info(ilLoop - 1).fBoxW + 15
                    ElseIf tmS4Info(ilLoop - 1).fBoxX + tmS4Info(ilLoop - 1).fBoxW + 15 > tmS4Info(ilLoop).fBoxX Then
                        tmS4Info(ilLoop - 1).fBoxW = tmS4Info(ilLoop - 1).fBoxW - 15
                    Else
                        Exit Do
                    End If
                Loop
            End If
        End If
    Next ilLoop
    Do While tmS4Info(TGDATEINDEX).fBoxX + tmS4Info(TGDATEINDEX).fBoxW + 15 <> llMax
        If tmS4Info(TGDATEINDEX).fBoxX + tmS4Info(TGDATEINDEX).fBoxW + 15 > llMax Then
            tmS4Info(TGDATEINDEX).fBoxW = tmS4Info(TGDATEINDEX).fBoxW - 15
        Else
            tmS4Info(TGDATEINDEX).fBoxW = tmS4Info(TGDATEINDEX).fBoxW + 15
        End If
    Loop
    Do While tmS4Info(DAYSLPAYINDEX).fBoxX + tmS4Info(DAYSLPAYINDEX).fBoxW + 15 <> llMax
        If tmS4Info(DAYSLPAYINDEX).fBoxX + tmS4Info(DAYSLPAYINDEX).fBoxW + 15 > llMax Then
            tmS4Info(DAYSLPAYINDEX).fBoxW = tmS4Info(DAYSLPAYINDEX).fBoxW - 15
        Else
            tmS4Info(DAYSLPAYINDEX).fBoxW = tmS4Info(DAYSLPAYINDEX).fBoxW + 15
        End If
    Loop
    pbcInfo.Picture = LoadPicture("")
    plcCommStatis.Top = Collect.height - plcCommStatis.height - 120
    plcCommStatis.Width = llMax + 2 * fgBevelX
    pbcComment.Top = plcCommStatis.Top + fgBevelY
    pbcComment.Left = plcCommStatis.Left + fgBevelX
    pbcComment.Width = llMax
     'L.Bianchi
    pbcCommentBox.Top = pbcComment.height + 30
    pbcCommentBox.Width = llMax - vbcCommentBox.Width
    pbcCommentBox.Left = fgBevelX - 15
    vbcCommentBox.Top = pbcComment.height + 30
    vbcCommentBox.Left = pbcCommentBox.Left + pbcCommentBox.Width
    vbcCommentBox.Max = vbcCommentBox.Min
    
    'lacStatis.Top = edcComment.Top + edcComment.height
    'lacStatis.Left = edcComment.Left
    lacStatis.Top = pbcCommentBox.Top + pbcCommentBox.height
    lacStatis.Left = pbcCommentBox.Left
    edcStatDropDown.Left = lacStatis.Left + lacStatis.Width + 120
    edcStatDropDown.Top = lacStatis.Top
    edcStatDropDown.Width = fmAdjFactorW * edcStatDropDown.Width
    Do While (edcStatDropDown.Width Mod 15) <> 0
        edcStatDropDown.Width = edcStatDropDown.Width + 1
    Loop
    cmcStatDropDown.Top = edcStatDropDown.Top
    cmcStatDropDown.Left = edcStatDropDown.Left + edcStatDropDown.Width
    pbcInfo.Top = pbcComment.Top + pbcComment.height + edcComment.height + edcStatDropDown.height
    pbcInfo.Left = pbcComment.Left
    pbcInfo.Width = llMax



    cmcDone.Top = Collect.height - 9 * cmcDone.height
    cmcDone.Left = plcCommStatis.Left + plcCommStatis.Width + (Collect.Width - plcCommStatis.Width) / 2 - (cmcDone.Width / 2)
    cmcCancel.Top = cmcDone.Top + cmcDone.height
    cmcCancel.Left = cmcDone.Left
    cmcUpdate.Top = cmcCancel.Top + cmcCancel.height
    cmcUpdate.Left = cmcDone.Left
    cmcReconcile.Top = cmcUpdate.Top + cmcUpdate.height
    cmcReconcile.Left = cmcDone.Left
    cmcZeroPurge.Top = cmcReconcile.Top + cmcReconcile.height
    cmcZeroPurge.Left = cmcDone.Left
    cmcUndo.Top = cmcZeroPurge.Top + cmcZeroPurge.height
    cmcUndo.Left = cmcDone.Left
    cmcReport.Top = cmcUndo.Top + cmcUndo.height
    cmcReport.Left = cmcDone.Left
    cmcInvoice.Top = cmcReport.Top + cmcReport.height
    cmcInvoice.Left = cmcDone.Left

    plcCollect.height = plcCommStatis.Top - plcCollect.Top - 120
    For ilLoop = 0 To 12 Step 1
        pbcCollect(ilLoop).Top = plcCollect.Top + fgBevelY
        pbcCollect(ilLoop).height = plcCollect.height - 2 * fgBevelY
        pbcCollect(ilLoop).Picture = LoadPicture("")
    Next ilLoop

    vbcCollect.Left = plcCollect.Width - vbcCollect.Width - fgBevelX - 30
    vbcCollect.Top = fgBevelY
    vbcCollect.height = pbcCollect(0).height

    If fmAdjFactorW >= 1.2 Then
        cbcSelection.Width = (3 * cbcSelection.Width) / 2
        plcSelect.Width = cbcSelection.Left + cbcSelection.Width + fgBevelX
    ElseIf (fmAdjFactorW > 1) Then
        cbcSelection.Width = fmAdjFactorW * cbcSelection.Width
        plcSelect.Width = cbcSelection.Left + cbcSelection.Width + fgBevelX
    End If

End Sub
Private Sub mInitCollect(ilfirstTime As Integer, ilPop As Integer)
    Dim llRowNo As Long
    Dim ilColNo As Integer
    Dim llRowCount As Integer   'total number of rows
    Dim ilColCount As Integer   'Total number of cols
    Dim flHeight As Single
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim llMax As Long
    Dim llHeight As Long
    Dim ilLineCount As Integer
    Dim slStr As String
    Dim ilAgyAdvtAdj As Integer

    flHeight = fgBoxGridH
    If Not ilfirstTime Then
        If (imSortListIndex < 0) Or (imSelectedIndex < 0) Or (lbcAction.ListIndex < 0) Or (imType < 0) Or (lbcAction.ListIndex < 0) Then   'no action selected
            Exit Sub
        End If
    End If
    Screen.MousePointer = vbHourglass
    imInitCollectCallRequired = False
    imColCount = -1
    lmRowCount = -1
    lmRowCountMax = 0
    Select Case imCollectIndex
        Case 0 ' View history
            llRowCount = 10000  '8
            ilColCount = 11 '10
            imTabMax = 2
        Case 1 ' Post Cash
            llRowCount = 10000  '8
            ilColCount = 12 '11
            imTabMax = 5
        Case 2 ' Apply on Account Payments
            llRowCount = 10000  '8
            ilColCount = 12 '11
            imTabMax = 3
        Case 3 ' Transfer Entry
            llRowCount = 10000  '8
            ilColCount = 12 '11
            If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                imTabMax = 3
            Else
                imTabMax = 2
            End If
        Case 4 ' Reverse Entry
            llRowCount = 10000  '8
            ilColCount = 11 '10
            imTabMax = 3
        Case 5 ' Post Returned Check
            llRowCount = 10000  '8
            ilColCount = 10 '9
            imTabMax = 4
        Case 6 ' Redeposit returned check
            llRowCount = 10000  '8
            ilColCount = 10 '9
            imTabMax = 4
        'Case 7 ' Writeoff bad debt
        '    llRowCount = 8
        '    ilColCount = 10
        '    imTabMax = 3
        Case 8 ' Ageing
            llRowCount = 10000  '8
            ilColCount = 7
            imTabMax = 2
        Case 9  ' Journal
            llRowCount = 10000  '8
            ilColCount = 13 '12
            imTabMax = 3
        Case 10  ' Invoice/Invoice Adjustment
            llRowCount = 1  'To aviod error set as if one row and column
            ilColCount = 1
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                imTabMax = 21
            Else
                imTabMax = 19
            End If
        Case 11 ' Restore history
            llRowCount = 10000  '8
            ilColCount = 11 '10
            imTabMax = 2
        Case 12 ' Adjustment
            llRowCount = 10000  '8
            ilColCount = 13 '12
            imTabMax = 4
    End Select
    If imCollectIndex <> 10 Then
        plcCollect.Move plcCollect.Left, plcCollect.Top, pbcCollect(0).Width + vbcCollect.Width + 2 * fgBevelX, pbcCollect(0).height + 2 * fgBevelY 'plcCollect.Width, plcCollect.Height
        vbcCollect.Visible = True
    Else
        plcCollect.Move plcCollect.Left, plcCollect.Top, pbcCollect(10).Width + 2 * fgBevelX, pbcCollect(10).height + 2 * fgBevelY 'plcCollect.Width, plcCollect.Height
        vbcCollect.Visible = False
    End If
    If (igWinStatus(COLLECTIONSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Or (lmLockRecCode = 0) Then
        imTabMax = 2
    End If
    pbcPostBy.Visible = False
    'lbcTransactionCode.Clear
    'lbcTransactionCode.Tag = ""
    sgTransactionCodeTag = ""
    ReDim tgTransactionCode(0 To 0) As SORTCODE
    ilRet = btrClose(hmRvf)
    If (imType = 0) Or (imType = 2) Or (imType = 4) Or (imType = 6) Then
        imHistory = False
        hmRvf = CBtrvTable(TWOHANDLES)
        ilRet = btrOpen(hmRvf, "", sgDBPath & "RVF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    Else    'History
        imHistory = True
        hmRvf = CBtrvTable(TWOHANDLES)
        ilRet = btrOpen(hmRvf, "", sgDBPath & "PHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    End If
    Erase tmTransCtrls
    Erase smShow
    Erase smSave
    ReDim tmTransCtrls(0 To ilColCount) As FIELDAREA 'reinitialize transaction fields array
    ReDim smShow(0 To ilColCount, 0 To llRowCount) As String * 40  'reinitialize transaction fields array
    ReDim smSave(0 To 23, 0 To llRowCount) As String * 43  'reinitialize transaction fields array
    ReDim lmSave(0 To 3, 0 To llRowCount) As Long
    ReDim lmNTRSbfCode(0 To llRowCount) As Long        '2-24-04
    ReDim imBacklogTrfCode(0 To llRowCount) As Integer
    ReDim smTranComment(0 To llRowCount) As String
    ReDim smItemComment(0 To llRowCount) As String
    ReDim smRestoreInvNo(0 To 0) As String
    imColCount = ilColCount    'Save col and row counts
    lmRowCount = llRowCount
    For ilColNo = 1 To ilColCount Step 1      'Clear control arrays
        tmTransCtrls(ilColNo).sShow = ""
        tmTransCtrls(ilColNo).iChg = False
        tmTransCtrls(ilColNo).fBoxX = 0
        tmTransCtrls(ilColNo).fBoxY = 0
        tmTransCtrls(ilColNo).fBoxH = 0
        tmTransCtrls(ilColNo).fBoxW = 0
    Next ilColNo
    For ilColNo = 1 To ilColCount Step 1      'Clear control arrays
        For llRowNo = 1 To llRowCount Step 1
            smShow(ilColNo, llRowNo) = ""
        Next llRowNo
    Next ilColNo
    For ilColNo = LBONE To UBound(smSave, 1) Step 1      'Clear control arrays
        For llRowNo = 1 To llRowCount Step 1
            smSave(ilColNo, llRowNo) = ""
        Next llRowNo
    Next ilColNo
    For llRowNo = LBONE To llRowCount Step 1
        lmSave(1, llRowNo) = 0
        lmSave(2, llRowNo) = 0
        lmSave(3, llRowNo) = 0
        lmNTRSbfCode(llRowNo) = 0      '2-24-04
        imBacklogTrfCode(llRowNo) = 0
        smTranComment(llRowNo) = ""
        smItemComment(llRowNo) = ""
    Next llRowNo
    For ilColNo = LBONE To 6 Step 1
        smAgingTotal(ilColNo) = ""
    Next ilColNo
    smCheckDate = ""
    smTranDate = ""
    smCheckNo = ""
    smAmount = ""
    smTotalUnapplied = ""
    smTotalNoChecks = ""
    smTotalAllChecks = ""
    smPostOnAccount = ""
    smOnAccountComment = ""
    smTotalDue = ""
    smTotalAppliedDue = ""
    smTotalAppliedWriteOff = ""
    smTotalJournal = ""
    smTotalAdjGross = ""
    imCheckDate = -1
    imCheckNo = -1
    imAmount = -1
    imWriteOff = -1
    imTotalUnapplied = -1
    imTotalNoChecks = -1
    imTotalAllChecks = -1
    imOnAccountTo = -1
    imOnAccountVeh = -1
    imPostOnAccount = -1
    imOnAccountComment = -1
    imTotalDue = -1
    imTotalAppliedDue = -1
    imTotalAppliedWriteOff = -1
    imTotalJournal = -1
    imPORowNo = -1
    imXRowNo = -1
    imProdFirstTime = True
    imSalespersonFirstTime = True
    lbcAdvertiser.ListIndex = -1
    lbcProd.ListIndex = -1
    lbcVehicle(0).ListIndex = -1
    lbcVehicle(1).ListIndex = -1
    imIAdvtListIndex = -1
    imAdvtListIndex = -1
    imOnAcctVehListIndex = -1
    smIProduct = ""
    imISalespersonListIndex = -1
    smIInvoiceNo = ""
    smIRefInvoiceNo = ""
    smIContractNo = ""
    imIBillVehicleListIndex = -1
    imIAirVehicleListIndex = -1
    imIAirVefCode = -1
    imISeasonListIndex = -1
    imISvAirVefCode = -1
    imISvSeasonListIndex = -1
    imIEventListIndex = -1
    lmISeasonGhfCode = -1
    imISSPartListIndex = -1
    smIPkLine = ""
    smITranDate = ""
    smITranType = ""
    imINTRTypeListIndex = -1
    imINTRTaxListIndex = -1
    smIGross = ""
    smINet = ""
    smIAcquisition = ""
    lmTax1 = 0                      '1-18-02
    lmTax2 = 0                      '1-18-02

    'ReDim Preserve tmCtrls(0 To 2) As FIELDAREA
    'Type
    slStr = tmCtrls(CASHTRADEINDEX).sShow
    gSetCtrl tmCtrls(CASHTRADEINDEX), 30, 30, 1470, fgBoxStH
    tmCtrls(CASHTRADEINDEX).sShow = slStr
    'Action
    slStr = tmCtrls(ACTIONINDEX).sShow
    gSetCtrl tmCtrls(ACTIONINDEX), 1515, tmCtrls(CASHTRADEINDEX).fBoxY, 1980, fgBoxStH
    tmCtrls(ACTIONINDEX).sShow = slStr
    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        ilAgyAdvtAdj = 0
    Else
        ilAgyAdvtAdj = 135
    End If
    Select Case imCollectIndex
        Case 8  'Ageing
            'Advertiser/Agency
            gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 2475 - ilAgyAdvtAdj, flHeight
            'Total Due
            For ilLoop = 2 To 7 Step 1
                gSetCtrl tmTransCtrls(ilLoop), 2520 + 1035 * (ilLoop - 2), tmTransCtrls(ADVTAGENCY).fBoxY, 1020, flHeight
            Next ilLoop
        Case 0, 5, 6, 11 ' View receivables
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 1735 - ilAgyAdvtAdj, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 1765, tmTransCtrls(ADVTAGENCY).fBoxY, 660, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 2455, tmTransCtrls(ADVTAGENCY).fBoxY, 1680, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 4165, tmTransCtrls(ADVTAGENCY).fBoxY, 450, flHeight
            Else
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 1960 - ilAgyAdvtAdj, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 1990, tmTransCtrls(ADVTAGENCY).fBoxY, 660, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 2680, tmTransCtrls(ADVTAGENCY).fBoxY, 1905, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 4615, tmTransCtrls(ADVTAGENCY).fBoxY, 0, flHeight
            End If
            'Contract Number
            gSetCtrl tmTransCtrls(CONTRACTNO), 4645, tmTransCtrls(ADVTAGENCY).fBoxY, 675, flHeight
            If (imCollectIndex = 0) Or (imCollectIndex = 11) Then
                'Transaction date
                gSetCtrl tmTransCtrls(VCHECKNO), 5350, tmTransCtrls(ADVTAGENCY).fBoxY, 855, flHeight
                'Transaction date
                gSetCtrl tmTransCtrls(VTRANSDATE), 6235, tmTransCtrls(ADVTAGENCY).fBoxY, 825, flHeight
                'transaction type
                gSetCtrl tmTransCtrls(VTRANSTYPE), 7090, tmTransCtrls(ADVTAGENCY).fBoxY, 375, flHeight
                'Net amount
                gSetCtrl tmTransCtrls(VNET), 7495, tmTransCtrls(ADVTAGENCY).fBoxY, 945, flHeight
                'Asterick field
                gSetCtrl tmTransCtrls(VASTERICK), 8470, tmTransCtrls(ADVTAGENCY).fBoxY, 165, flHeight
            Else
                'Transaction date
                gSetCtrl tmTransCtrls(TRANSDATE), 5350, tmTransCtrls(ADVTAGENCY).fBoxY, 825, flHeight
                'transaction type
                gSetCtrl tmTransCtrls(TRANSTYPE), 6205, tmTransCtrls(ADVTAGENCY).fBoxY, 375, flHeight
                'Net amount
                gSetCtrl tmTransCtrls(NET), 6610, tmTransCtrls(ADVTAGENCY).fBoxY, 945, flHeight
                'Asterick field
                gSetCtrl tmTransCtrls(ASTERICK), 7585, tmTransCtrls(ADVTAGENCY).fBoxY, 150, flHeight
                'Amount Due
                gSetCtrl tmTransCtrls(AMNTDUE), 7765, tmTransCtrls(ADVTAGENCY).fBoxY, 1020, flHeight
            End If
            If (imCollectIndex = 5) Or (imCollectIndex = 6) Then
                ReDim Preserve tmCtrls(0 To 5) As FIELDAREA
                imCheckDate = 3
                gSetCtrl tmCtrls(3), 3540, tmCtrls(1).fBoxY, 870, fgBoxStH
                imCheckNo = 4
                gSetCtrl tmCtrls(4), 4425, tmCtrls(1).fBoxY, 4290, fgBoxStH
                imTotalDue = 5
                gSetCtrl tmCtrls(5), 7695, 2190, 1020, fgBoxStH
            Else
                ReDim Preserve tmCtrls(0 To 3) As FIELDAREA
                imTotalDue = 3
                gSetCtrl tmCtrls(3), 7695, 2190, 1020, fgBoxStH
            End If
        Case 1, 2, 3, 9 ' Post Cash
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 885 - ilAgyAdvtAdj, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 915, tmTransCtrls(ADVTAGENCY).fBoxY, 630, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 1575, tmTransCtrls(ADVTAGENCY).fBoxY, 885, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 2490, tmTransCtrls(ADVTAGENCY).fBoxY, 450, flHeight
            Else
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 1110, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 1140, tmTransCtrls(ADVTAGENCY).fBoxY, 630, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 1800, tmTransCtrls(ADVTAGENCY).fBoxY, 1110, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 2940, tmTransCtrls(ADVTAGENCY).fBoxY, 0, flHeight
            End If
            'Contract Number
            gSetCtrl tmTransCtrls(CONTRACTNO), 2970, tmTransCtrls(ADVTAGENCY).fBoxY, 675, flHeight
            'Transaction date
            gSetCtrl tmTransCtrls(TRANSDATE), 3675, tmTransCtrls(ADVTAGENCY).fBoxY, 825, flHeight
            'transaction type
            gSetCtrl tmTransCtrls(TRANSTYPE), 4530, tmTransCtrls(ADVTAGENCY).fBoxY, 375, flHeight
            'Net amount
            gSetCtrl tmTransCtrls(NET), 4935, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            'Asterick field
            gSetCtrl tmTransCtrls(ASTERICK), 5805, tmTransCtrls(ADVTAGENCY).fBoxY, 150, flHeight
            'Amount Due
            gSetCtrl tmTransCtrls(AMNTDUE), 5985, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            'Amount paid
            gSetCtrl tmTransCtrls(AMNTPAID), 6855, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            If imCollectIndex <> 9 Then
                'Write off
                gSetCtrl tmTransCtrls(WRITEOFF), 7725, tmTransCtrls(ADVTAGENCY).fBoxY, 930, flHeight
            Else
                'Type
                gSetCtrl tmTransCtrls(WRITEOFF), 7725, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
                'Comment
                gSetCtrl tmTransCtrls(COMMENT), 8595, tmTransCtrls(ADVTAGENCY).fBoxY, 165, flHeight
            End If
            If imCollectIndex = 1 Then
                lbcAdvertiser.RemoveItem 0
                lbcAdvertiser.AddItem "[Agency]", 0
                ReDim Preserve tmCtrls(0 To 13) As FIELDAREA
                imCheckDate = 3
                gSetCtrl tmCtrls(3), 3555, tmCtrls(1).fBoxY, 930, fgBoxStH
                imCheckNo = 4
                gSetCtrl tmCtrls(4), 4500, tmCtrls(1).fBoxY, 1110, fgBoxStH
                imAmount = 5
                gSetCtrl tmCtrls(5), 5625, tmCtrls(1).fBoxY, 1020, fgBoxStH
                imTotalUnapplied = 6
                gSetCtrl tmCtrls(6), 7665, tmCtrls(1).fBoxY, 1050, fgBoxStH
                'imTotalNoChecks = 7
                'gSetCtrl tmCtrls(7), 30, 2190, 1140, fgBoxStH
                'imTotalAllChecks = 8
                'gSetCtrl tmCtrls(8), 1185, tmCtrls(7).fBoxY, 1395, fgBoxStH
                imPostOnAccount = 7
                gSetCtrl tmCtrls(7), 30, 2190, 1185, fgBoxStH
                imOnAccountTo = 8
                gSetCtrl tmCtrls(8), 1230, tmCtrls(7).fBoxY, 1725, fgBoxStH
                imOnAccountVeh = 9
                gSetCtrl tmCtrls(9), 2970, tmCtrls(7).fBoxY, 1395, fgBoxStH
                imOnAccountComment = 10
                gSetCtrl tmCtrls(10), 4380, tmCtrls(7).fBoxY, 1185, fgBoxStH
                imTotalDue = 11
                gSetCtrl tmCtrls(11), 5625, tmCtrls(7).fBoxY, 1020, fgBoxStH
                imTotalAppliedDue = 12
                gSetCtrl tmCtrls(12), 6660, tmCtrls(7).fBoxY, 1020, fgBoxStH
                imTotalAppliedWriteOff = 13
                gSetCtrl tmCtrls(13), 7695, tmCtrls(7).fBoxY, 1020, fgBoxStH
            ElseIf imCollectIndex = 2 Then
                'ReDim Preserve tmCtrls(0 To 9) As FIELDAREA
                'imCheckDate = 3
                'gSetCtrl tmCtrls(3), 4740, tmCtrls(1).fBoxY, 870, fgBoxStH
                'imAmount = 4
                'gSetCtrl tmCtrls(4), 5625, tmCtrls(1).fBoxY, 1410, fgBoxStH
                'imTotalUnapplied = 5
                'gSetCtrl tmCtrls(5), 7665, tmCtrls(1).fBoxY, 1050, fgBoxStH
                'imPostOnAccount = 6
                'gSetCtrl tmCtrls(6), 4380, 2190, 1185, fgBoxStH
                'imTotalDue = 7
                'gSetCtrl tmCtrls(7), 5625, tmCtrls(6).fBoxY, 1020, fgBoxStH
                'imTotalAppliedDue = 8
                'gSetCtrl tmCtrls(8), 6660, tmCtrls(6).fBoxY, 1020, fgBoxStH
                'imTotalAppliedWriteOff = 9
                'gSetCtrl tmCtrls(9), 7695, tmCtrls(6).fBoxY, 1020, fgBoxStH
'                ReDim Preserve tmCtrls(0 To 9) As FIELDAREA
'                imAmount = 3
'                gSetCtrl tmCtrls(3), 5625, tmCtrls(1).fBoxY, 1410, fgBoxStH
'                imTotalUnapplied = 4
'                gSetCtrl tmCtrls(4), 7665, tmCtrls(1).fBoxY, 1050, fgBoxStH
'                imPostOnAccount = 5
'                gSetCtrl tmCtrls(5), 3180, 2190, 1185, fgBoxStH
'                imOnAccountComment = 6
'                gSetCtrl tmCtrls(6), 4380, 2190, 1185, fgBoxStH
'                imTotalDue = 7
'                gSetCtrl tmCtrls(7), 5625, tmCtrls(5).fBoxY, 1020, fgBoxStH
'                imTotalAppliedDue = 8
'                gSetCtrl tmCtrls(8), 6660, tmCtrls(5).fBoxY, 1020, fgBoxStH
'                imTotalAppliedWriteOff = 9
'                gSetCtrl tmCtrls(9), 7695, tmCtrls(5).fBoxY, 1020, fgBoxStH
                ReDim Preserve tmCtrls(0 To 8) As FIELDAREA
                imAmount = 3
                gSetCtrl tmCtrls(3), 5625, tmCtrls(1).fBoxY, 1410, fgBoxStH
                imTotalUnapplied = 4
                gSetCtrl tmCtrls(4), 7665, tmCtrls(1).fBoxY, 1050, fgBoxStH
                imPostOnAccount = 5
                gSetCtrl tmCtrls(5), 4380, 2190, 1185, fgBoxStH
'                imOnAccountComment = 6
'                gSetCtrl tmCtrls(6), 4380, 2190, 1185, fgBoxStH
                imTotalDue = 6
                gSetCtrl tmCtrls(6), 5625, tmCtrls(5).fBoxY, 1020, fgBoxStH
                imTotalAppliedDue = 7
                gSetCtrl tmCtrls(7), 6660, tmCtrls(5).fBoxY, 1020, fgBoxStH
                imTotalAppliedWriteOff = 8
                gSetCtrl tmCtrls(8), 7695, tmCtrls(5).fBoxY, 1020, fgBoxStH
            ElseIf imCollectIndex = 3 Then  'Transfer
                lbcAdvertiser.RemoveItem 0
                lbcAdvertiser.AddItem "[Agency]", 0
                ReDim Preserve tmCtrls(0 To 11) As FIELDAREA
                imCheckDate = 3
                gSetCtrl tmCtrls(3), 4725, tmCtrls(1).fBoxY, 870, fgBoxStH
                imAmount = 4
                gSetCtrl tmCtrls(4), 5625, tmCtrls(1).fBoxY, 1410, fgBoxStH
                imTotalUnapplied = 5
                gSetCtrl tmCtrls(5), 7665, tmCtrls(1).fBoxY, 1050, fgBoxStH
                imPostOnAccount = 6
                gSetCtrl tmCtrls(6), 1445, 2190, 1185, fgBoxStH
                imOnAccountTo = 7
                gSetCtrl tmCtrls(7), 2655, 2190, 1725, fgBoxStH
                imOnAccountComment = 8
                gSetCtrl tmCtrls(8), 4395, 2190, 1185, fgBoxStH
                imTotalDue = 9
                gSetCtrl tmCtrls(9), 5625, tmCtrls(6).fBoxY, 1020, fgBoxStH
                imTotalAppliedDue = 10
                gSetCtrl tmCtrls(10), 6660, tmCtrls(6).fBoxY, 1020, fgBoxStH
                imTotalAppliedWriteOff = 11
                gSetCtrl tmCtrls(11), 7695, tmCtrls(6).fBoxY, 1020, fgBoxStH
            ElseIf imCollectIndex = 9 Then
                ReDim Preserve tmCtrls(0 To 5) As FIELDAREA
                imCheckDate = 3
                gSetCtrl tmCtrls(3), 3555, tmCtrls(1).fBoxY, 870, fgBoxStH
                imTotalDue = 4
                gSetCtrl tmCtrls(4), 5625, 2190, 1020, fgBoxStH
                imTotalJournal = 5
                gSetCtrl tmCtrls(5), 6660, tmCtrls(4).fBoxY, 1020, fgBoxStH
            End If
        Case 4, 7 ' reversal, writeoff
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 1070 - ilAgyAdvtAdj, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 1100, tmTransCtrls(ADVTAGENCY).fBoxY, 885, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 2015, tmTransCtrls(ADVTAGENCY).fBoxY, 1070, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 3115, tmTransCtrls(ADVTAGENCY).fBoxY, 450, flHeight
            Else
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 1295, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 1325, tmTransCtrls(ADVTAGENCY).fBoxY, 885, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 2240, tmTransCtrls(ADVTAGENCY).fBoxY, 1295, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 3565, tmTransCtrls(ADVTAGENCY).fBoxY, 0, flHeight
            End If
            'Contract Number
            gSetCtrl tmTransCtrls(CONTRACTNO), 3595, tmTransCtrls(ADVTAGENCY).fBoxY, 675, flHeight
            'Transaction date
            gSetCtrl tmTransCtrls(TRANSDATE), 4300, tmTransCtrls(ADVTAGENCY).fBoxY, 825, flHeight
            'transaction type
            gSetCtrl tmTransCtrls(TRANSTYPE), 5155, tmTransCtrls(ADVTAGENCY).fBoxY, 375, flHeight
            'Net amount
            gSetCtrl tmTransCtrls(NET), 5560, tmTransCtrls(ADVTAGENCY).fBoxY, 945, flHeight
            'Asterick field
            If imCollectIndex = 4 Then
                gSetCtrl tmTransCtrls(ASTERICK), 6535, tmTransCtrls(ADVTAGENCY).fBoxY, 150, flHeight
            Else
                gSetCtrl tmTransCtrls(ASTERICK), 6535, tmTransCtrls(ADVTAGENCY).fBoxY, 150, flHeight
            End If
            'Amount Due
            gSetCtrl tmTransCtrls(AMNTDUE), 6715, tmTransCtrls(ADVTAGENCY).fBoxY, 945, flHeight
            'Write off
            gSetCtrl tmTransCtrls(AMNTPAID), 7690, tmTransCtrls(ADVTAGENCY).fBoxY, 1020, flHeight
            ReDim Preserve tmCtrls(0 To 5) As FIELDAREA
            If imCollectIndex = 4 Then
                imCheckDate = 3
                gSetCtrl tmCtrls(3), 3555, tmCtrls(1).fBoxY, 870, fgBoxStH
                imTotalDue = 4
                gSetCtrl tmCtrls(4), 6660, 2190, 1020, fgBoxStH
                imTotalAppliedWriteOff = 5
                gSetCtrl tmCtrls(5), 7695, tmCtrls(4).fBoxY, 1020, fgBoxStH
            Else
                imCheckDate = 3
                gSetCtrl tmCtrls(3), 3555, tmCtrls(1).fBoxY, 870, fgBoxStH
                imTotalDue = 4
                gSetCtrl tmCtrls(4), 6660, 2190, 1020, fgBoxStH
                imTotalAppliedWriteOff = 5
                gSetCtrl tmCtrls(5), 7695, tmCtrls(4).fBoxY, 1020, fgBoxStH
            End If
        Case 10  ' Invoice
            lbcAdvertiser.RemoveItem 0
            lbcAdvertiser.AddItem "[New]", 0
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                ReDim Preserve tmCtrls(0 To 21) As FIELDAREA
            Else
                ReDim Preserve tmCtrls(0 To 19) As FIELDAREA
            End If
            For ilLoop = LBound(tmCtrls) + 2 To UBound(tmCtrls) Step 1
                tmCtrls(ilLoop).iChg = False
                tmCtrls(ilLoop).sShow = ""
            Next ilLoop
            'Advertiser
            gSetCtrl tmCtrls(3), 30, 420, 2805, fgBoxStH
            'Product
            gSetCtrl tmCtrls(4), 2850, tmCtrls(3).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Salsesperson
            'gSetCtrl tmCtrls(5), tmCtrls(3).fBoxX, tmCtrls(3).fBoxY + fgStDeltaY, tmCtrls(3).fBoxW, fgBoxStH
            gSetCtrl tmCtrls(5), 5670, tmCtrls(3).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Invoice #
            gSetCtrl tmCtrls(6), tmCtrls(3).fBoxX, tmCtrls(3).fBoxY + fgStDeltaY, tmCtrls(3).fBoxW, fgBoxStH
            'Reference Invoice #
            gSetCtrl tmCtrls(7), tmCtrls(4).fBoxX, tmCtrls(6).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Contract #
            gSetCtrl tmCtrls(8), tmCtrls(5).fBoxX, tmCtrls(6).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Bill Vehicle
            gSetCtrl tmCtrls(9), tmCtrls(3).fBoxX, tmCtrls(6).fBoxY + fgStDeltaY, tmCtrls(3).fBoxW, fgBoxStH
            'Air Vehicle
            gSetCtrl tmCtrls(10), tmCtrls(4).fBoxX, tmCtrls(9).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Package Line
            gSetCtrl tmCtrls(11), tmCtrls(5).fBoxX, tmCtrls(9).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Transaction Date
            gSetCtrl tmCtrls(12), tmCtrls(3).fBoxX, tmCtrls(9).fBoxY + fgStDeltaY, 1875, fgBoxStH
            'Transaction Type
            gSetCtrl tmCtrls(13), 1920, tmCtrls(12).fBoxY, 1860, fgBoxStH
            'NTR Type
            gSetCtrl tmCtrls(14), 3795, tmCtrls(12).fBoxY, 1860, fgBoxStH
            'NTR Tax
            gSetCtrl tmCtrls(15), tmCtrls(5).fBoxX, tmCtrls(12).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            'Gross
            gSetCtrl tmCtrls(16), tmCtrls(3).fBoxX, tmCtrls(12).fBoxY + fgStDeltaY, tmCtrls(12).fBoxW, fgBoxStH
            'Net
            gSetCtrl tmCtrls(17), tmCtrls(13).fBoxX, tmCtrls(16).fBoxY, tmCtrls(13).fBoxW, fgBoxStH
            'Acquisition
            gSetCtrl tmCtrls(18), tmCtrls(14).fBoxX, tmCtrls(16).fBoxY, tmCtrls(14).fBoxW, fgBoxStH
            'Sales Source/Participant
            gSetCtrl tmCtrls(19), tmCtrls(5).fBoxX, tmCtrls(16).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                'Season
                gSetCtrl tmCtrls(20), tmCtrls(3).fBoxX, tmCtrls(16).fBoxY + fgStDeltaY, tmCtrls(3).fBoxW, fgBoxStH
                'Event
                gSetCtrl tmCtrls(21), tmCtrls(4).fBoxX, tmCtrls(20).fBoxY, tmCtrls(3).fBoxW, fgBoxStH
            End If
        Case 12 'Adjustment
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 885 - ilAgyAdvtAdj, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 915, tmTransCtrls(ADVTAGENCY).fBoxY, 630, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 1575, tmTransCtrls(ADVTAGENCY).fBoxY, 885, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 2490, tmTransCtrls(ADVTAGENCY).fBoxY, 450, flHeight
            Else
                'Advertiser/Agency
                gSetCtrl tmTransCtrls(ADVTAGENCY), 30, 600, 1110 - ilAgyAdvtAdj, flHeight
                'invoice number
                gSetCtrl tmTransCtrls(INVOICENO), 1140, tmTransCtrls(ADVTAGENCY).fBoxY, 630, flHeight
                'Vehicle name
                gSetCtrl tmTransCtrls(VEHICLENAME), 1800, tmTransCtrls(ADVTAGENCY).fBoxY, 1110, flHeight
                'Event number
                gSetCtrl tmTransCtrls(EVENTNUMBER), 2490, tmTransCtrls(ADVTAGENCY).fBoxY, 0, flHeight
            End If
            'Contract Number
            gSetCtrl tmTransCtrls(CONTRACTNO), 2970, tmTransCtrls(ADVTAGENCY).fBoxY, 675, flHeight
            'Transaction date
            gSetCtrl tmTransCtrls(TRANSDATE), 3675, tmTransCtrls(ADVTAGENCY).fBoxY, 825, flHeight
            'transaction type
            gSetCtrl tmTransCtrls(TRANSTYPE), 4530, tmTransCtrls(ADVTAGENCY).fBoxY, 375, flHeight
            'Net amount
            gSetCtrl tmTransCtrls(IANET), 4935, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            'Asterick field
            gSetCtrl tmTransCtrls(IAASTERICK), 5805, tmTransCtrls(ADVTAGENCY).fBoxY, 150, flHeight
            'Amount Due
            gSetCtrl tmTransCtrls(IAAMTDUE), 5985, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            'Net
            gSetCtrl tmTransCtrls(IAAMTPAID), 6855, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            'Gross
            gSetCtrl tmTransCtrls(IAGROSS), 7725, tmTransCtrls(ADVTAGENCY).fBoxY, 840, flHeight
            'Comment
            gSetCtrl tmTransCtrls(IACOMMENT), 8595, tmTransCtrls(ADVTAGENCY).fBoxY, 165, flHeight
            lbcAdvertiser.RemoveItem 0
            lbcAdvertiser.AddItem "[Agency]", 0
            ReDim Preserve tmCtrls(0 To 6) As FIELDAREA
            imCheckDate = 3
            gSetCtrl tmCtrls(3), 3555, tmCtrls(1).fBoxY, 870, fgBoxStH
            imTotalDue = 4
            gSetCtrl tmCtrls(4), 5625, 2190, 1020, fgBoxStH
            imTotalAppliedDue = 5
            gSetCtrl tmCtrls(5), 6660, tmCtrls(4).fBoxY, 930, fgBoxStH
            imTotalAdjGross = 6
            gSetCtrl tmCtrls(6), 7605, tmCtrls(4).fBoxY, 930, fgBoxStH

    End Select
    llMax = 0
    For ilLoop = LBound(tmCtrls) To UBound(tmCtrls) Step 1
        If tmCtrls(ilLoop).fBoxX >= 0 Then
            tmCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmCtrls(ilLoop).fBoxW)
            Do While (tmCtrls(ilLoop).fBoxW Mod 15) <> 0
                tmCtrls(ilLoop).fBoxW = tmCtrls(ilLoop).fBoxW + 1
            Loop
            If tmCtrls(ilLoop).fBoxX > 90 Then
                tmCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmCtrls(ilLoop).fBoxX)
                Do While (tmCtrls(ilLoop).fBoxX Mod 15) <> 0
                    tmCtrls(ilLoop).fBoxX = tmCtrls(ilLoop).fBoxX + 1
                Loop
                If (ilLoop = 2) Or ((ilLoop > 1) And (imCollectIndex = 10)) Then
                    Do
                        If tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15 < tmCtrls(ilLoop).fBoxX Then
                            tmCtrls(ilLoop - 1).fBoxW = tmCtrls(ilLoop - 1).fBoxW + 15
                        ElseIf tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15 > tmCtrls(ilLoop).fBoxX Then
                            tmCtrls(ilLoop - 1).fBoxW = tmCtrls(ilLoop - 1).fBoxW - 15
                        Else
                            Exit Do
                        End If
                    Loop
                End If
                If imCollectIndex = 10 Then
                    If tmCtrls(ilLoop).fBoxX + tmCtrls(ilLoop).fBoxW + 15 > llMax Then
                        llMax = tmCtrls(ilLoop).fBoxX + tmCtrls(ilLoop).fBoxW + 15
                    End If
                End If
            End If
        End If
    Next ilLoop
    If (imCollectIndex = 10) And ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
        tmCtrls(21).fBoxW = tmCtrls(4).fBoxW
    End If
    If imCollectIndex <> 10 Then
        llMax = 0
        For ilLoop = imLBTransCtrls To UBound(tmTransCtrls) Step 1
            If tmTransCtrls(ilLoop).fBoxX >= 0 Then
                tmTransCtrls(ilLoop).fBoxW = CLng(fmAdjFactorW * tmTransCtrls(ilLoop).fBoxW)
                Do While (tmTransCtrls(ilLoop).fBoxW Mod 15) <> 0
                    tmTransCtrls(ilLoop).fBoxW = tmTransCtrls(ilLoop).fBoxW + 1
                Loop
                If tmTransCtrls(ilLoop).fBoxX > 90 Then
                    tmTransCtrls(ilLoop).fBoxX = CLng(fmAdjFactorW * tmTransCtrls(ilLoop).fBoxX)
                    Do While (tmTransCtrls(ilLoop).fBoxX Mod 15) <> 0
                        tmTransCtrls(ilLoop).fBoxX = tmTransCtrls(ilLoop).fBoxX + 1
                    Loop
                    Do
                        If tmTransCtrls(ilLoop - 1).fBoxX + tmTransCtrls(ilLoop - 1).fBoxW + 15 < tmTransCtrls(ilLoop).fBoxX Then
                            tmTransCtrls(ilLoop - 1).fBoxW = tmTransCtrls(ilLoop - 1).fBoxW + 15
                        ElseIf tmTransCtrls(ilLoop - 1).fBoxX + tmTransCtrls(ilLoop - 1).fBoxW + 15 > tmTransCtrls(ilLoop).fBoxX Then
                            tmTransCtrls(ilLoop - 1).fBoxW = tmTransCtrls(ilLoop - 1).fBoxW - 15
                        Else
                            Exit Do
                        End If
                    Loop
                End If
            End If
            If tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW + 15 > llMax Then
                llMax = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW + 15
            End If
        Next ilLoop
    End If
    pbcCollect(imCollectIndex).Width = llMax
    'plcCollect.Height = plcCommStatis.Top - plcCollect.Top - 120
    If imCollectIndex <> 10 Then
        pbcCollect(imCollectIndex).height = plcCollect.height - 2 * fgBevelY
        ilLineCount = 0
        llHeight = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45
        Do
            ilLineCount = ilLineCount + 1
            llHeight = llHeight + tmTransCtrls(1).fBoxH + 15
        Loop While llHeight + tmTransCtrls(1).fBoxH + 15 < pbcCollect(imCollectIndex).height
        pbcCollect(imCollectIndex).height = llHeight
        vbcCollect.LargeChange = ilLineCount - 4
        plcCollect.Move plcCollect.Left, plcCollect.Top, pbcCollect(imCollectIndex).Width + vbcCollect.Width + 2 * fgBevelX, pbcCollect(imCollectIndex).height + 2 * fgBevelY 'plcCollect.Width, plcCollect.Height
        vbcCollect.Move plcCollect.Width - vbcCollect.Width - fgBevelX, tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45, vbcCollect.Width, plcCollect.height - tmTransCtrls(1).fBoxY - 2 * fgBevelY - (fgBoxGridH + 15)
        vbcCollect.Visible = True
    Else
        pbcCollect(imCollectIndex).height = tmCtrls(UBound(tmCtrls)).fBoxY + tmCtrls(UBound(tmCtrls)).fBoxH + 15
        plcCollect.Move plcCollect.Left, plcCollect.Top, pbcCollect(imCollectIndex).Width + 2 * fgBevelX, pbcCollect(imCollectIndex).height + 2 * fgBevelY 'plcCollect.Width, plcCollect.Height
        vbcCollect.Visible = False
    End If

    For ilLoop = LBound(tmCtrls) To UBound(tmCtrls) Step 1
        If tmCtrls(ilLoop).fBoxX >= 0 Then
            If (tmCtrls(ilLoop).fBoxX > 90) Or (ilLoop = imPostOnAccount) Then
                Select Case imCollectIndex
                    Case 0, 11 ' View history, Restore History
                        If ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = llMax - tmCtrls(ilLoop).fBoxW - 15
                            tmCtrls(imTotalDue).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        End If
                    Case 1 ' Post Cash
                        If ilLoop = imAmount Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            Do
                                If tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15 < tmCtrls(ilLoop).fBoxX Then
                                    tmCtrls(ilLoop - 1).fBoxW = tmCtrls(ilLoop - 1).fBoxW + 15
                                ElseIf tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15 > tmCtrls(ilLoop).fBoxX Then
                                    tmCtrls(ilLoop - 1).fBoxW = tmCtrls(ilLoop - 1).fBoxW - 15
                                Else
                                    Exit Do
                                End If
                            Loop
                            Do
                                If tmCtrls(ilLoop - 2).fBoxX + tmCtrls(ilLoop - 2).fBoxW + 15 < tmCtrls(ilLoop - 1).fBoxX Then
                                    tmCtrls(ilLoop - 2).fBoxW = tmCtrls(ilLoop - 2).fBoxW + 15
                                ElseIf tmCtrls(ilLoop - 2).fBoxX + tmCtrls(ilLoop - 2).fBoxW + 15 > tmCtrls(ilLoop - 1).fBoxX Then
                                    tmCtrls(ilLoop - 2).fBoxW = tmCtrls(ilLoop - 2).fBoxW - 15
                                Else
                                    Exit Do
                                End If
                            Loop
                        ElseIf ilLoop = imTotalUnapplied Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(WRITEOFF).fBoxX + tmTransCtrls(WRITEOFF).fBoxW - tmCtrls(6).fBoxW
                        ElseIf ilLoop = imPostOnAccount Then
                            tmCtrls(imPostOnAccount).fBoxX = tmCtrls(1).fBoxX
                            tmCtrls(imPostOnAccount).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        ElseIf (ilLoop = imOnAccountTo) Or (ilLoop = imOnAccountVeh) Or (ilLoop = imOnAccountComment) Then
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                            Do
                                If tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15 < tmCtrls(ilLoop).fBoxX Then
                                    tmCtrls(ilLoop - 1).fBoxW = tmCtrls(ilLoop - 1).fBoxW + 15
                                ElseIf tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15 > tmCtrls(ilLoop).fBoxX Then
                                    tmCtrls(ilLoop - 1).fBoxW = tmCtrls(ilLoop - 1).fBoxW - 15
                                Else
                                    Exit Do
                                End If
                            Loop
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalAppliedDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTPAID).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTPAID).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalAppliedWriteOff Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(WRITEOFF).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(WRITEOFF).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        End If
                    Case 2 ' Apply on Account Payments
                        If ilLoop = imAmount Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW + 300
                        ElseIf ilLoop = imTotalUnapplied Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(WRITEOFF).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(WRITEOFF).fBoxW
                        ElseIf ilLoop = imPostOnAccount Then
                            tmCtrls(imPostOnAccount).fBoxX = tmTransCtrls(AMNTDUE).fBoxX - tmCtrls(imPostOnAccount).fBoxW - 45
                            tmCtrls(imPostOnAccount).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalAppliedDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTPAID).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTPAID).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalAppliedWriteOff Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(WRITEOFF).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(WRITEOFF).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        End If
                    Case 3 ' Transfer Entry
                        If ilLoop = imCheckDate Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX - tmCtrls(ilLoop).fBoxW - 15
                        ElseIf ilLoop = imAmount Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW + 120
                        ElseIf ilLoop = imTotalUnapplied Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(WRITEOFF).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(WRITEOFF).fBoxW
                        ElseIf ilLoop = imPostOnAccount Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX - tmCtrls(ilLoop + 2).fBoxW - 45 - tmCtrls(ilLoop + 1).fBoxW - 15 - tmCtrls(ilLoop).fBoxW - 15
                            tmCtrls(imPostOnAccount).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        ElseIf ilLoop = imOnAccountTo Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX - tmCtrls(ilLoop + 1).fBoxW - 45 - tmCtrls(ilLoop).fBoxW - 15
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imOnAccountComment Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX - tmCtrls(ilLoop).fBoxW - 45
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalAppliedDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTPAID).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTPAID).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        ElseIf ilLoop = imTotalAppliedWriteOff Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(WRITEOFF).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(WRITEOFF).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imPostOnAccount).fBoxY
                        End If
                    Case 4 ' Reverse Entry
                        If ilLoop = imCheckDate Then
                            tmCtrls(ilLoop).fBoxX = tmCtrls(ACTIONINDEX).fBoxX + tmCtrls(ACTIONINDEX).fBoxW + 45
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            tmCtrls(imTotalDue).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        ElseIf ilLoop = imTotalAppliedWriteOff Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTPAID).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTPAID).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imTotalDue).fBoxY
                        End If
                    Case 5, 6 ' Post Returned Check and Redeposit returned check
                        If ilLoop = imCheckDate Then
                            tmCtrls(ilLoop).fBoxX = tmCtrls(ACTIONINDEX).fBoxX + tmCtrls(ACTIONINDEX).fBoxW + 45
                        ElseIf ilLoop = imCheckNo Then
                            tmCtrls(ilLoop).fBoxX = tmCtrls(ilLoop - 1).fBoxX + tmCtrls(ilLoop - 1).fBoxW + 15
                            Do
                                If tmCtrls(ilLoop).fBoxX + tmCtrls(ilLoop).fBoxW + 15 > llMax Then
                                    tmCtrls(ilLoop).fBoxW = tmCtrls(ilLoop).fBoxW - 15
                                ElseIf tmCtrls(ilLoop).fBoxX + tmCtrls(ilLoop).fBoxW + 15 < llMax Then
                                    tmCtrls(ilLoop).fBoxW = tmCtrls(ilLoop).fBoxW + 15
                                Else
                                    Exit Do
                                End If
                            Loop
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            tmCtrls(imTotalDue).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        End If
                    'Case 6 ' Redeposit returned check
                    ''Case 7 ' Writeoff bad debt
                    ''    llRowCount = 8
                    ''    ilColCount = 10
                    ''    imTabMax = 3
                    Case 8 ' Ageing
                    Case 9  ' Journal
                        If ilLoop = imCheckDate Then
                            tmCtrls(ilLoop).fBoxX = tmCtrls(ACTIONINDEX).fBoxX + tmCtrls(ACTIONINDEX).fBoxW + 45
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTDUE).fBoxW
                            tmCtrls(imTotalDue).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        ElseIf ilLoop = imTotalJournal Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(AMNTPAID).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(AMNTPAID).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imTotalDue).fBoxY
                        End If
                    Case 10  ' Invoice/Invoice Adjustment
                    'Case 11 ' Restore history
                    Case 12 ' Adjustment
                        If ilLoop = imCheckDate Then
                            tmCtrls(ilLoop).fBoxX = tmCtrls(ACTIONINDEX).fBoxX + tmCtrls(ACTIONINDEX).fBoxW + 45
                        ElseIf ilLoop = imTotalDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(IAAMTDUE).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(IAAMTDUE).fBoxW
                            tmCtrls(imTotalDue).fBoxY = llHeight - 2 * (tmTransCtrls(1).fBoxH + 15) + 30
                        ElseIf ilLoop = imTotalAppliedDue Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(IAAMTPAID).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(IAAMTPAID).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imTotalDue).fBoxY
                        ElseIf ilLoop = imTotalAdjGross Then
                            tmCtrls(ilLoop).fBoxX = tmTransCtrls(IAGROSS).fBoxX
                            tmCtrls(ilLoop).fBoxW = tmTransCtrls(IAGROSS).fBoxW
                            tmCtrls(ilLoop).fBoxY = tmCtrls(imTotalDue).fBoxY
                        End If
                End Select
            End If
        End If
    Next ilLoop


    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
        If tgSpf.sBCombine <> "N" Then
            If imCollectIndex = 12 Then
                pbcPostBy.Left = pbcCollect(imCollectIndex).Left + tmTransCtrls(IAAMTPAID).fBoxX
                pbcPostBy.Top = pbcCollect(imCollectIndex).Top + tmTransCtrls(IAAMTPAID).fBoxY - fgBoxGridH - 15
                pbcPostBy.Width = tmTransCtrls(IAAMTPAID).fBoxW
            Else
                pbcPostBy.Left = pbcCollect(imCollectIndex).Left + tmTransCtrls(AMNTPAID).fBoxX
                pbcPostBy.Top = pbcCollect(imCollectIndex).Top + tmTransCtrls(AMNTPAID).fBoxY - fgBoxGridH - 15
                pbcPostBy.Width = tmTransCtrls(AMNTPAID).fBoxW
            End If
            imPostBy = 0
            pbcPostBy.Visible = True
        End If
    End If
    'dan M. 6-19-08
    pbcShow.Left = tmCtrls(ACTIONINDEX).fBoxX + tmCtrls(ACTIONINDEX).fBoxW + plcCollect.Left + 120

    mSetCommands
    If ilPop Then
        ilRet = mReadRVFPHF(False)
    End If
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInitInfoSetShow                *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mInitInfoSetShow(ilBoxNo As Integer)
'
'   mInfoSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim slStr As String     'string to pass to gsetshow
    Dim ilPos As Integer    'sales person name comma position
    Dim slAmt As String
    If (ilBoxNo < imLBCDCtrls) Or (ilBoxNo > UBound(tmInfoCtrls)) Then
        Exit Sub
    End If

    Select Case ilBoxNo 'Branch on box type (control)

        Case CREDITRINDEX   'Credit Restriction
            slStr = smInfoCtrls(ilBoxNo)
            If Trim$(smInfoCtrls(CREDITAMTINDEX)) <> "" Then
                slStr = smInfoCtrls(CREDITAMTINDEX)
                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slAmt
                slStr = smInfoCtrls(CREDITRINDEX) & " " & slAmt
            End If
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
        Case CREDITAMTINDEX 'Credit Restriction limt
            slStr = smInfoCtrls(CREDITAMTINDEX)
            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slAmt
            slStr = smInfoCtrls(CREDITRINDEX) & " " & slAmt
            gSetShow pbcInfo, slStr, tmInfoCtrls(CREDITRINDEX)
        Case PAYRATEINDEX   'Payment rating
            slStr = smInfoCtrls(ilBoxNo)
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
        Case PHONEINDEX 'Phone number plus extension
            If mkcPhone.Text = smPhoneImage Then
                slStr = ""
            Else
                slStr = mkcPhone.Text
            End If
            smInfoCtrls(ilBoxNo) = slStr
            If slStr <> "" Then
                If InStr(slStr, "(____)") <> 0 Then
                    ilPos = InStr(slStr, "Ext(")
                    slStr = Left$(slStr, ilPos - 1)
                End If
            End If
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
        Case PAYABLESINDEX   'Sales person
            slStr = smInfoCtrls(PAYABLESINDEX)
            gFindMatch slStr, 0, lbcPayables
            lbcPayables.ListIndex = gLastFound(lbcPayables)
'            If Not igSlfFirstNameFirst Then  'Check name order
'                ilPos = InStr(slStr, ",")
'                If ilPos > 0 Then
'                    slLast = Left$(slStr, ilPos - 1)
'                    slFirst = right$(slStr, Len(slStr) - ilPos - 1)
'                    slStr = slFirst & " " & slLast
'                End If
'            End If
            gSetShow pbcInfo, slStr, tmInfoCtrls(ilBoxNo)
        'Case STATSINDEX      'Statistics control
        '    If imAgencyFlag = 0 Then
        '        slStr = "Agency"
        '    Else
        '        slStr = "Advertiser"
        '    End If
            'gSetShow pbcStatistics, slStr,
    End Select
    mS4SetShow 'Repaint info area if display was corrupted by a list box drop-down
    mInfoSetChg ilBoxNo
End Sub
Private Sub mkcPhone_GotFocus()
    gCtrlGotFocus mkcPhone
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMakeInvRec                     *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Create Invoice or Adjustment   *
'*                      record                         *
'*                                                     *
'*******************************************************
Private Function mMakeInvRec() As Integer
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilCode As Integer
    Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slNet As String
    Dim slGross As String
    Dim ilRes As Integer
    Dim slPct As String
    Dim slDollar As String
    Dim slRunGross As String
    Dim slRunNet As String
    Dim slTranType As String
    Dim slSyncDate As String
    Dim slSyncTime As String
    Dim hlPhf As Integer        'RVF or PHF file handle
    Dim slTax1 As String        '1-22-02
    Dim slTax2 As String        '1-22-02
    Dim slRunTax1 As String     '1-22-02
    Dim slrunTax2 As String     '1-22-02
    Dim slSlsTax As String * 1  '2-24-04
    Dim slTaxGross As String
    Dim slTaxNet As String
    Dim slTax As String
    Dim ilPnfBuyer As Integer

    Dim tlRvf As RVF
    If Not gValidDate(smITranDate) Then
        Screen.MousePointer = vbDefault
        ilRes = MsgBox("Invalid Transaction Date Defined", vbOKOnly + vbExclamation, "Date Error")
        Beep
        lmRowNo = -1
        imBoxNo = ITRANDATEINDEX
        mMakeInvRec = False
        Exit Function
    End If
    If (gDateValue(smITranDate) <= gDateValue(smPrevEndPeriodDate)) Or (gDateValue(smITranDate) > gDateValue(smNowDate)) Or (gDateValue(smITranDate) > gDateValue(smNextEndPeriodDate)) Then
        Screen.MousePointer = vbDefault
        If gDateValue(smNowDate) < gDateValue(smNextEndPeriodDate) Then
            ilRes = MsgBox("Date must be between " & gIncOneDay(smPrevEndPeriodDate) & "-" & smNowDate, vbOKOnly + vbExclamation, "Date Error")
        Else
            ilRes = MsgBox("Date must be between " & gIncOneDay(smPrevEndPeriodDate) & "-" & smNextEndPeriodDate, vbOKOnly + vbExclamation, "Date Error")
        End If
        lmRowNo = -1
        imBoxNo = ITRANDATEINDEX
        mMakeInvRec = False
        Exit Function
    End If
    'Test that signs are the same
    If ((Left(smINet, 1) = "-") And (Left$(smIGross, 1) <> "-")) Or ((Left$(smINet, 1) <> "-") And (Left$(smIGross, 1) = "-")) Then
        Screen.MousePointer = vbDefault
        ilRes = MsgBox("Gross and Net must have the Same Sign", vbOKOnly + vbExclamation, "Date Error")
        Beep
        lmRowNo = -1
        imBoxNo = INETINDEX
        mMakeInvRec = False
        Exit Function
    End If
    tmRvf.lCefCode = 0
    tmRvf.lSbfCode = 0
    tmRvf.iMnfItem = 0
    tmRvf.iBacklogTrfCode = 0
    tmRvf.sInCollect = "N"
    tmRvf.iRemoteID = 0
    tmRvf.lAcquisitionCost = 0
    tmRvf.sType = ""
    tmRvf.lPcfCode = 0 'TTP 11062 JJB 2024-05-20
    
    '1/17/09: Added buyer
    'tmRvf.sUnused = ""
    tmRvf.iPnfBuyer = 0
    tmRvf.lGsfCode = 0
    slSlsTax = "Y"          '2-24-04

    If (tgSpf.sUsingNTR = "Y") And (imINTRTypeListIndex > 0) Then
        ilFound = False
        ilRet = gParseItem(tmNTRTypeCode(imINTRTypeListIndex - 1).sKey, 2, "\", slStr)
        ilCode = Val(slStr)
        tmRvf.iMnfItem = ilCode
        ilRet = gParseItem(tmNTRTypeCode(imINTRTypeListIndex - 1).sKey, 6, "\", slTax)
        If ilRet = CP_MSG_NONE Then
            If (imINTRTaxListIndex > 0) And (slTax = "Y") Then
                tmRvf.iBacklogTrfCode = lbcNTRTax.ItemData(imINTRTaxListIndex)
            End If
        End If
        'Test if Creating Invoice- if so, bypass test for sbf
        If (imCollectIndex = 10) And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
            tmRvf.lSbfCode = 0
        Else
            'Determine if NTR via invoice #
            tmRvfSrchKey5.lInvNo = Val(smIInvoiceNo)
            ilRet = btrGetEqual(hmRvf, tlRvf, imRvfRecLen, tmRvfSrchKey5, 5, BTRV_LOCK_NONE, SETFORREADONLY)
            Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.lInvNo = Val(smIInvoiceNo))
                If (tlRvf.sTranType = "IN") And (tlRvf.lSbfCode > 0) Then
                    tmSbfSrchKey1.lCode = tlRvf.lSbfCode
                    ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                    If (ilRet = BTRV_ERR_NONE) And (tmSbf.iMnfItem = ilCode) Then
                        tmRvf.lSbfCode = tlRvf.lSbfCode
                        ilFound = True
                        '12/17/06-Change to tax by agency or vehicle
                        'slSlsTax = tmSbf.sSlsTax    '2-24-04
                        If tmSbf.iTrfCode > 0 Then
                            slSlsTax = "Y"
                        Else
                            slSlsTax = "N"
                        End If
                        Exit Do
                    End If
                End If
                ilRet = btrGetNext(hmRvf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If Not ilFound Then
                ilRes = MsgBox("Invalid NTR Type Selected", vbOKOnly + vbExclamation, "Date Error")
                Beep
                lmRowNo = -1
                imBoxNo = INTRTYPEINDEX
                mMakeInvRec = False
                Exit Function
            End If
        End If
    End If
    
    '7-3-17 if $0 net, ask for pw;CSI needs to know why a $0 net amount
    If Trim$(smINet) = "0" Then
        ilRes = MsgBox("$0 Net amount disallowed")
        Exit Function
    End If
    hlPhf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlPhf, "", sgDBPath & "PHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Screen.MousePointer = vbDefault
        Beep
        mMakeInvRec = False
        imBoxNo = ITRANDATEINDEX
        Exit Function
    End If
    Screen.MousePointer = vbHourglass
    gGetSyncDateTime slSyncDate, slSyncTime
    If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
        tmRvf.iAgfCode = imAgfCode 'Agency code number (0 if advertiser is direct)
        tmAgfSrchKey.iCode = imAgfCode
        ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            ilPnfBuyer = tmAgf.iPnfBuyer
        End If
    Else
        tmRvf.iAgfCode = 0
        tmAdfSrchKey.iCode = imIAdfCode
        ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            ilPnfBuyer = tmAdf.iPnfBuyer
        End If
    End If
    tmRvf.iAdfCode = imIAdfCode 'Advertiser code number
    If (Trim$(smIProduct) <> "") And (Trim$(smIProduct) <> "[None]") Then
        gFindMatch smIProduct, 0, lbcProd
        If gLastFound(lbcProd) < 0 Then
            tmPrf.lCode = 0
            tmPrf.iAdfCode = tmAdf.iCode
            tmPrf.sName = smIProduct
            tmPrf.iMnfComp(0) = 0
            tmPrf.iMnfComp(1) = 0
            tmPrf.iMnfExcl(0) = 0
            tmPrf.iMnfExcl(1) = 0
            tmPrf.iUrfCode = tgUrf(0).iCode 'Use first record retained for user
            tmPrf.iRemoteID = tgUrf(0).iRemoteUserID
            tmPrf.lAutoCode = tmPrf.lCode
            ilRet = btrInsert(hmPrf, tmPrf, imPrfRecLen, INDEXKEY0)
            If ilRet <> BTRV_ERR_NONE Then
                Screen.MousePointer = vbDefault
                mMakeInvRec = False
                ilRet = btrClose(hlPhf)
                btrDestroy hlPhf
                Screen.MousePointer = vbDefault
                Exit Function
            End If
            tmRvf.lPrfCode = tmPrf.lCode
            'If tgSpf.sRemoteUsers = "Y" Then
                Do
                    'tmPrfSrchKey0.lCode = tmPrf.lCode
                    'ilRet = btrGetEqual(hmPrf, tmPrf, imPrfRecLen, tmPrfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                    'If ilRet <> BTRV_ERR_NONE Then
                    '    Screen.MousePointer = vbDefault
                    '    mMakeInvRec = False
                    '    ilRet = btrClose(hlPhf)
                    '    btrDestroy hlPhf
                    '    Screen.MousePointer = vbDefault
                    '    Exit Function
                    'End If
                    tmPrf.iRemoteID = tgUrf(0).iRemoteUserID
                    tmPrf.lAutoCode = tmPrf.lCode
                    tmPrf.iSourceID = tgUrf(0).iRemoteUserID
                    gPackDate slSyncDate, tmPrf.iSyncDate(0), tmPrf.iSyncDate(1)
                    gPackTime slSyncTime, tmPrf.iSyncTime(0), tmPrf.iSyncTime(1)
                    ilRet = btrUpdate(hmPrf, tmPrf, imPrfRecLen)
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    Screen.MousePointer = vbDefault
                    mMakeInvRec = False
                    ilRet = btrClose(hlPhf)
                    btrDestroy hlPhf
                    Screen.MousePointer = vbDefault
                    Exit Function
                End If
            'End If
        Else
            If gLastFound(lbcProd) > 0 Then
                slNameCode = tmProdCode(gLastFound(lbcProd) - 1).sKey    'lbcProdCode.List(gLastFound(lbcProd) - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                If ilRet = CP_MSG_NONE Then
                    slCode = Trim$(slCode)
                    tmRvf.lPrfCode = Val(slCode)
                Else
                    tmRvf.lPrfCode = 0
                End If
            Else
                tmRvf.lPrfCode = 0
            End If
        End If
    Else
        tmRvf.lPrfCode = 0
    End If
    If imISalespersonListIndex >= 1 Then
        'If lbcSalesperson.ListIndex <= Traffic!lbcSalesperson.ListCount Then    '+1 - 1
            slNameCode = tmSalesperson(imISalespersonListIndex - 1).sKey   'Traffic!lbcSalesperson.List(imISalespersonListIndex - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            If ilRet = CP_MSG_NONE Then
                slCode = Trim$(slCode)
                tmRvf.iSlfCode = CInt(slCode)
            Else
                tmRvf.iSlfCode = 0
            End If
        'Else
        '    slNameCode = Traffic!lbcPayablesCombo.List(imISalespersonListIndex - 1 - Traffic!lbcSalesperson.ListCount)
        '    ilRet = gParseItem(slNameCode, 2, "\", slCode)
        '    If ilRet = CP_MSG_NONE Then
        '        slCode = Trim$(slCode)
        '        tmRvf.iSlfCode = -CInt(slCode)
        '    Else
        '        tmRvf.iSlfCode = 0
        '    End If
        'End If
    Else
        tmRvf.iSlfCode = 0
    End If
    tmRvf.lCntrNo = Val(smIContractNo)     'Contract Number
    tmRvf.lInvNo = Val(smIInvoiceNo)      'Invoice number
    If Len(smIRefInvoiceNo) = 0 Then
        tmRvf.lRefInvNo = Val(smIInvoiceNo)   'Use invoice number
    Else
        tmRvf.lRefInvNo = Val(smIRefInvoiceNo)   'Reference invoice number
    End If
    If imIBillVehicleListIndex > -1 Then
        'ilRet = gParseItem(Traffic!lbcUserVehicle.List(imIBillVehicleListIndex), 2, "\", slStr)
        ilRet = gParseItem(tmRvfUserVehicle(imIBillVehicleListIndex).sKey, 2, "\", slStr)
        tmRvf.iBillVefCode = Val(Trim$(slStr))
    Else
        tmRvf.iBillVefCode = 0
    End If
    If imIAirVehicleListIndex > -1 Then
        'ilRet = gParseItem(Traffic!lbcUserVehicle.List(imIAirVehicleListIndex), 2, "\", slStr)
        ilRet = gParseItem(tmUserVehicle(imIAirVehicleListIndex).sKey, 2, "\", slStr)
        tmRvf.iAirVefCode = Val(Trim$(slStr))
    Else
        tmRvf.iAirVefCode = 0
    End If
    If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) And (tmRvf.iAirVefCode > 0) Then
        If imIEventListIndex >= 0 Then
            tmRvf.lGsfCode = tmGsfInfo(lbcEvent.ItemData(imIEventListIndex)).lGsfCode
        End If
    End If
'    tmRvf.lSbfCode = 0
'    If (tgSpf.sUsingNTR = "Y") And (imINTRTypeListIndex > 0) Then
'        ilRet = gParseItem(tmNTRTypeCode(imINTRTypeListIndex - 1).sKey, 2, "\", slStr)
'        ilCode = Val(slStr)
'        'Determine if NTR via invoice #
'        tmRvfSrchKey5.lInvNo = tmRvf.lInvNo
'        ilRet = btrGetEqual(hmRvf, tlRvf, imRvfRecLen, tmRvfSrchKey5, 5, BTRV_LOCK_NONE, SETFORREADONLY)
'        Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.lInvNo = tmRvf.lInvNo)
'            If (tlRvf.sTranType = "IN") And (tlRvf.lSbfCode > 0) Then
'                tmSbfSrchKey.lCode = tlRvf.lSbfCode
'                ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
'                If (ilRet = BTRV_ERR_NONE) And (tmSbf.iMnfItem = ilCode) Then
'                    tmRvf.lSbfCode = tlRvf.lSbfCode
'                    Exit Do
'                End If
'            End If
'            ilRet = btrGetNext(hmRvf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
'        Loop
'    End If
    tmRvf.iPkLineNo = Val(smIPkLine)      'Package Line Number
    '6/7/15: Changed check number to string
    'tmRvf.lCheckNo = 0    'Check number
    tmRvf.sCheckNo = ""    'Check number
    smITranDate = gAdjYear(smITranDate)
    gPackDate smITranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
    If Trim$(smITranType) = "" Then
        '2/7/08:  All adjustments entered as AN so that they are shown on reports
        'If (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
        '    tmRvf.sTranType = "IN"   '
        'Else
            tmRvf.sTranType = "AN"   '
        'End If
    Else
        tmRvf.sTranType = smITranType
    End If
    tmRvf.sAction = ""   '
    gStrToPDN smIGross, 2, 6, tmRvf.sGross
    gStrToPDN smINet, 2, 6, tmRvf.sNet
    tmRvf.lAcquisitionCost = gStrDecToLong(smIAcquisition, 2)
    tmRvf.lTax1 = lmTax1                '1-18-02
    tmRvf.lTax2 = lmTax2                '1-18-02
    If (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And (imType = 2))) Then
        tmRvf.iAgePeriod = month(smITranDate)
        tmRvf.iAgingYear = year(smITranDate)
    Else    'Invoice Adjustment- use Referenced Invoice aging
        If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
            ilFound = False
            tmRvfSrchKey.iAgfCode = imAgfCode
            ilRet = btrGetEqual(hmRvf, tlRvf, imRvfRecLen, tmRvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.iAgfCode = imAgfCode)
                If (tlRvf.lInvNo = tmRvf.lRefInvNo) Then
                    ilFound = True
                    tmRvf.iAgePeriod = tlRvf.iAgePeriod
                    tmRvf.iAgingYear = tlRvf.iAgingYear
                    Exit Do
                End If
                ilRet = btrGetNext(hmRvf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If Not ilFound Then
                tmRvfSrchKey.iAgfCode = imAgfCode
                ilRet = btrGetEqual(hlPhf, tlRvf, imRvfRecLen, tmRvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.iAgfCode = imAgfCode)
                    If (tlRvf.lInvNo = tmRvf.lRefInvNo) Then
                        ilFound = True
                        tmRvf.iAgePeriod = tlRvf.iAgePeriod
                        tmRvf.iAgingYear = tlRvf.iAgingYear
                        Exit Do
                    End If
                    ilRet = btrGetNext(hlPhf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                Loop
            End If
            If Not ilFound Then
                tmRvf.iAgePeriod = month(smITranDate)
                tmRvf.iAgingYear = year(smITranDate)
            End If
        Else
            ilFound = False
            tmRvfSrchKey1.iAdfCode = imIAdfCode
            ilRet = btrGetEqual(hmRvf, tlRvf, imRvfRecLen, tmRvfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
            Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.iAdfCode = imIAdfCode)
                If (tlRvf.lInvNo = tmRvf.lRefInvNo) Then
                    ilFound = True
                    tmRvf.iAgePeriod = tlRvf.iAgePeriod
                    tmRvf.iAgingYear = tlRvf.iAgingYear
                    Exit Do
                End If
                ilRet = btrGetNext(hmRvf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            If Not ilFound Then
                tmRvfSrchKey1.iAdfCode = imIAdfCode
                ilRet = btrGetEqual(hlPhf, tlRvf, imRvfRecLen, tmRvfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.iAdfCode = imIAdfCode)
                    If (tlRvf.lInvNo = tmRvf.lRefInvNo) Then
                        ilFound = True
                        tmRvf.iAgePeriod = tlRvf.iAgePeriod
                        tmRvf.iAgingYear = tlRvf.iAgingYear
                        Exit Do
                    End If
                    ilRet = btrGetNext(hlPhf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                Loop
            End If
            If Not ilFound Then
                tmRvf.iAgePeriod = month(smITranDate)
                tmRvf.iAgingYear = year(smITranDate)
            End If
        End If
    End If
    If imType = 2 Then
        tmRvf.sCashTrade = "T"
    ElseIf imType = 4 Then
        tmRvf.sCashTrade = "M"
    ElseIf imType = 6 Then
        tmRvf.sCashTrade = "P"
   Else
        tmRvf.sCashTrade = "C"
    End If
    gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
    If tmRvf.lInvNo > 0 Then
        gPackDate smITranDate, tmRvf.iInvDate(0), tmRvf.iInvDate(1)
    Else
        gPackDate "", tmRvf.iInvDate(0), tmRvf.iInvDate(1)
    End If
    If imISSPartListIndex >= 1 Then
        'ilRet = gParseItem(Traffic!lbcUserVehicle.List(imIAirVehicleListIndex), 2, "\", slStr)
        tmRvf.iMnfGroup = tmSSPart(imISSPartListIndex - 1).iMnfGroup
    Else
        tmRvf.iMnfGroup = 0
    End If
    gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
    tmRvf.sInvoiceUndone = "N"
    tmRvf.lCode = 0
    tmRvf.iUrfCode = tgUrf(0).iCode
    tmRvf.sType = ""
    If imISSPartListIndex >= 1 Then
        '1/17/09: Added buyer
        tmRvf.iPnfBuyer = ilPnfBuyer
        If (tmSSPart(imISSPartListIndex - 1).sUpdateRVF = "N") Or (tmSSPart(imISSPartListIndex - 1).sUpdateRVF = "E") Then
            If tmRvf.sTranType = "IN" Then
                tmRvf.sTranType = "HI"
            End If
            ilRet = btrInsert(hlPhf, tmRvf, imRvfRecLen, INDEXKEY0)
        Else
            ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
        End If
    ElseIf imISSPartListIndex = 0 Then
        slTranType = tmRvf.sTranType
        gPDNToStr tmRvf.sGross, 2, slGross
        gPDNToStr tmRvf.sNet, 2, slNet
        slTax1 = gLongToStrDec(tmRvf.lTax1, 2)  '1-22-02
        slTax2 = gLongToStrDec(tmRvf.lTax2, 2)  '1-22-02
        slRunGross = ".00"
        slRunNet = ".00"
        slRunTax1 = ".00"
        slrunTax2 = ".00"
        For ilLoop = LBound(tmSSPart) To UBound(tmSSPart) - 1 Step 1
            tmRvf.lCode = 0
            tmRvf.iMnfGroup = tmSSPart(ilLoop).iMnfGroup
            If ilLoop <> UBound(tmSSPart) - 1 Then
                slPct = gIntToStrDec(tmSSPart(ilLoop).iProdPct, 2)
                slDollar = gDivStr(gMulStr(slGross, slPct), "100.00")
                slRunGross = gAddStr(slRunGross, slDollar)
                gStrToPDN slDollar, 2, 6, tmRvf.sGross
                slTaxGross = slDollar

                slDollar = gDivStr(gMulStr(slNet, slPct), "100.00")
                slRunNet = gAddStr(slRunNet, slDollar)
                gStrToPDN slDollar, 2, 6, tmRvf.sNet
                slTaxNet = slDollar
                '2-24-04
                mGetTaxAmt tmRvf.sCashTrade, tmAgf.iCode, tmAdf.iCode, tmRvf.iAirVefCode, tmRvf.iMnfItem, tmRvf.lSbfCode, slTaxGross, slTaxNet, slSlsTax, lmTax1, lmTax2
                slRunTax1 = gAddStr(slRunTax1, gLongToStrDec(lmTax1, 2))
                slrunTax2 = gAddStr(slrunTax2, gLongToStrDec(lmTax2, 2))
                tmRvf.lTax1 = lmTax1
                tmRvf.lTax2 = lmTax2
            Else
                slDollar = gSubStr(slGross, slRunGross)
                gStrToPDN slDollar, 2, 6, tmRvf.sGross
                slDollar = gSubStr(slNet, slRunNet)
                gStrToPDN slDollar, 2, 6, tmRvf.sNet
                 '1-22-02
                tmRvf.lTax1 = gStrDecToLong(gSubStr(slTax1, slRunTax1), 2)
                tmRvf.lTax2 = gStrDecToLong(gSubStr(slTax2, slrunTax2), 2)

            End If
            tmRvf.sInvoiceUndone = "N"
            '1/17/09: Added buyer
            tmRvf.iPnfBuyer = ilPnfBuyer
            If slTranType = "IN" Then
                If (tmSSPart(ilLoop).sUpdateRVF = "N") Or (tmSSPart(ilLoop).sUpdateRVF = "E") Then
                    tmRvf.sTranType = "HI"
                    ilRet = btrInsert(hlPhf, tmRvf, imRvfRecLen, INDEXKEY0)
                Else
                    tmRvf.sTranType = "IN"
                    ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                End If
            Else
                If (tmSSPart(ilLoop).sUpdateRVF = "N") Or (tmSSPart(ilLoop).sUpdateRVF = "E") Then
                    ilRet = btrInsert(hlPhf, tmRvf, imRvfRecLen, INDEXKEY0)
                Else
                    ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                End If
            End If
        Next ilLoop
    Else
        '1/17/09: Added buyer
        tmRvf.iPnfBuyer = ilPnfBuyer
        ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
    End If
    If ilRet <> BTRV_ERR_NONE Then
        mMakeInvRec = False
    Else
        mMakeInvRec = True
    End If
    'Update Agency/Advertiser
    If tmRvf.sCashTrade = "C" Then
        gPDNToStr tmRvf.sGross, 2, slGross
        gPDNToStr tmRvf.sNet, 2, slNet
        If tmRvf.iAgfCode > 0 Then
            Do
                tmAgfSrchKey.iCode = tmRvf.iAgfCode
                ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                If ilRet <> BTRV_ERR_NONE Then
                    Exit Do
                End If
                gPDNToStr tmAgf.sCurrAR, 2, slStr
                slStr = gAddStr(slStr, slNet)
                gStrToPDN slStr, 2, 6, tmAgf.sCurrAR
                gPDNToStr tmAgf.sTotalGross, 2, slStr
                slStr = gAddStr(slStr, slGross)
                gStrToPDN slStr, 2, 6, tmAgf.sTotalGross
                'tmAgf.iDateLstInv(0) = tmRvf.iTranDate(0)
                'tmAgf.iDateLstInv(1) = tmRvf.iTranDate(1)
                gPDNToStr tmAgf.sCurrAR, 2, slStr
                gPDNToStr tmAgf.sHiCredit, 2, slGross
                If gCompNumberStr(slStr, slGross) > 0 Then
                    gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                End If
                ilRet = btrUpdate(hmAgf, tmAgf, imAgfRecLen)
            Loop While ilRet = BTRV_ERR_CONFLICT
        End If
        gPDNToStr tmRvf.sGross, 2, slGross
        gPDNToStr tmRvf.sNet, 2, slNet
        Do
            tmAdfSrchKey.iCode = tmRvf.iAdfCode
            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
            If ilRet <> BTRV_ERR_NONE Then
                Exit Do
            End If
            'Test if previously updated
            'If (tmAdf.iDateLstInv(0) = tmRvf.iTranDate(0)) And (tmAdf.iDateLstInv(1) = tmRvf.iTranDate(1)) Then
            '    Exit Do
            'End If
            gPDNToStr tmAdf.sCurrAR, 2, slStr
            slStr = gAddStr(slStr, slNet)
            gStrToPDN slStr, 2, 6, tmAdf.sCurrAR
            gPDNToStr tmAdf.sTotalGross, 2, slStr
            slStr = gAddStr(slStr, slGross)
            gStrToPDN slStr, 2, 6, tmAdf.sTotalGross
            'tmAdf.iDateLstInv(0) = tmRvf.iTranDate(0)
            'tmAdf.iDateLstInv(1) = tmRvf.iTranDate(1)
            gPDNToStr tmAdf.sCurrAR, 2, slStr
            gPDNToStr tmAdf.sHiCredit, 2, slGross
            If gCompNumberStr(slStr, slGross) > 0 Then
                gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
            End If
            ilRet = btrUpdate(hmAdf, tmAdf, imAdfRecLen)
        Loop While ilRet = BTRV_ERR_CONFLICT
    End If
    ilRet = btrClose(hlPhf)
    btrDestroy hlPhf
    Screen.MousePointer = vbDefault
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mMoveAdvtRecToCtrl              *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move record values to controls *
'*                      on the screen                  *
'*                                                     *
'*******************************************************
Private Sub mMoveAdvtRecToCtrl()
'
'   mMoveRecToCtrl
'   Where:
'
    Dim slCode As String    'Sales source code number
    Dim slStr As String     'string to pass
    'look up salesperson name from code number
    smInfoCtrls(CREDITRINDEX) = ""
    smInfoCtrls(CREDITAMTINDEX) = ""
    smInfoCtrls(PHONEINDEX) = ""
    smInfoCtrls(PAYABLESINDEX) = ""
    smPnfPhoneNumber = ""
    smPnfName = ""
    mkcPhone.Text = smPhoneImage
    If (imDirectFlag) And (lbcStatAgency.ListIndex = 0) Then
        mReadPnf tmAdf.iPnfPay
    Else
        mInitInfoSetShow PAYABLESINDEX
        mInitInfoSetShow PHONEINDEX
    End If
'    If tmAdf.iSlfCode > 0 Then
'        gObtainSalespersonName tmAdf.iSlfCode, smInfoCtrls(PAYABLESINDEX)
'        smSPerson = smInfoCtrls(PAYABLESINDEX)
'        mInitInfoSetShow PAYABLESINDEX   'Show sales person name
'    Else
'        tmInfoCtrls(PAYABLESINDEX).sShow = ""
'    End If
    slCode = tmAdf.sCreditRestr
    smCreditR = slCode
    Select Case slCode
        Case "N"
            smInfoCtrls(CREDITRINDEX) = "No Restrictions"
        Case "L"
            smInfoCtrls(CREDITRINDEX) = "Credit Limit"
        Case "W"
            smInfoCtrls(CREDITRINDEX) = "Cash in Advance Weekly"
        Case "M"
            smInfoCtrls(CREDITRINDEX) = "Cash in Advance Monthly"
        Case "T"
            smInfoCtrls(CREDITRINDEX) = "Cash in Advance Quarterly"
        Case "P"
            smInfoCtrls(CREDITRINDEX) = "Prohibit New Orders"
        Case Else
            smInfoCtrls(CREDITRINDEX) = ""
    End Select
    mInitInfoSetShow CREDITRINDEX  'Show credit rating

    slStr = ""
    If tmAdf.sCreditRestr = "L" Then
        'gPDNToStr tmAdf.sCreditLimit, 2, slStr
        slStr = gLongToStrDec(tmAdf.lCreditLimit, 2)
        smInfoCtrls(CREDITAMTINDEX) = slStr
    Else
        smInfoCtrls(CREDITAMTINDEX) = ""
    End If
    mInitInfoSetShow CREDITAMTINDEX  'Show credit amount
    smInfoCtrls(PAYRATEINDEX) = ""
    slCode = tmAdf.sPaymRating
    smPayR = slCode
    Select Case slCode
        Case "0"
            smInfoCtrls(PAYRATEINDEX) = "Quick"
        Case "1"
            smInfoCtrls(PAYRATEINDEX) = "Normal"
        Case "2"
            smInfoCtrls(PAYRATEINDEX) = "Slow"
        Case "3"
            smInfoCtrls(PAYRATEINDEX) = "Difficult"
        Case "4"
            smInfoCtrls(PAYRATEINDEX) = "In Collection"
        Case Else
            smInfoCtrls(PAYRATEINDEX) = ""
    End Select
    mInitInfoSetShow PAYRATEINDEX  'Show payment rating
'    gSetPhoneNo tmAdf.sPhone, mkcPhone
'    mInitInfoSetShow PHONEINDEX  'Show phone number
    'Format information fields
    'gPDNToStr tmAdf.sPct90, 0, slStr
    slStr = gIntToStrDec(tmAdf.iPct90, 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, smS4Info(OVR90INDEX)
    gPDNToStr tmAdf.sCurrAR, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(CURARINDEX)
    gPDNToStr tmAdf.sUnbilled, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(UNBILLINDEX)
    gPDNToStr tmAdf.sHiCredit, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(HIARINDEX)
    gPDNToStr tmAdf.sTotalGross, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(TGROSSINDEX)
    gUnpackDate tmAdf.iDateEntrd(0), tmAdf.iDateEntrd(1), smS4Info(TGDATEINDEX)
    smS4Info(NSFINDEX) = Trim$(str$(tmAdf.iNSFChks))
    gUnpackDate tmAdf.iDateLstInv(0), tmAdf.iDateLstInv(1), smS4Info(LBILLINDEX)
    gUnpackDate tmAdf.iDateLstPaym(0), tmAdf.iDateLstPaym(1), smS4Info(LPAYINDEX)
    smS4Info(AVGPAYINDEX) = Trim$(str$(tmAdf.iAvgToPay))
    smS4Info(DAYSLPAYINDEX) = Trim$(str$(tmAdf.iLstToPay))
    mS4SetShow  'Show info fields

    Exit Sub

    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMoveAgencyRecToCtrl            *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move record values to controls *
'*                      on the screen                  *
'*                                                     *
'*******************************************************
Private Sub mMoveAgencyRecToCtrl()
'
'   mMoveAgencyRecToCtrl
'   Where:
'
    Dim slCode As String    'Sales source code number
    Dim slStr As String     'string to pass

    'look up salesperson name from code number
    smInfoCtrls(CREDITRINDEX) = ""
    smInfoCtrls(CREDITAMTINDEX) = ""
    smInfoCtrls(PAYRATEINDEX) = ""
    smInfoCtrls(PAYABLESINDEX) = ""
'    smSPerson = ""
'    If tmAgf.iSlfCode > 0 Then
'        gObtainSalespersonName tmAgf.iSlfCode, smInfoCtrls(PAYABLESINDEX)
'        smSPerson = smInfoCtrls(PAYABLESINDEX)
'        mInitInfoSetShow PAYABLESINDEX    'Show sales person name
'    Else
'        tmInfoCtrls(PAYABLESINDEX).sShow = ""
'    End If
    mReadPnf tmAgf.iPnfPay

    slCode = tmAgf.sCreditRestr
    smCreditR = slCode
    Select Case slCode
        Case "N"
            smInfoCtrls(CREDITRINDEX) = "No Restrictions"
        Case "L"
            smInfoCtrls(CREDITRINDEX) = "Credit Limit"
        Case "W"
            smInfoCtrls(CREDITRINDEX) = "Cash in Advance Weekly"
        Case "M"
            smInfoCtrls(CREDITRINDEX) = "Cash in Advance Monthly"
        Case "T"
            smInfoCtrls(CREDITRINDEX) = "Cash in Advance Quarterly"
        Case "P"
            smInfoCtrls(CREDITRINDEX) = "Prohibit New Orders"
        Case Else
            smInfoCtrls(CREDITRINDEX) = ""
    End Select
    mInitInfoSetShow CREDITRINDEX  'Show credit rating

    slStr = ""
    If tmAgf.sCreditRestr = "L" Then
        'gPDNToStr tmAgf.sCreditLimit, 2, slStr
        slStr = gLongToStrDec(tmAgf.lCreditLimit, 2)
        smInfoCtrls(CREDITAMTINDEX) = slStr
    Else
        smInfoCtrls(CREDITAMTINDEX) = ""
    End If
    mInitInfoSetShow CREDITAMTINDEX  'Show credit amount
    slCode = tmAgf.sPaymRating
    smPayR = slCode
    Select Case slCode
        Case "0"
            smInfoCtrls(PAYRATEINDEX) = "Quick"
        Case "1"
            smInfoCtrls(PAYRATEINDEX) = "Normal"
        Case "2"
            smInfoCtrls(PAYRATEINDEX) = "Slow"
        Case "3"
            smInfoCtrls(PAYRATEINDEX) = "Difficult"
        Case "4"
            smInfoCtrls(PAYRATEINDEX) = "In Collection"
        Case Else
            smInfoCtrls(PAYRATEINDEX) = ""
    End Select
    mInitInfoSetShow PAYRATEINDEX  'Show payment rating
'    smInfoCtrls(PHONEINDEX) = ""
'    gSetPhoneNo tmAgf.sPhone, mkcPhone
'    mInitInfoSetShow PHONEINDEX  'Show phone number
    'Format information fields
    'gPDNToStr tmAgf.sPct90, 0, slStr
    slStr = gIntToStrDec(tmAgf.iPct90, 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTPERCENTSIGN, 0, smS4Info(OVR90INDEX)
    gPDNToStr tmAgf.sCurrAR, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(CURARINDEX)
    gPDNToStr tmAgf.sUnbilled, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(UNBILLINDEX)
    gPDNToStr tmAgf.sHiCredit, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(HIARINDEX)
    gPDNToStr tmAgf.sTotalGross, 2, slStr
    slStr = gRoundStr(slStr, "1.00", 0)
    gFormatStr slStr, FMTLEAVEBLANK + FMTCOMMA + FMTDOLLARSIGN, 0, smS4Info(TGROSSINDEX)
    gUnpackDate tmAgf.iDateEntrd(0), tmAgf.iDateEntrd(1), smS4Info(TGDATEINDEX)
    smS4Info(NSFINDEX) = Trim$(str$(tmAgf.iNSFChks))
    gUnpackDate tmAgf.iDateLstInv(0), tmAgf.iDateLstInv(1), smS4Info(LBILLINDEX)
    gUnpackDate tmAgf.iDateLstPaym(0), tmAgf.iDateLstPaym(1), smS4Info(LPAYINDEX)
    smS4Info(AVGPAYINDEX) = Trim$(str$(tmAgf.iAvgToPay))
    smS4Info(DAYSLPAYINDEX) = Trim$(str$(tmAgf.iLstToPay))
    mS4SetShow  'Show info fields

    Exit Sub

    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPopAction                      *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Action list box       *
'*                                                     *
'*******************************************************
Private Sub mPopAction()
    lbcAction.Clear
    If (imType = 0) And (imAgencyFlag = 0) Then    'Cash by agency
        lbcAction.AddItem "Ageing"
        lbcAction.AddItem "Post Cash"
        lbcAction.AddItem "Apply On Account"
        lbcAction.AddItem "Transfers"
        lbcAction.AddItem "Reversals"
        lbcAction.AddItem "Returned Checks"
        lbcAction.AddItem "Redeposit Checks"
        'lbcAction.AddItem "Writeoffs"
        lbcAction.AddItem "Journal Entries"
        lbcAction.AddItem "Invoices"
        lbcAction.AddItem "Invoice Adjustments"
        If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) = INSTALLMENT Then
            If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENTREVENUEEARNED) = INSTALLMENTREVENUEEARNED Then
                lbcAction.AddItem "Revenue Adjustment"
            End If
        End If
    ElseIf (imType = 0) And (imAgencyFlag = 1) Then    'Cash by advertiser
        lbcAction.AddItem "Ageing"
    ElseIf (imType = 1) And (imAgencyFlag = 0) Then 'Cash history
        lbcAction.AddItem "View"
        lbcAction.AddItem "Restore"
    ElseIf (imType = 1) And (imAgencyFlag = 1) Then 'Cash history
        lbcAction.AddItem "View"
    ElseIf ((imType = 2) Or (imType = 4) Or (imType = 6)) And (imAgencyFlag = 0) Then    'Trade by agency
        lbcAction.AddItem "Ageing"
        If imType = 2 Then
            lbcAction.AddItem "Post Trade Usage"
        ElseIf imType = 4 Then
            lbcAction.AddItem "Post Merchandising"
        ElseIf imType = 6 Then
            lbcAction.AddItem "Post Promotion"
        End If
        lbcAction.AddItem "Apply On Account"
        lbcAction.AddItem "Transfers"
        lbcAction.AddItem "Reversals"
        'lbcAction.AddItem "Writeoffs"
        lbcAction.AddItem "Journal Entries"
        lbcAction.AddItem "Invoices"
        lbcAction.AddItem "Invoice Adjustments"
        If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENT) = INSTALLMENT Then
            If (Asc(tgSpf.sUsingFeatures6) And INSTALLMENTREVENUEEARNED) = INSTALLMENTREVENUEEARNED Then
                lbcAction.AddItem "Revenue Adjustment"
            End If
        End If
    ElseIf ((imType = 2) Or (imType = 4) Or (imType = 6)) And (imAgencyFlag = 1) Then    'Trade by advertiser
        lbcAction.AddItem "Ageing"
    ElseIf ((imType = 3) Or (imType = 5) Or (imType = 7)) And (imAgencyFlag = 0) Then 'Trade history
        lbcAction.AddItem "View "
        lbcAction.AddItem "Restore"
    ElseIf ((imType = 3) Or (imType = 5) Or (imType = 7)) And (imAgencyFlag = 1) Then 'Trade history
        lbcAction.AddItem "View "
    'ElseIf (imType = 8) And (imAgencyFlag = 0) Then
    '    lbcAction.AddItem "Adjustment"
    'ElseIf (imType = 8) And (imAgencyFlag = 1) Then
    '    lbcAction.AddItem "View"
    End If
'    lbcAction.ListIndex = 0 'Initial setting
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPopulate                       *
'*                                                     *
'*             Created:6/4/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate list box              *
'*                      if requireds                   *
'*                                                     *
'*******************************************************
Private Sub mPopulate()
'
'   mPopulate
'   Where:
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim slName As String
    Dim ilIndex As Integer
    Dim slSort As String
    Dim ilLen As Integer
    If imSortListIndex < 0 Then
        'If cbcSort.Enabled Then
        '    cbcSort.SetFocus
        'Else
            cmcCancel.SetFocus
        'End If
        Exit Sub
    End If
    '5/28/04: Don't re-populate unless sort type changed.  Help speed-up when different Agy or Advt is to be selected
    'This eliminates the re-opopulation when ever agy or advt changed (which happens each time contract saves or collection posted)
    If imSvSortListIndex = imSortListIndex Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ilIndex = imSelectedIndex
    If ilIndex >= 0 Then
        slName = cbcSelection.List(ilIndex)
    End If
    imSvSortListIndex = imSortListIndex
    'Repopulate if required- if agency changed by another user while in this screen
'    ilRet = gPopAgyBox(Collect, cbcSelection, Traffic!lbcAgency)
    If imSortListIndex <= 7 Then
        slSort = Chr$(Asc("A") + imSortListIndex)
        ilRet = gPopAgyCollectBox(Collect, slSort, cbcSelection, lbcSelectionCode)
    ElseIf imSortListIndex <= 11 Then
        If edcCommentDate.Text = "" Then
            Beep
            edcCommentDate.SetFocus
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        slStr = edcCommentDate.Text
        If Not gValidDate(slStr) Then
            Beep
            edcCommentDate.SetFocus
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        slSort = Chr$(Asc("A") + imSortListIndex - 8)
        ilRet = gPopCommentCollectBox(Collect, "AGF", slSort, slStr, cbcSelection, lbcSelectionCode)
    ElseIf imSortListIndex <= 19 Then
        slSort = Chr$(Asc("A") + imSortListIndex - 12)
        ilRet = gPopAdvtCollectBox(Collect, slSort, cbcSelection, lbcSelectionCode)
    Else
        If edcCommentDate.Text = "" Then
            Beep
            edcCommentDate.SetFocus
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        slStr = edcCommentDate.Text
        If Not gValidDate(slStr) Then
            Beep
            edcCommentDate.SetFocus
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        slSort = Chr$(Asc("A") + imSortListIndex - 20)
        ilRet = gPopCommentCollectBox(Collect, "ADF", slSort, slStr, cbcSelection, lbcSelectionCode)
    End If
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mPopulateErr
        gCPErrorMsg ilRet, "mPopulate (gPopCollectionBox)", Collect
        On Error GoTo 0
'        cbcSelection.AddItem "[New]", 0  'Force as first item on list
        imChgMode = True
        'Since records are not added, then index is still valid
        If ilIndex >= 0 Then
            ilLen = InStr(slName, " $")
            gFindPartialMatch slName, 1, ilLen, cbcSelection
            If gLastFound(cbcSelection) >= 0 Then
                cbcSelection.ListIndex = gLastFound(cbcSelection)
            Else
                cbcSelection.ListIndex = -1
            End If
        Else
            cbcSelection.ListIndex = ilIndex
        End If
        imChgMode = False
    End If
    'If (cbcSelection.ListIndex < 0) And (cbcSelection.ListCount > 0) Then
    If (imSelectedIndex < 0) And (cbcSelection.ListCount > 0) Then
        If cbcSelection.ListCount = 1 Then
            ''imChgMode = True
            'cbcSelection.ListIndex = 0
            ''imChgMode = False
        End If
    End If
    Screen.MousePointer = vbDefault
    Exit Sub
mPopulateErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mProdBranch                     *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      advertiser product and process *
'*                      communication back from        *
'*                      advertiser product             *
'*                                                     *
'*                                                     *
'*  General flow: pbc--Tab calls this function which   *
'*                initiates a task as a MODAL form.    *
'*                This form and the control loss focus *
'*                When the called task terminates two  *
'*                events are generated (Form activated;*
'*                GotFocus to pbc-Tab).  Also, control *
'*                is sent back to this function (the   *
'*                GotFocus event is initiated after    *
'*                this function finishes processing)   *
'*                                                     *
'*******************************************************
Private Function mProdBranch() As Integer
'
'   ilRet = mProdBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
'    If imSelectedIndex = 0 Then 'New selected
'        imDoubleClickName = False
'        mProdBranch = False
'        Exit Function
'    End If
    If (Not imDoubleClickName) And (edcDropDown.Text <> "[New]") Then
        imDoubleClickName = False
        mProdBranch = False
        Exit Function
    End If
    'If Not gWinRoom(igNoExeWinRes(ADVTPRODEXE)) Then
    '    imDoubleClickName = False
    '    mProdBranch = True
    '    mEnableBox imBoxNo
    '    Exit Function
    'End If
    'Screen.MousePointer = vbHourglass  'Wait
    igAdvtProdCallSource = CALLSOURCECOLLECT
    sgAdvtProdName = lbcAdvertiser.List(lbcAdvertiser.ListIndex)
    If edcDropDown.Text = "[New]" Then
        sgAdvtProdName = sgAdvtProdName & "\" & " "
    Else
        sgAdvtProdName = sgAdvtProdName & "\" & Trim$(edcDropDown.Text)
    End If
    ilUpdateAllowed = imUpdateAllowed
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
        If igTestSystem Then
            slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
        Else
            slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
        End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Collect^Test^NOHELP\" & sgUserName & "\" & Trim$(Str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
    '    Else
    '        slStr = "Collect^Prod^NOHELP\" & sgUserName & "\" & Trim$(Str$(igAdvtProdCallSource)) & "\" & sgAdvtProdName
    '    End If
    'End If
    'lgShellRet = Shell(sgExePath & "AdvtProd.Exe " & slStr, 1)
    'Collect.Enabled = False
    'Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    sgCommandStr = slStr
    AdvtProd.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgAdvtProdName)
    igAdvtProdCallSource = Val(sgAdvtProdName)
    ilParse = gParseItem(slStr, 2, "\", sgAdvtProdName)
    'Collect.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'Screen.MousePointer = vbDefault    'Default
    imDoubleClickName = False
    mProdBranch = True
    imUpdateAllowed = ilUpdateAllowed
    'If imUpdateAllowed = False Then
    '    mSendHelpMsg "BF"
    'Else
    '    mSendHelpMsg "BT"
    'End If
    gShowBranner imUpdateAllowed
    If igAdvtProdCallSource = CALLDONE Then  'Done
        igAdvtProdCallSource = CALLNONE
'        gSetMenuState True
        lbcProd.Clear
        smProdCodeTag = ""
        mProdPop    'imAdfCode
        If imTerminate Then
            mProdBranch = False
            Exit Function
        End If
        gFindMatch sgAdvtProdName, 1, lbcProd
        If gLastFound(lbcProd) > 0 Then
            imChgMode = True
            lbcProd.ListIndex = gLastFound(lbcProd)
            edcDropDown.Text = lbcProd.List(lbcProd.ListIndex)
            smIProduct = edcDropDown.Text
            imChgMode = False
            mProdBranch = False
            'mSetChg PRODUCTINDEX
        Else
            imChgMode = True
            lbcProd.ListIndex = -1
            edcDropDown.Text = sgAdvtProdName
            smIProduct = edcDropDown.Text
            imChgMode = False
            'mSetChg PRODUCTINDEX
            edcDropDown.SetFocus
            sgAdvtProdName = ""
            Exit Function
        End If
        sgAdvtProdName = ""
    End If
    If igAdvtProdCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igAdvtProdCallSource = CALLNONE
        sgAdvtProdName = ""
        mEnableBox imBoxNo
        Exit Function
    End If
    If igAdvtProdCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igAdvtProdCallSource = CALLNONE
        sgAdvtProdName = ""
        mEnableBox imBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mProdPop                        *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate advertiser product    *
'*                      list box if required           *
'*                                                     *
'*******************************************************
Private Sub mProdPop()
'
'   mProdPop
'   Where:
'       imAdfCode (I)- Adsvertiser code value
'
    Dim ilRet As Integer
    Dim slName As String
    Dim ilIndex As Integer
    ilIndex = lbcProd.ListIndex
    If ilIndex > 0 Then
        slName = lbcProd.List(ilIndex)
    End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopAdvtProdBox(Collect, imIAdfCode, lbcProd, lbcProdCode)
    ilRet = gPopAdvtProdBox(Collect, imIAdfCode, lbcProd, tmProdCode(), smProdCodeTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mProdPopErr
        gCPErrorMsg ilRet, "mProdPop (gIMoveListBox)", Collect
        On Error GoTo 0
        lbcProd.AddItem "[None]", 0  'Force as first item on list
'            lbcProd.AddItem "[New]", 0  'Force as first item on list
        imChgMode = True
        If ilIndex > 0 Then
            gFindMatch slName, 1, lbcProd
            If gLastFound(lbcProd) > 0 Then
                lbcProd.ListIndex = gLastFound(lbcProd)
            Else
                lbcProd.ListIndex = -1
            End If
        Else
            lbcProd.ListIndex = ilIndex
        End If
        imChgMode = False
    End If
    Exit Sub
mProdPopErr:
    On Error GoTo 0
    imTerminate = True
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mReadAdfOrAgf                   *
'*                                                     *
'*             Created:6/4/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read adf or agf for transaction*
'*                                                     *
'*******************************************************
Private Sub mReadAdfOrAgf()
    Dim ilRet As Integer
    If (imAgencyFlag = 1) Or imDirectFlag Then 'advertiser
        If (tmRvf.iAgfCode <> 0) Then   'And (tmAgf.iCode <> tmRvf.iAgfCode) Then
            tmAgfSrchKey.iCode = tmRvf.iAgfCode
            ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
            If ilRet <> BTRV_ERR_NONE Then
                tmAgf.iCode = 0
            End If
        Else
            tmAgf.iCode = 0
        End If
    Else
        If (tmRvf.iAdfCode <> 0) Then   'And (tmAdf.iCode <> tmRvf.iAdfCode) Then
            tmAdfSrchKey.iCode = tmRvf.iAdfCode
            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
            If ilRet <> BTRV_ERR_NONE Then
                tmAdf.iCode = 0
            End If
        Else
            tmAdf.iCode = 0
        End If
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mReadAdfRec                     *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read an ADF record             *
'*                                                     *
'*******************************************************
Private Function mReadAdfRec() As Integer
'
'   iRet = mReadAdfRec()
'   Where:
'       iRet (O)- True if record read,
'                 False if not read
'
    Dim slNameCode As String  'List string name and Code
    Dim slCode As String    'Code number- so record can be found
    Dim ilRet As Integer    'Return status
    imAdfFlag = False
    mReadAdfRec = False 'Initialize to false
    If imSortListIndex >= 0 Then
        slNameCode = lbcSelectionCode.List(imSelectedIndex)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        slCode = Trim$(slCode)
        tmAdfSrchKey.iCode = CInt(slCode)
        imAdfCode = CInt(slCode)
        ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        On Error GoTo mReadAdfRecErr
        gBtrvErrorMsg ilRet, "mReadAdfRec (btrGetEqual)", Collect
        On Error GoTo 0
        ilRet = btrGetPosition(hmAdf, lmAdfRecPos)
        mReadAdfRec = True
        imAdfFlag = True
        'mMoveRecToCtrl
    End If

    Exit Function
mReadAdfRecErr:
    On Error GoTo 0
    mReadAdfRec = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mReadAgfRec                     *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read an AGF record             *
'*                                                     *
'*******************************************************
Private Function mReadAgfRec() As Integer
'
'   iRet = mReadAgfRec()
'   Where:
'       iRet (O)- True if record read,
'                 False if not read
'
    Dim slNameCode As String  'Code and Code strings
    Dim slCode As String    'Code number- so record can be found
    Dim ilRet As Integer    'Return status
    imAgfFlag = False
    mReadAgfRec = False     'Initialize to false
    If imSortListIndex >= 0 Then
        slNameCode = lbcSelectionCode.List(imSelectedIndex)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        slCode = Trim$(slCode)
        tmAgfSrchKey.iCode = CInt(slCode)
        imAgfCode = CInt(slCode)
        ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        On Error GoTo mReadAgfRecErr
        gBtrvErrorMsg ilRet, "mReadAgfRec (btrGetEqual)", Collect
        On Error GoTo 0
        ilRet = btrGetPosition(hmAgf, lmAgfRecPos)
        mReadAgfRec = True
        imAgfFlag = True
        'mMoveRecToCtrl
    End If

    Exit Function
mReadAgfRecErr:
    On Error GoTo 0
    mReadAgfRec = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mReadRVFPHF                     *
'*                                                     *
'*             Created:5/11/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read an Rvf or Phf records     *
'*                                                     *
'*******************************************************
Private Function mReadRVFPHF(ilSortOnly As Integer) As Integer
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  tlDateTypeBuff                                                                        *
'******************************************************************************************

    Dim ilRet As Integer
    Dim llRecCount As Long
    Dim ilLoop As Integer    'Number of loops
    Dim llLoop As Long
    Dim ilCode As Integer       'Agency or Advertiser code
    Dim slType As String        'vehicle type
    Dim slTotal As String     'Total amount
    Dim ilColNo As Integer
    Dim llRowNo As Long
    Dim slStr As String
    Dim ilFound As Integer
    Dim llVal As Long
    Dim llRecPos As Long
    Dim slNet As String
    Dim slInvNet As String  'Net amount for an invoice
    Dim slInvGross As String  'Net amount for an invoice
    Dim llLastInvNo As Long 'Last invoice number
    Dim ilLastANo As Integer
    Dim slCode As String
    Dim ilCashTrade As Integer
    Dim slDate As String
    Dim llAgingMonth As Long
    Dim llNowAgingMonth As Long
    Dim slName As String
    Dim slSvStr As String
    Dim ilInc As Integer
    Dim ilRecFound As Integer
    Dim ilPart As Integer
    Dim ilNTR As Integer
    Dim llNetPlusTax As Long  '1-16-02
    Dim ilTeam As Integer
    Dim llRow As Long

    ReDim slAgingTotal(0 To 6) As String
    lmRowCountMax = 0
    If lbcAction.ListIndex < 0 Then
        mReadRVFPHF = True
        Exit Function
    End If
    mReadRVFPHF = False
    llRecCount = 0
    ilRecFound = False
    slTotal = "0.00"
    slInvNet = "0.00"
    slInvGross = "0.00"
    llLastInvNo = -1
    ilLastANo = -1
    If (imType = 0) Or (imType = 1) Then
        ilCashTrade = 0     'Cash
    ElseIf (imType = 2) Or (imType = 3) Then
        ilCashTrade = 1     'Trade
    ElseIf (imType = 4) Or (imType = 5) Then
        ilCashTrade = 2     'Merchandising
    ElseIf (imType = 6) Or (imType = 7) Then
        ilCashTrade = 3     'Promotion
    ElseIf imType = 8 Then
        ilCashTrade = 4
    End If
    If Not ilSortOnly Then
        If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
            ilRet = gPopAgyTransactionBox(Collect, hmRvf, hmCHF, imAgfCode, ilCashTrade, tgTransactionCode(), sgTransactionCodeTag, imHistory)   'lbcTransactionCode)
        Else  'advertiser
            slStr = cbcSelection.Text
            If InStr(1, slStr, "Non-Payee", vbTextCompare) > 0 Then
                ilRet = gPopAdvtTransactionBox(Collect, hmRvf, hmCHF, imAdfCode, ilCashTrade, tgTransactionCode(), sgTransactionCodeTag, True, imHistory)   'lbcTransactionCode)
            Else
                ilRet = gPopAdvtTransactionBox(Collect, hmRvf, hmCHF, imAdfCode, ilCashTrade, tgTransactionCode(), sgTransactionCodeTag, False, imHistory)   'lbcTransactionCode)
            End If
        End If
    End If
    If imCollectIndex = 1 Then
        If Not ilSortOnly Then
            If imTranSort = 1 Then
                imTranSort = 0
                mTranSort 1
            End If
        Else
            If imTranSort = 1 Then
                mTranSort 0
            Else
                mTranSort 1
            End If
        End If
    Else
        imTranSort = 0
    End If
    For ilLoop = LBONE To 6 Step 1
        slAgingTotal(ilLoop) = ""
    Next ilLoop
    slDate = Format$(gNow(), "m/d/yy")
    slDate = gAdjYear(slDate)
    llNowAgingMonth = 12 * (year(slDate) - 1970) + month(slDate)
    'For ilLoop = 0 To lbcTransactionCode.ListCount - 1 Step 1
    For llLoop = 0 To UBound(tgTransactionCode) - 1 Step 1
        ilFound = True
        'ilRet = gParseItem(lbcTransactionCode.List(ilLoop), 2, "\", slCode)
        ilRet = gParseItem(tgTransactionCode(llLoop).sKey, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            llRecPos = Val(slCode)
            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet <> BTRV_ERR_NONE Then
                ilFound = False
            End If
        Else
            ilFound = False
        End If
        If ilFound Then
            ilRecFound = True
            mReadRVFPHF = True
            ilInc = True
            If imCollectIndex = 8 Then  'Ageing
                'If ilLastANo <> -1 Then
                '    If imAgencyFlag = 0 Then 'agency
                '        If ilLastANo = tmRvf.iAdfCode Then
                '            ilInc = False
                '        End If
                '    ElseIf imAgencyFlag = 1 Then 'advertiser
                '        If ilLastANo = tmRvf.iAgfCode Then
                '            ilInc = False
                '        End If
                '    End If
                'End If
                If imAgeingShow = 0 Then
                    ilInc = False
                End If
            End If
            If ilInc Then
                llRecCount = llRecCount + 1
                lmRowCountMax = lmRowCountMax + 1
                If llRecCount > lmRowCount Then
                    ReDim Preserve smShow(0 To imColCount, 0 To llRecCount + 1000) As String * 40
                    ReDim Preserve smSave(0 To 23, 0 To llRecCount + 1000) As String * 43
                    ReDim Preserve lmSave(0 To 3, 0 To llRecCount + 1000) As Long
                    ReDim Preserve lmNTRSbfCode(0 To llRecCount + 1000) As Long       '2-24-04
                    ReDim Preserve imBacklogTrfCode(0 To llRecCount + 1000) As Integer

                    ReDim Preserve smTranComment(0 To llRecCount + 1000) As String
                    ReDim Preserve smItemComment(0 To llRecCount + 1000) As String
                    For llRow = llRecCount To llRecCount + 1000 Step 1
                        For ilColNo = 1 To imColCount Step 1      'Clear control arrays
                            smShow(ilColNo, llRow) = ""
                        Next ilColNo
                        For ilColNo = LBound(smSave, 1) To UBound(smSave, 1) Step 1      'Clear control arrays
                            smSave(ilColNo, llRow) = ""
                        Next ilColNo
                        lmSave(1, llRow) = 0
                        lmSave(2, llRow) = 0
                        lmSave(3, llRow) = 0
                        lmNTRSbfCode(llRow) = 0       '2-24-04
                        imBacklogTrfCode(llRow) = 0
                        smTranComment(llRow) = ""
                        smItemComment(llRow) = ""
                    Next llRow
                    lmRowCount = lmRowCount + 1000
                End If
            End If
            Select Case imCollectIndex
                Case 8
                    ilColNo = ADVTAGENCY    '1
                    llRowNo = llRecCount
                    If (imAgencyFlag = 0) And (Not imDirectFlag) Then 'agency
                        ilCode = tmRvf.iAdfCode
                        If ilCode <> 0 Then
                            slStr = mGetAdvtName(ilCode, True)
                        Else
                            slStr = "on Account"
                        End If
                    ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then 'advertiser
                        If (imDirectFlag) Then
                            ilCode = tmRvf.iAdfCode
                            If ilCode <> 0 Then
                                slStr = mGetAdvtName(ilCode, True)
                            Else
                                slStr = "on Account"
                            End If
                        Else
                            ilCode = tmRvf.iAgfCode
                            slStr = mGetAgyName(ilCode, True)
                        End If
                    End If
                    If ilLastANo = -1 Then
                        ilLastANo = ilCode
                    Else
                        If ilLastANo <> ilCode Then
                            slSvStr = slStr
                            If imAgeingShow = 0 Then
                                llRecCount = llRecCount + 1
                                lmRowCountMax = lmRowCountMax + 1
                                If llRecCount > lmRowCount Then
                                    ReDim Preserve smShow(0 To imColCount, 0 To llRecCount + 1000) As String * 40
                                    ReDim Preserve smSave(0 To 23, 0 To llRecCount + 1000) As String * 43
                                    ReDim Preserve lmSave(0 To 3, 0 To llRecCount + 1000) As Long
                                    ReDim Preserve lmNTRSbfCode(0 To llRecCount + 1000) As Long       '2-24-04
                                    ReDim Preserve imBacklogTrfCode(0 To llRecCount + 1000) As Integer

                                    ReDim Preserve smTranComment(0 To llRecCount + 1000) As String
                                    ReDim Preserve smItemComment(0 To llRecCount + 1000) As String
                                    For llRow = llRecCount To llRecCount + 1000 Step 1
                                        For ilColNo = 1 To imColCount Step 1      'Clear control arrays
                                            smShow(ilColNo, llRow) = ""
                                        Next ilColNo
                                        For ilColNo = LBound(smSave, 1) To UBound(smSave, 1) Step 1      'Clear control arrays
                                            smSave(ilColNo, llRow) = ""
                                        Next ilColNo
                                        lmSave(1, llRow) = 0
                                        lmSave(2, llRow) = 0
                                        lmSave(3, llRow) = 0
                                        lmNTRSbfCode(llRow) = 0           '2-24-04
                                        imBacklogTrfCode(llRow) = 0
                                        smTranComment(llRow) = ""
                                        smItemComment(llRow) = ""
                                    Next llRow
                                    lmRowCount = llRecCount + 1000
                                End If
                            End If
                            llRowNo = llRecCount
                            ilColNo = ADVTAGENCY    '1
                            gSetShow pbcCollect(imCollectIndex), slName, tmTransCtrls(ilColNo)
                            smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                            ilColNo = INVOICENO '2
                            For ilColNo = 2 To 7 Step 1
                                gFormatStr slAgingTotal(ilColNo - 1), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                                smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                            Next ilColNo
                            For ilColNo = LBONE To 6 Step 1
                                slAgingTotal(ilColNo) = ""
                            Next ilColNo
                            ilLastANo = ilCode
                            If imAgeingShow <> 0 Then
                                llRecCount = llRecCount + 1
                                lmRowCountMax = lmRowCountMax + 1
                                If llRecCount > lmRowCount Then
                                    ReDim Preserve smShow(0 To imColCount, 0 To llRecCount + 1000) As String * 40
                                    ReDim Preserve smSave(0 To 23, 0 To llRecCount + 1000) As String * 43
                                    ReDim Preserve lmNTRSbfCode(0 To llRecCount + 1000) As Long       '2-24-04
                                    ReDim Preserve imBacklogTrfCode(0 To llRecCount + 1000) As Integer
                                    ReDim Preserve lmSave(0 To 3, 0 To llRecCount + 1000) As Long

                                    ReDim Preserve smTranComment(0 To llRecCount + 1000) As String
                                    ReDim Preserve smItemComment(0 To llRecCount + 1000) As String
                                    For llRow = llRecCount To llRecCount + 1000 Step 1
                                        For ilColNo = 1 To imColCount Step 1      'Clear control arrays
                                            smShow(ilColNo, llRow) = ""
                                        Next ilColNo
                                        For ilColNo = LBound(smSave, 1) To UBound(smSave, 1) Step 1      'Clear control arrays
                                            smSave(ilColNo, llRow) = ""
                                        Next ilColNo
                                        lmSave(1, llRow) = 0
                                        lmSave(2, llRow) = 0
                                        lmSave(3, llRow) = 0
                                        lmNTRSbfCode(llRow) = 0           '2-24-04
                                        imBacklogTrfCode(llRow) = 0
                                        smTranComment(llRow) = ""
                                        smItemComment(llRow) = ""
                                    Next llRow
                                    lmRowCount = llRecCount + 1000
                                End If
                                llRowNo = llRecCount
                            End If
                            slStr = slSvStr
                        End If
                    End If
                    slName = slStr  'Save name- as summary is done after change of invoice #
                    ilColNo = ADVTAGENCY    '1
                    If imAgeingShow <> 0 Then   '0=By Advertiser; 1=By Invoice  '0=Summary; 1=Detail
                        'Save values to be displayed within pop-up box
                        If tmRvf.lInvNo > 0 Then
                            smSave(1, llRowNo) = CStr(tmRvf.lInvNo)
                        Else
                            smSave(1, llRowNo) = ""
                        End If
                        ilCode = tmRvf.iAirVefCode
                        If ilCode > 0 Then
                            mObtainVehicleName ilCode, slStr, slType
                        Else
                            slStr = ""
                        End If
                        smSave(11, llRowNo) = Trim$(slStr)
                        ilCode = tmRvf.iBillVefCode
                        If ilCode > 0 Then
                            mObtainVehicleName ilCode, slStr, slType
                        Else
                            slStr = ""
                        End If
                        smSave(2, llRowNo) = Trim$(slStr)
                        smSave(10, llRowNo) = Trim$(slStr)
                        'Participant
                        slStr = ""
                        For ilPart = LBound(tmHMnf) To UBound(tmHMnf) - 1 Step 1
                            If tmHMnf(ilPart).iCode = tmRvf.iMnfGroup Then
                                slStr = tmHMnf(ilPart).sName
                                Exit For
                            End If
                        Next ilPart
                        smSave(12, llRowNo) = Trim$(slStr)
                        llVal = tmRvf.lCntrNo
                        If llVal > 0 Then
                            smSave(3, llRowNo) = Trim$(str$(llVal))   'mGetCntNo(llVal)
                        Else
                            smSave(3, llRowNo) = ""
                        End If
                        '6/7/15: Change check number to string
                        'If tmRvf.lCheckNo > 0 Then
                        '    smSave(4, llRowNo) = Trim$(str$(tmRvf.lCheckNo))
                        'Else
                        '    smSave(4, llRowNo) = ""
                        'End If
                        smSave(4, llRowNo) = Trim$(tmRvf.sCheckNo)
                        If smSave(4, llRowNo) = "0" Then
                            smSave(4, llRowNo) = ""
                        End If
                        gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slStr
                        smSave(5, llRowNo) = Trim$(slStr)
                        gUnpackDate tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1), slStr
                        smSave(15, llRowNo) = Trim$(slStr)
                        mObtainSalespersonName tmRvf.iSlfCode, slStr
                        smSave(16, llRowNo) = slStr
                        smSave(17, llRowNo) = ""
                        smSave(6, llRowNo) = Trim$(tmRvf.sTranType)
                        smSave(7, llRowNo) = Trim$(tmRvf.sAction)
                        slStr = Trim$(tmRvf.sTranType)
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                        smShow(ilColNo, llRowNo) = "  " & tmTransCtrls(ilColNo).sShow
                        If tmRvf.iPkLineNo > 0 Then
                            smSave(9, llRowNo) = Trim$(str$(tmRvf.iPkLineNo))
                        Else
                            smSave(9, llRowNo) = "N"
                        End If
                        'If (tmRvf.iMnfItem > 0) And (tmRvf.lSbfCode > 0) Then
                        'Removed sbfcode test because ntr entered via SalesHist or as Inv in Collect don't have that value set
                        If (tmRvf.iMnfItem > 0) Then
                            'smSave(13, llRowNo) = "Y"
                            smSave(13, llRowNo) = "NTR"
                            lmNTRSbfCode(llRowNo) = tmRvf.lSbfCode '2-24-04
                            imBacklogTrfCode(llRowNo) = tmRvf.iBacklogTrfCode
                            For ilNTR = LBound(tmNTRTypeCode) To UBound(tmNTRTypeCode) - 1 Step 1
                                ilRet = gParseItem(tmNTRTypeCode(ilNTR).sKey, 2, "\", slStr)
                                ilCode = Val(slStr)
                                If ilCode = tmRvf.iMnfItem Then
                                    ilRet = gParseItem(tmNTRTypeCode(ilNTR).sKey, 1, "\", slStr)
                                    smSave(13, llRowNo) = "NTR-" & slStr
                                    Exit For
                                End If
                            Next ilNTR
                        Else
                            smSave(13, llRowNo) = ""
                        End If
                    End If

                    '1-16-02 combine taxes with net
                    gPDNToLong tmRvf.sNet, llNetPlusTax
                    llNetPlusTax = llNetPlusTax + tmRvf.lTax1 + tmRvf.lTax2
                    slStr = gLongToStrDec(llNetPlusTax, 2)
                    'gPDNToStr tmRvf.sNet, 2, slStr '1-16-02

                    slAgingTotal(1) = gAddStr(slAgingTotal(1), slStr)
                    smAgingTotal(1) = gAddStr(smAgingTotal(1), slStr)
                    llAgingMonth = 12 * (tmRvf.iAgingYear - 1970) + tmRvf.iAgePeriod
                    If llNowAgingMonth <= llAgingMonth Then
                        slAgingTotal(2) = gAddStr(slAgingTotal(2), slStr)
                        smAgingTotal(2) = gAddStr(smAgingTotal(2), slStr)
                        If imAgeingShow <> 0 Then
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(3)
                            smShow(3, llRowNo) = tmTransCtrls(3).sShow
                        End If
                    ElseIf llNowAgingMonth = llAgingMonth + 1 Then  '30 days
                        slAgingTotal(3) = gAddStr(slAgingTotal(3), slStr)
                        smAgingTotal(3) = gAddStr(smAgingTotal(3), slStr)
                        If imAgeingShow <> 0 Then
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(4)
                            smShow(4, llRowNo) = tmTransCtrls(4).sShow
                        End If
                    ElseIf llNowAgingMonth = llAgingMonth + 2 Then  '60 days
                        slAgingTotal(4) = gAddStr(slAgingTotal(4), slStr)
                        smAgingTotal(4) = gAddStr(smAgingTotal(4), slStr)
                        If imAgeingShow <> 0 Then
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(5)
                            smShow(5, llRowNo) = tmTransCtrls(5).sShow
                        End If
                    ElseIf llNowAgingMonth = llAgingMonth + 3 Then  '90 days
                        slAgingTotal(5) = gAddStr(slAgingTotal(5), slStr)
                        smAgingTotal(5) = gAddStr(smAgingTotal(5), slStr)
                        If imAgeingShow <> 0 Then
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(6)
                            smShow(6, llRowNo) = tmTransCtrls(6).sShow
                        End If
                    Else
                        slAgingTotal(6) = gAddStr(slAgingTotal(6), slStr)
                        smAgingTotal(6) = gAddStr(smAgingTotal(6), slStr)
                        If imAgeingShow <> 0 Then
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(7)
                            smShow(7, llRowNo) = tmTransCtrls(7).sShow
                        End If
                    End If
                Case 0 To 7, 9, 11, 12 ' view receivables

                   ilColNo = ADVTAGENCY '1
                   llRowNo = llRecCount
                   If (imAgencyFlag = 0) And Not imDirectFlag Then 'agency
                        ilCode = tmRvf.iAdfCode
                        slStr = mGetAdvtName(ilCode, True)
                    ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then 'advertiser
                        ilCode = tmRvf.iAgfCode
                        slStr = mGetAgyName(ilCode, True)
                    End If
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    ilColNo = INVOICENO '2
                    If tmRvf.lInvNo > 0 Then
                        slStr = CStr(tmRvf.lInvNo)
                    Else
                        slStr = ""
                    End If
                    smSave(8, llRowNo) = slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    ilColNo = VEHICLENAME   '3
                    'Participant
                    slStr = ""
                    For ilPart = LBound(tmHMnf) To UBound(tmHMnf) - 1 Step 1
                        If tmHMnf(ilPart).iCode = tmRvf.iMnfGroup Then
                            slStr = tmHMnf(ilPart).sName
                            Exit For
                        End If
                    Next ilPart
                    smSave(12, llRowNo) = Trim$(slStr)
                    ilCode = tmRvf.iAirVefCode
                    If ilCode > 0 Then
                        mObtainVehicleName ilCode, slStr, slType
                    Else
                        slStr = ""
                    End If
                    smSave(11, llRowNo) = Trim$(slStr)
                    ilCode = tmRvf.iBillVefCode
                    If ilCode > 0 Then
                        mObtainVehicleName ilCode, slStr, slType
                    Else
                        slStr = ""
                    End If
                    smSave(10, llRowNo) = Trim$(slStr)
                    slStr = Trim$(slStr)
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    ilColNo = EVENTNUMBER
                    slStr = ""
                    smSave(22, llRowNo) = ""
                    If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                        If tmRvf.lGsfCode > 0 Then
                            tmGsfSrchKey.lCode = tmRvf.lGsfCode
                            ilRet = btrGetEqual(hmGsf, tmGsf, imGsfRecLen, tmGsfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                            If (ilRet = BTRV_ERR_NONE) Then
                                slStr = str(Trim(tmGsf.iGameNo))
                                'For ilTeam = 1 To UBound(tmTeam) - 1 Step 1 'Traffic!lbcAgency.ListCount - 1 Step 1
                                For ilTeam = LBound(tmTeam) To UBound(tmTeam) - 1 Step 1 'Traffic!lbcAgency.ListCount - 1 Step 1
                                    If tmGsf.iVisitMnfCode = tmTeam(ilTeam).iCode Then
                                        smSave(22, llRowNo) = Trim$(tmTeam(ilTeam).sName)
                                        Exit For
                                    End If
                                Next ilTeam
                                'For ilTeam = 1 To UBound(tmTeam) - 1 Step 1 'Traffic!lbcAgency.ListCount - 1 Step 1
                                For ilTeam = LBound(tmTeam) To UBound(tmTeam) - 1 Step 1 'Traffic!lbcAgency.ListCount - 1 Step 1
                                    If tmGsf.iHomeMnfCode = tmTeam(ilTeam).iCode Then
                                        smSave(22, llRowNo) = Trim$(smSave(22, llRowNo)) & " @ " & Trim$(tmTeam(ilTeam).sName)
                                        Exit For
                                    End If
                                Next ilTeam
                            End If
                        End If
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    End If
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    ilColNo = CONTRACTNO    '4
                    llVal = tmRvf.lCntrNo
                    If llVal > 0 Then
                        slStr = Trim$(str$(llVal))   'mGetCntNo(llVal)
                        smSave(23, llRowNo) = slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                        smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    Else
                        smSave(23, llRowNo) = ""
                    End If
                    '6/7/15: Change check number to string
                    'If tmRvf.lCheckNo > 0 Then
                    '    smSave(7, llRowNo) = Trim$(str$(tmRvf.lCheckNo))
                    'Else
                    '    smSave(7, llRowNo) = ""
                    'End If
                    smSave(7, llRowNo) = Trim$(tmRvf.sCheckNo)
                    If Trim$(smSave(7, llRowNo)) = "0" Then
                        smSave(7, llRowNo) = ""
                    End If
                    If (imCollectIndex = 0) Or (imCollectIndex = 11) Then
                        ilColNo = TRANSDATE '5
                        '6/7/15: Changed check number to string
                        'llVal = tmRvf.lCheckNo
                        'If llVal > 0 Then
                        If (Trim$(tmRvf.sCheckNo) <> "") And (Trim$(tmRvf.sCheckNo) <> "0") Then
                            'slStr = Trim$(str$(llVal))
                            slStr = Trim$(tmRvf.sCheckNo)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                            smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                        End If
                    End If
                    If (imCollectIndex = 0) Or (imCollectIndex = 11) Then
                        ilColNo = TRANSTYPE '6
                    Else
                        ilColNo = TRANSDATE '5
                    End If
                    gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slStr
                    slStr = Trim$(slStr)
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    gUnpackDate tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1), slStr
                    smSave(15, llRowNo) = Trim$(slStr)
                    mObtainSalespersonName tmRvf.iSlfCode, slStr
                    smSave(16, llRowNo) = slStr
                    If (imCollectIndex = 0) Or (imCollectIndex = 11) Then
                        ilColNo = NET   '7
                        gUnpackDate tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1), slStr
                        smSave(17, llRowNo) = slStr
                    Else
                        ilColNo = TRANSTYPE '6
                        smSave(17, llRowNo) = ""
                    End If
                    slStr = Trim$(tmRvf.sTranType)
                    smSave(5, llRowNo) = slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    If (imCollectIndex = 0) Or (imCollectIndex = 11) Then
                        ilColNo = ASTERICK  '8
                    ElseIf imCollectIndex = 12 Then
                        ilColNo = NET   '7
                    Else
                        ilColNo = NET   '7
                    End If
                    'gPDNToStr tmRvf.sNet, 2, slStr '1-16-02
                    '1-16-02 combine taxes with net
                    gPDNToLong tmRvf.sNet, llNetPlusTax
                    llNetPlusTax = llNetPlusTax + tmRvf.lTax1 + tmRvf.lTax2
                    slStr = gLongToStrDec(llNetPlusTax, 2)

                    smSave(4, llRowNo) = slStr
                    slNet = slStr
                    gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
'                    If imCollectIndex = 12 Then
'                        ilColNo = 7
'                        gPDNToStr tmRvf.sGross, 2, slStr
'                        gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
'                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
'                        smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
'                    End If
                    gPDNToStr tmRvf.sGross, 2, slStr
                    smSave(18, llRowNo) = slStr
                    If tmRvf.lAcquisitionCost <> 0 Then
                        smSave(20, llRowNo) = gLongToStrDec(tmRvf.lAcquisitionCost, 2)
                    Else
                        smSave(20, llRowNo) = ""
                    End If
                    smSave(14, llRowNo) = ""
                    If (imCollectIndex = 0) Or (imCollectIndex = 11) Then
                        ilColNo = AMNTDUE   '9
                    ElseIf imCollectIndex = 12 Then
                        ilColNo = ASTERICK   '8
                    Else
                        ilColNo = ASTERICK   '8
                    End If
                    slStr = Trim$(tmRvf.sAction)
                    If slStr = "" Then
                        If tmRvf.lCefCode > 0 Then
                            'If (imCollectIndex = 1) Or (imCollectIndex = 3) Or (imCollectIndex = 9) Then
                                slStr = "C"
                            'End If
                        End If
                    End If
                    smSave(6, llRowNo) = slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                    If tmRvf.iPkLineNo > 0 Then
                        smSave(9, llRowNo) = Trim$(str$(tmRvf.iPkLineNo))
                    Else
                        smSave(9, llRowNo) = "N"
                    End If
                    'NTR
                    'If (tmRvf.iMnfItem > 0) And (tmRvf.lSbfCode > 0) Then
                    'Removed sbfcode test because ntr entered via SalesHist or as Inv in Collect don't have that value set
                    If (tmRvf.iMnfItem > 0) Then
                        'smSave(13, llRowNo) = "Y"
                        smSave(13, llRowNo) = "NTR"
                        lmNTRSbfCode(llRowNo) = tmRvf.lSbfCode '2-24-05
                        imBacklogTrfCode(llRowNo) = tmRvf.iBacklogTrfCode
                        For ilNTR = LBound(tmNTRTypeCode) To UBound(tmNTRTypeCode) - 1 Step 1
                            ilRet = gParseItem(tmNTRTypeCode(ilNTR).sKey, 2, "\", slStr)
                            ilCode = Val(slStr)
                            If ilCode = tmRvf.iMnfItem Then
                                ilRet = gParseItem(tmNTRTypeCode(ilNTR).sKey, 1, "\", slStr)
                                smSave(13, llRowNo) = "NTR-" & slStr
                                Exit For
                            End If
                        Next ilNTR
                    Else
                        smSave(13, llRowNo) = ""
                    End If
                    If llLastInvNo = -1 Then
                        llLastInvNo = tmRvf.lInvNo
                        slInvNet = slNet
                        slInvGross = smSave(18, llRowNo)
                    Else
                        'Force each PO to have it own due amount (4/29/02 Jim and Mary)
                        'This is required here to force sum of items prior to PO
                        'If (imCollectIndex = 9) And (tmRvf.sTranType = "PO") Then
                        '1/3/0/07:  Mary-Force any transaction without Airing vehicle and billing vehicle and invoice number to have its own total
                        '           This was required since tax added and user had multi-transaction types WW with one total.  JE against the WW was not distributed to each transaction
                        '           Either we had to have individual totals or distributed dollara to each transaction that made up the total
                        If (imCollectIndex = 9) And ((tmRvf.sTranType = "PO") Or ((tmRvf.iAirVefCode = 0) And (tmRvf.iBillVefCode = 0) And (tmRvf.lInvNo = 0))) Then
                            llLastInvNo = -3
                        End If
                        If llLastInvNo = tmRvf.lInvNo Then
                            slInvNet = gAddStr(slInvNet, slNet)
                            slInvGross = gAddStr(slInvGross, smSave(18, llRowNo))
                        Else
                            smSave(1, llRowNo - 1) = slInvNet
                            smSave(19, llRowNo - 1) = slInvGross
                            If (imCollectIndex <> 0) And (imCollectIndex <> 11) Then
                                If imCollectIndex = 12 Then
                                    ilColNo = AMNTDUE   '9
                                Else
                                    ilColNo = AMNTDUE   '9
                                End If
                                gFormatStr slInvNet, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                                smShow(ilColNo, llRowNo - 1) = tmTransCtrls(ilColNo).sShow
                            End If
                            llLastInvNo = tmRvf.lInvNo
                            slInvNet = slNet
                            slInvGross = smSave(18, llRowNo)
                        End If
                    End If
                    'Force each PO to have it own due amount (4/29/02- Jim and Mary)
                    'If (imCollectIndex = 9) And (tmRvf.sTranType = "PO") Then
                    '1/3/0/07:  Mary-Force any transaction without Airing vehicle and billing vehicle and invoice number to have its own total
                    '           This was required since tax added and user had multi-transaction types WW with one total.  JE against the WW was not distributed to each transaction
                    '           Either we had to have individual totals or distributed dollara to each transaction that made up the total
                    If (imCollectIndex = 9) And ((tmRvf.sTranType = "PO") Or ((tmRvf.iAirVefCode = 0) And (tmRvf.iBillVefCode = 0) And (tmRvf.lInvNo = 0))) Then
                        llLastInvNo = -2
                    End If
                    smSave(21, llRowNo) = tmRvf.sType  ' 6-12-08 Dan M flag for installment elements in cash history
                    'following if statement: don't add net to total if (view history or restore history) and ("HI" or "A")
                    If Not (((imCollectIndex = 0) Or (imCollectIndex = 11)) And ((Trim$(smSave(21, llRowNo)) = "A") Or (Trim$(smSave(5, llRowNo)) = "HI"))) Then
                        slTotal = gAddStr(slTotal, slNet)
                    End If

                    lmSave(2, llRowNo) = tmRvf.lTax1
                    lmSave(3, llRowNo) = tmRvf.lTax2
                Case 10 ' system startup
            End Select
            If ((imCollectIndex = 8) And (imAgeingShow <> 0)) Or ((imCollectIndex <> 8) And (imCollectIndex <> 10)) Then
                lmSave(1, llRowNo) = tmRvf.lCefCode
                tmCef.sComment = ""
                'tmCef.iStrLen = 0
                If tmRvf.lCefCode > 0 Then
                    'imCefRecLen = 1009
                    imCefRecLen = Len(tmCef)
                    tmCefSrchKey.lCode = tmRvf.lCefCode
                    ilRet = btrGetEqual(hmCef, tmCef, imCefRecLen, tmCefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                    If ilRet <> BTRV_ERR_NONE Then
                        tmCef.sComment = ""
                        'tmCef.iStrLen = 0
                    End If
                End If
                'If tmCef.iStrLen > 0 Then
                    smTranComment(llRowNo) = gStripChr0(Trim$(tmCef.sComment))    'Trim$(Left$(tmCef.sComment, tmCef.iStrLen))
                'Else
                '    smTranComment(llRowNo) = ""
                'End If
            End If
'            If imCollectIndex = 12 Then
'                If Trim$(smTranComment(llRowNo)) <> "" Then
'                    smShow(IACOMMENT, llRowNo) = "C"
'                Else
'                    smShow(IACOMMENT, llRowNo) = ""
'                End If
'            End If
        End If
    Next llLoop

'After recs are read calc Totals
    If ilRecFound Then
        Select Case imCollectIndex
            Case 8
                llRecCount = llRecCount + 1
                lmRowCountMax = lmRowCountMax + 1
                If llRecCount > lmRowCount Then
                    ReDim Preserve smShow(0 To imColCount, 0 To llRecCount + 1000) As String * 40
                    ReDim Preserve smSave(0 To 23, 0 To llRecCount + 1000) As String * 43
                    ReDim Preserve lmSave(0 To 3, 0 To llRecCount + 1000) As Long
                    ReDim Preserve lmNTRSbfCode(0 To llRecCount + 1000) As Long       '2-24-04
                    ReDim imBacklogTrfCode(0 To llRecCount + 1000) As Integer

                    ReDim Preserve smTranComment(0 To llRecCount + 1000) As String
                    ReDim Preserve smItemComment(0 To llRecCount + 1000) As String
                    For llRow = llRecCount To llRecCount + 1000 Step 1
                        For ilColNo = 1 To imColCount Step 1      'Clear control arrays
                            smShow(ilColNo, llRow) = ""
                        Next ilColNo
                        For ilColNo = LBound(smSave, 1) To UBound(smSave, 1) Step 1      'Clear control arrays
                            smSave(ilColNo, llRow) = ""
                        Next ilColNo
                        lmSave(1, llRow) = 0
                        lmSave(2, llRow) = 0
                        lmSave(3, llRow) = 0
                        lmNTRSbfCode(llRow) = 0           '2-24-04
                        imBacklogTrfCode(llRow) = 0
                        smTranComment(llRow) = ""
                        smItemComment(llRow) = ""
                    Next llRow
                    lmRowCount = llRecCount + 1000
                End If
                llRowNo = llRecCount
                ilColNo = ADVTAGENCY    '1
                gSetShow pbcCollect(imCollectIndex), slName, tmTransCtrls(ilColNo)
                smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                For ilColNo = 2 To 7 Step 1
                    gFormatStr slAgingTotal(ilColNo - 1), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                Next ilColNo
                For ilColNo = 2 To 7 Step 1
                    gFormatStr smAgingTotal(ilColNo - 1), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smAgingTotal(ilColNo - 1) = tmTransCtrls(ilColNo).sShow
                Next ilColNo
            Case 1 To 7, 9, 12 ' view receivables
                If imCollectIndex = 12 Then
                    ilColNo = AMNTDUE   '9
                Else
                    ilColNo = AMNTDUE   '9
                End If
                smSave(1, llRowNo) = slInvNet
                smSave(19, llRowNo) = slInvGross
                gFormatStr slInvNet, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                ilColNo = imTotalDue    'sum total
                slStr = slTotal
                smTotalDue = slTotal
                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilColNo)
                smTotalAdjGross = ""
            Case 0, 11  ' view receivables
                smSave(1, llRowNo) = slInvNet
                smSave(19, llRowNo) = slInvGross
                ilColNo = imTotalDue    'sum total
                slStr = slTotal
                smTotalDue = slTotal
                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilColNo)
        End Select
    End If
    If llRecCount <> 0 Then
        ReDim Preserve smShow(0 To imColCount, 0 To llRecCount) As String * 40
        ReDim Preserve smSave(0 To 23, 0 To llRecCount) As String * 43
        ReDim Preserve lmSave(0 To 3, 0 To llRecCount) As Long
        ReDim Preserve lmNTRSbfCode(0 To llRecCount) As Long       '2-24-04
        ReDim imBacklogTrfCode(0 To llRecCount) As Integer
    
        ReDim Preserve smTranComment(0 To llRecCount) As String
        ReDim Preserve smItemComment(0 To llRecCount) As String
    Else
        ReDim Preserve smShow(0 To imColCount, 0 To 1) As String * 40
        ReDim Preserve smSave(0 To 23, 0 To 1) As String * 43
        ReDim Preserve lmSave(0 To 3, 0 To 1) As Long
        ReDim Preserve lmNTRSbfCode(0 To 1) As Long       '2-24-04
        ReDim imBacklogTrfCode(0 To 1) As Integer
    
        ReDim Preserve smTranComment(0 To 1) As String
        ReDim Preserve smItemComment(0 To 1) As String
    End If
    imVbcIngoreChg = True
    vbcCollect.Min = LBONE  'LBound(smShow, 2)
    'If UBound(smShow, 2) - 1 <= vbcCollect.LargeChange Then
    '    vbcCollect.Max = LBound(smShow, 2)
    'Else
    '    If CLng(UBound(smShow, 2)) - vbcCollect.LargeChange < 32767 Then
    '        vbcCollect.Max = CLng(UBound(smShow, 2)) - vbcCollect.LargeChange
    '    Else
    '        MsgBox "Only the first 32767 Collection records are shown", vbInformation + vbOKOnly, "Limit Reached"
    '        vbcCollect.Max = 32767
    '    End If
    'End If
    mSetScrollBarMax False
    If vbcCollect.Value <> vbcCollect.Min Then
        vbcCollect.Value = vbcCollect.Min
    End If

    mCreateCompressShow -1, 1
    pbcCollect(imCollectIndex).Cls
    pbcCollect_Paint imCollectIndex

    pbcInfo_Paint
    imVbcIngoreChg = False
    Exit Function

    On Error GoTo 0
    mReadRVFPHF = False
    Exit Function

End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mResetAdvtAgy                   *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Reset Current AR; % over 90;   *
'*                      High Credit values for Advt and*
'*                      Agency                         *
'*                                                     *
'*******************************************************
Private Sub mResetAdvtAgy()
    Dim tlRvf As RVF            'RVF record image
    Dim ilRvfRecLen As Integer  'RVF record length
    Dim hlRvf As Integer        'RVF file handle
    Dim tlAdf As ADF            'ADF record image
    Dim ilAdfRecLen As Integer  'ADF record length
    Dim llAdfRecPos As Long
    Dim hlAdf As Integer        'ADF file handle
    Dim tlagf As AGF            'AGF record image
    Dim ilAgfRecLen As Integer  'AGF record length
    Dim llAgfRecPos As Long
    Dim hlAgf As Integer        'AGF file handle
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim llAgeingDate As Long
    Dim slEndPrevPeriod As String
    Dim slNet As String
    Dim ilUpper As Integer
    Dim ilFound As Integer
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilMonth As Integer
    Dim ilYear As Integer
    Dim ilAgeing As Integer
    Dim slStr As String
    hlRvf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hlRvf, "", sgDBPath & "RVF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Exit Sub
    End If
    hlAdf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlAdf, "", sgDBPath & "ADF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Exit Sub
    End If
    hlAgf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlAgf, "", sgDBPath & "AGF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ReDim imAdf(0 To 0) As Integer
    ReDim smAdfCurrAR(0 To 0) As String * 20
    ReDim smAdfOver90(0 To 0) As String * 20
    ReDim imAgf(0 To 0) As Integer
    ReDim smAgfCurrAR(0 To 0) As String * 20
    ReDim smAgfOver90(0 To 0) As String * 20
    imAdf(0) = 0
    smAdfCurrAR(0) = ".00"
    smAdfOver90(0) = ".00"
    imAgf(0) = 0
    smAgfCurrAR(0) = ".00"
    smAgfOver90(0) = ".00"
    ilUpper = 0
    ilRvfRecLen = Len(tlRvf)
    ilAdfRecLen = Len(tlAdf)
    ilAgfRecLen = Len(tlagf)
    gUnpackDate tgSpf.iRPRP(0), tgSpf.iRPRP(1), slEndPrevPeriod
    llAgeingDate = gDateValue(slEndPrevPeriod) - 105 '90
    ilMonth = month(llAgeingDate)
    ilYear = year(llAgeingDate)
    ilAgeing = (ilYear - 1960) * 12 + ilMonth
    ilRet = btrGetFirst(hlRvf, tlRvf, ilRvfRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE)
        If tlRvf.sCashTrade = "C" Then
            gPDNToStr tlRvf.sNet, 2, slNet
            'Ignore trade
            ilFound = False
            For ilLoop = LBound(imAdf) To UBound(imAdf) - 1 Step 1
                If imAdf(ilLoop) = tlRvf.iAdfCode Then
                    ilIndex = ilLoop
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            If Not ilFound Then
                ilIndex = UBound(imAdf)
                ReDim Preserve imAdf(0 To ilIndex + 1) As Integer
                ReDim Preserve smAdfCurrAR(0 To ilIndex + 1) As String * 20
                ReDim Preserve smAdfOver90(0 To ilIndex + 1) As String * 20
                imAdf(ilIndex) = tlRvf.iAdfCode
                smAdfCurrAR(ilIndex) = slNet
                If (tlRvf.iAgingYear - 1960) * 12 + tlRvf.iAgePeriod <= ilAgeing Then
                    smAdfOver90(ilIndex) = slNet
                Else
                    smAdfOver90(ilIndex) = ".00"
                End If
                imAdf(ilIndex + 1) = 0
                smAdfCurrAR(ilIndex + 1) = ".00"
                smAdfOver90(ilIndex + 1) = ".00"
            Else
                smAdfCurrAR(ilIndex) = gAddStr(Trim$(smAdfCurrAR(ilIndex)), slNet)
                If (tlRvf.iAgingYear - 1960) * 12 + tlRvf.iAgePeriod <= ilAgeing Then
                    smAdfOver90(ilIndex) = gAddStr(Trim$(smAdfOver90(ilIndex)), slNet)
                End If
            End If
            If tlRvf.iAgfCode > 0 Then
                ilFound = False
                For ilLoop = LBound(imAgf) To UBound(imAgf) - 1 Step 1
                    If imAgf(ilLoop) = tlRvf.iAgfCode Then
                        ilIndex = ilLoop
                        ilFound = True
                        Exit For
                    End If
                Next ilLoop
                If Not ilFound Then
                    ilIndex = UBound(imAgf)
                    ReDim Preserve imAgf(0 To ilIndex + 1) As Integer
                    ReDim Preserve smAgfCurrAR(0 To ilIndex + 1) As String * 20
                    ReDim Preserve smAgfOver90(0 To ilIndex + 1) As String * 20
                    imAgf(ilIndex) = tlRvf.iAgfCode
                    smAgfCurrAR(ilIndex) = slNet
                    If (tlRvf.iAgingYear - 1960) * 12 + tlRvf.iAgePeriod <= ilAgeing Then
                        smAgfOver90(ilIndex) = slNet
                    Else
                        smAgfOver90(ilIndex) = ".00"
                    End If
                    imAgf(ilIndex + 1) = 0
                    smAgfCurrAR(ilIndex + 1) = ".00"
                    smAgfOver90(ilIndex + 1) = ".00"
                Else
                    smAgfCurrAR(ilIndex) = gAddStr(Trim$(smAgfCurrAR(ilIndex)), slNet)
                    If (tlRvf.iAgingYear - 1960) * 12 + tlRvf.iAgePeriod <= ilAgeing Then
                        smAgfOver90(ilIndex) = gAddStr(Trim$(smAgfOver90(ilIndex)), slNet)
                    End If
                End If
            End If
        End If
        ilRet = btrGetNext(hlRvf, tlRvf, ilRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    'Loop thru advt, then agency adjusting values
    ilRet = btrGetFirst(hlAdf, tlAdf, ilAdfRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE)
        ilRet = btrGetPosition(hlAdf, llAdfRecPos)
        Do  'Loop until record updated or added
            ilFound = False
            For ilLoop = LBound(imAdf) To UBound(imAdf) - 1 Step 1
                If imAdf(ilLoop) = tlAdf.iCode Then
                    ilIndex = ilLoop
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            If ilFound Then
                If gCompNumberStr(smAdfCurrAR(ilIndex), ".00") = 0 Then
                    If gCompNumberStr(smAdfOver90(ilIndex), ".00") = 0 Then
                        slStr = "0"
                    Else
                        slStr = "100"
                    End If
                Else
                    slStr = gDivStr(gMulStr(smAdfOver90(ilIndex), "100"), smAdfCurrAR(ilIndex))
                    slStr = gRoundStr(slStr, "1", 0)
                End If
                'gStrToPDN slStr, 0, 2, tlAdf.sPct90
                If Val(slStr) < 0 Then
                    slStr = "0"
                End If
                If Val(slStr) > 100 Then
                    slStr = "100"
                End If
                tlAdf.iPct90 = gStrDecToInt(slStr, 0)
                slStr = smAdfCurrAR(ilIndex)
                gStrToPDN slStr, 2, 6, tlAdf.sCurrAR
                gPDNToStr tlAdf.sHiCredit, 2, slStr
                If gCompNumberStr(slStr, smAdfCurrAR(ilIndex)) < 0 Then
                    slStr = smAdfCurrAR(ilIndex)
                    gStrToPDN slStr, 2, 6, tlAdf.sHiCredit
                End If
            Else
                'slStr = ""
                'gStrToPDN slStr, 0, 2, tlAdf.sPct90
                tlAdf.iPct90 = 0
                slStr = ""
                gStrToPDN slStr, 2, 6, tlAdf.sCurrAR
            End If
            ilRet = btrUpdate(hlAdf, tlAdf, ilAdfRecLen)
            If ilRet = BTRV_ERR_CONFLICT Then
                ilCRet = btrGetDirect(hlAdf, tlAdf, ilAdfRecLen, llAdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                If ilCRet <> BTRV_ERR_NONE Then
                    Exit Do
                End If
                'tmRec = tlAdf
                'ilCRet = gGetByKeyForUpdate("ADF", hlAdf, tmRec)
                'tlAdf = tmRec
                'If ilCRet <> BTRV_ERR_NONE Then
                '    Exit Do
                'End If
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        ilRet = btrGetNext(hlAdf, tlAdf, ilAdfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
    Loop
    ilRet = btrGetFirst(hlAgf, tlagf, ilAgfRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE)
        ilRet = btrGetPosition(hlAgf, llAgfRecPos)
        Do  'Loop until record updated or added
            ilFound = False
            For ilLoop = LBound(imAgf) To UBound(imAgf) - 1 Step 1
                If imAgf(ilLoop) = tlagf.iCode Then
                    ilIndex = ilLoop
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            If ilFound Then
                If gCompNumberStr(smAgfCurrAR(ilIndex), ".00") = 0 Then
                    If gCompNumberStr(smAgfOver90(ilIndex), ".00") = 0 Then
                        slStr = "0"
                    Else
                        slStr = "100"
                    End If
                Else
                    slStr = gDivStr(gMulStr(smAgfOver90(ilIndex), "100"), smAgfCurrAR(ilIndex))
                    slStr = gRoundStr(slStr, "1", 0)
                End If
                'gStrToPDN slStr, 0, 2, tlAgf.sPct90
                If Val(slStr) < 0 Then
                    slStr = "0"
                End If
                If Val(slStr) > 100 Then
                    slStr = "100"
                End If
                tlagf.iPct90 = gStrDecToInt(slStr, 0)
                slStr = smAgfCurrAR(ilIndex)
                gStrToPDN slStr, 2, 6, tlagf.sCurrAR
                gPDNToStr tlagf.sHiCredit, 2, slStr
                If gCompNumberStr(slStr, smAgfCurrAR(ilIndex)) < 0 Then
                    slStr = smAgfCurrAR(ilIndex)
                    gStrToPDN slStr, 2, 6, tlagf.sHiCredit
                End If
            Else
                'slStr = ""
                'gStrToPDN slStr, 0, 2, tlAgf.sPct90
                tlagf.iPct90 = 0
                slStr = ""
                gStrToPDN slStr, 2, 6, tlagf.sCurrAR
            End If
            ilRet = btrUpdate(hlAgf, tlagf, ilAgfRecLen)
            If ilRet = BTRV_ERR_CONFLICT Then
                ilCRet = btrGetDirect(hlAgf, tlagf, ilAgfRecLen, llAgfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                If ilCRet <> BTRV_ERR_NONE Then
                    Exit Do
                End If
                'tmRec = tlAgf
                'ilCRet = gGetByKeyForUpdate("AGF", hlAgf, tmRec)
                'tlAgf = tmRec
                'If ilCRet <> BTRV_ERR_NONE Then
                '    Exit Do
                'End If
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        ilRet = btrGetNext(hlAgf, tlagf, ilAgfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
    Loop
    Screen.MousePointer = vbDefault
    ilRet = btrClose(hlRvf)
    btrDestroy hlRvf
    ilRet = btrClose(hlAdf)
    btrDestroy hlAdf
    ilRet = btrClose(hlAgf)
    btrDestroy hlAgf
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mRestoreTransactions            *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Transfer transactions back     *
'*                      to receivables from history    *
'*                                                     *
'*******************************************************
Private Sub mRestoreTransactions()
    Dim tlRvf As RVF            'RVF or PHF record image
    Dim ilRvfRecLen As Integer  'RVF record length
    Dim hlRvf As Integer        'RVF or PHF file handle
    Dim hlPhf As Integer        'RVF or PHF file handle
    Dim llRow As Long
    Dim ilFound As Integer
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim ilLoop As Integer
    Dim llRecPos As Long
    Dim slCode As String
    Dim llDateRangeStartDate As Long
    Dim llDateRangeEndDate As Long
    Dim llTranDate As Long
    Dim ilAllTranShowing As Integer
    Dim llEarliestTranDate As Long
    Dim llLatestTranDate As Long
    Dim slStr As String

    If (gCompNumberStr(smRestoreTotal, ".00") <> 0) Then
        'Check that All transaction are showing
        hlPhf = CBtrvTable(TWOHANDLES)
        ilRet = btrOpen(hlPhf, "", sgDBPath & "PHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
        If ilRet <> BTRV_ERR_NONE Then
            Exit Sub
        End If
        Screen.MousePointer = vbHourglass
        ilAllTranShowing = True
        llEarliestTranDate = -1
        llLatestTranDate = -1
        llDateRangeStartDate = gDateValue(sgDateRangeStartDate)
        llDateRangeEndDate = gDateValue(sgDateRangeEndDate)
        If (imAgencyFlag = 0) And Not imDirectFlag Then 'agency
            'imAgfCode
            tmRvfSrchKey.iAgfCode = imAgfCode
            ilRet = btrGetEqual(hlPhf, tlRvf, imRvfRecLen, tmRvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        ElseIf (imAgencyFlag = 1) Or (imDirectFlag) Then 'advertiser
            'imAdfCode
            tmRvfSrchKey1.iAdfCode = imAdfCode
            ilRet = btrGetEqual(hlPhf, tlRvf, imRvfRecLen, tmRvfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
        End If
        Do While ilRet = BTRV_ERR_NONE
            If (imAgencyFlag = 0) And Not imDirectFlag Then 'agency
                If tlRvf.iAgfCode <> imAgfCode Then
                    Exit Do
                End If
            Else
                If tlRvf.iAdfCode <> imAdfCode Then
                    Exit Do
                End If
            End If
            ilFound = False
            For ilLoop = LBound(smRestoreInvNo) To UBound(smRestoreInvNo) - 1 Step 1
                If tlRvf.lInvNo > 0 Then
                    slStr = CStr(tlRvf.lInvNo)
                Else
                    slStr = ""
                End If
                If Trim$(slStr) = Trim$(smRestoreInvNo(ilLoop)) Then
                    ilFound = True
                    Exit For
                End If
            Next ilLoop
            gUnpackDateLong tlRvf.iTranDate(0), tlRvf.iTranDate(1), llTranDate
            If ilFound Then
                If llEarliestTranDate = -1 Then
                    llEarliestTranDate = llTranDate
                ElseIf llTranDate < llEarliestTranDate Then
                    llEarliestTranDate = llTranDate
                End If
                If llLatestTranDate = -1 Then
                    llLatestTranDate = llTranDate
                ElseIf llTranDate > llEarliestTranDate Then
                    llLatestTranDate = llTranDate
                End If
            End If
            If (llTranDate < llDateRangeStartDate) Or (llTranDate > llDateRangeEndDate) Then
                If ilFound Then
                    ilAllTranShowing = False
                End If
            End If
            ilRet = btrGetNext(hlPhf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        If Not ilAllTranShowing Then
            btrDestroy hlPhf
            Screen.MousePointer = vbDefault
            ilRet = MsgBox("Restore disallowed, change date range to encompass all Transactions from " & Format$(llEarliestTranDate, "m/d/yy") & "-" & Format$(llLatestTranDate, "m/d/yy"), vbOKOnly + vbExclamation, "Restore")
            Exit Sub
        End If
        sgPasswordAddition = "Replace: Call Counterpoint to obtain password to Restore Transactions that will cause Receivables to be out of balance by " & smRestoreTotal & " DANGER!"
        CSPWord.Show vbModal
        If Not igPasswordOk Then
            Exit Sub
        End If
    Else
        hlPhf = CBtrvTable(TWOHANDLES)
        ilRet = btrOpen(hlPhf, "", sgDBPath & "PHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
        If ilRet <> BTRV_ERR_NONE Then
            Exit Sub
        End If
    End If

    hlRvf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlRvf, "", sgDBPath & "RVF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ilRet = btrBeginTrans(hlRvf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        btrDestroy hlRvf
        btrDestroy hlPhf
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Restore Stopped, Try Later", vbOKOnly + vbExclamation, "Erase")
        Exit Sub
    End If
    ilRvfRecLen = Len(tlRvf)
    ''For llRow = LBound(smSave, 2) To UBound(smSave, 2) Step 1
    'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
    For llRow = LBONE To lmRowCountMax Step 1
        ilFound = False
        ' 6-13-08 changed to not allow move if 'type' = 'A' Dan M.
        'If (Trim$(smSave(5, llRow)) <> "HI") Or (Trim$(smSave(21, llRow)) <> "A") Then
        If (Trim$(smSave(5, llRow)) <> "HI") And (Trim$(smSave(21, llRow)) <> "A") Then
            If imRestoreZeroBalance <> 1 Then
                For ilLoop = LBound(smRestoreInvNo) To UBound(smRestoreInvNo) - 1 Step 1
                    If (Trim$(smSave(8, llRow)) = smRestoreInvNo(ilLoop)) Then
                        ilFound = True
                        Exit For
                    End If
                Next ilLoop
            Else
                If (Trim$(smSave(23, llRow)) = smRestoreContractNo) Then
                    ilFound = True
                End If
            End If
        End If
        If ilFound Then
            'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
            ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
            If ilRet = CP_MSG_NONE Then
                llRecPos = Val(slCode)
                ilRet = btrGetDirect(hlPhf, tlRvf, ilRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                If ilRet = BTRV_ERR_NONE Then
                    'tmRec = tlRvf
                    'ilRet = gGetByKeyForUpdate("PHF", hlPhf, tmRec)
                    'tlRvf = tmRec
                    'If ilRet <> BTRV_ERR_NONE Then
                    '    ilRet = btrAbortTrans(hlRvf)
                    '    btrDestroy hlRvf
                    '    btrDestroy hlPhf
                    '    Screen.MousePointer = vbDefault    'Default
                    '    ilRet = MsgBox("Restore Not Completed, Try Later", vbOkOnly + vbExclamation, "Erase")
                    '    Exit Sub
                    'End If
                    tlRvf.lCode = 0 'Can't retain code since autoInc installed after phf records created
                    '1/17/09: Added buyer
                    'tlRvf.sUnused = ""
                    ilRet = btrInsert(hlRvf, tlRvf, ilRvfRecLen, INDEXKEY0)
                    If ilRet = BTRV_ERR_NONE Then
                        Do
                            ilRet = btrDelete(hlPhf)
                            If ilRet = BTRV_ERR_CONFLICT Then
                                ilCRet = btrGetDirect(hlPhf, tlRvf, ilRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                'tmRec = tlRvf
                                'ilCRet = gGetByKeyForUpdate("PHF", hlPhf, tmRec)
                                'tlRvf = tmRec
                                'If ilCRet <> BTRV_ERR_NONE Then
                                '    ilRet = btrAbortTrans(hlRvf)
                                '    btrDestroy hlRvf
                                '    btrDestroy hlPhf
                                '    Screen.MousePointer = vbDefault    'Default
                                '    ilRet = MsgBox("Restore Not Completed, Try Later", vbOkOnly + vbExclamation, "Erase")
                                '    Exit Sub
                                'End If
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                    End If
                    If ilRet <> BTRV_ERR_NONE Then
                        ilRet = btrAbortTrans(hlRvf)
                        btrDestroy hlRvf
                        btrDestroy hlPhf
                        Screen.MousePointer = vbDefault    'Default
                        ilRet = MsgBox("Restore Not Completed, Try Later", vbOKOnly + vbExclamation, "Erase")
                        Exit Sub
                    End If
                Else
                    ilRet = btrAbortTrans(hlRvf)
                    btrDestroy hlRvf
                    btrDestroy hlPhf
                    Screen.MousePointer = vbDefault    'Default
                    ilRet = MsgBox("Restore Not Completed, Try Later", vbOKOnly + vbExclamation, "Erase")
                    Exit Sub
                End If
            End If
        End If
    Next llRow
    ilRet = btrEndTrans(hlRvf)
    ilRet = btrClose(hlRvf)
    btrDestroy hlRvf
    ilRet = btrClose(hlPhf)
    btrDestroy hlPhf
End Sub
'*******************************************************
'*
'*      Procedure Name:mS4SetShow
'*
'*             Created:5/11/94       By:D. Hannifan
'*            Modified:              By:
'*
'*            Comments: Format user input for a control
'*                      to be displayed on the form
'*
'*******************************************************
Private Sub mS4SetShow()
'
'   mS4SetShow
'   Where:
'
    Dim ilLoop As Integer   'For loop control parameter

    For ilLoop = imLBS4Info To UBound(tmS4Info) Step 1
        pbcInfo.CurrentX = tmS4Info(ilLoop).fBoxX + fgBoxInsetX
        pbcInfo.CurrentY = tmS4Info(ilLoop).fBoxY + fgBoxInsetY
        pbcInfo.Print smS4Info(ilLoop)
    Next ilLoop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSaveAdfRec                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Update Advertiser record       *
'*                                                     *
'*******************************************************
Private Function mSaveAdfRec()
    Dim ilRet As Integer
    Dim ilRet2 As Integer
    Dim llRecPos As Long
    Dim slStr As String
    Dim ilListIndex As Integer
    Dim slCode As String

        mSaveAdfRec = False
        'If Not imAdfFlag Then
        '    Exit Function
        'End If
        llRecPos = lmStatAdfRecPos
        Do
            ilRet = btrGetDirect(hmAdf, tmAdf, imAdfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            On Error GoTo mSaveAdfRecErr
            gBtrvErrorMsg ilRet, "mSaveAdfRec (btrGetDirect):" & "Adf.Btr", Collect
            On Error GoTo 0
            If imInfoBoxNo = CREDITRINDEX Or imInfoBoxNo = CREDITAMTINDEX Then
                If tmInfoCtrls(CREDITRINDEX).iChg And smInfoCtrls(CREDITAMTINDEX) <> "" Then
                    Select Case lbcCreditRestr.ListIndex
                        Case 0 ' N No restrictions
                            tmAdf.sCreditRestr = "N"
                        Case 1  'L Credit Limit
                            tmAdf.sCreditRestr = "L"
                        Case 2  'W Cash in advance weekly
                            tmAdf.sCreditRestr = "W"
                        Case 3  'M Cash in advance monthly
                            tmAdf.sCreditRestr = "M"
                        Case 4  'T Cash in advance quarterly
                            tmAdf.sCreditRestr = "T"
                        Case 5  'P Prohibit new orders
                            tmAdf.sCreditRestr = "P"
                        Case Else
                            Exit Function
                    End Select
                    If tgUrf(0).sCredit <> "I" And (imInfoBoxNo = CREDITRINDEX Or imInfoBoxNo = CREDITAMTINDEX) Then
                        Beep
                        mInfoSetFocus imInfoBoxNo
                        Exit Function
                    Else
                        If tmAdf.sCreditRestr = "L" And smInfoCtrls(CREDITAMTINDEX) <> "" And tmInfoCtrls(CREDITAMTINDEX).iChg Then
                            'tmAdf.sCreditLimit = smInfoCtrls(CREDITAMTINDEX)
                            'gStrToPDN smInfoCtrls(CREDITAMTINDEX), 2, 5, tmAdf.sCreditLimit
                            tmAdf.lCreditLimit = gStrDecToLong(smInfoCtrls(CREDITAMTINDEX), 2)
                        End If
                        If tmAdf.sCreditRestr = "L" And smInfoCtrls(CREDITAMTINDEX) = "" Then
                            'mInfoSetFocus imInfoBoxNo + 1
                            Exit Function
                        End If
                        ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                        tmInfoCtrls(CREDITRINDEX).iChg = False
                    End If
                ElseIf tmInfoCtrls(CREDITAMTINDEX).iChg Then
                        'gStrToPDN smInfoCtrls(CREDITAMTINDEX), 2, 5, tmAdf.sCreditLimit
                        tmAdf.lCreditLimit = gStrDecToLong(smInfoCtrls(CREDITAMTINDEX), 2)
                        ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                        tmInfoCtrls(CREDITAMTINDEX).iChg = False
                ElseIf imInfoBoxNo = CREDITRINDEX And tmInfoCtrls(CREDITRINDEX).iChg And lbcCreditRestr.ListIndex <> 1 Then
                        'slStr = ""
                        'gStrToPDN slStr, 2, 5, tmAdf.sCreditLimit
                        tmAdf.lCreditLimit = 0
                        ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                        tmInfoCtrls(CREDITAMTINDEX).iChg = False
                End If
            ElseIf imInfoBoxNo = PAYRATEINDEX Then
                If tmInfoCtrls(PAYRATEINDEX).iChg And smInfoCtrls(PAYRATEINDEX) <> "" Then
                    Select Case lbcPaymRating.ListIndex
                        Case 0
                            tmAdf.sPaymRating = "0"  'Quick
                        Case 1
                            tmAdf.sPaymRating = "1"    'Normal
                        Case 2
                            tmAdf.sPaymRating = "2"   'Slow
                        Case 3
                            tmAdf.sPaymRating = "3"   'Difficult
                        Case 4
                            tmAdf.sPaymRating = "4"   'In Collection
                    End Select
                    If tgUrf(0).sCredit <> "I" Then
                        Beep
                        mInfoSetFocus imInfoBoxNo
                        Exit Function
                    Else
                        ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                        tmInfoCtrls(PAYRATEINDEX).iChg = False
                    End If
                End If

            ElseIf imInfoBoxNo = PAYABLESINDEX And tmInfoCtrls(PAYABLESINDEX).iChg Then
                If Trim$(lbcPayables.List(lbcPayables.ListIndex)) = "[None]" Then
                    tmAdf.iPnfPay = Val(Trim$(slCode))
                    ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen)
                    tmInfoCtrls(PAYABLESINDEX).iChg = False
                    mkcPhone.Text = smPhoneImage
                    mReadPnf tmAdf.iPnfPay  'Set phone number
                    pbcInfo.Cls
                    pbcInfo_Paint
                Else
                    For ilListIndex = 0 To UBound(tmPayableCode) - 1 Step 1 'Traffic!lbcSalesperson.ListCount - 1 Step 1
                       'ilRet2 = gParseItem(Traffic!lbcSalesperson.List(ilListIndex), 1, "\", slStr)
                       ilRet2 = gParseItem(tmPayableCode(ilListIndex).sKey, 1, "\", slStr)
                       slStr = Trim$(slStr)
                       If lbcPayables.ListIndex > -1 Then
                           If Trim$(lbcPayables.List(lbcPayables.ListIndex)) = slStr Then
                               'ilRet2 = gParseItem(Traffic!lbcSalesperson.List(ilListIndex), 2, "\", slCode)
                               ilRet2 = gParseItem(tmPayableCode(ilListIndex).sKey, 2, "\", slCode)
                               tmAdf.iPnfPay = Val(Trim$(slCode))
                               ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen)
                               tmInfoCtrls(PAYABLESINDEX).iChg = False
                               mReadPnf tmAdf.iPnfPay  'Set phone number
                               Exit For
                           End If
                       End If
                    Next ilListIndex
                End If
            ElseIf imInfoBoxNo = PHONEINDEX And tmInfoCtrls(PHONEINDEX).iChg Then
'                gGetPhoneNo mkcPhone, slStr
'                If slStr <> tmAdf.sPhone Then
'                    tmAdf.sPhone = slStr
'                    ilRet2 = btrUpdate(hmAdf, tmAdf, imAdfRecLen)
'                    tmInfoCtrls(PHONEINDEX).iChg = False
'                End If
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        ilRet = gBinarySearchAdf(tmAdf.iCode)
        If ilRet <> -1 Then
            tgCommAdf(ilRet).iCode = tmAdf.iCode
            tgCommAdf(ilRet).sName = tmAdf.sName
            tgCommAdf(ilRet).sAbbr = tmAdf.sAbbr
            tgCommAdf(ilRet).iMnfSort = tmAdf.iMnfSort
            tgCommAdf(ilRet).sBillAgyDir = tmAdf.sBillAgyDir
            tgCommAdf(ilRet).sState = tmAdf.sState
            tgCommAdf(ilRet).sAllowRepMG = tmAdf.sAllowRepMG
            tgCommAdf(ilRet).sBonusOnInv = tmAdf.sBonusOnInv
            tgCommAdf(ilRet).sRepInvGen = tmAdf.sRepInvGen
            tgCommAdf(ilRet).sPolitical = tmAdf.sPolitical      '5-26-06
            tgCommAdf(ilRet).sAddrID = tmAdf.sAddrID
        End If
    mSaveAdfRec = True
    Exit Function
mSaveAdfRecErr:
    mSaveAdfRec = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSaveAgfRec                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Update Agency record           *
'*                                                     *
'*******************************************************
Private Function mSaveAgfRec() As Integer
    Dim ilRet As Integer
    Dim ilRet2 As Integer
    Dim llRecPos As Long
    Dim slStr As String
    Dim ilListIndex As Integer
    Dim slCode As String
        mSaveAgfRec = False
        'If Not imAgfFlag Then
        '    Exit Function
        'End If
        llRecPos = lmStatAgfRecPos
        Do
            ilRet = btrGetDirect(hmAgf, tmAgf, imAgfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            On Error GoTo mSaveAgfRecErr
            gBtrvErrorMsg ilRet, "mSaveAgfRec (btrGetDirect):" & "Agf.Btr", Collect
            On Error GoTo 0
            If imInfoBoxNo = CREDITRINDEX Or imInfoBoxNo = CREDITAMTINDEX Then
                If tmInfoCtrls(CREDITRINDEX).iChg Then
                    Select Case lbcCreditRestr.ListIndex
                        Case 0 ' N No restrictions
                            tmAgf.sCreditRestr = "N"
                        Case 1  'L Credit Limit
                            tmAgf.sCreditRestr = "L"
                        Case 2  'W Cash in advance weekly
                            tmAgf.sCreditRestr = "W"
                        Case 3  'M Cash in advance monthly
                            tmAgf.sCreditRestr = "M"
                        Case 4  'T Cash in advance quarterly
                            tmAgf.sCreditRestr = "T"
                        Case 5  'P Prohibit new orders
                            tmAgf.sCreditRestr = "P"
                        Case Else
                            Exit Function
                    End Select
                    If tgUrf(0).sCredit <> "I" And (imInfoBoxNo = CREDITRINDEX Or imInfoBoxNo = CREDITAMTINDEX) Then
                        Beep
                        mInfoSetFocus imInfoBoxNo
                        Exit Function
                    Else
                        If tmAgf.sCreditRestr = "L" And smInfoCtrls(CREDITAMTINDEX) <> "" And tmInfoCtrls(CREDITAMTINDEX).iChg Then
                            'tmAgf.sCreditLimit = smInfoCtrls(CREDITAMTINDEX)
                            'gStrToPDN smInfoCtrls(CREDITAMTINDEX), 2, 5, tmAgf.sCreditLimit
                            tmAgf.lCreditLimit = gStrDecToLong(smInfoCtrls(CREDITAMTINDEX), 2)
                        End If
                        If tmAgf.sCreditRestr = "L" And smInfoCtrls(CREDITAMTINDEX) = "" Then
                            'mInfoSetFocus imInfoBoxNo + 1
                            Exit Function
                        End If
                        ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                        tmInfoCtrls(CREDITRINDEX).iChg = False
                    End If
                ElseIf tmInfoCtrls(CREDITAMTINDEX).iChg Then
                    'gStrToPDN smInfoCtrls(CREDITAMTINDEX), 2, 5, tmAgf.sCreditLimit
                    tmAgf.lCreditLimit = gStrDecToLong(smInfoCtrls(CREDITAMTINDEX), 2)
'                    tmAgf.sCreditLimit = slStr
                    ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                    tmInfoCtrls(CREDITAMTINDEX).iChg = False
                ElseIf imInfoBoxNo = CREDITRINDEX And tmInfoCtrls(CREDITRINDEX).iChg And lbcCreditRestr.ListIndex <> 1 Then
                    'slStr = ""
                    'gStrToPDN slStr, 2, 5, tmAgf.sCreditLimit
                    tmAgf.lCreditLimit = 0
                    ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                    tmInfoCtrls(CREDITAMTINDEX).iChg = False
                End If
            ElseIf imInfoBoxNo = PAYRATEINDEX Then
                If tmInfoCtrls(PAYRATEINDEX).iChg And smInfoCtrls(PAYRATEINDEX) <> "" Then
                    Select Case lbcPaymRating.ListIndex
                        Case 0
                            tmAgf.sPaymRating = "0"  'Quick
                        Case 1
                            tmAgf.sPaymRating = "1"    'Normal
                        Case 2
                            tmAgf.sPaymRating = "2"   'Slow
                        Case 3
                            tmAgf.sPaymRating = "3"   'Difficult
                        Case 4
                            tmAgf.sPaymRating = "4"   'In Collection
                    End Select
                    If tgUrf(0).sCredit <> "I" Then
                        Beep
                        mInfoSetFocus imInfoBoxNo
                        Exit Function
                    Else
                        ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                        tmInfoCtrls(PAYRATEINDEX).iChg = False
                    End If
                End If

            ElseIf imInfoBoxNo = PAYABLESINDEX And tmInfoCtrls(PAYABLESINDEX).iChg Then
                If Trim$(lbcPayables.List(lbcPayables.ListIndex)) = "[None]" Then
                    tmAgf.iPnfPay = Val(Trim$(slCode))
                    ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen)
                    tmInfoCtrls(PAYABLESINDEX).iChg = False
                    mkcPhone.Text = smPhoneImage
                    mReadPnf tmAgf.iPnfPay  'Set phone number
                    pbcInfo.Cls
                    pbcInfo_Paint
                Else
                    For ilListIndex = 0 To UBound(tmPayableCode) - 1 Step 1 'Traffic!lbcSalesperson.ListCount - 1 Step 1
                       'ilRet2 = gParseItem(Traffic!lbcSalesperson.List(ilListIndex), 1, "\", slStr)
                       ilRet2 = gParseItem(tmPayableCode(ilListIndex).sKey, 1, "\", slStr)
                       slStr = Trim$(slStr)
                       If lbcPayables.ListIndex > -1 Then
                           If Trim$(lbcPayables.List(lbcPayables.ListIndex)) = slStr Then
                               'ilRet2 = gParseItem(Traffic!lbcSalesperson.List(ilListIndex), 2, "\", slCode)
                               ilRet2 = gParseItem(tmPayableCode(ilListIndex).sKey, 2, "\", slCode)
                               tmAgf.iPnfPay = Val(Trim$(slCode))
                               ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen)
                               tmInfoCtrls(PAYABLESINDEX).iChg = False
                               mReadPnf tmAgf.iPnfPay  'Set phone number
                               Exit For
                           End If
                       End If
                    Next ilListIndex
                End If
            ElseIf imInfoBoxNo = PHONEINDEX Then
'                gGetPhoneNo mkcPhone, slStr
'                If slStr <> tmAgf.sPhone Then
'                    tmAgf.sPhone = slStr
'                    ilRet2 = btrUpdate(hmAgf, tmAgf, imAgfRecLen)
'                    tmInfoCtrls(PHONEINDEX).iChg = False
'                End If
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        ilRet = gBinarySearchAgf(tmAgf.iCode)
        If ilRet <> -1 Then
            tgCommAgf(ilRet).iCode = tmAgf.iCode
            tgCommAgf(ilRet).sName = tmAgf.sName
            tgCommAgf(ilRet).sCityID = tmAgf.sCityID
            tgCommAgf(ilRet).sCreditRestr = tmAgf.sCreditRestr
            tgCommAgf(ilRet).iMnfSort = tmAgf.iMnfSort
            tgCommAgf(ilRet).sState = tmAgf.sState
        End If
    mSaveAgfRec = True
    Exit Function
mSaveAgfRecErr:
    mSaveAgfRec = False
    Exit Function
End Function
Private Function mSaveCdfRec()
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slEnterDate As String      'Saved entry date
    Dim slEnterTime As String      'Saved entry time
    Dim ilDateEnter0 As Integer
    Dim ilDateEnter1 As Integer
    Dim ilDateAction0 As Integer
    Dim ilDateAction1 As Integer
    Dim ilTimeEnter0 As Integer
    Dim ilTimeEnter1 As Integer
    Dim llComment As Long
    'Dim ilSelStart As Integer
    mSaveCdfRec = False
    If smComCtrls(COMMENTINDEX) = "" Then
        Exit Function
    End If
    If smActionDate <> "" And gValidDate(smActionDate) Then
        gPackDate smActionDate, ilDateAction0, ilDateAction1
    Else
        If smActionDate <> "" Then
            imCommentBoxNo = -1
            pbcCommSTab.SetFocus
            Exit Function
        Else
            gPackDate smActionDate, ilDateAction0, ilDateAction1
        End If
    End If
    slEnterDate = Format$(gNow(), "m/d/yy")
    gPackDate slEnterDate, ilDateEnter0, ilDateEnter1
    slEnterTime = Format$(gNow(), "h:m:s AM/PM")
    gPackTime slEnterTime, ilTimeEnter0, ilTimeEnter1
    tmCdf.lCode = 0
    tmCdf.iAgfCode = imAgfCode
    tmCdf.iAdfCode = imAdfCode
    tmCdf.iActionDate(0) = ilDateAction0
    tmCdf.iActionDate(1) = ilDateAction1
    tmCdf.iDateEntrd(0) = ilDateEnter0
    tmCdf.iDateEntrd(1) = ilDateEnter1
    tmCdf.iTimeEntrd(0) = ilTimeEnter0
    tmCdf.iTimeEntrd(1) = ilTimeEnter1
    tmCdf.iUrfCode = tgUrf(0).iCode
    'tmCdf.iStrLen = Len(Trim$(smComCtrls(COMMENTINDEX)))
    tmCdf.sComment = Trim$(smComCtrls(COMMENTINDEX)) & Chr$(0) ' & Chr$(0)
    imCdfRecLen = Len(tmCdf) '- Len(tmCdf.sComment) + tmCdf.iStrLen + 2
    ilRet = btrInsert(hmCdf, tmCdf, imCdfRecLen, INDEXKEY0)
    If ilRet = BTRV_ERR_NONE Then
        mSaveCdfRec = True
        imCommentBoxNo = -1
        edcCommDropDown.Text = ""
        edcInputComment.Text = ""
        'Add to edcComment the updated comment records
        'Add enter / action dates / adver/agency then comment below
        If smActionDate <> "" Then
            slStr = "Entered: " & Format$(gNow(), "m/d/yy") & sgTB & "Action: " & smActionDate & sgTB
        Else
            slStr = "Entered: " & Format$(gNow(), "m/d/yy") & sgTB
        End If
        If imAgencyFlag = 0 Then 'agency
            If lbcAdvt.ListIndex > 0 Then
                slStr = slStr & lbcAdvt.List(lbcAdvt.ListIndex)
            End If
        ElseIf imDirectFlag = False Then
            If lbcAgency.ListIndex > 0 Then
                slStr = slStr & lbcAgency.List(lbcAgency.ListIndex)
            End If
        End If
        'ilSelStart = Len(edcComment.Text)
        '5/21/18: Bypass checking for illegal character as Action date and enter date have slask with them and the comment has been checked other places.
        imChgMode = True
        
        'L.Bianchi, add comments with picture Box
        'If edcComment.Text <> "" Then
            'edcComment.Text = edcComment.Text & sgCR & sgLF & slStr & sgCR & sgLF & smComCtrls(COMMENTINDEX)
        'Else
            'edcComment.Text = slStr & sgCR & sgLF & smComCtrls(COMMENTINDEX)
        'End If
        
        llComment = UBound(sComments)
        llComment = llComment + 1
        ReDim Preserve sComments(llComment)
        sComments(llComment) = slStr
        
        'L.Bianchi
        smComCtrls(COMMENTINDEX) = Replace(smComCtrls(COMMENTINDEX), vbCrLf, " ")
        mBreakText smComCtrls(COMMENTINDEX)
        mSetVbcCommentBoxRatio
        If vbcCommentBox.Value = vbcCommentBox.Max Then
            mFillCommentBox
        Else
            vbcCommentBox.Value = vbcCommentBox.Max
        End If
        
        imChgMode = False
        'edcComment.SelStart = Len(edcComment.Text)  'ilSelStart
'        edcComment.SelStart = 0
        For ilLoop = imLBComCtrls To UBound(tmComCtrls) Step 1
            tmComCtrls(ilLoop).iChg = False
            smComCtrls(ilLoop) = ""
            tmComCtrls(ilLoop).sShow = ""
        Next ilLoop
        pbcComment.Cls
        pbcComment_Paint
    End If
    smActionDate = ""
    Exit Function

    mSaveCdfRec = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSaveRec                        *
'*                                                     *
'*             Created:7/20/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Update or added record          *
'*                                                     *
'*******************************************************
Private Function mSaveRec() As Integer
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slTaxGross                    slTaxNet                      slSlsTax                  *
'*                                                                                        *
'******************************************************************************************

'
'   iRet = mSaveRec()
'   Where:
'       iRet (O)- True if updated or added, False if not updated or added
'
    Dim llRow As Long
    Dim llLoop As Long
    Dim ilFound As Integer
    Dim ilTest As Integer
    Dim llRecPos As Long
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim slStr As String
    Dim slMsg As String
    Dim slAmount As String
    Dim slAdjAmount As String
    Dim slDate As String
    Dim slCheckNo As String
    Dim llDate As Long
    Dim slBD As String
    Dim ilRes As Integer
    Dim slCurrAR As String
    Dim llInvDate As Long
    Dim ilNoInv As Integer
    Dim llNoDays As Long
    Dim ilLastAdf As Integer
    Dim ilLastAgf As Integer
    Dim tlRvf As RVF
    Dim tlFrom As RVF
    Dim tlJERvf As RVF
    Dim ilChgDate As Integer
    Dim llAdfRecPos As Long
    Dim llAgfRecPos As Long
    Dim slOrigOnAcct As String
    Dim slResultOnAcct As String
    Dim llOnAcctRecPos As Long
    Dim slNameCode As String
    Dim ilTran As Integer
    Dim slVehTotal As String
    Dim slVehTotalPlusTax As String
    Dim slVehBal As String
    Dim ilMatch As Integer
    Dim ilLastBalanceIndex As Integer   'Index of last transaction which is not zero
    Dim llNetPlusTax As Long            '1-16-02
    Dim slVehTax1Bal As String          '1-16-02
    Dim slVehTax2Bal As String          '1-16-02
    Dim slStrTax1 As String             '1-16-02
    Dim slStrTax2 As String             '1-16-02
    Dim slTemp As String                '1-16-02
    Dim slAmtTax1 As String             '1-16-02
    Dim slAmtTax2 As String             '1-16-02
    Dim slVehBalGross As String         '6-6-03
    Dim slVehTotalGross As String       '6-6-03
    Dim ilMatchGross As Integer         '6-6-03
    Dim ilLastBalanceIndexGross As Integer  '6-6-03
    Dim ilSlfCode As Integer
    Dim slGrossAmount As String
    Dim slRatio As String
    Dim slGrossNet As String
    Dim ilWUCount As Integer
    Dim ilWDCount As Integer
    Dim llAvg As Long
    Dim llAvgIndex As Long
    Dim llAvgInvDate As Long
    Dim blFullyPaid As Boolean
    Dim slSQLQuery As String
    '8/25/20: update last posted date if PO
    Dim slPostDate As String

    'Test transaction date
    llOnAcctRecPos = 0
    If imCollectIndex = 11 Then 'Restore History
        mRestoreTransactions
        mSaveRec = True
        Exit Function
    End If
    If imCollectIndex = 10 Then 'Start up
        If mMakeInvRec() Then
            mSaveRec = True
            Exit Function
        Else
            lmRowNo = -1
            imBoxNo = -1
            mSaveRec = False
            Exit Function
        End If
    End If
    ReDim tmAvgToPayInfo(0 To 0) As AVGTOPAYINFO
    ReDim lmUpdateRvfRecPos(0 To 0) As Long
    ReDim tmVehInv(0 To 0) As VEHINV    'Used for imCollectIndex = 1 (post Cash); = 2 (on Account); = 9 (Journal)
    If (imCollectIndex = 1) Or (imCollectIndex = 9) Then
        llDate = gDateValue(smCheckDate)
    Else
        llDate = gDateValue(smTranDate)
    End If
    If imCollectIndex <> 2 Then 'Bypass date test if On Account
        If (imCollectIndex = 3) And (imType < 4) And (imTabMax <= 2) Then
        Else
            If (llDate <= gDateValue(smPrevEndPeriodDate)) Or (llDate > gDateValue(smNowDate)) Or (llDate > gDateValue(smNextEndPeriodDate)) Then
                Screen.MousePointer = vbDefault
                If gDateValue(smNowDate) < gDateValue(smNextEndPeriodDate) Then
                    ilRes = MsgBox("Date must be between " & gIncOneDay(smPrevEndPeriodDate) & "-" & smNowDate, vbOKOnly + vbExclamation, "Date Error")
                Else
                    ilRes = MsgBox("Date must be between " & gIncOneDay(smPrevEndPeriodDate) & "-" & smNextEndPeriodDate, vbOKOnly + vbExclamation, "Date Error")
                End If
                lmRowNo = -1
                imBoxNo = -1    'imCheckDate (if using date, then edcDropDown.Text must be set)
                mSaveRec = False
                Exit Function
            End If
        End If
    End If
    'Obtain check number and transaction date from transfer
    slPostDate = smCheckDate
    If (imCollectIndex = 2) Or (imCollectIndex = 3) Then
        ilFound = True
        If imCollectIndex = 2 Then  'Apply On Account
            'ilRet = gParseItem(lbcTransactionCode.List(imPORowNo - 1), 2, "\", slCode)
            ilRet = gParseItem(tgTransactionCode(imPORowNo - 1).sKey, 2, "\", slCode)
        Else    'Transfer entry
            'ilRet = gParseItem(lbcTransactionCode.List(imXRowNo - 1), 2, "\", slCode)
            ilRet = gParseItem(tgTransactionCode(imXRowNo - 1).sKey, 2, "\", slCode)
        End If
        If ilRet = CP_MSG_NONE Then
            llRecPos = Val(slCode)
            ilRet = btrGetDirect(hmRvf, tlFrom, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet <> BTRV_ERR_NONE Then
                Exit Function
            End If
        Else
            Exit Function
        End If
        If imCollectIndex = 2 Then  'Apply On Account
            gUnpackDate tlFrom.iTranDate(0), tlFrom.iTranDate(1), slPostDate
        End If
    End If
    Screen.MousePointer = vbHourglass  'Wait
    ilRet = btrBeginTrans(hmRvf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Save Stopped, Try Later", vbOkOnly + vbExclamation, "Erase")
        gLogBtrError ilRet, "BeginTrans: Save Stopped, Try Later"
        Exit Function
    End If
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Then
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If (Len(Trim$(smSave(2, llRow))) > 0) And (gCompAbsNumberStr(smSave(2, llRow), ".00") > 0) Then
                Do  'Loop until record updated or added
                    ilFound = True

                    'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                    ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        Else
                            If tmRvf.sTranType <> "IN" Then
                                'For ilTest = llRow - 1 To LBound(smSave, 2) Step -1
                                For ilTest = llRow - 1 To LBONE Step -1
                                    ilRet = gParseItem(tgTransactionCode(ilTest - 1).sKey, 2, "\", slCode)
                                    If ilRet = CP_MSG_NONE Then
                                        llRecPos = Val(slCode)
                                        ilRet = btrGetDirect(hmRvf, tlRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                        If ilRet = BTRV_ERR_NONE Then
                                            If (tlRvf.lInvNo = tmRvf.lInvNo) And (tlRvf.sTranType = "IN") Then
                                                tmRvf = tlRvf
                                                Exit For
                                            End If
                                            If (tlRvf.lInvNo <> tmRvf.lInvNo) Then
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Next ilTest
                            End If
                        End If
                    Else
                        ilFound = False
                    End If
                    If ilFound Then
                        tmRvf.lCefCode = 0  'Remove any comment
                        'Determine number of vehicles for the invoice
                        mCreateVehInv
                        If imCollectIndex = 1 Then  'Post Receipt
                            tmAvgToPayInfo(UBound(tmAvgToPayInfo)).lInvNo = tmRvf.lInvNo
                            gUnpackDateLong tmRvf.iTranDate(0), tmRvf.iTranDate(1), tmAvgToPayInfo(UBound(tmAvgToPayInfo)).lInvDate
                            tmAvgToPayInfo(UBound(tmAvgToPayInfo)).bAdfUpdated = False
                            tmAvgToPayInfo(UBound(tmAvgToPayInfo)).bAgfUpdated = False
                            ReDim Preserve tmAvgToPayInfo(0 To UBound(tmAvgToPayInfo) + 1) As AVGTOPAYINFO
                            gPackDate smCheckDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = Val(smCheckNo)
                            tmRvf.sCheckNo = smCheckNo
                            tmRvf.sTranType = "PI"
                        ElseIf imCollectIndex = 2 Then  'On Account
                            tmAvgToPayInfo(UBound(tmAvgToPayInfo)).lInvNo = tmRvf.lInvNo
                            gUnpackDateLong tmRvf.iTranDate(0), tmRvf.iTranDate(1), tmAvgToPayInfo(UBound(tmAvgToPayInfo)).lInvDate
                            tmAvgToPayInfo(UBound(tmAvgToPayInfo)).bAdfUpdated = False
                            tmAvgToPayInfo(UBound(tmAvgToPayInfo)).bAgfUpdated = False
                            ReDim Preserve tmAvgToPayInfo(0 To UBound(tmAvgToPayInfo) + 1) As AVGTOPAYINFO
                            tmRvf.iTranDate(0) = tlFrom.iTranDate(0)
                            tmRvf.iTranDate(1) = tlFrom.iTranDate(1)
                            'gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = tlFrom.lCheckNo
                            tmRvf.sCheckNo = tlFrom.sCheckNo
                            tmRvf.sTranType = "PI"
                        ElseIf imCollectIndex = 3 Then  'Transfer
                             '1-30-02 Test to save record as WT as been discussed and agreed that it should always be a PI on a tranfer.  If WT is required, use Journal entry
                             tmRvf.sTranType = "PI"
                            'gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slTestDate
                            'If (gDateValue(slTestDate) <= gDateValue(smPrevEndPeriodDate)) Or (gDateValue(slTestDate) > gDateValue(smNowDate)) Or (gDateValue(slTestDate) > gDateValue(smNextEndPeriodDate)) Then
                            '    tmRvf.sTranType = "WT"
                            'End If

                            'tmRvf.iTranDate(0) = tlFrom.iTranDate(0)
                            'tmRvf.iTranDate(1) = tlFrom.iTranDate(1)
                            gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = tlFrom.lCheckNo
                            tmRvf.sCheckNo = tlFrom.sCheckNo
                            'same transaction type
                        End If
                        If imCollectIndex = 3 Then
                            tmRvf.sAction = "I"
                        ElseIf imCollectIndex = 2 Then  'On Account
                            tmRvf.sAction = "A"
                        Else
                            tmRvf.sAction = ""
                        End If
                        'Use transaction date for aging date if Merchandising or Promotion
                        'as many different billing months will have the same invoice number
                        If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                            slDate = gAdjYear(slDate)
                            tmRvf.iAgePeriod = month(slDate)
                            tmRvf.iAgingYear = year(slDate)
                        End If
                        '12/28/07-  added =
                        If UBound(tmVehInv) - 1 >= LBound(tmVehInv) Then
                            'Compute total Net
                            slVehTotal = ".00"
                            slVehTax1Bal = "0.00"
                            slVehTax2Bal = "0.00"
                            llNetPlusTax = 0
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                'slVehTotal = gAddStr(slVehTotal, tmVehInv(ilTran).sAmount)
                                llNetPlusTax = llNetPlusTax + tmVehInv(ilTran).lNetPlusTax  '1-16-02  gather combined net plus taxes
                            Next ilTran
                            slVehTotal = gLongToStrDec(llNetPlusTax, 2) '1-16-02
                            slVehBal = ".00"
                            slStr = gSubStr(slVehTotal, smSave(2, llRow))
                            If gCompNumberStr(slStr, ".00") = 0 Then
                                ilMatch = True
                            Else
                                ilMatch = False
                            End If
                            ilLastBalanceIndex = UBound(tmVehInv) - 1
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                If gCompNumberStr(tmVehInv(ilTran).sAmount, ".00") <> 0 Then
                                    ilLastBalanceIndex = ilTran
                                End If
                            Next ilTran
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                slStr = ""
                                gStrToPDN slStr, 2, 6, tmRvf.sGross
                                llNetPlusTax = 0                        '1-16-02
                                tmRvf.lTax1 = 0                         '1-16-02
                                tmRvf.lTax2 = 0                         '1-16-02
                                If ilMatch Then
                                    slStr = tmVehInv(ilTran).sAmount
                                    slStrTax1 = gLongToStrDec(tmVehInv(ilTran).lTax1, 2)   '1-16-02
                                    slStrTax2 = gLongToStrDec(tmVehInv(ilTran).lTax2, 2)   '1-16-02
                                Else
                                    If ilTran <> ilLastBalanceIndex Then
                                        If ilTran < ilLastBalanceIndex Then
                                            'Added 7/1/04
                                            If gCompNumberStr(slVehBal, smSave(2, llRow)) <> 0 Then
                                                slStr = gDivStr(gMulStr(smSave(2, llRow), tmVehInv(ilTran).sAmount), slVehTotal)
                                                slVehBal = gAddStr(slVehBal, slStr)
                                                'Add code to check that it is not an overpayment
                                                '7/1/04
                                                If gCompNumberStr(slVehBal, smSave(2, llRow)) > 0 Then
                                                    slStr = gAddStr(slStr, gSubStr(smSave(2, llRow), slVehBal))
                                                    slVehBal = smSave(2, llRow)
                                                End If
                                                '1-16-02
                                                slTemp = gLongToStrDec(tmVehInv(ilTran).lTax1, 2)
                                                slStrTax1 = gDivStr(gMulStr(smSave(2, llRow), slTemp), slVehTotal)
                                                slVehTax1Bal = gAddStr(slVehTax1Bal, slStrTax1)
                                                slTemp = gLongToStrDec(tmVehInv(ilTran).lTax2, 2)
                                                slStrTax2 = gDivStr(gMulStr(smSave(2, llRow), slTemp), slVehTotal)
                                                slVehTax2Bal = gAddStr(slVehTax2Bal, slStrTax2)
                                            Else
                                                slStr = ".00"
                                                slStrTax1 = ".00"
                                                slStrTax1 = ".00"
                                            End If

                                        Else
                                            slStr = ".00"
                                            '1-16-02
                                            slStrTax1 = ".00"
                                            slStrTax1 = ".00"
                                        End If
                                    Else            'make up whats remaining
                                        slTemp = gAddStr(slVehTax1Bal, slVehTax2Bal)    '1-16-02
                                        slTemp = gAddStr(slTemp, slVehBal)              '1-16-02
                                        slStr = gSubStr(smSave(2, llRow), slVehBal)     '1-16-02
                                        slStr = gSubStr(smSave(2, llRow), slTemp)


                                        '1-16-02
                                        slTemp = gLongToStrDec(tmVehInv(ilTran).lTax1, 2)
                                        slStrTax1 = gDivStr(gMulStr(smSave(2, llRow), slTemp), slVehTotal)

                                        slTemp = gLongToStrDec(tmVehInv(ilTran).lTax2, 2)
                                        slStrTax2 = gDivStr(gMulStr(smSave(2, llRow), slTemp), slVehTotal)
                                        slStr = gSubStr(slStr, (gAddStr(slStrTax1, slStrTax2)))

                                    End If
                                End If
                                If Asc(Trim$(tmVehInv(ilTran).sAmount)) = Asc("-") Then
                                    If Asc(Trim$(smSave(2, llRow))) = Asc("-") Then
                                        slAmount = "-" & Trim$(slStr)
                                        slAmtTax1 = "-" & Trim$(slStrTax1)      '1-16-02
                                        slAmtTax2 = "-" & Trim$(slStrTax2)      '1-16-02
                                    Else
                                        slAmount = Mid$(Trim$(slStr), 2)
                                        slAmtTax1 = Mid$(Trim$(slStrTax1), 2)    '1-16-02
                                        slAmtTax2 = Mid$(Trim$(slStrTax2), 2)    '1-16-02
                                    End If
                                Else
                                    If Asc(Trim$(smSave(2, llRow))) = Asc("-") Then
                                        slAmount = Mid$(Trim$(slStr), 2)
                                        slAmtTax1 = Mid$(Trim$(slStrTax1), 2)    '1-16-02
                                        slAmtTax2 = Mid$(Trim$(slStrTax2), 2)    '1-16-02
                                    Else
                                        slAmount = "-" & Trim$(slStr)
                                        slAmtTax1 = "-" & Trim$(slStrTax1)  '1-16-02
                                        slAmtTax2 = "-" & Trim$(slStrTax2)   '1-16-02
                                    End If
                                End If
                                'If Asc(Trim$(smSave(2, llRow))) = Asc("-") Then
                                '    slAmount = Mid$(Trim$(slStr), 2)
                                'Else
                                '    slAmount = "-" & Trim$(slStr)
                                'End If
                                gStrToPDN slAmount, 2, 6, tmRvf.sNet

                                '1-16-02
                                tmRvf.lTax1 = gStrDecToLong(slAmtTax1, 2)
                                tmRvf.lTax2 = gStrDecToLong(slAmtTax2, 2)
                                lmSave(2, llRow) = tmRvf.lTax1
                                lmSave(3, llRow) = tmRvf.lTax2
                                tmRvf.iAirVefCode = tmVehInv(ilTran).iAirVefCode
                                tmRvf.iBillVefCode = tmVehInv(ilTran).iBillVefCode
                                tmRvf.iPkLineNo = tmVehInv(ilTran).iPkLineNo
                                tmRvf.iMnfGroup = tmVehInv(ilTran).iMnfGroup
                                tmRvf.iMnfItem = tmVehInv(ilTran).iMnfItem
                                tmRvf.lSbfCode = tmVehInv(ilTran).lSbfCode
                                tmRvf.iBacklogTrfCode = tmVehInv(ilTran).iBacklogTrfCode
                                tmRvf.lGsfCode = tmVehInv(ilTran).lGsfCode
                                tmRvf.lAcquisitionCost = 0
                                gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                                gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                                tmRvf.sInvoiceUndone = "N"
                                tmRvf.lCode = 0
                                tmRvf.iUrfCode = tgUrf(0).iCode
                                tmRvf.lPcfCode = tmVehInv(ilTran).lPcfCode 'TTP 10852 / 10849
                                '2-4-02 dont create a zero trans
                                'If (slAmount <> "-0.00") And (slAmount <> ".00") And (slAmount <> "-.00") And (slAmount <> "0.00") Then
                                If gCompAbsNumberStr(slAmount, ".00") <> 0 Then
                                    'tmRvf.sUnused = ""
                                    ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                                    slMsg = "mSaveRec (btrInsert: Receivable)"
                                    If ilRet = BTRV_ERR_NONE Then
                                        ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                        ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                                    End If
                                End If
                            Next ilTran
                        Else
'                            slStr = ""
'                            gStrToPDN slStr, 2, 6, tmRvf.sGross
'                            If Asc(Trim$(smSave(2, llRow))) = Asc("-") Then
'                                slAmount = Mid$(Trim$(smSave(2, llRow)), 2)
'                            Else
'                                slAmount = "-" & Trim$(smSave(2, llRow))
'                            End If
'                            '1-18-02 Backcompute net input to take out taxes so that the gross can be calculate
'                            'send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
'                            '2-24-04 pass ntr code
'                            '8/9/06:  Change to use agency and advertiser from rvf instead of tmAgf.iCode and tmAdf.iCode as those values might not be valid at this point
'                            'slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, lmNTRSbfCode(llRow), lmTax1, lmTax2)
'                            slAmount = mGetAgyNet(tmVehInv(0).iAgfCode, tmVehInv(0).iAdfCode, tmRvf.iAirVefCode, "0.00", slAmount, lmNTRSbfCode(llRow), lmTax1, lmTax2)
'                            tmRvf.lTax1 = lmTax1
'                            tmRvf.lTax2 = lmTax2
'
'                            gStrToPDN slAmount, 2, 6, tmRvf.sNet
'                            tmRvf.lAcquisitionCost = 0
'                            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
'                            gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
'                            tmRvf.lCode = 0
'                            tmRvf.iUrfCode = tgUrf(0).iCode
'                            '2-4-02 dont create a zero trans
'                            'If (slAmount <> "-0.00") And (slAmount <> ".00") And (slAmount <> "-.00") And (slAmount <> "0.00") Then
'                            If gCompAbsNumberStr(slAmount, ".00") <> 0 Then
'                                tmRvf.sUnused = ""
'                                ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
'                                slMsg = "mSaveRec (btrInsert: Receivable)"
'                                If ilRet = BTRV_ERR_NONE Then
'                                    ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
'                                    ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
'                                End If
'                            End If
                            ilRet = BTRV_ERR_NONE
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 1"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
            End If
            'Add variance
            If (Len(Trim$(smSave(3, llRow))) > 0) And (gCompAbsNumberStr(smSave(3, llRow), ".00") > 0) Then
                Do  'Loop until record updated or added
                    ilFound = True
                    'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                    ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        End If
                    Else
                        ilFound = False
                    End If
                    If ilFound Then
                        tmRvf.lCefCode = 0  'Remove any comment
                        If imCollectIndex = 1 Then  'Post cash
                            gPackDate smCheckDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = Val(smCheckNo)
                            tmRvf.sCheckNo = smCheckNo
                        ElseIf imCollectIndex = 2 Then  'On Account
'                            'tmRvf.iTranDate(0) = tlFrom.iTranDate(0)
'                            'tmRvf.iTranDate(1) = tlFrom.iTranDate(1)
'                            gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            'Use the Now date unless it is outside of the next period dates to close.  Then
                            'use the first valid date within that period.  Jim 11/11/03
                            llDate = gDateValue(smNowDate)
                            If (llDate <= gDateValue(smPrevEndPeriodDate)) Or (llDate > gDateValue(smNextEndPeriodDate)) Then
                                llDate = gDateValue(smPrevEndPeriodDate) + 1
                            End If
                            gPackDateLong llDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = tlFrom.lCheckNo
                            tmRvf.sCheckNo = tlFrom.sCheckNo
                        ElseIf imCollectIndex = 3 Then  'Transfer
                            'tmRvf.iTranDate(0) = tlFrom.iTranDate(0)
                            'tmRvf.iTranDate(1) = tlFrom.iTranDate(1)
                            gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = tlFrom.lCheckNo
                            tmRvf.sCheckNo = tlFrom.sCheckNo
                        End If
                        tmRvf.sTranType = "WV"
                        If imCollectIndex = 3 Then  'Transfer entry
                            tmRvf.sAction = "I"
                        Else
                            tmRvf.sAction = ""
                        End If
                        'Use transaction date for aging date if Merchandising or Promotion
                        'as many different billing months will have the same invoice number
                        If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                            slDate = gAdjYear(slDate)
                            tmRvf.iAgePeriod = month(slDate)
                            tmRvf.iAgingYear = year(slDate)
                        End If
                        If UBound(tmVehInv) - 1 > LBound(tmVehInv) Then
                            'tmRvf.iAirVefCode = 0
                            'tmRvf.iBillVefCode = 0
                            'tmRvf.iPkLineNo = 0
                        End If
                        slStr = ""
                        gStrToPDN slStr, 2, 6, tmRvf.sGross
                        If Asc(Trim$(smSave(3, llRow))) = Asc("-") Then
                            slAmount = Mid$(Trim$(smSave(3, llRow)), 2)
                        Else
                            slAmount = "-" & Trim$(smSave(3, llRow))
                        End If
                        gStrToPDN slAmount, 2, 6, tmRvf.sNet
                        tmRvf.lAcquisitionCost = 0
                        gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                        gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                        tmRvf.sInvoiceUndone = "N"
                        tmRvf.lCode = 0
                        tmRvf.iUrfCode = tgUrf(0).iCode
                        tmRvf.lTax1 = 0
                        tmRvf.lTax2 = 0
                        lmSave(2, llRow) = tmRvf.lTax1
                        lmSave(3, llRow) = tmRvf.lTax2
                        'Code below is valid, so if we want to include tax just remove comments
                        'Except do we adjust the variance dowm?
                        'Example variance of -$1.00 yields at tax of -$.01.  When looking at collection screen it
                        'shows that -$.01 is still missing (-$1.00 + -$.01).  To correct, adjust Net amount by subtracting tax amount
                        'Might need to adjust gross instead of net
                        'gPDNToStr tmRvf.sGross, 2, slTaxGross
                        'gPDNToStr tmRvf.sNet, 2, slTaxNet
                        'slSlsTax = "Y"          '2-24-04
                        'If tmRvf.lSbfCode > 0 Then
                        '    tmSbfSrchKey1.lCode = tmRvf.lSbfCode
                        '    ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                        '    If (ilRet = BTRV_ERR_NONE) Then
                        '        If tmSbf.iTrfCode > 0 Then
                        '            slSlsTax = "Y"
                        '        Else
                        '            slSlsTax = "N"
                        '        End If
                        '    End If
                        'End If
                        'mGetTaxAmt tmRvf.sCashTrade, tmAgf.iCode, tmAdf.iCode, tmRvf.iAirVefCode, tmRvf.iMnfItem, tmRvf.lSbfCode, slTaxGross, slTaxNet, slSlsTax, lmTax1, lmTax2
                        'tmRvf.lTax1 = lmTax1
                        'tmRvf.lTax2 = lmTax2
                        'If lmTax1 or lmTax2 <> 0 then
                        '     slTaxNet = gSubStr(slTaxNet, gLongToStr(lmTax1, 2))
                        '     slTaxNet = gSubStr(slTaxNet, gLongToStr(lmTax2, 2))
                        '     gStrToPDN slTaxNet, 2, 6, tmRvf.sNet
                        'End If
                        '1/17/09: Added buyer
                        'tmRvf.sUnused = ""
                        ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                        slMsg = "mSaveRec (btrInsert: Receivable)"
                        If ilRet = BTRV_ERR_NONE Then
                            ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                            ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 2"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
            End If
        Next llRow
        'Create or update "On Account"
        If (imCollectIndex = 1) Or (imCollectIndex = 3) Then
            If (Len(smPostOnAccount) > 0) And (gCompAbsNumberStr(smPostOnAccount, ".00") > 0) Then
                Do  'Loop until record updated or added
                    ilFound = True
                    If imCollectIndex = 1 Then  'Post cash
                        'ilRet = gParseItem(lbcTransactionCode.List(0), 2, "\", slCode)
                        ilRet = gParseItem(tgTransactionCode(0).sKey, 2, "\", slCode)
                    Else    'Transfer Entry
                        'ilRet = gParseItem(lbcTransactionCode.List(imXRowNo - 1), 2, "\", slCode)
                        ilRet = gParseItem(tgTransactionCode(imXRowNo - 1).sKey, 2, "\", slCode)
                    End If
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        End If
                    Else
                        ilFound = False
                    End If
                    If (Not ilFound) And (imCollectIndex = 1) Then
                        If (imAgencyFlag = 1) Or imDirectFlag Then
                            tmRvf.iAdfCode = imAdfCode
                        Else
                            tmRvf.iAgfCode = imAgfCode
                        End If
                        If (imType = 0) Or (imType = 1) Then
                            tmRvf.sCashTrade = "C"
                        ElseIf (imType = 2) Or (imType = 3) Then
                            tmRvf.sCashTrade = "T"
                        ElseIf (imType = 4) Or (imType = 5) Then
                            tmRvf.sCashTrade = "M"
                        ElseIf (imType = 6) Or (imType = 7) Then
                            tmRvf.sCashTrade = "P"
                        End If
                        tmRvf.sType = ""
                        ilFound = True
                    End If
                    If ilFound Then
                        If (imAgencyFlag = 1) Or imDirectFlag Then
                            tmRvf.iAgfCode = 0
                            tmAdfSrchKey.iCode = tmRvf.iAdfCode
                            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                            If ilRet = BTRV_ERR_NONE Then
                                ilSlfCode = tmAdf.iSlfCode
                            Else
                                ilSlfCode = 0
                            End If
                        Else
                            tmRvf.iAdfCode = 0
                            If imAdvtListIndex > 0 Then
                                slNameCode = tgColAdvertiser(imAdvtListIndex - 1).sKey    'Traffic!lbcAdvertiser.List(imAdvtListIndex - 1)
                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                If ilRet = CP_MSG_NONE Then
                                    tmRvf.iAdfCode = Val(slCode)
                                    tmAdfSrchKey.iCode = tmRvf.iAdfCode
                                    ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                                    If ilRet = BTRV_ERR_NONE Then
                                        ilSlfCode = tmAdf.iSlfCode
                                    Else
                                        ilSlfCode = 0
                                    End If
                                Else
                                    ilSlfCode = 0
                                End If
                            Else
                                tmAgfSrchKey.iCode = tmRvf.iAgfCode
                                ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                                If ilRet = BTRV_ERR_NONE Then
                                    ilSlfCode = tmAgf.iSlfCode
                                Else
                                    ilSlfCode = 0
                                End If
                            End If
                        End If
                        'Jim 7/8/03: Use the salesperson from agency or advertiser instead of zero.
                        tmRvf.iSlfCode = ilSlfCode
                        tmRvf.lPrfCode = 0
                        tmRvf.lCntrNo = 0
                        tmRvf.iAirVefCode = 0
                        tmRvf.iBillVefCode = 0
                        If imCollectIndex = 1 Then  'Post cash
                            If imOnAcctVehListIndex > 0 Then
                                slNameCode = tmOnAcctVeh(imOnAcctVehListIndex - 1).sKey    'Traffic!lbcAdvertiser.List(imAdvtListIndex - 1)
                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                If ilRet = CP_MSG_NONE Then
                                    tmRvf.iAirVefCode = Val(slCode)
                                    tmRvf.iBillVefCode = Val(slCode)
                                End If
                            End If
                        End If
                        tmRvf.lInvNo = 0
                        tmRvf.iMnfGroup = 0
                        tmRvf.iMnfItem = 0
                        tmRvf.lCefCode = 0
                        tmRvf.lTax1 = 0
                        tmRvf.lTax2 = 0
                        tmRvf.lSbfCode = 0
                        tmRvf.lAcquisitionCost = 0
                        gPackDate "", tmRvf.iInvDate(0), tmRvf.iInvDate(1)
                        If imCollectIndex = 1 Then  'Post cash
                            '6/7/15: Changed check number to string
                            'mRvf.lCheckNo = Val(smCheckNo)
                            tmRvf.sCheckNo = smCheckNo
                            gPackDate smCheckDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            slDate = gAdjYear(smCheckDate)
                            If tgSpf.sRUseCorpCal = "Y" Then
                                slDate = gObtainStartCorp(slDate, True)
                                slDate = Format$(gDateValue(slDate) + 15, "m/d/yy")
                                slDate = gAdjYear(slDate)
                            End If
                            tmRvf.iAgePeriod = month(slDate)
                            tmRvf.iAgingYear = year(slDate)
                        ElseIf imCollectIndex = 3 Then  'Transfer
                            'tmRvf.iTranDate(0) = tlFrom.iTranDate(0)
                            'tmRvf.iTranDate(1) = tlFrom.iTranDate(1)
                            gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            '6/7/15: Changed check number to string
                            'tmRvf.lCheckNo = tlFrom.lCheckNo
                            tmRvf.sCheckNo = tlFrom.sCheckNo
                            tmRvf.iAgePeriod = tlFrom.iAgePeriod
                            tmRvf.iAgingYear = tlFrom.iAgingYear
                        End If
                        tmRvf.sTranType = "PO"
                        If imCollectIndex = 3 Then  'Transfer Entry
                            tmRvf.sAction = "I"
                        Else
                            tmRvf.sAction = ""
                        End If
                        'Use transaction date for aging date if Merchandising or Promotion
                        'as many different billing months will have the same invoice number
                        If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                            slDate = gAdjYear(slDate)
                            tmRvf.iAgePeriod = month(slDate)
                            tmRvf.iAgingYear = year(slDate)
                        End If
                        slStr = ""
                        gStrToPDN slStr, 2, 6, tmRvf.sGross
                        If Asc(smPostOnAccount) = Asc("-") Then
                            slAmount = Mid$(smPostOnAccount, 2)
                        Else
                            slAmount = "-" & smPostOnAccount
                        End If
                        gStrToPDN slAmount, 2, 6, tmRvf.sNet
                        gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                        gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                        tmRvf.sInvoiceUndone = "N"
                        'Add On Account Comment
                        'tmCef.iStrLen = Len(smOnAccountComment)
                        tmCef.sComment = Trim$(Left$(smOnAccountComment, Len(tmCef.sComment) - 2)) & Chr$(0) '& Chr$(0) 'sgTB
                        'imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
                        imCefRecLen = Len(tmCef)
                        'If imCefRecLen - 2 > 7 Then '-2 so the control character at the end is not counted
                        If Trim$(smOnAccountComment) <> "" Then
                            tmCef.lCode = 0 'Autoincrement
                            ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
                        Else
                            tmCef.lCode = 0
                            ilRet = BTRV_ERR_NONE
                        End If
                        If ilRet <> BTRV_ERR_NONE Then
                            ilCRet = btrAbortTrans(hmRvf)
                            Screen.MousePointer = vbDefault    'Default
                            'ilRet = MsgBox("File in Use [Re-save], Insert into CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                            gLogBtrError ilRet, "File in Use [Re-save], Insert into CEF: Point 3"
                            mSaveRec = False
                            Exit Function
                        End If
                        tmRvf.lCefCode = tmCef.lCode
                        tmRvf.lCode = 0
                        tmRvf.iUrfCode = tgUrf(0).iCode
                        '1/17/09: Added buyer
                        'tmRvf.sUnused = ""
                        ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                        slMsg = "mSaveRec (btrInsert: Receivable)"
                        If ilRet = BTRV_ERR_NONE Then
                            ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                            ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 4"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
            End If
            If imCollectIndex = 3 Then  'Transferr Entry
                Do  'Loop until record updated or added
                    ilFound = True
                    'ilRet = gParseItem(lbcTransactionCode.List(imXRowNo - 1), 2, "\", slCode)
                    ilRet = gParseItem(tgTransactionCode(imXRowNo - 1).sKey, 2, "\", slCode)
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        End If
                    Else
                        ilFound = False
                    End If
                    If ilFound Then
                        If (tmRvf.sTranType = "PO") And (igPOReturn > 0) Then
                            If tmRvf.lCefCode > 0 Then
                                imCefRecLen = Len(tmCef)    '1009
                                tmCefSrchKey.lCode = tmRvf.lCefCode
                                ilRet = btrGetEqual(hmCef, tmCef, imCefRecLen, tmCefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                                If ilRet = BTRV_ERR_NONE Then
                                    tmCef.lCode = 0 'Autoincrement
                                    ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
                                Else
                                    tmCef.lCode = 0
                                    ilRet = BTRV_ERR_NONE
                                End If
                                tmRvf.lCefCode = tmCef.lCode
                            End If
                            'Change the Agency or adveretiser, then insert record
                            'next, change the amount of the PO
                            If igPOReturn = 2 Then
                                tmRvf.iAdfCode = igPOCodeXFre
                                tmRvf.iAgfCode = 0
                            Else
                                tmRvf.iAgfCode = igPOCodeXFre
                                tmRvf.iAdfCode = 0
                            End If
                            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                            'gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            'Remove via Mary 2/17/04, should not change the creation date because of the report On Account
                            'gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                            'gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                            'slDate = gAdjYear(slDate)
                            'tmRvf.iAgePeriod = Month(slDate)
                            'tmRvf.iAgingYear = Year(slDate)
                            tmRvf.sInvoiceUndone = "N"
                            tmRvf.lCode = 0
                            tmRvf.iUrfCode = tgUrf(0).iCode
                            '1/17/09: Added buyer
                            'tmRvf.sUnused = ""
                            ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                            slMsg = "mSaveRec (btrInsert: Receivable)"
                            If ilRet = BTRV_ERR_NONE Then
                                ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                            End If
                            ilRet = gParseItem(tgTransactionCode(imXRowNo - 1).sKey, 2, "\", slCode)
                            llRecPos = Val(slCode)
                            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            gStrToPDN ".00", 2, 6, tmRvf.sNet
                            gStrToPDN ".00", 2, 6, tmRvf.sGross
                            tmRvf.lTax1 = 0          '1-20-02
                            tmRvf.lTax2 = 0          '1-20-02
                            tmRvf.lAcquisitionCost = 0
                            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                            'gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            'Remove via Mary 2/17/04, should not change the creation date because of the report On Account
                            'gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                            'gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                            'slDate = gAdjYear(slDate)
                            'tmRvf.iAgePeriod = Month(slDate)
                            'tmRvf.iAgingYear = Year(slDate)
                            ilRet = btrUpdate(hmRvf, tmRvf, imRvfRecLen)
                        ElseIf (tmRvf.sTranType = "PO") Then
                            mSaveRec = False
                            Exit Function
                        Else
                            'tmRvf.lCefCode = 0
                            '1-30-02 Test to save record as WT as been discussed and agreed that it should always be a PI on a tranfer.  If WT is required, use Journal entry
                            tmRvf.sTranType = "PI"
                            'gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slTestDate
                            'If (gDateValue(slTestDate) <= gDateValue(smPrevEndPeriodDate)) Or (gDateValue(slTestDate) > gDateValue(smNowDate)) Or (gDateValue(slTestDate) > gDateValue(smNextEndPeriodDate)) Then
                            '    tmRvf.sTranType = "WT"
                            'End If
                            gPDNToStr tmRvf.sNet, 2, slStr
                            If Asc(slStr) = Asc("-") Then
                                slAmount = Mid$(slStr, 2)
                            Else
                                slAmount = "-" & slStr
                            End If
                            gStrToPDN slAmount, 2, 6, tmRvf.sNet
                            tmRvf.lTax1 = -tmRvf.lTax1          '1-20-02
                            tmRvf.lTax2 = -tmRvf.lTax2          '1-20-02
                            tmRvf.sAction = "O"
                            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                            gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                            'Use transaction date for aging date if Merchandising or Promotion
                            'as many different billing months will have the same invoice number
                            If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                                gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                                slDate = gAdjYear(slDate)
                                tmRvf.iAgePeriod = month(slDate)
                                tmRvf.iAgingYear = year(slDate)
                            End If
                            tmRvf.lAcquisitionCost = 0
                            tmRvf.sInvoiceUndone = "N"
                            tmRvf.lCode = 0
                            tmRvf.iUrfCode = tgUrf(0).iCode
                            '1/17/09: Added buyer
                            'tmRvf.sUnused = ""
                            ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                            slMsg = "mSaveRec (btrInsert: Receivable)"
                            If ilRet = BTRV_ERR_NONE Then
                                ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                            End If
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 5"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
            End If
        ElseIf (imCollectIndex = 2) Then    'On Account
            Do  'Loop until record updated or added
                ilFound = True
                'ilRet = gParseItem(lbcTransactionCode.List(imPORowNo - 1), 2, "\", slCode)
                ilRet = gParseItem(tgTransactionCode(imPORowNo - 1).sKey, 2, "\", slCode)
                If ilRet = CP_MSG_NONE Then
                    llRecPos = Val(slCode)
                    ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet <> BTRV_ERR_NONE Then
                        ilFound = False
                    Else
                        'tmRec = tmRvf
                        'ilRet = gGetByKeyForUpdate("RVF", hmRvf, tmRec)
                        'tmRvf = tmRec
                        'If ilRet <> BTRV_ERR_NONE Then
                        '    ilFound = False
                        'End If
                    End If
                Else
                    ilFound = False
                End If
                If ilFound Then
                    gPDNToStr tmRvf.sNet, 2, slOrigOnAcct
                    If (Len(smPostOnAccount) = 0) Or (gCompAbsNumberStr(smPostOnAccount, ".00") = 0) Then
                        slAmount = ".00"
                    Else
                        If Asc(smPostOnAccount) = Asc("-") Then
                            slAmount = Mid$(smPostOnAccount, 2)
                        Else
                            slAmount = "-" & smPostOnAccount
                        End If
                    End If
                    gStrToPDN slAmount, 2, 6, tmRvf.sNet
                    slResultOnAcct = gSubStr(slAmount, slOrigOnAcct)
                    'gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                    tmRvf.iUrfCode = tgUrf(0).iCode
'                    If tmRvf.lCefCode <= 0 Then
'                        'Add On Account Comment
'                        tmCef.iStrLen = Len(smOnAccountComment)
'                        tmCef.sComment = Trim$(smOnAccountComment) & Chr$(0) & Chr$(0) 'sgTB
'                        imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
'                        If imCefRecLen - 2 > 7 Then '-2 so the control character at the end is not counted
'                            tmCef.lCode = 0 'Autoincrement
'                            ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
'                        Else
'                            tmCef.lCode = 0
'                            ilRet = BTRV_ERR_NONE
'                        End If
'                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hmRvf)
'                            Screen.MousePointer = vbDefault    'Default
'                            ilRet = MsgBox("File in Use [Re-save], Insert into CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
'                            mSaveRec = False
'                            Exit Function
'                        End If
'                        tmRvf.lCefCode = tmCef.lCode
'                    Else
'                        Do
'                            imCefRecLen = 1009
'                            tmCefSrchKey.lCode = tmRvf.lCefCode
'                            ilRet = btrGetEqual(hmCef, tmCef, imCefRecLen, tmCefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
'                            If ilRet = BTRV_ERR_NONE Then
'                                tmCef.iStrLen = Len(smOnAccountComment)
'                                tmCef.sComment = Trim$(smOnAccountComment) & Chr$(0) & Chr$(0) 'sgTB
'                                imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
'                                ilRet = btrUpdate(hmCef, tmCef, imCefRecLen)
'                            Else
'                                Exit Do
'                            End If
'                        Loop While ilRet = BTRV_ERR_CONFLICT
'                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hmRvf)
'                            Screen.MousePointer = vbDefault    'Default
'                            ilRet = MsgBox("File in Use [Re-save], Update CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
'                            mSaveRec = False
'                            Exit Function
'                        End If
'                    End If
                    ilRet = btrUpdate(hmRvf, tmRvf, imRvfRecLen)
                    slMsg = "mSaveRec (btrUpdate: Receivable)"
                    If ilRet = BTRV_ERR_NONE Then
                        ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                        llOnAcctRecPos = lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos))
                        ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                    End If
                Else
                    ilRet = BTRV_ERR_NONE
                End If
            Loop While ilRet = BTRV_ERR_CONFLICT
            If ilRet <> BTRV_ERR_NONE Then
                ilCRet = btrAbortTrans(hmRvf)
                Screen.MousePointer = vbDefault    'Default
                'ilRet = MsgBox("File in Use [Re-save], Update Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                gLogBtrError ilRet, "File in Use [Re-save], Update Rvf: Point 6"
                'imTerminate = True
                mSaveRec = False
                Exit Function
            End If
        End If
    ElseIf imCollectIndex = 4 Then  'Reverse Entry
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If (Len(Trim$(smSave(3, llRow))) <> 0) And (gCompAbsNumberStr(smSave(3, llRow), ".00") <> 0) Then
                Do  'Loop until record updated or added
                    ilFound = True
                    'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                    ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        End If
                    Else
                        ilFound = False
                    End If
                    If ilFound Then
                        If Trim$(tmRvf.sTranType) = "PO" Then
                            gStrToPDN ".00", 2, 6, tmRvf.sNet
                            gStrToPDN ".00", 2, 6, tmRvf.sGross
                            tmRvf.lTax1 = 0          '1-20-02
                            tmRvf.lTax2 = 0          '1-20-02
                            lmSave(2, llRow) = tmRvf.lTax1
                            lmSave(3, llRow) = tmRvf.lTax2
                            gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                            tmRvf.iUrfCode = tgUrf(0).iCode
                            ilRet = btrUpdate(hmRvf, tmRvf, imRvfRecLen)
                            slMsg = "mSaveRec (btrUpdate: Receivable)"
                        Else
                            tmRvf.lCefCode = 0
                            gPDNToStr tmRvf.sNet, 2, slStr
                            If Asc(slStr) = Asc("-") Then
                                slAmount = Mid$(slStr, 2)
                            Else
                                slAmount = "-" & slStr
                            End If
                            gStrToPDN slAmount, 2, 6, tmRvf.sNet
                            gPDNToStr tmRvf.sGross, 2, slStr
                            If Asc(slStr) = Asc("-") Then
                                slAmount = Mid$(slStr, 2)
                            Else
                                slAmount = "-" & slStr
                            End If
                            gStrToPDN slAmount, 2, 6, tmRvf.sGross
                            tmRvf.lTax1 = -tmRvf.lTax1      '1-20-02 reverse the tax amounts
                            tmRvf.lTax2 = -tmRvf.lTax2      '1-20-02
                            lmSave(2, llRow) = tmRvf.lTax1
                            lmSave(3, llRow) = tmRvf.lTax2
                            tmRvf.sAction = "R"
                            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                            gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                            tmRvf.sInvoiceUndone = "N"
                            tmRvf.lCode = 0
                            tmRvf.iUrfCode = tgUrf(0).iCode
                            '1/17/09: Added buyer
                            'tmRvf.sUnused = ""
                            ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                            slMsg = "mSaveRec (btrInsert: Receivable)"
                        End If
                        If ilRet = BTRV_ERR_NONE Then
                            ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                            ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 7"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
            End If
        Next llRow
    ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then    'Post return check or redeposit
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            Do  'Loop until record updated or added
                ilFound = True
                'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                If ilRet = CP_MSG_NONE Then
                    llRecPos = Val(slCode)
                    ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet <> BTRV_ERR_NONE Then
                        ilFound = False
                    Else
                        '6/7/15: Check number changed to string
                        'If tmRvf.lCheckNo <= 0 Then
                        If (Trim$(tmRvf.sCheckNo) = "") Or (Trim$(tmRvf.sCheckNo) = "0") Then
                            ilFound = False
                        Else
                            If imCollectIndex = 5 Then  'Post return check
                                '6/7/15: Check number changed to string
                                'If (tmRvf.lCheckNo = 0) Or (tmRvf.sAction = "B") Or (tmRvf.sAction = "D") Then
                                If (Trim$(tmRvf.sCheckNo) = "") Or (Trim$(tmRvf.sCheckNo) = "0") Or (tmRvf.sAction = "B") Or (tmRvf.sAction = "D") Then
                                    ilFound = False
                                End If
                            Else    'Redeposit
                                If tmRvf.sAction <> "B" Then
                                    ilFound = False
                                End If
                            End If
                        End If
                    End If
                Else
                    ilFound = False
                End If
                If ilFound Then
                    ilFound = False
                    gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                    llDate = gDateValue(slDate)
                    slBD = lbcBDDate.List(lbcBDDate.ListIndex)
                    ilRet = gParseItem(slBD, 1, ":", slDate)
                    ilRet = gParseItem(slBD, 2, ":", slCheckNo)
                    '6/7/15: Check number changed to string
                    'If (llDate = gDateValue(slDate)) And (tmRvf.lCheckNo = Val(slCheckNo)) Then
                    If (llDate = gDateValue(slDate)) And (UCase$(Trim$(tmRvf.sCheckNo)) = UCase$(Trim$((slCheckNo)))) Then
                        ilFound = True
                    End If
                    '10/15/16: Verify that the amount of the Redeposit check does not exceed the amount of previously Redeposit + Returned check
                    If ilFound Then
                        mWUWD_Counts tmRvf.sCheckNo, tmRvf.lInvNo, ilWUCount, ilWDCount
                        If imCollectIndex = 5 Then  'Returned check
                            If (ilWUCount <> ilWDCount) Then
                                MsgBox "Return Check disallowed as no previously Redeposit check", vbOKOnly + vbInformation, "Redeposit"
                                Exit For
                            End If
                        Else    'Redeposit
                            If ilWUCount <= ilWDCount Then
                                MsgBox "Redeposit Check disallowed as no previously Return check", vbOKOnly + vbInformation, "Redeposit"
                                Exit For
                            End If
                        End If
                    End If
                    If ilFound Then
                        'Remove comment since separated by transactions (Jim: 7/28/03)
                        tmRvf.lCefCode = 0
                        If imCollectIndex = 5 Then  'Post return check
                            tmRvf.sAction = "B"
                            tmRvf.sTranType = "WU"
                        Else    'Redeposit
                            tmRvf.sAction = "D"
                            tmRvf.sTranType = "WD"
                        End If


                        '1-18-02 combine taxes with net
                        'gPDNToLong tmRvf.sNet, llNetPlusTax
                        'llNetPlusTax = llNetPlusTax + tmRvf.lTax1 + tmRvf.lTax2
                        'slStr = gLongToStrDec(llNetPlusTax, 2)

                        gPDNToStr tmRvf.sNet, 2, slStr '1-18-02
                        If Asc(slStr) = Asc("-") Then
                            slAmount = Mid$(slStr, 2)
                        Else
                            slAmount = "-" & slStr
                        End If

                        '1-18-02 Backcompute net input to take out taxes so that the gross can be calculate
                        'send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                        'slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, lmTax1, lmTax2)
                        tmRvf.lTax1 = -tmRvf.lTax1      'negate the transaction to return or redeposit
                        tmRvf.lTax2 = -tmRvf.lTax2
                        lmSave(2, llRow) = tmRvf.lTax1
                        lmSave(3, llRow) = tmRvf.lTax2
                        gStrToPDN slAmount, 2, 6, tmRvf.sNet
                        tmRvf.lAcquisitionCost = 0
                        gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                        gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                        gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                        tmRvf.sInvoiceUndone = "N"
                        tmRvf.lCode = 0
                        tmRvf.iUrfCode = tgUrf(0).iCode
                        '1/17/09: Added buyer
                        'tmRvf.sUnused = ""
                        ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                        slMsg = "mSaveRec (btrInsert: Receivable)"
                        If ilRet = BTRV_ERR_NONE Then
                            ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                            ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Else
                    ilRet = BTRV_ERR_NONE
                End If
            Loop While ilRet = BTRV_ERR_CONFLICT
            If ilRet <> BTRV_ERR_NONE Then
                ilCRet = btrAbortTrans(hmRvf)
                Screen.MousePointer = vbDefault    'Default
                'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 8"
                'imTerminate = True
                mSaveRec = False
                Exit Function
            End If
        Next llRow
        lbcBDDate.ListIndex = -1
    ElseIf imCollectIndex = 7 Then  'Write-Off
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If (Len(Trim$(smSave(3, llRow))) <> 0) And (gCompAbsNumberStr(smSave(3, llRow), ".00") <> 0) Then
                Do  'Loop until record updated or added
                    ilFound = True
                    'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                    ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        End If
                    Else
                        ilFound = False
                    End If
                    If ilFound Then
                        tmRvf.lCefCode = 0
                        tmRvf.sTranType = "WB"
                        tmRvf.sAction = ""
                        If Asc(Trim$(smSave(3, llRow))) = Asc("-") Then
                            slAmount = Mid$(Trim$(smSave(3, llRow)), 2)
                        Else
                            slAmount = "-" & Trim$(smSave(3, llRow))
                        End If
                        gStrToPDN slAmount, 2, 6, tmRvf.sNet
                        slStr = ""
                        gStrToPDN slStr, 2, 6, tmRvf.sGross
                        tmRvf.lAcquisitionCost = 0
                        gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                        gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                        gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                        'Use transaction date for aging date if Merchandising or Promotion
                        'as many different billing months will have the same invoice number
                        If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                            gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                            slDate = gAdjYear(slDate)
                            tmRvf.iAgePeriod = month(slDate)
                            tmRvf.iAgingYear = year(slDate)
                        End If
                        tmRvf.sInvoiceUndone = "N"
                        tmRvf.lCode = 0
                        tmRvf.iUrfCode = tgUrf(0).iCode
                        '1/17/09: Added buyer
                        'tmRvf.sUnused = ""
                        ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                        slMsg = "mSaveRec (btrInsert: Receivable)"
                        If ilRet = BTRV_ERR_NONE Then
                            ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                            ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 9"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
            End If
        Next llRow
    ElseIf imCollectIndex = 9 Then  'Journal
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If (Len(Trim$(smSave(2, llRow))) <> 0) And (gCompAbsNumberStr(smSave(2, llRow), ".00") <> 0) Then
                gFindMatch smSave(3, llRow), 1, lbcTranType
                If (gLastFound(lbcTranType) <= 0) Then
                    ilRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault
                    ilRes = MsgBox("Transaction type must be specified", vbOKOnly + vbExclamation, "Incomplete")
                    lmRowNo = llRow
                    imBoxNo = WRITEOFF
                    edcDropDown.Text = smSave(3, llRow)
                    mSaveRec = False
                    Exit Function
                End If
            End If
        Next llRow
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If (Len(Trim$(smSave(2, llRow))) <> 0) And (gCompAbsNumberStr(smSave(2, llRow), ".00") <> 0) Then
                gFindMatch smSave(3, llRow), 1, lbcTranType
                If (gLastFound(lbcTranType) > 0) Then
                    Do  'Loop until record updated or added
                        ilFound = True
                        'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                        ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                        If ilRet = CP_MSG_NONE Then
                            llRecPos = Val(slCode)
                            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            If ilRet <> BTRV_ERR_NONE Then
                                ilFound = False
                            Else
                                If tmRvf.sTranType <> "IN" Then
                                    'For ilTest = llRow - 1 To LBound(smSave, 2) Step -1
                                    For ilTest = llRow - 1 To LBONE Step -1
                                        ilRet = gParseItem(tgTransactionCode(ilTest - 1).sKey, 2, "\", slCode)
                                        If ilRet = CP_MSG_NONE Then
                                            llRecPos = Val(slCode)
                                            ilRet = btrGetDirect(hmRvf, tlRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                            If ilRet = BTRV_ERR_NONE Then
                                                If (tlRvf.lInvNo = tmRvf.lInvNo) And (tlRvf.sTranType = "IN") Then
                                                    '6/6/06- added check for post by flag
                                                    If imPostBy = 0 Then
                                                        tmRvf = tlRvf
                                                        Exit For
                                                    ElseIf imPostBy = 1 Then
                                                        If (tmRvf.iBillVefCode = tlRvf.iBillVefCode) Then
                                                            tmRvf = tlRvf
                                                            Exit For
                                                        End If
                                                    ElseIf imPostBy = 2 Then
                                                        If (tmRvf.iBillVefCode = tlRvf.iBillVefCode) And (tmRvf.iAirVefCode = tlRvf.iAirVefCode) And (tmRvf.iPkLineNo = tlRvf.iPkLineNo) And (tmRvf.iMnfGroup = tlRvf.iMnfGroup) And (tmRvf.iMnfItem = tlRvf.iMnfItem) Then
                                                            tmRvf = tlRvf
                                                            Exit For
                                                        End If
                                                    End If
                                                End If
                                                If (tlRvf.lInvNo <> tmRvf.lInvNo) Then
                                                    Exit For
                                                End If
                                            End If
                                        End If
                                    Next ilTest
                                End If
                            End If
                        Else
                            ilFound = False
                        End If
                        If ilFound Then
                            'Determine number of vehicles for the invoice
                            tlJERvf = tmRvf
                            mCreateVehInv
                            gPackDate smCheckDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                            tmRvf.sTranType = Trim$(Left$(smSave(3, llRow), 2))
                            tmRvf.sAction = ""
                            'Use transaction date for aging date if Merchandising or Promotion
                            'as many different billing months will have the same invoice number
                            If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
                                gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                                slDate = gAdjYear(slDate)
                                tmRvf.iAgePeriod = month(slDate)
                                tmRvf.iAgingYear = year(slDate)
                            End If
                            'If Asc(Trim$(smSave(2, llRow))) = Asc("-") Then
                            '    slAmount = Mid$(Trim$(smSave(2, llRow)), 2)
                            'Else
                            '    slAmount = "-" & Trim$(smSave(2, llRow))
                            'End If
                            '12/28/06- added =
                            If UBound(tmVehInv) - 1 >= LBound(tmVehInv) Then
                                'Compute total Net
                                slVehTotal = ".00"
                                slVehTotalPlusTax = ".00"
                                For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                    slVehTotal = gAddStr(slVehTotal, tmVehInv(ilTran).sAmount)
                                    slVehTotalPlusTax = gAddStr(slVehTotalPlusTax, gLongToStrDec(tmVehInv(ilTran).lNetPlusTax, 2))
                                Next ilTran
                                slVehBal = ".00"
                                slStr = gAddStr(slVehTotalPlusTax, smSave(2, llRow))
                                If gCompNumberStr(slStr, ".00") = 0 Then
                                    ilMatch = True
                                Else
                                    ilMatch = False
                                End If
                                ilLastBalanceIndex = UBound(tmVehInv) - 1
                                For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                    If gCompNumberStr(tmVehInv(ilTran).sAmount, ".00") <> 0 Then
                                        ilLastBalanceIndex = ilTran
                                    End If
                                Next ilTran
                                For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                    tmRvf.lCefCode = 0
                                    'Add comment
                                    'tmCef.iStrLen = Len(smItemComment(llRow))
                                    tmCef.sComment = Trim$(Left$(smItemComment(llRow), Len(tmCef.sComment) - 2)) & Chr$(0) '& Chr$(0) 'sgTB
                                    'imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
                                    imCefRecLen = Len(tmCef)
                                    'If imCefRecLen - 2 > 7 Then '-2 so the control character at the end is not counted
                                    If Trim$(smItemComment(llRow)) <> "" Then
                                        tmCef.lCode = 0 'Autoincrement
                                        ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
                                    Else
                                        tmCef.lCode = 0
                                        ilRet = BTRV_ERR_NONE
                                    End If
                                    If ilRet <> BTRV_ERR_NONE Then
                                        ilCRet = btrAbortTrans(hmRvf)
                                        Screen.MousePointer = vbDefault    'Default
                                        'ilRet = MsgBox("File in Use [Re-save], Insert into CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                                        gLogBtrError ilRet, "File in Use [Re-save], Insert into CEF: Point 10"
                                        mSaveRec = False
                                        Exit Function
                                    End If
                                    lmSave(1, llRow) = tmCef.lCode
                                    tmRvf.lCefCode = tmCef.lCode
                                    slStr = ""
                                    gStrToPDN slStr, 2, 6, tmRvf.sGross
                                    If ilMatch Then
                                        '12/4/08: Use net with tax amount
                                        'If Left$(tmVehInv(ilTran).sAmount, 1) = "-" Then
                                        '    slStr = Mid$(tmVehInv(ilTran).sAmount, 2)
                                        'Else
                                        '    slStr = "-" & tmVehInv(ilTran).sAmount
                                        'End If
                                        slStr = gLongToStrDec(tmVehInv(ilTran).lNetPlusTax, 2)
                                        If Left$(slStr, 1) = "-" Then
                                            slStr = Mid$(slStr, 2)
                                        Else
                                            slStr = "-" & slStr
                                        End If
                                    Else
                                        If ilTran <> ilLastBalanceIndex Then
                                            'slStr = gMulStr(smSave(2, llRow), gDivStr(tmVehInv(ilTran).sAmount, slVehTotal))
                                            If ilTran < ilLastBalanceIndex Then
                                                '12/4/08: Use net with tax amount as smSave(2 is amount paid which includes tax
                                                'lStr = gDivStr(gMulStr(smSave(2, llRow), tmVehInv(ilTran).sAmount), slVehTotal)
                                                slStr = gDivStr(gMulStr(smSave(2, llRow), gLongToStrDec(tmVehInv(ilTran).lNetPlusTax, 2)), slVehTotalPlusTax)
                                                slVehBal = gAddStr(slVehBal, slStr)
                                            Else
                                                slStr = ".00"
                                            End If
                                        Else
                                            slStr = gSubStr(smSave(2, llRow), slVehBal)
                                        End If
                                    End If
                                    slAmount = slStr

                                    '1-22-02 Backcompute net input to take out taxes so that the gross can be calculate
                                    'send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                                    '2-24-04 send sbf code
                                    '8/9/06:  Change to use agency and advertiser from rvf instead of tmAgf.iCode and tmAdf.iCode as those values might not be valid at this point
                                    'slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, tmVehInv(ilTran).lSbfCode, lmTax1, lmTax2)
                                    '12/4/08:  Leave slAmount with tax, then remove tax below to get net.  Required as Gross must compute tax from ratio.  Use this call to get tax if by net
                                    'slAmount = mGetAgyNet(tmVehInv(ilTran).iAgfCode, tmVehInv(ilTran).iAdfCode, tmVehInv(ilTran).iAirVefCode, "0.00", slAmount, tmVehInv(ilTran).iMnfItem, tmVehInv(ilTran).lSbfCode, tmVehInv(ilTran).iBacklogTrfCode, lmTax1, lmTax2, slGrossNet)
                                    If ilMatch Then
                                        lmTax1 = -tmVehInv(ilTran).lTax1
                                        lmTax2 = -tmVehInv(ilTran).lTax2
                                    Else
                                        slStr = mGetAgyNet(tmVehInv(ilTran).iAgfCode, tmVehInv(ilTran).iAdfCode, tmVehInv(ilTran).iAirVefCode, "0.00", slStr, tmVehInv(ilTran).iMnfItem, tmVehInv(ilTran).lSbfCode, tmVehInv(ilTran).iBacklogTrfCode, lmTax1, lmTax2, slGrossNet)
                                    End If
                                    '12/28/06- Use proportional computation for USA tax as Gross is not know
                                    'If (Asc(tgSpf.sUsingFeatures4) And TAXBYUSA) = TAXBYUSA Then
                                    If slGrossNet = "G" Then
                                        slTemp = gLongToStrDec(tmVehInv(ilTran).lTax1, 2)
                                        lmTax1 = gStrDecToLong(gDivStr(gMulStr(smSave(2, llRow), slTemp), slVehTotalPlusTax), 2)

                                        slTemp = gLongToStrDec(tmVehInv(ilTran).lTax2, 2)
                                        lmTax2 = gStrDecToLong(gDivStr(gMulStr(smSave(2, llRow), slTemp), slVehTotalPlusTax), 2)
                                    End If
                                    '12/4/08:  This is required to get correct total
                                    slAmount = gSubStr(slAmount, (gAddStr(gLongToStrDec(lmTax1, 2), gLongToStrDec(lmTax2, 2))))
                                    tmRvf.lTax1 = lmTax1                    '1-18-02
                                    tmRvf.lTax2 = lmTax2                    '1-18-02
                                    lmSave(2, llRow) = lmTax1
                                    lmSave(3, llRow) = lmTax2
                                    gStrToPDN slAmount, 2, 6, tmRvf.sNet
                                    If Left$(Trim$(tmRvf.sTranType), 1) = "W" Then
                                        slStr = ""
                                        gStrToPDN slStr, 2, 6, tmRvf.sGross
                                    End If
                                    tmRvf.iAirVefCode = tmVehInv(ilTran).iAirVefCode
                                    tmRvf.iBillVefCode = tmVehInv(ilTran).iBillVefCode
                                    tmRvf.iPkLineNo = tmVehInv(ilTran).iPkLineNo
                                    tmRvf.iMnfGroup = tmVehInv(ilTran).iMnfGroup
                                    tmRvf.iMnfItem = tmVehInv(ilTran).iMnfItem
                                    tmRvf.lSbfCode = tmVehInv(ilTran).lSbfCode
                                    tmRvf.iBacklogTrfCode = tmVehInv(ilTran).iBacklogTrfCode
                                    tmRvf.lGsfCode = tmVehInv(ilTran).lGsfCode
                                    tmRvf.lAcquisitionCost = 0
                                    gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                                    tmRvf.sInvoiceUndone = "N"
                                    tmRvf.lCode = 0
                                    tmRvf.iUrfCode = tgUrf(0).iCode
                                    tmRvf.lPcfCode = tmVehInv(ilTran).lPcfCode 'TTP 10852 / 10849
                                    gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                                    '1/17/09: Added buyer
                                    'tmRvf.sUnused = ""
                                    ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                                    slMsg = "mSaveRec (btrInsert: Receivable)"
                                    If ilRet = BTRV_ERR_NONE Then
                                        ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                        ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                                    End If
                                Next ilTran
                            Else
                                'Add comment
                                tmRvf.lCefCode = 0
                                'tmCef.iStrLen = Len(smItemComment(llRow))
                                tmCef.sComment = Trim$(Left$(smItemComment(llRow), Len(tmCef.sComment) - 2)) & Chr$(0) '& Chr$(0) 'sgTB
                                'imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
                                imCefRecLen = Len(tmCef)
                                'If imCefRecLen - 2 > 7 Then '-2 so the control character at the end is not counted
                                If Trim$(smItemComment(llRow)) <> "" Then
                                    tmCef.lCode = 0 'Autoincrement
                                    ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
                                Else
                                    tmCef.lCode = 0
                                    ilRet = BTRV_ERR_NONE
                                End If
                                If ilRet <> BTRV_ERR_NONE Then
                                    ilCRet = btrAbortTrans(hmRvf)
                                    Screen.MousePointer = vbDefault    'Default
                                    'ilRet = MsgBox("File in Use [Re-save], Insert into CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                                    gLogBtrError ilRet, "File in Use [Re-save], Insert into CEF: Point 11"
                                    mSaveRec = False
                                    Exit Function
                                End If
                                lmSave(1, llRow) = tmCef.lCode
                                tmRvf.lCefCode = tmCef.lCode
                                slRatio = gDivStr(gRoundStr(Abs(Trim$(smSave(2, llRow))), ".00", 2), gAddStr(Abs(Trim$(smSave(1, llRow))), Abs(Trim$(smSave(2, llRow)))))
                                'slAmount = Trim$(smSave(2, llRow))

                                ''1-18-02 Backcompute net input to take out taxes so that the gross can be calculate
                                ''send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                                ''2-24-04 send sbf code
                                ''8/9/06:  Change to use agency and advertiser from rvf instead of tmAgf.iCode and tmAdf.iCode as those values might not be valid at this point
                                ''slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, lmNTRSbfCode(llRow), lmTax1, lmTax2)
                                'gPDNToStr tmRvf.sGross, 2, slGrossAmount
                                'slAmount = mGetAgyNet(tmVehInv(0).iAgfCode, tmVehInv(0).iAdfCode, tmRvf.iAirVefCode, slGrossAmount, slAmount, lmNTRSbfCode(llRow), lmTax1, lmTax2)
                                gPDNToStr tmRvf.sNet, 2, slAmount
                                slAmount = gMulStr(slAmount, slRatio)
                                slGrossAmount = gMulStr(slGrossAmount, slRatio)
                                tmRvf.lTax1 = gStrDecToLong(gMulStr(gLongToStrDec(tmRvf.lTax1, 2), slRatio), 2)
                                tmRvf.lTax2 = gStrDecToLong(gMulStr(gLongToStrDec(tmRvf.lTax2, 2), slRatio), 2)
                                If Left$(smSave(2, llRow), 1) = "-" Then
                                    slAmount = "-" & Abs(slAmount)
                                    slGrossAmount = "-" & Abs(slGrossAmount)
                                Else
                                    slAmount = Abs(slAmount)
                                    slGrossAmount = Abs(slGrossAmount)
                                End If
                                gStrToPDN slGrossAmount, 2, 6, tmRvf.sGross
                                'gStrToPDN slAmount, 2, 6, tmRvf.sNet
                                If Left$(Trim$(tmRvf.sTranType), 1) = "W" Then
                                    slStr = ""
                                    gStrToPDN slStr, 2, 6, tmRvf.sGross
                                End If
                                'tmRvf.lTax1 = lmTax1                    '1-18-02
                                'tmRvf.lTax2 = lmTax2                    '1-18-02
                                If Left$(smSave(2, llRow), 1) = "-" Then
                                    tmRvf.lTax1 = -1 * Abs(tmRvf.lTax1)
                                    tmRvf.lTax2 = -1 * Abs(tmRvf.lTax1)
                                Else
                                    tmRvf.lTax1 = Abs(tmRvf.lTax1)
                                    tmRvf.lTax2 = Abs(tmRvf.lTax1)
                                End If
                                lmSave(2, llRow) = tmRvf.lTax1
                                lmSave(3, llRow) = tmRvf.lTax2
                                slStr = gAddStr(slAmount, gAddStr(gLongToStrDec(tmRvf.lTax1, 2), gLongToStrDec(tmRvf.lTax2, 2)))
                                If gCompAbsNumberStr(smSave(2, llRow), slStr) <> 0 Then
                                    slAmount = gAddStr(slAmount, gSubStr(smSave(2, llRow), slStr))
                                End If
                                gStrToPDN slAmount, 2, 6, tmRvf.sNet    '1-18-02
                                tmRvf.lAcquisitionCost = 0
                                gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                                gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                                tmRvf.sInvoiceUndone = "N"
                                tmRvf.lCode = 0
                                tmRvf.iUrfCode = tgUrf(0).iCode
                                '1/17/09: Added buyer
                                'tmRvf.sUnused = ""
                                ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                                slMsg = "mSaveRec (btrInsert: Receivable)"
                                If ilRet = BTRV_ERR_NONE Then
                                    ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                    ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                                End If
                                ilRet = BTRV_ERR_NONE
                            End If
                        Else
                            ilRet = BTRV_ERR_NONE
                        End If
                    Loop While ilRet = BTRV_ERR_CONFLICT
                    If ilRet <> BTRV_ERR_NONE Then
                        ilCRet = btrAbortTrans(hmRvf)
                        Screen.MousePointer = vbDefault    'Default
                        'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                        gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 12"
                        'imTerminate = True
                        mSaveRec = False
                        Exit Function
                    End If
                End If
            End If
        Next llRow
    ElseIf imCollectIndex = 12 Then  'Adjustment
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If (Len(Trim$(smSave(2, llRow))) <> 0) And (gCompAbsNumberStr(smSave(2, llRow), ".00") <> 0) Then
                Do  'Loop until record updated or added
                    ilFound = True
                    'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
                    ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
                    If ilRet = CP_MSG_NONE Then
                        llRecPos = Val(slCode)
                        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilFound = False
                        End If
                    Else
                        ilFound = False
                    End If
                    If ilFound Then
                        'Determine number of vehicles for the invoice
                        'Get Invoice number
                        tmRvf.lRefInvNo = tmRvf.lInvNo   'Reference invoice number is the current invoice number
'If we change the invoice number then the transaction is not split and is not grouped with the invoice
'The split can be fixed by calling mCreateVehInv prior to determining the invoice number
'The grouping of invoices togather is a different problem and would reqiure to
'check if AN and use ref inv number instead of invoice number.
'                        Do
'                            ilRet = btrGetFirst(hmSpf, tgSpf, imSpfRecLen, 0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
'                            tmRvf.lInvNo = tgSpf.lBNextNo + 1
'                            If tmRvf.lInvNo < tgSpf.lBLowestNo Then
'                                tmRvf.lInvNo = tgSpf.lBLowestNo
'                            End If
'                            If tmRvf.lInvNo > tgSpf.lBHighestNo Then
'                                tmRvf.lInvNo = tgSpf.lBLowestNo
'                            End If
'                            tgSpf.lBNextNo = tmRvf.lInvNo
'                            slMsg = "mSaveRec (btrUpdate: Site Option)"
'                            ilRet = btrUpdate(hmSpf, tgSpf, imSpfRecLen) '  Update File
'                        Loop While ilRet = BTRV_ERR_CONFLICT
'                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hmRvf)
'                            Screen.MousePointer = vbDefault    'Default
'                            ilRet = MsgBox("File in Use [Re-save], Update Spf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
'                            'imTerminate = True
'                            mSaveRec = False
'                            Exit Function
'                        End If

                        mCreateVehInv
                        gPackDate smTranDate, tmRvf.iTranDate(0), tmRvf.iTranDate(1)
                        gPackDate smTranDate, tmRvf.iInvDate(0), tmRvf.iInvDate(1)
                        tmRvf.sTranType = "AN"
                        tmRvf.sAction = ""
                        '12/28/06- add =
                        If UBound(tmVehInv) - 1 >= LBound(tmVehInv) Then
                            'Compute total Net
                            slVehTotal = ".00"
                            slVehTotalGross = ".00"
                            slVehTotalPlusTax = ".00"
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                slVehTotal = gAddStr(slVehTotal, tmVehInv(ilTran).sAmount)
                                slVehTotalGross = gAddStr(slVehTotalGross, tmVehInv(ilTran).sAmountGross)
                                slVehTotalPlusTax = gAddStr(slVehTotalPlusTax, gLongToStrDec(tmVehInv(ilTran).lNetPlusTax, 2))
                            Next ilTran
                            slVehBal = ".00"
                            slVehBalGross = ".00"
                            'slStr = gAddStr(slVehTotal, smSave(2, llRow))
                            slStr = gAddStr(slVehTotalPlusTax, smSave(2, llRow))
                            If gCompNumberStr(slStr, ".00") = 0 Then
                                ilMatch = True
                            Else
                                ilMatch = False
                            End If
                            slStr = gAddStr(slVehTotalGross, smSave(14, llRow))
                            If gCompNumberStr(slStr, ".00") = 0 Then
                                ilMatchGross = True
                            Else
                                ilMatchGross = False
                            End If
                            ilLastBalanceIndex = UBound(tmVehInv) - 1
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                If gCompNumberStr(tmVehInv(ilTran).sAmount, ".00") <> 0 Then
                                    ilLastBalanceIndex = ilTran
                                End If
                            Next ilTran
                            ilLastBalanceIndexGross = UBound(tmVehInv) - 1
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                If gCompNumberStr(tmVehInv(ilTran).sAmountGross, ".00") <> 0 Then
                                    ilLastBalanceIndexGross = ilTran
                                End If
                            Next ilTran
                            For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                'Add comment
                                tmRvf.lCefCode = 0
                                'tmCef.iStrLen = Len(smItemComment(llRow))
                                tmCef.sComment = Trim$(Left$(smItemComment(llRow), Len(tmCef.sComment) - 2)) & Chr$(0) '& Chr$(0) 'sgTB
                                'imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
                                imCefRecLen = Len(tmCef)
                                'If imCefRecLen - 2 > 7 Then '-2 so the control character at the end is not counted
                                If Trim$(smItemComment(llRow)) <> "" Then
                                    tmCef.lCode = 0 'Autoincrement
                                    ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
                                Else
                                    tmCef.lCode = 0
                                    ilRet = BTRV_ERR_NONE
                                End If
                                If ilRet <> BTRV_ERR_NONE Then
                                    ilCRet = btrAbortTrans(hmRvf)
                                    Screen.MousePointer = vbDefault    'Default
                                    'ilRet = MsgBox("File in Use [Re-save], Insert into CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                                    gLogBtrError ilRet, "File in Use [Re-save], Insert into CEF: Point 13"
                                    mSaveRec = False
                                    Exit Function
                                End If
                                lmSave(1, llRow) = tmCef.lCode
                                tmRvf.lCefCode = tmCef.lCode
'                                slStr = ""
'                                gStrToPDN slStr, 2, 6, tmRvf.sGross
                                If ilMatch Then
                                    If Left$(tmVehInv(ilTran).sAmount, 1) = "-" Then
                                        slAmount = Mid$(tmVehInv(ilTran).sAmount, 2)
                                        tmRvf.lTax1 = Abs(tmVehInv(ilTran).lTax1)
                                        tmRvf.lTax2 = Abs(tmVehInv(ilTran).lTax2)
                                    Else
                                        slAmount = "-" & tmVehInv(ilTran).sAmount
                                        tmRvf.lTax1 = -tmVehInv(ilTran).lTax1
                                        tmRvf.lTax2 = -tmVehInv(ilTran).lTax2
                                    End If
                                Else
                                    If ilTran <> ilLastBalanceIndex Then
                                        'slStr = gMulStr(smSave(2, llRow), gDivStr(tmVehInv(ilTran).sAmount, slVehTotal))
                                        If ilTran < ilLastBalanceIndex Then
                                            'slStr = gDivStr(gMulStr(smSave(2, llRow), tmVehInv(ilTran).sAmount), slVehTotal)
                                            slStr = gLongToStrDec(tmVehInv(ilTran).lNetPlusTax, 2)
                                            slStr = gDivStr(gMulStr(smSave(2, llRow), slStr), slVehTotalPlusTax)
                                            slVehBal = gAddStr(slVehBal, slStr)
                                        Else
                                            slStr = ".00"
                                        End If
                                    Else
                                        slStr = gSubStr(smSave(2, llRow), slVehBal)
                                    End If
                                    slAmount = slStr

                                    '1-22-02 Backcompute net input to take out taxes so that the gross can be calculate
                                    'send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                                    '2-24-04 send sbf code
                                    '8/9/06:  Change to use agency and advertiser from rvf instead of tmAgf.iCode and tmAdf.iCode as those values might not be valid at this point
                                    'slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, tmVehInv(ilTran).lSbfCode, lmTax1, lmTax2)
                                    If ilMatchGross Then
                                        If Left$(tmVehInv(ilTran).sAmountGross, 1) = "-" Then
                                            slGrossAmount = Mid$(tmVehInv(ilTran).sAmountGross, 2)
                                        Else
                                            slGrossAmount = "-" & tmVehInv(ilTran).sAmountGross
                                        End If
                                    Else
                                        If ilTran <> ilLastBalanceIndexGross Then
                                            'slStr = gMulStr(smSave(2, llRow), gDivStr(tmVehInv(ilTran).sAmount, slVehTotal))
                                            If ilTran < ilLastBalanceIndexGross Then
                                                slGrossAmount = gDivStr(gMulStr(smSave(14, llRow), tmVehInv(ilTran).sAmountGross), slVehTotalGross)
                                            Else
                                                slGrossAmount = ".00"
                                            End If
                                        Else
                                            slGrossAmount = gSubStr(smSave(14, llRow), slVehBalGross)
                                        End If
                                    End If
                                    slAmount = mGetAgyNet(tmVehInv(ilTran).iAgfCode, tmVehInv(ilTran).iAdfCode, tmVehInv(ilTran).iAirVefCode, slGrossAmount, slAmount, tmVehInv(ilTran).iMnfItem, tmVehInv(ilTran).lSbfCode, tmVehInv(ilTran).iBacklogTrfCode, lmTax1, lmTax2, slGrossNet)
                                    tmRvf.lTax1 = lmTax1                    '1-18-02
                                    tmRvf.lTax2 = lmTax2                    '1-18-02
                                End If

                                gStrToPDN slAmount, 2, 6, tmRvf.sNet
'                                If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
'                                    slAmount = gDivStr(slAmount, ".85")
'                                Else
'                                    slAmount = slAmount
'                                End If
                                If ilMatchGross Then
                                    If Left$(tmVehInv(ilTran).sAmountGross, 1) = "-" Then
                                        slStr = Mid$(tmVehInv(ilTran).sAmountGross, 2)
                                    Else
                                        slStr = "-" & tmVehInv(ilTran).sAmountGross
                                    End If
                                Else
                                    If ilTran <> ilLastBalanceIndexGross Then
                                        'slStr = gMulStr(smSave(2, llRow), gDivStr(tmVehInv(ilTran).sAmount, slVehTotal))
                                        If ilTran < ilLastBalanceIndexGross Then
                                            slStr = gDivStr(gMulStr(smSave(14, llRow), tmVehInv(ilTran).sAmountGross), slVehTotalGross)
                                            slVehBalGross = gAddStr(slVehBalGross, slStr)
                                        Else
                                            slStr = ".00"
                                        End If
                                    Else
                                        slStr = gSubStr(smSave(14, llRow), slVehBalGross)
                                    End If
                                End If
                                slAmount = slStr
                                gStrToPDN slAmount, 2, 6, tmRvf.sGross
                                lmSave(2, llRow) = tmRvf.lTax1
                                lmSave(3, llRow) = tmRvf.lTax2
                                'Set the invoice number to next invoice number from spf
                                tmRvf.iAirVefCode = tmVehInv(ilTran).iAirVefCode
                                tmRvf.iBillVefCode = tmVehInv(ilTran).iBillVefCode
                                tmRvf.iPkLineNo = tmVehInv(ilTran).iPkLineNo
                                tmRvf.iMnfGroup = tmVehInv(ilTran).iMnfGroup
                                tmRvf.iMnfItem = tmVehInv(ilTran).iMnfItem
                                tmRvf.lSbfCode = tmVehInv(ilTran).lSbfCode
                                tmRvf.iBacklogTrfCode = tmVehInv(ilTran).iBacklogTrfCode
                                tmRvf.lGsfCode = tmVehInv(ilTran).lGsfCode
                                tmRvf.lAcquisitionCost = 0
                                gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                                tmRvf.sInvoiceUndone = "N"
                                tmRvf.lCode = 0
                                tmRvf.iUrfCode = tgUrf(0).iCode
                                tmRvf.lPcfCode = tmVehInv(ilTran).lPcfCode 'TTP 10852 / 10849
                                gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
                                '1/17/09: Added buyer
                                'tmRvf.sUnused = ""
                                ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                                slMsg = "mSaveRec (btrInsert: Receivable)"
                                If ilRet = BTRV_ERR_NONE Then
                                    ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                    ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                                End If
                            Next ilTran
                        Else
                            tmRvf.lCefCode = 0
                            'Add comment
                            'tmCef.iStrLen = Len(smItemComment(llRow))
                            tmCef.sComment = Trim$(Left$(smItemComment(llRow), Len(tmCef.sComment) - 2)) & Chr$(0) '& Chr$(0) 'sgTB
                            'imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
                            imCefRecLen = Len(tmCef)
                            'If imCefRecLen - 2 > 7 Then '-2 so the control character at the end is not counted
                            If Trim$(smItemComment(llRow)) <> "" Then
                                tmCef.lCode = 0 'Autoincrement
                                ilRet = btrInsert(hmCef, tmCef, imCefRecLen, INDEXKEY0)
                            Else
                                tmCef.lCode = 0
                                ilRet = BTRV_ERR_NONE
                            End If
                            If ilRet <> BTRV_ERR_NONE Then
                                ilCRet = btrAbortTrans(hmRvf)
                                Screen.MousePointer = vbDefault    'Default
                                'ilRet = MsgBox("File in Use [Re-save], Insert into CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                                gLogBtrError ilRet, "File in Use [Re-save], Insert into CEF: Point 14"
                                mSaveRec = False
                                Exit Function
                            End If
                            lmSave(1, llRow) = tmCef.lCode
                            tmRvf.lCefCode = tmCef.lCode
                            slRatio = gDivStr(gRoundStr(Abs(Trim$(smSave(2, llRow))), ".00", 2), gAddStr(Abs(Trim$(smSave(1, llRow))), Abs(Trim$(smSave(2, llRow)))))
                            slAmount = Trim$(smSave(2, llRow))

                            ''1-18-02 Backcompute net input to take out taxes so that the gross can be calculate
                            ''send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                            ''2-24-04 send sbf code
                            ''8/9/06:  Change to use agency and advertiser from rvf instead of tmAgf.iCode and tmAdf.iCode as those values might not be valid at this point
                            ''slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, lmNTRSbfCode(llRow), lmTax1, lmTax2)
                            'slAmount = mGetAgyNet(tmVehInv(0).iAgfCode, tmVehInv(0).iAdfCode, tmRvf.iAirVefCode, smSave(14, llRow), slAmount, lmNTRSbfCode(llRow), lmTax1, lmTax2)

                            gStrToPDN slAmount, 2, 6, tmRvf.sNet
                            'tmRvf.lTax1 = lmTax1                    '1-18-02
                            'tmRvf.lTax2 = lmTax2                    '1-18-02
                            gPackDate "", tmRvf.iPurgeDate(0), tmRvf.iPurgeDate(1)
                            tmRvf.lTax1 = 0
                            tmRvf.lTax2 = 0
                            lmSave(2, llRow) = tmRvf.lTax1
                            lmSave(3, llRow) = tmRvf.lTax2
                            gPackDate smNowDate, tmRvf.iDateEntrd(0), tmRvf.iDateEntrd(1)
'                            If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
'                                slAmount = gDivStr(slAmount, ".85")
'                            Else
'                                slAmount = slAmount
'                            End If
                            slAmount = Trim$(smSave(14, llRow))
                            gStrToPDN slAmount, 2, 6, tmRvf.sGross
                            tmRvf.lAcquisitionCost = 0
                            tmRvf.sInvoiceUndone = "N"
                            tmRvf.lCode = 0
                            tmRvf.iUrfCode = tgUrf(0).iCode
                            '1/17/09: Added buyer
                            'tmRvf.sUnused = ""
                            ilRet = btrInsert(hmRvf, tmRvf, imRvfRecLen, INDEXKEY0)
                            slMsg = "mSaveRec (btrInsert: Receivable)"
                            If ilRet = BTRV_ERR_NONE Then
                                ilRet = btrGetPosition(hmRvf, lmUpdateRvfRecPos(UBound(lmUpdateRvfRecPos)))
                                ReDim Preserve lmUpdateRvfRecPos(0 To UBound(lmUpdateRvfRecPos) + 1) As Long
                            End If
                            ilRet = BTRV_ERR_NONE
                        End If
                    Else
                        ilRet = BTRV_ERR_NONE
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilCRet = btrAbortTrans(hmRvf)
                    Screen.MousePointer = vbDefault    'Default
                    'ilRet = MsgBox("File in Use [Re-save], Insert Rvf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                    gLogBtrError ilRet, "File in Use [Re-save], Insert Rvf: Point 15"
                    'imTerminate = True
                    mSaveRec = False
                    Exit Function
                End If
'            Else
'                'Check if comment changed or deleted
'                ilFound = True
'                'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
'                ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
'                If ilRet = CP_MSG_NONE Then
'                    llRecPos = Val(slCode)
'                    ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'                    If ilRet <> BTRV_ERR_NONE Then
'                        ilFound = False
'                    End If
'                Else
'                    ilFound = False
'                End If
'                If ilFound Then
'                    If (tmRvf.lCefCode > 0) And (tmRvf.sTranType = "AN") Then
'                        Do
'                            imCefRecLen = 1009
'                            tmCefSrchKey.lCode = tmRvf.lCefCode
'                            ilRet = btrGetEqual(hmCef, tmCef, imCefRecLen, tmCefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
'                            If ilRet = BTRV_ERR_NONE Then
'                                tmCef.iStrLen = Len(smTranComment(llRow))
'                                tmCef.sComment = Trim$(smTranComment(llRow)) & Chr$(0) & Chr$(0) 'sgTB
'                                imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
'                                ilRet = btrUpdate(hmCef, tmCef, imCefRecLen)
'                            Else
'                                Exit Do
'                            End If
'                        Loop While ilRet = BTRV_ERR_CONFLICT
'                        If ilRet <> BTRV_ERR_NONE Then
'                            ilCRet = btrAbortTrans(hmRvf)
'                            Screen.MousePointer = vbDefault    'Default
'                            ilRet = MsgBox("File in Use [Re-save], Update CEF" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
'                            mSaveRec = False
'                            Exit Function
'                        End If
'                    End If
'                End If
            End If
        Next llRow
    End If
    ilRet = btrEndTrans(hmRvf)
    If imCollectIndex = 1 Then  'Update last post cash date
        ilChgDate = False
        gUnpackDate tgSpf.iRLastPay(0), tgSpf.iRLastPay(1), slStr
        If slStr <> "" Then
            If gDateValue(smCheckDate) > gDateValue(slStr) Then
                ilChgDate = True
            End If
        Else
            ilChgDate = True
        End If
        If ilChgDate Then
            Do
                ilRet = btrGetFirst(hmSpf, tgSpf, imSpfRecLen, 0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                gPackDate smCheckDate, tgSpf.iRLastPay(0), tgSpf.iRLastPay(1)
                slMsg = "mSaveRec (btrUpdate: Site Option)"
                ilRet = btrUpdate(hmSpf, tgSpf, imSpfRecLen) '  Update File
            Loop While ilRet = BTRV_ERR_CONFLICT
            If ilRet <> BTRV_ERR_NONE Then
                Screen.MousePointer = vbDefault    'Default
                'ilRet = MsgBox("File in Use [Re-save], Update Spf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                gLogBtrError ilRet, "File in Use [Re-save], Update Spf: Point 16"
                'imTerminate = True
                mSaveRec = False
                Exit Function
            End If
        End If
    End If
    'Update Advertiser/Agency
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Then  'Avg # days to pay,...
        ilLastAdf = -1
        ilLastAgf = -1
        llAvgInvDate = 0
        llAvgIndex = -1
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            ilFound = True
            'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
            ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
            If ilRet = CP_MSG_NONE Then
                llRecPos = Val(slCode)
                ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                If ilRet <> BTRV_ERR_NONE Then
                    ilFound = False
                End If
            Else
                ilFound = False
            End If
            If ilFound Then
                llAvgInvDate = 0
                llAvgIndex = -1
                If (tmRvf.sTranType = "IN") Or (tmRvf.sTranType = "AN") Or (tmRvf.sTranType = "PI") Then
                    For llAvg = 0 To UBound(tmAvgToPayInfo) - 1 Step 1
                        'If (tmRvf.lCode = tmAvgToPayInfo(llAvg).lRvfCode) Then
                        If (tmRvf.lInvNo = tmAvgToPayInfo(llAvg).lInvNo) Then
                            'gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slStr
                            'llInvDate = gDateValue(slStr)
                            llAvgInvDate = tmAvgToPayInfo(llAvg).lInvDate
                            llAvgIndex = llAvg
                            Exit For
                        End If
                    Next llAvg
                End If
                If ((Len(Trim$(smSave(2, llRow))) > 0) And (gCompAbsNumberStr(smSave(2, llRow), ".00") > 0)) Or ((Len(Trim$(smSave(3, llRow))) > 0) And (gCompAbsNumberStr(smSave(3, llRow), ".00") > 0)) Then
                    blFullyPaid = False
                    mReadAdfOrAgf
                    'If (Len(Trim$(smSave(2, llRow))) > 0) And (gCompAbsNumberStr(smSave(2, llRow), ".00") > 0) Then
                    '    If Asc(Trim$(smSave(2, llRow))) = Asc("-") Then
                    '        slAdjAmount = Mid$(Trim$(smSave(2, llRow)), 2)
                    '    Else
                    '        slAdjAmount = "-" & Trim$(smSave(2, llRow))
                    '    End If
                    'Else
                    '    slAdjAmount = "0.00"
                    'End If
                    'If (Len(Trim$(smSave(3, llRow))) > 0) And (gCompAbsNumberStr(smSave(3, llRow), ".00") > 0) Then
                    '    If Asc(Trim$(smSave(3, llRow))) = Asc("-") Then
                    '        slStr = Mid$(Trim$(smSave(3, llRow)), 2)
                    '    Else
                    '        slStr = "-" & Trim$(smSave(3, llRow))
                    '    End If
                    '    slAdjAmount = gAddStr(slAdjAmount, slStr)
                    'End If
                    If tmAdf.iCode <> 0 Then
                        ilRet = btrGetPosition(hmAdf, llAdfRecPos)
                        Do  'Loop until record updated or added
                            'tmRec = tmAdf
                            'ilRet = gGetByKeyForUpdate("ADF", hmAdf, tmRec)
                            'tmAdf = tmRec
                            'If ilRet <> BTRV_ERR_NONE Then
                            '    Exit Do
                            'End If
                            ''gPDNToStr tmAdf.sCurrAR, 2, slCurrAR
                            '''Take slCurrAR * % over 90 to get amount over 90.  Compute number of
                            '''days from last calendar invoice date to check daten.  If 90 or over,
                            '''recompute over 90 amount by adjusting the 90 amount and dividing by new current AR
                            ''slStr = gAddStr(slCurrAR, slAdjAmount)
                            ''gStrToPDN slStr, 2, 6, tmAdf.sCurrAR
                            ''gPDNToStr tmAdf.sHiCredit, 2, slAmount
                            ''If ((InStr(slAmount, "-") = 0) And (InStr(slStr, "-") = 0)) Then
                            ''    If gCompAbsNumberStr(slStr, slAmount) > 0 Then
                            ''        gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
                            ''    End If
                            ''ElseIf ((InStr(slAmount, "-") <> 0) And (InStr(slStr, "-") <> 0)) Then
                            ''    If gCompAbsNumberStr(slStr, slAmount) < 0 Then
                            ''        gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
                            ''    End If
                            ''ElseIf InStr(slStr, "-") = 0 Then
                            ''    gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
                            ''End If
                            ilRet = BTRV_ERR_NONE
                            If (llAvgIndex <> -1) And ((Len(Trim$(smSave(1, llRow))) = 0) Or (gCompAbsNumberStr(smSave(1, llRow), ".00") = 0)) Then
                                slSQLQuery = "Select distinct rvfCntrNo, rvfInvNo, sum(rvfNet) as sumnet from RVF_Receivables Where rvfInvNo = " & tmAvgToPayInfo(llAvgIndex).lInvNo & " Group By rvfCntrNo, rvfInvNo"
                                Set rst_Rvf = gSQLSelectCall(slSQLQuery)
                                If Not rst_Rvf.EOF Then
                                    'Get Invoice date
                                    If rst_Rvf!Sumnet = "0" And rst_Rvf!rvfCntrNo > 0 And rst_Rvf!rvfInvNo > 0 Then
                                        blFullyPaid = True
                                        'Check date, insert lastest
                                        If (tmAdf.iDateLstPaym(0) <> 0) Or (tmAdf.iDateLstPaym(1) <> 0) Then
                                            gUnpackDate tmAdf.iDateLstPaym(0), tmAdf.iDateLstPaym(1), slStr
                                            'If gDateValue(smCheckDate) > gDateValue(slStr) Then
                                            If gDateValue(slPostDate) > gDateValue(slStr) Then
                                                'gPackDate smCheckDate, tmAdf.iDateLstPaym(0), tmAdf.iDateLstPaym(1)
                                                gPackDate slPostDate, tmAdf.iDateLstPaym(0), tmAdf.iDateLstPaym(1)
                                            End If
                                        Else
                                            'gPackDate smCheckDate, tmAdf.iDateLstPaym(0), tmAdf.iDateLstPaym(1)
                                            gPackDate slPostDate, tmAdf.iDateLstPaym(0), tmAdf.iDateLstPaym(1)
                                        End If
                                        'Compute average number of days to pay
                                        If llAvgInvDate > 0 Then
                                            If tmAvgToPayInfo(llAvgIndex).bAdfUpdated = False Then
                                                tmAvgToPayInfo(llAvgIndex).bAdfUpdated = True
                                                'tmAdf.iAvgToPay = ((10 * ((CLng(tmAdf.iNoInvPd) * tmAdf.iAvgToPay + gDateValue(smCheckDate) - llAvgInvDate)) \ (tmAdf.iNoInvPd + 1)) + 5) \ 10
                                                tmAdf.iAvgToPay = ((10 * ((CLng(tmAdf.iNoInvPd) * tmAdf.iAvgToPay + gDateValue(slPostDate) - llAvgInvDate)) \ (tmAdf.iNoInvPd + 1)) + 5) \ 10
                                            End If
                                        End If
                                        'Set number of invoices paid
                                        tmAdf.iNoInvPd = tmAdf.iNoInvPd + 1
                                        'Compute the number of days to pay last invoice
                                        'Loop thru all transaction determining all transactions paid in full for this advertiser (agency), then
                                        'average number of days to paid
                                        If ilLastAdf <> tmAdf.iCode Then 'advertiser
                                            ilLastAdf = tmAdf.iCode
                                            ilNoInv = 0
                                            llNoDays = 0
                                            'For llLoop = LBound(smSave, 2) To lmRowCountMax Step 1
                                            For llLoop = LBONE To lmRowCountMax Step 1
                                                ilFound = True
                                                'ilRet = gParseItem(lbcTransactionCode.List(ilLoop - 1), 2, "\", slCode)
                                                ilRet = gParseItem(tgTransactionCode(llLoop - 1).sKey, 2, "\", slCode)
                                                If ilRet = CP_MSG_NONE Then
                                                    llRecPos = Val(slCode)
                                                    ilRet = btrGetDirect(hmRvf, tlFrom, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                                    If ilRet <> BTRV_ERR_NONE Then
                                                        ilFound = False
                                                    End If
                                                Else
                                                    ilFound = False
                                                End If
                                                If ilFound Then
                                                    If (tlFrom.sTranType = "IN") Or (tlFrom.sTranType = "AN") Then
                                                        gUnpackDate tlFrom.iTranDate(0), tlFrom.iTranDate(1), slStr
                                                        llInvDate = gDateValue(slStr)
                                                    End If
                                                    If (tmAdf.iCode = tlFrom.iAdfCode) And ((Len(Trim$(smSave(1, llLoop))) = 0) Or (gCompAbsNumberStr(smSave(1, llLoop), ".00") = 0)) Then
                                                        If ((Len(Trim$(smSave(2, llLoop))) > 0) And (gCompAbsNumberStr(smSave(2, llLoop), ".00") > 0)) Or ((Len(Trim$(smSave(3, llLoop))) > 0) And (gCompAbsNumberStr(smSave(3, llLoop), ".00") > 0)) Then
                                                            ilNoInv = ilNoInv + 1
                                                            If llInvDate > 0 Then
                                                                'llNoDays = llNoDays + gDateValue(smCheckDate) - llInvDate
                                                                llNoDays = llNoDays + gDateValue(slPostDate) - llInvDate
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            Next llLoop
                                            If ilNoInv > 0 Then
                                                tmAdf.iLstToPay = llNoDays / ilNoInv
                                            End If
                                        End If
                                        slMsg = "mSaveRec (btrUpdate: Receivable-Advertiser)"
                                        ilRet = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                                        If ilRet = BTRV_ERR_CONFLICT Then
                                            ilCRet = btrGetDirect(hmAdf, tmAdf, imAdfRecLen, llAdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                            If ilCRet <> BTRV_ERR_NONE Then
                                                Exit Do
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Loop While (ilRet = BTRV_ERR_CONFLICT) And (blFullyPaid)
                        If (ilRet <> BTRV_ERR_NONE) And blFullyPaid Then
                            Screen.MousePointer = vbDefault    'Default
                            'ilRet = MsgBox("File in Use [Re-save], Update Adf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                            gLogBtrError ilRet, "File in Use [Re-save], Update ADF: Point 17"
                            'imTerminate = True
                            mSaveRec = False
                            Exit Function
                        End If
                    End If
                    If (tmAgf.iCode <> 0) And blFullyPaid Then
                        ilRet = btrGetPosition(hmAgf, llAgfRecPos)
                        Do  'Loop until record updated or added
                            'tmRec = tmAgf
                            'ilRet = gGetByKeyForUpdate("AGF", hmAgf, tmRec)
                            'tmAgf = tmRec
                            'If ilRet <> BTRV_ERR_NONE Then
                            '    Exit Do
                            'End If
                            ''gPDNToStr tmAgf.sCurrAR, 2, slCurrAR
                            ''slStr = gAddStr(slCurrAR, slAdjAmount)
                            ''gStrToPDN slStr, 2, 6, tmAgf.sCurrAR
                            ''gPDNToStr tmAgf.sHiCredit, 2, slAmount
                            ''If ((InStr(slAmount, "-") = 0) And (InStr(slStr, "-") = 0)) Then
                            ''    If gCompAbsNumberStr(slStr, slAmount) > 0 Then
                            ''        gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                            ''    End If
                            ''ElseIf ((InStr(slAmount, "-") <> 0) And (InStr(slStr, "-") <> 0)) Then
                            ''    If gCompAbsNumberStr(slStr, slAmount) < 0 Then
                            ''        gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                            ''    End If
                            ''ElseIf InStr(slStr, "-") = 0 Then
                            ''    gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                            ''End If
                            If (Len(Trim$(smSave(1, llRow))) = 0) Or (gCompAbsNumberStr(smSave(1, llRow), ".00") = 0) Then
                                'Check date, insert lastest
                                If (tmAgf.iDateLstPaym(0) <> 0) Or (tmAgf.iDateLstPaym(1) <> 0) Then
                                    gUnpackDate tmAgf.iDateLstPaym(0), tmAgf.iDateLstPaym(1), slStr
                                    'If gDateValue(smCheckDate) > gDateValue(slStr) Then
                                    If gDateValue(slPostDate) > gDateValue(slStr) Then
                                        'gPackDate smCheckDate, tmAgf.iDateLstPaym(0), tmAgf.iDateLstPaym(1)
                                        gPackDate slPostDate, tmAgf.iDateLstPaym(0), tmAgf.iDateLstPaym(1)
                                    End If
                                Else
                                    'gPackDate smCheckDate, tmAgf.iDateLstPaym(0), tmAgf.iDateLstPaym(1)
                                    gPackDate slPostDate, tmAgf.iDateLstPaym(0), tmAgf.iDateLstPaym(1)
                                End If
                                'Compute average number of days to pay
                                If llAvgInvDate > 0 Then
                                    If tmAvgToPayInfo(llAvgIndex).bAgfUpdated = False Then
                                        tmAvgToPayInfo(llAvgIndex).bAgfUpdated = True
                                        'tmAgf.iAvgToPay = ((10 * ((CLng(tmAgf.iNoInvPd) * tmAgf.iAvgToPay + gDateValue(smCheckDate) - llAvgInvDate)) \ (tmAgf.iNoInvPd + 1)) + 5) \ 10
                                        tmAgf.iAvgToPay = ((10 * ((CLng(tmAgf.iNoInvPd) * tmAgf.iAvgToPay + gDateValue(slPostDate) - llAvgInvDate)) \ (tmAgf.iNoInvPd + 1)) + 5) \ 10
                                    End If
                                End If
                                'Set number of invoices paid
                                tmAgf.iNoInvPd = tmAgf.iNoInvPd + 1
                                If ilLastAgf <> tmAgf.iCode Then 'agency
                                    ilLastAgf = tmAgf.iCode
                                    ilNoInv = 0
                                    llNoDays = 0
                                    'For llLoop = LBound(smSave, 2) To lmRowCountMax Step 1
                                    For llLoop = LBONE To lmRowCountMax Step 1
                                        ilFound = True
                                        'ilRet = gParseItem(lbcTransactionCode.List(ilLoop - 1), 2, "\", slCode)
                                        ilRet = gParseItem(tgTransactionCode(llLoop - 1).sKey, 2, "\", slCode)
                                        If ilRet = CP_MSG_NONE Then
                                            llRecPos = Val(slCode)
                                            ilRet = btrGetDirect(hmRvf, tlFrom, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                            If ilRet <> BTRV_ERR_NONE Then
                                                ilFound = False
                                            End If
                                        Else
                                            ilFound = False
                                        End If
                                        If ilFound Then
                                            If (tlFrom.sTranType = "IN") Or (tlFrom.sTranType = "AN") Then
                                                gUnpackDate tlFrom.iTranDate(0), tlFrom.iTranDate(1), slStr
                                                llInvDate = gDateValue(slStr)
                                            End If
                                            If (tmAgf.iCode = tlFrom.iAgfCode) And ((Len(Trim$(smSave(1, llLoop))) = 0) Or (gCompAbsNumberStr(smSave(1, llLoop), ".00") = 0)) Then
                                                If ((Len(Trim$(smSave(2, llLoop))) > 0) And (gCompAbsNumberStr(smSave(2, llLoop), ".00") > 0)) Or ((Len(Trim$(smSave(3, llLoop))) > 0) And (gCompAbsNumberStr(smSave(3, llLoop), ".00") > 0)) Then
                                                    ilNoInv = ilNoInv + 1
                                                    If llInvDate > 0 Then
                                                        'llNoDays = llNoDays + gDateValue(smCheckDate) - llInvDate
                                                        llNoDays = llNoDays + gDateValue(slPostDate) - llInvDate
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Next llLoop
                                    If ilNoInv > 0 Then
                                        tmAgf.iLstToPay = llNoDays / ilNoInv
                                    End If
                                End If
                            End If
                            slMsg = "mSaveRec (btrUpdate: Receivable-Agency)"
                            ilRet = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                            If ilRet = BTRV_ERR_CONFLICT Then
                                ilCRet = btrGetDirect(hmAgf, tmAgf, imAgfRecLen, llAgfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                If ilCRet <> BTRV_ERR_NONE Then
                                    Exit Do
                                End If
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            Screen.MousePointer = vbDefault    'Default
                            'ilRet = MsgBox("File in Use [Re-save], Update Agf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                            gLogBtrError ilRet, "File in Use [Re-save], Update AGF: Point 18"
                            'imTerminate = True
                            mSaveRec = False
                            Exit Function
                        End If
                    End If
                End If
            End If
        Next llRow
    End If
    If imCollectIndex = 5 Then
        If imAgencyFlag = 1 Or imDirectFlag Then 'advertiser
            tmAdfSrchKey.iCode = tmRvf.iAdfCode
            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                Do
                    tmAdf.iNSFChks = tmAdf.iNSFChks + 1
                    ilRet = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                    If ilRet = BTRV_ERR_CONFLICT Then
                        tmAdfSrchKey.iCode = tmRvf.iAdfCode
                        ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                        If ilCRet <> BTRV_ERR_NONE Then
                            Exit Do
                        End If
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
            End If
        Else
            tmAgfSrchKey.iCode = tmRvf.iAgfCode
            ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                Do
                    tmAgf.iNSFChks = tmAgf.iNSFChks + 1
                    ilRet = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                    If ilRet = BTRV_ERR_CONFLICT Then
                        tmAgfSrchKey.iCode = tmRvf.iAgfCode
                        ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                        If ilCRet <> BTRV_ERR_NONE Then
                            Exit Do
                        End If
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
            End If
        End If
    End If
    'Update HiCredit and CurrAR
    '1=cash payment; 3=Transfer; 4=Reversal; 5=Post return check
    '6=Redeposit; 7=WriteOff; 9=Journal
    '2=Apply on Account
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
        For llLoop = 0 To UBound(lmUpdateRvfRecPos) - 1 Step 1
            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, lmUpdateRvfRecPos(llLoop), INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet = BTRV_ERR_NONE Then
                mUpdateApfIfFullyPaid False, tmRvf.lInvNo
                If tmRvf.sCashTrade = "C" Then
                    gPDNToStr tmRvf.sNet, 2, slAmount
                    'Add the taxes to current A/R
                    slAmount = gAddStr(slAmount, gLongToStrDec(tmRvf.lTax1, 2))
                    slAmount = gAddStr(slAmount, gLongToStrDec(tmRvf.lTax2, 2))
                    If (imCollectIndex = 2) And (lmUpdateRvfRecPos(llLoop) = llOnAcctRecPos) Then   'On Account
                        slAmount = slResultOnAcct
                    End If
                    slAdjAmount = slAmount
                    If tmRvf.iAgfCode > 0 Then
                        Do
                            tmAgfSrchKey.iCode = tmRvf.iAgfCode
                            ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                            If ilRet <> BTRV_ERR_NONE Then
                                Exit Do
                            End If
                            gPDNToStr tmAgf.sCurrAR, 2, slCurrAR
                            slStr = gAddStr(slCurrAR, slAdjAmount)
                            gStrToPDN slStr, 2, 6, tmAgf.sCurrAR
                            gPDNToStr tmAgf.sHiCredit, 2, slAmount
                            If ((InStr(slAmount, "-") = 0) And (InStr(slStr, "-") = 0)) Then
                                If gCompAbsNumberStr(slStr, slAmount) > 0 Then
                                    gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                                End If
                            ElseIf ((InStr(slAmount, "-") <> 0) And (InStr(slStr, "-") <> 0)) Then
                                If gCompAbsNumberStr(slStr, slAmount) < 0 Then
                                    gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                                End If
                            ElseIf InStr(slStr, "-") = 0 Then
                                gStrToPDN slStr, 2, 6, tmAgf.sHiCredit
                            End If
                            ilRet = btrUpdate(hmAgf, tmAgf, imAgfRecLen) '  Update File
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            Screen.MousePointer = vbDefault    'Default
                            'ilRet = MsgBox("File in Use [Re-save], Update Agf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                            gLogBtrError ilRet, "File in Use [Re-save], Update AGF: Point 19"
                            'imTerminate = True
                            mSaveRec = False
                            Exit Function
                        End If
                    End If
                    If tmRvf.iAdfCode > 0 Then
                        Do
                            tmAdfSrchKey.iCode = tmRvf.iAdfCode
                            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                            If ilRet <> BTRV_ERR_NONE Then
                                Exit Do
                            End If
                            gPDNToStr tmAdf.sCurrAR, 2, slCurrAR
                            slStr = gAddStr(slCurrAR, slAdjAmount)
                            'Add the taxes to current A/R
                            slAmount = gAddStr(slAmount, gLongToStrDec(tmRvf.lTax1, 2))
                            slAmount = gAddStr(slAmount, gLongToStrDec(tmRvf.lTax2, 2))
                            gStrToPDN slStr, 2, 6, tmAdf.sCurrAR
                            gPDNToStr tmAdf.sHiCredit, 2, slAmount
                            If ((InStr(slAmount, "-") = 0) And (InStr(slStr, "-") = 0)) Then
                                If gCompAbsNumberStr(slStr, slAmount) > 0 Then
                                    gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
                                End If
                            ElseIf ((InStr(slAmount, "-") <> 0) And (InStr(slStr, "-") <> 0)) Then
                                If gCompAbsNumberStr(slStr, slAmount) > 0 Then
                                    gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
                                End If
                            ElseIf InStr(slStr, "-") = 0 Then
                                gStrToPDN slStr, 2, 6, tmAdf.sHiCredit
                            End If
                            ilRet = btrUpdate(hmAdf, tmAdf, imAdfRecLen) '  Update File
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            Screen.MousePointer = vbDefault    'Default
                            'ilRet = MsgBox("File in Use [Re-save], Update Adf" & Str$(ilRet), vbOkOnly + vbExclamation, "Collection")
                            gLogBtrError ilRet, "File in Use [Re-save], Update ADF: Point 20"
                            'imTerminate = True
                            mSaveRec = False
                            Exit Function
                        End If
                    End If
                End If
            End If
        Next llLoop
    End If
    imPostBy = 0
    pbcInfo.Cls
'    mClearCtrlFields 'Reset fields and sShow strings
    'mMoveRecToCtrl
    edcStatDropDown_Change
    'pbcInfo_Paint
    mSaveRec = True
    Screen.MousePointer = vbDefault    'Default
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSetCommands                    *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set command buttons (enable or *
'*                      disabled)                      *
'*                                                     *
'*******************************************************
Private Sub mSetCommands()
'
'   mSetCommands
'   Where:
'
    If (imCollectIndex = 1) Then
        If (Len(smTotalUnapplied) <> 0) And (gCompNumberStr(smTotalUnapplied, ".00") = 0) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        If smCheckDate <> "" Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf (imCollectIndex = 2) Then
        'If (smTranDate <> "") And (Len(smTotalUnapplied) <> 0) And (gCompNumberStr(smTotalUnapplied, ".00") = 0) Then
        If (Len(smTotalUnapplied) <> 0) And (gCompNumberStr(smTotalUnapplied, ".00") = 0) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        'If (smTranDate <> "") Or (smAmount <> "") Then
        If (smAmount <> "") Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf (imCollectIndex = 3) Then
        If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Then
            If (smTranDate <> "") And (Len(smTotalUnapplied) <> 0) And (gCompNumberStr(smTotalUnapplied, ".00") = 0) And (imUpdateAllowed) Then
                cmcUpdate.Enabled = True
            Else
                cmcUpdate.Enabled = False
            End If
        Else
            If (Len(smTotalUnapplied) <> 0) And (gCompNumberStr(smTotalUnapplied, ".00") = 0) And (imUpdateAllowed) Then
                cmcUpdate.Enabled = True
            Else
                cmcUpdate.Enabled = False
            End If
        End If
        If (smTranDate <> "") Or (smAmount <> "") Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then
        If (smTranDate <> "") And (lbcBDDate.ListIndex >= 0) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        cmcUndo.Enabled = False
    ElseIf imCollectIndex = 4 Then  'Reversal
        If (smTranDate <> "") And (smTotalAppliedWriteOff <> "") And (gCompAbsNumberStr(smTotalAppliedWriteOff, ".00") <> 0) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        If (smTranDate <> "") Or ((smTotalAppliedWriteOff <> "") And (gCompAbsNumberStr(smTotalAppliedWriteOff, ".00") <> 0)) Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf imCollectIndex = 7 Then  'WriteOff
        If (smTranDate <> "") And (smTotalAppliedWriteOff <> "") And (gCompAbsNumberStr(smTotalAppliedWriteOff, ".00") <> 0) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        If (smTranDate <> "") Or ((smTotalAppliedWriteOff <> "") And (gCompAbsNumberStr(smTotalAppliedWriteOff, ".00") <> 0)) Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf imCollectIndex = 9 Then  'Journal
        If (smCheckDate <> "") And ((smTotalJournal <> "") And (gCompAbsNumberStr(smTotalJournal, ".00") <> 0)) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        If (smCheckDate <> "") Or ((smTotalJournal <> "") And (gCompAbsNumberStr(smTotalJournal, ".00") <> 0)) Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf imCollectIndex = 10 Then
        'If (imIAdvtListIndex > 0) And (imISalespersonListIndex > 0) And (Trim$(smIInvoiceNo) <> "") And (Trim$(smIContractNo) <> "") And (imIVehicleListIndex >= 0) And (Trim$(smITranDate) <> "") And (Trim$(smINet) <> "") Then
        If (imIAdvtListIndex > 0) And (imISalespersonListIndex > 0) And (Trim$(smIInvoiceNo) <> "") And (imIBillVehicleListIndex >= 0) And (imIAirVehicleListIndex >= 0) And (Trim$(smITranDate) <> "") And (Trim$(smINet) <> "") And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        If (imIAdvtListIndex > 0) Or (Trim$(smIProduct) <> "") Or (imISalespersonListIndex > 0) Or (Trim$(smIInvoiceNo) <> "") Or (Trim$(smIContractNo) <> "") Or (imIBillVehicleListIndex >= 0) Or (imIAirVehicleListIndex >= 0) Or (Trim$(smITranDate) <> "") Or (Trim$(smINet) <> "") Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    ElseIf imCollectIndex = 11 Then  'Restore
        'If (UBound(smRestoreInvNo) > LBound(smRestoreInvNo)) And (gCompNumberStr(smRestoreTotal, ".00") = 0) And (imUpdateAllowed) Then
        'Removed requirement that restore total was zero.  This allows to undo zero purge that was in error
        If (UBound(smRestoreInvNo) > LBound(smRestoreInvNo)) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
            cmcUndo.Enabled = True
        Else
            cmcUpdate.Enabled = False
            cmcUndo.Enabled = False
        End If
    ElseIf imCollectIndex = 12 Then 'Adjustments
        'If (smTranDate <> "") And ((smTotalAppliedDue <> "") And (gCompAbsNumberStr(smTotalAppliedDue, ".00") <> 0)) And (imUpdateAllowed) Then
        If (smTranDate <> "") And ((smTotalAppliedDue <> "")) And (imUpdateAllowed) Then
            cmcUpdate.Enabled = True
        Else
            cmcUpdate.Enabled = False
        End If
        If (smTranDate <> "") Or ((smTotalAppliedDue <> "") And (gCompAbsNumberStr(smTotalAppliedDue, ".00") <> 0)) Then
            cmcUndo.Enabled = True
        Else
            cmcUndo.Enabled = False
        End If
    Else
        cmcUpdate.Enabled = False
        cmcUndo.Enabled = False
    End If
    If (cmcUpdate.Enabled) Or (cmcUndo.Enabled) Then
        cbcSort.Enabled = False
        cbcSelection.Enabled = False
        pbcPostBy.Enabled = False
    Else
        cbcSort.Enabled = True
        cbcSelection.Enabled = True
        pbcPostBy.Enabled = True
    End If
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Then
        If (smTotalAppliedDue = "") Or (gCompNumberStr(smAmount, smTotalUnapplied) = 0) Then
            pbcPostBy.Enabled = True
        Else
            pbcPostBy.Enabled = False
        End If
    End If
    If (imCollectIndex = 12) Then
        If (smTotalAppliedDue = "") Then
            pbcPostBy.Enabled = True
        Else
            pbcPostBy.Enabled = False
        End If
    End If
    If (imCollectIndex = 9) Then
        If (smTotalJournal = "") Then
            pbcPostBy.Enabled = True
        Else
            pbcPostBy.Enabled = False
        End If
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSetShow                        *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mSetShow(ilBoxNo As Integer)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  llTax1                        llTax2                                                  *
'*                                                                                        *
'* Local Labels (Marked)                                                                  *
'*  mSetShowErr                                                                           *
'******************************************************************************************

'
'   mSetShow ilBoxNo
'   Where:
'       ilBoxNo (I)- Number of the Control whose value should be saved
'
    Dim slStr As String     'string to pass to gsetshow
    Dim slAmount As String
    Dim ilIndex As Integer
    Dim llAdjRow As Long
    Dim llRow As Long
    Dim slOldAmount As String
    Dim slDiffAmount As String
    Dim slCode As String
    Dim slNameCode As String
    Dim ilRet As Integer
    Dim ilPos As Integer
    Dim slFirst As String
    Dim slLast As String
    Dim ilAirVefCode As Integer
    Dim ilMnfCode As Integer
    Dim llSbfCode As Long
    Dim ilSbfTrfCode As Integer
    Dim llSumNETTAX As Long
    Dim slTax As String
    Dim llRecPos As Long
    Dim ilTran As Integer
    Dim slGross As String
    Dim slGrossNet As String
    Dim llCurrentRowNo As Long

    If lmRowNo < 0 Then
        'If ((imCollectIndex <> 1) And (imCollectIndex <> 3)) Or (ilBoxNo <> imOnAccountTo) Then
        If ((imCollectIndex <> 1) And (imCollectIndex <> 2) And (imCollectIndex <> 3)) Or ((ilBoxNo <> imOnAccountVeh) And (ilBoxNo <> imOnAccountTo) And (ilBoxNo <> imOnAccountComment)) Then
            If (ilBoxNo < imLBCtrls) Or (ilBoxNo > imTabMax) Then
                Exit Sub
            End If
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case CASHTRADEINDEX
                edcCashTrade.Visible = False  'Set Visibility
                cmcDropDown.Visible = False
                lbcCashTrade.Visible = False
                If imCashTradeIndex > -1 Then
                    slStr = lbcCashTrade.List(imCashTradeIndex)
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    If InStr(1, slStr, "History", vbTextCompare) > 0 Then
                        DateRange.Show vbModal
                        mInitCollect False, True
                    End If
                Else
                    slStr = ""
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                End If
            Case ACTIONINDEX   'Action
                edcDropDown.Visible = False  'Set Visibility
                cmcDropDown.Visible = False
                lbcAction.Visible = False
                If lbcAction.ListIndex > -1 Then
                    slStr = lbcAction.List(lbcAction.ListIndex)
                Else
                    slStr = ""
                End If
                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
            Case Else
                If imCollectIndex = 1 Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smCheckDate = edcDropDown.Text
                            smPostCashDate = smCheckDate
                            slStr = smCheckDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imCheckNo
                            plcNum.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smCheckNo = edcDropDown.Text
                            slStr = smCheckNo
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imAmount
                            plcNum.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            slOldAmount = smAmount
                            smAmount = edcDropDown.Text
                            slDiffAmount = gSubStr(slOldAmount, smAmount)
                            'smTotalUnapplied = smAmount
                            smTotalUnapplied = gSubStr(smTotalUnapplied, slDiffAmount)
                            slStr = smTotalUnapplied
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                            slStr = smAmount
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                            'If Len(smAmount) <> 0 Then
                            '    imTabMax = 4
                            'Else
                            '    imTabMax = 5
                            'End If
                            pbcCollect(imCollectIndex).Cls
                            pbcCollect_Paint imCollectIndex
                        Case imOnAccountTo
                            lbcAdvertiser.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imAdvtListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcAdvertiser.List(imAdvtListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imOnAccountVeh
                            lbcOnAcctVeh.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imOnAcctVehListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcOnAcctVeh.List(imOnAcctVehListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imOnAccountComment
                            edcTranComment.Visible = False
                            smOnAccountComment = edcTranComment.Text
                            slStr = smOnAccountComment
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                ElseIf (imCollectIndex = 2) Then
                    Select Case ilBoxNo
'                        Case imOnAccountComment
'                            edcTranComment.Visible = False
'                            smOnAccountComment = edcTranComment.Text
'                            slStr = smOnAccountComment
'                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                ElseIf (imCollectIndex = 3) Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smTranDate = edcDropDown.Text
                            slStr = smTranDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imOnAccountTo
                            lbcAdvertiser.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imAdvtListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcAdvertiser.List(imAdvtListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imOnAccountComment
                            edcTranComment.Visible = False
                            smOnAccountComment = edcTranComment.Text
                            slStr = smOnAccountComment
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                '       2=Apply on Account      3=Transfer              4=Reverse               7=Writeoff
                'ElseIf (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 7) Then
                ElseIf (imCollectIndex = 4) Or (imCollectIndex = 7) Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smTranDate = edcDropDown.Text
                            slStr = smTranDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                '       5=Post return check     6=Redeposit return check
                ElseIf (imCollectIndex = 5) Or (imCollectIndex = 6) Then
                    Select Case ilBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smTranDate = edcDropDown.Text
                            slStr = smTranDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case imCheckNo
                            edcDropDown.Visible = False  'Set Visibility
                            cmcDropDown.Visible = False
                            lbcBDDate.Visible = False
                            If lbcBDDate.ListIndex > -1 Then
                                ilIndex = lbcBDDate.ListIndex
                                slStr = lbcBDDate.List(ilIndex)
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imCheckNo)
                            Else
                                slStr = ""
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imCheckNo)
                            End If
                    End Select
                    pbcCollect_Paint imCollectIndex
                ElseIf imCollectIndex = 9 Then  'Journal
                    Select Case ilBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smCheckDate = edcDropDown.Text
                            slStr = smCheckDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                ElseIf imCollectIndex = 10 Then  'Invoice and Invoice Adjustment
                    Select Case ilBoxNo
                        Case IADVTINDEX  'Advertiser
                            lbcAdvertiser.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imIAdvtListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcAdvertiser.List(imIAdvtListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                            If imIAdvtListIndex >= 1 Then
                                slNameCode = tgColAdvertiser(imIAdvtListIndex - 1).sKey   'Traffic!lbcAdvertiser.List(imIAdvtListIndex - 1)
                                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                                If ilRet = CP_MSG_NONE Then
                                    slCode = Trim$(slCode)
                                    tmAdfSrchKey.iCode = CInt(slCode)
                                    ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                                    If ilRet <> BTRV_ERR_NONE Then
                                        tmAdf.iCode = 0
                                        tmAdf.sName = ""
                                        tmAdf.iAgfCode = 0
                                        tmAdf.iSlfCode = 0
                                    End If
                                Else
                                    tmAdf.iCode = 0
                                    tmAdf.sName = ""
                                    tmAdf.iAgfCode = 0
                                    tmAdf.iSlfCode = 0
                                End If
                            Else
                                tmAdf.iCode = 0
                                tmAdf.sName = ""
                                tmAdf.iAgfCode = 0
                                tmAdf.iSlfCode = 0
                            End If
                            If imIAdfCode <> tmAdf.iCode Then
                                smIProduct = ""
                                gSetShow pbcCollect(imCollectIndex), smIProduct, tmCtrls(IPRDINDEX)
                            End If
                            imIAdfCode = tmAdf.iCode
                        Case IPRDINDEX  'Product
                            lbcProd.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            gSetShow pbcCollect(imCollectIndex), smIProduct, tmCtrls(ilBoxNo)
                        Case ISPERSONINDEX  'Salesperson
                            lbcSalesperson.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imISalespersonListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcSalesperson.List(imISalespersonListIndex)
                            End If
                            'If (Not igSlfFirstNameFirst) And (lbcSalesperson.ListIndex <= Traffic!lbcSalesperson.ListCount) Then
                            If (Not igSlfFirstNameFirst) And (lbcSalesperson.ListIndex <= UBound(tmSalesperson)) Then
                                ilPos = InStr(slStr, ",")
                                If ilPos > 0 Then
                                    slLast = Left$(slStr, ilPos - 1)
                                    slFirst = right$(slStr, Len(slStr) - ilPos - 1)
                                    slStr = slFirst & " " & slLast
                                End If
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case IINVNOINDEX  'Invoice #
                            edcDropDown.Visible = False  'Set visibility
                            smIInvoiceNo = edcDropDown.Text
                            gSetShow pbcCollect(imCollectIndex), smIInvoiceNo, tmCtrls(ilBoxNo)
                        Case IREFINVNOINDEX  'Ref Invoice #
                            smIRefInvoiceNo = edcDropDown.Text
                            edcDropDown.Visible = False  'Set visibility
                            gSetShow pbcCollect(imCollectIndex), smIRefInvoiceNo, tmCtrls(ilBoxNo)
                        Case ICNTRINDEX  'Contract #
                            smIContractNo = edcDropDown.Text
                            edcDropDown.Visible = False  'Set visibility
                            gSetShow pbcCollect(imCollectIndex), smIContractNo, tmCtrls(ilBoxNo)
                        Case IBILLVEHINDEX  'Vehicle
                            lbcVehicle(0).Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imIBillVehicleListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcVehicle(0).List(imIBillVehicleListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case IAIRVEHINDEX  'Vehicle
                            lbcVehicle(1).Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imIAirVehicleListIndex < 0 Then
                                slStr = ""
                                imIAirVefCode = -1
                            Else
                                ilRet = gParseItem(tmUserVehicle(imIAirVehicleListIndex).sKey, 2, "\", slStr)
                                imIAirVefCode = Val(Trim$(slStr))
                                slStr = lbcVehicle(1).List(imIAirVehicleListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                            If imISvAirVefCode <> imIAirVefCode Then
                                If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                                   gSetShow pbcCollect(imCollectIndex), "", tmCtrls(ISEASONINDEX)
                                    gSetShow pbcCollect(imCollectIndex), "", tmCtrls(IEVENTINDEX)
                                    mSeasonPop
                                    pbcCollect(imCollectIndex).Cls
                                    pbcCollect_Paint imCollectIndex
                                End If
                            End If
                            imISvAirVefCode = imIAirVefCode
                        Case IPKLINEINDEX  'Package Line Number
                            edcDropDown.Visible = False  'Set visibility
                            smIPkLine = edcDropDown.Text
                            gSetShow pbcCollect(imCollectIndex), smIPkLine, tmCtrls(ilBoxNo)
                        Case ITRANDATEINDEX 'Transaction Date
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smITranDate = edcDropDown.Text
                            slStr = smITranDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case ITRANTYPEINDEX 'Transaction Type (always IN)
                        Case INTRTYPEINDEX  'Vehicle
                            lbcNTRType.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imINTRTypeListIndex <= 0 Then
                                slStr = ""
                            Else
                                slStr = lbcNTRType.List(imINTRTypeListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case INTRTAXINDEX  'Vehicle
                            lbcNTRTax.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imINTRTaxListIndex <= 0 Then
                                slStr = ""
                            Else
                                slStr = lbcNTRTax.List(imINTRTaxListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case IGROSSINDEX 'Gross
                            smIGross = edcDropDown.Text
                            plcNum.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            slStr = smIGross
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case INETINDEX 'Net
                            smINet = edcDropDown.Text
                            plcNum.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            slStr = smINet
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)

                            '1-18-02 Backcompute net input to take out taxes so that the gross can be calculate
                            'send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                            '2-24-04 dont know NTR pointer, manual add of IN transaction
                            'smINet = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, smINet, 0, lmTax1, lmTax2)
                            If imIAirVehicleListIndex > -1 Then
                                'ilRet = gParseItem(Traffic!lbcUserVehicle.List(imIAirVehicleListIndex), 2, "\", slStr)
                                ilRet = gParseItem(tmUserVehicle(imIAirVehicleListIndex).sKey, 2, "\", slStr)
                                ilAirVefCode = Val(Trim$(slStr))
                            Else
                                ilAirVefCode = 0
                            End If
                            ilMnfCode = 0
                            llSbfCode = 0
                            ilSbfTrfCode = 0
                            If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
                                ilRet = mReadAgfRec()
                            End If
                            If (tgSpf.sUsingNTR = "Y") And (imINTRTypeListIndex > 0) Then
                                ilRet = gParseItem(tmNTRTypeCode(imINTRTypeListIndex - 1).sKey, 2, "\", slStr)
                                ilMnfCode = Val(slStr)
                                ilRet = gParseItem(tmNTRTypeCode(imINTRTypeListIndex - 1).sKey, 6, "\", slTax)
                                If ilRet = CP_MSG_NONE Then
                                    If (imINTRTaxListIndex > 0) And (slTax = "Y") Then
                                        ilSbfTrfCode = lbcNTRTax.ItemData(imINTRTaxListIndex)
                                    End If
                                End If
                            End If
                            If (Trim$(smIGross) = "") And (Trim$(smINet) <> "") Then
                                If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
                                    smIGross = mGetGross(imIAdfCode, tmAgf.iCode, smINet, ilAirVefCode, ilMnfCode, ilSbfTrfCode)
                                Else
                                    smIGross = mGetGross(tmAdf.iCode, 0, smINet, ilAirVefCode, ilMnfCode, ilSbfTrfCode)
                                End If
                                slStr = smIGross
                                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(IGROSSINDEX)
                            End If
                            If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
                                'Check that correct agency is in memory
                                smINet = mGetAgyNet(tmAgf.iCode, imIAdfCode, ilAirVefCode, smIGross, smINet, ilMnfCode, llSbfCode, ilSbfTrfCode, lmTax1, lmTax2, slGrossNet)
                            Else
                                smINet = mGetAgyNet(0, imIAdfCode, ilAirVefCode, smIGross, smINet, ilMnfCode, llSbfCode, ilSbfTrfCode, lmTax1, lmTax2, slGrossNet)
                            End If

                        Case IACQUISITIONINDEX 'Gross
                            smIAcquisition = edcDropDown.Text
                            plcNum.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            slStr = smIAcquisition
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case ISSPARTINDEX  'Sales Source/Participant
                            lbcSSPart.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imISSPartListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcSSPart.List(imISSPartListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                        Case ISEASONINDEX
                            lbcSeason.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            lmISeasonGhfCode = -1
                            If imISeasonListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcSeason.List(imISeasonListIndex)
                                lmISeasonGhfCode = lbcSeason.ItemData(imISeasonListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                            If imISvSeasonListIndex <> imISeasonListIndex Then
                                gSetShow pbcCollect(imCollectIndex), "", tmCtrls(IEVENTINDEX)
                                mEventPop
                                pbcCollect(imCollectIndex).Cls
                                pbcCollect_Paint imCollectIndex
                            End If
                            imISvSeasonListIndex = imISeasonListIndex
                        Case IEVENTINDEX
                            lbcEvent.Visible = False
                            edcDropDown.Visible = False
                            cmcDropDown.Visible = False
                            If imIEventListIndex < 0 Then
                                slStr = ""
                            Else
                                slStr = lbcEvent.List(imIEventListIndex)
                            End If
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                ElseIf imCollectIndex = 12 Then  'Invoice adjustment
                    Select Case ilBoxNo
                        Case imCheckDate
                            plcCalendar.Visible = False
                            cmcDropDown.Visible = False
                            edcDropDown.Visible = False  'Set visibility
                            smTranDate = edcDropDown.Text
                            slStr = smTranDate
                            slStr = gFormatDate(slStr)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(ilBoxNo)
                    End Select
                End If
        End Select
    Else
        If (ilBoxNo < imLBTransCtrls) Or (ilBoxNo > UBound(tmTransCtrls)) Then
            Exit Sub
        End If
        llCurrentRowNo = lmRowNo
        lmRowNo = mGetRowNo(llCurrentRowNo)
        If lmRowNo <= 0 Then
            lmRowNo = llCurrentRowNo
            Exit Sub
        End If
        'Check if Comment
        If (((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 9)) And (ilBoxNo = ASTERICK)) Or ((imCollectIndex = 12) And (ilBoxNo = IAASTERICK)) Then
            edcTranComment.Visible = False
            If StrComp(Trim$(smTranComment(lmRowNo)), Trim$(edcTranComment.Text), vbTextCompare) <> 0 Then
                smTranComment(lmRowNo) = edcTranComment.Text
                slStr = "C" 'smTranComment(lmRowNo)
                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                mSetCompressShow lmRowNo, ilBoxNo
                ilRet = mSaveComment(lmRowNo)
                'Change all transactions with match cef
                For llRow = LBound(smTranComment) To UBound(smTranComment) Step 1
                    If lmSave(1, llRow) = lmSave(1, lmRowNo) Then
                        smTranComment(llRow) = smTranComment(lmRowNo)
                    End If
                Next llRow
            End If
            lmRowNo = llCurrentRowNo
            Exit Sub
        End If
        If imCollectIndex = 12 Then
            Select Case ilBoxNo
                Case IAAMTPAID
                    plcNum.Visible = False
                    cmcDropDown.Visible = False
                    edcDropDown.Visible = False  'Set visibility
                    slAmount = edcDropDown.Text
                    For llAdjRow = lmRowNo To lmRowCountMax Step 1
                        If Trim$(smSave(1, llAdjRow)) <> "" Then
                            'smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                            smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                            Exit For
                        End If
                    Next llAdjRow
                    'smTotalDue = gAddStr(smTotalDue, smSave(2, lmRowNo))
                    smTotalDue = gSubStr(smTotalDue, smSave(2, lmRowNo))
                    smTotalAppliedDue = gSubStr(smTotalAppliedDue, smSave(2, lmRowNo))
                    slOldAmount = smSave(2, lmRowNo)
                    smSave(2, lmRowNo) = edcDropDown.Text
                    'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                    For llAdjRow = lmRowNo To lmRowCountMax Step 1
                        If Trim$(smSave(1, llAdjRow)) <> "" Then
                            'smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                            smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                            gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(IAAMTDUE)
                            smShow(IAAMTDUE, llAdjRow) = tmTransCtrls(IAAMTDUE).sShow
                            Exit For
                        End If
                    Next llAdjRow
                    'smTotalDue = gSubStr(smTotalDue, smSave(2, lmRowNo))
                    smTotalDue = gAddStr(smTotalDue, smSave(2, lmRowNo))
                    gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                    smTotalAppliedDue = gAddStr(smTotalAppliedDue, smSave(2, lmRowNo))
                    gFormatStr smTotalAppliedDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedDue)
                    gFormatStr smSave(2, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                    'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                    mSetCompressShow lmRowNo, ilBoxNo
                    'Set gross
                    '1-22-02 Backcompute net input to take out taxes so that the gross can be calculate
                    'send the net field entered and return the agy net amount, along with taxes 1 & 2 if applicable
                    smTotalAdjGross = gSubStr(smTotalAdjGross, smSave(14, lmRowNo))
'                    slAmount = smSave(2, lmRowNo)
'                    '2-24-04 send sbf code
'                    slAmount = mGetAgyNet(tmAgf.iCode, tmAdf.iCode, slAmount, lmNTRSbfCode(lmRowNo), llTax1, llTax2)
'                    If (tgSpf.sUsingNTR = "Y") And (lmNTRSbfCode(lmRowNo) > 0) Then
'                        If tmSbf.lCode <> lmNTRSbfCode(lmRowNo) Then
'                            tmSbfSrchKey1.lCode = lmNTRSbfCode(lmRowNo)
'                            ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
'                        Else
'                            ilRet = BTRV_ERR_NONE
'                        End If
'                        If (ilRet = BTRV_ERR_NONE) And (tmSbf.sAgyComm = "Y") Then
'                            slAmount = gDivStr(slAmount, ".85")
'                        Else
'                            slAmount = slAmount
'                        End If
'                    Else
'                        If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
'                            slAmount = gDivStr(slAmount, ".85")
'                        Else
'                            slAmount = slAmount
'                        End If
'                    End If
                    If (Trim$(smSave(14, lmRowNo)) = "") Or (gCompAbsNumberStr(smSave(14, lmRowNo), ".00") = 0) Then
                        'slAmount = smSave(19, lmRowNo)
                        slAmount = "0.00"
                        ReDim tmVehInv(0 To 0) As VEHINV
                        ilRet = gParseItem(tgTransactionCode(lmRowNo - 1).sKey, 2, "\", slCode)
                        If ilRet = CP_MSG_NONE Then
                            llRecPos = Val(slCode)
                            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            mCreateVehInv
                            llSumNETTAX = 0
                            If UBound(tmVehInv) - 1 >= LBound(tmVehInv) Then
                                For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                    llSumNETTAX = llSumNETTAX + tmVehInv(ilTran).lNetPlusTax
                                Next ilTran
                                For ilTran = LBound(tmVehInv) To UBound(tmVehInv) - 1 Step 1
                                    'The same formula works for USA and Canada tax
                                    'Gross:New = (Input:Net * Gross:Orig)/ (Net:Orig + Tax:Orig)
                                    If llSumNETTAX <> 0 Then
                                        slGross = gDivStr(gMulStr(smSave(2, lmRowNo), tmVehInv(ilTran).sAmountGross), gLongToStrDec(llSumNETTAX, 2))
                                        slAmount = gAddStr(slAmount, slGross)
                                    End If
                                Next ilTran
                            End If
                            '4/15/11: Compute Gross if Unable to compute from above because values are zero
                            If (llSumNETTAX = 0) Or ((gCompAbsNumberStr(smSave(2, lmRowNo), ".00") <> 0) And (gCompAbsNumberStr(slGross, ".00") = 0)) Then
                                If imAgencyFlag = 0 And Not imDirectFlag Then  'agency
                                    slGross = mGetGross(imIAdfCode, tmAgf.iCode, smSave(2, lmRowNo), 0, 0, 0)
                                Else
                                    slGross = mGetGross(tmAdf.iCode, 0, smSave(2, lmRowNo), 0, 0, 0)
                                End If
                                slAmount = slGross
                            End If
                        End If
                    Else
                        '11/5/05- because of rounding issues, multiply first, then divide
                        'Basic formula:  Adjustment * Gross/Net
                        'slAmount = gRoundStr(gMulStr(smSave(14, lmRowNo), gDivStr(gRoundStr(smSave(2, lmRowNo), ".00", 2), slOldAmount)), ".01", 2)
                        slAmount = gRoundStr(gDivStr(gMulStr(smSave(14, lmRowNo), gRoundStr(smSave(2, lmRowNo), ".00", 2)), slOldAmount), ".01", 2)
                    End If
                    ilPos = InStr(1, smSave(2, lmRowNo), "-", vbTextCompare)
                    If ilPos > 0 Then
                        ilPos = InStr(1, slAmount, "-", vbTextCompare)
                        If ilPos <= 0 Then
                            slAmount = "-" & slAmount
                        End If
                    Else
                        ilPos = InStr(1, slAmount, "-", vbTextCompare)
                        If ilPos > 0 Then
                            If ilPos = 1 Then
                                slAmount = Mid$(slAmount, ilPos + 1)
                            Else
                                slAmount = Left$(slAmount, ilPos - 1) & Mid$(slAmount, ilPos + 1)
                            End If
                        End If
                    End If
                    smSave(14, lmRowNo) = slAmount
                    smTotalAdjGross = gAddStr(smTotalAdjGross, smSave(14, lmRowNo))
                    gFormatStr smTotalAdjGross, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAdjGross)
                    gFormatStr smSave(14, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(IAGROSS)
                    'smShow(IAGROSS, lmRowNo) = tmTransCtrls(IAGROSS).sShow
                    mSetCompressShow lmRowNo, IAGROSS
                    pbcCollect(imCollectIndex).Cls
                    pbcCollect_Paint imCollectIndex
                Case IAGROSS
                    plcNum.Visible = False
                    cmcDropDown.Visible = False
                    edcDropDown.Visible = False  'Set visibility
                    slAmount = edcDropDown.Text
                    smTotalAdjGross = gSubStr(smTotalAdjGross, smSave(14, lmRowNo))
                    smSave(14, lmRowNo) = slAmount
                    smTotalAdjGross = gAddStr(smTotalAdjGross, smSave(14, lmRowNo))
                    gFormatStr smTotalAdjGross, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAdjGross)
                    gFormatStr smSave(14, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(IAGROSS)
                    'smShow(IAGROSS, lmRowNo) = tmTransCtrls(IAGROSS).sShow
                    mSetCompressShow lmRowNo, IAGROSS
                    pbcCollect(imCollectIndex).Cls
                    pbcCollect_Paint imCollectIndex
                Case IACOMMENT
                    edcTranComment.Visible = False
                    smItemComment(lmRowNo) = edcTranComment.Text
                    slStr = smItemComment(lmRowNo)
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                    'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                    mSetCompressShow lmRowNo, ilBoxNo
            End Select
        Else
            Select Case ilBoxNo 'Branch on box type (control)
                Case AMNTPAID
                    plcNum.Visible = False
                    cmcDropDown.Visible = False
                    edcDropDown.Visible = False  'Set visibility
                    slAmount = edcDropDown.Text
                    If (imCollectIndex <> 7) And (imCollectIndex <> 9) Then
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalDue = gAddStr(smTotalDue, smSave(2, lmRowNo))
                        smTotalUnapplied = gAddStr(smTotalUnapplied, smSave(2, lmRowNo))
                        smTotalAppliedDue = gSubStr(smTotalAppliedDue, smSave(2, lmRowNo))
                        smSave(2, lmRowNo) = edcDropDown.Text
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                smShow(AMNTDUE, llAdjRow) = tmTransCtrls(AMNTDUE).sShow
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalDue = gSubStr(smTotalDue, smSave(2, lmRowNo))
                        gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                        smTotalUnapplied = gSubStr(smTotalUnapplied, smSave(2, lmRowNo))
                        gFormatStr smTotalUnapplied, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                        smTotalAppliedDue = gAddStr(smTotalAppliedDue, smSave(2, lmRowNo))
                        gFormatStr smTotalAppliedDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedDue)
                        gFormatStr smSave(2, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                        'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                        mSetCompressShow lmRowNo, ilBoxNo
                        'Test if variance amount is below site value- if so move to write-off
                        If (Len(Trim$(smSave(3, lmRowNo))) = 0) Or (gCompAbsNumberStr(smSave(3, lmRowNo), ".00") = 0) Then
                            If gCompAbsNumberStr(smSave(1, lmRowNo), ".00") > 0 Then
                                If gCompAbsNumberStr(smVariance, smSave(1, lmRowNo)) >= 0 Then
                                    smSave(3, lmRowNo) = smSave(1, lmRowNo)
                                    smSave(1, lmRowNo) = ".00"
                                    gFormatStr smSave(3, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(WRITEOFF)
                                    'smShow(WRITEOFF, lmRowNo) = tmTransCtrls(WRITEOFF).sShow
                                    mSetCompressShow lmRowNo, WRITEOFF
                                    gFormatStr smSave(1, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                    'smShow(AMNTDUE, lmRowNo) = tmTransCtrls(AMNTDUE).sShow
                                    mSetCompressShow lmRowNo, AMNTDUE
                                    smTotalAppliedWriteOff = gAddStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                                    gFormatStr smTotalAppliedWriteOff, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                                End If
                            End If
                        End If
                    ElseIf imCollectIndex = 7 Then
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(3, lmRowNo))
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalDue = gAddStr(smTotalDue, smSave(3, lmRowNo))
                        smTotalAppliedWriteOff = gSubStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                        smSave(3, lmRowNo) = edcDropDown.Text
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(3, lmRowNo))
                                gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                smShow(AMNTDUE, llAdjRow) = tmTransCtrls(AMNTDUE).sShow
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalDue = gSubStr(smTotalDue, smSave(3, lmRowNo))
                        gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                        smTotalAppliedWriteOff = gAddStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                        gFormatStr smTotalAppliedWriteOff, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                        gFormatStr smSave(3, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                        'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                        mSetCompressShow lmRowNo, ilBoxNo
                    ElseIf (imCollectIndex = 9) Then
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gSubStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalDue = gSubStr(smTotalDue, smSave(2, lmRowNo))
                        smTotalJournal = gSubStr(smTotalJournal, smSave(2, lmRowNo))
                        smSave(2, lmRowNo) = edcDropDown.Text
                        'For llAdjRow = lmRowNo To UBound(smSave, 2) - 1 Step 1
                        For llAdjRow = lmRowNo To lmRowCountMax Step 1
                            If Trim$(smSave(1, llAdjRow)) <> "" Then
                                smSave(1, llAdjRow) = gAddStr(smSave(1, llAdjRow), smSave(2, lmRowNo))
                                gFormatStr smSave(1, llAdjRow), FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                                smShow(AMNTDUE, llAdjRow) = tmTransCtrls(AMNTDUE).sShow
                                Exit For
                            End If
                        Next llAdjRow
                        smTotalDue = gAddStr(smTotalDue, smSave(2, lmRowNo))
                        gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                        smTotalJournal = gAddStr(smTotalJournal, smSave(2, lmRowNo))
                        gFormatStr smTotalJournal, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalJournal)
                        gFormatStr smSave(2, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                        'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                        mSetCompressShow lmRowNo, ilBoxNo
                    End If
                    pbcCollect(imCollectIndex).Cls
                    pbcCollect_Paint imCollectIndex
                Case WRITEOFF
                    If imCollectIndex <> 9 Then
                        plcNum.Visible = False
                        cmcDropDown.Visible = False
                        edcDropDown.Visible = False  'Set visibility
                        slAmount = edcDropDown.Text
                        smSave(1, lmRowNo) = gAddStr(smSave(1, lmRowNo), smSave(3, lmRowNo))
                        smTotalDue = gAddStr(smTotalDue, smSave(3, lmRowNo))
                        smTotalAppliedWriteOff = gSubStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                        smSave(3, lmRowNo) = edcDropDown.Text
                        smSave(1, lmRowNo) = gSubStr(smSave(1, lmRowNo), smSave(3, lmRowNo))
                        gFormatStr smSave(1, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(AMNTDUE)
                        'smShow(AMNTDUE, lmRowNo) = tmTransCtrls(AMNTDUE).sShow
                        mSetCompressShow lmRowNo, AMNTDUE
                        smTotalDue = gSubStr(smTotalDue, smSave(3, lmRowNo))
                        gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                        smTotalAppliedWriteOff = gAddStr(smTotalAppliedWriteOff, smSave(3, lmRowNo))
                        gFormatStr smTotalAppliedWriteOff, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                        gFormatStr smSave(3, lmRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                        gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                        'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                        mSetCompressShow lmRowNo, ilBoxNo
                        pbcCollect(imCollectIndex).Cls
                        pbcCollect_Paint imCollectIndex
                    ElseIf imCollectIndex = 9 Then
                        edcDropDown.Visible = False  'Set visibility
                        cmcDropDown.Visible = False
                        lbcTranType.Visible = False
                        If lbcTranType.ListIndex > 0 Then
                            smSave(3, lmRowNo) = lbcTranType.List(lbcTranType.ListIndex)
                        Else
                            smSave(3, lmRowNo) = ""
                        End If
                        gSetShow pbcCollect(imCollectIndex), smSave(3, lmRowNo), tmTransCtrls(ilBoxNo)
                        'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                        mSetCompressShow lmRowNo, ilBoxNo
                    End If
                Case COMMENT
                    edcTranComment.Visible = False
                    smItemComment(lmRowNo) = edcTranComment.Text
                    slStr = smItemComment(lmRowNo)
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilBoxNo)
                    'smShow(ilBoxNo, lmRowNo) = tmTransCtrls(ilBoxNo).sShow
                    mSetCompressShow lmRowNo, ilBoxNo
            End Select
        End If
        lmRowNo = llCurrentRowNo
    End If
'    lmRowNo = -1
    mSetCommands
    Exit Sub

mSetShowErr: 'VBC NR
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSetType                        *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set type from lbcCashTrade     *
'*                                                     *
'*******************************************************
Private Sub mSetType()
    Dim slStr As String
    If lbcCashTrade.ListIndex >= 0 Then
        If lbcCashTrade.ListIndex <> imCashTradeIndex Then
            imCashTradeIndex = lbcCashTrade.ListIndex
            slStr = lbcCashTrade.List(imCashTradeIndex)
            If StrComp(slStr, "Cash", 1) = 0 Then
                imType = 0
            ElseIf StrComp(slStr, "Cash History", 1) = 0 Then
                imType = 1
            ElseIf StrComp(slStr, "Trade", 1) = 0 Then
                imType = 2
            ElseIf StrComp(slStr, "Trade History", 1) = 0 Then
                imType = 3
            ElseIf StrComp(slStr, "Merchandising", 1) = 0 Then
                imType = 4
            ElseIf StrComp(slStr, "Merchandising History", 1) = 0 Then
                imType = 5
            ElseIf StrComp(slStr, "Promotion", 1) = 0 Then
                imType = 6
            ElseIf StrComp(slStr, "Promotion History", 1) = 0 Then
                imType = 7
            'ElseIf StrComp(slStr, "Installment Revenue", 1) = 0 Then
            '    imType = 8
            End If
            If (imType = 1) Or (imType = 3) Or (imType = 5) Or (imType = 7) Then 'If history- force mapping to view
                imActionListIndex = 0
            'ElseIf (imType = 8) Then
            '    imActionListIndex = 0
            End If
            mChgAction
        End If
    Else
        imType = -1
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mShowComments                   *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mShowComments(lbcCtrl As Control)
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slStr1 As String
    Dim slCode As String
    Dim llRecPos As Long
    Dim slComment As String
    Dim slEDate As String
    Dim slADate As String
    Dim llComment As Long
'    Dim ilSelStart As Integer

    slComment = ""
    edcComment.Text = ""
    ReDim sComments(0)
    For ilLoop = 0 To lbcCtrl.ListCount - 1 Step 1
        slStr = lbcCtrl.List(ilLoop)
        ilRet = gParseItem(slStr, 4, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            imCdfRecLen = Len(tmCdf)
            llRecPos = Val(slCode)
            ilRet = btrGetDirect(hmCdf, tmCdf, imCdfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            'If tmCdf.iStrLen > 0 Then
            slStr = gStripChr0(tmCdf.sComment)
            If slStr <> "" Then
                'slStr = Trim$(Left$(tmCdf.sComment, tmCdf.iStrLen))
                gUnpackDate tmCdf.iDateEntrd(0), tmCdf.iDateEntrd(1), slEDate
                gUnpackDate tmCdf.iActionDate(0), tmCdf.iActionDate(1), slADate
                If slADate <> "" Then
                    slStr1 = "Entered: " & slEDate & sgTB & " Action: " & slADate & sgTB
                Else
                    slStr1 = "Entered: " & slEDate & sgTB
                End If
                If imAgencyFlag = 0 Then 'agency
                    slStr1 = slStr1 & mGetAdvtName(tmCdf.iAdfCode, True)
                Else
                    If tmCdf.iAgfCode <> 0 Then
                        slStr1 = slStr1 & mGetAgyName(tmCdf.iAgfCode, True)
                    End If
                End If
'                ilSelStart = Len(slComment)
                'If slComment <> "" Then
                    'slComment = slComment & sgCR & sgLF & slStr1 & sgCR & sgLF & slStr
'                    ilSelStart = ilSelStart + 2
                'Else
                    'slComment = slStr1 & sgCR & sgLF & slStr
                'End If
                slComment = slStr1
                'L.Bianchi
                llComment = UBound(sComments)
                llComment = llComment + 1
                ReDim Preserve sComments(llComment)
                sComments(llComment) = slComment
                'L.Bianchi
                slStr = Replace(slStr, vbCrLf, " ")
                mBreakText (slStr)
                
            End If
        End If
    Next ilLoop
    mFillCommentBox
    If UBound(sComments) > 0 Then 'L.Bianchi 04/16/2021
        vbcCommentBox.Value = vbcCommentBox.Max
    End If
    '5/21/18: Setting imChgMode not required as set in mCbcSelectionChange which calls this routine
    'edcComment.Text = slComment
    'edcComment.SelStart = Len(edcComment.Text)  'ilSelStart
'    edcComment.SelStart = 0
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mShowRvfInfo                    *
'*                                                     *
'*             Created:5/13/94       By:D. Hannifan    *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Show Rvf information for ageing*
'*                                                     *
'*******************************************************
Private Sub mShowRvfInfo()
    Dim llButtonRow As Long
    '12/7/18: Last row info not showing
    Dim llMaxRow As Long
    Dim llCompRow As Long
    
    plcRvfInfo.height = 705
    llButtonRow = mGetRowNo(lmButtonRow)
    If llButtonRow <= 0 Then
        plcRvfInfo.Visible = False
        Exit Sub
    End If
    llCompRow = vbcCollect.LargeChange + 1
    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        '12/7/18: Last row info not showing
        'If llButtonRow >= UBound(smSave, 2) Then
        If llButtonRow > UBound(smSave, 2) Then
            plcRvfInfo.Visible = False
            Exit Sub
        End If
    Else
        '12/7/18: Last row info not showing
        'If lmButtonRow >= UBound(smCompressedShow, 2) Then
        If lmButtonRow > UBound(smCompressedShow, 2) Then
            plcRvfInfo.Visible = False
            Exit Sub
        End If
        If llButtonRow > UBound(smShow, 2) Then
            plcRvfInfo.Visible = False
            Exit Sub
        End If
    End If
    Select Case imCollectIndex
        Case 8  'Aging
            If Trim$(smSave(6, llButtonRow)) = "" Then
                plcRvfInfo.Visible = False
                Exit Sub
            End If
            lacRvfInfo(3).Caption = ""
            lacRvfInfo(4).Caption = ""
            'If Trim$(smSave(9, llButtonRow)) <> "N" Then
                If Trim$(smSave(13, llButtonRow)) <> "" Then
                    lacRvfInfo(0).Caption = Trim$(smSave(13, llButtonRow)) & " Inv # " & Trim$(smSave(1, llButtonRow)) & "  Bill Vehicle " & Trim$(smSave(10, llButtonRow)) '& "  Air Vehicle " & Trim$(smSave(11, llButtonRow))
                Else
                    lacRvfInfo(0).Caption = "Invoice # " & Trim$(smSave(1, llButtonRow)) & "  Bill Vehicle " & Trim$(smSave(10, llButtonRow)) & "  Air Vehicle " & Trim$(smSave(11, llButtonRow))
                End If
            'Else
            '    lacRvfInfo(0).Caption = "Invoice # " & Trim$(smSave(1, llButtonRow)) & "  Vehicle " & Trim$(smSave(10, llButtonRow))
            'End If
            If (imType = 0) Or (imType = 1) Then
                lacRvfInfo(1).Caption = "Contract # " & Trim$(smSave(3, llButtonRow)) & "  Check # " & Trim$(smSave(4, llButtonRow)) & "  Transaction: Date " & Trim$(smSave(5, llButtonRow)) & "  Type " & Trim$(smSave(6, llButtonRow)) & "  Action " & Trim$(smSave(7, llButtonRow))
            Else
                lacRvfInfo(1).Caption = "Contract # " & Trim$(smSave(3, llButtonRow)) & "  Usage Code " & Trim$(smSave(4, llButtonRow)) & "  Transaction: Date " & Trim$(smSave(5, llButtonRow)) & "  Type " & Trim$(smSave(6, llButtonRow)) & "  Action " & Trim$(smSave(7, llButtonRow))
            End If
            If Trim$(smSave(12, llButtonRow)) <> "" Then
                lacRvfInfo(1).Caption = lacRvfInfo(1).Caption & " Participant " & Trim$(smSave(12, llButtonRow))
            End If
            If Trim$(smSave(15, llButtonRow)) <> "" Then
                lacRvfInfo(2).Caption = "Entered Date: " & Trim$(smSave(15, llButtonRow)) & " "
            Else
                lacRvfInfo(2).Caption = ""
            End If
            If Trim$(smSave(16, llButtonRow)) <> "" Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Salesperson: " & Trim$(smSave(16, llButtonRow)) & " "
            End If
            If Trim$(smSave(9, llButtonRow)) <> "N" Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Package Line: " & Trim$(smSave(9, llButtonRow))
            End If
            DoEvents
            plcRvfInfo.Visible = True
        Case 0 To 7, 9, 11, 12
            lacRvfInfo(0).Caption = ""
            lacRvfInfo(1).Caption = ""
            lacRvfInfo(2).Caption = ""
            lacRvfInfo(3).Caption = ""
            lacRvfInfo(4).Caption = ""
            'If Trim$(smSave(9, llButtonRow)) <> "N" Then
                If Trim$(smSave(13, llButtonRow)) <> "" Then
                    lacRvfInfo(0).Caption = Trim$(smSave(13, llButtonRow)) & " Inv # " & Trim$(smSave(8, llButtonRow)) & "  Bill Vehicle " & Trim$(smSave(10, llButtonRow)) '& "  Air Vehicle " & Trim$(smSave(11, llButtonRow))
                Else
                    lacRvfInfo(0).Caption = "Invoice # " & Trim$(smSave(8, llButtonRow)) & "  Bill Vehicle " & Trim$(smSave(10, llButtonRow)) & "  Air Vehicle " & Trim$(smSave(11, llButtonRow))
                End If
            'Else
            '    lacRvfInfo(0).Caption = "Invoice # " & Trim$(smSave(8, llButtonRow)) & "  Vehicle " & Trim$(smSave(10, llButtonRow))
            'End If
            If (imType = 0) Or (imType = 1) Then
                If Trim$(smSave(6, llButtonRow)) <> "" Then
                    lacRvfInfo(1).Caption = "Check # " & Trim$(smSave(7, llButtonRow)) & "  Type " & Trim$(smSave(5, llButtonRow)) & "  Action " & Trim$(smSave(6, llButtonRow))
                Else
                    lacRvfInfo(1).Caption = "Check # " & Trim$(smSave(7, llButtonRow)) & "  Type " & Trim$(smSave(5, llButtonRow))
                End If
            Else
                If Trim$(smSave(6, llButtonRow)) <> "" Then
                    lacRvfInfo(1).Caption = "Usage Code " & Trim$(smSave(7, llButtonRow)) & "  Type " & Trim$(smSave(5, llButtonRow)) & "  Action " & Trim$(smSave(6, llButtonRow))
                Else
                    lacRvfInfo(1).Caption = "Usage Code " & Trim$(smSave(7, llButtonRow)) & "  Type " & Trim$(smSave(5, llButtonRow))
                End If
            End If
            If Trim$(smSave(12, llButtonRow)) <> "" Then
                lacRvfInfo(1).Caption = lacRvfInfo(1).Caption & " Participant " & Trim$(smSave(12, llButtonRow))
            End If
            If Trim$(smSave(20, llButtonRow)) <> "" Then
                lacRvfInfo(1).Caption = lacRvfInfo(1).Caption & " Acq $ " & Trim$(smSave(20, llButtonRow))
            End If
            If Trim$(smSave(15, llButtonRow)) <> "" Then
                lacRvfInfo(2).Caption = "Entered: " & Trim$(smSave(15, llButtonRow)) & " "
            Else
                lacRvfInfo(2).Caption = ""
            End If
            If Trim$(smSave(17, llButtonRow)) <> "" Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Purge: " & Trim$(smSave(17, llButtonRow)) & " "
            End If
            If Trim$(smSave(16, llButtonRow)) <> "" Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Salesperson: " & Trim$(smSave(16, llButtonRow)) & " "
            End If
            If lmSave(2, llButtonRow) <> 0 Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Tax 1: " & Trim$(gLongToStrDec(lmSave(2, llButtonRow), 2)) & " "
            End If
            If lmSave(3, llButtonRow) <> 0 Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Tax 2: " & Trim$(gLongToStrDec(lmSave(3, llButtonRow), 2)) & " "
            End If
            If Trim$(smSave(9, llButtonRow)) <> "N" Then
                lacRvfInfo(2).Caption = lacRvfInfo(2).Caption & "Pkg Ln: " & Trim$(smSave(9, llButtonRow))
            End If
            'If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Then
            plcRvfInfo.height = lacRvfInfo(0).height + lacRvfInfo(1).height + lacRvfInfo(2).height + 30
            If Trim$(smSave(22, llButtonRow)) <> "" Then
                lacRvfInfo(3).Caption = Trim$(smSave(22, llButtonRow))
                plcRvfInfo.height = lacRvfInfo(0).height + lacRvfInfo(1).height + lacRvfInfo(2).height + lacRvfInfo(3).height + 30
            End If
            If (imCollectIndex <> 0) Then
                If Trim$(smTranComment(llButtonRow)) <> "" Then
                    If Trim$(smSave(22, llButtonRow)) <> "" Then
                        lacRvfInfo(4).Caption = smTranComment(llButtonRow)
                        plcRvfInfo.height = lacRvfInfo(0).height + lacRvfInfo(1).height + lacRvfInfo(2).height + lacRvfInfo(3).height + lacRvfInfo(4).height + 30
                    Else
                        lacRvfInfo(3).Caption = smTranComment(llButtonRow)
                        plcRvfInfo.height = lacRvfInfo(0).height + lacRvfInfo(1).height + lacRvfInfo(2).height + lacRvfInfo(3).height + 30
                    End If
                End If
            End If
            DoEvents
            plcRvfInfo.Visible = True
    End Select
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSPersonBranch                  *
'*                                                     *
'*             Created:6/4/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to        *
'*                      salesperson and process        *
'*                      communication back from        *
'*                      salesperson                    *
'*                                                     *
'*                                                     *
'*  General flow: pbc--Tab calls this function which   *
'*                initiates a task as a MODAL form.    *
'*                This form and the control loss focus *
'*                When the called task terminates two  *
'*                events are generated (Form activated;*
'*                GotFocus to pbc-Tab).  Also, control *
'*                is sent back to this function (the   *
'*                GotFocus event is initiated after    *
'*                this function finishes processing)   *
'*                                                     *
'*******************************************************
Private Function mSPersonBranch(ilInfo As Integer) As Integer
'
'   ilRet = mSPersonBranch()
'   Where:
'       ilInfo(I)- True= Info box; False=Adjustment
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilCallReturn As Integer
    Dim slName As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
'    If ilInfo Then
'        ilRet = gOptionalLookAhead(edcInfoDropDown, lbcSPerson, imBSMode, slStr)
'        If ((ilRet = 0) And (Not imDoubleClickName)) Or (edcInfoDropDown.Text = "[None]") Then
'            mSPersonBranch = False
'            Exit Function
'        End If
'    Else
        ilRet = gOptionalLookAhead(edcDropDown, lbcSalesperson, imBSMode, slStr)
        If ((ilRet = 0) And (Not imDoubleClickName)) Then
            mSPersonBranch = False
            Exit Function
        End If
'    End If
    'If Not gWinRoom(igNoLJWinRes(SALESPEOPLELIST)) Then
    '    mSPersonBranch = True
    '    pbcClickFocus.SetFocus
    '    Exit Function
    'End If
    'MousePointer = vbHourGlass  'Wait
    'If (imDoubleClickName) And (((ilInfo) And (lbcPayables.ListIndex > Traffic!lbcSalesperson.ListCount)) Or ((Not ilInfo) And (lbcSalesperson.ListIndex > Traffic!lbcSalesperson.ListCount))) Then
    'If (imDoubleClickName) And (((ilInfo) And (lbcSPerson.ListIndex > UBound(tmSalesperson))) Or ((Not ilInfo) And (lbcSalesperson.ListIndex > UBound(tmSalesperson)))) Then
    If (imDoubleClickName) And (((Not ilInfo) And (lbcSalesperson.ListIndex > UBound(tmSalesperson)))) Then
        imCombo = True
        'igVsfCallSource = CALLSOURCEADVERTISER
        'sgVsfName = slStr
        'sgVsfCallType = "S"
        'mSPersonBranch = True
'                Combo.Show vbModal
    Else
        imCombo = False
        'Screen.MousePointer = vbHourglass  'Wait
        igSlfCallSource = CALLSOURCECOLLECT
'        If ilInfo Then
'            If edcInfoDropDown.Text = "[New]" Then
'                sgSlfName = ""
'            Else
'                sgSlfName = slStr
'            End If
'        Else
            If edcDropDown.Text = "[New]" Then
                sgSlfName = ""
            Else
                sgSlfName = slStr
            End If
'        End If
        ilUpdateAllowed = imUpdateAllowed
        'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
        'edcLinkSrceDoneMsg.Text = ""
        'If (Not igStdAloneMode) And (imShowHelpMsg) Then
            If igTestSystem Then
                slStr = "Collect^Test\" & sgUserName & "\" & Trim$(str$(igSlfCallSource)) & "\" & sgSlfName
            Else
                slStr = "Collect^Prod\" & sgUserName & "\" & Trim$(str$(igSlfCallSource)) & "\" & sgSlfName
            End If
        'Else
        '    If igTestSystem Then
        '        slStr = "Collect^Test^NOHELP\" & sgUserName & "\" & Trim$(Str$(igSlfCallSource)) & "\" & sgSlfName
        '    Else
        '        slStr = "Collect^Prod^NOHELP\" & sgUserName & "\" & Trim$(Str$(igSlfCallSource)) & "\" & sgSlfName
        '    End If
        'End If
        'lgShellRet = Shell(sgExePath & "SPerson.Exe " & slStr, 1)
        'Collect.Enabled = False
        'Screen.MousePointer = vbDefault  'Wait
        'Do While Not igChildDone
        '    DoEvents
        'Loop
        sgCommandStr = slStr
        SPerson.Show vbModal
        slStr = sgDoneMsg
        ilParse = gParseItem(slStr, 1, "\", sgSlfName)
        igSlfCallSource = Val(sgSlfName)
        ilParse = gParseItem(slStr, 2, "\", sgSlfName)
        'Collect.Enabled = True
        'edcLinkSrceDoneMsg.Text = "Ok"
        'For ilLoop = 0 To 10
        '    DoEvents
        'Next ilLoop
    End If
    'MousePointer = vbDefault    'Default
    imDoubleClickName = False
    mSPersonBranch = True
    imUpdateAllowed = ilUpdateAllowed
    'If imUpdateAllowed = False Then
    '    mSendHelpMsg "BF"
    'Else
    '    mSendHelpMsg "BT"
    'End If
    gShowBranner imUpdateAllowed
    If imCombo Then
        'ilCallReturn = igVsfCallSource
        'slName = sgVsfName
    Else
        ilCallReturn = igSlfCallSource
        slName = sgSlfName
    End If
    'igVsfCallSource = CALLNONE
    igSlfCallSource = CALLNONE
    'sgVsfName = ""
    sgSlfName = ""
    mSPersonBranch = True
    If ilCallReturn = CALLDONE Then  'Done
'        lbcSPerson.Clear
        lbcSalesperson.Clear
        smSalespersonTag = ""
        sgMSlfStamp = ""
        mSPersonPop
        If imTerminate Then
            mSPersonBranch = False
            Exit Function
        End If
'        If ilInfo Then
'            gFindMatch slName, 1, lbcSPerson
'            If gLastFound(lbcSPerson) > 0 Then
'                imChgMode = True
'                lbcSPerson.ListIndex = gLastFound(lbcSPerson)
'                edcInfoDropDown.Text = lbcSPerson.List(lbcSPerson.ListIndex)
'                imChgMode = False
'                mSPersonBranch = False
'                mInfoSetChg SALESPINDEX
'            Else
'                imChgMode = True
'                lbcPayables.ListIndex = 1
'                edcInfoDropDown.Text = lbcPayables.List(1)
'                imChgMode = False
'                mInfoSetChg PAYABLESINDEX
'                edcInfoDropDown.SetFocus
'                Exit Function
'            End If
'        Else
            gFindMatch slName, 1, lbcSalesperson
            If gLastFound(lbcSalesperson) > 0 Then
                imChgMode = True
                lbcSalesperson.ListIndex = gLastFound(lbcSalesperson)
                edcDropDown.Text = lbcSalesperson.List(lbcSalesperson.ListIndex)
                imISalespersonListIndex = lbcSalesperson.ListIndex
                imChgMode = False
                mSPersonBranch = False
                'mInfoSetChg PAYABLESINDEX
            Else
                imChgMode = True
                lbcSalesperson.ListIndex = 1
                edcDropDown.Text = lbcSalesperson.List(1)
                imISalespersonListIndex = lbcSalesperson.ListIndex
                imChgMode = False
                'mSetChg PAYABLESINDEX
                edcDropDown.SetFocus
                Exit Function
            End If
'        End If
    End If
'    If ilInfo Then
'        If ilCallReturn = CALLCANCELLED Then  'Cancelled
'            mEnableInfoBox imInfoBoxNo
'            Exit Function
'        End If
'        If ilCallReturn = CALLTERMINATED Then
'            mEnableInfoBox imInfoBoxNo
'            Exit Function
'        End If
'    Else
        If ilCallReturn = CALLCANCELLED Then  'Cancelled
            mEnableBox imBoxNo
            Exit Function
        End If
        If ilCallReturn = CALLTERMINATED Then
            mEnableBox imBoxNo
            Exit Function
        End If
'    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSPersonPop                     *
'*                                                     *
'*             Created:6/4/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Sales office list box *
'*                      if requireds                   *
'*                                                     *
'*******************************************************
Private Sub mSPersonPop()
'
'   mSPersonPop
'   Where:
'
    Dim ilRet As Integer
'    ilIndex = lbcSPerson.ListIndex
'    If ilIndex > 1 Then
'        slName = lbcSPerson.List(ilIndex)
'    End If
    'If smInfoCtrls(PAYABLESINDEX) <> "" Then
        'slName = smInfoCtrls(PAYABLESINDEX)
        'gFndFirst 'lbcPayables,  slName
        'ilIndex = gLastFound(lbcPayables)
    'End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopSPersonComboBox(Collect, lbcPayables, Traffic!lbcSalesperson, Traffic!lbcPayablesCombo, igSlfFirstNameFirst)
    'ilRet = gPopSalespersonBox(Collect, 0, False, True, lbcPayables, Traffic!lbcSalesperson, igSlfFirstNameFirst)
    'ilRet = gPopSalespersonBox(Collect, 0, False, True, lbcSPerson, tmSalesperson(), smSalespersonTag, igSlfFirstNameFirst)
    ilRet = gPopSalespersonBox(Collect, 0, False, True, lbcSalesperson, tmSalesperson(), smSalespersonTag, igSlfFirstNameFirst)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mSPersonPopErr
        gCPErrorMsg ilRet, "mSPersonPop (gIMoveListBox)", Collect
        On Error GoTo 0
'        For ilLoop = 0 To lbcSPerson.ListCount - 1 Step 1
'            lbcSalesperson.AddItem lbcSPerson.List(ilLoop)  'Add ID to list box
'        Next ilLoop
        lbcSalesperson.AddItem "[New]", 0
'        lbcSPerson.AddItem "[None]", 0
'        lbcSPerson.AddItem "[New]", 0  'Force as first item on list
        imChgMode = True
'        If ilIndex > 1 Then
'            gFindMatch slName, 2, lbcSPerson
'            If gLastFound(lbcSPerson) > 1 Then
'                lbcSPerson.ListIndex = gLastFound(lbcSPerson)
'            Else
'                lbcSPerson.ListIndex = -1
'            End If
'        Else
'            lbcSPerson.ListIndex = ilIndex
'        End If
        imChgMode = False
    End If
    Exit Sub
mSPersonPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSSPartPop                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Sales Source/Participant*
'*                                                     *
'*******************************************************
Private Sub mSSPartPop(slTranDate As String)
    Dim ilLoop As Integer
    Dim ilVef As Integer
    Dim ilSS As Integer
    Dim ilP As Integer
    Dim ilAirVefCode As Integer
    Dim ilMnfSSCode As Integer
    Dim slStr As String
    Dim ilRet As Integer
    lbcSSPart.Clear
    ReDim tmSSPart(0 To 0) As SSPART
    If imIAirVehicleListIndex > -1 Then
        'ilRet = gParseItem(Traffic!lbcUserVehicle.List(imIAirVehicleListIndex), 2, "\", slStr)
        ilRet = gParseItem(tmUserVehicle(imIAirVehicleListIndex).sKey, 2, "\", slStr)
        ilAirVefCode = Val(Trim$(slStr))
    Else
        ilAirVefCode = 0
    End If
    ilMnfSSCode = 0
    If imISalespersonListIndex >= 1 Then
        ilRet = gParseItem(tmSalesperson(imISalespersonListIndex - 1).sKey, 2, "\", slStr)
        tmSlfSrchKey.iCode = Val(Trim$(slStr))
        ilRet = btrGetEqual(hmSlf, tmSlf, imSlfRecLen, tmSlfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            tmSofSrchKey.iCode = tmSlf.iSofCode
            ilRet = btrGetEqual(hmSof, tmSof, imSofRecLen, tmSofSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                ilMnfSSCode = tmSof.iMnfSSCode
            End If
        End If
    End If
    'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
    '    If ilAirVefCode = tgMVef(ilVef).iCode Then
        ilVef = gBinarySearchVef(ilAirVefCode)
        If ilVef <> -1 Then
            ilRet = gObtainPIF_ForVefDate(hmPif, tgMVef(ilVef).iCode, slTranDate, tmPif())
            'For ilLoop = LBound(tgMVef(ilVef).iMnfSSCode) To UBound(tgMVef(ilVef).iMnfSSCode) - 1 Step 1
            For ilLoop = LBound(tmPif) To UBound(tmPif) - 1 Step 1
                'If (tgMVef(ilVef).iMnfSSCode(ilLoop) > 0) And ((ilMnfSSCode = 0) Or (ilMnfSSCode = tgMVef(ilVef).iMnfSSCode(ilLoop))) Then
                If ((ilMnfSSCode = 0) Or (ilMnfSSCode = tmPif(ilLoop).iMnfSSCode)) Then
                    For ilSS = LBound(tmSMnf) To UBound(tmSMnf) - 1 Step 1
                        'If tgMVef(ilVef).iMnfSSCode(ilLoop) = tmSMnf(ilSS).iCode Then
                        If tmPif(ilLoop).iMnfSSCode = tmSMnf(ilSS).iCode Then
                            If Trim$(tmSMnf(ilSS).sUnitType) = "A" Then
                                For ilP = LBound(tmHMnf) To UBound(tmHMnf) - 1 Step 1
                                    'If tgMVef(ilVef).iMnfGroup(ilLoop) = tmHMnf(ilP).iCode Then
                                    If tmPif(ilLoop).iMnfGroup = tmHMnf(ilP).iCode Then
                                        tmSSPart(UBound(tmSSPart)).sKey = Trim$(tmSMnf(ilSS).sName) & "/" & Trim$(tmHMnf(ilP).sName)
                                        tmSSPart(UBound(tmSSPart)).iMnfSSCode = tmSMnf(ilSS).iCode
                                        tmSSPart(UBound(tmSSPart)).iMnfGroup = tmHMnf(ilP).iCode
                                        tmSSPart(UBound(tmSSPart)).iVefIndex = ilVef
                                        tmSSPart(UBound(tmSSPart)).iSSPartLp = ilLoop
                                        'tmSSPart(UBound(tmSSPart)).iProdPct = tgMVef(ilVef).iProdPct(ilLoop)
                                        tmSSPart(UBound(tmSSPart)).iProdPct = tmPif(ilLoop).iProdPct
                                        'tmSSPart(UBound(tmSSPart)).sUpdateRVF = tgMVef(ilVef).sUpdateRVF(ilLoop)
                                        tmSSPart(UBound(tmSSPart)).sUpdateRVF = tmPif(ilLoop).sUpdateRVF
                                        ReDim Preserve tmSSPart(0 To UBound(tmSSPart) + 1) As SSPART
                                        Exit For
                                    End If
                                Next ilP
                            End If
                            Exit For
                        End If
                    Next ilSS
                End If
            Next ilLoop
        End If
    'Next ilVef
    If UBound(tmSSPart) - 1 > 0 Then
        ArraySortTyp fnAV(tmSSPart(), 0), UBound(tmSSPart), 0, LenB(tmSSPart(0)), 0, LenB(tmSSPart(0).sKey), 0
    End If
    For ilLoop = LBound(tmSSPart) To UBound(tmSSPart) - 1 Step 1
        lbcSSPart.AddItem Trim$(tmSSPart(ilLoop).sKey)
    Next ilLoop
    lbcSSPart.AddItem "[Auto Split]", 0  'Force as first item on list
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mTerminate                      *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: terminate form                 *
'*                                                     *
'*******************************************************
Private Sub mTerminate()
'
'   mTerminate
'   Where:
'
    Dim ilRet As Integer

    imTerminate = False
    Screen.MousePointer = vbDefault
    igManUnload = YES
    Unload Collect
'    Set Collect = Nothing   'Remove data segment
    igManUnload = NO
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mTranTypeBranch                 *
'*                                                     *
'*             Created:9/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set up communication to Item   *
'*                      Billing Type and process       *
'*                      communication back from item   *
'*                      Billing Type                   *
'*                                                     *
'*                                                     *
'*  General flow: pbc--Tab calls this function which   *
'*                initiates a task as a MODAL form.    *
'*                This form and the control loss focus *
'*                When the called task terminates two  *
'*                events are generated (Form activated;*
'*                GotFocus to pbc-Tab).  Also, control *
'*                is sent back to this function (the   *
'*                GotFocus event is initiated after    *
'*                this function finishes processing)   *
'*                                                     *
'*******************************************************
Private Function mTranTypeBranch()
'
'   ilRet = mTranTypeBranch()
'   Where:
'       ilRet (O)- True = Stay on control
'                  False = go to next control
'
    Dim ilRet As Integer
    Dim slStr As String
    Dim ilParse As Integer
    Dim ilUpdateAllowed As Integer
    ilRet = gOptionalLookAhead(edcDropDown, lbcTranType, imBSMode, slStr)
    If (ilRet = 0) And (Not imDoubleClickName) Then
        mTranTypeBranch = False
        Exit Function
    End If
    'If Not gWinRoom(igNoLJWinRes(TRANSACTIONSLIST)) Then
    '    mTranTypeBranch = True
    '    mEnableBox imBoxNo
    '    Exit Function
    'End If
    'Screen.MousePointer = vbHourglass  'Wait
    sgMnfCallType = "Y"
    igMNmCallSource = CALLSOURCECOLLECT
    If edcDropDown.Text = "[New]" Then
        sgMNmName = ""
    Else
        sgMNmName = slStr
    End If
    ilUpdateAllowed = imUpdateAllowed
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
        If igTestSystem Then
            slStr = "Collect^Test\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        Else
            slStr = "Collect^Prod\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(str$(igMNmCallSource)) & "\" & sgMNmName
        End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Collect^Test^NOHELP\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(Str$(igMNmCallSource)) & "\" & sgMNmName
    '    Else
    '        slStr = "Collect^Prod^NOHELP\" & sgUserName & "\" & sgMnfCallType & "\" & Trim$(Str$(igMNmCallSource)) & "\" & sgMNmName
    '    End If
    'End If
    'lgShellRet = Shell(sgExePath & "MultiNm.Exe " & slStr, 1)
    'Collect.Enabled = False
    'Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    sgCommandStr = slStr
    MultiNm.Show vbModal
    slStr = sgDoneMsg
    ilParse = gParseItem(slStr, 1, "\", sgMNmName)
    igMNmCallSource = Val(sgMNmName)
    ilParse = gParseItem(slStr, 2, "\", sgMNmName)
    'Collect.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'MousePointer = vbDefault    'Default
    imDoubleClickName = False
    mTranTypeBranch = True
    imUpdateAllowed = ilUpdateAllowed
    'If imUpdateAllowed = False Then
    '    mSendHelpMsg "BF"
    'Else
    '    mSendHelpMsg "BT"
    'End If
    gShowBranner imUpdateAllowed
    If igMNmCallSource = CALLDONE Then  'Done
        igMNmCallSource = CALLNONE
'        gSetMenuState True
        lbcTranType.Clear
        smTranTypeCodeTag = ""
        mTranTypePop
        If imTerminate Then
            mTranTypeBranch = False
            Exit Function
        End If
        gFindMatch sgMNmName, 1, lbcTranType
'        mSetChg AGYDPINDEX
        sgMNmName = ""
        If gLastFound(lbcTranType) > 0 Then
            imChgMode = True
            lbcTranType.ListIndex = gLastFound(lbcTranType)
            edcDropDown.Text = lbcTranType.List(lbcTranType.ListIndex)
            imChgMode = False
            mTranTypeBranch = False
        Else
            imChgMode = True
            lbcTranType.ListIndex = 0
            edcDropDown.Text = lbcTranType.List(0)
            imChgMode = False
            edcDropDown.SetFocus
            Exit Function
        End If
    End If
    If igMNmCallSource = CALLCANCELLED Then  'Cancelled
'        gSetMenuState True
        igMNmCallSource = CALLNONE
        sgMNmName = ""
        mEnableBox imBoxNo
        Exit Function
    End If
    If igMNmCallSource = CALLTERMINATED Then
'        gSetMenuState True
        igMNmCallSource = CALLNONE
        sgMNmName = ""
        mEnableBox imBoxNo
        Exit Function
    End If
    Exit Function

    On Error GoTo 0
    imTerminate = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mTranTypePop                    *
'*                                                     *
'*             Created:9/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Transaction Types     *
'*                      list box if required           *
'*                                                     *
'*******************************************************
Private Sub mTranTypePop()
'
'   mAgyDPPop
'   Where:
'
    Dim ilRet As Integer
    Dim slName As String
    Dim ilIndex As Integer
    ilIndex = lbcTranType.ListIndex
    If ilIndex > 0 Then
        slName = lbcTranType.List(ilIndex)
    End If
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopMnfPlusFieldsBox(Collect, lbcTranType, lbcTranTypeCode, "YW")
    ilRet = gPopMnfPlusFieldsBox(Collect, lbcTranType, tmTranTypeCode(), smTranTypeCodeTag, "YW")
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mTranTypePopErr
        gCPErrorMsg ilRet, "mTranTypePop (gPopMnfPlusFieldsBox)", Collect
        On Error GoTo 0
        lbcTranType.AddItem "[New]", 0  'Force as first item on list
        imChgMode = True
        If ilIndex > 0 Then
            gFindMatch slName, 1, lbcTranType
            If gLastFound(lbcTranType) > 0 Then
                lbcTranType.ListIndex = gLastFound(lbcTranType)
            Else
                lbcTranType.ListIndex = -1
            End If
        Else
            lbcTranType.ListIndex = ilIndex
        End If
        imChgMode = False
    End If
    Exit Sub
mTranTypePopErr:
    On Error GoTo 0
    imTerminate = True
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVehPop                         *
'*                                                     *
'*             Created:5/13/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection combo   *
'*                      box                            *
'*                                                     *
'*******************************************************
Private Sub mVehPop()
    Dim ilRet As Integer
    'ilRet = gPopUserVehicleBox(Collect, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + ACTIVEVEH + DORMANTVEH, lbcVehicle, Traffic!lbcUserVehicle)
    ilRet = gPopUserVehicleBox(Collect, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + VEHPACKAGE + VEHREP_WO_CLUSTER + VEHREP_W_CLUSTER + VEHNTR + ACTIVEVEH + DORMANTVEH, lbcVehicle(0), tmRvfUserVehicle(), smRvfUserVehicleTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mVehPopErr
        gCPErrorMsg ilRet, "mVehPop (gPopUserVehicleBox: Vehicle)", Collect
        On Error GoTo 0
    End If
    If (tgSpf.sInvAirOrder = "S") Or (tgSpf.sInvAirOrder = "2") Then
        ilRet = gPopUserVehicleBox(Collect, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + VEHPACKAGE + VEHREP_WO_CLUSTER + VEHREP_W_CLUSTER + VEHNTR + ACTIVEVEH + DORMANTVEH, lbcVehicle(1), tmUserVehicle(), smUserVehicleTag)
    Else
        ilRet = gPopUserVehicleBox(Collect, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + VEHREP_WO_CLUSTER + VEHREP_W_CLUSTER + VEHNTR + ACTIVEVEH + DORMANTVEH, lbcVehicle(1), tmUserVehicle(), smUserVehicleTag)
    End If
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mVehPopErr
        gCPErrorMsg ilRet, "mVehPop (gPopUserVehicleBox: Vehicle)", Collect
        On Error GoTo 0
    End If
    ilRet = gPopUserVehicleBox(Collect, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + VEHPACKAGE + VEHREP_WO_CLUSTER + VEHREP_W_CLUSTER + VEHNTR + ACTIVEVEH + DORMANTVEH, lbcOnAcctVeh, tmOnAcctVeh(), smOnAcctVehTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        lbcOnAcctVeh.AddItem "[Agency]", 0  'Force as first item on list
        On Error GoTo mVehPopErr
        gCPErrorMsg ilRet, "mVehPop (gPopUserVehicleBox: Vehicle)", Collect
        On Error GoTo 0
    End If
    Exit Sub
mVehPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mZeroBalance                    *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Transfer all zero balanced     *
'*                      invoices and trades to revenue *
'*                      history                        *
'*            5/7/97 dh: Change to zero balance all    *
'*                      transactions as of previous    *
'*                      closing period                 *
'*******************************************************
Private Sub mZeroBalance()
    Dim tlRvf As RVF            'RVF or PHF record image
    Dim ilRvfRecLen As Integer  'RVF record length
    Dim hlRvf As Integer        'RVF or PHF file handle
    Dim hlPhf As Integer        'RVF or PHF file handle
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim llRvfRecPos As Long
    Dim slDate As String
    Dim llEndPrevPeriod As Long
    Dim slEndPrevPeriod As String
    Dim slNet As String
    Dim ilUpper As Integer
    Dim ilFound As Integer
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim llCashCount As Long  '2-8-02 chg from int. to long
    Dim ilTradeCount  As Integer
    Dim ilMerchCount As Integer
    Dim ilPromoCount  As Integer
    Dim slNowDate As String
    Dim slMsg As String
    Dim ilPass As Integer
    Dim slStr As String
    Dim ilBypassRvf As Integer
    Dim llNextLk As Long

    slNowDate = Format$(gNow(), "m/d/yy")
    hlRvf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlRvf, "", sgDBPath & "RVF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Exit Sub
    End If
    hlPhf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlPhf, "", sgDBPath & "PHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Exit Sub
    End If
    'Passes:
    '        1 = Match on Invoice Numbers, Agency, Advertiser and Cash/Trade
    '        2 = Match on Contract Number, Agency, Advertiser and Cash/Trade
    '        3 = Zero in InvNo, CntrNo, slfCode, Air/Bill Vehicle and Match on Agency, Advertiser and Cash/Trade
    '        4 = Zero in InvNo, CntrNo, slfCode, Air/Bill Vehicle and Match on Aging, Agency, Advertiser and Cash/Trade
    '  2-16-12 5 = Zero in InvNo, CntrNo, slfCode, Air/Bill Vehicle and Match on Check#, Agency, Advertiser and Cash/Trade
    llCashCount = 0         '2-8-02 chg from int. to long
    ilTradeCount = 0
    ilMerchCount = 0
    ilPromoCount = 0
    'For ilPass = 1 To 4 Step 1
    For ilPass = 1 To 5 Step 1

        Screen.MousePointer = vbHourglass
        'ReDim lmZBInvNo(0 To 0) As Long
        'ReDim imZBAgfCode(0 To 0) As Integer
        'ReDim imZBAdfCode(0 To 0) As Integer
        'ReDim smZBAmount(0 To 0) As String * 20
        'ReDim smZBType(0 To 0) As String * 1
        ReDim tmZP(0 To 0) As ZEROPURGE
        ReDim tmZPLink(0 To 0) As ZPLINK
        tmZP(0).lInvNo = 0
        tmZP(0).iAgfCode = -1
        tmZP(0).iAdfCode = -1
        tmZP(0).sAmount = ".00"
        tmZP(0).sType = ""
        tmZP(0).sCheckNo = ""
        tmZP(0).lFirstLk = -1
        ilUpper = 0
        ilRvfRecLen = Len(tlRvf)
        gUnpackDate tgSpf.iRPRP(0), tgSpf.iRPRP(1), slEndPrevPeriod
        'gUnpackDate tgSpf.iRCRP(0), tgSpf.iRCRP(1), slEndPrevPeriod
        llEndPrevPeriod = gDateValue(slEndPrevPeriod)
        ilRet = btrGetFirst(hlRvf, tlRvf, ilRvfRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE)
            If (tlRvf.sCashTrade <> "T") Or (tgSpf.sRUseTrade = "Y") Then
                'Ignore trade
                gUnpackDate tlRvf.iTranDate(0), tlRvf.iTranDate(1), slDate
                If gDateValue(slDate) <= llEndPrevPeriod Then
                    ilFound = False
                    ilBypassRvf = False
                    If ilPass = 1 Then
                        'Remove salesperson = 0 test as salesperson is now set sometimes
                        'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                        If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                            ilBypassRvf = True
                        Else
                            For ilLoop = LBound(tmZP) To UBound(tmZP) - 1 Step 1
                                If (tmZP(ilLoop).lInvNo = tlRvf.lInvNo) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then
                                    ilIndex = ilLoop
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilLoop
                        End If
                    ElseIf ilPass = 2 Then
                        'Remove salesperson = 0 test as salesperson is now set sometimes
                        'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                        If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                            ilBypassRvf = True
                        Else
                            For ilLoop = LBound(tmZP) To UBound(tmZP) - 1 Step 1
                                If (tmZP(ilLoop).lInvNo = tlRvf.lCntrNo) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then
                                    ilIndex = ilLoop
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilLoop
                        End If
                    ElseIf ilPass = 3 Then
                        'Remove salesperson = 0 test as salesperson is now set sometimes
                        'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                        If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                            For ilLoop = LBound(tmZP) To UBound(tmZP) - 1 Step 1
                                'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then

                                If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then

                                    ilIndex = ilLoop
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilLoop
                        Else
                            ilBypassRvf = True
                        End If
                    ElseIf ilPass = 4 Then
                        'Remove salesperson = 0 test as salesperson is now set sometimes
                        'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                        If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                            For ilLoop = LBound(tmZP) To UBound(tmZP) - 1 Step 1
                                'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) And (tmZP(ilLoop).lInvNo = (CLng(tlRvf.iAgePeriod) * 10000 + tlRvf.iAgingYear)) Then
                                If (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) And (tmZP(ilLoop).lInvNo = (CLng(tlRvf.iAgePeriod) * 10000 + tlRvf.iAgingYear)) Then
                                    ilIndex = ilLoop
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilLoop
                        Else
                            ilBypassRvf = True
                        End If
                    ElseIf ilPass = 5 Then          '2-17-12 add 5th pass to match on check #
                        'Remove salesperson = 0 test as salesperson is now set sometimes
                        'If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                        If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) Then
                            For ilLoop = LBound(tmZP) To UBound(tmZP) - 1 Step 1
                                '6/7/15: Check number changed to string
                                ''If (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) And (tmZP(ilLoop).lInvNo = (CLng(tlRvf.iAgePeriod) * 10000 + tlRvf.iAgingYear)) Then
                                'If (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iadfCode = tlRvf.iadfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) And (tmZP(ilLoop).lInvNo = tlRvf.lCheckNo) Then
                                If (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) And (UCase$(Trim$(tmZP(ilLoop).sCheckNo)) = UCase$(Trim$(tlRvf.sCheckNo))) Then
                                    ilIndex = ilLoop
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilLoop
                        Else
                            ilBypassRvf = True
                        End If
                    End If
                    If Not ilBypassRvf Then
                        If Not mRepBilled(tlRvf) Then
                            ilBypassRvf = True
                        End If
                    End If
                    If Not ilBypassRvf Then
                        gPDNToStr tlRvf.sNet, 2, slNet
                        If Not ilFound Then
                            ilIndex = UBound(tmZP)
                            'ReDim Preserve lmZBInvNo(0 To ilIndex + 1) As Long
                            'ReDim Preserve imZBAgfCode(0 To ilIndex + 1) As Integer
                            'ReDim Preserve imZBAdfCode(0 To ilIndex + 1) As Integer
                            'ReDim Preserve smZBAmount(0 To ilIndex + 1) As String * 20
                            'ReDim Preserve smZBType(0 To ilIndex + 1) As String * 1
                            ReDim Preserve tmZP(0 To ilIndex + 1) As ZEROPURGE
                            If ilPass = 1 Then
                                tmZP(ilIndex).lInvNo = tlRvf.lInvNo
                            ElseIf ilPass = 2 Then
                                tmZP(ilIndex).lInvNo = tlRvf.lCntrNo
                            ElseIf ilPass = 3 Then
                                tmZP(ilIndex).lInvNo = -1
                            ElseIf ilPass = 4 Then
                                tmZP(ilIndex).lInvNo = CLng(tlRvf.iAgePeriod) * 10000 + tlRvf.iAgingYear
                            ElseIf ilPass = 5 Then          '2-17-12 add 5th pass to match on check#
                                '6/7/15: Check number changed to string
                                'tmZP(ilIndex).lInvNo = tlRvf.lCheckNo
                                tmZP(ilIndex).sCheckNo = tlRvf.sCheckNo
                            End If
                            tmZP(ilIndex).iAgfCode = tlRvf.iAgfCode
                            tmZP(ilIndex).iAdfCode = tlRvf.iAdfCode
                            tmZP(ilIndex).sAmount = slNet
                            tmZP(ilIndex).sAmount = gAddStr(Trim$(tmZP(ilIndex).sAmount), gLongToStrDec(tlRvf.lTax1, 2))
                            tmZP(ilIndex).sAmount = gAddStr(Trim$(tmZP(ilIndex).sAmount), gLongToStrDec(tlRvf.lTax2, 2))
                            tmZP(ilIndex).sType = tlRvf.sCashTrade
                            tmZP(ilIndex).lFirstLk = UBound(tmZPLink)
                            tmZPLink(UBound(tmZPLink)).lNextLk = -1
                            tmZPLink(UBound(tmZPLink)).lRvfCode = tlRvf.lCode
                            ReDim Preserve tmZPLink(0 To UBound(tmZPLink) + 1) As ZPLINK
                            tmZP(ilIndex + 1).lInvNo = 0
                            tmZP(ilIndex + 1).iAdfCode = -1
                            tmZP(ilIndex + 1).iAdfCode = -1
                            tmZP(ilIndex + 1).sAmount = ".00"
                            tmZP(ilIndex + 1).sType = ""
                            tmZP(ilIndex + 1).sCheckNo = ""
                            tmZP(ilIndex + 1).lFirstLk = -1
                        Else
                            tmZP(ilIndex).sAmount = gAddStr(Trim$(tmZP(ilIndex).sAmount), slNet)
                            tmZP(ilIndex).sAmount = gAddStr(Trim$(tmZP(ilIndex).sAmount), gLongToStrDec(tlRvf.lTax1, 2))
                            tmZP(ilIndex).sAmount = gAddStr(Trim$(tmZP(ilIndex).sAmount), gLongToStrDec(tlRvf.lTax2, 2))
                            llNextLk = tmZP(ilIndex).lFirstLk
                            Do
                                If tmZPLink(llNextLk).lNextLk = -1 Then
                                    tmZPLink(llNextLk).lNextLk = UBound(tmZPLink)
                                    tmZPLink(UBound(tmZPLink)).lNextLk = -1
                                    tmZPLink(UBound(tmZPLink)).lRvfCode = tlRvf.lCode
                                    ReDim Preserve tmZPLink(0 To UBound(tmZPLink) + 1) As ZPLINK
                                    Exit Do
                                End If
                                llNextLk = tmZPLink(llNextLk).lNextLk
                            Loop 'While llNextLk <> -1
                        End If
                    End If
                End If
            End If
            ilRet = btrGetNext(hlRvf, tlRvf, ilRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        For ilLoop = LBound(tmZP) To UBound(tmZP) - 1 Step 1
            'Transfer zero balance
            If (gCompNumberStr(Trim$(tmZP(ilLoop).sAmount), ".00") = 0) Then
                ReDim lmZBRvfCode(0 To 0) As Long
                'If tmZP(ilLoop).iAgfCode = 0 Then
                '    tmRvfSrchKey1.iAdfCode = tmZP(ilLoop).iAdfCode
                '    ilRet = btrGetEqual(hlRvf, tlRvf, ilRvfRecLen, tmRvfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                'Else
                '    tmRvfSrchKey.iAgfCode = tmZP(ilLoop).iAgfCode
                '    ilRet = btrGetEqual(hlRvf, tlRvf, ilRvfRecLen, tmRvfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                'End If
                'Do While (ilRet = BTRV_ERR_NONE)
                '    If tmZP(ilLoop).iAgfCode = 0 Then
                '        If tlRvf.iAdfCode <> tmZP(ilLoop).iAdfCode Then
                '            Exit Do
                '        End If
                '    Else
                '        If tlRvf.iAgfCode <> tmZP(ilLoop).iAgfCode Then
                '            Exit Do
                '        End If
                '    End If
                '    gUnpackDate tlRvf.iTranDate(0), tlRvf.iTranDate(1), slDate
                '    If (tlRvf.sCashTrade <> "T") Or (tgSpf.sRUseTrade = "Y") Then
                '        If ilPass = 1 Then
                '            If (gDateValue(slDate) <= llEndPrevPeriod) And (tmZP(ilLoop).lInvNo = tlRvf.lInvNo) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then
                '                lmZBRvfCode(UBound(lmZBRvfCode)) = tlRvf.lCode
                '                ReDim Preserve lmZBRvfCode(0 To UBound(lmZBRvfCode) + 1) As Long
                '            End If
                '        ElseIf ilPass = 2 Then
                '            If (gDateValue(slDate) <= llEndPrevPeriod) And (tmZP(ilLoop).lInvNo = tlRvf.lCntrNo) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then
                '                lmZBRvfCode(UBound(lmZBRvfCode)) = tlRvf.lCode
                '                ReDim Preserve lmZBRvfCode(0 To UBound(lmZBRvfCode) + 1) As Long
                '            End If
                '        ElseIf ilPass = 3 Then
                '            If (gDateValue(slDate) <= llEndPrevPeriod) And (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) Then
                '                lmZBRvfCode(UBound(lmZBRvfCode)) = tlRvf.lCode
                '                ReDim Preserve lmZBRvfCode(0 To UBound(lmZBRvfCode) + 1) As Long
                '            End If
                '        ElseIf ilPass = 4 Then
                '            If (gDateValue(slDate) <= llEndPrevPeriod) And (tlRvf.lInvNo = 0) And (tlRvf.lCntrNo = 0) And (tlRvf.iSlfCode = 0) And (tlRvf.iAirVefCode = 0) And (tlRvf.iBillVefCode = 0) And (tmZP(ilLoop).iAgfCode = tlRvf.iAgfCode) And (tmZP(ilLoop).iAdfCode = tlRvf.iAdfCode) And (tmZP(ilLoop).sType = tlRvf.sCashTrade) And (tmZP(ilLoop).lInvNo = (CLng(tlRvf.iAgePeriod) * 10000 + tlRvf.iAgingYear)) Then
                '                lmZBRvfCode(UBound(lmZBRvfCode)) = tlRvf.lCode
                '                ReDim Preserve lmZBRvfCode(0 To UBound(lmZBRvfCode) + 1) As Long
                '            End If
                '        End If
                '    End If
                '    ilRet = btrGetNext(hlRvf, tlRvf, ilRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                'Loop
                llNextLk = tmZP(ilLoop).lFirstLk
                Do
                    lmZBRvfCode(UBound(lmZBRvfCode)) = tmZPLink(llNextLk).lRvfCode
                    ReDim Preserve lmZBRvfCode(0 To UBound(lmZBRvfCode) + 1) As Long
                    If tmZPLink(llNextLk).lNextLk = -1 Then
                        Exit Do
                    End If
                    llNextLk = tmZPLink(llNextLk).lNextLk
                Loop
                If UBound(lmZBRvfCode) > 0 Then
                    ilRet = btrBeginTrans(hlRvf, 1000)
                    If ilRet <> BTRV_ERR_NONE Then
                        Screen.MousePointer = vbDefault
                        ilRet = MsgBox("Zero Balance Stopped, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                        Exit Sub
                    End If
                    For ilIndex = 0 To UBound(lmZBRvfCode) - 1 Step 1
                        tmRvfSrchKey2.lCode = lmZBRvfCode(ilIndex)
                        ilRet = btrGetEqual(hlRvf, tlRvf, ilRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilRet = btrAbortTrans(hlRvf)
                            btrDestroy hlRvf
                            btrDestroy hlPhf
                            Screen.MousePointer = vbDefault    'Default
                            ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                            Exit Sub
                        End If
                        tlRvf.lCode = 0 'Can't retain code since autoInc installed after phf records created
                        gPackDate slNowDate, tlRvf.iPurgeDate(0), tlRvf.iPurgeDate(1)
                        'tlRvf.sUnused = ""
                        ilRet = btrInsert(hlPhf, tlRvf, ilRvfRecLen, INDEXKEY0)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilRet = btrAbortTrans(hlRvf)
                            btrDestroy hlRvf
                            btrDestroy hlPhf
                            Screen.MousePointer = vbDefault    'Default
                            ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                            Exit Sub
                        End If
                        Do
                            ilRet = btrDelete(hlRvf)
                            If ilRet = BTRV_ERR_CONFLICT Then
                                tmRvfSrchKey2.lCode = lmZBRvfCode(ilIndex)
                                ilCRet = btrGetEqual(hlRvf, tlRvf, ilRvfRecLen, tmRvfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORWRITE)
                                If ilCRet <> BTRV_ERR_NONE Then
                                    ilRet = btrAbortTrans(hlRvf)
                                    btrDestroy hlRvf
                                    btrDestroy hlPhf
                                    Screen.MousePointer = vbDefault    'Default
                                    ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                                    Exit Sub
                                End If
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            ilRet = btrAbortTrans(hlRvf)
                            btrDestroy hlRvf
                            btrDestroy hlPhf
                            Screen.MousePointer = vbDefault    'Default
                            ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                            Exit Sub
                        End If
                        If tlRvf.sCashTrade = "C" Then
                            llCashCount = llCashCount + 1   '2-8-02 chg from int. to long
                        ElseIf tlRvf.sCashTrade = "T" Then
                            ilTradeCount = ilTradeCount + 1
                        ElseIf tlRvf.sCashTrade = "M" Then
                            ilMerchCount = ilMerchCount + 1
                        ElseIf tlRvf.sCashTrade = "P" Then
                            ilPromoCount = ilPromoCount + 1
                        End If
                    Next ilIndex
                    ilRet = btrEndTrans(hlRvf)
                End If
            End If
        Next ilLoop
    Next ilPass
    'Transfer Trade or Net of Zero
    ilRet = btrGetFirst(hlRvf, tlRvf, ilRvfRecLen, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE)
        gUnpackDate tlRvf.iTranDate(0), tlRvf.iTranDate(1), slDate
        If (tlRvf.sCashTrade <> "T") Or (tgSpf.sRUseTrade = "Y") Then
            If gDateValue(slDate) <= llEndPrevPeriod Then
                'ilFound = False
                'For ilLoop = LBound(lmZBInvNo) To UBound(lmZBInvNo) - 1 Step 1
                '    If (lmZBInvNo(ilLoop) = tlRvf.lInvNo) And (imZBAgfCode(ilLoop) = tlRvf.iagfCode) And (imZBAdfCode(ilLoop) = tlRvf.iAdfCode) Then
                '        ilIndex = ilLoop
                '        ilFound = True
                '        Exit For
                '    End If
                'Next ilLoop
                'If ilFound Then
                    'Transfer transaction with a net of zero
                    gPDNToStr tlRvf.sNet, 2, slNet
                    'Combine taxes with net
                    slNet = gAddStr(Trim$(slNet), gLongToStrDec(tlRvf.lTax1, 2))
                    slNet = gAddStr(Trim$(slNet), gLongToStrDec(tlRvf.lTax2, 2))

                    If (gCompNumberStr(Trim$(slNet), ".00") = 0) Then
                        ilRet = btrBeginTrans(hlRvf, 1000)
                        If ilRet <> BTRV_ERR_NONE Then
                            Screen.MousePointer = vbDefault
                            ilRet = MsgBox("Zero Balance Stopped, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                            Exit Sub
                        End If
                        tlRvf.lCode = 0 'Can't retain code since autoInc installed after phf records created
                        gPackDate slNowDate, tlRvf.iPurgeDate(0), tlRvf.iPurgeDate(1)
                        'tlRvf.sUnused = ""
                        ilRet = btrInsert(hlPhf, tlRvf, ilRvfRecLen, INDEXKEY0)
                        If ilRet <> BTRV_ERR_NONE Then
                            ilRet = btrAbortTrans(hlRvf)
                            btrDestroy hlRvf
                            btrDestroy hlPhf
                            Screen.MousePointer = vbDefault    'Default
                            ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                            Exit Sub
                        End If
                        ilRet = btrGetPosition(hlRvf, llRvfRecPos)
                        Do
                            ilRet = btrDelete(hlRvf)
                            If ilRet = BTRV_ERR_CONFLICT Then
                                ilCRet = btrGetDirect(hlRvf, tlRvf, ilRvfRecLen, llRvfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                'tmRec = tlRvf
                                'ilCRet = gGetByKeyForUpdate("RVF", hlRvf, tmRec)
                                'tlRvf = tmRec
                                'If ilCRet <> BTRV_ERR_NONE Then
                                '    ilRet = btrAbortTrans(hlRvf)
                                '    btrDestroy hlRvf
                                '    btrDestroy hlPhf
                                '    Screen.MousePointer = vbDefault    'Default
                                '    ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOkOnly + vbExclamation, "Zero Purge")
                                '    Exit Sub
                                'End If
                            End If
                        Loop While ilRet = BTRV_ERR_CONFLICT
                        If ilRet <> BTRV_ERR_NONE Then
                            ilRet = btrAbortTrans(hlRvf)
                            btrDestroy hlRvf
                            btrDestroy hlPhf
                            Screen.MousePointer = vbDefault    'Default
                            ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                            Exit Sub
                        End If
                        ilRet = btrEndTrans(hlRvf)
                        If tlRvf.sCashTrade = "C" Then
                            llCashCount = llCashCount + 1       '2-8-02 chg from int. to long
                        ElseIf tlRvf.sCashTrade = "T" Then
                            ilTradeCount = ilTradeCount + 1
                        ElseIf tlRvf.sCashTrade = "M" Then
                            ilMerchCount = ilMerchCount + 1
                        ElseIf tlRvf.sCashTrade = "P" Then
                            ilPromoCount = ilPromoCount + 1
                        End If
                        mUpdateApfIfFullyPaid True, tlRvf.lInvNo
                    End If
                'End If
            End If
        Else
            'Trade- transfer amount
            If gDateValue(slDate) <= llEndPrevPeriod Then
                ilRet = btrBeginTrans(hlRvf, 1000)
                If ilRet <> BTRV_ERR_NONE Then
                    Screen.MousePointer = vbDefault
                    ilRet = MsgBox("Zero Balance Stopped, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                    Exit Sub
                End If
                tlRvf.lCode = 0 'Can't retain code since autoInc installed after phf records created
                gPackDate slNowDate, tlRvf.iPurgeDate(0), tlRvf.iPurgeDate(1)
                'tlRvf.sUnused = ""
                ilRet = btrInsert(hlPhf, tlRvf, ilRvfRecLen, INDEXKEY0)
                If ilRet <> BTRV_ERR_NONE Then
                    ilRet = btrAbortTrans(hlRvf)
                    btrDestroy hlRvf
                    btrDestroy hlPhf
                    Screen.MousePointer = vbDefault    'Default
                    ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                    Exit Sub
                End If
                ilRet = btrGetPosition(hlRvf, llRvfRecPos)
                Do
                    ilRet = btrDelete(hlRvf)
                    If ilRet = BTRV_ERR_CONFLICT Then
                        ilCRet = btrGetDirect(hlRvf, tlRvf, ilRvfRecLen, llRvfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        'tmRec = tlRvf
                        'ilCRet = gGetByKeyForUpdate("RVF", hlRvf, tmRec)
                        'tlRvf = tmRec
                        'If ilCRet <> BTRV_ERR_NONE Then
                        '    ilRet = btrAbortTrans(hlRvf)
                        '    btrDestroy hlRvf
                        '    btrDestroy hlPhf
                        '    Screen.MousePointer = vbDefault    'Default
                        '    ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOkOnly + vbExclamation, "Zero Purge")
                        '    Exit Sub
                        'End If
                    End If
                Loop While ilRet = BTRV_ERR_CONFLICT
                If ilRet <> BTRV_ERR_NONE Then
                    ilRet = btrAbortTrans(hlRvf)
                    btrDestroy hlRvf
                    btrDestroy hlPhf
                    Screen.MousePointer = vbDefault    'Default
                    ilRet = MsgBox("Zero Balance Not Completed, Try Later", vbOKOnly + vbExclamation, "Zero Purge")
                    Exit Sub
                End If
                ilRet = btrEndTrans(hlRvf)
                ilTradeCount = ilTradeCount + 1
            End If
        End If
        ilRet = btrGetNext(hlRvf, tlRvf, ilRvfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
    Loop
    ilRet = btrClose(hlRvf)
    btrDestroy hlRvf
    ilRet = btrClose(hlPhf)
    btrDestroy hlPhf
    mResetAdvtAgy
    If imSelectedIndex >= 0 Then
        pbcInfo.Cls
        If (imAgencyFlag = 1) Or imDirectFlag Then 'advertiser
            If lbcStatAgency.ListIndex = 0 Then
                edcStatDropDown_Change
            Else
                lbcStatAgency.ListIndex = 0
            End If
        Else
            If lbcStatAdvt.ListIndex = 0 Then
                edcStatDropDown_Change
            Else
                lbcStatAdvt.ListIndex = 0
            End If
        End If
        pbcInfo_Paint
    End If
    Do
        imSpfRecLen = Len(tgSpf)
        ilRet = btrGetFirst(hmSpf, tgSpf, imSpfRecLen, 0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
        slStr = Format$(gNow(), "m/d/yy")
        gPackDate slStr, tgSpf.iRLastPurgedDate(0), tgSpf.iRLastPurgedDate(1)
        ilRet = btrUpdate(hmSpf, tgSpf, imSpfRecLen) '  Update File
    Loop While ilRet = BTRV_ERR_CONFLICT
    If ilRet <> BTRV_ERR_NONE Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Last Purged Date not updated into Spf" & str$(ilRet), vbOKOnly + vbExclamation, "Collection")
    End If
    Screen.MousePointer = vbDefault
    slMsg = "Transactions Transferred: " & "Cash =" & str$(llCashCount) & "; Trade =" & str$(ilTradeCount)
    If tgSpf.sRUseMerch = "Y" Then
        slMsg = slMsg & "; Merchandising =" & str$(ilMerchCount)
    End If
    If tgSpf.sRUsePromo = "Y" Then
        slMsg = slMsg & "; Promotion =" & str$(ilPromoCount)
    End If
    MsgBox slMsg, vbOKOnly + vbInformation, "Zero Purge"
End Sub
Private Sub pbcCalendar_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llDate As Long
    Dim ilWkDay As Integer
    Dim llRowNo As Long
    Dim slDay As String
    llRowNo = 0
    llDate = lmCalStartDate
    Do
        ilWkDay = gWeekDayLong(llDate)
        slDay = Trim$(str$(Day(llDate)))
        If (X >= tmCDCtrls(ilWkDay + 1).fBoxX) And (X <= (tmCDCtrls(ilWkDay + 1).fBoxX + tmCDCtrls(ilWkDay + 1).fBoxW)) Then
            If (Y >= tmCDCtrls(ilWkDay + 1).fBoxY + llRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15)) And (Y <= tmCDCtrls(ilWkDay + 1).fBoxY + llRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15) + tmCDCtrls(ilWkDay + 1).fBoxH) Then
                'If (lmRowNo < 1) And ((imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7)) And (imBoxNo = imCheckDate) Then
                If (lmRowNo < 1) And ((imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
                    edcDropDown.Text = Format$(llDate, "m/d/yy")
                    edcDropDown.SelStart = 0
                    edcDropDown.SelLength = Len(edcDropDown.Text)
                    imBypassFocus = True
                    edcDropDown.SetFocus
                    Exit Sub
                ElseIf (lmRowNo < 1) And (imCollectIndex = 1) And (imBoxNo = imCheckDate) Then
                    edcDropDown.Text = Format$(llDate, "m/d/yy")
                    edcDropDown.SelStart = 0
                    edcDropDown.SelLength = Len(edcDropDown.Text)
                    imBypassFocus = True
                    edcDropDown.SetFocus
                    Exit Sub
                ElseIf (lmRowNo < 1) And (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
                    edcDropDown.Text = Format$(llDate, "m/d/yy")
                    edcDropDown.SelStart = 0
                    edcDropDown.SelLength = Len(edcDropDown.Text)
                    imBypassFocus = True
                    edcDropDown.SetFocus
                    Exit Sub
                ElseIf (lmRowNo < 1) And (imCollectIndex = 10) And (imBoxNo = ITRANDATEINDEX) Then
                    edcDropDown.Text = Format$(llDate, "m/d/yy")
                    edcDropDown.SelStart = 0
                    edcDropDown.SelLength = Len(edcDropDown.Text)
                    imBypassFocus = True
                    edcDropDown.SetFocus
                    Exit Sub
                ElseIf Not imComActDateFlag Then 'use edcCommentDate
                    edcCommentDate.Text = Format$(llDate, "m/d/yy")
                    edcCommentDate.SelStart = 0
                    edcCommentDate.SelLength = Len(edcCommentDate.Text)
                    imBypassFocus = True
                    edcCommentDate.SetFocus
                    Exit Sub
                Else    'use edcComment Date
                    edcCommDropDown.Text = Format$(llDate, "m/d/yy")
                    edcCommDropDown.SelStart = 0
                    edcCommDropDown.SelLength = Len(edcCommDropDown.Text)
                    imBypassFocus = True
                    edcCommDropDown.SetFocus
                    Exit Sub
                End If
            End If
        End If
        If ilWkDay = 6 Then
            llRowNo = llRowNo + 1
        End If
        llDate = llDate + 1
    Loop Until llDate > lmCalEndDate
    If (lmRowNo < 1) And ((imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 12)) And (imBoxNo = imCheckDate) Then
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 1) And (imBoxNo = imCheckDate) Then
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 9) And (imBoxNo = imCheckDate) Then
        edcDropDown.SetFocus
    ElseIf (lmRowNo < 1) And (imCollectIndex = 10) And (imBoxNo = ITRANDATEINDEX) Then
        edcDropDown.SetFocus
    ElseIf Not imComActDateFlag Then
        edcCommentDate.SetFocus
    Else
        edcCommDropDown.SetFocus
    End If
End Sub
Private Sub pbcCalendar_Paint()
    Dim slStr As String
    slStr = Trim$(str$(imCalMonth)) & "/15/" & Trim$(str$(imCalYear))
    lacCalName.Caption = gMonthYearFormat(slStr)
    gPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
    mBoxCalDate
End Sub
Private Sub pbcClickFocus_GotFocus()
    mS4SetShow
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub pbcClickFocus_KeyUp(KeyCode As Integer, Shift As Integer)
    plcCalendar.Visible = False
    If KeyCode = KEYF1 Then    'Functio key 1= Help
        'Traffic!cdcSetup.HelpFile = sgHelpPath & "traffic.hlp"
        'Traffic!cdcSetup.HelpCommand = cdlHelpIndex
        'Traffic!cdcSetup.Action = 6
    End If
End Sub
Private Sub pbcCollect_GotFocus(Index As Integer)
    plcCalendar.Visible = False
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 9) Then
        If imBoxNo = ASTERICK Then
            mSetShow imBoxNo
            imBoxNo = -1
            lmRowNo = -1
        End If
    ElseIf imCollectIndex = 12 Then
        If imBoxNo = IAASTERICK Then
            mSetShow imBoxNo
            imBoxNo = -1
            lmRowNo = -1
        End If
    End If

End Sub
Private Sub pbcCollect_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llRow As Long
    Dim llMaxRow As Long
    Dim llCompRow As Long
    Dim blShown As Boolean
    'If imCollectIndex <> 8 Then
    If imCollectIndex = 10 Then
        Exit Sub
    End If
    imButton = Button
    If Button <> 2 Then  'Right Mouse
        Exit Sub
    End If
    If lmRowCountMax < 1 Then 'No transaction records
        Exit Sub
    End If
    llCompRow = vbcCollect.LargeChange + 1
    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        If UBound(smSave, 2) > llCompRow Then
            llMaxRow = llCompRow
        Else
            llMaxRow = lmRowCountMax 'UBound(smSave, 2)
        End If
    Else
        If UBound(smCompressedShow, 2) > llCompRow Then
            llMaxRow = llCompRow
        Else
            llMaxRow = UBound(smCompressedShow, 2) - 1 'lmRowCountMax 'UBound(smSave, 2)
        End If
    End If
    blShown = False
    For llRow = 1 To llMaxRow Step 1
        If (Y >= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(1).fBoxY)) And (Y <= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(1).fBoxY + tmTransCtrls(1).fBoxH)) Then
            blShown = True
            lmButtonRow = llRow + vbcCollect.Value - 1
            mShowRvfInfo
        End If
    Next llRow
    If Not blShown Then
        plcRvfInfo.Visible = False
    End If
End Sub
Private Sub pbcCollect_MouseMove(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llRow As Long
    Dim llMaxRow As Long
    Dim llCompRow As Long
    Dim blShown As Boolean
    If imIgnoreRightMove Then
        Exit Sub
    End If
    'If imCollectIndex <> 8 Then
    If imCollectIndex = 10 Then
        Exit Sub
    End If
    imButton = Button
    If Button <> 2 Then  'Right Mouse
        Exit Sub
    End If
    If lmRowCountMax < 1 Then 'No transaction records
        Exit Sub
    End If
    imIgnoreRightMove = True
    llCompRow = vbcCollect.LargeChange + 1
    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        If UBound(smSave, 2) > llCompRow Then
            llMaxRow = llCompRow
        Else
            llMaxRow = lmRowCountMax 'UBound(smSave, 2)
        End If
    Else
        If UBound(smCompressedShow, 2) > llCompRow Then
            llMaxRow = llCompRow
        Else
            llMaxRow = UBound(smCompressedShow, 2) - 1 'lmRowCountMax 'UBound(smSave, 2)
        End If
    End If
    blShown = False
    For llRow = 1 To llMaxRow Step 1
        If (Y >= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(1).fBoxY)) And (Y <= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(1).fBoxY + tmTransCtrls(1).fBoxH)) Then
            blShown = True
            lmButtonRow = llRow + vbcCollect.Value - 1
            mShowRvfInfo
        End If
    Next llRow
    If Not blShown Then
        plcRvfInfo.Visible = False
    End If
    imIgnoreRightMove = False
End Sub
Private Sub pbcCollect_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    Dim llRow As Long
    Dim llRowNo As Long
    Dim llMaxRow As Long
    Dim llCompRow As Long
    Dim slStr As String
    Dim ilStartBox As Integer
    Dim ilEndBox As Integer
    Dim ilColNo As Integer
    Dim ilChgBoxNo As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilFound As Integer
    Dim ilDateOk As Integer
    Dim slDate As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slTax As String
    Dim llRecPos As Long
    Dim slChkNo As String
    Dim slName As String
    Dim ilSvRow As Integer
    Dim llCurrentRowNo As Long
    '12/4/17
    Dim llCntrNo As Long
    Dim slRestoreTotal As String
    Dim slRestoreContractTotal As String
    

    If Button = 2 Then
        plcRvfInfo.Visible = False
        Exit Sub
    End If
    If (imSortListIndex < 0) Or (imSelectedIndex < 0) Or (lbcAction.ListIndex < 0) Or (imType < 0) Then   'no action selected
        Beep
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    If Not mAmountOk() Then
        Beep
        edcDropDown.SetFocus
        Exit Sub
    End If
    For ilBox = LBound(tmCtrls) To imTabMax Step 1
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                'If (ilBox = imAmount) And (imCollectIndex = 1) And (Len(smTotalUnapplied) > 0) Then
                '    Beep
                '    Exit Sub
                'End If
                If (ilBox = imAmount) And (imCollectIndex = 2) Then
                    MsgBox "Can't alter Amount", vbOKOnly + vbExclamation, "Warning"
                    Beep
                    Exit Sub
                End If
                If ((imCollectIndex = 5) Or (imCollectIndex = 6)) And (ilBox > ACTIONINDEX) Then
                    If imCollectIndex = 5 Then
                        mGetCheckInfo "B"
                    Else
                        mGetCheckInfo "D"
                    End If
                    If imTabMax = 2 Then
                        Beep
                        Exit Sub
                    End If
                End If
                If imCollectIndex = 10 Then
                    If (ilBox > IADVTINDEX) And (imIAdvtListIndex <= 0) Then
                        MsgBox "Advertiser must be Defined First", vbOKOnly + vbExclamation, "Warning"
                        Beep
                        Exit Sub
                    End If
                    If ilBox = ITRANTYPEINDEX Then  'Invoice type
                        MsgBox "Can't Define Transaction Type", vbOKOnly + vbExclamation, "Warning"
                        Beep
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                    Else
                        If ilBox = INTRTYPEINDEX Then  'Invoice type
                            MsgBox "Can't Define NTR Type", vbOKOnly + vbExclamation, "Warning"
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                    End If
                    If (ilBox = INTRTAXINDEX) Then
                        If (Not imTaxDefined) Or (tgSpf.sUsingNTR = "Y") Then
                            Beep
                            Exit Sub
                        End If
                        If imINTRTypeListIndex > 0 Then
                            slNameCode = tmNTRTypeCode(imINTRTypeListIndex - 1).sKey   'lbcItemCode.List(imIBSave(3, imIBRowNo) - 1)
                            ilRet = gParseItem(slNameCode, 6, "\", slTax)
                            If ilRet = CP_MSG_NONE Then
                                If slTax <> "Y" Then
                                    Beep
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                    'Ref Invoice # only for adj invoice
                    If (ilBox = IREFINVNOINDEX) And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                        MsgBox "Can't Define Reference Invoice #", vbOKOnly + vbExclamation, "Warning"
                        Beep
                        pbcClickFocus.SetFocus
                        Exit Sub
                    End If
                    If ilBox = ISSPARTINDEX Then
                        If (imISalespersonListIndex <= 0) Then
                            ilBox = ISPERSONINDEX
                        Else
                            mSSPartPop smITranDate
                            If lbcSSPart.ListCount <= 1 Then
                                Beep
                                Exit Sub
                            End If
                        End If
                    End If
                    '6/7/15: replaced acquisition from site override with Barter in system options
                    If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                        If (Asc(tgSpf.sOverrideOptions) And SPNTRACQUISITION) <> SPNTRACQUISITION Then
                            If ilBox = IACQUISITIONINDEX Then
                                Beep
                                Exit Sub
                            End If
                        End If
                    Else
                        If ((Asc(tgSpf.sUsingFeatures2) And BARTER) <> BARTER) Then
                            If ilBox = IACQUISITIONINDEX Then
                                Beep
                                Exit Sub
                            End If
                        End If
                    End If
                    If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                        If (ilBox = ISEASONINDEX) And (imIAirVefCode <= 0) Then
                            Beep
                            Exit Sub
                        End If
                        If (ilBox = IEVENTINDEX) And (lmISeasonGhfCode <= 0) Then
                            Beep
                            Exit Sub
                        End If
                    Else
                        If ilBox = ISEASONINDEX Then
                            Beep
                            Exit Sub
                        End If
                        If ilBox = IEVENTINDEX Then
                            Beep
                            Exit Sub
                        End If
                        
                    End If
                    
                End If
                mSetShow imBoxNo
                imBoxNo = ilBox
                lmRowNo = -1
                mEnableBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    If (igWinStatus(COLLECTIONSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Or (lmLockRecCode = 0) Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    'Check if sort changed
    If imCollectIndex = 1 Then
        If (smTotalAppliedDue = "") Or (gCompNumberStr(smAmount, smTotalUnapplied) = 0) Then
            For ilBox = imLBTransCtrls To imLBTransCtrls + 1 Step 1
                If ((X >= tmTransCtrls(ilBox).fBoxX) And (X <= (tmTransCtrls(ilBox).fBoxX + tmTransCtrls(ilBox).fBoxW))) Then
                    If (Y < tmTransCtrls(ilBox).fBoxY - 15) Then
                        If ((ilBox = ADVTAGENCY) And (imTranSort = 1)) Or ((ilBox = INVOICENO) And (imTranSort = 0)) Then
                            pbcCollect(imCollectIndex).Cls
                            mReadRVFPHF True
                            mResetInvNet
                        End If
                        Exit Sub
                    End If
                End If
            Next ilBox
        End If
    End If
    If ((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3)) And ((Len(smTotalUnapplied) = 0) Or (gCompAbsNumberStr(smTotalUnapplied, ".00") = 0)) Then
        ilBox = imTotalUnapplied
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                If (Len(smPostOnAccount) > 0) And (gCompNumberStr(smPostOnAccount, ".00") > 0) Then
                    mSetShow imBoxNo
                    imBoxNo = -1
                    lmRowNo = -1
                    smTotalUnapplied = smPostOnAccount
                    smPostOnAccount = ""
                    smOnAccountComment = ""
                    slStr = ""
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imPostOnAccount)
                    If imCollectIndex = 1 Then
                        slStr = ""
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imOnAccountTo)
                    End If
                    If imCollectIndex = 1 Then
                        slStr = ""
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imOnAccountVeh)
                    End If
                    If imCollectIndex <> 2 Then
                        slStr = ""
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imOnAccountComment)
                    End If
                    gFormatStr smTotalUnapplied, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                    pbcCollect(imCollectIndex).Cls
                    pbcCollect_Paint imCollectIndex
                    mSetCommands
                    Exit Sub
                Else
                    Beep
                    Exit Sub
                End If
            End If
        End If
    End If
    If ((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3)) And (Len(smPostOnAccount) = 0) Then
        ilBox = imPostOnAccount
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                If (Len(smTotalUnapplied) > 0) And (gCompNumberStr(smTotalUnapplied, ".00") > 0) Then
                    If (imCollectIndex = 3) Then
                        If (Asc(Trim$(smSave(5, imXRowNo))) <> Asc("P")) Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    mSetShow imBoxNo
                    imBoxNo = -1
                    lmRowNo = -1
                    smPostOnAccount = smTotalUnapplied
                    smTotalUnapplied = ".00"
                    gFormatStr smPostOnAccount, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imPostOnAccount)
                    If imCollectIndex = 1 Then
                        If (imAgencyFlag = 1) Or imDirectFlag Then
                            slStr = ""
                        Else
                            If imAdvtListIndex < 0 Then
                                imAdvtListIndex = 0
                                lbcAdvertiser.ListIndex = 0 '[Agency]
                            End If
                            slStr = lbcAdvertiser.List(imAdvtListIndex)
                        End If
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imOnAccountTo)
                    End If
                    If imCollectIndex = 1 Then
                        If imOnAcctVehListIndex < 0 Then
                            imOnAcctVehListIndex = 0
                            lbcOnAcctVeh.ListIndex = 0 '[Agency]
                        End If
                        slStr = lbcOnAcctVeh.List(imOnAcctVehListIndex)
                        gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imOnAccountVeh)
                    End If
                    gFormatStr smTotalUnapplied, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                    pbcCollect(imCollectIndex).Cls
                    pbcCollect_Paint imCollectIndex
                    mSetCommands
                    If cmcUpdate.Enabled Then
'                        cmcUpdate.SetFocus
'                        Exit Sub
                        'imBoxNo = imOnAccountTo
                        If (imAgencyFlag = 1) Or imDirectFlag Then
                            imBoxNo = imOnAccountComment
                        Else
                            imBoxNo = imOnAccountTo
                        End If
                        lmRowNo = -1
                        mEnableBox imBoxNo
                        Exit Sub
                    Else
                        Beep
                        Exit Sub
                    End If
                Else
                    Beep
                    Exit Sub
                End If
            End If
        End If
    End If
    If ((imCollectIndex = 1) Or (imCollectIndex = 3)) And ((Len(smTotalUnapplied) = 0) Or (gCompAbsNumberStr(smTotalUnapplied, ".00") = 0)) Then
        ilBox = imOnAccountTo
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                If (Len(smPostOnAccount) > 0) And (gCompNumberStr(smPostOnAccount, ".00") > 0) Then
                    If (imAgencyFlag = 1) Or imDirectFlag Then
                        Beep
                        Exit Sub
                    End If
                    mSetShow imBoxNo
                    imBoxNo = ilBox
                    lmRowNo = -1
                    mEnableBox ilBox
                    Exit Sub
                End If
            End If
        End If
    End If
    If ((imCollectIndex = 1)) And ((Len(smTotalUnapplied) = 0) Or (gCompAbsNumberStr(smTotalUnapplied, ".00") = 0)) Then
        ilBox = imOnAccountVeh
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                If (Len(smPostOnAccount) > 0) And (gCompNumberStr(smPostOnAccount, ".00") > 0) Then
                    mSetShow imBoxNo
                    imBoxNo = ilBox
                    lmRowNo = -1
                    mEnableBox ilBox
                    Exit Sub
                End If
            End If
        End If
    End If
    If ((imCollectIndex = 1) Or (imCollectIndex = 3)) And ((Len(smTotalUnapplied) = 0) Or (gCompAbsNumberStr(smTotalUnapplied, ".00") = 0)) Then
        ilBox = imOnAccountComment
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                If (Len(smPostOnAccount) > 0) And (gCompNumberStr(smPostOnAccount, ".00") > 0) Then
'                    If (imAgencyFlag = 1) Or imDirectFlag Then
'                        Beep
'                        Exit Sub
'                    End If
                    mSetShow imBoxNo
                    imBoxNo = ilBox
                    lmRowNo = -1
                    mEnableBox ilBox
                    Exit Sub
                End If
            End If
        End If
    End If
'    If (imCollectIndex = 2) Then
'        ilBox = imOnAccountComment
'        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
'            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
'                If (Len(smPostOnAccount) > 0) And (gCompNumberStr(smPostOnAccount, ".00") > 0) Then
'                    If (imAgencyFlag = 1) Or imDirectFlag Then
'                        Beep
'                        Exit Sub
'                    End If
'                    mSetShow imBoxNo
'                    imBoxNo = ilBox
'                    lmRowNo = -1
'                    mEnableBox ilBox
'                    Exit Sub
'                End If
'            End If
'        End If
'    End If
    If imColCount < 1 Then 'No transaction records
        Exit Sub
    End If
    If lmRowCountMax < 1 Then 'No transaction records
        Exit Sub
    End If
    llCompRow = vbcCollect.LargeChange + 1
    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        If UBound(smSave, 2) > llCompRow Then
            llMaxRow = llCompRow
        Else
            llMaxRow = lmRowCountMax 'UBound(smSave, 2)
        End If
    Else
        If UBound(smCompressedShow, 2) > llCompRow Then
            llMaxRow = llCompRow
        Else
            llMaxRow = UBound(smCompressedShow, 2) - 1 'lmRowCountMax 'UBound(smSave, 2)
        End If
    End If
    If (imCollectIndex <> 0) And ((imCollectIndex <> 8) Or (imAgeingShow <> 0)) And (imCollectIndex <> 10) And (imCollectIndex <> 11) And (imDisplayMode = 1) Then
        ilBox = ADVTAGENCY
        If (X >= tmTransCtrls(ilBox).fBoxX) And (X <= (tmTransCtrls(ilBox).fBoxX + 120)) Then
            For llRow = 1 To llMaxRow Step 1
                If (Y >= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(ilBox).fBoxY)) And (Y <= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(ilBox).fBoxY + tmTransCtrls(ilBox).fBoxH)) Then
                    llCurrentRowNo = llRow + vbcCollect.Value - 1
                    llRowNo = mGetRowNo(llCurrentRowNo)
                    If llRowNo <= 0 Then
                        Exit Sub
                    End If
                    If tmRowInfo(llCurrentRowNo).iRowStatus = 0 Then
                        mCreateCompressShow llRowNo, 1
                        pbcCollect(imCollectIndex).Cls
                        pbcCollect_Paint imCollectIndex
                        vbcCollect.Value = LBONE    'LBound(smShow, 2)
                        Exit Sub
                    ElseIf tmRowInfo(llCurrentRowNo).iRowStatus = 1 Then
                        mCreateCompressShow llRowNo, 0
                        pbcCollect(imCollectIndex).Cls
                        pbcCollect_Paint imCollectIndex
                        vbcCollect.Value = LBONE    'LBound(smShow, 2)
                        Exit Sub
                    End If
                End If
            Next llRow
        End If
    End If
    'Check if in Comment column- If so allow comment to be altered
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 7) Or (imCollectIndex = 9) Then
        ilBox = ASTERICK
    ElseIf imCollectIndex = 12 Then
        ilBox = IAASTERICK
    Else
        ilBox = -1
    End If
    If ilBox > 0 Then
        For llRow = 1 To llMaxRow Step 1
            If (X >= tmTransCtrls(ilBox).fBoxX) And (X <= (tmTransCtrls(ilBox).fBoxX + tmTransCtrls(ilBox).fBoxW)) Then
                If (Y >= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(ilBox).fBoxY)) And (Y <= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(ilBox).fBoxY + tmTransCtrls(ilBox).fBoxH)) Then
                    llCurrentRowNo = llRow + vbcCollect.Value - 1
                    llRowNo = mGetRowNo(llCurrentRowNo)
                    If llRowNo <= 0 Then
                        Beep
                        Exit Sub
                    End If
                    If Trim$(smTranComment(llRowNo)) = "" Then
                        Beep
                        Exit Sub
                    End If
                    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 12) Then
                        If (smTotalAppliedDue <> "") Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If (imCollectIndex = 4) Or (imCollectIndex = 7) Then
                        If (smTotalAppliedWriteOff <> "") Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    If (imCollectIndex = 9) Then
                        If (smTotalJournal <> "") Then
                            Beep
                            Exit Sub
                        End If
                    End If
                    mSetShow imBoxNo
                    imBoxNo = ilBox
                    lmRowNo = llCurrentRowNo    'llRowNo
                    mEnableBox ilBox
                    Exit Sub
                End If
            End If
        Next llRow
    End If

    If imCollectIndex = 1 Then
        If ((smCheckDate <> "") And (smCheckNo <> "") And (smAmount <> "") And ((imType = 0) Or (imType = 1))) Or ((smCheckDate <> "") And (smAmount <> "") And (imType > 1)) Then
            ilStartBox = imLBTransCtrls + 9
            ilEndBox = UBound(tmTransCtrls)
        Else
'            ilStartBox = 1
'            ilEndBox = 0
            Beep
'            If (imType = 0) Or (imType = 1) Then
'                MsgBox "Date or Check # or Amount must be Defined", vbOkOnly + vbExclamation, "Warning"
'            Else
'                MsgBox "Date or Amount must be Defined", vbOkOnly + vbExclamation, "Warning"
'            End If
            'Dick: 7/8/03-replace message with setting focus to missing field
            mSetShow imBoxNo
            If smCheckDate = "" Then
                ilBox = imCheckDate
            ElseIf smCheckNo = "" Then
                ilBox = imCheckNo
            Else
                ilBox = imAmount
            End If
            imBoxNo = ilBox
            lmRowNo = -1
            mEnableBox ilBox
            Exit Sub
        End If
    ElseIf imCollectIndex = 2 Then
        'If Len(smAmount) = 0 Then
        '    ilStartBox = imLBTransCtrls
        '    ilEndBox = imLBTransCtrls + 7
        'Else
        '    ilStartBox = imLBTransCtrls + 9
        '    ilEndBox = UBound(tmTransCtrls)
        'End If
        If Len(smAmount) = 0 Then
            ilStartBox = imLBTransCtrls
            ilEndBox = imLBTransCtrls + 7
        Else
            ilStartBox = imLBTransCtrls + 9
            ilEndBox = UBound(tmTransCtrls)
        End If
    ElseIf imCollectIndex = 3 Then
        If Len(smAmount) = 0 Then
            ilStartBox = imLBTransCtrls
            ilEndBox = imLBTransCtrls + 7
        Else
            ilStartBox = imLBTransCtrls + 9
            ilEndBox = UBound(tmTransCtrls)
        End If
    ElseIf imCollectIndex = 4 Then  'Reversal
        ilStartBox = imLBTransCtrls
        ilEndBox = imLBTransCtrls + 7
    ElseIf imCollectIndex = 7 Then  'Write-off
        ilStartBox = imLBTransCtrls + 9
        ilEndBox = UBound(tmTransCtrls)
    ElseIf imCollectIndex = 9 Then  'Journal
        mSetShow imBoxNo
        If smCheckDate <> "" Then
            ilStartBox = imLBTransCtrls + 9
            ilEndBox = UBound(tmTransCtrls)
        Else
'            ilStartBox = 1
'            ilEndBox = 0
            Beep
'            MsgBox "Transaction Date must be Defined", vbOkOnly + vbExclamation, "Warning"
            mSetShow imBoxNo
            ilBox = imCheckDate
            imBoxNo = ilBox
            lmRowNo = -1
            mEnableBox ilBox
            Exit Sub
        End If
    ElseIf imCollectIndex = 11 Then 'Restore
        ilStartBox = imLBTransCtrls
        ilEndBox = UBound(tmTransCtrls) - 1
        smRestoreCheckNo = ""
        ReDim smRestoreInvNo(0 To 0) As String
        smRestoreCheckTotal = ".00"
        smRestoreTotal = ".00"
    ElseIf imCollectIndex = 12 Then  'Invoice Adjustment
        mSetShow imBoxNo
        If smTranDate <> "" Then
            ilStartBox = imLBTransCtrls + 9
            ilEndBox = UBound(tmTransCtrls)
        Else
'            ilStartBox = 1
'            ilEndBox = 0
            Beep
'            MsgBox "Adjustment Transaction Date must be Defined", vbOkOnly + vbExclamation, "Warning"
            mSetShow imBoxNo
            ilBox = imCheckDate
            imBoxNo = ilBox
            lmRowNo = -1
            mEnableBox ilBox
            Exit Sub
        End If
    Else
        ilStartBox = 1
        ilEndBox = 0
    End If
    For llRow = 1 To llMaxRow Step 1
        For ilBox = ilStartBox To ilEndBox Step 1
            If (X >= tmTransCtrls(ilBox).fBoxX) And (X <= (tmTransCtrls(ilBox).fBoxX + tmTransCtrls(ilBox).fBoxW)) Then
                If (Y >= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(ilBox).fBoxY)) And (Y <= ((llRow - 1) * (fgBoxGridH + 15) + tmTransCtrls(ilBox).fBoxY + tmTransCtrls(ilBox).fBoxH)) Then
                    llCurrentRowNo = llRow + vbcCollect.Value - 1
                    llRowNo = mGetRowNo(llCurrentRowNo)
                    If llRowNo <= 0 Then
                        Beep
                        Exit Sub
                    End If
'                    If smSave(6, llRowNo) = "O" Then
'                        Beep
'                        Exit Sub
'                    End If
                    If (imCollectIndex = 1) Then    'Post cash
                        If (Trim$(smSave(1, llRowNo)) = "") Or ((gCompNumberStr(smTotalUnapplied, ".00") = 0) And (Trim$(smSave(2, llRowNo)) = "")) Then
                            Beep
                            MsgBox "Select Transaction with Total Value Owed or No Money to Allocate", vbOKOnly + vbExclamation, "Warning"
                            Exit Sub
                        End If
                        If (Trim$(smSave(5, llRowNo)) = "PO") Then
                            Beep
                            Exit Sub
                        End If
                    ElseIf (imCollectIndex = 2) Then    'Post on Account
                        If (Trim$(smSave(5, llRowNo)) = "PO") Then
                            If (Len(smAmount) > 0) Then
                                Beep
                                Exit Sub
                            End If
                            'Disallow posting with PO that are positive (instead of testing for action R)- Jim 11/11/03
                            If Asc(Trim$(smSave(4, llRowNo))) <> Asc("-") Then
                                Beep
                                Exit Sub
                            End If
                            If (gCompNumberStr(smSave(4, llRowNo), ".00") = 0) Then
                                Beep
                                Exit Sub
                            End If
                            If Asc(Trim$(smSave(4, llRowNo))) = Asc("-") Then
                                smAmount = Mid$(Trim$(smSave(4, llRowNo)), 2)
                            Else
                                smAmount = "-" & Trim$(smSave(4, llRowNo))
                            End If
                            slStr = smAmount
                            smTotalUnapplied = smAmount
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imAmount)
                            imPORowNo = llRowNo
                            ilColNo = NET
                            slStr = ".00"
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                            smShow(ilColNo, imPORowNo) = tmTransCtrls(ilColNo).sShow
                            smTotalDue = gAddStr(smTotalDue, smAmount)
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            ilColNo = AMNTDUE
                            smSave(1, imPORowNo) = gAddStr(smSave(1, imPORowNo), smAmount)
                            gFormatStr smSave(1, imPORowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                            smShow(ilColNo, imPORowNo) = tmTransCtrls(ilColNo).sShow
                            smOnAccountComment = "" 'smTranComment(llRowNo)
'                            slStr = smOnAccountComment
'                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imOnAccountComment)
                            mSetShow imBoxNo
                            imBoxNo = -1
                            lmRowNo = -1
                            pbcCollect(imCollectIndex).Cls
                            pbcCollect_Paint imCollectIndex
                            Exit Sub
                        ' JJB 04/19/2024  Do we need to not test for just AN
                        ElseIf (Trim$(smSave(5, llRowNo)) = "AN") And Asc(Trim$(smSave(1, llRowNo))) = Asc("-") Then
                            Beep
                            Exit Sub
                        Else
                            If (Len(smAmount) = 0) Then
                                Beep
                                Exit Sub
                            End If
                            If (Trim$(smSave(1, llRowNo)) = "") Or ((gCompNumberStr(smTotalUnapplied, ".00") = 0) And (Trim$(smSave(2, llRowNo)) = "")) Then
                                Beep
                                Exit Sub
                            End If
                        End If
                        'At least one transaction must be "IN" or "AN"
                        ilFound = False
                        ilSvRow = llRowNo
                        Do While llRowNo >= LBONE   'LBound(smSave, 2)
                            If (Left$(smSave(5, llRowNo), 1) = "I") Or (Left$(smSave(5, llRowNo), 1) = "A") Or (Left$(smSave(5, llRowNo), 1) = "H") Then
                                ilFound = True
                                Exit Do
                            End If
                            llRowNo = llRowNo - 1
                            'If llRowNo < LBound(smSave, 2) Then
                            If llRowNo < LBONE Then
                                Exit Do
                            End If
                            If (Len(Trim$(smSave(1, llRowNo))) <> 0) Then
                                Exit Do
                            End If
                        Loop
                        llRowNo = ilSvRow
                        If Not ilFound Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                    ElseIf (imCollectIndex = 3) Then    'Transfer
                        ''If (Len(smAmount) = 0) And ((Asc(Trim$(smSave(5, llRowNo))) = Asc("A")) Or (Trim$(smSave(5, llRowNo)) = "PI") Or (Trim$(smSave(5, llRowNo)) = "WB")) Then
                        'If (Len(smAmount) = 0) And ((Asc(Trim$(smSave(5, llRowNo))) = Asc("W")) Or (Asc(Trim$(smSave(5, llRowNo))) = Asc("P"))) Then
                        'Remove Transfer of 'W' 12/16/03- Jim.  The user could either do a Journel Entry or a Reversal instead
                        If (Len(smAmount) = 0) And (Asc(Trim$(smSave(5, llRowNo))) = Asc("P")) Then
                            If (gCompNumberStr(smSave(4, llRowNo), ".00") = 0) Then
                                Beep
                                Exit Sub
                            End If
                            If Asc(Trim$(smSave(4, llRowNo))) = Asc("-") Then
                                smAmount = Mid$(Trim$(smSave(4, llRowNo)), 2)
                            Else
                                smAmount = "-" & Trim$(smSave(4, llRowNo))
                            End If
                            If Trim$(smSave(5, llRowNo)) = "PO" Then
                                mSetShow imBoxNo
                                POModel.Show vbModal
                                If igPOReturn = 0 Then
                                    smAmount = ""
                                    Exit Sub
                                End If
                                If igPOReturn = 2 Then
                                    ilRet = gBinarySearchAdf(igPOCodeXFre)
                                    'If ilRet > 0 Then
                                    If ilRet <> -1 Then
                                        If (tgCommAdf(ilRet).sBillAgyDir = "D") And (Trim$(tgCommAdf(ilRet).sAddrID) <> "") Then
                                            slName = Trim$(tgCommAdf(ilRet).sName) & ", " & Trim$(tgCommAdf(ilRet).sAddrID)
                                        Else
                                            slName = Trim$(tgCommAdf(ilRet).sName)
                                        End If
                                    Else
                                        Exit Sub
                                    End If
                                Else
                                    ilRet = gBinarySearchAgf(igPOCodeXFre)
                                    'If ilRet > 0 Then
                                    If ilRet <> -1 Then
                                        slName = Trim$(tgCommAgf(ilRet).sName)
                                    Else
                                        Exit Sub
                                    End If
                                End If
                                imTabMax = 2
                                slStr = slName
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(WRITEOFF)
                                smShow(WRITEOFF, llRowNo) = tmTransCtrls(WRITEOFF).sShow
                                smTotalUnapplied = ".00"
                                slStr = smTotalUnapplied
                                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                                slStr = smAmount
                                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imAmount)
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedDue)
                                smTotalDue = gAddStr(smTotalDue, smAmount)
                                gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                                imXRowNo = llRowNo

                                ilColNo = AMNTDUE
                                smSave(1, imXRowNo) = gAddStr(smSave(1, imXRowNo), smAmount)
                                gFormatStr smSave(1, imXRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                                smShow(ilColNo, imXRowNo) = tmTransCtrls(ilColNo).sShow
                            Else
                                imTabMax = 3
                                slStr = smAmount
                                smTotalUnapplied = smAmount
                                gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalUnapplied)
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imAmount)
                                imXRowNo = llRowNo
    '                            ilColNo = NET
    '                            slStr = ".00"
    '                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
    '                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
    '                            smShow(ilColNo, imPORowNo) = tmTransCtrls(ilColNo).sShow
                                smTotalDue = gAddStr(smTotalDue, smAmount)
                                gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                                ilColNo = AMNTDUE
                                smSave(1, imXRowNo) = gAddStr(smSave(1, imXRowNo), smAmount)
                                gFormatStr smSave(1, imXRowNo), FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                                smShow(ilColNo, imXRowNo) = tmTransCtrls(ilColNo).sShow
                                mSetShow imBoxNo
                            End If
                            imBoxNo = -1
                            lmRowNo = -1
                            pbcCollect(imCollectIndex).Cls
                            pbcCollect_Paint imCollectIndex
                            mSetCommands
                            If (imType = 4) Or (imType = 5) Or (imType = 6) Or (imType = 7) Or (imTabMax = 3) Then
                                If Len(smTranDate) = 0 Then
                                    imBoxNo = imCheckDate
                                    mEnableBox imBoxNo
                                Else
                                    pbcClickFocus.SetFocus
                                End If
                            Else
                                If Len(smTranDate) <> 0 Then
                                    smTranDate = ""
                                    gSetShow pbcCollect(imCollectIndex), "", tmCtrls(imCheckDate)
                                    pbcCollect(imCollectIndex).Cls
                                    pbcCollect_Paint imCollectIndex
                                End If
                                If cmcUpdate.Enabled Then
                                    cmcUpdate.SetFocus
                                Else
                                    pbcClickFocus.SetFocus
                                End If
                            End If
                            Exit Sub
                        Else
                            If (Len(smAmount) = 0) Then
                                Beep
                                Exit Sub
                            End If
                            If (Trim$(smSave(1, llRowNo)) = "") Or ((gCompNumberStr(smTotalUnapplied, ".00") = 0) And (Trim$(smSave(2, llRowNo)) = "")) Then
                                Beep
                                Exit Sub
                            End If
                        End If
                    ElseIf (imCollectIndex = 4) Then    'Reversal
                        'Check Date of transaction- must be within current period
                        ilDateOk = False
                        'ilRet = gParseItem(lbcTransactionCode.List(llRowNo - 1), 2, "\", slCode)
                        ilRet = gParseItem(tgTransactionCode(llRowNo - 1).sKey, 2, "\", slCode)
                        If ilRet = CP_MSG_NONE Then
                            llRecPos = Val(slCode)
                            ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            If ilRet = BTRV_ERR_NONE Then
                                gUnpackDate tmRvf.iTranDate(0), tmRvf.iTranDate(1), slDate
                                If (gDateValue(slDate) > gDateValue(smPrevEndPeriodDate)) And (gDateValue(slDate) <= gDateValue(smNowDate)) And (gDateValue(slDate) <= gDateValue(smNextEndPeriodDate)) Then
                                    ilDateOk = True
                                End If
                            End If
                        End If
                        If Not ilDateOk Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                        'Reverse only W, A and P transactions
                        If (Asc(Trim$(smSave(5, llRowNo))) <> Asc("W")) And (Asc(Trim$(smSave(5, llRowNo))) <> Asc("A")) And (Asc(Trim$(smSave(5, llRowNo))) <> Asc("P")) Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                        If (Len(Trim$(smSave(3, llRowNo))) <> 0) And (gCompNumberStr(smSave(3, llRowNo), ".00") <> 0) Then
                            slStr = ""
                            ilColNo = AMNTPAID
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                            'smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                            mSetCompressShow llRowNo, ilColNo
                            smTotalDue = gAddStr(smTotalDue, smSave(3, llRowNo))
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            smTotalAppliedWriteOff = gSubStr(smTotalAppliedWriteOff, smSave(3, llRowNo))
                            gFormatStr smTotalAppliedWriteOff, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                            smSave(3, llRowNo) = ""
                        Else
                            smSave(3, llRowNo) = smSave(4, llRowNo)
                            slStr = Trim$(smSave(3, llRowNo))
                            If Asc(Trim$(slStr)) = Asc("-") Then
                                slStr = Mid$(Trim$(slStr), 2)
                            Else
                                slStr = "-" & Trim$(slStr)
                            End If
                            ilColNo = AMNTPAID
                            gFormatStr slStr, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                            'smShow(ilColNo, llRowNo) = tmTransCtrls(ilColNo).sShow
                            mSetCompressShow llRowNo, ilColNo
                            smTotalDue = gSubStr(smTotalDue, smSave(3, llRowNo))
                            gFormatStr smTotalDue, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalDue)
                            smTotalAppliedWriteOff = gAddStr(smTotalAppliedWriteOff, smSave(3, llRowNo))
                            slStr = Trim$(smTotalAppliedWriteOff)
                            If Asc(Trim$(slStr)) = Asc("-") Then
                                slStr = Mid$(Trim$(slStr), 2)
                            Else
                                slStr = "-" & Trim$(slStr)
                            End If
                            gFormatStr slStr, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                            gSetShow pbcCollect(imCollectIndex), slStr, tmCtrls(imTotalAppliedWriteOff)
                        End If
                        pbcCollect(imCollectIndex).Cls
                        pbcCollect_Paint imCollectIndex
                        mSetCommands
                    ElseIf (imCollectIndex = 7) Then
                        If (Trim$(smSave(1, llRowNo)) = "") Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                    ElseIf (imCollectIndex = 9) Then
                        If (Trim$(smSave(1, llRowNo)) = "") Or ((Trim$(smSave(2, llRowNo)) = "") And (ilBox <> AMNTPAID)) Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                    ElseIf (imCollectIndex = 11) Then
                        If (Trim$(smSave(5, llRowNo)) = "HI") Then
                            Beep
                            Exit Sub
                        End If
                        If (Trim$(smSave(7, llRowNo)) = "") And (Trim$(smSave(8, llRowNo)) = "") Then
                            Beep
                        Else
                            slChkNo = Trim$(smSave(7, llRowNo))
                            If slChkNo = "" Then
                                'Determine if check number can be found
                                'For ilLoop = LBound(smSave, 2) To UBound(smSave, 2) Step 1
                                For ilLoop = LBONE To UBound(smSave, 2) Step 1
                                    If Trim$(smSave(8, ilLoop)) = Trim$(smSave(8, llRowNo)) Then
                                        If Trim$(smSave(7, ilLoop)) <> "" Then
                                            slChkNo = Trim$(smSave(7, ilLoop))
                                            Exit For
                                        End If
                                    End If
                                Next ilLoop
                            End If
                            If slChkNo <> "" Then
                                'Determine if other invoice numbers are involved
                                'For ilLoop = LBound(smSave, 2) To UBound(smSave, 2) Step 1
                                For ilLoop = LBONE To UBound(smSave, 2) Step 1
                                    If Trim$(smSave(7, ilLoop)) = slChkNo Then
                                        ilFound = False
                                        For ilIndex = 0 To UBound(smRestoreInvNo) - 1 Step 1
                                            If Trim$(smRestoreInvNo(ilIndex)) = Trim$(smSave(8, ilLoop)) Then
                                                ilFound = True
                                                Exit For
                                            End If
                                        Next ilIndex
                                        If Not ilFound Then
                                            smRestoreCheckNo = slChkNo
                                            smRestoreInvNo(UBound(smRestoreInvNo)) = Trim$(smSave(8, ilLoop))
                                            ReDim Preserve smRestoreInvNo(0 To UBound(smRestoreInvNo) + 1) As String
                                        End If
                                    End If
                                Next ilLoop
                            Else
                                smRestoreCheckNo = "No Check"
                                smRestoreInvNo(UBound(smRestoreInvNo)) = Trim$(smSave(8, llRowNo))
                                ReDim Preserve smRestoreInvNo(0 To UBound(smRestoreInvNo) + 1) As String
                            End If
                            'For ilLoop = LBound(smSave, 2) To UBound(smSave, 2) Step 1
                            For ilLoop = LBONE To UBound(smSave, 2) Step 1
                                If (Trim$(smSave(7, ilLoop)) = Trim$(smRestoreCheckNo)) And (Left$(Trim$(smSave(5, ilLoop)), 1) = "P") Then
                                    smRestoreCheckTotal = gAddStr(smRestoreCheckTotal, Trim$(smSave(4, ilLoop)))
                                End If
                                For ilIndex = 0 To UBound(smRestoreInvNo) - 1 Step 1
                                    '6-12-08 don't add "HI" or Installment to restore total Dan M
                                    If (Trim$(smRestoreInvNo(ilIndex)) = Trim$(smSave(8, ilLoop))) And Not ((Trim$(smSave(5, ilLoop)) = "HI") Or (Trim$(smSave(21, ilLoop)) = "A")) Then
                                        smRestoreTotal = gAddStr(smRestoreTotal, Trim$(smSave(4, ilLoop)))
                                        Exit For
                                    End If
                                Next ilIndex
                            Next ilLoop
                            imRestoreZeroBalance = 0
                            If (gCompNumberStr(smRestoreTotal, ".00") <> 0) Then
                                'See if Contract zero balanes
                                slRestoreTotal = "0.00"
                                slRestoreContractTotal = "0.00"
                                llCntrNo = Val(Trim$(smSave(23, llRowNo)))
                                If llCntrNo > 0 Then
                                    For ilLoop = LBONE To UBound(smSave, 2) Step 1
                                        If (Val(Trim$(smSave(23, ilLoop))) = llCntrNo) And (Left$(Trim$(smSave(5, ilLoop)), 1) = "P") Then
                                            slRestoreContractTotal = gAddStr(slRestoreContractTotal, Trim$(smSave(4, ilLoop)))
                                        End If
                                        If (Val(Trim$(smSave(23, ilLoop))) = llCntrNo) And Not ((Trim$(smSave(5, ilLoop)) = "HI") Or (Trim$(smSave(21, ilLoop)) = "A")) Then
                                            slRestoreTotal = gAddStr(slRestoreTotal, Trim$(smSave(4, ilLoop)))
                                        End If
                                    Next ilLoop
                                    If (gCompNumberStr(slRestoreTotal, ".00") = 0) Then
                                        imRestoreZeroBalance = 1
                                        smRestoreContractNo = Trim$(smSave(23, llRowNo))
                                        smRestoreCheckTotal = slRestoreContractTotal
                                        smRestoreTotal = slRestoreTotal
                                    End If
                                End If
                            End If
                            If Asc(smRestoreCheckTotal) = Asc("-") Then
                                smRestoreCheckTotal = Mid$(smRestoreCheckTotal, 2)
                            Else
                                smRestoreCheckTotal = "-" & smRestoreCheckTotal
                            End If
                            gFormatStr smRestoreCheckTotal, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, smRestoreCheckTotalShow
                            gFormatStr smRestoreTotal, FMTDOLLARSIGN + FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, smRestoreTotalShow
                        End If
                        pbcCollect(Index).Cls
                        pbcCollect_Paint Index
                        mSetCommands
                        pbcClickFocus.SetFocus
                        Exit Sub
                    ElseIf (imCollectIndex = 12) Then    'Adjustment
                        If (Trim$(smSave(1, llRowNo)) = "") Or ((Trim$(smSave(2, llRowNo)) = "") And (ilBox <> IAAMTPAID)) Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                        '4/15/11:  If allow if IN transactions exist
                        ilFound = False
                        'For ilLoop = llRowNo To LBound(smSave) Step -1
                        For ilLoop = llRowNo To LBONE Step -1
                            If (Trim$(smSave(1, ilLoop)) <> "") And (ilLoop <> llRowNo) Then
                                Exit For
                            End If
                            If Trim$(smSave(5, ilLoop)) = "IN" Then
                                ilFound = True
                                Exit For
                            End If
                        Next ilLoop
                        If Not ilFound Then
                            Beep
                            pbcClickFocus.SetFocus
                            Exit Sub
                        End If
                    Else
                        Beep
                        mSetShow imBoxNo
                        imBoxNo = -1
                        lmRowNo = -1
                        If cbcSelection.Enabled Then
                            cbcSelection.SetFocus
                        Else
                            pbcClickFocus.SetFocus
                        End If
                        Exit Sub
                    End If
                    mSetShow imBoxNo
                    imBoxNo = ilBox
                    lmRowNo = llRowNo
                    ilChgBoxNo = False
                    'Don't go to comment field automatically
                    'If (imCollectIndex = 9) Or (imCollectIndex = 12) Then
                    If (imCollectIndex = 9) Then
                        If Trim$(smSave(2, lmRowNo)) = "" Then
                            ilChgBoxNo = True
                        End If
                    End If
                    lmRowNo = llCurrentRowNo
                    mEnableBox ilBox
                    If ilChgBoxNo Then
                        mSetShow imBoxNo
                        If imCollectIndex = 9 Then
                            imBoxNo = WRITEOFF  'Transaction
                        Else
                            imBoxNo = IACOMMENT
                        End If
                        ilBox = imBoxNo
                        mEnableBox ilBox
                    End If
                    Exit Sub
                End If
            End If
        Next ilBox
    Next llRow
    pbcClickFocus.SetFocus
End Sub
Private Sub pbcCollect_Paint(Index As Integer)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slFontName                    flFontSize                                              *
'******************************************************************************************

    Dim ilBox As Integer
    Dim ilColNo As Integer
    Dim llRowNo As Long
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim llColor As Long
    Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slSave As String
    Dim ilMaxIndex As Integer
    Dim slFontName As String
    Dim flFontSize As Single
    
    pbcCollect(Index).Cls
    mPaintCollectTitle
    llColor = pbcCollect(Index).ForeColor
'Moved to mPaintCollectTitle
'    If Index = 1 Then
'        slFontName = pbcCollect(Index).FontName
'        flFontSize = pbcCollect(Index).FontSize
'        pbcCollect(Index).ForeColor = BLUE
'        pbcCollect(Index).FontBold = False
'        pbcCollect(Index).FontSize = 7
'        pbcCollect(Index).FontName = "Arial"
'        pbcCollect(Index).FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
'        pbcCollect(Index).CurrentX = tmCtrls(3).fBoxX + 15  'fgBoxInsetX
'        pbcCollect(Index).CurrentY = 15 'tmCtrls(SHTTITLEINDEX).fBoxY - 15'+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
'        If imType <= 1 Then
'            pbcCollect(Index).Print "Deposit Date"
'        Else
'            pbcCollect(Index).Print "Usage Date"
'        End If
'        pbcCollect(Index).CurrentX = tmCtrls(4).fBoxX + 15  'fgBoxInsetX
'        pbcCollect(Index).CurrentY = 15 'tmCtrls(SHTTITLEINDEX).fBoxY - 15'+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
'        If imType <= 1 Then
'            pbcCollect(Index).Print "Check #"
'        Else
'            pbcCollect(Index).Print "Usage Code"
'        End If
'        pbcCollect(Index).CurrentX = tmCtrls(5).fBoxX + 15  'fgBoxInsetX
'        pbcCollect(Index).CurrentY = 15 'tmCtrls(SHTTITLEINDEX).fBoxY - 15'+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
'        If imType <= 1 Then
'            pbcCollect(Index).Print "Check Amount"
'        Else
'            pbcCollect(Index).Print "Usage Amount"
'        End If
'        pbcCollect(Index).FontSize = flFontSize
'        pbcCollect(Index).FontName = slFontName
'        pbcCollect(Index).FontSize = flFontSize
'        pbcCollect(Index).ForeColor = llColor
'        pbcCollect(Index).FontBold = True
'    End If
    'Cash/Trade and action
    If imCollectIndex <> 10 Then
        ilMaxIndex = LBound(tmCtrls) + 1
    Else
        If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
            ilMaxIndex = 21 '16 '15 '13
        Else
            ilMaxIndex = 19 '17 '19
        End If
    End If
    For ilBox = LBound(tmCtrls) To ilMaxIndex Step 1
        pbcCollect(Index).CurrentX = tmCtrls(ilBox).fBoxX + fgBoxInsetX
        pbcCollect(Index).CurrentY = tmCtrls(ilBox).fBoxY + fgBoxInsetY
        pbcCollect(Index).Print Trim$(tmCtrls(ilBox).sShow)
    Next ilBox

    If imColCount < 1 Then 'No transaction records
        Exit Sub
    End If
    If lmRowCountMax < 1 Then 'No transaction records
        If imCollectIndex = 1 Then
            For ilBox = LBound(tmCtrls) + 2 To UBound(tmCtrls) Step 1
                pbcCollect(Index).CurrentX = tmCtrls(ilBox).fBoxX + fgBoxInsetX
                pbcCollect(Index).CurrentY = tmCtrls(ilBox).fBoxY + fgBoxInsetY
                pbcCollect(Index).Print Trim$(tmCtrls(ilBox).sShow)
            Next ilBox
        End If
        Exit Sub
    End If

    ilStartRow = vbcCollect.Value  'Top location
    If CLng(vbcCollect.Value) + vbcCollect.LargeChange > 32767 Then
        ilEndRow = 32767
    Else
        ilEndRow = vbcCollect.Value + vbcCollect.LargeChange
    End If
    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        If ilEndRow > UBound(smShow, 2) Then
            ilEndRow = UBound(smShow, 2)
        End If
    Else
        If ilEndRow > UBound(smCompressedShow, 2) Then
            ilEndRow = UBound(smCompressedShow, 2) - 1
        End If
    End If
    slFontName = pbcCollect(Index).FontName
    flFontSize = pbcCollect(Index).FontSize
    For llRowNo = ilStartRow To ilEndRow Step 1
        If mGetRowNo(llRowNo) > 0 Then
            For ilColNo = 1 To imColCount Step 1
                If imCollectIndex <> 8 Then
                    If (imDisplayMode = 0) Or (imCollectIndex = 0) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
                        If Trim$(smSave(9, llRowNo)) <> "N" Then
                            pbcCollect(Index).ForeColor = BLUE
                        Else
                            pbcCollect(Index).ForeColor = llColor
                        End If
                        If ilColNo = NET Then
                            If InStr(1, smSave(13, llRowNo), "Hard Cost", vbTextCompare) > 1 Then
                                pbcCollect(Index).ForeColor = MAGENTA
                            Else
                                pbcCollect(Index).ForeColor = llColor
                            End If
                        End If
                    Else
                        If Trim$(smSave(9, mGetRowNo(llRowNo))) <> "N" Then
                            pbcCollect(Index).ForeColor = BLUE
                        Else
                            pbcCollect(Index).ForeColor = llColor
                        End If
                        If ilColNo = NET Then
                            If InStr(1, smSave(13, mGetRowNo(llRowNo)), "Hard Cost", vbTextCompare) > 1 Then
                                pbcCollect(Index).ForeColor = MAGENTA
                            Else
                                pbcCollect(Index).ForeColor = llColor
                            End If
                        End If
                    End If
                End If
                Select Case imCollectIndex
                    Case 0
                        If (Trim$(smSave(21, llRowNo)) = "A") Or (Trim$(smSave(5, llRowNo)) = "HI") Then '6-12-08 Change color on "HI" and installment elements Dan M
                            pbcCollect(Index).ForeColor = Orange
                        End If
                        pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                        pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) - 30
                        pbcCollect(Index).Print Trim$(smShow(ilColNo, llRowNo))
                    Case 1 To 7, 9, 12 'view receivables
                        If imDisplayMode = 0 Then
                            pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                            pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) - 30
                            If (imPostBy <> 2) Or (ilColNo <> VEHICLENAME) Or ((imCollectIndex >= 4) And (imCollectIndex <= 7)) Then
                                pbcCollect(Index).Print Trim$(smShow(ilColNo, llRowNo))
                            Else
                                slSave = tmTransCtrls(VEHICLENAME).sShow
                                slStr = Trim$(smSave(11, llRowNo))
                                gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(VEHICLENAME)
                                pbcCollect(Index).Print Trim$(tmTransCtrls(VEHICLENAME).sShow)
                                tmTransCtrls(VEHICLENAME).sShow = slSave
                            End If
                        Else
                            If llRowNo < UBound(smCompressedShow, 2) Then
                                If (ilColNo = ADVTAGENCY) Then
                                    pbcCollect(Index).FontBold = False
                                    pbcCollect(Index).FontSize = 7
                                    pbcCollect(Index).FontName = "Monotype Sorts"
                                    pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                                    pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) + 15 '- 30
                                    If tmRowInfo(llRowNo).iRowStatus = 0 Then
                                        pbcCollect(Index).Print "s"
                                    ElseIf tmRowInfo(llRowNo).iRowStatus = 1 Then
                                        pbcCollect(Index).Print "t"
                                    End If
                                    pbcCollect(Index).FontSize = flFontSize  'Font size done twice as indicated in FontSize property area in manual
                                    pbcCollect(Index).FontBold = True
                                    pbcCollect(Index).FontSize = flFontSize
                                    pbcCollect(Index).FontName = slFontName
                                    pbcCollect(Index).FontSize = flFontSize  'Font size done twice as indicated in FontSize property area in manual
                                    pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX + 135
                                Else
                                    pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                                End If
                                pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) - 30
                                'pbcCollect(Index).Print Trim$(smCompressedShow(ilColNo, llRowNo))
                                If (imPostBy <> 2) Or (ilColNo <> VEHICLENAME) Or ((imCollectIndex >= 4) And (imCollectIndex <= 7)) Then
                                    If ((ilColNo = TRANSDATE) Or (ilColNo = TRANSTYPE) Or (ilColNo = ASTERICK)) And (tmRowInfo(llRowNo).iRowStatus = 1) Then
                                        pbcCollect(Index).Print ""
                                    Else
                                        pbcCollect(Index).Print Trim$(smCompressedShow(ilColNo, llRowNo))
                                    End If
                                Else
                                    slSave = tmTransCtrls(VEHICLENAME).sShow
                                    slStr = Trim$(smSave(11, mGetRowNo(llRowNo)))
                                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(VEHICLENAME)
                                    pbcCollect(Index).Print Trim$(tmTransCtrls(VEHICLENAME).sShow)
                                    tmTransCtrls(VEHICLENAME).sShow = slSave
                                End If
                            End If
                        End If
                    Case 8  'Ageing
                        If ilColNo = 1 Then
                            pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                        Else
                            If InStr(smShow(ilColNo, llRowNo), "-") = 0 Then
                                pbcCollect(Index).CurrentX = gRightJustifyShowStr(pbcCollect(Index), Trim$(smShow(ilColNo, llRowNo)) & "-", tmTransCtrls(ilColNo))
                            Else
                                pbcCollect(Index).CurrentX = gRightJustifyShowStr(pbcCollect(Index), Trim$(smShow(ilColNo, llRowNo)), tmTransCtrls(ilColNo))
                            End If
                        End If
                        pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) - 30
                        If imAgeingShow <> 0 Then
                            If imDisplayMode = 0 Then
                                If Asc(smShow(1, llRowNo)) = Asc(" ") Then
                                    pbcCollect(Index).ForeColor = DARKYELLOW
                                End If
                                pbcCollect(Index).Print smShow(ilColNo, llRowNo)
                            Else
                                If llRowNo < UBound(smCompressedShow, 2) Then
                                    If Asc(smCompressedShow(1, llRowNo)) = Asc(" ") Then
                                        pbcCollect(Index).ForeColor = DARKYELLOW
                                    End If
                                    If (ilColNo = ADVTAGENCY) Then
                                        pbcCollect(Index).FontBold = False
                                        pbcCollect(Index).FontSize = 7
                                        pbcCollect(Index).FontName = "Monotype Sorts"
                                        pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                                        pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) + 15 '- 30
                                        If tmRowInfo(llRowNo).iRowStatus = 0 Then
                                            pbcCollect(Index).Print "s"
                                        ElseIf tmRowInfo(llRowNo).iRowStatus = 1 Then
                                            pbcCollect(Index).Print "t"
                                        End If
                                        pbcCollect(Index).FontSize = flFontSize  'Font size done twice as indicated in FontSize property area in manual
                                        pbcCollect(Index).FontBold = True
                                        pbcCollect(Index).FontSize = flFontSize
                                        pbcCollect(Index).FontName = slFontName
                                        pbcCollect(Index).FontSize = flFontSize  'Font size done twice as indicated in FontSize property area in manual
                                        'pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX + 135
                                    Else
                                        'pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                                    End If
                                    If ilColNo = 1 Then
                                        pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX + 135
                                    Else
                                        If InStr(smShow(ilColNo, llRowNo), "-") = 0 Then
                                            pbcCollect(Index).CurrentX = gRightJustifyShowStr(pbcCollect(Index), Trim$(smCompressedShow(ilColNo, llRowNo)) & "-", tmTransCtrls(ilColNo))
                                        Else
                                            pbcCollect(Index).CurrentX = gRightJustifyShowStr(pbcCollect(Index), Trim$(smCompressedShow(ilColNo, llRowNo)), tmTransCtrls(ilColNo))
                                        End If
                                    End If
                                    pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) - 30
                                    pbcCollect(Index).Print smCompressedShow(ilColNo, llRowNo)
                                End If
                            End If
                            'pbcCollect(Index).ForeColor = llColor
                        Else
                            If Asc(smShow(1, llRowNo)) <> Asc(" ") Then
                                pbcCollect(Index).Print Trim$(smShow(ilColNo, llRowNo))
                            End If
                        End If
                    Case 10 ' system startup
                    Case 11 'Restore history
                        pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo).fBoxX
                        pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo).fBoxY + (llRowNo - ilStartRow) * (fgBoxGridH + 15) - 30
                        ilFound = False
                        If imRestoreZeroBalance <> 1 Then
                            For ilLoop = LBound(smRestoreInvNo) To UBound(smRestoreInvNo) - 1 Step 1
                                If Trim$(smSave(8, llRowNo)) = smRestoreInvNo(ilLoop) Then
                                    ilFound = True
                                    Exit For
                                End If
                            Next ilLoop
                        Else
                            If Trim$(smSave(23, llRowNo)) = smRestoreContractNo Then
                                ilFound = True
                            End If
                        End If
                        If ilFound Then
                            pbcCollect(Index).ForeColor = Red
                        'Else
                        '    pbcCollect(Index).ForeColor = llColor
                        End If
                        If (Trim$(smSave(21, llRowNo)) = "A") Or (Trim$(smSave(5, llRowNo)) = "HI") Then '6-12-08 Change color on "HI" and installment elements Dan M
                            pbcCollect(Index).ForeColor = Orange
                        End If
    
                        pbcCollect(Index).Print Trim$(smShow(ilColNo, llRowNo))
                End Select
                pbcCollect(Index).ForeColor = llColor
            Next ilColNo
        End If
    Next llRowNo
    pbcCollect(Index).ForeColor = llColor
    'Show totals
    If imCollectIndex = 8 Then  'View Aging
        For ilColNo = 1 To 6 Step 1
            'pbcCollect(Index).CurrentX = tmTransCtrls(ilColNo + 1).fBoxX + fgBoxInsetX
            If InStr(smAgingTotal(ilColNo), "-") = 0 Then
                pbcCollect(Index).CurrentX = gRightJustifyShowStr(pbcCollect(Index), Trim$(smAgingTotal(ilColNo)) & "-", tmTransCtrls(ilColNo + 1))
            Else
                pbcCollect(Index).CurrentX = gRightJustifyShowStr(pbcCollect(Index), Trim$(smAgingTotal(ilColNo)), tmTransCtrls(ilColNo + 1))
            End If
            pbcCollect(Index).CurrentY = tmTransCtrls(ilColNo + 1).fBoxY + (vbcCollect.LargeChange + 2) * (fgBoxGridH + 15) - 30
            pbcCollect(Index).Print smAgingTotal(ilColNo)
        Next ilColNo
    ElseIf imCollectIndex <> 10 Then
        For ilBox = LBound(tmCtrls) + 2 To UBound(tmCtrls) Step 1
    '        If (ilBox = imPostOnAccount) Then
    '            gPaintArea pbcCollect(Index), tmCtrls(ilBox).fBoxX, tmCtrls(ilBox).fBoxY + fgOffSet, tmCtrls(ilBox).fBoxW - 15, fgBoxGridH - 15, WHITE
    '        ElseIf (ilBox = imWriteOff) Or (ilBox = imTotalUnapplied) Or (ilBox = imTotalDue) Or (ilBox = imTotalAppliedDue) Or (ilBox = imTotalAppliedWriteOff) Then
    '            gPaintArea pbcCollect(Index), tmCtrls(ilBox).fBoxX, tmCtrls(ilBox).fBoxY + fgOffSet, tmCtrls(ilBox).fBoxW - 15, fgBoxGridH - 15, LIGHTYELLOW
    '        End If
            If (imCollectIndex = 5) Or (imCollectIndex = 6) Then
                If ilBox = UBound(tmCtrls) Then
                    gPaintArea pbcCollect(Index), tmCtrls(ilBox).fBoxX, tmCtrls(ilBox).fBoxY + fgOffset, tmCtrls(ilBox).fBoxW - 15, fgBoxGridH - 15, LIGHTYELLOW
                Else
                    gPaintArea pbcCollect(Index), tmCtrls(ilBox).fBoxX, tmCtrls(ilBox).fBoxY + fgOffset, tmCtrls(ilBox).fBoxW - 15, fgBoxGridH - 15, WHITE
                End If
            End If
            pbcCollect(Index).CurrentX = tmCtrls(ilBox).fBoxX + fgBoxInsetX
            pbcCollect(Index).CurrentY = tmCtrls(ilBox).fBoxY + fgBoxInsetY
            pbcCollect(Index).Print tmCtrls(ilBox).sShow
        Next ilBox
        If imCollectIndex = 11 Then
            If imRestoreZeroBalance <> 1 Then
                If UBound(smRestoreInvNo) > LBound(smRestoreInvNo) Then
                    slStr = "Check No " & Trim$(smRestoreCheckNo) & " Total: " & smRestoreCheckTotalShow & ", Restore Total: " & smRestoreTotalShow
                    pbcCollect(Index).CurrentX = 90 'tmCtrls(ilBox).fBoxX + fgBoxInsetX
                    pbcCollect(Index).CurrentY = tmCtrls(UBound(tmCtrls)).fBoxY + fgBoxInsetY
                    pbcCollect(Index).Print slStr
                End If
            Else
                slStr = "Contract No " & Trim$(smRestoreContractNo) & " Total: " & smRestoreCheckTotalShow & ", Restore Total: " & smRestoreTotalShow
                pbcCollect(Index).CurrentX = 90 'tmCtrls(ilBox).fBoxX + fgBoxInsetX
                pbcCollect(Index).CurrentY = tmCtrls(UBound(tmCtrls)).fBoxY + fgBoxInsetY
                pbcCollect(Index).Print slStr
            End If
        End If
    End If
End Sub
Private Sub pbcComment_GotFocus()
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
'    mComSetShow imCommentBoxNo
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
End Sub
Private Sub pbcComment_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    For ilBox = imLBComCtrls To UBound(tmComCtrls) Step 1
        If (X >= tmComCtrls(ilBox).fBoxX) And (X <= tmComCtrls(ilBox).fBoxX + tmComCtrls(ilBox).fBoxW) Then
            If (Y >= tmComCtrls(ilBox).fBoxY) And (Y <= tmComCtrls(ilBox).fBoxY + tmComCtrls(ilBox).fBoxH) Then
                If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
                    Beep
                    If cbcSelection.Enabled Then
                        cbcSelection.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                End If
                If imDirectFlag And ilBox = COMADVAGYINDEX Then ' direct advertiser
                    Beep
                    mComSetFocus imCommentBoxNo
                    Exit Sub
                End If
                'If imAgencyFlag = 1 And ilBox = COMADVAGYINDEX Then  '  agency
                    'If lbcAgency.ListCount < 1 Then
                        'Beep
                        'mComSetFocus imCommentBoxNo
                        'Exit Sub
                    'End If
                'End If
                'If imAgencyFlag = 0 And ilBox = COMADVAGYINDEX Then '  advertiser
                    'If lbcAdvt.ListCount < 1 Then
                        'Beep
                        'mComSetFocus imCommentBoxNo
                        'Exit Sub
                    'End If
                'End If
                mComSetShow imCommentBoxNo
                imCommentBoxNo = ilBox
                mEnableComBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mComSetFocus imCommentBoxNo
End Sub
Private Sub pbcComment_Paint()
        Dim ilBox As Integer
        mPaintCommentTitle
        For ilBox = imLBComCtrls To UBound(tmComCtrls) Step 1
            pbcComment.CurrentX = tmComCtrls(ilBox).fBoxX + fgBoxInsetX
            pbcComment.CurrentY = tmComCtrls(ilBox).fBoxY + fgBoxInsetY
            pbcComment.Print tmComCtrls(ilBox).sShow
        Next ilBox
End Sub
Private Sub pbcCommSTab_GotFocus()
    Dim ilBox As Integer    'local Control box counter
    Dim ilFound As Integer  'redirect focus flag
    If GetFocus() <> pbcCommSTab.HWnd Then
        Exit Sub
    End If
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1

    If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
        imCommentBoxNo = -1
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    imTabDirection = -1  'Set-right to left
    ilBox = imCommentBoxNo
    Do
        ilFound = True
        Select Case ilBox
            Case -1              'Initial
                imTabDirection = 0  'Set-Left to right
                ilBox = imLBComCtrls
                mSetCommands
            Case COMMENTINDEX
                If imDirectFlag Then
                    ilFound = False
                    ilBox = COMADVAGYINDEX
                Else
                    ilBox = ilBox - 1
                End If
            Case COMACTDATEINDEX
                mComSetShow imCommentBoxNo
                imCommentBoxNo = -1
                mSetCommands
                If cbcSelection.Enabled Then
                    cbcSelection.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            Case Else
                ilBox = ilBox - 1
        End Select
    Loop While Not ilFound
    mComSetShow imCommentBoxNo
    imCommentBoxNo = ilBox
    mEnableComBox ilBox
End Sub
Private Sub pbcCommTab_GotFocus()
    Dim ilBox As Integer    'local Control box counter
    Dim ilFound As Integer  'redirect focus flag

    If GetFocus() <> pbcCommTab.HWnd Then
        Exit Sub
    End If
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
        imCommentBoxNo = -1
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    imTabDirection = 0  'Set-Left to right
    ilBox = imCommentBoxNo
    Do
        ilFound = True
        Select Case ilBox
            Case -1          'Initial
                imTabDirection = -1  'Set-Right to left
                ilBox = UBound(tmInfoCtrls)
            Case COMACTDATEINDEX
                If imDirectFlag Then
                    ilFound = False
                    ilBox = COMADVAGYINDEX
                Else
                    ilBox = ilBox + 1
                End If
            Case COMMENTINDEX
                mComSetShow imCommentBoxNo
                imCommentBoxNo = -1
                mSetCommands
                If cbcSelection.Enabled Then
                    cbcSelection.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            Case Else
                ilBox = ilBox + 1
        End Select
    Loop While Not ilFound
    mComSetShow imCommentBoxNo
    imCommentBoxNo = ilBox
    mEnableComBox ilBox
End Sub
Private Sub pbcInfo_GotFocus()
    plcCalendar.Visible = False
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
End Sub

Private Sub pbcInfo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer
    For ilBox = imLBInfoCtrls To UBound(tmInfoCtrls) Step 1
        If (X >= tmInfoCtrls(ilBox).fBoxX) And (X <= tmInfoCtrls(ilBox).fBoxX + tmInfoCtrls(ilBox).fBoxW) Then
            If (Y >= tmInfoCtrls(ilBox).fBoxY) And (Y <= tmInfoCtrls(ilBox).fBoxY + tmInfoCtrls(ilBox).fBoxH) Then
                If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
                    Beep
                    If cbcSelection.Enabled Then
                        cbcSelection.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                End If
                If tgUrf(0).sCredit <> "I" And (ilBox = CREDITRINDEX Or ilBox = CREDITAMTINDEX) Then
                    Beep
                    mInfoSetFocus imInfoBoxNo
                    Exit Sub
                End If
                If tgUrf(0).sPayRate <> "I" And (ilBox = PAYRATEINDEX) Then
                    Beep
                    mInfoSetFocus imInfoBoxNo
                    Exit Sub
                End If
                If lbcCreditRestr.ListIndex <> 1 And ilBox = CREDITAMTINDEX Then
                    Beep
                    mInfoSetFocus imInfoBoxNo
                    Exit Sub
                End If
                If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or ((imDirectFlag) And (lbcStatAgency.ListIndex = 0)) Or ((imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0)) Then
                    If (lbcPayables.ListIndex >= 2) And (lbcPayables.ListIndex < 2) Then
                        Beep
                        mInfoSetFocus imInfoBoxNo
                        Exit Sub
                    End If
                Else
                    Beep
                    mInfoSetFocus imInfoBoxNo
                    Exit Sub
                End If
                mInfoSetShow imInfoBoxNo
                imInfoBoxNo = ilBox
                mEnableInfoBox ilBox
                Exit Sub
            End If
        End If
    Next ilBox
    mInfoSetFocus imInfoBoxNo
End Sub
Private Sub pbcInfo_Paint()

        Dim ilBox As Integer
        pbcInfo.Cls
        mPaintInfoTitle
        For ilBox = imLBInfoCtrls To UBound(tmInfoCtrls) Step 1
            If (ilBox <> PAYRATEINDEX) Or (tgUrf(0).sPayRate <> "H") Then
                If (ilBox <> CREDITRINDEX) Or (tgUrf(0).sCredit <> "H") Then
                    If (ilBox <> CREDITAMTINDEX) Then
                        pbcInfo.CurrentX = tmInfoCtrls(ilBox).fBoxX + fgBoxInsetX
                        pbcInfo.CurrentY = tmInfoCtrls(ilBox).fBoxY + fgBoxInsetY
                        pbcInfo.Print tmInfoCtrls(ilBox).sShow
                    End If
                End If
            End If
        Next ilBox
        For ilBox = imLBS4Info To UBound(tmS4Info) Step 1
            pbcInfo.CurrentX = tmS4Info(ilBox).fBoxX + fgBoxInsetX
            pbcInfo.CurrentY = tmS4Info(ilBox).fBoxY + fgBoxInsetY
            pbcInfo.Print smS4Info(ilBox)   'tmS4Info(ilBox).sShow
        Next ilBox
        'If imAgencyFlag = 0 Then 'Agency
        '    pbcStatistics.Print "Agency"
        'Else   'advertiser
        '    pbcStatistics.Print "Advertiser"
        'End If
End Sub
Private Sub pbcInfoSTab_GotFocus()
    Dim ilBox As Integer    'local Control box counter
    Dim ilFound As Integer  'redirect focus flag
    If GetFocus() <> pbcInfoSTab.HWnd Then
        Exit Sub
    End If
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

    If imInfoBoxNo = PAYABLESINDEX Then
        If mPersonnelBranch() Then
            Exit Sub
        End If
    End If
    If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
        imInfoBoxNo = -1
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    imTabDirection = -1  'Set-right to left
    ilBox = imInfoBoxNo
    Do
        ilFound = True
        Select Case ilBox
            Case -1              'Initial
                imTabDirection = 0  'Set-Left to right
                If tgUrf(0).sCredit = "I" Then
                    ilBox = CREDITRINDEX
                Else
                    If tgUrf(0).sPayRate = "I" Then
                        ilBox = PAYRATEINDEX
                    Else
                        ilBox = PAYABLESINDEX    'PHONEINDEX
                    End If
                End If
                mSetCommands
            Case CREDITRINDEX
                mInfoSetShow imInfoBoxNo
                imInfoBoxNo = -1
                mSetCommands
                If cbcSelection.Enabled Then
                    cbcSelection.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            Case CREDITAMTINDEX
                If tgUrf(0).sCredit <> "I" Then
                    ilFound = False
                    If lbcCreditRestr.ListIndex < 0 Then
                        imChgMode = True
                        lbcCreditRestr.ListIndex = 0
                        imChgMode = False
                    End If
                End If
                ilBox = CREDITRINDEX
            Case PAYRATEINDEX
                If tgUrf(0).sCredit <> "I" Then
                    ilFound = False
                Else
                    If lbcCreditRestr.ListIndex <> 1 Then
                        ilFound = False
                    End If
                End If
                ilBox = CREDITAMTINDEX
                If lbcCreditRestr.ListIndex = 1 Then
                    ilBox = CREDITAMTINDEX
                Else
                    ilBox = CREDITRINDEX
                End If
            Case PAYABLESINDEX
                If tgUrf(0).sPayRate <> "I" Then
                    ilFound = False
                End If
                ilBox = PAYRATEINDEX
            Case Else
                ilBox = ilBox - 1
        End Select
    Loop While Not ilFound
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = ilBox
    mEnableInfoBox ilBox
End Sub
Private Sub pbcInfoTab_GotFocus()
    Dim ilBox As Integer    'local Control box counter
    Dim ilFound As Integer  'redirect focus flag

    If GetFocus() <> pbcInfoTab.HWnd Then
        Exit Sub
    End If
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
    If imInfoBoxNo = PAYABLESINDEX Then
        If mPersonnelBranch() Then
            Exit Sub
        End If
    End If
    If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
        imInfoBoxNo = -1
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    imTabDirection = 0  'Set-Left to right
    ilBox = imInfoBoxNo
    Do
        ilFound = True
        Select Case ilBox
            Case -1          'Initial
                imTabDirection = -1  'Set-Right to left
                ilBox = UBound(tmInfoCtrls)
            Case CREDITRINDEX
                If tgUrf(0).sCredit <> "I" Then
                    ilFound = False
                Else
                    If lbcCreditRestr.ListIndex <> 1 Then
                        ilFound = False
                    End If
                End If
                ilBox = CREDITAMTINDEX
                If lbcCreditRestr.ListIndex = 1 Then
                    ilBox = CREDITAMTINDEX
                Else
                    If tgUrf(0).sPayRate <> "I" Then
                        ilFound = False
                    Else
                        ilFound = True
                    End If
                    ilBox = PAYRATEINDEX
                End If
            Case CREDITAMTINDEX
                If tgUrf(0).sPayRate <> "I" Then
                    ilFound = False
                    If lbcPaymRating.ListIndex < 0 Then
                        imChgMode = True
                        lbcPaymRating.ListIndex = 1
                        imChgMode = False
                    End If
                End If
                ilBox = PAYRATEINDEX
            Case PAYABLESINDEX
                If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or ((imDirectFlag) And (lbcStatAgency.ListIndex = 0)) Or ((imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0)) Then
                    If lbcPayables.ListIndex >= 2 Then
                        ilBox = ilBox + 1
                    Else
                        mInfoSetShow imInfoBoxNo
                        imInfoBoxNo = -1
                        mSetCommands
                        'If cbcSelection.Enabled Then
                        '    cbcSelection.SetFocus
                        If cmcCancel.Enabled Then
                            cmcCancel.SetFocus
                        Else
                            pbcClickFocus.SetFocus
                        End If
                        Exit Sub
                    End If
                Else
                    mInfoSetShow imInfoBoxNo
                    imInfoBoxNo = -1
                    mSetCommands
                    'If cbcSelection.Enabled Then
                    '    cbcSelection.SetFocus
                    If cmcCancel.Enabled Then
                        cmcCancel.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                End If
            Case PHONEINDEX        'Sales Person
                mInfoSetShow imInfoBoxNo
                imInfoBoxNo = -1
                mSetCommands
                'If cbcSelection.Enabled Then
                '    cbcSelection.SetFocus
                If cmcCancel.Enabled Then
                    cmcCancel.SetFocus
                Else
                    pbcClickFocus.SetFocus
                End If
                Exit Sub
            Case Else
                ilBox = ilBox + 1
        End Select
    Loop While Not ilFound
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = ilBox
    mEnableInfoBox ilBox
End Sub
Private Sub pbcNum_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llRowNo As Long
    Dim ilColNo As Integer
    Dim flX As Single
    Dim flY As Single
    imcNumInv.Visible = False
    flY = fgPadMinY
    For llRowNo = 1 To 4 Step 1
        If (Y >= flY) And (Y <= flY + fgPadDeltaY) Then
            flX = fgPadMinX
            For ilColNo = 1 To 3 Step 1
                If (X >= flX) And (X <= flX + fgPadDeltaX) Then
                    imcNumInv.Move flX, flY
                    imcNumInv.Visible = True
                    imcNumOutline.Move flX - 15, flY - 15
                    imcNumOutline.Visible = True
                    Exit Sub
                End If
                flX = flX + fgPadDeltaX
            Next ilColNo
        End If
        flY = flY + fgPadDeltaY
    Next llRowNo
End Sub
Private Sub pbcNum_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llRowNo As Long
    Dim ilColNo As Integer
    Dim flX As Single
    Dim flY As Single
    Dim slKey As String
    imcNumInv.Visible = False
    flY = fgPadMinY
    For llRowNo = 1 To 4 Step 1
        If (Y >= flY) And (Y <= flY + fgPadDeltaY) Then
            flX = fgPadMinX
            For ilColNo = 1 To 3 Step 1
                If (X >= flX) And (X <= flX + fgPadDeltaX) Then
                    imcNumInv.Move flX, flY
                    imcNumOutline.Move flX - 15, flY - 15
                    imcNumOutline.Visible = True
                    Select Case llRowNo
                        Case 1
                            Select Case ilColNo
                                Case 1
                                    slKey = "7"
                                Case 2
                                    slKey = "8"
                                Case 3
                                    slKey = "9"
                            End Select
                        Case 2
                            Select Case ilColNo
                                Case 1
                                    slKey = "4"
                                Case 2
                                    slKey = "5"
                                Case 3
                                    slKey = "6"
                            End Select
                        Case 3
                            Select Case ilColNo
                                Case 1
                                    slKey = "1"
                                Case 2
                                    slKey = "2"
                                Case 3
                                    slKey = "3"
                            End Select
                        Case 4
                            Select Case ilColNo
                                Case 1
                                    slKey = "0"
                                Case 2
                                    slKey = "00"
                                Case 3
                                    slKey = "."
                            End Select
                    End Select
                    If (imCollectIndex = 1) And ((lmRowNo < 1) And ((imBoxNo = imCheckNo) Or (imBoxNo = imAmount))) Then
                        Select Case imBoxNo
                            Case imCheckNo
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                            Case imAmount
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                        End Select
                        Exit Sub
                    End If
                    If (imCollectIndex = 10) And ((lmRowNo < 1) And ((imBoxNo = IGROSSINDEX) Or (imBoxNo = INETINDEX))) Then
                        Select Case imBoxNo
                            Case IGROSSINDEX
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                            Case INETINDEX
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                        End Select
                        Exit Sub
                    End If
                    If (imCollectIndex = 1) And ((lmRowNo >= 1) And ((imBoxNo = AMNTPAID) Or (imBoxNo = WRITEOFF))) Then
                        Select Case imBoxNo
                            Case AMNTPAID
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                            Case WRITEOFF
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                        End Select
                        Exit Sub
                    End If
                    If (imCollectIndex = 9) And ((lmRowNo >= 1) And (imBoxNo = AMNTPAID)) Then
                        Select Case imBoxNo
                            Case AMNTPAID
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                        End Select
                        Exit Sub
                    End If
                    If (imCollectIndex = 12) And ((lmRowNo >= 1) And (imBoxNo = IAAMTPAID)) Then
                        Select Case imBoxNo
                            Case IAAMTPAID
                                imBypassFocus = True    'Don't change select text
                                edcDropDown.SetFocus
                                'SendKeys slKey
                                gSendKeys edcDropDown, slKey
                            Case IACOMMENT
                        End Select
                        Exit Sub
                    End If
                End If
                flX = flX + fgPadDeltaX
            Next ilColNo
        End If
        flY = flY + fgPadDeltaY
    Next llRowNo
End Sub

Private Sub pbcPostBy_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub

Private Sub pbcPostBy_KeyPress(KeyAscii As Integer)
    If KeyAscii = Asc("I") Or (KeyAscii = Asc("i")) Then
        imPostBy = 0
        pbcPostBy_Paint
        mResetInvNet
    ElseIf KeyAscii = Asc("B") Or (KeyAscii = Asc("b")) Then
        imPostBy = 1
        pbcPostBy_Paint
        mResetInvNet
    ElseIf KeyAscii = Asc("A") Or (KeyAscii = Asc("a")) Then
        imPostBy = 2
        pbcPostBy_Paint
        mResetInvNet
    End If
    If KeyAscii = Asc(" ") Then
        If imPostBy = 0 Then
            imPostBy = 1
        ElseIf imPostBy = 1 Then
            imPostBy = 2
        Else
            imPostBy = 0
        End If
        pbcPostBy_Paint
        mResetInvNet
    End If
End Sub

Private Sub pbcPostBy_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imPostBy = 0 Then
        imPostBy = 1
    ElseIf imPostBy = 1 Then
        imPostBy = 2
    Else
        imPostBy = 0
    End If
    pbcPostBy_Paint
    mResetInvNet
End Sub

Private Sub pbcPostBy_Paint()
    Dim slStr As String
    pbcPostBy.Cls
    If imPostBy = 1 Then
        If imCollectIndex = 1 Then
            slStr = "Pay Bill Veh"
        End If
        If imCollectIndex = 2 Then
            slStr = "Apply Bill Veh"
        End If
        If imCollectIndex = 3 Then
            slStr = "Trans Bill Veh"
        End If
        If imCollectIndex = 9 Then
            slStr = "JE Bill Veh"
        End If
        If imCollectIndex = 12 Then
            slStr = "Adj Bill Veh"
        End If
    ElseIf imPostBy = 2 Then
        If imCollectIndex = 1 Then
            slStr = "Pay Air Veh"
        End If
        If imCollectIndex = 2 Then
            slStr = "Apply Air Veh"
        End If
        If imCollectIndex = 3 Then
            slStr = "Trans Air Veh"
        End If
        If imCollectIndex = 9 Then
            slStr = "JE Air Veh"
        End If
        If imCollectIndex = 12 Then
            slStr = "Adj Air Veh"
        End If
    Else
        If imCollectIndex = 1 Then
            slStr = "Pay Inv"
        End If
        If imCollectIndex = 2 Then
            slStr = "Apply Inv"
        End If
        If imCollectIndex = 3 Then
            slStr = "Trans Inv"
        End If
        If imCollectIndex = 9 Then
            slStr = "JE Inv"
        End If
        If imCollectIndex = 12 Then
            slStr = "Adj Inv"
        End If
    End If
    pbcPostBy.CurrentX = 30
    pbcPostBy.CurrentY = -15
    pbcPostBy.Print slStr
End Sub

Private Sub pbcShow_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub pbcShow_KeyPress(KeyAscii As Integer)
'    If (KeyAscii = Asc("S")) Or (KeyAscii = Asc("s")) Then
'        imAgeingShow = 0
'        pbcShow_Paint
'        mInitCollect False, True
'    End If
'    If (KeyAscii = Asc("D")) Or (KeyAscii = Asc("d")) Then
'        imAgeingShow = 0
'        pbcShow_Paint
'        mInitCollect False, True
'    End If
    If (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
        imAgeingShow = 0
        pbcShow_Paint
        mInitCollect False, True
    End If
    If (KeyAscii = Asc("I")) Or (KeyAscii = Asc("i")) Then
        imAgeingShow = 1
        pbcShow_Paint
        mInitCollect False, True
    End If
    If KeyAscii = Asc(" ") Then
        If imAgeingShow = 0 Then
            imAgeingShow = 1
        Else
            imAgeingShow = 0
        End If
        pbcShow_Paint
        mInitCollect False, True
    End If
End Sub
Private Sub pbcShow_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imAgeingShow = 0 Then
        imAgeingShow = 1
    Else
        imAgeingShow = 0
    End If
    pbcShow_Paint
    mInitCollect False, True
End Sub
Private Sub pbcShow_Paint()
    pbcShow.Cls
    pbcShow.CurrentX = fgBoxInsetX
    pbcShow.CurrentY = -15 'fgBoxInsetY
    If imAgeingShow = 0 Then
        pbcShow.Print "By Advertiser"    '"Summary"
    ElseIf imAgeingShow = 1 Then
        pbcShow.Print "By Invoice"  '"Detail"
    End If
End Sub
Private Sub pbcSTab_GotFocus()
    Dim ilBox As Integer    'local Control box counter
    Dim ilFound As Integer  'redirect focus flag
    If GetFocus() <> pbcSTab.HWnd Then
        Exit Sub
    End If
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1

    If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
        imBoxNo = -1
        lmRowNo = -1
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    If lmRowNo < 1 Then
        If ((imCollectIndex = 1) Or (imCollectIndex = 3)) And (imBoxNo = imOnAccountTo) Then
            mSetShow imBoxNo
            pbcClickFocus.SetFocus
            Exit Sub
        End If
        If ((imCollectIndex = 1) Or (imCollectIndex = 3)) And (imBoxNo = imOnAccountComment) Then
            mSetShow imBoxNo
            If (imAgencyFlag = 1) Or imDirectFlag Then
                pbcClickFocus.SetFocus
                Exit Sub
            End If
            If imCollectIndex = 1 Then
                imBoxNo = imOnAccountVeh
            Else
                imBoxNo = imOnAccountTo
            End If
            lmRowNo = -1
            mEnableBox imBoxNo
            Exit Sub
        End If
'        If (imCollectIndex = 2) And (imBoxNo = imOnAccountComment) Then
'            mSetShow imBoxNo
'            pbcClickFocus.SetFocus
'            Exit Sub
'        End If
        If (imCollectIndex = 10) And (imBoxNo = IADVTINDEX) Then
            If mAdvtBranch() Then
                Exit Sub
            End If
        End If
        If (imCollectIndex = 10) And (imBoxNo = IPRDINDEX) Then
            If mProdBranch() Then
                Exit Sub
            End If
        End If
        If (imCollectIndex = 10) And (imBoxNo = ISPERSONINDEX) Then
            If mSPersonBranch(False) Then
                Exit Sub
            End If
        End If
        If Not mAmountOk() Then
            Beep
            edcDropDown.SetFocus
            Exit Sub
        End If
        imTabDirection = -1  'Set-right to left
        ilBox = imBoxNo
        Do
            ilFound = True
            Select Case ilBox
                Case -1              'Initial
                    imTabDirection = 0  'Set-Left to right
                    ilBox = LBound(tmCtrls)
                    mSetCommands
                Case CASHTRADEINDEX
                    mSetShow imBoxNo
                    imBoxNo = -1
                    lmRowNo = -1
                    mSetCommands
                    If cbcSelection.Enabled Then
                        cbcSelection.SetFocus
                    Else
                        pbcClickFocus.SetFocus
                    End If
                    Exit Sub
                Case Else
                    If imCollectIndex = 10 Then
                        If (ilBox = ICNTRINDEX) And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                            ilBox = ilBox - 1   'Bypass ref inv #
                        ElseIf ilBox = INTRTYPEINDEX Then
                            ilBox = ilBox - 1
                        ElseIf ilBox = INETINDEX Then
                            If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                                ilBox = ilBox - 2
                            Else
                                ilBox = ilBox - 4   'Bypass Gross, NTR type and Tran Type
                            End If
                        ElseIf ilBox = IGROSSINDEX Then
                            If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                                ilBox = ilBox - 1
                            Else
                                ilBox = ilBox - 3   'Bypass NTR type and Tran Type
                            End If
                        ElseIf ISSPARTINDEX Then
                            '6/7/15: replaced acquisition from site override with Barter in system options
                            If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                                If (Asc(tgSpf.sOverrideOptions) And SPNTRACQUISITION) <> SPNTRACQUISITION Then
                                    ilBox = ilBox - 1
                                End If
                            Else
                                If ((Asc(tgSpf.sUsingFeatures2) And BARTER) <> BARTER) Then
                                    ilBox = ilBox - 1
                                End If
                            End If
                        End If
                    End If
                    ilBox = ilBox - 1
            End Select
        Loop While Not ilFound
        mSetShow imBoxNo
        imBoxNo = ilBox
        mEnableBox ilBox
    Else
        If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 7) Then
            mSetShow imBoxNo
            imBoxNo = -1
            lmRowNo = -1
            If cmcUpdate.Enabled Then
                cmcUpdate.SetFocus
                Exit Sub
            Else
                pbcClickFocus.SetFocus
            End If
        ElseIf (imCollectIndex = 9) Then
            If imBoxNo = WRITEOFF Then
                If mTranTypeBranch() Then
                    Exit Sub
                End If
            End If
            If (imBoxNo = WRITEOFF) Or (imBoxNo = COMMENT) Then
                mSetShow imBoxNo
                imBoxNo = imBoxNo - 1
                mEnableBox imBoxNo
            Else
                mSetShow imBoxNo
                imBoxNo = -1
                lmRowNo = -1
                If cmcUpdate.Enabled Then
                    cmcUpdate.SetFocus
                    Exit Sub
                Else
                    pbcClickFocus.SetFocus
                End If
            End If
        ElseIf (imCollectIndex = 12) Then
            If imBoxNo = IACOMMENT Then
                mSetShow imBoxNo
                '6-6-03, bypass Gross field
                imBoxNo = IAAMTPAID 'imBoxNo - 1
                mEnableBox imBoxNo
            Else
                mSetShow imBoxNo
                imBoxNo = -1
                lmRowNo = -1
                If cmcUpdate.Enabled Then
                    cmcUpdate.SetFocus
                    Exit Sub
                Else
                    pbcClickFocus.SetFocus
                End If
            End If
        End If
    End If
End Sub
Private Sub pbcTab_GotFocus()
    Dim ilBox As Integer    'local Control box counter
    Dim ilFound As Integer  'redirect focus flag
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slTax As String

    If GetFocus() <> pbcTab.HWnd Then
        Exit Sub
    End If
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
    If Not (imSelectedIndex >= 0) Then 'No adv or agy selected
        imBoxNo = -1
        lmRowNo = -1
        If cbcSelection.Enabled Then
            cbcSelection.SetFocus
        Else
            pbcClickFocus.SetFocus
        End If
        Exit Sub
    End If
    If lmRowNo < 1 Then
        If ((imCollectIndex = 1) Or (imCollectIndex = 3)) And (imBoxNo = imOnAccountTo) Then
'            pbcClickFocus.SetFocus
            mSetShow imBoxNo
            If imCollectIndex = 1 Then
                imBoxNo = imOnAccountVeh
            Else
                imBoxNo = imOnAccountComment
            End If
            lmRowNo = -1
            mEnableBox imBoxNo
            Exit Sub
        End If
        'If ((imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3)) And (imBoxNo = imOnAccountComment) Then
        If ((imCollectIndex = 1) Or (imCollectIndex = 3)) And (imBoxNo = imOnAccountComment) Then
            mSetShow imBoxNo
            If cmcUpdate.Enabled Then
                cmcUpdate.SetFocus
            Else
                pbcClickFocus.SetFocus
            End If
            Exit Sub
        End If
        If (imCollectIndex = 10) And (imBoxNo = IADVTINDEX) Then
            If mAdvtBranch() Then
                Exit Sub
            End If
        End If
        If (imCollectIndex = 10) And (imBoxNo = IPRDINDEX) Then
            If mProdBranch() Then
                Exit Sub
            End If
        End If
        If (imCollectIndex = 10) And (imBoxNo = ISPERSONINDEX) Then
            If mSPersonBranch(False) Then
                Exit Sub
            End If
        End If
        If Not mAmountOk() Then
            Beep
            edcDropDown.SetFocus
            Exit Sub
        End If
        imTabDirection = 0  'Set-Left to right
        ilBox = imBoxNo
        Do
            ilFound = True
            Select Case ilBox
                Case -1          'Initial
                    imTabDirection = -1  'Set-Right to left
                    ilBox = imTabMax
                Case imTabMax
                    mSetShow imBoxNo
                    imBoxNo = -1
                    lmRowNo = -1
                    mSetCommands
                    If imCollectIndex <> 10 Then
                        If cbcSelection.Enabled Then
                            cbcSelection.SetFocus
                        Else
                            pbcClickFocus.SetFocus
                        End If
                    Else
                        If cmcUpdate.Enabled Then
                            cmcUpdate.SetFocus
                        Else
                            cmcCancel.SetFocus
                        End If
                    End If
                    Exit Sub
                Case Else
                    If ((imCollectIndex = 5) Or (imCollectIndex = 6)) And (ilBox = ACTIONINDEX) Then
                        If imCollectIndex = 5 Then
                            mGetCheckInfo "B"
                        Else
                            mGetCheckInfo "D"
                        End If
                        If imTabMax = 2 Then
                            ilBox = ilBox - 1
                        End If
                    End If
                    If imCollectIndex = 10 Then
                        If (ilBox = IINVNOINDEX) And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                            'bypass Ref Inv
                            ilBox = ilBox + 1
                        ElseIf ilBox = ITRANDATEINDEX Then
                            'Bypass transaction type and gross
                            If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                                ilBox = ilBox + 1
                            Else
                                ilBox = ilBox + 4
                            End If
                            If Trim$(smITranType) = "" Then
                                '2/7/08:  All adjustments entered as AN so that they are used within reports
                                'If (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                                '    smITranType = "IN"
                                'Else
                                    smITranType = "AN"
                                'End If
                                gSetShow pbcCollect(imCollectIndex), smITranType, tmCtrls(ITRANTYPEINDEX)
                            End If
                        ElseIf ilBox = INTRTYPEINDEX Then
                            'ilBox = ilBox + 1
                            If imINTRTypeListIndex > 0 Then
                                slNameCode = tmNTRTypeCode(imINTRTypeListIndex - 1).sKey   'lbcItemCode.List(imIBSave(3, imIBRowNo) - 1)
                                ilRet = gParseItem(slNameCode, 6, "\", slTax)
                                If ilRet = CP_MSG_NONE Then
                                    If slTax <> "Y" Then
                                        ilBox = ilBox + 2
                                    End If
                                End If
                            Else
                                ilBox = ilBox + 2
                            End If
                        ElseIf ilBox = INETINDEX Then
                            '6/7/15: replaced acquisition from site override with Barter in system options
                            If (tgSpf.sUsingNTR = "Y") And (((imActionListIndex = 8) And (imType = 0)) Or ((imActionListIndex = 6) And ((imType = 2) Or (imType = 4) Or (imType = 6)))) Then
                                If (Asc(tgSpf.sOverrideOptions) And SPNTRACQUISITION) <> SPNTRACQUISITION Then
                                    ilFound = False
                                End If
                            Else
                                If ((Asc(tgSpf.sUsingFeatures2) And BARTER) <> BARTER) Then
                                    ilFound = False
                                End If
                            End If
                        ElseIf ilBox = IACQUISITIONINDEX Then
                            mSSPartPop smITranDate
                            If lbcSSPart.ListCount <= 1 Then
                                ilFound = False
                            End If
                        End If
                    End If
                    ilBox = ilBox + 1
            End Select
        Loop While Not ilFound
        mSetShow imBoxNo
        imBoxNo = ilBox
        mEnableBox ilBox
    Else
        If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 7) Then
            mSetShow imBoxNo
            imBoxNo = -1
            lmRowNo = -1
            If cmcUpdate.Enabled Then
                cmcUpdate.SetFocus
                Exit Sub
            Else
                pbcClickFocus.SetFocus
            End If
        ElseIf (imCollectIndex = 9) Then
            If imBoxNo = WRITEOFF Then
                If mTranTypeBranch() Then
                    Exit Sub
                End If
            End If
            If (imBoxNo = AMNTPAID) Or (imBoxNo = WRITEOFF) Then
                mSetShow imBoxNo
                imBoxNo = imBoxNo + 1
                mEnableBox imBoxNo
            Else
                mSetShow imBoxNo
                imBoxNo = -1
                lmRowNo = -1
                If cmcUpdate.Enabled Then
                    cmcUpdate.SetFocus
                    Exit Sub
                Else
                    pbcClickFocus.SetFocus
                End If
            End If
        ElseIf (imCollectIndex = 12) Then
            If imBoxNo = IAAMTPAID Then
                mSetShow imBoxNo
                '6-6-03, bypass Gross field
                imBoxNo = IACOMMENT 'imBoxNo + 1
                mEnableBox imBoxNo
            ElseIf imBoxNo = IAGROSS Then
                mSetShow imBoxNo
                imBoxNo = imBoxNo + 1
                mEnableBox imBoxNo
            Else
                mSetShow imBoxNo
                imBoxNo = -1
                lmRowNo = -1
                If cmcUpdate.Enabled Then
                    cmcUpdate.SetFocus
                    Exit Sub
                Else
                    pbcClickFocus.SetFocus
                End If
            End If
        End If
    End If
End Sub

Private Sub plcCollect_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub plcCommStatis_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub plcScreen_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub plcSelect_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub tmcClick_Timer()
    Dim ilRet As Integer
    tmcClick.Enabled = False
    If imSelectDelay Then
        imSelectDelay = False
        mClearCtrlFields 'Reset fields and sShow strings
        For ilRet = 0 To 11 Step 1
            pbcCollect(ilRet).Cls      'Clear collection screens
        Next ilRet
        ilRet = 0
        pbcInfo.Cls      'Clear info pbc
        mCbcSelectionChange
        '4/16/18
        cbcSelection.SetFocus
        Exit Sub
    End If

    If (lmRowNo < 1) And (imCollectIndex = 10) Then
        Select Case imBoxNo
            Case IADVTINDEX  'Advertiser
                imLbcArrowSetting = False
                gProcessLbcClick lbcAdvertiser, edcDropDown, imChgMode, imLbcArrowSetting
            Case IPRDINDEX  'Product
                imLbcArrowSetting = False
                gProcessLbcClick lbcProd, edcDropDown, imChgMode, imLbcArrowSetting
            Case ISPERSONINDEX  'Salesperson
                imLbcArrowSetting = False
                gProcessLbcClick lbcSalesperson, edcDropDown, imChgMode, imLbcArrowSetting
            Case IINVNOINDEX  'Inv #
            Case IREFINVNOINDEX  'Ref Inv #
            Case ICNTRINDEX  'Contract #
            Case IBILLVEHINDEX  'Vehicle
                imLbcArrowSetting = False
                gProcessLbcClick lbcVehicle(0), edcDropDown, imChgMode, imLbcArrowSetting
            Case IAIRVEHINDEX  'Vehicle
                imLbcArrowSetting = False
                gProcessLbcClick lbcVehicle(1), edcDropDown, imChgMode, imLbcArrowSetting
            Case ITRANDATEINDEX 'Tran Date
            Case ITRANTYPEINDEX 'Tran Type
            Case INTRTYPEINDEX  'Vehicle
                imLbcArrowSetting = False
                gProcessLbcClick lbcNTRType, edcDropDown, imChgMode, imLbcArrowSetting
            Case IGROSSINDEX 'Gross
            Case INETINDEX 'Net
            Case ISSPARTINDEX  'Vehicle
                imLbcArrowSetting = False
                gProcessLbcClick lbcSSPart, edcDropDown, imChgMode, imLbcArrowSetting
            Case ISEASONINDEX  'Vehicle
                imLbcArrowSetting = False
                gProcessLbcClick lbcSeason, edcDropDown, imChgMode, imLbcArrowSetting
            Case IEVENTINDEX  'Vehicle
                imLbcArrowSetting = False
                gProcessLbcClick lbcEvent, edcDropDown, imChgMode, imLbcArrowSetting
        End Select
    End If
    Select Case imInfoBoxNo
        Case PAYABLESINDEX
            imLbcArrowSetting = False
            gProcessLbcClick lbcPayables, edcInfoDropDown, imChgMode, imLbcArrowSetting
    End Select
    If (lmRowNo >= 1) And (imCollectIndex = 9) Then
        Select Case imBoxNo
            Case WRITEOFF
                imLbcArrowSetting = False
                gProcessLbcClick lbcTranType, edcDropDown, imChgMode, imLbcArrowSetting
        End Select
    End If
End Sub
Private Sub vbcCollect_Change()
    If imVbcIngoreChg Then
        Exit Sub
    End If
    If (lmRowNo < 1) And (imBoxNo >= imLBCtrls) And (imBoxNo <= imTabMax) Then
        'Don't call mSetShow
        pbcCollect(imCollectIndex).Cls
        pbcCollect_Paint imCollectIndex
    Else
        mSetShow imBoxNo
        If (imBoxNo < imLBTransCtrls) Or (imBoxNo > UBound(tmTransCtrls)) Then
            pbcCollect(imCollectIndex).Cls
            pbcCollect_Paint imCollectIndex
        Else
            If (imBoxNo = AMNTPAID) Or ((imBoxNo = WRITEOFF) And (imCollectIndex <> 9)) Then
                'Paint is within mSetShow
            Else
                pbcCollect(imCollectIndex).Cls
                pbcCollect_Paint imCollectIndex
            End If
        End If
    End If
    If (lmRowNo < 1) And (imBoxNo >= imLBCtrls) And (imBoxNo <= imTabMax) Then
        'mEnableBox imBoxNo
    Else
        pbcClickFocus.SetFocus
    End If
End Sub
Private Sub vbcCollect_GotFocus()
    plcCalendar.Visible = False
    mSetShow imBoxNo
'    imBoxNo = -1
'    lmRowNo = -1
    mInfoSetShow imInfoBoxNo
    imInfoBoxNo = -1
    mComSetShow imCommentBoxNo
    imCommentBoxNo = -1
End Sub
Private Sub plcScreen_Paint()
    plcScreen.CurrentX = 0
    plcScreen.CurrentY = 0
    plcScreen.Print "Collection"
End Sub

'
'
'           Obtain the Agency Net Amount based on the net value entered.  If taxes are applicable
'           it is entered with the net amount.
'           <input> agency code of transaction
'                   advt code of transaction
'                   slInputNet - net value input (if taxes, it is entered with the agy net
'                   llSbfCode - for NTR billing, sbf record # if applicable 2-24-04
'           <output> llTax1 - tax amount applied to Tax1
'                    llTax2 - tax amount aplied to Tax2
'           <Return> Agy Net value as string

Private Function mGetAgyNet(ilAgfCode As Integer, ilAdfCode As Integer, ilVefCode As Integer, slInputGross As String, slInputNet As String, ilMnfItem As Integer, llSbfCode As Long, ilBacklogTrfCode As Integer, llTax1 As Long, llTax2 As Long, slGrossNet As String) As String
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slTotalTaxAmt                                                                         *
'******************************************************************************************

    Dim ilTax1 As Integer
    Dim ilTax2 As Integer
    Dim slTax1Pct As String
    Dim slTax2Pct As String
    Dim slBothTaxPct As String
    Dim slNet As String
    Dim slAgyNet As String
    Dim ilRet As Integer
    Dim slTax1Amt As String
    Dim slTax2Amt As String
    Dim llTax1Rate As Long
    Dim llTax2Rate As Long
    'Dim slGrossNet As String
    Dim ilSbfTrfCode As Integer
    Dim slDollar As String

    llTax1 = 0
    llTax2 = 0
    ilSbfTrfCode = 0
    slGrossNet = ""
    mGetAgyNet = slInputNet
    If imType <> 0 Then 'imType = 0 => Cash
        Exit Function
    End If
    'Set Net & taxes if applicable
    '1-17-02 determine if taxes are applicable for this agency, then backcompute to get net and taxes
    '12/17/06-Change to tax by agency or vehicle
    'If tgSpf.iBTax(0) <> 0 Or tgSpf.iBTax(1) <> 0 Then
    If ((Asc(tgSpf.sUsingFeatures3) And TAXONNTR) = TAXONNTR) And (ilMnfItem > 0) Then
        If tgSpf.sUsingNTR = "Y" Then
            If llSbfCode > 0 Then
                ''read sbf & if OK, test to see if slsstax <> "Y", if <> "Y" then set mgetagynet = to slinputnet and exit
                tmSbfSrchKey1.lCode = llSbfCode
                ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                ''12/17/06-Change to tax by agency or vehicle
                ''If (ilRet = BTRV_ERR_NONE) And (tmSbf.sSlsTax <> "Y") Then
                If (ilRet = BTRV_ERR_NONE) And (tmSbf.iTrfCode <= 0) Then
                    Exit Function
                End If
                ilSbfTrfCode = tmSbf.iTrfCode
            ElseIf ilBacklogTrfCode > 0 Then
                ilSbfTrfCode = ilBacklogTrfCode
            Else
                Exit Function
            End If
        End If
    '12/17/06-Change to tax by agency or vehicle
    End If
    '12/17/06-Change to tax by agency or vehicle
    If (((Asc(tgSpf.sUsingFeatures3) And TAXONAIRTIME) = TAXONAIRTIME) And (ilMnfItem <= 0)) Or (((Asc(tgSpf.sUsingFeatures3) And TAXONNTR) = TAXONNTR) And (ilMnfItem > 0)) Then
        'get the agency or direct advertiser
        ilTax1 = False
        ilTax2 = False
        slTax1Pct = ".00"
        slTax2Pct = ".00"
        slBothTaxPct = "1.00"
        ilRet = BTRV_ERR_NONE
'        If ilAgfCode > 0 Then
'            If ilAgfCode <> tmAgf.iCode Then  'prevent extra read if already in mem.
'                tmAgfSrchKey.iCode = ilAgfCode
'                ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY) 'get matching agy recd
'            End If
'            If ilRet = BTRV_ERR_NONE Then
'                '12/17/06-Change to tax by agency or vehicle
'                'If tmAgf.sSlsTax(0) = "Y" Then
'                '    ilTax1 = True
'                '    slTax1Pct = gIntToStrDec(tgSpf.iBTax(0), 4)
'                '    slBothTaxPct = gAddStr(slBothTaxPct, slTax1Pct)
'                'End If
'                'If tmAgf.sSlsTax(1) = "Y" Then
'                '    ilTax2 = True
'                '    slTax2Pct = gIntToStrDec(tgSpf.iBTax(1), 4)
'                '    slBothTaxPct = gAddStr(slBothTaxPct, slTax2Pct)
'                'End If
'            End If
'        Else
'            If ilAdfCode <> tmAdf.iCode Then  'prevent extra read if already in mem.
'                tmAdfSrchKey.iCode = ilAdfCode
'                ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY) 'get matching ady recd
'            End If
'            If ilRet = BTRV_ERR_NONE Then
'                '12/17/06-Change to tax by agency or vehicle
'                'If tmAdf.sSlsTax(0) = "Y" Then
'                '    ilTax1 = True
'                '    slTax1Pct = gIntToStrDec(tgSpf.iBTax(0), 4)
'                '    slBothTaxPct = gAddStr(slBothTaxPct, slTax1Pct)'
'
'                'End If
'                'If tmAdf.sSlsTax(1) = "Y" Then
'                '    ilTax2 = True
'                '    slTax2Pct = gIntToStrDec(tgSpf.iBTax(1), 4)
'                '    slBothTaxPct = gAddStr(slBothTaxPct, slTax2Pct)'
'
'                'End If
'            End If
'        End If
'        slNet = slInputNet
'        slAgyNet = gRoundStr(gDivStr(slNet, slBothTaxPct), ".01", 2)
'
'        slTotalTaxAmt = gSubStr(slNet, slAgyNet)
'
'        If (ilTax1) And (ilTax2) Then       'both taxes apply
'            slTax1Amt = gRoundStr(gMulStr(slAgyNet, slTax1Pct), ".01", 2)
'            llTax1 = gStrDecToLong(slTax1Amt, 2)
'            slTAx2Amt = gSubStr(slTotalTaxAmt, slTax1Amt)
'            llTax2 = gStrDecToLong(slTAx2Amt, 2)
'        ElseIf ilTax1 Then                  'only sales tax1
'            llTax1 = gStrDecToLong(slTotalTaxAmt, 2)
'        ElseIf ilTax2 Then                  'only sales tax2
'            llTax2 = gStrDecToLong(slTotalTaxAmt, 2)
'        End If
        If (ilMnfItem > 0) Then
            gGetNTRTaxRates ilSbfTrfCode, llTax1Rate, llTax2Rate, slGrossNet
        Else
            gGetAirTimeTaxRates ilAdfCode, ilAgfCode, ilVefCode, llTax1Rate, llTax2Rate, slGrossNet
        End If
        If llTax1Rate > 0 Or llTax2Rate > 0 Then
            If llTax1Rate > 0 Then
                ilTax1 = True
            End If
            slTax1Pct = gLongToStrDec(llTax1Rate, 6)
            slBothTaxPct = gAddStr(slBothTaxPct, slTax1Pct)
            If llTax2Rate > 0 Then
                ilTax2 = True
            End If
            slTax2Pct = gLongToStrDec(llTax2Rate, 6)
            slBothTaxPct = gAddStr(slBothTaxPct, slTax2Pct)
        End If
        If ilTax1 Or ilTax2 Then
            If ((Asc(tgSpf.sUsingFeatures4) And TAXBYUSA) = TAXBYUSA) Or ((Asc(tgSpf.sUsingFeatures4) And TAXBYCANADA) = TAXBYCANADA) Then
                'If (Asc(tgSpf.sUsingFeatures4) And TAXBYUSA) = TAXBYUSA Then
                If slGrossNet <> "N" Then
                    slNet = slInputNet
                    'If ilAgfCode > 0 Then
                    '    If ilAgfCode <> tmAgf.iCode Then  'prevent extra read if already in mem.
                    '        tmAgfSrchKey.iCode = ilAgfCode
                    '        ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY) 'get matching agy recd
                    '    End If
                    '    slAgyNet = gDivStr(slNet, gSubStr(slBothTaxPct, gIntToStrDec(tmAgf.iComm, 4)))
                    'Else
                    '    slAgyNet = gDivStr(slNet, slBothTaxPct)
                    'End If
                    slDollar = slInputGross
                Else
                    slNet = slInputNet
                    slAgyNet = gDivStr(slNet, slBothTaxPct)
                    slDollar = slAgyNet
                End If
                'slTotalTaxAmt = gSubStr(slNet, slAgyNet)
                If (ilTax1) And (ilTax2) Then       'both taxes apply
                    slTax1Amt = gMulStr(slDollar, slTax1Pct)
                    llTax1 = gStrDecToLong(slTax1Amt, 2)
                    slTax2Amt = gMulStr(slDollar, slTax2Pct)
                    llTax2 = gStrDecToLong(slTax2Amt, 2)
                ElseIf ilTax1 Then                  'only sales tax1
                    slTax1Amt = gMulStr(slDollar, slTax1Pct)
                    llTax1 = gStrDecToLong(slTax1Amt, 2)
                ElseIf ilTax2 Then                  'only sales tax2
                    slTax2Amt = gMulStr(slDollar, slTax2Pct)
                    llTax2 = gStrDecToLong(slTax2Amt, 2)
                End If
                slAgyNet = gSubStr(slNet, gLongToStrDec(llTax1 + llTax2, 2))
            Else
                slAgyNet = slInputNet
            End If
        Else
            slAgyNet = slInputNet
        End If
        mGetAgyNet = slAgyNet
    Else
        mGetAgyNet = slInputNet
    End If
End Function

'
'
'           Obtain the Tax Amount based on the net value entered.
'           Determine if the agency or advt is taxable
'           <input> agency code of transaction
'                   advt code of transaction
'                   slInputNet - net value input, (tax excluded here)
'           <output> llTax1 - tax amount applied to Tax1
'                    llTax2 - tax amount aplied to Tax2
'           <Return>  None
Private Sub mGetTaxAmt(slCashTrade As String, ilAgfCode As Integer, ilAdfCode As Integer, ilVefCode As Integer, ilMnfItem As Integer, llSbfCode As Long, slInputGross As String, slInputNet As String, slSlsTax As String, llTax1 As Long, llTax2 As Long)
Dim ilTax1 As Integer
Dim ilTax2 As Integer
Dim slTax1Pct As String
Dim slTax2Pct As String
Dim ilSbfTrfCode As Integer
Dim ilRet As Integer
Dim llTax1Rate As Long
Dim llTax2Rate As Long
Dim slGrossNet As String

Dim slTax1Amt As String

    llTax1 = 0
    llTax2 = 0

    'If slSlsTax <> "Y" Then     '2-24-04
    '    Exit Sub
    'End If
    If slCashTrade <> "C" Then
        Exit Sub
    End If
    If ((Asc(tgSpf.sUsingFeatures3) And TAXONAIRTIME) <> TAXONAIRTIME) And ((Asc(tgSpf.sUsingFeatures3) And TAXONNTR) <> TAXONNTR) Then
        Exit Sub
    End If
    'Set Net & taxes if applicable
    '1-17-02 determine if taxes are applicable for this agency, then backcompute to get net and taxes
    '12/17/06-Change to tax by agency or vehicle
    'If tgSpf.iBTax(0) <> 0 Or tgSpf.iBTax(1) <> 0 Then
    'get the agency or direct advertiser
    ilTax1 = False
    ilTax2 = False
    slTax1Pct = ".00"
    slTax2Pct = ".00"

'        ilRet = BTRV_ERR_NONE
'        If ilAgfCode > 0 Then
'            If ilAgfCode <> tmAgf.iCode Then  'prevent extra read if already in mem.
'                tmAgfSrchKey.iCode = ilAgfCode
'                ilRet = btrGetEqual(hmAgf, tmAgf, imAgfRecLen, tmAgfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY) 'get matching agy recd
'            End If
'            If ilRet = BTRV_ERR_NONE Then
'                '12/17/06-Change to tax by agency or vehicle
'                'If tmAgf.sSlsTax(0) = "Y" Then
'                '    ilTax1 = True
'                '    slTax1Pct = gIntToStrDec(tgSpf.iBTax(0), 4)
'                'End If
'                'If tmAgf.sSlsTax(1) = "Y" Then
'                '    ilTax2 = True
'                '    slTax2Pct = gIntToStrDec(tgSpf.iBTax(1), 4)
'                'End If
'            End If
'        Else
'            If ilAdfCode <> tmAdf.iCode Then  'prevent extra read if already in mem.
'                tmAdfSrchKey.iCode = ilAdfCode
'                ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY) 'get matching ady recd
'            End If
'            If ilRet = BTRV_ERR_NONE Then
'                '12/17/06-Change to tax by agency or vehicle
'                'If tmAdf.sSlsTax(0) = "Y" Then
'                '    ilTax1 = True
'                'End If
'                'If tmAdf.sSlsTax(1) = "Y" Then
'                '    ilTax2 = True
'                'End If
'            End If
'        End If
    If ((Asc(tgSpf.sUsingFeatures3) And TAXONAIRTIME) = TAXONAIRTIME) And (ilMnfItem <= 0) Then
        gGetAirTimeTaxRates ilAdfCode, ilAgfCode, ilVefCode, llTax1Rate, llTax2Rate, slGrossNet
    ElseIf ((Asc(tgSpf.sUsingFeatures3) And TAXONNTR) = TAXONNTR) And (ilMnfItem > 0) Then
        tmSbfSrchKey1.lCode = llSbfCode
        ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
        ''12/17/06-Change to tax by agency or vehicle
        ''If (ilRet = BTRV_ERR_NONE) And (tmSbf.sSlsTax <> "Y") Then
        If (ilRet = BTRV_ERR_NONE) And (tmSbf.iTrfCode <= 0) Then
            Exit Sub
        End If
        ilSbfTrfCode = tmSbf.iTrfCode
        gGetNTRTaxRates ilSbfTrfCode, llTax1Rate, llTax2Rate, slGrossNet
    End If
    If llTax1Rate > 0 Then
        ilTax1 = True
    End If
    slTax1Pct = gLongToStrDec(llTax1Rate, 6)
    If llTax2Rate > 0 Then
        ilTax2 = True
    End If
    slTax2Pct = gLongToStrDec(llTax2Rate, 6)
    If (ilTax1) And (ilTax2) Then       'both taxes apply
        slTax1Amt = gRoundStr(gMulStr(slInputNet, slTax1Pct), ".01", 2)
        llTax1 = gStrDecToLong(slTax1Amt, 2)
        slTax1Amt = gRoundStr(gMulStr(slInputNet, slTax2Pct), ".01", 2)
        llTax2 = gStrDecToLong(slTax1Amt, 2)
    ElseIf ilTax1 Then                  'only sales tax1
        slTax1Amt = gRoundStr(gMulStr(slInputNet, slTax1Pct), ".01", 2)
        llTax1 = gStrDecToLong(slTax1Amt, 2)
    ElseIf ilTax2 Then                  'only sales tax2
        slTax1Amt = gRoundStr(gMulStr(slInputNet, slTax2Pct), ".01", 2)
        llTax2 = gStrDecToLong(slTax1Amt, 2)
    End If

End Sub

Private Sub mResetInvNet()
    Dim ilLoop As Integer
    Dim ilColNo As Integer
    Dim slInvNet As String  'Net amount for an invoice
    Dim slInvGross As String  'Gross amount for an invoice
    Dim llLastInvNo As Long 'Last invoice number
    Dim slStr As String
    Dim ilMatch As Integer
    Dim slBillVeh As String
    Dim slAirVeh As String
    Dim slPartGroup As String
    Dim slNTR As String
    Dim slPkLineNo As String

    Screen.MousePointer = vbHourglass
    pbcCollect(imCollectIndex).Cls
    llLastInvNo = -1
    For ilLoop = LBound(smSave, 2) To UBound(smSave, 2) Step 1
        smSave(1, ilLoop) = ""
        smShow(AMNTDUE, ilLoop) = ""
        smSave(19, ilLoop) = ""
    Next ilLoop
    'For ilLoop = LBound(smSave, 2) To UBound(smSave, 2) Step 1
    For ilLoop = LBONE To UBound(smSave, 2) Step 1
        If llLastInvNo = -1 Then
            llLastInvNo = Val(smSave(8, ilLoop))
            slInvNet = smSave(4, ilLoop)
            slInvGross = smSave(18, ilLoop)
            slBillVeh = smSave(10, ilLoop)
            slAirVeh = smSave(11, ilLoop)
            slPartGroup = smSave(12, ilLoop)
            slNTR = smSave(13, ilLoop)
            slPkLineNo = smSave(9, ilLoop)
            smSave(1, ilLoop) = ""
            smShow(AMNTDUE, ilLoop) = ""
        Else
            'Force each PO to have it own due amount (4/29/02 Jim and Mary)
            'This is required here to force sum of items prior to PO
            If (imCollectIndex = 9) And (tmRvf.sTranType = "PO") Then
                llLastInvNo = -3
            End If

            ilMatch = True
            If (llLastInvNo <> Val(smSave(8, ilLoop))) Then
                ilMatch = False
            Else
                If imPostBy = 1 Then
                    If (StrComp(slBillVeh, smSave(10, ilLoop), vbTextCompare) <> 0) Then
                        ilMatch = False
                    End If
                Else
                    If imPostBy = 2 Then
                        If (StrComp(Trim$(slBillVeh), Trim$(smSave(10, ilLoop)), vbTextCompare) <> 0) Or (StrComp(Trim$(slAirVeh), Trim$(smSave(11, ilLoop)), vbTextCompare) <> 0) Or (StrComp(Trim$(slPartGroup), Trim$(smSave(12, ilLoop)), vbTextCompare) <> 0) Or (StrComp(Trim$(slNTR), Trim$(smSave(13, ilLoop)), vbTextCompare) <> 0) Or (StrComp(Trim$(slPkLineNo), Trim$(smSave(9, ilLoop)), vbTextCompare) <> 0) Then
                            ilMatch = False
                        End If
                    End If
                End If
            End If
            If ilMatch Then
                slInvNet = gAddStr(slInvNet, smSave(4, ilLoop))
                slInvGross = gAddStr(slInvGross, smSave(18, ilLoop))
                smSave(1, ilLoop) = ""
                smShow(AMNTDUE, ilLoop) = ""
                smSave(19, ilLoop) = ""
            Else
                smSave(1, ilLoop - 1) = slInvNet
                smSave(19, ilLoop - 1) = slInvGross
                If (imCollectIndex <> 0) And (imCollectIndex <> 11) Then
                    If imCollectIndex = 12 Then
                        ilColNo = AMNTDUE   '9
                    Else
                        ilColNo = AMNTDUE   '9
                    End If
                    gFormatStr slInvNet, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
                    gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
                    smShow(ilColNo, ilLoop - 1) = tmTransCtrls(ilColNo).sShow
                End If
                llLastInvNo = Val(smSave(8, ilLoop))
                slInvNet = smSave(4, ilLoop)
                slInvGross = smSave(18, ilLoop)
                slBillVeh = smSave(10, ilLoop)
                slAirVeh = smSave(11, ilLoop)
                slPartGroup = smSave(12, ilLoop)
                slNTR = smSave(13, ilLoop)
                slPkLineNo = smSave(9, ilLoop)
            End If
        End If
        'Force each PO to have it own due amount (4/29/02- Jim and Mary)
        If (imCollectIndex = 9) And (tmRvf.sTranType = "PO") Then
            llLastInvNo = -2
        End If
    Next ilLoop
    ilLoop = UBound(smSave, 2)
    If Trim$(smSave(5, ilLoop)) <> "" Then
        smSave(1, ilLoop) = slInvNet
        smSave(19, ilLoop) = slInvGross
        If (imCollectIndex <> 0) And (imCollectIndex <> 11) Then
            If imCollectIndex = 12 Then
                ilColNo = AMNTDUE   '9
            Else
                ilColNo = AMNTDUE   '9
            End If
            gFormatStr slInvNet, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slStr
            gSetShow pbcCollect(imCollectIndex), slStr, tmTransCtrls(ilColNo)
            smShow(ilColNo, ilLoop) = tmTransCtrls(ilColNo).sShow
        End If
    End If
    If vbcCollect.Value <> vbcCollect.Min Then
        vbcCollect.Value = vbcCollect.Min
    End If
    mCreateCompressShow -1, 1
    pbcCollect_Paint imCollectIndex
    Screen.MousePointer = vbDefault
End Sub

Private Function mSaveComment(llRow As Long)
    Dim ilFound As Integer
    Dim llRecPos As Long
    Dim ilRet As Integer
    Dim slCode As String

    ilFound = True

    'ilRet = gParseItem(lbcTransactionCode.List(llRow - 1), 2, "\", slCode)
    ilRet = gParseItem(tgTransactionCode(llRow - 1).sKey, 2, "\", slCode)
    If ilRet = CP_MSG_NONE Then
        llRecPos = Val(slCode)
        ilRet = btrGetDirect(hmRvf, tmRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
        If ilRet <> BTRV_ERR_NONE Then
            ilFound = False
        End If
    Else
        ilFound = False
    End If
    If ilFound Then
        If (tmRvf.lCefCode > 0) Then
            Do
                imCefRecLen = Len(tmCef)    '1009
                tmCefSrchKey.lCode = tmRvf.lCefCode
                ilRet = btrGetEqual(hmCef, tmCef, imCefRecLen, tmCefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
                If ilRet = BTRV_ERR_NONE Then
                    'tmCef.iStrLen = Len(smTranComment(llRow))
                    tmCef.sComment = Trim$(Left$(smTranComment(llRow), Len(tmCef.sComment) - 2)) & Chr$(0) ' & Chr$(0) 'sgTB
                    'imCefRecLen = 5 + Len(Trim$(tmCef.sComment)) + 2   '5 = fixed record length; 2 is the length of the record which is part of the variable record
                    imCefRecLen = Len(tmCef)
                    ilRet = btrUpdate(hmCef, tmCef, imCefRecLen)
                Else
                    Exit Do
                End If
            Loop While ilRet = BTRV_ERR_CONFLICT
            If ilRet <> BTRV_ERR_NONE Then
                Screen.MousePointer = vbDefault    'Default
                ilRet = MsgBox("File in Use [mSaveComment], Update CEF" & str$(ilRet), vbOKOnly + vbExclamation, "Collection")
                mSaveComment = False
                Exit Function
            End If
        End If
    End If
    mSaveComment = True
End Function

Private Sub mReadPnf(ilPnfCode As Integer)
    Dim ilRet As Integer

    If ((imAgencyFlag = 0) And (Not imDirectFlag) And (lbcStatAdvt.ListIndex = 0)) Or ((imAgencyFlag = 1) And (lbcStatAgency.ListIndex > 0)) Then
        mPayablePop tmAgf.iCode
    Else
        mPayablePop tmAdf.iCode
    End If
    tmPnfSrchKey.iCode = ilPnfCode
    ilRet = btrGetEqual(hmPnf, tmPnf, imPnfRecLen, tmPnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
    If ilRet = BTRV_ERR_NONE Then
        smPnfName = tmPnf.sName
        gSetPhoneNo tmPnf.sPhone, mkcPhone
        If mkcPhone.Text = smPhoneImage Then
            smPnfPhoneNumber = ""
        Else
            smPnfPhoneNumber = mkcPhone.Text
        End If
    Else
        smPnfName = ""
        smPnfPhoneNumber = ""
    End If
    smInfoCtrls(PAYABLESINDEX) = smPnfName
    mInitInfoSetShow PAYABLESINDEX
    mInitInfoSetShow PHONEINDEX
End Sub

Private Sub mTranSort(ilTranSort As Integer)
    Dim llLoop As Long
    Dim ilRet As Integer
    ReDim slField(0 To 3) As String

    If ilTranSort = imTranSort Then
        Exit Sub
    End If
    For llLoop = 0 To UBound(tgTransactionCode) - 1 Step 1
        ilRet = gParseItemNoTrim(tgTransactionCode(llLoop).sKey, 1, "|", slField(1))
        ilRet = gParseItemNoTrim(tgTransactionCode(llLoop).sKey, 2, "|", slField(2))
        ilRet = gParseItemNoTrim(tgTransactionCode(llLoop).sKey, 3, "|", slField(3))
        tgTransactionCode(llLoop).sKey = slField(2) & "|" & slField(1) & "|" & slField(3)
    Next llLoop
    If UBound(tgTransactionCode) - 1 > 0 Then
        ArraySortTyp fnAV(tgTransactionCode(), 0), UBound(tgTransactionCode), 0, LenB(tgTransactionCode(0)), 0, LenB(tgTransactionCode(0).sKey), 0
    End If
    imTranSort = ilTranSort
End Sub

Private Function mSavePnfRec(ilPnfCode As Integer) As Integer
    Dim ilRet As Integer

    Do
        tmPnfSrchKey.iCode = ilPnfCode
        ilRet = btrGetEqual(hmPnf, tmPnf, imPnfRecLen, tmPnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        If ilRet = BTRV_ERR_NONE Then
            gGetPhoneNo mkcPhone, tmPnf.sPhone
            ilRet = btrUpdate(hmPnf, tmPnf, imPnfRecLen)
        End If
    Loop While ilRet = BTRV_ERR_CONFLICT
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:m RepBilled                     *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if Rep Billed        *
'*******************************************************
Private Function mRepBilled(tlRvf As RVF) As Integer
    Dim ilBillVefCode As Integer
    Dim ilVef As Integer
    Dim ilRet As Integer
    Dim ilCount As Integer

    mRepBilled = True
    ilCount = 0
    'Only check NTR transactions
    If (sgRepDef = "Y") And (tlRvf.sTranType = "IN") Then
        If (tgSpf.sPostCalAff = "N") And ((Asc(tgSpf.sUsingFeatures8) And REPBYDT) <> REPBYDT) Then
            Exit Function
        End If
        'Bypass Rep vehicles that are associated with NTR transaction
        If (tgSpf.sUsingNTR <> "Y") Or (tlRvf.iMnfItem <= 0) Then
            ilBillVefCode = tlRvf.iBillVefCode
            ilVef = gBinarySearchVef(ilBillVefCode)
            If ilVef <> -1 Then
                If tgMVef(ilVef).sType = "R" Then
                    tmChfSrchKey1.lCntrNo = tlRvf.lCntrNo
                    tmChfSrchKey1.iCntRevNo = 32000
                    tmChfSrchKey1.iPropVer = 32000
                    ilRet = btrGetGreaterOrEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)
                    'If contract missing, assume that transaction entered via Backlog, 5/8/04
                    If (ilRet <> BTRV_ERR_NONE) Or (tmChf.lCntrNo <> tlRvf.lCntrNo) Then
                        Exit Function
                    End If
                    Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCntrNo = tlRvf.lCntrNo)
                        If tmChf.sSchStatus = "F" Then
                            Exit Do
                        End If
                        ilRet = btrGetNext(hmCHF, tmChf, imCHFRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                    Loop
                    If (tmChf.lCntrNo = tlRvf.lCntrNo) And (tmChf.sSchStatus = "F") Then
                        'Billing
                        tmSbfSrchKey0.lChfCode = tmChf.lCode
                        tmSbfSrchKey0.iDate(0) = tlRvf.iTranDate(0)
                        tmSbfSrchKey0.iDate(1) = tlRvf.iTranDate(1)
                        tmSbfSrchKey0.sTranType = "T"
                        ilRet = btrGetEqual(hmSbf, tmSbf, imSbfRecLen, tmSbfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        Do While (ilRet = BTRV_ERR_NONE) And (tmChf.lCode = tmSbf.lChfCode)
                            If (tmSbf.iDate(0) <> tlRvf.iTranDate(0)) Or (tmSbf.iDate(1) <> tlRvf.iTranDate(1)) Then
                                Exit Do
                            End If
                            If tmSbf.sTranType = "T" Then
                                If tmSbf.sBilled <> "Y" Then
                                    mRepBilled = False
                                    Exit Function
                                End If
                                ilCount = ilCount + 1
                            End If
                            ilRet = btrGetNext(hmSbf, tmSbf, imSbfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                        Loop
                    End If
                    If ilCount <= 0 Then
                        mRepBilled = False
                    End If
                End If
            End If
        End If
    End If
    Exit Function
End Function

Private Function mGetGross(ilAdfCode As Integer, ilAgfCode As Integer, slNet As String, ilVefCode As Integer, ilMnfItem, ilSbfTrfCode As Integer) As String
    Dim slGross As String
    Dim slAgyRate As String
    Dim ilTrfAgyAdvt As Integer
    Dim llTax1Rate As Long
    Dim llTax2Rate As Long
    Dim slTax1Rate As String
    Dim slTax2Rate As String
    Dim slTaxRate As String
    Dim slGrossNet As String

    If imType <> 0 Then  'Not Cash
        If ilAgfCode <= 0 Then
            slGross = slNet
        Else
            slAgyRate = gDivStr(gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)), "100.00")
            slGross = gDivStr(slNet, slAgyRate) '".85")
        End If
    Else
        ilTrfAgyAdvt = gGetTrfIndexForAgyAdvt(ilAdfCode, ilAgfCode)
        If ((Asc(tgSpf.sUsingFeatures3) And TAXONAIRTIME) = TAXONAIRTIME) And (ilMnfItem <= 0) And (ilTrfAgyAdvt <> -1) Then
            'Air time: Backcompute gross with net including tax
            gGetAirTimeTaxValues ilTrfAgyAdvt, ilVefCode, llTax1Rate, llTax2Rate, slGrossNet
            If ilAgfCode <= 0 Then
                slAgyRate = "1.0"
            Else
                slAgyRate = gDivStr(gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)), "100.00")
            End If
            slTax1Rate = gLongToStrDec(llTax1Rate, 4)
            slTax2Rate = gLongToStrDec(llTax2Rate, 4)
            slTaxRate = gDivStr(gAddStr(slTax1Rate, slTax2Rate), "100.00")
            slGross = gDivStr(slNet, gAddStr(slAgyRate, slTaxRate)) '".85")
        ElseIf ((Asc(tgSpf.sUsingFeatures3) And TAXONNTR) = TAXONNTR) And (ilMnfItem > 0) Then
            'NTR: Backcompute gross with net including tax
            '12/24/06:  Need to add tax selective
            gGetNTRTaxRates ilSbfTrfCode, llTax1Rate, llTax2Rate, slGrossNet

            If ilAgfCode <= 0 Then
                slAgyRate = "1.0"
            Else
                slAgyRate = gDivStr(gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)), "100.00")
            End If
            slTax1Rate = gLongToStrDec(llTax1Rate, 4)
            slTax2Rate = gLongToStrDec(llTax2Rate, 4)
            slTaxRate = gDivStr(gAddStr(slTax1Rate, slTax2Rate), "100.00")
            slGross = gDivStr(slNet, gAddStr(slAgyRate, slTaxRate)) '".85")
        Else
            If ilAgfCode <= 0 Then
                slGross = slNet
            Else
                slAgyRate = gDivStr(gSubStr("100.00", gIntToStrDec(tmAgf.iComm, 2)), "100.00")
                slGross = gDivStr(slNet, slAgyRate) '".85")
            End If
        End If
    End If
    mGetGross = gRoundStr(slGross, ".01", 2)
End Function

'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintCommentTitle              *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint Header Titles            *
'*                                                     *
'*******************************************************
Private Sub mPaintCommentTitle()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer

    llColor = pbcComment.ForeColor
    slFontName = pbcComment.FontName
    flFontSize = pbcComment.FontSize
    pbcComment.ForeColor = BLUE
    pbcComment.FontBold = False
    pbcComment.FontSize = 7
    pbcComment.FontName = "Arial"
    pbcComment.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    For ilLoop = imLBComCtrls To UBound(tmComCtrls) Step 1
        pbcComment.Line (tmComCtrls(ilLoop).fBoxX - 15, tmComCtrls(ilLoop).fBoxY - 15)-Step(tmComCtrls(ilLoop).fBoxW + 15, tmComCtrls(ilLoop).fBoxH + 15), BLUE, B
        pbcComment.CurrentX = tmComCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
        pbcComment.CurrentY = tmComCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        Select Case ilLoop
            Case COMACTDATEINDEX
                pbcComment.Print "Action Date"
            Case COMADVAGYINDEX
                pbcComment.Print "Advertiser or Agency"
            Case COMMENTINDEX
                pbcComment.Print "Comment"
        End Select
    Next ilLoop

    pbcComment.FontSize = flFontSize
    pbcComment.FontName = slFontName
    pbcComment.FontSize = flFontSize
    pbcComment.ForeColor = llColor
    pbcComment.FontBold = True
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintInfoTitle              *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Infos: Paint Header Titles            *
'*                                                     *
'*******************************************************
Private Sub mPaintInfoTitle()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer

    llColor = pbcInfo.ForeColor
    slFontName = pbcInfo.FontName
    flFontSize = pbcInfo.FontSize
    pbcInfo.ForeColor = BLUE
    pbcInfo.FontBold = False
    pbcInfo.FontSize = 7
    pbcInfo.FontName = "Arial"
    pbcInfo.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    For ilLoop = imLBInfoCtrls To UBound(tmInfoCtrls) Step 1
        If (ilLoop <> COMNTINDEX) And (ilLoop <> CREDITAMTINDEX) Then
            If ilLoop <> CREDITRINDEX Then
                pbcInfo.Line (tmInfoCtrls(ilLoop).fBoxX - 15, tmInfoCtrls(ilLoop).fBoxY - 15)-Step(tmInfoCtrls(ilLoop).fBoxW + 15, tmInfoCtrls(ilLoop).fBoxH + 15), BLUE, B
            Else
                pbcInfo.Line (tmInfoCtrls(ilLoop).fBoxX - 15, tmInfoCtrls(ilLoop).fBoxY - 15)-Step(tmInfoCtrls(ilLoop + 2).fBoxX - 30, tmInfoCtrls(ilLoop).fBoxH + 15), BLUE, B
            End If
            pbcInfo.CurrentX = tmInfoCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
            pbcInfo.CurrentY = tmInfoCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
            Select Case ilLoop
                Case CREDITRINDEX
                    pbcInfo.Print "Credit Restrictions"
                Case PAYRATEINDEX
                    pbcInfo.Print "Payment Rating"
                Case PAYABLESINDEX
                    pbcInfo.Print "Payables Contact"
                Case PHONEINDEX
                    pbcInfo.Print "Phone # and Extension"
            End Select
        End If
    Next ilLoop

    For ilLoop = imLBS4Info To UBound(tmS4Info) Step 1
        If (ilLoop <> TGROSSINDEX) And (ilLoop <> TGDATEINDEX) Then
            pbcInfo.Line (tmS4Info(ilLoop).fBoxX - 15, tmS4Info(ilLoop).fBoxY - 15)-Step(tmS4Info(ilLoop).fBoxW + 15, tmS4Info(ilLoop).fBoxH + 15), BLUE, B
            pbcInfo.Line (tmS4Info(ilLoop).fBoxX, tmS4Info(ilLoop).fBoxY)-Step(tmS4Info(ilLoop).fBoxW - 15, tmS4Info(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
        ElseIf (ilLoop = TGROSSINDEX) Then
            pbcInfo.Line (tmS4Info(ilLoop).fBoxX - 15, tmS4Info(ilLoop).fBoxY - 15)-Step(tmS4Info(ilLoop).fBoxW + tmS4Info(ilLoop + 1).fBoxW + 30, tmS4Info(ilLoop).fBoxH), BLUE, B
            pbcInfo.Line (tmS4Info(ilLoop).fBoxX, tmS4Info(ilLoop).fBoxY)-Step(tmS4Info(ilLoop).fBoxW + tmS4Info(ilLoop + 1).fBoxW - 15, tmS4Info(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
        End If
        pbcInfo.CurrentX = tmS4Info(ilLoop).fBoxX + 15  'fgBoxInsetX
        pbcInfo.CurrentY = tmS4Info(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        Select Case ilLoop
            Case OVR90INDEX
                pbcInfo.Print "% Over 90"
            Case CURARINDEX
                pbcInfo.Print "Current A/R Total"
            Case UNBILLINDEX
                pbcInfo.Print "Unbilled + Projected"
            Case HIARINDEX
                pbcInfo.Print "Highest A/R Total"
            Case TGROSSINDEX
                pbcInfo.Print "Total Gross"
            Case TGDATEINDEX
                pbcInfo.Print "Since"
            Case NSFINDEX
                pbcInfo.Print "# NSF Checks"
            Case LBILLINDEX
                pbcInfo.Print "Date Last Billed"
            Case LPAYINDEX
                pbcInfo.Print "Date Last Payment"
            Case AVGPAYINDEX
                pbcInfo.Print "Avg # Days to Pay"
            Case DAYSLPAYINDEX
                pbcInfo.Print "# Days to Pay Last Payment"
        End Select
    Next ilLoop

    pbcInfo.FontSize = flFontSize
    pbcInfo.FontName = slFontName
    pbcInfo.FontSize = flFontSize
    pbcInfo.ForeColor = llColor
    pbcInfo.FontBold = True
End Sub


'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintInfoTitle              *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Infos: Paint Header Titles            *
'*                                                     *
'*******************************************************
Private Sub mPaintCollectTitle()
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer
    Dim llTop As Long

    On Error GoTo mPaintCollectTitleErr:
    llColor = pbcCollect(imCollectIndex).ForeColor
    On Error GoTo 0
    slFontName = pbcCollect(imCollectIndex).FontName
    flFontSize = pbcCollect(imCollectIndex).FontSize
    pbcCollect(imCollectIndex).ForeColor = BLUE
    pbcCollect(imCollectIndex).FontBold = False
    pbcCollect(imCollectIndex).FontSize = 7
    pbcCollect(imCollectIndex).FontName = "Arial"
    pbcCollect(imCollectIndex).FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    For ilLoop = 1 To 2 Step 1
        pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
        pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
        pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
        Select Case ilLoop
            Case 1
                pbcCollect(imCollectIndex).Print "Type"
            Case 2
                pbcCollect(imCollectIndex).Print "Action"
        End Select
    Next ilLoop
    Select Case imCollectIndex
        Case 0, 11 ' View history, Restore History
            pbcCollect(imCollectIndex).Line (tmCtrls(imTotalDue).fBoxX - 15, tmCtrls(imTotalDue).fBoxY - 15)-Step(tmCtrls(imTotalDue).fBoxW + 15, tmCtrls(imTotalDue).fBoxH + 15), BLUE, B
            pbcCollect(imCollectIndex).Line (tmCtrls(imTotalDue).fBoxX, tmCtrls(imTotalDue).fBoxY)-Step(tmCtrls(imTotalDue).fBoxW - 15, tmCtrls(imTotalDue).fBoxH - 15), LIGHTYELLOW, BF
            pbcCollect(imCollectIndex).CurrentX = tmCtrls(imTotalDue).fBoxX + 15  'fgBoxInsetX
            pbcCollect(imCollectIndex).CurrentY = tmCtrls(imTotalDue).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
            pbcCollect(imCollectIndex).Print "Total Due"

            pbcCollect(imCollectIndex).height = plcCollect.height - 2 * fgBevelY
            llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45
            Do
                pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(VASTERICK).fBoxX + tmTransCtrls(VASTERICK).fBoxW - 15, tmTransCtrls(imLBTransCtrls).fBoxH + 15), BLUE, B
                If imCollectIndex = 0 Then
                    pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(VASTERICK).fBoxX + tmTransCtrls(VASTERICK).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTYELLOW, BF
                Else
                    pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(VASTERICK).fBoxX + tmTransCtrls(VASTERICK).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTBLUE, BF
                End If
                If llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45 Then
                    For ilLoop = imLBTransCtrls To VASTERICK Step 1
                        pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                        pbcCollect(imCollectIndex).CurrentY = llTop + 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        Select Case ilLoop
                            Case ADVTAGENCY
                                pbcCollect(imCollectIndex).Print "Name"
                            Case INVOICENO
                                pbcCollect(imCollectIndex).Print "Invoice #"
                            Case VEHICLENAME
                                pbcCollect(imCollectIndex).Print "Vehicle"
                            Case EVENTNUMBER
                                If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                                    pbcCollect(imCollectIndex).Print "Event"
                                Else
                                    pbcCollect(imCollectIndex).Print " "
                                End If
                            Case CONTRACTNO
                                pbcCollect(imCollectIndex).Print "Contr #"
                            Case VCHECKNO
                                pbcCollect(imCollectIndex).Print "Check #"
                            Case VTRANSDATE
                                pbcCollect(imCollectIndex).Print "Tran Date"
                            Case VTRANSTYPE
                                pbcCollect(imCollectIndex).Print "Type"
                            Case VNET
                                pbcCollect(imCollectIndex).Print "Net"
                            Case VASTERICK
                                pbcCollect(imCollectIndex).Print "*"
                        End Select
                    Next ilLoop
                End If
                llTop = llTop + tmTransCtrls(imLBTransCtrls).fBoxH + 15
            Loop While llTop + tmTransCtrls(imLBTransCtrls).fBoxH + tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 30 < pbcCollect(imCollectIndex).height
        Case 1 ' Post Cash
            For ilLoop = imCheckDate To imTotalAppliedWriteOff Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imTotalUnapplied) Or (ilLoop = imPostOnAccount) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTBLUE, BF
                End If
                If (ilLoop = imTotalDue) Or (ilLoop = imTotalAppliedDue) Or (ilLoop = imTotalAppliedWriteOff) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imCheckDate
                        If imType <= 1 Then
                            pbcCollect(imCollectIndex).Print "Deposit Date"
                        Else
                            pbcCollect(imCollectIndex).Print "Usage Date"
                        End If
                    Case imCheckNo
                        If imType <= 1 Then
                            pbcCollect(imCollectIndex).Print "Check #"
                        Else
                            pbcCollect(imCollectIndex).Print "Usage Code"
                        End If
                    Case imAmount
                        If imType <= 1 Then
                            pbcCollect(imCollectIndex).Print "Check Amount"
                        Else
                            pbcCollect(imCollectIndex).Print "Usage Amount"
                        End If
                    Case imTotalUnapplied
                        pbcCollect(imCollectIndex).Print "Total Unapplied"
                    Case imPostOnAccount
                        pbcCollect(imCollectIndex).Print "Post On Account"
                    Case imOnAccountTo
                        pbcCollect(imCollectIndex).Print "On Account To"
                    Case imOnAccountVeh
                        pbcCollect(imCollectIndex).Print "Vehicle"
                    Case imOnAccountComment
                        pbcCollect(imCollectIndex).Print "Comment"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                    Case imTotalAppliedDue
                        pbcCollect(imCollectIndex).Print "Total Applied"
                    Case imTotalAppliedWriteOff
                        pbcCollect(imCollectIndex).Print "Total Applied"
                End Select
            Next ilLoop

        Case 2 ' Apply on Account Payments
            For ilLoop = imAmount To imTotalAppliedWriteOff Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imTotalUnapplied) Or (ilLoop = imPostOnAccount) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTBLUE, BF
                End If
                If (ilLoop = imTotalDue) Or (ilLoop = imTotalAppliedDue) Or (ilLoop = imTotalAppliedWriteOff) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imAmount
                        pbcCollect(imCollectIndex).Print "On Account Amount"
                    Case imTotalUnapplied
                        pbcCollect(imCollectIndex).Print "Total Unapplied"
                    Case imPostOnAccount
                        pbcCollect(imCollectIndex).Print "Post On Account"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                    Case imTotalAppliedDue
                        pbcCollect(imCollectIndex).Print "Total Applied"
                    Case imTotalAppliedWriteOff
                        pbcCollect(imCollectIndex).Print "Total Applied"
                End Select
            Next ilLoop
        Case 3 ' Transfer Entry
            For ilLoop = imCheckDate To imTotalAppliedWriteOff Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imAmount) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                If (ilLoop = imTotalUnapplied) Or (ilLoop = imPostOnAccount) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTBLUE, BF
                End If
                If (ilLoop = imTotalDue) Or (ilLoop = imTotalAppliedDue) Or (ilLoop = imTotalAppliedWriteOff) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imCheckDate
                        pbcCollect(imCollectIndex).Print "Tran Date"
                    Case imAmount
                        pbcCollect(imCollectIndex).Print "Transfer Amount"
                    Case imTotalUnapplied
                        pbcCollect(imCollectIndex).Print "Total Unapplied"
                    Case imPostOnAccount
                        pbcCollect(imCollectIndex).Print "Post On Account"
                    Case imOnAccountTo
                        pbcCollect(imCollectIndex).Print "On Account To"
                    Case imOnAccountComment
                        pbcCollect(imCollectIndex).Print "Comment"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                    Case imTotalAppliedDue
                        pbcCollect(imCollectIndex).Print "Total Applied"
                    Case imTotalAppliedWriteOff
                        pbcCollect(imCollectIndex).Print "Total Applied"
                End Select
            Next ilLoop
        Case 4 ' Reverse Entry
            For ilLoop = imCheckDate To imTotalAppliedWriteOff Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imTotalDue) Or (ilLoop = imTotalAppliedWriteOff) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imCheckDate
                        pbcCollect(imCollectIndex).Print "Tran Date"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                    Case imTotalAppliedWriteOff
                        pbcCollect(imCollectIndex).Print "Total Reversed"
                End Select
            Next ilLoop
        Case 5, 6 ' Post Returned Check and Redeposit returned check
            For ilLoop = imCheckDate To imTotalDue Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imTotalDue) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imCheckDate
                        pbcCollect(imCollectIndex).Print "Tran Date"
                    Case imCheckNo
                        pbcCollect(imCollectIndex).Print "Date/Check #/Check Amount/Variance"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                End Select
            Next ilLoop
        'Case 6 ' Redeposit returned check
        ''Case 7 ' Writeoff bad debt
        ''    llRowCount = 8
        ''    ilColCount = 10
        ''    imTabMax = 3
        Case 8 ' Ageing
            pbcCollect(imCollectIndex).height = plcCollect.height - 2 * fgBevelY
            llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45
            Do
                pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(UBound(tmTransCtrls)).fBoxX + tmTransCtrls(UBound(tmTransCtrls)).fBoxW - 15, tmTransCtrls(imLBTransCtrls).fBoxH + 15), BLUE, B
                pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(UBound(tmTransCtrls)).fBoxX + tmTransCtrls(UBound(tmTransCtrls)).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTYELLOW, BF
                If llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45 Then
                    For ilLoop = imLBTransCtrls To UBound(tmTransCtrls) Step 1
                        If ilLoop = imLBTransCtrls Then
                            pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                        End If
                        pbcCollect(imCollectIndex).CurrentY = llTop + 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        Select Case ilLoop
                            Case 1
                                pbcCollect(imCollectIndex).Print "Name"
                            Case 2
                                pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW - pbcCollect(imCollectIndex).TextWidth("Total Due") - 15 'fgBoxInsetX
                                pbcCollect(imCollectIndex).Print "Total Due"
                            Case 3
                                pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW - pbcCollect(imCollectIndex).TextWidth("Current") - 15 'fgBoxInsetX
                                pbcCollect(imCollectIndex).Print "Current"
                            Case 4
                                pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW - pbcCollect(imCollectIndex).TextWidth("30 Days") - 15 'fgBoxInsetX
                                pbcCollect(imCollectIndex).Print "30 Days"
                            Case 5
                                pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW - pbcCollect(imCollectIndex).TextWidth("60 Days") - 15 'fgBoxInsetX
                                pbcCollect(imCollectIndex).Print "60 Days"
                            Case 6
                                pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW - pbcCollect(imCollectIndex).TextWidth("90 Days") - 15 'fgBoxInsetX
                                pbcCollect(imCollectIndex).Print "90 Days"
                            Case 7
                                pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + tmTransCtrls(ilLoop).fBoxW - pbcCollect(imCollectIndex).TextWidth("120 Days +") - 15 'fgBoxInsetX
                                pbcCollect(imCollectIndex).Print "120 Days +"
                        End Select
                    Next ilLoop
                End If
                llTop = llTop + tmTransCtrls(imLBTransCtrls).fBoxH + 15
            Loop While llTop + tmTransCtrls(imLBTransCtrls).fBoxH + tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 30 < pbcCollect(imCollectIndex).height
            pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(1).fBoxX + 15  'fgBoxInsetX
            pbcCollect(imCollectIndex).CurrentY = llTop + 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
            pbcCollect(imCollectIndex).Print "Totals:"
            llTop = llTop + tmTransCtrls(imLBTransCtrls).fBoxH + 15
            pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(UBound(tmTransCtrls)).fBoxX + tmTransCtrls(UBound(tmTransCtrls)).fBoxW - 15, tmTransCtrls(imLBTransCtrls).fBoxH + 15), BLUE, B
            pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(UBound(tmTransCtrls)).fBoxX + tmTransCtrls(UBound(tmTransCtrls)).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTYELLOW, BF
        Case 9  ' Journal
            For ilLoop = imCheckDate To imTotalJournal Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imTotalDue) Or (ilLoop = imTotalJournal) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imCheckDate
                        pbcCollect(imCollectIndex).Print "Tran Date"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                    Case imTotalJournal
                        pbcCollect(imCollectIndex).Print "Total Journal"
                End Select
            Next ilLoop
        Case 10  ' Invoice/Invoice Adjustment
            For ilLoop = 3 To UBound(tmCtrls) Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case 3
                        pbcCollect(imCollectIndex).Print "Advertiser"
                    Case 4
                        pbcCollect(imCollectIndex).Print "Product"
                    Case 5
                        pbcCollect(imCollectIndex).Print "Salesperson"
                    Case 6
                        pbcCollect(imCollectIndex).Print "Invoice #"
                    Case 7
                        pbcCollect(imCollectIndex).Print "Reference Invoice #"
                    Case 8
                        pbcCollect(imCollectIndex).Print "Contract #"
                    Case 9
                        pbcCollect(imCollectIndex).Print "Billing Vehicle"
                    Case 10
                        pbcCollect(imCollectIndex).Print "Airing Vehicle"
                    Case 11
                        pbcCollect(imCollectIndex).Print "Package Line #"
                    Case 12
                        pbcCollect(imCollectIndex).Print "Transaction Date"
                    Case 13
                        pbcCollect(imCollectIndex).Print "Transaction Type"
                    Case 14
                        pbcCollect(imCollectIndex).Print "NTR Type"
                    Case 15
                        pbcCollect(imCollectIndex).Print "Tax"
                    Case 16
                        pbcCollect(imCollectIndex).Print "Gross Amount"
                    Case 17
                        pbcCollect(imCollectIndex).Print "Net Amount"
                    Case 18
                        pbcCollect(imCollectIndex).Print "Acquisition Cost"
                    Case 19
                        pbcCollect(imCollectIndex).Print "Sales Source/Participant"
                    Case 20
                        pbcCollect(imCollectIndex).Print "Season"
                    Case 21
                        pbcCollect(imCollectIndex).Print "Event"
                End Select
            Next ilLoop
            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                'Draw blank
                pbcCollect(imCollectIndex).Line (tmCtrls(5).fBoxX - 15, tmCtrls(21).fBoxY - 15)-Step(tmCtrls(5).fBoxW + 15, tmCtrls(21).fBoxH + 15), BLUE, B
            End If
        'Case 11 ' Restore history
        Case 12 ' Adjustment
            For ilLoop = imCheckDate To imTotalAdjGross Step 1
                pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX - 15, tmCtrls(ilLoop).fBoxY - 15)-Step(tmCtrls(ilLoop).fBoxW + 15, tmCtrls(ilLoop).fBoxH + 15), BLUE, B
                If (ilLoop = imTotalDue) Or (ilLoop = imTotalAppliedDue) Or (ilLoop = imTotalAdjGross) Then
                    pbcCollect(imCollectIndex).Line (tmCtrls(ilLoop).fBoxX, tmCtrls(ilLoop).fBoxY)-Step(tmCtrls(ilLoop).fBoxW - 15, tmCtrls(ilLoop).fBoxH - 15), LIGHTYELLOW, BF
                End If
                pbcCollect(imCollectIndex).CurrentX = tmCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                pbcCollect(imCollectIndex).CurrentY = tmCtrls(ilLoop).fBoxY - 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                Select Case ilLoop
                    Case imCheckDate
                        pbcCollect(imCollectIndex).Print "Tran Date"
                    Case imTotalDue
                        pbcCollect(imCollectIndex).Print "Total Due"
                    Case imTotalAppliedDue
                        pbcCollect(imCollectIndex).Print "Total Adj Net"
                    Case imTotalAdjGross
                        pbcCollect(imCollectIndex).Print "Total Adj"
                End Select
            Next ilLoop
    End Select
    If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
        pbcCollect(imCollectIndex).height = plcCollect.height - 2 * fgBevelY
        llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45
        Do
            pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(NET).fBoxX + tmTransCtrls(NET).fBoxW - 15, tmTransCtrls(imLBTransCtrls).fBoxH + 15), BLUE, B
            If llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45 Then
                pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(NET).fBoxX + tmTransCtrls(NET).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTYELLOW, BF
            Else
                If (imCollectIndex = 1) Or (imCollectIndex = 5) Or (imCollectIndex = 6) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
                    pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(NET).fBoxX + tmTransCtrls(NET).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTYELLOW, BF
                Else
                    pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(NET).fBoxX + tmTransCtrls(NET).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTBLUE, BF
                End If
            End If
'            pbcCollect(imCollectIndex).Line (tmTransCtrls(8).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(8).fBoxW + 15, tmTransCtrls(8).fBoxH + 15), BLUE, B
'            pbcCollect(imCollectIndex).Line (tmTransCtrls(9).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(9).fBoxW + 15, tmTransCtrls(9).fBoxH + 15), BLUE, B
'            pbcCollect(imCollectIndex).Line (tmTransCtrls(9).fBoxX, llTop)-Step(tmTransCtrls(9).fBoxW - 30, tmTransCtrls(9).fBoxH - 15), LIGHTYELLOW, BF
'            If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
'                pbcCollect(imCollectIndex).Line (tmTransCtrls(10).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(10).fBoxW + 15, tmTransCtrls(10).fBoxH + 15), BLUE, B
'            End If
'            If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
'                pbcCollect(imCollectIndex).Line (tmTransCtrls(11).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(11).fBoxW + 15, tmTransCtrls(11).fBoxH + 15), BLUE, B
'            End If
'            If (imCollectIndex = 9) Or (imCollectIndex = 12) Then
'                pbcCollect(imCollectIndex).Line (tmTransCtrls(12).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(12).fBoxW + 15, tmTransCtrls(12).fBoxH + 15), BLUE, B
'            End If
            pbcCollect(imCollectIndex).Line (tmTransCtrls(ASTERICK).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(ASTERICK).fBoxW + 15, tmTransCtrls(ASTERICK).fBoxH + 15), BLUE, B
            pbcCollect(imCollectIndex).Line (tmTransCtrls(AMNTDUE).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(AMNTDUE).fBoxW + 15, tmTransCtrls(AMNTDUE).fBoxH + 15), BLUE, B
            pbcCollect(imCollectIndex).Line (tmTransCtrls(AMNTDUE).fBoxX, llTop)-Step(tmTransCtrls(AMNTDUE).fBoxW - 30, tmTransCtrls(AMNTDUE).fBoxH - 15), LIGHTYELLOW, BF
            If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 4) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
                pbcCollect(imCollectIndex).Line (tmTransCtrls(AMNTPAID).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(AMNTPAID).fBoxW + 15, tmTransCtrls(AMNTPAID).fBoxH + 15), BLUE, B
            End If
            If (imCollectIndex = 1) Or (imCollectIndex = 2) Or (imCollectIndex = 3) Or (imCollectIndex = 9) Or (imCollectIndex = 12) Then
                pbcCollect(imCollectIndex).Line (tmTransCtrls(WRITEOFF).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(WRITEOFF).fBoxW + 15, tmTransCtrls(WRITEOFF).fBoxH + 15), BLUE, B
            End If
            If (imCollectIndex = 9) Or (imCollectIndex = 12) Then
                pbcCollect(imCollectIndex).Line (tmTransCtrls(COMMENT).fBoxX - 15, llTop - 15)-Step(tmTransCtrls(COMMENT).fBoxW + 15, tmTransCtrls(COMMENT).fBoxH + 15), BLUE, B
            End If
            If llTop = tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 45 Then
                If imCollectIndex = 1 Then
                    pbcCollect(imCollectIndex).Line (tmTransCtrls(imLBTransCtrls).fBoxX, llTop)-Step(tmTransCtrls(2).fBoxX + tmTransCtrls(2).fBoxW - 45, tmTransCtrls(imLBTransCtrls).fBoxH - 15), LIGHTBLUE, BF
                End If
                For ilLoop = imLBTransCtrls To UBound(tmTransCtrls) Step 1
                    pbcCollect(imCollectIndex).CurrentX = tmTransCtrls(ilLoop).fBoxX + 15  'fgBoxInsetX
                    pbcCollect(imCollectIndex).CurrentY = llTop + 15 '+ (llRow - 1) * (fgBoxGridH + 15) '+ fgBoxInsetY
                    Select Case ilLoop
                        Case 1
                            pbcCollect(imCollectIndex).Print "Name"
                        Case 2
                            pbcCollect(imCollectIndex).Print "Invoice #"
                        Case 3
                            pbcCollect(imCollectIndex).Print "Vehicle"
                        Case 4
                            If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) = EVENTREVENUE) Then
                                pbcCollect(imCollectIndex).Print "Event"
                            Else
                                pbcCollect(imCollectIndex).Print " "
                            End If
                        Case 5  '4
                            pbcCollect(imCollectIndex).Print "Contr #"
                        Case 6  '5
                            pbcCollect(imCollectIndex).Print "Tran Date"
                        Case 7  '6
                            pbcCollect(imCollectIndex).Print "Type"
                        Case 8  '7
                            pbcCollect(imCollectIndex).Print "Net"
                        Case 9  '8
                            pbcCollect(imCollectIndex).Print "*"
                        Case 10 '9
                            pbcCollect(imCollectIndex).Print "Due"
                        Case 11 '10
                            If (imCollectIndex = 4) Then
                                pbcCollect(imCollectIndex).Print "Reversal"
                            ElseIf (imCollectIndex = 9) Then
                                pbcCollect(imCollectIndex).Print "Journal"
                            ElseIf (imCollectIndex = 12) Then
                                pbcCollect(imCollectIndex).Print "Adj Net"
                            Else
                                pbcCollect(imCollectIndex).Print "Amt Paid"
                            End If
                        Case 12 '11
                            If (imCollectIndex = 9) Then
                                pbcCollect(imCollectIndex).Print "Type"
                            ElseIf (imCollectIndex = 12) Then
                                pbcCollect(imCollectIndex).Print "Adj Gross"
                            Else
                                pbcCollect(imCollectIndex).Print "Variance"
                            End If
                        Case 13 '12
                            pbcCollect(imCollectIndex).Print "C"
                    End Select
                Next ilLoop
            End If
            llTop = llTop + tmTransCtrls(imLBTransCtrls).fBoxH + 15
        Loop While llTop + tmTransCtrls(imLBTransCtrls).fBoxH + tmCtrls(1).fBoxY + tmCtrls(1).fBoxH + 30 < pbcCollect(imCollectIndex).height
    End If
    pbcCollect(imCollectIndex).FontSize = flFontSize
    pbcCollect(imCollectIndex).FontName = slFontName
    pbcCollect(imCollectIndex).FontSize = flFontSize
    pbcCollect(imCollectIndex).ForeColor = llColor
    pbcCollect(imCollectIndex).FontBold = True
    Exit Sub
mPaintCollectTitleErr:
    Exit Sub
End Sub
Private Sub mSeasonPop()
    Dim llStartDate As Long
    Dim slStartDate As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim llSeasonGhfCode As Long
    Dim ilVff As Integer
    Dim ilVef As Integer
    
    lbcSeason.Clear
    imISeasonListIndex = -1
    imIEventListIndex = -1
    lmISeasonGhfCode = -1
    lbcEvent.Clear
    ReDim tmSeasonInfo(0 To 0) As SEASONINFO
    If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) <> EVENTREVENUE) Then
        imTabMax = 19
        Exit Sub
    End If
    If imIAirVefCode <= 0 Then
        imTabMax = 19
        Exit Sub
    End If
    lbcSeason.Visible = False
    ilVef = gBinarySearchVef(imIAirVefCode)
    If ilVef <> -1 Then
        If tgMVef(ilVef).sType <> "G" Then
            imTabMax = 19
            Exit Sub
        End If
        imTabMax = 21
    Else
        Exit Sub
    End If
    tmGhfSrchKey1.iVefCode = imIAirVefCode
    ilRet = btrGetEqual(hmGhf, tmGhf, imGhfRecLen, tmGhfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)
    Do While (ilRet = BTRV_ERR_NONE) And (tmGhf.iVefCode = imIAirVefCode)
        gUnpackDateLong tmGhf.iSeasonStartDate(0), tmGhf.iSeasonStartDate(1), llStartDate
        slStartDate = Trim$(str$(llStartDate))
        Do While Len(slStartDate) < 6
            slStartDate = "0" & slStartDate
        Loop
        tmSeasonInfo(UBound(tmSeasonInfo)).sKey = slStartDate
        tmSeasonInfo(UBound(tmSeasonInfo)).sSeasonName = tmGhf.sSeasonName
        tmSeasonInfo(UBound(tmSeasonInfo)).lCode = tmGhf.lCode
        ReDim Preserve tmSeasonInfo(0 To UBound(tmSeasonInfo) + 1) As SEASONINFO
        ilRet = btrGetNext(hmGhf, tmGhf, imGhfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
    Loop
    If UBound(tmSeasonInfo) > 1 Then
        'Sort descending
        ArraySortTyp fnAV(tmSeasonInfo(), 0), UBound(tmSeasonInfo), 1, LenB(tmSeasonInfo(0)), 0, LenB(tmSeasonInfo(0).sKey), 0
    End If
    For ilLoop = 0 To UBound(tmSeasonInfo) - 1 Step 1
        lbcSeason.AddItem Trim$(tmSeasonInfo(ilLoop).sSeasonName)
        lbcSeason.ItemData(lbcSeason.NewIndex) = tmSeasonInfo(ilLoop).lCode
    Next ilLoop
    For ilVff = LBound(tgVff) To UBound(tgVff) Step 1
        If tgVff(ilVff).iVefCode = imIAirVefCode Then
            lmISeasonGhfCode = tgVff(ilVff).lSeasonGhfCode
            Exit For
        End If
    Next ilVff
    For ilLoop = 0 To lbcSeason.ListCount - 1 Step 1
        If lbcSeason.ItemData(ilLoop) = lmISeasonGhfCode Then
            lbcSeason.ListIndex = ilLoop
            Exit For
        End If
    Next ilLoop
End Sub

Private Sub mEventPop()
    Dim ilRet As Integer
    Dim ilGsf As Integer
    Dim slStr As String
    
    imIEventListIndex = -1
    lbcEvent.Clear
    If ((Asc(tgSaf(0).sFeatures2) And EVENTREVENUE) <> EVENTREVENUE) Then
        Exit Sub
    End If
    If imIAirVefCode <= 0 Then
        Exit Sub
    End If
    If lmISeasonGhfCode <= 0 Then
        Exit Sub
    End If
    
    ilRet = gGetGameDates(hmLcf, hmGhf, hmGsf, imIAirVefCode, tmTeam(), tmGsfInfo(), lmISeasonGhfCode)
    For ilGsf = LBound(tmGsfInfo) To UBound(tmGsfInfo) - 1 Step 1
        slStr = Trim$(str$(tmGsfInfo(ilGsf).iGameNo))
        slStr = slStr & " " & Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
        slStr = slStr & " " & Trim$(Left(tmGsfInfo(ilGsf).sVisitName, 4)) & "@" & Trim$(Left(tmGsfInfo(ilGsf).sHomeName, 4))
        lbcEvent.AddItem slStr
        lbcEvent.ItemData(lbcEvent.NewIndex) = ilGsf
    Next ilGsf
    lbcEvent.height = gListBoxHeight(lbcEvent.ListCount, 7)
End Sub

Private Sub mUpdateApfIfFullyPaid(blFromZeroBalance As Boolean, llInvoiceNo As Long)
    Dim ilRet As Integer
    Dim slNet As String
    Dim slAmount As String
    Dim slNowDate As String
    Dim llDate As Long
    Dim ilApf As Integer
    Dim blRvfFound As Boolean
    Dim tlRvf As RVF
    Dim hlPhf As Integer        'RVF or PHF file handle
    Dim FullyPaidDate As String
    Dim llFullyPaidDate As Long
    ReDim llApfCode(0 To 0) As Long
    
    If Not (Asc(tgSaf(0).sFeatures2) And PAYMENTONCOLLECTION) = PAYMENTONCOLLECTION Then 'Payment on Collection
        Exit Sub
    End If
    If llInvoiceNo <= 0 Then
        Exit Sub
    End If
    llFullyPaidDate = -1
    If Not blFromZeroBalance Then
        slAmount = ".00"
        tmRvfSrchKey5.lInvNo = llInvoiceNo
        ilRet = btrGetEqual(hmRvf, tlRvf, imRvfRecLen, tmRvfSrchKey5, 5, BTRV_LOCK_NONE, SETFORREADONLY)
        Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.lInvNo = llInvoiceNo)
            If (tlRvf.sCashTrade <> "T") Or (tgSpf.sRUseTrade = "Y") Then
                gPDNToStr tlRvf.sNet, 2, slNet
                slAmount = gAddStr(slAmount, slNet)
                If tlRvf.sTranType = "PI" Then
                    gUnpackDateLong tlRvf.iTranDate(0), tlRvf.iTranDate(1), llDate
                    If llDate > llFullyPaidDate Then
                        llFullyPaidDate = llDate
                    End If
                End If
            End If
            ilRet = btrGetNext(hmRvf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
    Else
        slAmount = "1.00"
        blRvfFound = False
        tmRvfSrchKey5.lInvNo = llInvoiceNo
        ilRet = btrGetEqual(hmRvf, tlRvf, imRvfRecLen, tmRvfSrchKey5, 5, BTRV_LOCK_NONE, SETFORREADONLY)
        If (ilRet = BTRV_ERR_NONE) And (tlRvf.lInvNo = llInvoiceNo) Then
            blRvfFound = True
        Else
            hlPhf = CBtrvTable(TWOHANDLES)
            ilRet = btrOpen(hlPhf, "", sgDBPath & "PHF.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
            tmRvfSrchKey5.lInvNo = llInvoiceNo
            ilRet = btrGetEqual(hlPhf, tlRvf, imRvfRecLen, tmRvfSrchKey5, 5, BTRV_LOCK_NONE, SETFORREADONLY)
            Do While (ilRet = BTRV_ERR_NONE) And (tlRvf.lInvNo = llInvoiceNo)
                If (tlRvf.sCashTrade <> "T") Or (tgSpf.sRUseTrade = "Y") Then
                    If tlRvf.sTranType = "PI" Then
                        gUnpackDateLong tlRvf.iTranDate(0), tlRvf.iTranDate(1), llDate
                        If llDate > llFullyPaidDate Then
                            llFullyPaidDate = llDate
                        End If
                    End If
                End If
                ilRet = btrGetNext(hlPhf, tlRvf, imRvfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
            ilRet = btrClose(hlPhf)
            btrDestroy hlPhf
        End If
    End If
    If (gCompNumberStr(slAmount, ".00") = 0) Or ((blFromZeroBalance) And (Not blRvfFound)) Then
        tmApfSrchKey5.lCode = llInvoiceNo
        ilRet = btrGetEqual(hmApf, tmApf, imApfRecLen, tmApfSrchKey5, INDEXKEY5, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tmApf.lInvNo = llInvoiceNo)
            llApfCode(UBound(llApfCode)) = tmApf.lCode
            ReDim Preserve llApfCode(0 To UBound(llApfCode) + 1) As Long
            ilRet = btrGetNext(hmApf, tmApf, imApfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        slNowDate = Format$(gNow(), "m/d/yy")
        For ilApf = 0 To UBound(llApfCode) - 1 Step 1
            tmApfSrchKey0.lCode = llApfCode(ilApf)
            ilRet = btrGetEqual(hmApf, tmApf, imApfRecLen, tmApfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
            gUnpackDateLong tmApf.iFullyPaidDate(0), tmApf.iFullyPaidDate(1), llDate
            If llDate = gDateValue("1/1/1970") Then
                If llFullyPaidDate = -1 Then
                    gPackDate slNowDate, tmApf.iFullyPaidDate(0), tmApf.iFullyPaidDate(1)
                Else
                    gPackDateLong llFullyPaidDate, tmApf.iFullyPaidDate(0), tmApf.iFullyPaidDate(1)
                End If
                ilRet = btrUpdate(hmApf, tmApf, imApfRecLen)
            End If
        Next ilApf
    End If
End Sub

Private Sub mCreateCompressShow(llRowNo As Long, ilExpandOrCompress As Integer)
    Dim slNetTotal As String
    Dim llRow As Long
    Dim ilCol As Integer
    Dim llMapRow As Long
    Dim llAddRow As Long
    Dim llStartRow As Long
    Dim slPrevVehName As String
    Dim blVehNameChg As Boolean
    Dim blVehicleDefined As Boolean
    Dim blTotalDueDefined As Boolean
    
    'If llRowNo = -1 Then
        ReDim tmRowInfo(0 To 1) As ROWINFO
    'End If
    ReDim smCompressedShow(0 To imColCount, 0 To 1) As String * 40  'reinitialize transaction fields array
    If (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        mSetScrollBarMax False
        Exit Sub
    End If
    If imDisplayMode = 0 Then
        mSetScrollBarMax False
        Exit Sub
    End If
    If imCollectIndex = 8 Then
        llMapRow = 1
        llStartRow = LBONE  'LBound(smSave, 2)
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            If Trim$(smShow(2, llRow)) <> "" Then
                If (llRowNo = llRow) And (ilExpandOrCompress = 0) Then
                    For llAddRow = llStartRow To llRow Step 1
                        For ilCol = LBONE To imColCount Step 1
                            smCompressedShow(ilCol, llMapRow) = smShow(ilCol, llAddRow)
                        Next ilCol
                        ReDim Preserve smCompressedShow(0 To imColCount, 0 To llMapRow + 1) As String * 40
                        tmRowInfo(llMapRow).lMapRowNo = llAddRow
                        tmRowInfo(llMapRow).iRowStatus = 2
                        If (llAddRow = llRow) And (llAddRow <> llStartRow) Then
                            tmRowInfo(llMapRow).iRowStatus = 0
                        End If
                        ReDim Preserve tmRowInfo(0 To llMapRow + 1) As ROWINFO
                        llMapRow = llMapRow + 1
                    Next llAddRow
                Else
                    For ilCol = LBONE To imColCount Step 1
                        smCompressedShow(ilCol, llMapRow) = smShow(ilCol, llRow)
                    Next ilCol
                    ReDim Preserve smCompressedShow(0 To imColCount, 0 To llMapRow + 1) As String * 40
                    tmRowInfo(llMapRow).lMapRowNo = llRow
                    tmRowInfo(llMapRow).iRowStatus = 1
                    If llRow = llStartRow Then
                        tmRowInfo(llMapRow).iRowStatus = 2
                    End If
                    ReDim Preserve tmRowInfo(0 To llMapRow + 1) As ROWINFO
                    llMapRow = llMapRow + 1
                End If
                llStartRow = llRow + 1
            Else
            End If
        Next llRow
    Else
        llMapRow = 1
        slNetTotal = "0.00"
        llStartRow = LBONE  'LBound(smSave, 2)
        blVehNameChg = False
        If imPostBy <> 2 Then
            slPrevVehName = Trim$(smSave(10, llStartRow))
        Else
            slPrevVehName = Trim$(smSave(11, llStartRow))
        End If
        'For llRow = LBound(smSave, 2) To lmRowCountMax Step 1
        For llRow = LBONE To lmRowCountMax Step 1
            blVehicleDefined = True
            If imPostBy <> 2 Then
                If Trim$(smSave(10, llRow)) = "" Then
                   blVehicleDefined = False
                End If
            Else
                If Trim$(smSave(11, llRow)) = "" Then
                    blVehicleDefined = False
                End If
            End If
            If (Trim$(smSave(19, llRow)) <> "") Or (Not blVehicleDefined) Then
                If (llRowNo = llRow) And (ilExpandOrCompress = 0) Then
                    For llAddRow = llStartRow To llRow Step 1
                        For ilCol = LBONE To imColCount Step 1
                            smCompressedShow(ilCol, llMapRow) = smShow(ilCol, llAddRow)
                        Next ilCol
                        ReDim Preserve smCompressedShow(0 To imColCount, 0 To llMapRow + 1) As String * 40
                        tmRowInfo(llMapRow).lMapRowNo = llAddRow
                        tmRowInfo(llMapRow).iRowStatus = 2
                        If (llAddRow = llRow) And (llAddRow <> llStartRow) Then
                            tmRowInfo(llMapRow).iRowStatus = 0
                        End If
                        ReDim Preserve tmRowInfo(0 To llMapRow + 1) As ROWINFO
                        llMapRow = llMapRow + 1
                    Next llAddRow
                Else
                    For ilCol = LBONE To imColCount Step 1
                        smCompressedShow(ilCol, llMapRow) = smShow(ilCol, llRow)
                    Next ilCol
                    ilCol = NET
                    slNetTotal = gAddStr(smSave(4, llRow), slNetTotal)
                    gFormatStr slNetTotal, FMTCOMMA + FMTNEGATBACK + FMTLEAVEBLANK, 2, slNetTotal
                    gSetShow pbcCollect(imCollectIndex), slNetTotal, tmTransCtrls(ilCol)
                    smCompressedShow(ilCol, llMapRow) = tmTransCtrls(ilCol).sShow
                    If blVehNameChg Then
                        ilCol = VEHICLENAME
                        gSetShow pbcCollect(imCollectIndex), "Multi-Vehicles", tmTransCtrls(ilCol)
                        smCompressedShow(ilCol, llMapRow) = tmTransCtrls(ilCol).sShow
                    End If
                    ReDim Preserve smCompressedShow(0 To imColCount, 0 To llMapRow + 1) As String * 40
                    tmRowInfo(llMapRow).lMapRowNo = llRow
                    tmRowInfo(llMapRow).iRowStatus = 1
                    If llRow = llStartRow Then
                        tmRowInfo(llMapRow).iRowStatus = 2
                    End If
                    ReDim Preserve tmRowInfo(0 To llMapRow + 1) As ROWINFO
                    llMapRow = llMapRow + 1
                    blVehNameChg = False
                End If
                slNetTotal = "0.00"
                llStartRow = llRow + 1
                If llStartRow <= lmRowCountMax Then
                    If imPostBy <> 2 Then
                        slPrevVehName = Trim$(smSave(10, llStartRow))
                    Else
                        slPrevVehName = Trim$(smSave(11, llStartRow))
                    End If
                End If
            Else
                slNetTotal = gAddStr(smSave(4, llRow), slNetTotal)
                If imPostBy <> 2 Then
                    If slPrevVehName <> Trim$(smSave(10, llRow)) Then
                        blVehNameChg = True
                    End If
                Else
                    If slPrevVehName <> Trim$(smSave(11, llRow)) Then
                        blVehNameChg = True
                    End If
                End If
            End If
        Next llRow
    End If
    mSetScrollBarMax True
End Sub

Private Function mGetRowNo(llMapRowNo As Long) As Long

    mGetRowNo = llMapRowNo
    If (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        Exit Function
    End If
    If imDisplayMode = 0 Then
        Exit Function
    End If
    mGetRowNo = tmRowInfo(llMapRowNo).lMapRowNo
End Function
Private Sub mSetCompressShow(llRowNo As Long, ilBoxNo As Integer)
    Dim llRow As Long
    smShow(ilBoxNo, llRowNo) = tmTransCtrls(ilBoxNo).sShow
    If (imCollectIndex = 0) Or ((imCollectIndex = 8) And (imAgeingShow = 0)) Or (imCollectIndex = 10) Or (imCollectIndex = 11) Then
        Exit Sub
    End If
    If imDisplayMode = 0 Then
        Exit Sub
    End If
    For llRow = LBONE To UBound(tmRowInfo) - 1 Step 1
        If tmRowInfo(llRow).lMapRowNo = llRowNo Then
            smCompressedShow(ilBoxNo, llRow) = tmTransCtrls(ilBoxNo).sShow
            Exit For
        End If
    Next llRow
End Sub

Private Sub mSetScrollBarMax(blUseCompress As Boolean)
    If Not blUseCompress Then
        If UBound(smShow, 2) - 1 <= vbcCollect.LargeChange Then
            vbcCollect.Max = LBONE  'LBound(smShow, 2)
        Else
            If CLng(UBound(smShow, 2)) - vbcCollect.LargeChange < 32767 Then
                vbcCollect.Max = CLng(UBound(smShow, 2)) - vbcCollect.LargeChange
            Else
                If (imType = 1) Or (imType = 3) Or (imType = 5) Or (imType = 7) Then
                    MsgBox "Reduce the Date range as Only the first 32767 Collection records are shown", vbInformation + vbOKOnly, "Limit Reached"
                Else
                    MsgBox "Run Zero Purge as Only the first 32767 Collection records are shown", vbInformation + vbOKOnly, "Limit Reached"
                End If
                vbcCollect.Max = 32767
            End If
        End If
    Else
        If UBound(smCompressedShow, 2) - 1 <= vbcCollect.LargeChange Then
            vbcCollect.Max = LBONE  'LBound(smCompressedShow, 2)
        Else
            If CLng(UBound(smCompressedShow, 2)) - vbcCollect.LargeChange < 32767 Then
                vbcCollect.Max = CLng(UBound(smCompressedShow, 2)) - vbcCollect.LargeChange
            Else
                If (imType = 1) Or (imType = 3) Or (imType = 5) Or (imType = 7) Then
                    MsgBox "Reduce the Date range as Only the first 32767 Collection records are shown", vbInformation + vbOKOnly, "Limit Reached"
                Else
                    MsgBox "Run Zero Purge as Only the first 32767 Collection records are shown", vbInformation + vbOKOnly, "Limit Reached"
                End If
                vbcCollect.Max = 32767
            End If
        End If
    End If
End Sub

Private Sub mObtainVehicleName(ilCode As Integer, slName As String, slType As String)
    Dim ilLoop As Integer
    
    slName = ""
    slType = ""
    ilLoop = gBinarySearchVef(ilCode)
    If ilLoop <> -1 Then
        slName = Trim$(tgMVef(ilLoop).sName)
        slType = Trim$(tgMVef(ilLoop).sType)
        Exit Sub
    End If
End Sub
Sub mObtainSalespersonName(ilCode As Integer, slName As String)
'
'   gObtainSalespersonName ilCode, slName
'   Where:
'       ilCode (I)- Salesperson code #
'       slName (O) - name of the Salesperson (last name, first name) or combo
'

    Dim ilRet As Integer

    ilRet = gBinarySearchSlf(ilCode)
    If ilRet <> -1 Then
        slName = Trim$(tgMSlf(ilRet).sLastName) & ", " & Trim$(tgMSlf(ilRet).sFirstName)
    Else
        slName = ""
    End If
    Exit Sub
End Sub
Private Sub mWUWD_Counts(slCheckNo As String, llInvNo As Long, ilWUCount As Integer, ilWDCount As Integer)
    Dim llTran As Long
    Dim ilRet As Integer
    Dim slStr As String
    Dim llRecPos As Long
    Dim slCode As String
    Dim ilPos As Integer
    Dim tlVehRvf As RVF
    
    ilWUCount = 0
    ilWDCount = 0
    For llTran = 0 To UBound(tgTransactionCode) - 1 Step 1
        ilRet = gParseItem(tgTransactionCode(llTran).sKey, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            llRecPos = Val(slCode)
            ilRet = btrGetDirect(hmRvf, tlVehRvf, imRvfRecLen, llRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet = BTRV_ERR_NONE Then
                If (UCase$(Trim$(tlVehRvf.sCheckNo)) = UCase$(Trim$((slCheckNo)))) And (llInvNo = tlVehRvf.lInvNo) And ((tlVehRvf.sTranType = "WU") Or (tlVehRvf.sTranType = "WD")) Then
                    If tlVehRvf.sTranType = "WU" Then
                        ilWUCount = ilWUCount + 1
                    ElseIf tlVehRvf.sTranType = "WD" Then
                        ilWDCount = ilWDCount + 1
                    End If
                End If
            End If
        End If
    Next llTran
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mFillCommentBox                 *
'*                                                     *
'*             Created:29/03/21       By:L. LeVine     *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Fill pbcComment box with       *
'*                      Comment                        *
'*                                                     *
'*******************************************************
Private Sub mFillCommentBox()
  Dim llLoop As Long
  Dim llUpper As Long
  'Dim sResult As String
  llUpper = UBound(sComments)
  'sResult = Join(sComments, "\n")
  mSetVbcCommentBoxRatio
  pbcCommentBox.Cls
  llLoop = vbcCommentBox.Value
  Do While pbcCommentBox.CurrentY < pbcCommentBox.ScaleHeight
    
    If llUpper >= llLoop + 1 Then
        llLoop = llLoop + 1
        pbcCommentBox.Print sComments(llLoop)
    Else
        Exit Do
    End If
  Loop
End Sub

Private Sub vbcCommentBox_Change()
  mFillCommentBox
End Sub

Private Sub vbcCommentBox_Scroll()
  mFillCommentBox
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetVbcCommentBoxRatio          *
'*                                                     *
'*             Created:29/03/21       By:L. LeVine     *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set vbcCommentBox max value    *
'*                                                     *
'*******************************************************
Private Sub mSetVbcCommentBoxRatio()
  Dim llScaleRatio As Long
  Dim llUpper As Long
  llUpper = UBound(sComments)
  llScaleRatio = pbcCommentBox.ScaleHeight \ pbcCommentBox.TextHeight("Wj")
  If llUpper > llScaleRatio Then
    vbcCommentBox.Enabled = True
    vbcCommentBox.Max = llUpper - llScaleRatio
  Else
    vbcCommentBox.Enabled = False
    vbcCommentBox.Max = 0
  End If
End Sub

Public Sub mBreakText(sText As String)
    Dim X As Integer
    Dim llComment As Long
    llComment = UBound(sComments)
    If pbcCommentBox.TextWidth(sText) > pbcCommentBox.ScaleWidth Then
        X = InStr(1, StrReverse(sText), " ")
        While Not X = 0
            If pbcCommentBox.TextWidth(Left(sText, Len(sText) - X)) < pbcCommentBox.ScaleWidth Then
                llComment = llComment + 1
                ReDim Preserve sComments(llComment)
                sComments(llComment) = Left(sText, Len(sText) - X)
                mBreakText (right(sText, X))
                X = 0
            Else
                X = InStr(X + 1, StrReverse(sText), " ")
            End If
        Wend
    Else
        llComment = llComment + 1
        ReDim Preserve sComments(llComment)
        sComments(llComment) = Trim$(sText)
    End If

End Sub
