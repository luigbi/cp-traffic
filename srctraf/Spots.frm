VERSION 5.00
Object = "{0ECD9B60-23AA-11D0-B351-00A0C9055D8E}#6.0#0"; "MSHFLXGD.OCX"
Begin VB.Form Spots 
   Appearance      =   0  'Flat
   BorderStyle     =   3  'Fixed Dialog
   ClientHeight    =   6195
   ClientLeft      =   1065
   ClientTop       =   1875
   ClientWidth     =   9495
   ClipControls    =   0   'False
   ControlBox      =   0   'False
   BeginProperty Font 
      Name            =   "Arial"
      Size            =   8.25
      Charset         =   0
      Weight          =   700
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   ForeColor       =   &H80000008&
   LinkMode        =   1  'Source
   LinkTopic       =   "DoneMsg"
   MaxButton       =   0   'False
   MDIChild        =   -1  'True
   MinButton       =   0   'False
   PaletteMode     =   1  'UseZOrder
   ScaleHeight     =   6195
   ScaleWidth      =   9495
   Begin VB.CommandButton cmcNote 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   9270
      Picture         =   "Spots.frx":0000
      TabIndex        =   36
      TabStop         =   0   'False
      Top             =   3675
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.TextBox edcNote 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   8565
      TabIndex        =   35
      Top             =   3660
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.Timer tmcSetShow 
      Enabled         =   0   'False
      Interval        =   2000
      Left            =   9285
      Top             =   4335
   End
   Begin VB.PictureBox pbcKey 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   5730
      Left            =   180
      Picture         =   "Spots.frx":00FA
      ScaleHeight     =   5700
      ScaleWidth      =   8760
      TabIndex        =   101
      TabStop         =   0   'False
      Top             =   5325
      Visible         =   0   'False
      Width           =   8795
   End
   Begin VB.ListBox lbcDW 
      Appearance      =   0  'Flat
      Height          =   660
      ItemData        =   "Spots.frx":A1554
      Left            =   750
      List            =   "Spots.frx":A1556
      TabIndex        =   144
      TabStop         =   0   'False
      Top             =   1350
      Visible         =   0   'False
      Width           =   1800
   End
   Begin VB.TextBox edcDW 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   690
      MaxLength       =   20
      TabIndex        =   3
      Top             =   1140
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.CommandButton cmcDW 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1965
      Picture         =   "Spots.frx":A1558
      TabIndex        =   4
      TabStop         =   0   'False
      Top             =   1140
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.PictureBox pbcMissedType 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      ForeColor       =   &H80000008&
      Height          =   240
      Left            =   3345
      ScaleHeight     =   210
      ScaleWidth      =   2265
      TabIndex        =   140
      Top             =   1530
      Width           =   2295
      Begin VB.OptionButton rbcMissedType 
         BackColor       =   &H00FF0000&
         Caption         =   "All"
         ForeColor       =   &H8000000E&
         Height          =   210
         Index           =   1
         Left            =   1695
         TabIndex        =   143
         Top             =   0
         Width           =   525
      End
      Begin VB.OptionButton rbcMissedType 
         BackColor       =   &H00FF0000&
         Caption         =   "Current"
         ForeColor       =   &H8000000E&
         Height          =   210
         Index           =   0
         Left            =   705
         TabIndex        =   142
         Top             =   0
         Value           =   -1  'True
         Width           =   990
      End
      Begin VB.Label lacMissedType 
         BackColor       =   &H00FF0000&
         BackStyle       =   0  'Transparent
         Caption         =   "Vehicle"
         ForeColor       =   &H8000000E&
         Height          =   225
         Left            =   15
         TabIndex        =   141
         Top             =   0
         Width           =   675
      End
   End
   Begin VB.ComboBox cbcSeason 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   315
      Left            =   645
      TabIndex        =   1
      Top             =   345
      Visible         =   0   'False
      Width           =   3045
   End
   Begin VB.ListBox lbcGameNo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   3
      ItemData        =   "Spots.frx":A1652
      Left            =   810
      List            =   "Spots.frx":A1654
      TabIndex        =   33
      TabStop         =   0   'False
      Top             =   3510
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.ListBox lbcGameNo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   2
      ItemData        =   "Spots.frx":A1656
      Left            =   735
      List            =   "Spots.frx":A1658
      TabIndex        =   32
      TabStop         =   0   'False
      Top             =   3375
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.ListBox lbcGameNo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      ItemData        =   "Spots.frx":A165A
      Left            =   645
      List            =   "Spots.frx":A165C
      TabIndex        =   31
      TabStop         =   0   'False
      Top             =   3270
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.TextBox edcMCReason 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   1785
      MaxLength       =   20
      TabIndex        =   22
      Top             =   1935
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.CommandButton cmcMCReason 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   3045
      Picture         =   "Spots.frx":A165E
      TabIndex        =   23
      TabStop         =   0   'False
      Top             =   1935
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.ListBox lbcMCReason 
      Appearance      =   0  'Flat
      Height          =   1080
      ItemData        =   "Spots.frx":A1758
      Left            =   1545
      List            =   "Spots.frx":A175A
      TabIndex        =   24
      TabStop         =   0   'False
      Top             =   1680
      Visible         =   0   'False
      Width           =   1800
   End
   Begin VB.PictureBox pbcInitCover 
      Height          =   6105
      Left            =   8970
      ScaleHeight     =   6045
      ScaleWidth      =   9315
      TabIndex        =   138
      Top             =   5715
      Width           =   9375
   End
   Begin VB.CommandButton cmcSpotAction 
      Appearance      =   0  'Flat
      Caption         =   "&Action"
      Height          =   270
      Left            =   8745
      TabIndex        =   137
      Top             =   75
      Width           =   690
   End
   Begin VB.ListBox lbcMore 
      Appearance      =   0  'Flat
      Height          =   1080
      ItemData        =   "Spots.frx":A175C
      Left            =   855
      List            =   "Spots.frx":A175E
      TabIndex        =   136
      TabStop         =   0   'False
      Top             =   405
      Visible         =   0   'False
      Width           =   1800
   End
   Begin VB.TextBox edcMore 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   765
      MaxLength       =   20
      TabIndex        =   135
      TabStop         =   0   'False
      Top             =   285
      Visible         =   0   'False
      Width           =   1635
   End
   Begin VB.CommandButton cmcMore 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   2400
      Picture         =   "Spots.frx":A1760
      TabIndex        =   134
      TabStop         =   0   'False
      Top             =   300
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.ListBox lbcMkt 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Spots.frx":A185A
      Left            =   6885
      List            =   "Spots.frx":A185C
      MultiSelect     =   2  'Extended
      TabIndex        =   133
      Top             =   4800
      Visible         =   0   'False
      Width           =   1290
   End
   Begin VB.ListBox lbcGameList 
      Appearance      =   0  'Flat
      Height          =   240
      ItemData        =   "Spots.frx":A185E
      Left            =   1695
      List            =   "Spots.frx":A1860
      TabIndex        =   132
      TabStop         =   0   'False
      Top             =   2025
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.ListBox lbcGameNo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      ItemData        =   "Spots.frx":A1862
      Left            =   525
      List            =   "Spots.frx":A1864
      TabIndex        =   30
      TabStop         =   0   'False
      Top             =   3135
      Visible         =   0   'False
      Width           =   2760
   End
   Begin VB.TextBox edcMissedLog2 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   3375
      MaxLength       =   20
      TabIndex        =   20
      Top             =   1125
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.CommandButton cmcMissedLog2 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   4650
      Picture         =   "Spots.frx":A1866
      TabIndex        =   21
      TabStop         =   0   'False
      Top             =   1125
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.CommandButton cmcLog2Type 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   3675
      Picture         =   "Spots.frx":A1960
      TabIndex        =   19
      TabStop         =   0   'False
      Top             =   930
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.TextBox edcLog2Type 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   2160
      MaxLength       =   20
      TabIndex        =   18
      TabStop         =   0   'False
      Top             =   930
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.PictureBox pbcTab 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "Times New Roman"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   135
      Left            =   0
      ScaleHeight     =   135
      ScaleWidth      =   30
      TabIndex        =   37
      Top             =   990
      Width           =   30
   End
   Begin VB.PictureBox pbcPrice 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      FontTransparent =   0   'False
      ForeColor       =   &H00FFFFFF&
      Height          =   180
      Left            =   8400
      ScaleHeight     =   180
      ScaleWidth      =   375
      TabIndex        =   13
      TabStop         =   0   'False
      Top             =   450
      Visible         =   0   'False
      Width           =   375
   End
   Begin VB.TextBox edcMissedType 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   4350
      MaxLength       =   20
      TabIndex        =   7
      TabStop         =   0   'False
      Top             =   1035
      Visible         =   0   'False
      Width           =   1485
   End
   Begin VB.CommandButton cmcMissedType 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   5850
      Picture         =   "Spots.frx":A1A5A
      TabIndex        =   8
      TabStop         =   0   'False
      Top             =   1035
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.CommandButton cmcMissedDt 
      Appearance      =   0  'Flat
      Caption         =   "t"
      BeginProperty Font 
         Name            =   "Monotype Sorts"
         Size            =   5.25
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   5295
      Picture         =   "Spots.frx":A1B54
      TabIndex        =   10
      TabStop         =   0   'False
      Top             =   465
      Visible         =   0   'False
      Width           =   195
   End
   Begin VB.TextBox edcMissedDt 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   210
      Left            =   4020
      MaxLength       =   20
      TabIndex        =   9
      Top             =   465
      Visible         =   0   'False
      Width           =   1275
   End
   Begin VB.PictureBox pbcToggleRot 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      FontTransparent =   0   'False
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   5190
      ScaleHeight     =   210
      ScaleWidth      =   1305
      TabIndex        =   11
      TabStop         =   0   'False
      Top             =   150
      Visible         =   0   'False
      Width           =   1305
   End
   Begin VB.PictureBox pbcToggleDates 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   210
      Left            =   5445
      ScaleHeight     =   210
      ScaleWidth      =   885
      TabIndex        =   12
      Top             =   150
      Visible         =   0   'False
      Width           =   885
   End
   Begin VB.PictureBox pbcHighlight 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      FontTransparent =   0   'False
      ForeColor       =   &H00FFFFFF&
      Height          =   180
      Left            =   900
      ScaleHeight     =   180
      ScaleWidth      =   1050
      TabIndex        =   5
      TabStop         =   0   'False
      Top             =   90
      Visible         =   0   'False
      Width           =   1050
   End
   Begin VB.Timer tmcShowForm 
      Enabled         =   0   'False
      Interval        =   200
      Left            =   8220
      Top             =   4995
   End
   Begin VB.PictureBox pbcReason 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00FFFFFF&
      Height          =   180
      Left            =   2130
      ScaleHeight     =   180
      ScaleWidth      =   1380
      TabIndex        =   6
      TabStop         =   0   'False
      Top             =   75
      Visible         =   0   'False
      Width           =   1380
   End
   Begin VB.PictureBox pbcDW 
      Appearance      =   0  'Flat
      BackColor       =   &H00FF0000&
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      FontTransparent =   0   'False
      ForeColor       =   &H00FFFFFF&
      Height          =   180
      Left            =   3300
      ScaleHeight     =   180
      ScaleWidth      =   645
      TabIndex        =   2
      TabStop         =   0   'False
      Top             =   60
      Visible         =   0   'False
      Width           =   645
   End
   Begin VB.PictureBox pbcReschd 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF80&
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1230
      Left            =   9000
      ScaleHeight     =   1200
      ScaleWidth      =   3825
      TabIndex        =   120
      Top             =   1785
      Visible         =   0   'False
      Width           =   3855
   End
   Begin VB.Timer tmcExtra 
      Enabled         =   0   'False
      Interval        =   10
      Left            =   5760
      Top             =   5505
   End
   Begin VB.Timer tmcDblClick 
      Enabled         =   0   'False
      Interval        =   1000
      Left            =   6690
      Top             =   5460
   End
   Begin VB.CommandButton cmcMGs 
      Appearance      =   0  'Flat
      Caption         =   "&Move"
      Height          =   270
      Left            =   8040
      TabIndex        =   60
      Top             =   75
      Width           =   690
   End
   Begin VB.CommandButton cmcWeeks 
      Appearance      =   0  'Flat
      Caption         =   "&Weeks"
      Height          =   270
      Left            =   7185
      TabIndex        =   59
      Top             =   75
      Width           =   840
   End
   Begin VB.PictureBox plcCalendar 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1770
      Left            =   6090
      ScaleHeight     =   1740
      ScaleWidth      =   1965
      TabIndex        =   110
      TabStop         =   0   'False
      Top             =   2865
      Visible         =   0   'False
      Width           =   1995
      Begin VB.PictureBox pbcCalendar 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ClipControls    =   0   'False
         ForeColor       =   &H00FF0000&
         Height          =   1440
         Left            =   45
         Picture         =   "Spots.frx":A1C4E
         ScaleHeight     =   1410
         ScaleWidth      =   1845
         TabIndex        =   113
         TabStop         =   0   'False
         Top             =   255
         Width           =   1875
         Begin VB.Label lacDate 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FF0000&
            BorderStyle     =   1  'Fixed Single
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00FFFFFF&
            Height          =   240
            Left            =   510
            TabIndex        =   117
            Top             =   600
            Visible         =   0   'False
            Width           =   300
         End
      End
      Begin VB.CommandButton cmcCalDn 
         Appearance      =   0  'Flat
         Caption         =   "s"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   8.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   225
         Left            =   45
         TabIndex        =   112
         TabStop         =   0   'False
         Top             =   45
         Width           =   285
      End
      Begin VB.CommandButton cmcCalUp 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   8.25
            Charset         =   2
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   225
         Left            =   1635
         TabIndex        =   111
         TabStop         =   0   'False
         Top             =   45
         Width           =   285
      End
      Begin VB.Label lacCalName 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   210
         Left            =   330
         TabIndex        =   114
         Top             =   30
         Width           =   1305
      End
   End
   Begin VB.ListBox lbcPackageInfo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   1
      Left            =   8775
      Sorted          =   -1  'True
      TabIndex        =   106
      TabStop         =   0   'False
      Top             =   1650
      Visible         =   0   'False
      Width           =   2220
   End
   Begin VB.ListBox lbcPackageInfo 
      Appearance      =   0  'Flat
      Height          =   240
      Index           =   0
      Left            =   1965
      Sorted          =   -1  'True
      TabIndex        =   103
      TabStop         =   0   'False
      Top             =   1185
      Visible         =   0   'False
      Width           =   2220
   End
   Begin VB.PictureBox pbcSpotInfo 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1065
      Index           =   1
      Left            =   2355
      Picture         =   "Spots.frx":A4A68
      ScaleHeight     =   1065
      ScaleWidth      =   4530
      TabIndex        =   105
      TabStop         =   0   'False
      Top             =   2235
      Visible         =   0   'False
      Width           =   4530
   End
   Begin VB.PictureBox pbcSpotInfo 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   1050
      Index           =   0
      Left            =   5850
      Picture         =   "Spots.frx":B479A
      ScaleHeight     =   1050
      ScaleWidth      =   4530
      TabIndex        =   102
      TabStop         =   0   'False
      Top             =   1665
      Visible         =   0   'False
      Width           =   4530
   End
   Begin VB.PictureBox plcConflictInfo 
      Appearance      =   0  'Flat
      BackColor       =   &H00C0FFC0&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   1230
      Left            =   480
      ScaleHeight     =   1200
      ScaleWidth      =   8940
      TabIndex        =   100
      TabStop         =   0   'False
      Top             =   1665
      Visible         =   0   'False
      Width           =   8970
      Begin VB.Label lacComment 
         Appearance      =   0  'Flat
         BackColor       =   &H0080FFFF&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   975
         Left            =   30
         TabIndex        =   115
         Top             =   210
         Width           =   8880
      End
   End
   Begin VB.ListBox lbcAdMdType 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   3825
      TabIndex        =   52
      TabStop         =   0   'False
      Top             =   4470
      Visible         =   0   'False
      Width           =   1695
   End
   Begin VB.ListBox lbcLog2Type 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   8745
      TabIndex        =   76
      TabStop         =   0   'False
      Top             =   1590
      Visible         =   0   'False
      Width           =   2340
   End
   Begin VB.ListBox lbcCntr 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   1125
      TabIndex        =   44
      TabStop         =   0   'False
      Top             =   4125
      Visible         =   0   'False
      Width           =   4020
   End
   Begin VB.PictureBox pbcClickFocus 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   165
      Left            =   -120
      ScaleHeight     =   165
      ScaleWidth      =   135
      TabIndex        =   45
      TabStop         =   0   'False
      Top             =   615
      Width           =   135
   End
   Begin VB.CommandButton cmcReSchd 
      Appearance      =   0  'Flat
      Caption         =   "&Schd"
      Height          =   270
      Left            =   5145
      TabIndex        =   56
      Top             =   75
      Width           =   675
   End
   Begin VB.CommandButton cmcLock 
      Appearance      =   0  'Flat
      Caption         =   "&Lock"
      Height          =   270
      Left            =   4425
      TabIndex        =   55
      Top             =   75
      Visible         =   0   'False
      Width           =   705
   End
   Begin VB.CommandButton cmcDone 
      Appearance      =   0  'Flat
      Caption         =   "&Done"
      Height          =   270
      Left            =   3720
      TabIndex        =   54
      Top             =   75
      Width           =   690
   End
   Begin VB.ListBox lbcAdvt 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   4815
      TabIndex        =   48
      TabStop         =   0   'False
      Top             =   2730
      Visible         =   0   'False
      Width           =   2580
   End
   Begin VB.ListBox lbcRateCard 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5220
      TabIndex        =   72
      TabStop         =   0   'False
      Top             =   2430
      Visible         =   0   'False
      Width           =   2220
   End
   Begin VB.ListBox lbcAdMdManSch 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   870
      TabIndex        =   97
      TabStop         =   0   'False
      Top             =   2565
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.ListBox lbcL2ManSch 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5745
      TabIndex        =   96
      TabStop         =   0   'False
      Top             =   3915
      Visible         =   0   'False
      Width           =   2685
   End
   Begin VB.Timer tmcScroll 
      Enabled         =   0   'False
      Interval        =   1000
      Left            =   8115
      Top             =   5550
   End
   Begin VB.Timer tmcDrag 
      Enabled         =   0   'False
      Interval        =   1000
      Left            =   7320
      Top             =   5385
   End
   Begin VB.Timer tmcClick 
      Interval        =   2000
      Left            =   7365
      Top             =   4470
   End
   Begin VB.CommandButton cmcRectify 
      Appearance      =   0  'Flat
      Caption         =   "Rec&tify"
      Height          =   270
      Left            =   6420
      TabIndex        =   58
      Top             =   75
      Width           =   765
   End
   Begin VB.ListBox lbcManSchSpotSort 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   7185
      Sorted          =   -1  'True
      TabIndex        =   98
      TabStop         =   0   'False
      Top             =   -120
      Visible         =   0   'False
      Width           =   1365
   End
   Begin VB.ListBox lbcCntrCode 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   7065
      Sorted          =   -1  'True
      TabIndex        =   46
      Top             =   -90
      Visible         =   0   'False
      Width           =   1365
   End
   Begin VB.ListBox lbcLnCode 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6975
      Sorted          =   -1  'True
      TabIndex        =   47
      Top             =   -120
      Visible         =   0   'False
      Width           =   1365
   End
   Begin VB.CommandButton cmcFill 
      Appearance      =   0  'Flat
      Caption         =   "&Fill"
      Height          =   270
      Left            =   5820
      TabIndex        =   57
      Top             =   75
      Width           =   600
   End
   Begin VB.TextBox edcLinkDestHelpMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   105
      TabIndex        =   108
      TabStop         =   0   'False
      Top             =   1305
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.TextBox edcLinkSrceDoneMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   60
      TabIndex        =   109
      TabStop         =   0   'False
      Top             =   1620
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.TextBox edcLinkDestDoneMsg 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   285
      Left            =   75
      TabIndex        =   99
      TabStop         =   0   'False
      Top             =   1980
      Visible         =   0   'False
      Width           =   525
   End
   Begin VB.ListBox lbcCntrSpotSort 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5670
      Sorted          =   -1  'True
      TabIndex        =   91
      Top             =   -150
      Visible         =   0   'False
      Width           =   1365
   End
   Begin VB.ListBox lbcDPSort 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6555
      Sorted          =   -1  'True
      TabIndex        =   73
      Top             =   180
      Visible         =   0   'False
      Width           =   1365
   End
   Begin VB.ListBox lbcAdMdMissedSort 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   6840
      Sorted          =   -1  'True
      TabIndex        =   92
      Top             =   195
      Visible         =   0   'False
      Width           =   960
   End
   Begin VB.ListBox lbcMissedSort 
      Appearance      =   0  'Flat
      Height          =   240
      Left            =   5265
      Sorted          =   -1  'True
      TabIndex        =   75
      Top             =   165
      Visible         =   0   'False
      Width           =   960
   End
   Begin VB.ComboBox cbcVehicle 
      Appearance      =   0  'Flat
      BackColor       =   &H00FFFF00&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   315
      Left            =   645
      TabIndex        =   0
      Top             =   0
      Width           =   3045
   End
   Begin VB.PictureBox pbcClose 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      BeginProperty Font 
         Name            =   "Times New Roman"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H80000008&
      Height          =   30
      Left            =   1305
      ScaleHeight     =   30
      ScaleWidth      =   75
      TabIndex        =   122
      Top             =   405
      Width           =   75
   End
   Begin VB.PictureBox pbcMode 
      Appearance      =   0  'Flat
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   195
      Left            =   3765
      ScaleHeight     =   195
      ScaleWidth      =   2145
      TabIndex        =   129
      Top             =   405
      Width           =   2145
      Begin VB.OptionButton rbcMode 
         Caption         =   "Fill"
         Height          =   210
         Index           =   1
         Left            =   1590
         TabIndex        =   131
         Top             =   0
         Width           =   600
      End
      Begin VB.OptionButton rbcMode 
         Caption         =   "Move"
         Height          =   210
         Index           =   0
         Left            =   675
         TabIndex        =   130
         Top             =   0
         Value           =   -1  'True
         Width           =   795
      End
   End
   Begin VB.PictureBox pbcSelect 
      BackColor       =   &H00FFFFFF&
      ForeColor       =   &H00000000&
      Height          =   660
      Index           =   1
      Left            =   60
      Picture         =   "Spots.frx":C44CC
      ScaleHeight     =   600
      ScaleWidth      =   10635
      TabIndex        =   123
      Top             =   675
      Width           =   10695
      Begin VB.TextBox edcDate 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   180
         Left            =   7785
         TabIndex        =   15
         TabStop         =   0   'False
         Top             =   30
         Width           =   1275
      End
      Begin VB.CommandButton cmcDate 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   195
         Left            =   9060
         Picture         =   "Spots.frx":D9A82
         TabIndex        =   16
         TabStop         =   0   'False
         Top             =   30
         Width           =   195
      End
      Begin VB.CommandButton cmc1Wk 
         Appearance      =   0  'Flat
         Caption         =   "<"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   -1  'True
            Strikethrough   =   0   'False
         EndProperty
         Height          =   195
         Index           =   0
         Left            =   7515
         Picture         =   "Spots.frx":D9B7C
         TabIndex        =   14
         TabStop         =   0   'False
         Top             =   30
         Width           =   255
      End
      Begin VB.CommandButton cmc1Wk 
         Appearance      =   0  'Flat
         Caption         =   ">"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   -1  'True
            Strikethrough   =   0   'False
         EndProperty
         Height          =   195
         Index           =   1
         Left            =   9270
         TabIndex        =   17
         TabStop         =   0   'False
         Top             =   30
         Width           =   255
      End
      Begin VB.CommandButton cmcClearWork 
         Appearance      =   0  'Flat
         Caption         =   "Clear"
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   6
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   195
         Index           =   0
         Left            =   4005
         TabIndex        =   38
         Top             =   405
         Width           =   900
      End
      Begin VB.Label lacPrgName 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   9.75
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   210
         Left            =   390
         TabIndex        =   139
         Top             =   15
         Width           =   7050
      End
      Begin VB.Label lacShowForm 
         BackColor       =   &H8000000D&
         Caption         =   "Invert Line"
         Enabled         =   0   'False
         ForeColor       =   &H8000000E&
         Height          =   180
         Left            =   375
         TabIndex        =   127
         Top             =   30
         Visible         =   0   'False
         Width           =   2100
      End
      Begin VB.Label plcAdvtTm 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ForeColor       =   &H80000008&
         Height          =   165
         Left            =   9525
         TabIndex        =   124
         Top             =   30
         Width           =   1065
      End
      Begin VB.Image imcFont 
         Appearance      =   0  'Flat
         Height          =   480
         Left            =   30
         Picture         =   "Spots.frx":DA036
         Top             =   255
         Width           =   480
      End
   End
   Begin VB.PictureBox pbcSelect 
      BackColor       =   &H00FFFFFF&
      ForeColor       =   &H00000000&
      Height          =   660
      Index           =   0
      Left            =   60
      Picture         =   "Spots.frx":DA340
      ScaleHeight     =   600
      ScaleWidth      =   10620
      TabIndex        =   125
      Top             =   675
      Visible         =   0   'False
      Width           =   10680
      Begin VB.CommandButton cmcClearWork 
         Appearance      =   0  'Flat
         Caption         =   "Clear"
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   6
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   195
         Index           =   1
         Left            =   3990
         TabIndex        =   128
         Top             =   390
         Width           =   900
      End
      Begin VB.TextBox edcLog2Dt 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   180
         Left            =   7500
         MaxLength       =   20
         TabIndex        =   28
         TabStop         =   0   'False
         Top             =   30
         Visible         =   0   'False
         Width           =   1740
      End
      Begin VB.CommandButton cmcLog2Dt 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   180
         Left            =   9255
         Picture         =   "Spots.frx":EF852
         TabIndex        =   29
         TabStop         =   0   'False
         Top             =   30
         Visible         =   0   'False
         Width           =   195
      End
      Begin VB.CommandButton cmcLog1Dt 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   180
         Left            =   3285
         Picture         =   "Spots.frx":EF94C
         TabIndex        =   26
         TabStop         =   0   'False
         Top             =   30
         Width           =   195
      End
      Begin VB.TextBox edcLog1Dt 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   180
         Left            =   1515
         MaxLength       =   20
         TabIndex        =   25
         TabStop         =   0   'False
         Top             =   30
         Width           =   1755
      End
      Begin VB.Label plcLog2Tm 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ForeColor       =   &H80000008&
         Height          =   180
         Left            =   9495
         TabIndex        =   34
         Top             =   30
         Width           =   1065
      End
      Begin VB.Label plcLog1Tm 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ForeColor       =   &H80000008&
         Height          =   180
         Left            =   3525
         TabIndex        =   27
         Top             =   30
         Width           =   1095
      End
      Begin VB.Label Label1 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         ForeColor       =   &H80000008&
         Height          =   165
         Left            =   7995
         TabIndex        =   126
         Top             =   30
         Width           =   1095
      End
   End
   Begin VB.PictureBox plcTime 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   4755
      Left            =   120
      ScaleHeight     =   4695
      ScaleWidth      =   9150
      TabIndex        =   61
      TabStop         =   0   'False
      Top             =   765
      Visible         =   0   'False
      Width           =   9210
      Begin VB.CommandButton cmcAvDate 
         Appearance      =   0  'Flat
         Caption         =   "t"
         BeginProperty Font 
            Name            =   "Monotype Sorts"
            Size            =   5.25
            Charset         =   2
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   6855
         Picture         =   "Spots.frx":EFA46
         TabIndex        =   119
         TabStop         =   0   'False
         Top             =   4635
         Width           =   195
      End
      Begin VB.TextBox edcAvDate 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFF00&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   210
         Left            =   5610
         MaxLength       =   20
         TabIndex        =   118
         TabStop         =   0   'False
         Top             =   4635
         Width           =   1230
      End
      Begin VB.PictureBox pbcLog1 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   3735
         Left            =   60
         ScaleHeight     =   3735
         ScaleWidth      =   4140
         TabIndex        =   80
         Top             =   15
         Width           =   4140
         Begin VB.Label lacL1Frame 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BackStyle       =   0  'Transparent
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000000&
            Height          =   240
            Left            =   0
            TabIndex        =   77
            Top             =   2355
            Visible         =   0   'False
            Width           =   4140
         End
      End
      Begin VB.PictureBox pbcL1View 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   60
         ScaleHeight     =   210
         ScaleWidth      =   1110
         TabIndex        =   50
         TabStop         =   0   'False
         Top             =   3780
         Width           =   1110
      End
      Begin VB.VScrollBar vbcAvail 
         Height          =   2340
         LargeChange     =   10
         Left            =   8925
         Max             =   0
         TabIndex        =   51
         Top             =   2265
         Width           =   240
      End
      Begin VB.VScrollBar vbcLog1 
         Height          =   3750
         LargeChange     =   18
         Left            =   4215
         TabIndex        =   49
         Top             =   15
         Width           =   240
      End
      Begin VB.CommandButton cmcWhere 
         Appearance      =   0  'Flat
         Caption         =   "&Where?"
         Enabled         =   0   'False
         Height          =   240
         Left            =   4785
         TabIndex        =   39
         Top             =   4620
         Width           =   780
      End
      Begin VB.PictureBox pbcLog2 
         Appearance      =   0  'Flat
         BackColor       =   &H00FFFFFF&
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   1980
         Left            =   4785
         ScaleHeight     =   1980
         ScaleWidth      =   4140
         TabIndex        =   40
         Top             =   15
         Width           =   4140
         Begin VB.Label lacL2Frame 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BackStyle       =   0  'Transparent
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000000&
            Height          =   240
            Left            =   0
            TabIndex        =   79
            Top             =   -15
            Visible         =   0   'False
            Width           =   4140
         End
      End
      Begin VB.VScrollBar vbcLog2 
         Height          =   1980
         LargeChange     =   9
         Left            =   8925
         TabIndex        =   41
         Top             =   30
         Width           =   240
      End
      Begin VB.PictureBox pbcHold 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   810
         Left            =   75
         Picture         =   "Spots.frx":EFB40
         ScaleHeight     =   810
         ScaleWidth      =   4155
         TabIndex        =   42
         Top             =   4035
         Width           =   4155
         Begin VB.Label lacWAFrame 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BackStyle       =   0  'Transparent
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000000&
            Height          =   240
            Index           =   0
            Left            =   0
            TabIndex        =   78
            Top             =   0
            Visible         =   0   'False
            Width           =   4140
         End
      End
      Begin VB.VScrollBar vbcHold 
         Height          =   825
         LargeChange     =   3
         Left            =   4230
         TabIndex        =   43
         Top             =   4035
         Width           =   240
      End
      Begin VB.PictureBox pbcTimeLog 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   240
         Left            =   1725
         ScaleHeight     =   240
         ScaleWidth      =   2340
         TabIndex        =   68
         Top             =   3780
         Width           =   2340
         Begin VB.CheckBox ckcTimeLog 
            Caption         =   "Time Log"
            BeginProperty Font 
               Name            =   "Arial Narrow"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000000&
            Height          =   210
            Left            =   0
            TabIndex        =   95
            Top             =   15
            Width           =   975
         End
         Begin VB.Label lacTimeLog 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            BeginProperty Font 
               Name            =   "Arial Narrow"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   -1  'True
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   225
            Left            =   990
            TabIndex        =   94
            Top             =   0
            Width           =   1305
         End
      End
      Begin VB.PictureBox pbcAvailUn 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   8655
         ScaleHeight     =   210
         ScaleWidth      =   495
         TabIndex        =   67
         TabStop         =   0   'False
         Top             =   2040
         Width           =   495
      End
      Begin VB.PictureBox pbcAvailNo 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   8400
         ScaleHeight     =   210
         ScaleWidth      =   225
         TabIndex        =   66
         TabStop         =   0   'False
         Top             =   2040
         Width           =   225
      End
      Begin VB.PictureBox pbcAvailSd 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   7335
         ScaleHeight     =   210
         ScaleWidth      =   1035
         TabIndex        =   65
         TabStop         =   0   'False
         Top             =   2040
         Width           =   1035
      End
      Begin VB.PictureBox pbcAvailTm 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   6585
         ScaleHeight     =   210
         ScaleWidth      =   720
         TabIndex        =   64
         TabStop         =   0   'False
         Top             =   2040
         Width           =   720
      End
      Begin VB.PictureBox pbcAvailPd 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FFFFFF&
         Height          =   210
         Left            =   6060
         ScaleHeight     =   210
         ScaleWidth      =   510
         TabIndex        =   63
         TabStop         =   0   'False
         Top             =   2040
         Visible         =   0   'False
         Width           =   510
      End
      Begin VB.PictureBox pbcAvail 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   2385
         Left            =   4770
         Picture         =   "Spots.frx":F37FA
         ScaleHeight     =   2385
         ScaleWidth      =   4140
         TabIndex        =   62
         Top             =   2250
         Width           =   4140
      End
      Begin VB.Label lacL2Info 
         Appearance      =   0  'Flat
         Caption         =   "Log 2"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   195
         Left            =   4770
         TabIndex        =   90
         Top             =   4080
         Visible         =   0   'False
         Width           =   1650
      End
      Begin VB.Label lacL1Info 
         Appearance      =   0  'Flat
         Caption         =   "Log 1"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   195
         Left            =   4770
         TabIndex        =   89
         Top             =   2745
         Visible         =   0   'False
         Width           =   435
      End
      Begin VB.Label lacWA 
         Appearance      =   0  'Flat
         Caption         =   "Work Area"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   195
         Left            =   90
         TabIndex        =   74
         Top             =   4320
         Width           =   795
      End
      Begin VB.Label lacLog1 
         Appearance      =   0  'Flat
         Caption         =   "Log 1"
         BeginProperty Font 
            Name            =   "Arial Narrow"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   210
         Left            =   90
         TabIndex        =   53
         Top             =   0
         Width           =   435
      End
   End
   Begin VB.PictureBox plcAdvertiser 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   4755
      Left            =   60
      ScaleHeight     =   4695
      ScaleWidth      =   9135
      TabIndex        =   69
      TabStop         =   0   'False
      Top             =   1380
      Visible         =   0   'False
      Width           =   9195
      Begin VB.ListBox lbcSort 
         Height          =   900
         ItemData        =   "Spots.frx":FE674
         Left            =   4635
         List            =   "Spots.frx":FE684
         TabIndex        =   147
         Top             =   3810
         Visible         =   0   'False
         Width           =   1230
      End
      Begin VB.CommandButton cmcSort 
         Caption         =   "Sort"
         Height          =   990
         Left            =   4365
         TabIndex        =   146
         Top             =   3825
         Width           =   195
      End
      Begin VB.PictureBox pbcSC 
         Appearance      =   0  'Flat
         BackColor       =   &H00FF0000&
         BorderStyle     =   0  'None
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   6
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         FontTransparent =   0   'False
         ForeColor       =   &H00FFFFFF&
         Height          =   990
         Left            =   4575
         ScaleHeight     =   990
         ScaleWidth      =   210
         TabIndex        =   116
         TabStop         =   0   'False
         Top             =   3825
         Width           =   210
      End
      Begin VB.VScrollBar vbcAdWorkArea 
         Height          =   975
         LargeChange     =   4
         Left            =   4200
         TabIndex        =   104
         Top             =   3825
         Width           =   240
      End
      Begin VB.PictureBox pbcAdWorkArea 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   1005
         Left            =   60
         Picture         =   "Spots.frx":FE6AC
         ScaleHeight     =   1005
         ScaleWidth      =   4140
         TabIndex        =   88
         TabStop         =   0   'False
         Top             =   3810
         Width           =   4140
         Begin VB.Label lacWAFrame 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BackStyle       =   0  'Transparent
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000000&
            Height          =   240
            Index           =   1
            Left            =   165
            TabIndex        =   107
            Top             =   0
            Visible         =   0   'False
            Width           =   1305
         End
      End
      Begin VB.PictureBox pbcMissed 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   1005
         Left            =   4785
         Picture         =   "Spots.frx":10319E
         ScaleHeight     =   1005
         ScaleWidth      =   4140
         TabIndex        =   87
         Top             =   3810
         Width           =   4140
         Begin VB.Label lacAdMdFrame 
            Alignment       =   2  'Center
            Appearance      =   0  'Flat
            BackColor       =   &H00FFFFFF&
            BackStyle       =   0  'Transparent
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000000&
            Height          =   240
            Left            =   975
            TabIndex        =   93
            Top             =   0
            Visible         =   0   'False
            Width           =   1305
         End
      End
      Begin VB.VScrollBar vbcMissed 
         Height          =   975
         LargeChange     =   4
         Left            =   8895
         TabIndex        =   86
         Top             =   3825
         Width           =   240
      End
      Begin VB.PictureBox pbcHourRot 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   870
         Left            =   1125
         ScaleHeight     =   840
         ScaleWidth      =   3285
         TabIndex        =   83
         Top             =   3810
         Visible         =   0   'False
         Width           =   3315
      End
      Begin VB.PictureBox pbcDailyRot 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   870
         Left            =   60
         ScaleHeight     =   840
         ScaleWidth      =   990
         TabIndex        =   82
         TabStop         =   0   'False
         Top             =   3810
         Visible         =   0   'False
         Width           =   1020
      End
      Begin VB.VScrollBar vbcContract 
         Height          =   3720
         LargeChange     =   17
         Left            =   8910
         TabIndex        =   70
         Top             =   0
         Width           =   240
      End
      Begin VB.PictureBox pbcContract 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         FillColor       =   &H00BFFFFF&
         FillStyle       =   0  'Solid
         ForeColor       =   &H80000008&
         Height          =   3600
         Left            =   75
         ScaleHeight     =   3600
         ScaleWidth      =   8850
         TabIndex        =   71
         TabStop         =   0   'False
         Top             =   15
         Width           =   8850
         Begin VB.Label lacAFrame 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            BorderStyle     =   1  'Fixed Single
            Enabled         =   0   'False
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   600
            TabIndex        =   81
            Top             =   2160
            Visible         =   0   'False
            Width           =   165
         End
      End
      Begin VB.PictureBox pbcHourRotLabel 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         Enabled         =   0   'False
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   135
         Left            =   1140
         Picture         =   "Spots.frx":107C90
         ScaleHeight     =   135
         ScaleWidth      =   3285
         TabIndex        =   84
         TabStop         =   0   'False
         Top             =   4665
         Visible         =   0   'False
         Width           =   3285
      End
      Begin VB.PictureBox pbcDailyRotLabel 
         Appearance      =   0  'Flat
         BorderStyle     =   0  'None
         Enabled         =   0   'False
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   135
         Left            =   75
         Picture         =   "Spots.frx":108882
         ScaleHeight     =   135
         ScaleWidth      =   975
         TabIndex        =   85
         TabStop         =   0   'False
         Top             =   4665
         Visible         =   0   'False
         Width           =   975
      End
   End
   Begin VB.CheckBox ckcShowGhost 
      Caption         =   "Show Ghost"
      Height          =   210
      Left            =   6405
      TabIndex        =   145
      Top             =   405
      Width           =   1425
   End
   Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdNote 
      Height          =   825
      Left            =   8670
      TabIndex        =   148
      TabStop         =   0   'False
      Top             =   3420
      Width           =   8910
      _ExtentX        =   15716
      _ExtentY        =   1455
      _Version        =   393216
      Rows            =   4
      Cols            =   4
      FixedCols       =   0
      GridColor       =   -2147483635
      GridColorFixed  =   -2147483635
      AllowBigSelection=   0   'False
      FocusRect       =   0
      HighLight       =   0
      GridLinesFixed  =   1
      ScrollBars      =   2
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Arial"
         Size            =   8.25
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      _NumberOfBands  =   1
      _Band(0).Cols   =   4
   End
   Begin VB.Label plcScreen 
      Caption         =   "Spots"
      Height          =   195
      Left            =   45
      TabIndex        =   121
      Top             =   15
      Width           =   465
   End
   Begin VB.Image imcTrash 
      Appearance      =   0  'Flat
      Height          =   480
      Left            =   8865
      Picture         =   "Spots.frx":108C88
      Top             =   0
      Width           =   480
   End
   Begin VB.Image imcKey 
      Appearance      =   0  'Flat
      Height          =   480
      Left            =   30
      Picture         =   "Spots.frx":108F92
      Top             =   195
      Width           =   480
   End
   Begin VB.Image imcPrt 
      Appearance      =   0  'Flat
      Height          =   480
      Left            =   8850
      Picture         =   "Spots.frx":10929C
      Top             =   45
      Width           =   480
   End
End
Attribute VB_Name = "Spots"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'******************************************************************************************
'***** VB Compress Pro 6.11.32 generated this copy of Spots.frm on Wed 6/17/09 @ 12:56 PM *
'***** Mode: AutoSelect Standard Mode (Internal References Only)***************************
'******************************************************************************************

' Copyright 1993 Counterpoint Software, Inc. All rights reserved.
' Proprietary Software, Do not copy
'
' File Name:  Spots.Frm
'
' Release: 1.0
'
' Description:
'   This file contains the Spot input screen code
Option Explicit
Option Compare Text
Dim tmCtrls(0 To 7)  As FIELDAREA
Dim imLBCtrls As Integer
Dim imBoxNo As Integer
Dim imEnableCol As Integer
Dim imEnableRow As Integer
Dim imEnableSource As Integer   '0=Spec; 1= Comment grid
Dim imInitNoRows As Integer
Dim imFirstActivate As Integer
Dim imOpenOk As Integer 'Open status
Dim imIgnoreDone As Integer 'True=Ignore done as accessing information and it might cause crash
'Spot detail record information
Dim hmSdf As Integer        'Spot detail file handle
Dim tmSdf As SDF            'SDF record image
Dim tmSdfSrchKey3 As LONGKEY0 'SDF key record image
Dim imSdfRecLen As Integer  'SDF record length
Dim tmSdfExt() As SDFEXT    'Spot scheduled for a contract
Dim tmSdfExtSort() As SDFEXTSORT
Dim imHourCount(0 To 23) As Integer 'Hour count
Dim imDayCount(0 To 6) As Integer   'Day count
Dim tmAdMdManSchCode() As SORTCODE
Dim tmL2ManSchCode() As SORTCODE
Dim smManSchCodeTag As String
'6/18/06: Man Schd Replace Fill
Dim tmManMdExt() As SDFMDEXT
'6/18/06: Man Schd Replace Fill

Dim imSortIndex As Integer
'Spot summary
Dim hmSsf As Integer        'Spot summary file handle
Dim imSsfRecLen As Integer  'SSF record length
Dim lmSsfDate(0 To 6) As Long    'Dates of the days stored into tmSsf
Dim lmSsfRecPos(0 To 6) As Long  'Record positions
Dim tmSsf(0 To 6) As SSF         'Spot summary for one week (0 index for monday;
                                    '1 for tuesday;...; 6 for sunday)
Dim tmCTVcf0() As VCF
Dim tmCTVcf6() As VCF
Dim tmCTVcf7() As VCF
Dim tmAvail As AVAILSS
Dim tmSpot As CSPOTSS

Dim smClfInclExcl As String
Dim tmStationsClf() As INTKEY0

Dim smHLInclExcl As String
Dim tmStationsHL() As INTKEY0
'
'Remove this code when vehicle lock removed
'
'Vehicle- required only for Multi User LOCK- don't allow two user into same vehicle
Dim hmVef As Integer            'Vehicle file handle
Dim tmVef As VEF               'VEF record image
Dim tmOrigVef As VEF            'Original vehicle for a spot
Dim tmVefSrchKey As INTKEY0     'VEF key record image
Dim imVefRecLen As Integer         'VEF record length
Dim imTFNExist As Integer   'True= TFN Exist- allow weeks button
Dim hmVsf As Integer
'
'End of removal
'
'Short Title
Dim hmSif As Integer            'Short Title file handle
Dim tmSif As SIF               'SIF record image
Dim imSifRecLen As Integer         'SIF record length
'Rotation
Dim hmCrf As Integer            'Rotation file handle
Dim tmCrf As CRF               'CRF record image
Dim imCrfRecLen As Integer         'CRIF record length
'Library calendar
Dim hmLcf As Integer            'Log calendar library file handle
Dim tmLcf As LCF               'LCF record image
Dim tmLcfSrchKey As LCFKEY0     'LCF key record image
Dim imLcfRecLen As Integer         'LCF record length

Dim hmGhf As Integer
Dim tmGhf As GHF        'GHF record image
Dim tmGhfSrchKey0 As LONGKEY0    'GHF key record image
Dim tmGhfSrchKey1 As GHFKEY1    'GHF key record image
Dim imGhfRecLen As Integer        'GHF record length
Dim lmSeasonGhfCode As Long
Dim tmSeasonInfo() As SEASONINFO
Dim hmGsf As Integer

Dim tmGameSdfMdExt() As SDFMDEXT
Dim smGameSdfMdExtTag As String
Dim tmGameEvt() As EVTINFO  'Event information for monday

Dim tmRaf As RAF            'RAF record image
Dim tmRafSrchKey As LONGKEY0  'RAF key record image
Dim hmRaf As Integer        'RAF Handle
Dim imRafRecLen As Integer      'RAF record length

Dim hmSef As Integer

Dim tmSxf As SXF            'SXF record image
Dim tmSxfSrchKey0 As LONGKEY0  'RAF key record image
Dim tmSxfSrchKey1 As SXFKEY1  'SXF key record image
Dim hmSxf As Integer        'SXF Handle
Dim imSxfRecLen As Integer      'SXF record length

Dim fmAdjFactorW As Single  'Width adjustment factor
Dim fmAdjFactorH As Single  'Height adjustment factor

Dim lmEdcDate As Long
Dim smEdcDate As String
Dim imEdcGameNo As Integer
Dim lmLockDate As Long
Dim imSsfDayIndex As Integer

Dim hmCgf As Integer
Dim tmCgf As CGF
Dim tmCgfCff() As CFF
Dim imCgfRecLen As Integer
Dim tmCgfSrchKey1 As CGFKEY1    'CntrNo; CntRevNo; PropVer

'Spot week dump
Dim hmSwf As Integer            'Spot week dump file handle
Dim tmSwf As SWF               'SWF record image
Dim tmSwfSrchKey As SWFKEY0     'SWF key record image
Dim imSwfRecLen As Integer         'SWF record length
'Advertiser
Dim hmAdf As Integer            'Advertiser file handle
Dim tmAdf As ADF               'ADF record image
Dim tmAdfSrchKey As INTKEY0     'ADF key record image
Dim imAdfRecLen As Integer         'ADF record length
'MultiName
Dim hmMnf As Integer            'MultiName file handle
Dim tmMnf As MNF               'MNF record image
Dim tmMnfSrchKey As INTKEY0     'MNF key record image
Dim imMnfRecLen As Integer         'MNF record length
'research Data
Dim hmDrf As Integer            'MultiName file handle
Dim tmDrf As DRF               'MNF record image
Dim imDrfRecLen As Integer         'MNF record length
'research Data
Dim hmDpf As Integer            'MultiName file handle
'Research Estimate
Dim hmDef As Integer
'Record Locks
Dim lmLock1RecCode As Long
Dim lmLock2RecCode As Long
Dim hmRlf As Integer
'Avail Name
Dim hmAnf As Integer            'Avail Name file handle
Dim tmAnf As ANF               'ANF record image
Dim tmAnfSrchKey As INTKEY0     'ANF key record image
Dim imAnfRecLen As Integer         'ANF record length
Dim tmMissedCode() As SORTCODE
Dim smMissedCodeTag As String
'Advertiser information
Dim imAdfCode As Integer    'Advertiser code of last advertiser that separation was computed for
Dim imPriceLevel As Integer
Dim lmSepLength As Long 'Separation length for advertiser
Dim lmStartDateLen As Long  'Start date that separartion is valid for
Dim lmEndDateLen As Long    'End date that separation is valid for
Dim lmChfCode As Long   'Chf Code that separation was last computed for
Dim imLineNo As Integer
Dim imVehComp As Integer    'VefCode used last tim gGetLineSchParameters called
'Contract line
Dim hmCHF As Integer        'Contract line file handle
Dim tmChf As CHF            'CHF record image
Dim tmChfSrchKey As LONGKEY0 'CHF key record image
Dim tmChfSrchKey1 As CHFKEY1 'CHF key record image
Dim imCHFRecLen As Integer     'CHF record length
'Contract line
Dim hmClf As Integer        'Contract line file handle
Dim tmClf As CLF            'CLF record image
Dim tmClfSrchKey As CLFKEY0 'CLF key record image
Dim tmClfSrchKey3 As CLFKEY3 'CLF key record image
Dim imClfRecLen As Integer     'CLF record length
Dim tmPkClf() As CLFLIST
' Contract Flight File
Dim hmCff As Integer        'Contract Flight file handle
'Dim tmCff(1 To 2) As CFF            'CFF record image (array required for compatiblity with sch routines)
Dim tmCff(0 To 1) As CFF            'CFF record image (array required for compatiblity with sch routines)
Dim tmCffSrchKey As CFFKEY0 'CFF key record image
Dim imCffRecLen As Integer     'CFF record length
Dim tmCff0() As CFF
Dim tmCff1() As CFF
Dim tmFCff() As CFF
Dim lmDateChf0(0 To 1) As Long  'Contract Range of dates
Dim lmDateChf1(0 To 1) As Long
Dim lmClfCode0 As Long
Dim lmClfCode1 As Long
'Comments
Dim hmCxf As Integer            'Comments file handle
Dim tmCxf As CXF               'CXF record image
Dim tmCxfSrchKey As LONGKEY0     'CXF key record image
Dim imCxfRecLen As Integer         'CXF record length
' Salesperson File
Dim hmSlf As Integer        'Salesperson file handle
Dim tmSlf As SLF            'SLF record image
Dim tmSlfSrchKey As INTKEY0 'SLF key record image
Dim imSlfRecLen As Integer  'SLF record length
' Rate Card Programs/Times File
Dim hmRdf As Integer        'Rate Card Programs/Times file handle
Dim tmLnRdf As RDF            'RDF record image
Dim tmRdfSrchKey As INTKEY0 'RDF key record image
Dim imRdfRecLen As Integer     'RDF record length
'Rate Card
Dim tmRdf() As RDF      'Dayparts
Dim tmRCDP() As RCDP      'Rate card daypart for matching vehicle
Dim tmRateCardCode() As SORTCODE
'Spot MG record
Dim hmSmf As Integer        'Spot MG file handle
Dim tmSmfA As SMF            'SMF record image
Dim tmSmfB As SMF            'SMF record image
Dim tmSmfSrchKey2 As LONGKEY0   'SdfCode
Dim imSmfRecLen As Integer  'SMF record length
' Spot Tracking File (only only if spots can be moved from Todays date+1 to Last log date)
Dim hmStf As Integer        'Spot tracking file handle
Dim tmStf As STF            'STF record image
Dim imStfRecLen As Integer  'STF record length
'MG Track record
Dim hmMtf As Integer
Dim tmMtf As MTF
Dim imMtfRecLen As Integer
Dim tmMtfSrchKey As LONGKEY0   'TrackID
Dim tmMtfSrchKey1 As LONGKEY0   'TrackID
'Copy inventory
Dim hmCif As Integer        'Copy inventory file handle
Dim tmCif As CIF            'CIF record image
Dim tmCifSrchKey As LONGKEY0 'CIF key record image
Dim imCifRecLen As Integer     'CIF record length
'  Copy Product/Agency File
Dim hmCpf As Integer        'Copy Product/Agency file handle
Dim tmCpf As CPF            'CPF record image
Dim tmCpfSrchKey As LONGKEY0 'CPF key record image
Dim imCpfRecLen As Integer     'CPF record length
' Time Zone Copy FIle
Dim hmTzf As Integer        'Time Zone Copy file handle
Dim tmTzf As TZF            'TZF record image
Dim tmTzfSrchKey As LONGKEY0 'TZF key record image
Dim imTzfRecLen As Integer     'TZF record length
' Media Codes File
Dim hmMcf As Integer        'Media Codes file handle
Dim tmMcf As MCF            'MCF record image
Dim tmMcfSrchKey As INTKEY0 'MCF key record image
Dim imMcfRecLen As Integer     'MCF record length

'Feed
Dim hmFsf As Integer
Dim tmFsf As FSF            'FSF record image
Dim tmFSFSrchKey As LONGKEY0 'FSF key record image
Dim imFsfRecLen As Integer     'FSF record length
Dim lmFeedSpotColor As Long

'Feed Name
Dim hmFnf As Integer

'Product
Dim hmPrf As Integer

'Program Names
Dim hmPaf As Integer

Dim tmGsfInfo() As GSFINFO
Dim tmTeam() As MNF
Dim smTeamTag As String

Dim imSelectedGameNo As Integer
Dim imGameNoComboBoxIndex As Integer
Dim imGameNoChgMode As Integer

'Contract selected markets
Dim tmVehGp3Code() As SORTCODE
Dim smVehGp3CodeTag As String


Dim imDW As Integer '0=Daily; 1=Weekly view
Dim imDWIndex As Integer
Dim imMore As Integer  '0=None, 1 = Price; 2=Region Abbr; 3=ISCI; 4=Creative Title; 5=Live/Recorded
Dim imMoreIndex As Integer
Dim imHighlight As Integer  '0=Advertiser; 1=Protection; 2=Conflicts; 3=Split Network
Dim imOpenAvailPercent As Integer   '%= 100*(TotalNumberOfAvails-TotalNumberOpenAvails)/TotalNumberOfAvails
Dim imViewSelect As Integer '0=All; 1=Single
Dim imTestDragIndex() As Integer
'Spot information
Dim lmSdfRecPosHighlight As Long
'Dim lmL1SdfRecPosHighlight As Long
'Dim lmL2SdfRecPosHighlight As Long
Dim tmSpotInfoCtrls(0 To 18)  As FIELDAREA
Dim imLBSpotInfoCtrls As Integer
Dim smSpotInfo(0 To 1, 0 To 18) As String
Dim imNoSpotInfo As Integer         'Number of spot information screens showing
Dim lmCntrNoSpotInfo(0 To 1) As Long
'Advertiser view
Dim tmACtrls(0 To 7)  As FIELDAREA
Dim imLBACtrls As Integer
Dim lmSelectedChfCode As Long   'Selected contract (-1=All)
Dim imSelectedLineNo As Integer 'Selected line number (-1=All)
Dim lmSelectedFsfCode As Long   'Selected contract (-1=All)
Dim lmCountChfCode As Long
Dim imCountLineNo As Integer
Dim lmCountFsfCode As Long
Dim lmCurrCountChfCode As Long
Dim imCurrCountLineNo As Integer
Dim lmCurrCountFsfCode As Long
Dim imCurrCountVefCode As Integer

Dim imSeasonSelectedIndex As Integer
Dim imSeasonComboBoxIndex As Integer


Dim tmMoVcf0() As VCF      'M-F Vcf records
Dim tmMoVcf6() As VCF      'Sa Vcf records
Dim tmMoVcf7() As VCF      'Su Vcf records
Dim tmTuVcf0() As VCF      'M-F Vcf records
Dim tmTuVcf6() As VCF      'Sa Vcf records
Dim tmTuVcf7() As VCF      'Su Vcf records
Dim tmWeVcf0() As VCF      'M-F Vcf records
Dim tmWeVcf6() As VCF      'Sa Vcf records
Dim tmWeVcf7() As VCF      'Su Vcf records
Dim tmThVcf0() As VCF      'M-F Vcf records
Dim tmThVcf6() As VCF      'Sa Vcf records
Dim tmThVcf7() As VCF      'Su Vcf records
Dim tmFrVcf0() As VCF      'M-F Vcf records
Dim tmFrVcf6() As VCF      'Sa Vcf records
Dim tmFrVcf7() As VCF      'Su Vcf records
Dim tmSaVcf0() As VCF      'M-F Vcf records
Dim tmSaVcf6() As VCF      'Sa Vcf records
Dim tmSaVcf7() As VCF      'Su Vcf records
Dim tmSuVcf0() As VCF      'M-F Vcf records
Dim tmSuVcf6() As VCF      'Sa Vcf records
Dim tmSuVcf7() As VCF      'Su Vcf records
'  smShow will hold all of the data values from the files
Dim imLBEvt As Integer
Dim tmMoEvt() As EVTINFO  'Event information for monday
Dim tmTuEvt() As EVTINFO  'Event information for Tuesday
Dim tmWeEvt() As EVTINFO  'Event information for Wednesday
Dim tmThEvt() As EVTINFO  'Event information for Thursday
Dim tmFrEvt() As EVTINFO  'Event information for Friday
Dim tmSaEvt() As EVTINFO  'Event information for Saturday
Dim tmSuEvt() As EVTINFO  'Event information for Sunday
Dim lmPrevSuDate As Long
Dim tmPrevSuEvt() As EVTINFO  'Event information for Sunday
Dim lmNextMoDate As Long
Dim tmNextMoEvt() As EVTINFO  'Event information for monday
Dim tmMoRowIndex() As Integer 'Event information for monday index
Dim tmTuRowIndex() As Integer  'Event information for Tuesday
Dim tmWeRowIndex() As Integer  'Event information for Wednesday
Dim tmThRowIndex() As Integer  'Event information for Thursday
Dim tmFrRowIndex() As Integer  'Event information for Friday
Dim tmSaRowIndex() As Integer  'Event information for Saturday
Dim tmSuRowIndex() As Integer  'Event information for Sunday
Dim tmMoEvtTemp() As EVTINFO  'Event information for monday
Dim tmTuEvtTemp() As EVTINFO  'Event information for Tuesday
Dim tmWeEvtTemp() As EVTINFO  'Event information for Wednesday
Dim tmThEvtTemp() As EVTINFO  'Event information for Thursday
Dim tmFrEvtTemp() As EVTINFO  'Event information for Friday
Dim tmSaEvtTemp() As EVTINFO  'Event information for Saturday
Dim tmSuEvtTemp() As EVTINFO  'Event information for Sunday
Dim imAMax As Integer
'Time view
'Log1 Parameter
Dim tmL1Ctrls(0 To 1)  As FIELDAREA
Dim imLBL1Ctrls As Integer
Dim tmL1Evt() As EVTINFO  'Event information for monday
Dim tmL1RowIndex() As Integer 'Event information for monday index
Dim smLog1Date As String
Dim imLog1Day As Integer
Dim imFirstLog1 As Integer
Dim imL1View As Integer '0=View only avails/spots; 1=View all events; 2= Unsold avails only
Dim imL1Max As Integer  'Max number of events to be displayed
Dim tmL1Vcf0() As VCF      'M-F Vcf records
Dim tmL1Vcf6() As VCF      'Sa Vcf records
Dim tmL1Vcf7() As VCF      'Su Vcf records
'Log2 Parameter
Dim tmL2Ctrls(0 To 1)  As FIELDAREA
Dim imLBL2Ctrls As Integer
Dim tmL2Evt() As EVTINFO  'Event information for monday
Dim tmSdfMdExt() As SDFMDEXT    'For Log2
Dim smSdfMdExtTag As String
Dim imLBSdfMdExt As Integer
Dim tmSvSdfMdExt() As SDFMDEXT
Dim tmL2RowIndex() As Integer 'Event information for monday index
Dim imL2View As Integer '0=View only avails/spots; 1=View all events
Dim imSelectedAdvt As Integer
Dim smLog2Date As String
Dim imLog2Day As Integer
Dim imFirstLog2 As Integer
Dim smMissedDate As String
Dim imLog2Type As Integer   '0=Missed by date; 1=Missed in Current Month; 2= Missed All Past Months;
                            '3=Missed by advertiser; 4=Log2;
                            '5=Remnant; 6=Direct Response; 7=per Inquiry; 8=PSA; 9=Promo;
                            '10=Cancelled by date; 11=Hidden by date;
Dim imLog2Map(0 To 11) As Integer   'Used to obtain imLog2Type from lbcLog2Type
Dim imLog2Show As Integer 'Show Missed by: 0=Detail; 1=Contract
Dim imL2Max As Integer  'Max number of events to be displayed
Dim imProcVefChg As Integer 'True = Avoid double painting of missed area within log2
Dim imIgnoreGotFocus As Integer 'True=Ignore gotfocus as vehicle is being processed
Dim tmL2Vcf0() As VCF      'M-F Vcf records
Dim tmL2Vcf6() As VCF      'Sa Vcf records
Dim tmL2Vcf7() As VCF      'Su Vcf records
'Manual scheduled spots and extra bonus
Dim lmL2ManSchCode() As Long  '1=Contract code number;2=Feed Code
Dim imL2ManSchInfo() As Integer   'Index:1=Line #; 2=Len; 3=# Spots in week; 4=Max for week or day (-1=invalid week); 5=lbcL2ManSchCode index; 6=lbcL2ManSch index
Dim lmL2ManSchInfo() As Long   'Index:1=ChfCxfCode; 2=ClfCxfCode; 3=Price
Dim smL2ManSchInfo() As String    '1=Contract Type; 2= Split Network (Y/N); 3=Price Type
Dim lmAdMdManSchCode() As Long  '1=Contract code number;2=Feed Code
Dim imAdMdManSchInfo() As Integer  'Index:1=Line #; 2=Len; 3=# Spots in week; 4=Max for week or day; 5=lbcAdMdManSchCode index; 6=lbcAdMdManSch index; 7=Game Number
                                   'For Extra Index:1=Unused; 2=Len; 3=# in Week; 4=Unused; 5=lbcAdMdManSchCode index; 6=lbcAdMdManSch index; 7=Game Number
Dim lmAdMdManSchInfo() As Long   'Index:1=ChfCxfCode; 2=ClfCxfCode; 3=Price
Dim smAdMdManSchInfo() As String    '1=Contract Type; 2= Split Network (Y/N); 3=Price Type
Dim tmAdMdSdfMdExt() As SDFMDEXT
Dim smAdMdSdfMdExtTag As String
Dim tmSvAdMdSdfMdExt() As SDFMDEXT
Dim imFirstDate As Integer
Dim imFirstMissed As Integer
'Dim tmAdMdRowIndex(1 To 5) As Integer 'Event information for monday index
Dim tmAdMdRowIndex(0 To 5) As Integer 'Event information for monday index
Dim imAdMdSelectedAdvt As Integer
Dim smAdMdMissedDate As String
Dim imAdMdType As Integer   '0=Missed by date; ; 1=Missed in Current Month; 2= Missed All Past Months; 3=Missed by advertiser;
                            '4=Remnant; 5=Direct Response; 6=per Inquiry; 7=PSA; 8=Promo;
                            '9=Cancelled by date; 10=Hidden by date; 11=Extra Bonus (not used replaced with fill)
Dim imAdMdMap(0 To 10) As Integer
Dim imADMdShow As Integer 'Show Missed by: 0=Detail; 1=Contract
Dim imAdMdMax As Integer  'Max number of events to be displayed
Dim imLineNoExtra() As Integer
Dim smLineInfoOk() As String
Dim smLineInfoNotOk() As String
Dim imToggleRot As Integer  '0=Spot Info; 1=Graph by Contract-All; 2=Graph by Contract-Scheduled; 3=Graph by Line-Scheduled
                            'All=All spots regardless of original scheduled vehicle and Bonus; Scheduled=Only spots original ordered for vehicle
Dim imToggleDate As Integer  '0=Past; 1=All; (this is only used when imToggleRot = 1 or 2 or 3)
'Work area
Dim tmWACtrls(0 To 1)  As FIELDAREA
Dim imLBWACtrls As Integer
Dim tmWAMdExt() As SDFMDEXT  'Event information for monday

Dim imAdMdLastSelection As Integer
Dim imWALastSelection As Integer
Dim imAdMdSelectionCount As Integer
Dim imWASelectionCount As Integer
Dim bmWorkPopulated As Boolean

Dim imHoldMax As Integer
'Where
Dim imWhereComp1 As Integer
Dim imWhereComp2 As Integer
Dim imShowWhere As Integer
Dim imInWhere As Integer
'Avail Parameters
Dim tmAvCtrls(0 To 8)  As FIELDAREA
Dim imLBAvCtrls As Integer
Dim imAvailPd As Integer    '0=Wkly; 1=Daily
Dim imAvailTm As Integer    '0=Hourly; 1= Daypart
Dim imAvailSd As Integer    '0=Sold; 1=Avails; 2=Inventory
Dim imAvailNo As Integer    '0=#; 1=%
Dim imAvailUn As Integer    '0=Units; 1=Seconds
Dim imFirstAv As Integer
Dim imHighlightAdvtCode As Integer
Dim lmHighlightCntrCode As Long
Dim lmHighlightFeedCode As Long
Dim smHighlightSplitNetwork As String
Dim imClearHighlight As Integer
Dim lmMGCntrCode As Long
Dim lmMGFeedCode As Long
Dim imMGSpotLen As Integer
Dim smInfoCaption As String
Dim imMissedReason As Integer
Dim imCancelReason As Integer
'Calendar
Dim tmCDCtrls(0 To 7) As FIELDAREA
Dim imLBCDCtrls As Integer
Dim imCalYear As Integer    'Month of displayed calendar
Dim imCalMonth As Integer   'Year of displayed calendar
Dim lmCalStartDate As Long  'Start date of displayed calendar
Dim lmCalEndDate As Long    'End date of displayed calendar
Dim imCalType As Integer
Dim imCurCalMonth As Integer
Dim imCurCalYear As Integer
Dim tmTrash() As SDFMDEXT
Dim tmAddEvt As EVTINFO
Dim tmSpotMove() As SPOTMOVE
Dim smSplitNetworkType As String
Dim smSplitNetworkMixLen As String  'Y=Yes; N=No
Dim imSelectDelay As Integer    'True=cbcSelect change mode
Dim imDelayType As Integer      '0=Vehicle, 1=Log1, 2=Log2
Dim imStartMode As Integer
Dim imFirstFocus As Integer
Dim imChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imSeasonChgMode As Integer
Dim imCntChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imMdChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imAdvtChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imL2TypeChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imMoreChgMode As Integer
Dim imDWChgMode As Integer
Dim imMCReasonChgMode As Integer
Dim imAdMdAdvtChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imAdMdTypeChgMode As Integer    'Change mode status (so change not entered when in change)
Dim imAdvtBuild As Integer      'True=Don't rebuild advt view from Avail change as Advt view called Avail
Dim imBSMode As Integer     'Backspace flag
Dim imVehCode As Integer
Dim imVpfIndex As Integer   'Vehicle option index
Dim lmCompTime As Long  'Competitive time for vehicle
Dim imVehSelectedIndex As Integer  'Index of selected record
Dim imVehComboBoxIndex As Integer
Dim smVehName As String 'Vehicle name
Dim imAdvtComboBoxIndex As Integer
Dim imL2TypeComboBoxIndex As Integer
Dim imAdMdAdvtComboBoxIndex As Integer
Dim imAdMdTypeComboBoxIndex As Integer
Dim imTerminate As Integer  'True = terminating task, False= OK
Dim imSettingValue As Integer   'True=Don't enable any box woth change
Dim imLbcArrowSetting As Integer 'True = Processing arrow key- retain current list box visibly
                                'False= Make list box invisible
Dim imComboBoxIndex As Integer
Dim lmCEarliestDate As Long 'Earliest current date
Dim lmCLatestDate As Long   'Latest current date
Dim lmLastLogDate As Long
Dim lmNowDatePlus1 As Long
Dim smCurrentWkDate As String        'Current week date
Dim lmNowMoDate As Long
Dim imIgnoreChg As Integer
Dim imBypassFocus As Integer
Dim imScrollDir As Integer  '0=Page up; 1=Page down
Dim imEvtType(0 To 14) As Integer   'Events to be included
Dim tmProg As PROGRAMSS
Dim imMnfMissed As Integer
Dim imTrashFire As Integer  '0=Trash; 1=Fire; 2=Hide
Dim smSpotFont As String     'A=Arial; S=Small Font
Dim smDefFontName As String
Dim fmDefFontSize As Single
Dim imUpdateAllowed As Integer
'Dim imListField(1 To 5) As Integer
Dim imListField(0 To 5) As Integer
Dim bmClearLogAlert As Boolean  'Set to True only when scheduling a missed spot
'Drag
Dim imDragRowNoSrce As Integer  'Row number being dragged
Dim imDragRowNoDest As Integer  'Row number ending drag
Dim imDragIndexSrce As Integer  'Log1 and Log2 tmL-Evt index
Dim imDragIndexDest As Integer  'Log1 and Log2 tmL-Evt index
Dim imDragColNoSrce As Integer  'Column number being dragged (advertiser screen only)
Dim imDragColNoDest As Integer  'Column number ending drag (advertiser screen only)
Dim imDragSpotLen As Integer    'Length of spot being dragged
Dim smDragCntrType As String
Dim smDragSrcePrgName As String
Dim smDragDestPrgName As String
Dim fmDragX As Single       'Start x location of drag
Dim fmDragY As Single       'Start y location
Dim imDragButton As Integer 'Value 1= Left button; 2=Right button; 4=Middle button
Dim imDragType As Integer   '0=Start Drag; 1=scroll up; 2= scroll down
Dim imDragShift As Integer  'Shift state when mouse down event occurrs
Dim imDragSrce As Integer 'Values defined below
Dim imDragDest As Integer 'Values defined below
Dim imDragScroll As Integer 'Object to be scrolled (same values as below)
Dim imDblClickMode As Integer   'Indicates if in double clicked mode (0=No, 1=Left; 2=Right)
Dim imDblClick As Integer   'Indicates if spot double clicked (0=No; 1=Yes-Left Mouse; 2=Yes-Right Mouse)
Dim imMouseUpButton As Integer
Dim imMouseUpShift As Integer
Dim fmMouseUpX As Single
Dim fmMouseUpY As Single

Dim imGameNoIndex As Integer    '0=Weekly view, 1=Log 1; 2= Log 2; 3= Avail
Dim smMissedFromOthers As String

Dim tmUserVehicle() As SORTCODE
Dim smUserVehicleTag As String

Dim tmSizeCtrls  As FIELDAREA
Dim imLBSizeCtrls As Integer

Private rst_Vnf As ADODB.Recordset


Const DRAGLOG1 = 1
Const DRAGLOG2 = 2
Const DRAGHOLD = 3
Const DRAGCONTRACT = 4
Const DRAGADMD = 5
Const DRAGMDREASON = 6
Const DRAGWORKAREA = 7
Const DRAGAVAIL = 8
Dim imIgnoreRightMove As Integer    'True=Processing Right Mouse move
Dim imRowRightMouse As Integer
Dim imColRightMouse As Integer
Dim imL1OrL2 As Integer    '1=L1; 2=L2; 3=Avail; 4=Week Log; 5=Missed on Week Log
Dim lmEarliestAllowedDate As Long   'set to largest of Now+1 Or Earliest LCF or Last Log Date + 1
'Dim lmTBStartTime(1 To 49) As Long  'Allowed times if time buy (-1 indicates end of times) and library times if library buy
'Dim lmTBEndTime(1 To 49) As Long
Dim lmTBStartTime(0 To 48) As Long  'Allowed times if time buy (-1 indicates end of times) and library times if library buy
Dim lmTBEndTime(0 To 48) As Long
''Required to be compatible with general schedule routines
''The array are not used by spots except for compatiblity
'Dim imHour(1 To 24) As Integer     'Hour count (Index 1 for 12m-1a; Index 2 for 1a-2a;...)
'Dim imDay(1 To 7) As Integer       'Day count (Index 1 for monday; Index 2 for tuesday;..)
'Dim imQH(1 To 4) As Integer        'Quarter hour count (Index 1 for 0min to 15min; Index 2 for 15min to 30min;..)
''Actual for the day or week be processed- this will be a subset from
''imC---- or imP----
'Dim imAHour(1 To 24) As Integer    'Hour count (Index 1 for 12m-1a; Index 2 for 1a-2a;...)
'Dim imADay(1 To 7) As Integer      'Day count (Index 1 for monday; Index 2 for tuesday;..)
'Dim imAQH(1 To 4) As Integer       'Quarter hour count (Index 1 for 0min to 15min; Index 2 for 15min to 30min;..)
'Dim imSkip(1 To 24, 1 To 4, 0 To 6) As Integer  '-1=Skip all test;0=All test;
                                    'Bit 0=Skip insert;
                                    'Bit 1=Skip move;
                                    'Bit 2=Skip competitive pack;
                                    'Bit 3=Skip Preempt
Dim imHour(0 To 23) As Integer     'Hour count (Index 1 for 12m-1a; Index 2 for 1a-2a;...)
Dim imDay(0 To 6) As Integer       'Day count (Index 1 for monday; Index 2 for tuesday;..)
Dim imQH(0 To 3) As Integer        'Quarter hour count (Index 1 for 0min to 15min; Index 2 for 15min to 30min;..)
'Actual for the day or week be processed- this will be a subset from
'imC---- or imP----
Dim imAHour(0 To 23) As Integer    'Hour count (Index 1 for 12m-1a; Index 2 for 1a-2a;...)
Dim imADay(0 To 6) As Integer      'Day count (Index 1 for monday; Index 2 for tuesday;..)
Dim imAQH(0 To 3) As Integer       'Quarter hour count (Index 1 for 0min to 15min; Index 2 for 15min to 30min;..)
Dim imSkip(0 To 23, 0 To 3, 0 To 6) As Integer  '-1=Skip all test;0=All test;
                                    'Bit 0=Skip insert;
                                    'Bit 1=Skip move;
                                    'Bit 2=Skip competitive pack;
                                    'Bit 3=Skip Preempt

Dim smOverbookMode As String

Dim imLastNoteColSorted As Integer
Dim imLastNoteSort As Integer
Dim imFirstNote As Integer

Const VIEWINDEX = 2
Const HIGHLIGHTINDEX = 3
Const MISSEDREASONINDEX = 6
Const CANCELREASONINDEX = 7
Const MISSEDAREAINDEX = 5
Const WORKAREAINDEX = 4
Const SHOWPRICEINDEX = 1

Const WEEKDATEINDEX = 0
Const NOTEINDEX = 1
Const VNFCODEINDEX = 2
Const NOTESORTINDEX = 3




Private Sub cbcSeason_Change()
    If imSeasonChgMode = False Then 'If currently in change mode- bypass any other changes (avoid infinite loop)
        If cbcSeason.Text <> "" Then
            gManLookAhead cbcSeason, imBSMode, imSeasonComboBoxIndex
            mcbcSeasonChange
        End If
    End If
    Exit Sub
End Sub

Private Sub cbcSeason_Click()
    cbcSeason_Change
End Sub

Private Sub cbcSeason_GotFocus()
    Dim ilVff As Integer
    Dim ilLoop As Integer
    
    lbcSort.Visible = False
    If cbcSeason.Text = "" Then
        For ilVff = LBound(tgVff) To UBound(tgVff) Step 1
            If tgVff(ilVff).iVefCode = imVehCode Then
                lmSeasonGhfCode = tgVff(ilVff).lSeasonGhfCode
                Exit For
            End If
        Next ilVff
        For ilLoop = 1 To cbcSeason.ListCount - 1 Step 1
            If cbcSeason.ItemData(ilLoop) = lmSeasonGhfCode Then
                cbcSeason.ListIndex = ilLoop
                Exit For
            End If
        Next ilLoop
        If cbcSeason.ListIndex < 0 Then
            If cbcSeason.ListCount >= 1 Then
                cbcSeason.ListIndex = 0
            End If
        End If
        imSeasonComboBoxIndex = cbcSeason.ListIndex
        imSeasonSelectedIndex = imComboBoxIndex
    End If
    imSeasonComboBoxIndex = imSeasonSelectedIndex
    gCtrlGotFocus cbcSeason
End Sub

Private Sub cbcSeason_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub cbcSeason_KeyPress(KeyAscii As Integer)
    'Backspace character cause selected test to be deleted or
    'the first character to the left of the cursor if no text selected
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If cbcSeason.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
End Sub

Private Sub cbcVehicle_Change()
    Dim ilRet As Integer
    Dim ilRes As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilVehCode As Integer
    Dim slStr As String
    Dim ilVef As Integer

    '  imChgMode is used to avoid entering this routine multiple times
    '            if a vehicle selection change occurs during the
    '            processing of a "change"
    If imStartMode Then
        imStartMode = False
        mCbcVehChange
        mPopNotes imVehCode
        '7/2/09: Moved to timer to solve the inital paint issue (picture boxes not showing after resize).
        'pbcContract.Cls
        'pbcContract_Paint
        'pbcMissed.Cls
        'pbcMissed_Paint
        'pbcAdWorkArea.Cls
        'pbcAdWorkArea_Paint
        'pbcLog1.Cls
        'pbcLog1_Paint
        'pbcLog2.Cls
        'pbcLog2_Paint
        'If imDW = 0 Then
        '    plcTime.Visible = False
        '    plcTime.Visible = True
        'Else
        '    plcAdvertiser.Visible = False
        '    plcAdvertiser.Visible = True
        'End If
        tmcShowForm.Enabled = True
        Exit Sub
    End If
    If imChgMode = False Then 'If currently in change mode- bypass any other changes (avoid infinite loop)
        tmcClick.Enabled = False
        If UBound(tmWAMdExt) - 1 >= imLBSdfMdExt Then
            If tmVef.sType = "G" Then
                'ilRes = MsgBox("Spots remain in the Work Area.  Not allowed to switch to another vehicle", vbOkOnly + vbExclamation, "Spot")
                'imChgMode = True
                'cbcVehicle.ListIndex = imVehSelectedIndex
                'imChgMode = False
                'Exit Sub
                sgGenMsg = "Spots left in Work Area: Save and Switch or Move to Missed and Switch or Cancel and stay on Current Vehicle"
                sgCMCTitle(0) = "Save"
                sgCMCTitle(1) = "Move"
                sgCMCTitle(2) = "Cancel"
                sgCMCTitle(3) = ""
                igDefCMC = 0
                igEditBox = 0
                GenMsg.Show vbModal
                DoEvents
                If igAnsCMC = 2 Then
                    imChgMode = True
                    cbcVehicle.ListIndex = imVehSelectedIndex
                    imChgMode = False
                    Exit Sub
                ElseIf igAnsCMC = 0 Then
                    mAddWorkToSXF
                ElseIf igAnsCMC = 1 Then
                    mMoveWorkToMissed
                End If
                'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
                ReDim tmWAMdExt(0 To 1) As SDFMDEXT
                pbcAdWorkArea.Cls
                pbcAdWorkArea_Paint
            End If
            If UBound(tmWAMdExt) - 1 >= imLBSdfMdExt Then
                slStr = Trim$(cbcVehicle.Text)
                If slStr <> "" Then
                    gManLookAhead cbcVehicle, imBSMode, imVehComboBoxIndex
                    If cbcVehicle.ListIndex >= 0 Then
                        slNameCode = tmUserVehicle(cbcVehicle.ListIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        ilVehCode = Val(slCode)
                        If (imVehCode > 0) And (ilVehCode <> imVehCode) Then
                            ilVef = gBinarySearchVef(ilVehCode)
                            If ilVef <> -1 Then
                                If tgMVef(ilVef).sType = "G" Then
                                    'ilRes = MsgBox("Spots remain in the Work Area.  Not allowed to select Sports vehicle", vbOkOnly + vbExclamation, "Spot")
                                    'imChgMode = True
                                    'cbcVehicle.ListIndex = imVehSelectedIndex
                                    'imChgMode = False
                                    'Exit Sub
                                    sgGenMsg = "Spots left in Work Area: Save and Switch or Move to Missed and Switch or Cancel and stay on Current Vehicle"
                                    sgCMCTitle(0) = "Save"
                                    sgCMCTitle(1) = "Move"
                                    sgCMCTitle(2) = "Cancel"
                                    sgCMCTitle(3) = ""
                                    igDefCMC = 0
                                    igEditBox = 0
                                    GenMsg.Show vbModal
                                    DoEvents
                                    If igAnsCMC = 2 Then
                                        imChgMode = True
                                        cbcVehicle.ListIndex = imVehSelectedIndex
                                        imChgMode = False
                                        Exit Sub
                                    ElseIf igAnsCMC = 0 Then
                                        mAddWorkToSXF
                                    ElseIf igAnsCMC = 1 Then
                                        mMoveWorkToMissed
                                    End If
                                    'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
                                    ReDim tmWAMdExt(0 To 1) As SDFMDEXT
                                    pbcAdWorkArea.Cls
                                    pbcAdWorkArea_Paint
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            'If UBound(tmWAMdExt) - 1 >= LBound(tmWAMdExt) Then
            If UBound(tmWAMdExt) - 1 > LBound(tmWAMdExt) Then
                ilRes = MsgBox("Spots remain in the Work Area.  Do you intend to issue MGs on other vehicles", vbYesNo + vbQuestion + vbDefaultButton2, "Work Area")
                DoEvents
                If ilRes = vbNo Then
                    imChgMode = True
                    cbcVehicle.ListIndex = imVehSelectedIndex
                    imChgMode = False
                    Exit Sub
                End If
            End If
        End If
        If tmVef.sType = "G" Then
            bmWorkPopulated = False
        Else
            slStr = Trim$(cbcVehicle.Text)
            If slStr <> "" Then
                gManLookAhead cbcVehicle, imBSMode, imVehComboBoxIndex
                If cbcVehicle.ListIndex >= 0 Then
                    slNameCode = tmUserVehicle(cbcVehicle.ListIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVehCode = Val(slCode)
                    If (imVehCode > 0) And (ilVehCode <> imVehCode) Then
                        ilVef = gBinarySearchVef(ilVehCode)
                        If ilVef <> -1 Then
                            If tgMVef(ilVef).sType = "G" Then
                                bmWorkPopulated = False
                            End If
                        End If
                    End If
                End If
            End If
        End If
        slStr = Trim$(cbcVehicle.Text)
        If slStr <> "" Then
            gManLookAhead cbcVehicle, imBSMode, imVehComboBoxIndex
            If cbcVehicle.ListIndex >= 0 Then
                slNameCode = tmUserVehicle(cbcVehicle.ListIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                ilVehCode = Val(slCode)
                If (imVehCode > 0) And (ilVehCode = imVehCode) Then
                    Exit Sub
                End If
                tmcClick.Enabled = False
                imSelectDelay = True
                DoEvents
                imDelayType = 0
                tmcClick.Interval = 2000    '2 seconds
                tmcClick.Enabled = True
            End If
        End If
    End If
    Exit Sub
End Sub
Private Sub cbcVehicle_Click()

    imVehComboBoxIndex = cbcVehicle.ListIndex
    cbcVehicle_Change
End Sub
Private Sub cbcVehicle_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cbcVehicle_GotFocus()
    tmcClick.Enabled = False
    lbcSort.Visible = False
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    imIgnoreChg = False
    mClearDrag False
    If imFirstFocus Then
        imFirstFocus = False
        pbcDW_Paint
        pbcToggleRot_Paint
    Else
        mSaveNotes imVehCode, True
    End If
    If cbcVehicle.Text = "" Then
    ' get the default vehicle from this global var
        'this code is in mInit instead of here
        'gFindMatch sgUserDefVehicleName, 0, cbcVehicle
        'If gLastFound(cbcVehicle) >= 0 Then
        '    cbcVehicle.ListIndex = gLastFound(cbcVehicle)
        'Else
        '    If cbcVehicle.ListCount > 0 Then
        '        cbcVehicle.ListIndex = 0
        '    End If
        'End If
    End If
    gCtrlGotFocus cbcVehicle
    If cbcVehicle.ListIndex <> -1 Then
        imVehComboBoxIndex = cbcVehicle.ListIndex
        imVehSelectedIndex = imVehComboBoxIndex
    Else
        imVehComboBoxIndex = imVehSelectedIndex
    End If
End Sub
Private Sub cbcVehicle_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub cbcVehicle_KeyPress(KeyAscii As Integer)
    'Backspace character cause selected test to be deleted or
    'the first character to the lEtf of the cursor if no text selected
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If cbcVehicle.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
End Sub
Private Sub cbcVehicle_LostFocus()
    If imSelectDelay Then
        tmcClick.Enabled = False
        'imSelectDelay = False
        If imDelayType = 0 Then
            'mCbcVehChange
            tmcClick_Timer
        Else
            imSelectDelay = False
        End If
    End If
End Sub

Private Sub ckcShowGhost_Click()
    If ckcShowGhost.Visible Then
        tmcClick.Enabled = False
        If imDW <> 0 Then
            pbcContract.Cls
            pbcContract_Paint
        Else
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
        End If
    End If
End Sub

Private Sub ckcTimeLog_DragDrop(Source As control, X As Single, Y As Single)
    mClearDrag True
End Sub
Private Sub ckcTimeLog_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 1
End Sub
Private Sub ckcTimeLog_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    lbcSort.Visible = False
End Sub
Private Sub ckcTimeLog_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmc1Wk_Click(Index As Integer)
    Dim slDate As String

    'Check if processing a date change, if so igonre this change
    If imClearHighlight = False Then
        Exit Sub
    End If

    If tmVef.sType <> "G" Then
        slDate = Trim$(edcDate.Text)
        If slDate <> "" Then
            If gValidDate(slDate) Then
                If Index = 0 Then
                    slDate = gDecOneWeek(slDate)
                Else
                    slDate = gIncOneWeek(slDate)
                End If
                edcDate.Text = slDate
            End If
        End If
    Else
        If lbcGameNo(imGameNoIndex).ListIndex >= 0 Then
            If Index = 0 Then
                If lbcGameNo(imGameNoIndex).ListIndex <= 7 Then
                    lbcGameNo(imGameNoIndex).ListIndex = 0
                Else
                    lbcGameNo(imGameNoIndex).ListIndex = lbcGameNo(imGameNoIndex).ListIndex - 7
                End If
            Else
                If lbcGameNo(imGameNoIndex).ListIndex + 7 >= lbcGameNo(imGameNoIndex).ListCount Then
                    If lbcGameNo(imGameNoIndex).ListCount <= 7 Then
                        lbcGameNo(imGameNoIndex).ListIndex = 0
                    Else
                        lbcGameNo(imGameNoIndex).ListIndex = lbcGameNo(imGameNoIndex).ListCount - 7
                    End If
                Else
                    lbcGameNo(imGameNoIndex).ListIndex = lbcGameNo(imGameNoIndex).ListIndex + 7
                End If
            End If
        End If
    End If
End Sub
Private Sub cmc1Wk_GotFocus(Index As Integer)
    lbcSort.Visible = False
End Sub
Private Sub cmcAvDate_Click()
    '4/16/11
    If tmVef.sType <> "G" Then
        plcCalendar.Visible = Not plcCalendar.Visible
    Else
        lbcGameNo(3).Visible = Not lbcGameNo(3).Visible
    End If
    edcAvDate.SelStart = 0
    edcAvDate.SelLength = Len(edcAvDate.Text)
    edcAvDate.SetFocus
End Sub
Private Sub cmcAvDate_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcAvDate_GotFocus()
    Dim slStr As String
    imGameNoIndex = 3
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    plcCalendar.ZOrder vbBringToFront
    lbcGameNo(3).ZOrder
    '4/16/11
    If tmVef.sType <> "G" Then
        slStr = edcAvDate.Text
        If gValidDate(slStr) Then
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        Else
            lacDate.Visible = False
        End If
    End If
    plcCalendar.Move plcTime.Left + edcAvDate.Left, plcTime.Top + edcAvDate.Top - plcCalendar.height
    lbcGameNo(3).Move plcTime.Left + edcAvDate.Left, plcTime.Top + edcAvDate.Top - lbcGameNo(3).height
    DoEvents
    imL1OrL2 = 3
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcAvDate_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmcCalDn_Click()
    If imEnableSource = 0 Then
        If imL1OrL2 = 1 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 2 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 3 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 4 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 5 Then
            tmcClick.Enabled = False
        End If
    ElseIf imEnableSource = 1 Then
    End If
    imCalMonth = imCalMonth - 1
    If imCalMonth <= 0 Then
        imCalMonth = 12
        imCalYear = imCalYear - 1
    End If
    pbcCalendar.Cls
    pbcCalendar_Paint
    If imEnableSource = 0 Then
        If imL1OrL2 = 1 Then
            imFirstLog1 = False
            edcLog1Dt.SelStart = 0
            edcLog1Dt.SelLength = Len(edcLog1Dt.Text)
            edcLog1Dt.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 2 Then
            imFirstLog2 = False
            edcLog2Dt.SelStart = 0
            edcLog2Dt.SelLength = Len(edcLog2Dt.Text)
            edcLog2Dt.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 3 Then
            imFirstAv = False
            edcAvDate.SelStart = 0
            edcAvDate.SelLength = Len(edcAvDate.Text)
            edcAvDate.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 4 Then
            imFirstDate = False
            edcDate.SelStart = 0
            edcDate.SelLength = Len(edcDate.Text)
            edcDate.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 5 Then
            imFirstMissed = False
            edcMissedDt.SelStart = 0
            edcMissedDt.SelLength = Len(edcMissedDt.Text)
            edcMissedDt.SetFocus
            'tmcClick.Enabled = True
        End If
    ElseIf imEnableSource = 1 Then
        imFirstNote = False
        edcNote.SelStart = 0
        edcNote.SelLength = Len(edcNote.Text)
        edcNote.SetFocus
    End If
End Sub
Private Sub cmcCalUp_Click()
    If imEnableSource = 0 Then
        If imL1OrL2 = 1 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 2 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 3 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 4 Then
            tmcClick.Enabled = False
        ElseIf imL1OrL2 = 5 Then
            tmcClick.Enabled = False
        End If
    ElseIf imEnableSource = 1 Then
    End If
    imCalMonth = imCalMonth + 1
    If imCalMonth > 12 Then
        imCalMonth = 1
        imCalYear = imCalYear + 1
    End If
    pbcCalendar.Cls
    pbcCalendar_Paint
    If imEnableSource = 0 Then
        If imL1OrL2 = 1 Then
            imFirstLog1 = False
            edcLog1Dt.SelStart = 0
            edcLog1Dt.SelLength = Len(edcLog1Dt.Text)
            edcLog1Dt.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 2 Then
            imFirstLog2 = False
            edcLog2Dt.SelStart = 0
            edcLog2Dt.SelLength = Len(edcLog2Dt.Text)
            edcLog2Dt.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 3 Then
            imFirstAv = False
            edcAvDate.SelStart = 0
            edcAvDate.SelLength = Len(edcAvDate.Text)
            edcAvDate.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 4 Then
            imFirstDate = False
            edcDate.SelStart = 0
            edcDate.SelLength = Len(edcDate.Text)
            edcDate.SetFocus
            'tmcClick.Enabled = True
        ElseIf imL1OrL2 = 5 Then
            imFirstMissed = False
            edcMissedDt.SelStart = 0
            edcMissedDt.SelLength = Len(edcMissedDt.Text)
            edcMissedDt.SetFocus
            'tmcClick.Enabled = True
        End If
    ElseIf imEnableSource = 1 Then
        imFirstNote = False
        edcNote.SelStart = 0
        edcNote.SelLength = Len(edcNote.Text)
        edcNote.SetFocus
    End If
End Sub

Private Sub cmcClearWork_Click(Index As Integer)
    'If UBound(tmWAMdExt) <= LBound(tmWAMdExt) Then
    If UBound(tmWAMdExt) <= imLBSdfMdExt Then
        Exit Sub
    End If
    '5/19/16: Clear spots retained in work area
    'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
    mMoveWorkToMissed
    If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
        Screen.MousePointer = vbHourglass
        smAdMdSdfMdExtTag = ""
        mHbcAdMdDateChange
        mVbcHoldMinMax False
    ElseIf (imAdMdType = 1) Or (imAdMdType = 2) Then
        Screen.MousePointer = vbHourglass
        smAdMdSdfMdExtTag = ""
        mBuildMissedView 1, False
        mVbcHoldMinMax False
    ElseIf (imAdMdType > 3) And (imAdMdType <> 11) Then
        'mMakeManSchView 1
        mVbcHoldMinMax False
    ElseIf (imAdMdType = 11) Then
        'mExtraBonusPop lmAdMdManSchCode(), imAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
        'mMakeManSchView 1
        mVbcHoldMinMax False
    End If
    If (imLog2Type = 0) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
        mHbcL2DateChange
        mVbcL2MinMax False
    ElseIf (imLog2Type = 1) Or (imLog2Type = 2) Then
        mBuildMissedView 0, False
        mVbcL2MinMax False
    End If
    Screen.MousePointer = vbDefault
    mSetCommands
End Sub

Private Sub cmcClearWork_DragDrop(Index As Integer, Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub cmcClearWork_GotFocus(Index As Integer)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub cmcDate_Click()
    If tmVef.sType <> "G" Then
        plcCalendar.Visible = Not plcCalendar.Visible
        plcCalendar.ZOrder
    Else
        lbcGameNo(0).Visible = Not lbcGameNo(0).Visible
    End If
    edcDate.SelStart = 0
    edcDate.SelLength = Len(edcDate.Text)
    edcDate.SetFocus
End Sub
Private Sub cmcDate_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcDate_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGCONTRACT, State, 0
End Sub
Private Sub cmcDate_GotFocus()
    Dim slStr As String
    imGameNoIndex = 0
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcSort.Visible = False
    
    mSetShow imBoxNo
    imBoxNo = -1
    If tmVef.sType <> "G" Then
        plcCalendar.ZOrder vbBringToFront
        slStr = edcDate.Text
        If gValidDate(slStr) Then
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        Else
            lacDate.Visible = False
        End If
        plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
    Else
        lbcGameNo(0).Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
    End If
    DoEvents
    imL1OrL2 = 4
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcDate_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmcDone_Click()
    If imIgnoreDone Then
        Exit Sub
    End If
    If UBound(tmWAMdExt) - 1 >= imLBSdfMdExt Then
        sgGenMsg = "Spots left in work area: Save and Exit or Move to Missed and Exit or Cancel and stay on Spot screen"
        sgCMCTitle(0) = "Save"
        sgCMCTitle(1) = "Move"
        sgCMCTitle(2) = "Cancel"
        sgCMCTitle(3) = ""
        igDefCMC = 0
        igEditBox = 0
        GenMsg.Show vbModal
        DoEvents
        If igAnsCMC = 2 Then
            Exit Sub
        ElseIf igAnsCMC = 0 Then
            mAddWorkToSXF
        ElseIf igAnsCMC = 1 Then
            mMoveWorkToMissed
        End If
    End If
    mTerminate
End Sub
Private Sub cmcDone_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcDone_GotFocus()
    tmcClick.Enabled = False
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    lbcSort.Visible = False
    imIgnoreChg = False
    mClearDrag False
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
End Sub
Private Sub cmcDone_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcDW_Click()
    lbcDW.Visible = Not lbcDW.Visible
End Sub

Private Sub cmcFill_Click()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  llStartDate                   llEndDate                     ilDay                     *
'*  ilGsf                                                                                 *
'******************************************************************************************


    If tmVef.sType <> "G" Then
        igFillDW = imDW
        If imDW = 0 Then
            sgFillStartDate = edcLog1Dt.Text  'plcDate.Caption
        Else
            sgFillStartDate = edcDate.Text  'plcDate.Caption
        End If
    Else
        igFillDW = -1
        'llStartDate = 0
        'llEndDate = 0
        'For ilDay = 0 To 6 Step 1
        '    If imSelectedGameNo + ilDay < lbcGameNo.ListCount Then
        '        ilGsf = lbcGameNo.ItemData(imSelectedGameNo + ilDay)
        '        If llStartDate = 0 Then
        '            llStartDate = tmGsfInfo(ilGsf).lGameDate
        '            llEndDate = tmGsfInfo(ilGsf).lGameDate
        '        Else
        '            If tmGsfInfo(ilGsf).lGameDate < llStartDate Then
        '                llStartDate = tmGsfInfo(ilGsf).lGameDate
        '            End If
        '            If tmGsfInfo(ilGsf).lGameDate > llEndDate Then
        '                llEndDate = tmGsfInfo(ilGsf).lGameDate
        '            End If
        '        End If
        '    End If
        'Next ilDay
        sgFillStartDate = ""
        If imDW <> 0 Then
            mGetEdcDate 0
            sgFillStartDate = smEdcDate
        Else
            sgFillStartDate = mGetL1GameDate()
        End If
        If sgFillStartDate = "" Then
            sgFillStartDate = Format$(gNow(), "m/d/yy")  'Format$(llStartDate, "m/d/yy")
        End If
        sgFillEndDate = sgFillStartDate 'Format$(llEndDate, "m/d/yy")
    End If
    lgFillAllowDate = lmEarliestAllowedDate
    igFillVefCode = imVehCode
    igSpotFillReturn = 0    '0=No change; 1=Spot filled within week
    SpotFill.Show vbModal
    tmcClick.Enabled = False
    If igSpotFillReturn > 0 Then
        Screen.MousePointer = vbHourglass
        If imDW = 0 Then
            mHbcL1DateChange
            If (imLog2Type = 4) And (Trim$(edcLog2Dt.Text) <> "") Then  'Log date
                mHbcL2DateChange
            End If
        End If
        mForceRepaintWeekly False
        igSpotFillReturn = 0    '0=No change; 1=Spot filled within week
        pbcLog1.Cls 'pbcLog1_Paint
        pbcLog2.Cls
        pbcAvail.Cls 'pbcAvail_Paint
        pbcLog1_Paint 'pbcLog1_Paint
        pbcLog2_Paint
        pbcAvail_Paint 'pbcAvail_Paint
        Screen.MousePointer = vbDefault
    End If
End Sub
Private Sub cmcFill_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcFill_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    imIgnoreChg = False
    mClearDrag False
End Sub
Private Sub cmcLock_Click()
    Dim slStr As String
    Dim slDate As String
    Dim llDate As Long
    Dim llAvDate As Long
    If tmVef.sType = "G" Then
        Exit Sub
    End If
    'Unload IconTraf
    'If Not gWinRoom(igNoExeWinRes(LOCKSEXE)) Then
    '    Exit Sub
    'End If
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
    '    If igTestSystem Then
    '        slStr = "Spots^Test\" & sgUserName & "\" & Trim$(Str$(CALLSOURCESPOTS)) & "\" & Trim$(Str$(imVehCode))
    '    Else
    '        slStr = "Spots^Prod\" & sgUserName & "\" & Trim$(Str$(CALLSOURCESPOTS)) & "\" & Trim$(Str$(imVehCode))
    '    End If
    'Else
        If igTestSystem Then
            slStr = "Spots^Test^NOHELP\" & sgUserName & "\" & Trim$(str$(CALLSOURCESPOTS)) & "\" & Trim$(str$(imVehCode))
        Else
            slStr = "Spots^Prod^NOHELP\" & sgUserName & "\" & Trim$(str$(CALLSOURCESPOTS)) & "\" & Trim$(str$(imVehCode))
        End If
    'End If
    'lgShellRet = Shell(sgExePath & "Locks.Exe " & slStr, 1)
    'Spots.Enabled = False
    'Screen.MousePointer = vbDefault  'Wait
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    sgCommandStr = slStr
    Locks.Show vbModal
    slStr = sgDoneMsg
    'Spots.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'If plcL1Date.Caption <> "" Then
    If Trim$(edcLog1Dt.Text) <> "" Then
        pbcLog1.Cls
        mHbcL1DateChange
        If imLog2Type = 4 Then
            pbcLog2.Cls
            mHbcL2DateChange
        End If
        slDate = edcLog1Dt.Text 'plcL1Date.Caption
        If tmVef.sType <> "G" Then
            llDate = gDateValue(gObtainPrevMonday(slDate))
            slDate = edcAvDate.Text 'plcAvDate.Caption
            llAvDate = gDateValue(slDate)
            If llAvDate = llDate Then
                mHbcAdvtDateChange
            End If
        End If
    Else
        If imLog2Type = 4 Then
            pbcLog2.Cls
            mHbcL2DateChange
        End If
        'If plcDate.Caption <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            pbcContract.Cls
            mHbcAdvtDateChange
        End If
    End If
    If plcAdvertiser.Visible Then
        plcAdvertiser.Visible = False
        DoEvents
        plcAdvertiser.Visible = True
    End If
    If plcTime.Visible Then
        plcTime.Visible = False
        DoEvents
        plcTime.Visible = True
    End If
    Screen.MousePointer = vbDefault  'Wait
    'If Not gWinRoom(igNoExeWinRes(LOCKSEXE)) Then
    '    Exit Sub
    'End If
    'MousePointer = vbHourGlass  'Wait
    'Locks.Show vbModal
    'MousePointer = vbDefault    'Default
End Sub
Private Sub cmcLock_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcLock_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    lbcSort.Visible = False
    imIgnoreChg = False
    mClearDrag False
End Sub
Private Sub cmcLock_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmcLog1Dt_Click()
    '4/16/11
    If tmVef.sType <> "G" Then
        plcCalendar.Visible = Not plcCalendar.Visible
    Else
        lbcGameNo(1).Visible = Not lbcGameNo(1).Visible
    End If
    edcLog1Dt.SelStart = 0
    edcLog1Dt.SelLength = Len(edcLog1Dt.Text)
    edcLog1Dt.SetFocus
End Sub
Private Sub cmcLog1Dt_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcLog1Dt_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 0
End Sub
Private Sub cmcLog1Dt_GotFocus()
    Dim slStr As String
    imGameNoIndex = 1
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    mSetShow imBoxNo
    imBoxNo = -1
    '4/16/11
    If tmVef.sType <> "G" Then
        plcCalendar.ZOrder vbBringToFront
        slStr = edcLog1Dt.Text
        If gValidDate(slStr) Then
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        Else
            lacDate.Visible = False
        End If
        If pbcSelect(0).Left + edcLog1Dt.Left + 30 <> plcCalendar.Left And plcCalendar.Visible Then
            plcCalendar.Visible = False
        End If
        plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
    Else
        lbcGameNo(1).ZOrder
        lbcGameNo(1).Move pbcSelect(1).Left + edcLog1Dt.Left, pbcSelect(1).Top + edcLog1Dt.Top + edcLog1Dt.height + 15
    End If
    DoEvents
    imL1OrL2 = 1
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcLog1Dt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmcLog2Dt_Click()
    If imLog2Type = 0 Then  'Missed by Date
        plcCalendar.Visible = Not plcCalendar.Visible
    ElseIf imLog2Type = 4 Then  'Log 2
        '4/16/11
        If tmVef.sType <> "G" Then
            plcCalendar.Visible = Not plcCalendar.Visible
        Else
            lbcGameNo(2).Visible = Not lbcGameNo(2).Visible
        End If
    ElseIf imLog2Type = 10 Then  'Cancelled
        plcCalendar.Visible = Not plcCalendar.Visible
    ElseIf imLog2Type = 11 Then 'Hidden
        plcCalendar.Visible = Not plcCalendar.Visible
    ElseIf imLog2Type = 3 Then
        lbcAdvt.Visible = Not lbcAdvt.Visible
    End If
    edcLog2Dt.SelStart = 0
    edcLog2Dt.SelLength = Len(edcLog2Dt.Text)
    edcLog2Dt.SetFocus
End Sub
Private Sub cmcLog2Dt_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcLog2Dt_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG2, State, 0
End Sub
Private Sub cmcLog2Dt_GotFocus()
    Dim slStr As String
    imGameNoIndex = 2
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imLog2Type <> 0) And (imLog2Type <> 4) And (imLog2Type <> 10) And (imLog2Type <> 11) And (imLog2Type <> 3) Then  'Missed by Date; Log2; Cancelled; Hidded
        mSetShow imBoxNo
        imBoxNo = -1
    End If
    If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed by Date; Log2; Cancelled; Hidded
        '4/16/11
        If tmVef.sType <> "G" Then
            plcCalendar.ZOrder vbBringToFront
            slStr = edcLog2Dt.Text
            If gValidDate(slStr) Then
                gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
            Else
                lacDate.Visible = False
            End If
            If pbcSelect(0).Left + edcLog2Dt.Left + 30 <> plcCalendar.Left And plcCalendar.Visible Then
                plcCalendar.Visible = False
            End If
            plcCalendar.Move pbcSelect(0).Left + edcLog2Dt.Left + 30, pbcSelect(0).Top + edcLog2Dt.Top + edcLog2Dt.height + 30
        Else
            lbcGameNo(2).ZOrder
            lbcGameNo(2).Move pbcSelect(0).Left + edcLog2Dt.Left + 30, pbcSelect(0).Top + edcLog2Dt.Top + edcLog2Dt.height + 30
        End If
        imL1OrL2 = 2
    ElseIf imLog2Type = 3 Then
        lbcLog2Type.Visible = False
        lbcAdvt.ZOrder vbBringToFront
    '    lbcAdvt.Visible = False
        'lbcAdvt.Move plcTime.Left + edcLog2Dt.Left, plcTime.Top + edcLog2Dt.Top + edcLog2Dt.Height
        'lbcAdvt.Move pbcSelect(0).Left + cmcMissedLog2.Left + cmcMissedLog2.Width - lbcAdvt.Width, pbcSelect(0).Top + edcMissedLog2.Top + edcMissedLog2.Height
        lbcAdvt.Left = edcLog2Dt.Left
        lbcAdvt.Top = edcLog2Type.Top + edcLog2Type.height
    End If
    DoEvents
End Sub
Private Sub cmcLog2Dt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
'    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmcLog2Type_Click()
    lbcLog2Type.Visible = Not lbcLog2Type.Visible
    edcLog2Type.SelStart = 0
    edcLog2Type.SelLength = Len(edcLog2Type.Text)
    edcLog2Type.SetFocus
End Sub
Private Sub cmcLog2Type_DragDrop(Source As control, X As Single, Y As Single)
    mClearDrag True
End Sub
Private Sub cmcLog2Type_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG2, State, 0
End Sub
Private Sub cmcLog2Type_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.ZOrder vbBringToFront
    lbcAdvt.Visible = False
    plcCalendar.Visible = False
    lbcGameNo(1).Visible = False
    lbcGameNo(2).Visible = False
    lbcGameNo(3).Visible = False
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcLog2Type_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
'    mClearDrag True
'    If tmcDrag.Enabled Then
'        imDragType = -1
'        imDragSrce = -1
'        tmcDrag.Enabled = False
'    End If
End Sub

Private Sub cmcMCReason_Click()
    lbcMCReason.Visible = Not lbcMCReason.Visible
End Sub

Private Sub cmcMCReason_GotFocus()
    gCtrlGotFocus ActiveControl
End Sub

Private Sub cmcMGs_Click()
    If tmVef.sType <> "G" Then
        sgMGStartDate = Format$(lmNowMoDate, "m/d/yy")
        If (lmHighlightCntrCode <= 0) And (lmHighlightFeedCode <= 0) Then
            lgChfMGCode = 0
            igMGSpotLen = tgVpf(imVpfIndex).iSDLen
        Else
            lgChfMGCode = lmMGCntrCode
            lgFsfMGCode = lmMGFeedCode
            igMGSpotLen = imMGSpotLen
            sgMGStartDate = edcDate.Text    'plcDate.Caption
        End If
        '3/7/99- changed from one week in past to 13 weeks (Jim)
        lgMGEarliestDate = gDateValue(sgMGStartDate) - 7 * 13 'lmCEarliestDate
        lgMGAllowDate = lmEarliestAllowedDate
        '3/7/99- changed from 9 weeks in future to 13 (Jim)
        lgMGLatestDate = gDateValue(sgMGStartDate) + 13 * 7 - 1 'lmCLatestDate
        igMGVefCode = imVehCode
        igMFVpfIndex = imVpfIndex
        igSpotMGReturn = 0    '0=No change; 1=Spot filled within week
        SpotMG.Show vbModal
        tmcClick.Enabled = False
        If igSpotMGReturn > 0 Then
            'If plcDate.Caption <> "" Then
            Screen.MousePointer = vbHourglass
            If imDW = 0 Then
                mHbcL1DateChange
                If (imLog2Type = 4) And (Trim$(edcLog2Dt.Text) <> "") Then   'Log date
                    mHbcL2DateChange
                ElseIf (imLog2Type <= 3) Or (imLog2Type >= 10) Then
                    mBuildMissedView 0, True
                End If
            End If
            If Trim$(edcDate.Text) <> "" Then
                mForceRepaintWeekly False
            End If
            igSpotMGReturn = 0    '0=No change; 1=Spot filled within week
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
            Screen.MousePointer = vbDefault
        End If
    End If
End Sub

Private Sub cmcMGs_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
End Sub

Private Sub cmcMissedDt_Click()
    If imAdMdType = 3 Then
        lbcAdvt.Visible = Not lbcAdvt.Visible
    ElseIf imAdMdType = 0 Then
        plcCalendar.Visible = Not plcCalendar.Visible
    ElseIf (imAdMdType = 9) Then     'Cancelled date
        plcCalendar.Visible = Not plcCalendar.Visible
    ElseIf (imAdMdType = 10) Then     'Hidden date
        plcCalendar.Visible = Not plcCalendar.Visible
    End If
    edcMissedDt.SelStart = 0
    edcMissedDt.SelLength = Len(edcMissedDt.Text)
    edcMissedDt.SetFocus
End Sub
Private Sub cmcMissedDt_GotFocus()
    Dim slStr As String
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by Date; Cancelled; Hidded
        plcCalendar.ZOrder vbBringToFront
        slStr = edcLog2Dt.Text
        If gValidDate(slStr) Then
            gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
        Else
            lacDate.Visible = False
        End If
        'plcCalendar.Move plcAdvertiser.Left + edcMissedDt.Left, plcAdvertiser.Top + edcMissedDt.Top - plcCalendar.Height
        imL1OrL2 = 5
    ElseIf imAdMdType = 3 Then
        lbcAdMdType.Visible = False
        lbcAdvt.ZOrder vbBringToFront
        ''lbcAdvt.Move plcAdvertiser.Left + edcMissedDt.Left, plcAdvertiser.Top + edcMissedDt.Top - lbcAdvt.Height
        'lbcAdvt.Move plcAdvertiser.Left + cmcMissedDt.Left + cmcMissedDt.Width - lbcAdvt.Width, plcAdvertiser.Top + edcMissedDt.Top - lbcAdvt.Height
    End If
    'DoEvents
End Sub
Private Sub cmcMissedDt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    'mClearDrag True
    'If tmcDrag.Enabled Then
    '    imDragType = -1
    '    imDragSrce = -1
    '    tmcDrag.Enabled = False
    'End If
End Sub

Private Sub cmcMissedType_Click()
    lbcAdMdType.Visible = Not lbcAdMdType.Visible
    edcMissedType.SelStart = 0
    edcMissedType.SelLength = Len(edcMissedType.Text)
    edcMissedType.SetFocus
End Sub
Private Sub cmcMissedType_GotFocus()
    plcCalendar.Visible = False
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imAdMdType <> 3) And (imAdMdType <> 9) And (imAdMdType <> 10) Then
        edcMissedDt.Visible = False
        cmcMissedDt.Visible = False
        lbcAdvt.Visible = False
    End If
    lbcSort.Visible = False
    lbcAdMdType.ZOrder vbBringToFront
    'lbcAdMdType.Move plcAdvertiser.Left + edcMissedType.Left, plcAdvertiser.Top + edcMissedType.Top - lbcAdMdType.Height
    gCtrlGotFocus ActiveControl
End Sub
Private Sub cmcMissedType_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    'mClearDrag True
    'If tmcDrag.Enabled Then
    '    imDragType = -1
    '    imDragSrce = -1
    '    tmcDrag.Enabled = False
    'End If
End Sub

Private Sub cmcMore_Click()
    lbcMore.Visible = Not lbcMore.Visible
End Sub

Private Sub cmcNote_Click()
    plcCalendar.Visible = Not plcCalendar.Visible
    edcNote.SelStart = 0
    edcNote.SelLength = Len(edcMissedDt.Text)
    edcNote.SetFocus
End Sub

Private Sub cmcNote_GotFocus()
    Dim slStr As String
    
    plcCalendar.ZOrder vbBringToFront
    slStr = edcNote.Text
    If gValidDate(slStr) Then
        gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
        pbcCalendar_Paint   'mBoxCalDate called within paint
    Else
        lacDate.Visible = False
    End If
End Sub

Private Sub cmcRectify_Click()
    Dim slDate As String
    Dim llDate As Long
    Dim llAvDate As Long
    'Unload IconTraf
    'If Not gWinRoom(igNoExeWinRes(UNSCHDEXE)) Then
    '    Exit Sub
    'End If
    'igChildDone = False 'edcLinkDestDoneMsg.Text = ""
    'edcLinkSrceDoneMsg.Text = ""
    'If (Not igStdAloneMode) And (imShowHelpMsg) Then
    '    If igTestSystem Then
    '        slStr = "Spots^Test\" & sgUserName & "\" & "Hold"
    '    Else
    '        slStr = "Spots^Prod\" & sgUserName & "\" & "Hold"
    '    End If
    'Else
    '    If igTestSystem Then
    '        slStr = "Spots^Test^NOHELP\" & sgUserName & "\" & "Hold"
    '    Else
    '        slStr = "Spots^Prod^NOHELP\" & sgUserName & "\" & "Hold"
    '    End If
    'End If
    'lgShellRet = Shell(sgExePath & "UnSchd.Exe " & slStr, 1)
    'Spots.Enabled = False
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    'slStr = sgDoneMsg
    'Spots.Enabled = True
    'edcLinkSrceDoneMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    UnSchd.Show vbModal
    DoEvents
    smSdfMdExtTag = ""
    smAdMdSdfMdExtTag = ""
    'If plcL1Date.Caption <> "" Then
    If Trim$(edcLog1Dt.Text) <> "" Then
        pbcLog1.Cls
        mHbcL1DateChange
        If imLog2Type = 4 Then
            pbcLog2.Cls
            mHbcL2DateChange
        End If
        slDate = edcLog1Dt.Text 'plcL1Date.Caption
        '4/16/11
        If tmVef.sType <> "G" Then
            llDate = gDateValue(gObtainPrevMonday(slDate))
            slDate = edcAvDate.Text 'plcAvDate.Caption
            llAvDate = gDateValue(slDate)
            If llAvDate = llDate Then
                mHbcAdvtDateChange
            End If
        End If
    Else
        If imLog2Type = 4 Then
            pbcLog2.Cls
            mHbcL2DateChange
        End If
        'If plcDate.Caption <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            pbcContract.Cls
            mHbcAdvtDateChange
        End If
    End If
    'Inserted DoEvent like cmcFill had, removed this code
    'If plcAdvertiser.Visible Then
    '    plcAdvertiser.Visible = False
    '    plcAdvertiser.Visible = True
    '    plcCalendar.Visible = False
    '    plcCalendar.Visible = True
    'End If
    'If plcTime.Visible Then
    '    plcTime.Visible = False
    '    plcTime.Visible = True
    'End If
    Screen.MousePointer = vbDefault    'Default
End Sub
Private Sub cmcRectify_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcRectify_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    lbcSort.Visible = False
End Sub
Private Sub cmcRectify_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub cmcReSchd_Click()
    Dim ilRet As Integer
    ilRet = mSchdUnschd()
End Sub
Private Sub cmcReSchd_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcReSchd_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    lbcSort.Visible = False
    imIgnoreChg = False
    mClearDrag False
End Sub
Private Sub cmcReSchd_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub cmcSort_Click()
    If lbcSort.Visible Then
        lbcSort.Visible = False
    Else
        lbcSort.Visible = True
        lbcSort.ZOrder
    End If
End Sub

Private Sub cmcSpotAction_Click()
    '5/5/11: Active manual contract for game
    If tmVef.sType <> "G" Then
        If (Trim$(edcDate.Text) <> "") And (imDW <> 0) Then
            igSpotActionVefCode = imVehCode
            sgSpotActionDefaultDate = Trim$(edcDate.Text)
        ElseIf (Trim$(edcLog1Dt.Text) <> "") And (imDW = 0) Then
            igSpotActionVefCode = imVehCode
            sgSpotActionDefaultDate = Trim$(edcLog1Dt.Text)
        Else
            igSpotActionVefCode = -1
            sgSpotActionDefaultDate = ""
        End If
    '5/5/11: Active manual contract for game
    Else
        If imDW <> 0 Then
            mGetEdcDate 0
            sgSpotActionDefaultDate = smEdcDate
        Else
            sgSpotActionDefaultDate = mGetL1GameDate()
        End If
        If sgSpotActionDefaultDate <> "" Then
            igSpotActionVefCode = imVehCode
        Else
            igSpotActionVefCode = -1
        End If
    End If
    '10/12/15: Save work area
    mAddWorkToSXF   'Save work
    bmWorkPopulated = False
    '5/5/11
    igSpotActionReturn = 0    '0=No change; 1=Spot filled within week
    SpotAction.Show vbModal
    tmcClick.Enabled = False
    If igSpotActionReturn > 0 Then
        'If plcDate.Caption <> "" Then
        Screen.MousePointer = vbHourglass
        If imDW = 0 Then
            mHbcL1DateChange
            If (imLog2Type = 4) And (Trim$(edcLog2Dt.Text) <> "") Then   'Log date
                mHbcL2DateChange
            ElseIf (imLog2Type <= 3) Or (imLog2Type >= 10) Then
                mBuildMissedView 0, True
            End If
        End If
        If Trim$(edcDate.Text) <> "" Then
            mForceRepaintWeekly False
        Else
            '10/12/15: Moved cmcClearWork
            cmcClearWork_Click 0
        End If
        igSpotMGReturn = 0    '0=No change; 1=Spot filled within week
        'cmcClearWork_Click 0
        'cmcClearWork_Click 1
        pbcLog1.Cls 'pbcLog1_Paint
        pbcLog2.Cls
        pbcAvail.Cls 'pbcAvail_Paint
        pbcLog1_Paint 'pbcLog1_Paint
        pbcLog2_Paint
        pbcAvail_Paint 'pbcAvail_Paint
        Screen.MousePointer = vbDefault
    Else
        '10/12/15: Restore work area
        Screen.MousePointer = vbHourglass
        mPopWorkArea
        pbcAdWorkArea.Visible = False
        DoEvents
        pbcAdWorkArea.Visible = True
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub cmcSpotAction_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub cmcSpotAction_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    lbcSort.Visible = False
    imIgnoreChg = False
    mClearDrag False
End Sub

Private Sub cmcWeeks_Click()
    Dim llDate As Long
    Dim slDate As String
    Dim llExtendDate As Long
    Dim llSundayDate As Long
    Dim ilLogDate0 As Integer
    Dim ilLogDate1 As Integer
    Dim ilRet As Integer
    igSpotWksReturn = 0    '0=No change; 1=Extend weeks
    llDate = lmCLatestDate
    slDate = Format$(llDate, "m/d/yy")
    sgSpotWksStartDate = gObtainNextMonday(slDate)
    llExtendDate = gDateValue(sgSpotWksStartDate)
    sgSpotWksVehName = smVehName
    SpotWks.Show vbModal
    tmcClick.Enabled = False
    If igSpotWksReturn > 0 Then
        Screen.MousePointer = vbHourglass
        llSundayDate = llExtendDate + 7 * igSpotWksReturn - 1
        For llDate = llExtendDate To llSundayDate Step 1
            slDate = Format$(llDate, "m/d/yy")
            gPackDate slDate, ilLogDate0, ilLogDate1
            ilRet = gExtendTFN(hmLcf, hmSsf, hmSdf, hmSmf, "C", imVehCode, ilLogDate0, ilLogDate1, False)
            If Not ilRet Then
                Screen.MousePointer = vbDefault    'Default
                Exit Sub
            End If
        Next llDate
        lmCLatestDate = llSundayDate
        'imIgnoreChg = True
        'hbcContract.Max = (lmCLatestDate - lmCEarliestDate) \ 7 + 1 '1 for adjusting
        'imIgnoreChg = True
        'hbcAvDate.Max = hbcContract.Max '1 for adjusting
        'imIgnoreChg = True
        'hbcL1Date.Max = (lmCLatestDate - lmCEarliestDate) + 1  '1 for adjusting
        'imIgnoreChg = True
        'hbcL2Date.Max = (lmCLatestDate - lmCEarliestDate) + 1   'hbcL1Date.Max
        'imIgnoreChg = True
        'hbcAdMdDate.Max = (lmCLatestDate - lmCEarliestDate) + 1'hbcL1Date.Max
        igSpotWksReturn = 0    '0=No change; 1=Extend weeks
        Screen.MousePointer = vbDefault
    End If
End Sub
Private Sub cmcWeeks_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub cmcWeeks_GotFocus()
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
    lbcSort.Visible = False
    imIgnoreChg = False
    mClearDrag False
End Sub
Private Sub cmcWhere_Click()
    imShowWhere = True
    If (imDW = 0) Then
        pbcAvail.Cls
        pbcAvail_Paint
    End If
End Sub
Private Sub cmcWhere_DragDrop(Source As control, X As Single, Y As Single)
    mClearDrag True
End Sub
Private Sub cmcWhere_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    imInWhere = True
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub cmcWhere_LostFocus()
    imInWhere = False
End Sub
Private Sub cmcWhere_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If imInWhere Then
        Exit Sub
    End If
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub edcAvDate_Change()
    Dim slDate As String
    Dim llDate As Long
    Dim slStr As String
    '4/16/11
    Dim ilSelectedGameNo As Integer
    If imAdvtBuild Then
        Exit Sub
    End If
    '4/16/11
    'If tmVef.sType = "G" Then
    '    Exit Sub
    'End If
    imFirstAv = False
    If tmVef.sType <> "G" Then
        slDate = edcAvDate.Text
        If Not gValidDate(slDate) Then
            lacDate.Visible = False
        Else
            If gWeekDayStr(slDate) <> 0 Then
                slDate = gObtainPrevMonday(slDate)
                edcAvDate.Text = slDate
                Exit Sub
            End If
            lacDate.Visible = True
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            slDate = gFormatDate(slDate)
            llDate = gDateValue(slDate)
            If llDate < lmEarliestAllowedDate Then
                edcAvDate.ForeColor = RED
            ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
                edcAvDate.ForeColor = MAGENTA
            Else
                edcAvDate.ForeColor = BLUE 'DARKPURPLE'BLUE
            End If
            'If hbcContract.Value = (llDate - lmCEarliestDate) \ 7 + 1 Then
            '    hbcContract_Change
            'Else
            '    hbcContract.Value = (llDate - lmCEarliestDate) \ 7 + 1
            'End If
             slStr = edcDate.Text
             If gDateValue(slStr) <> gDateValue(slDate) Then
                edcDate.Text = slDate
             Else
                edcDate_Change
             End If
            'If Not imAdvtBuild Then
                plcCalendar.Visible = False
            '    mHbcAdvtDateChange
            'End If
            'pbcAvail.Cls
            'pbcAvail_Paint
            Screen.MousePointer = vbDefault    'Default
        End If
    Else
        imLbcArrowSetting = True
        gMatchLookAhead edcAvDate, lbcGameNo(3), imBSMode, imGameNoComboBoxIndex
        ilSelectedGameNo = lbcGameNo(3).ListIndex
        tmcClick.Enabled = False
        DoEvents
        If ilSelectedGameNo <> -1 Then
            imSelectDelay = True
            imDelayType = 5
            tmcClick.Interval = 3000    '2 seconds
            tmcClick.Enabled = True
        End If
        imLbcArrowSetting = False
    End If
End Sub
Private Sub edcAvDate_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub edcAvDate_GotFocus()
    Dim slDate As String
    imL1OrL2 = 3
    imGameNoIndex = 3
    slDate = edcAvDate.Text
    If (slDate = "") And (imFirstAv) Then
        imFirstAv = False
        '4/16/11
        If tmVef.sType <> "G" Then
            If lmEarliestAllowedDate > 0 Then
                slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
            Else
                slDate = Format$(lmNowDatePlus1, "m/d/yy")
            End If
            slDate = gObtainPrevMonday(slDate)
            'edcLog1Dt.Text = slDate
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            lacDate.Visible = False
        End If
    End If
    '4/16/11
    If tmVef.sType = "G" Then
        imGameNoComboBoxIndex = lbcGameNo(3).ListIndex
    End If
    'plcCalendar.Visible = False
    plcCalendar.Move plcTime.Left + edcAvDate.Left, plcTime.Top + edcAvDate.Top - plcCalendar.height
    lbcGameNo(3).Move plcTime.Left + edcAvDate.Left, plcTime.Top + edcAvDate.Top - lbcGameNo(3).height
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcAvDate_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcAvDate_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcAvDate_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String

    '4/16/11
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
                plcCalendar.Visible = Not plcCalendar.Visible
            Else
                slDate = edcAvDate.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYUP Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                    End If
                    slDate = gObtainPrevMonday(slDate)
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcAvDate.Text = slDate
                End If
            End If
        Else
            gProcessArrowKey Shift, KeyCode, lbcGameNo(3), imLbcArrowSetting
        End If
        edcAvDate.SelStart = 0
        edcAvDate.SelLength = Len(edcAvDate.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
            Else
                slDate = edcAvDate.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYLEFT Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                    End If
                    slDate = gObtainPrevMonday(slDate)
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcAvDate.Text = slDate
                End If
            End If
            edcAvDate.SelStart = 0
            edcAvDate.SelLength = Len(edcAvDate.Text)
        End If
    End If
End Sub
Private Sub edcAvDate_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub edcDate_Change()
    Dim slDate As String
    Dim llDate As Long
    imFirstDate = False
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    If (tmcClick.Enabled And (imDelayType <> 4)) Then
        'pbcClickFocus.SetFocus
        Exit Sub
    End If
    'mClearDrag True
    DoEvents
    If tmVef.sType <> "G" Then
        slDate = edcDate.Text
        If Not gValidDate(slDate) Then
            lacDate.Visible = False
        Else
            'If gWeekDayStr(slDate) <> 0 Then
            '    slDate = gObtainPrevMonday(slDate)
            '    edcDate.Text = slDate
            '    Exit Sub
            'End If
            lacDate.Visible = True
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            slDate = gFormatDate(slDate)
            llDate = gDateValue(slDate)
            If llDate < lmEarliestAllowedDate Then
                edcDate.ForeColor = RED
            ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
                edcDate.ForeColor = MAGENTA
            Else
                edcDate.ForeColor = BLUE 'DARKPURPLE'BLUE
            End If
            'plcL1Date.Caption = slDate
            tmcClick.Enabled = False
            imSelectDelay = True
            imDelayType = 4
            tmcClick.Interval = 3000    '2 seconds
            tmcClick.Enabled = True
            pbcContract.Cls
        End If
    Else
        imLbcArrowSetting = True
        gMatchLookAhead edcDate, lbcGameNo(0), imBSMode, imGameNoComboBoxIndex
        imSelectedGameNo = lbcGameNo(0).ListIndex
        tmcClick.Enabled = False
        DoEvents
        If imSelectedGameNo <> -1 Then
            imSelectDelay = True
            imDelayType = 4
            tmcClick.Interval = 3000    '2 seconds
            tmcClick.Enabled = True
            pbcContract.Cls
        End If
        imLbcArrowSetting = False
    End If
End Sub
Private Sub edcDate_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub edcDate_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGCONTRACT, State, 0
End Sub
Private Sub edcDate_GotFocus()
    Dim slDate As String
    Dim ilGsf As Integer
    Dim ilLoop As Integer

    If imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (tmcClick.Enabled And (imDelayType <> 4)) Then
        'pbcClickFocus.SetFocus
        Exit Sub
    End If
    'If Trim$(plcDate.Caption) = "" Then
    '    hbcContract_Change  'Force change event so week shows up
    'End If
    imGameNoIndex = 0
    imL1OrL2 = 4
    slDate = edcDate.Text
    If (slDate = "") And (imFirstDate) Then
        imFirstDate = False
        If tmVef.sType <> "G" Then
            If lmEarliestAllowedDate > 0 Then
                slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
            Else
                slDate = gObtainNextMonday(Format$(lmNowDatePlus1, "m/d/yy"))
            End If
            slDate = gObtainPrevMonday(slDate)
            'edcLog1Dt.Text = slDate
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            lacDate.Visible = False
        Else
            For ilLoop = 0 To lbcGameNo(0).ListCount - 1 Step 1
                ilGsf = lbcGameNo(0).ItemData(ilLoop)
                If tmGsfInfo(ilGsf).lGameDate >= lmEarliestAllowedDate Then
                    lbcGameNo(0).ListIndex = ilLoop
                    Exit For
                End If
            Next ilLoop
        End If
    End If
    If tmVef.sType = "G" Then
        imGameNoComboBoxIndex = lbcGameNo(0).ListIndex
    End If
    'tmcClick.Enabled = False
    plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
    lbcGameNo(0).Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcDate_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcDate_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcDate_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String

    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
                plcCalendar.Visible = Not plcCalendar.Visible
            Else
                slDate = edcDate.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYUP Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                    End If
                    slDate = gObtainPrevMonday(slDate)
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcDate.Text = slDate
                End If
            End If
        Else
            gProcessArrowKey Shift, KeyCode, lbcGameNo(0), imLbcArrowSetting
        End If
        edcDate.SelStart = 0
        edcDate.SelLength = Len(edcDate.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
            Else
                slDate = edcDate.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYLEFT Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                    End If
                    slDate = gObtainPrevMonday(slDate)
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcDate.Text = slDate
                End If
            End If
            edcDate.SelStart = 0
            edcDate.SelLength = Len(edcDate.Text)
        End If
    End If
End Sub
Private Sub edcDate_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub edcDW_Change()
    tmcSetShow.Enabled = False
    imLbcArrowSetting = True
    gMatchLookAhead edcDW, lbcDW, imBSMode, imComboBoxIndex
    imLbcArrowSetting = False
    imDWIndex = lbcDW.ListIndex
    tmcSetShow.Enabled = True
End Sub

Private Sub edcDW_Click()
    edcDW_Change
End Sub

Private Sub edcDW_GotFocus()
    lbcGameNo(0).Visible = False
    lbcGameNo(1).Visible = False
    lbcGameNo(2).Visible = False
    lbcGameNo(3).Visible = False
    plcCalendar.Visible = False
    imComboBoxIndex = lbcDW.ListIndex
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcDW_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcDW_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcDW.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcDW_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        gProcessArrowKey Shift, KeyCode, lbcDW, imLbcArrowSetting
        edcMore.SelStart = 0
        edcMore.SelLength = Len(edcDW.Text)
    End If
End Sub

Private Sub edcLinkDestDoneMsg_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub edcLinkDestHelpMsg_Change()
    igParentRestarted = True
End Sub
Private Sub edcLog1Dt_Change()
    Dim slDate As String
    Dim llDate As Long
    '4/16/11
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    
    imFirstLog1 = False
    '4/16/11
    If tmVef.sType <> "G" Then
        slDate = edcLog1Dt.Text
        If Not gValidDate(slDate) Then
            lacDate.Visible = False
        Else
            lacDate.Visible = True
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            slDate = gFormatDate(slDate)
            llDate = gDateValue(slDate)
            If llDate < lmEarliestAllowedDate Then
                edcLog1Dt.ForeColor = RED
            ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
                edcLog1Dt.ForeColor = MAGENTA
            Else
                edcLog1Dt.ForeColor = BLUE 'DARKPURPLE'BLUE
            End If
            DoEvents
            'plcL1Date.Caption = slDate
            tmcClick.Enabled = False
            imSelectDelay = True
            imDelayType = 1
            tmcClick.Interval = 3000    '2 seconds
            tmcClick.Enabled = True
        End If
    Else
        tmcClick.Enabled = False
        imLbcArrowSetting = True
        gMatchLookAhead edcLog1Dt, lbcGameNo(1), imBSMode, imGameNoComboBoxIndex
        imSelectedGameNo = lbcGameNo(1).ListIndex
        DoEvents
        If imSelectedGameNo <> -1 Then
            imSelectDelay = True
            imDelayType = 1
            tmcClick.Interval = 3000    '2 seconds
            tmcClick.Enabled = True
        End If
        imLbcArrowSetting = False
    End If
End Sub
Private Sub edcLog1Dt_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub edcLog1Dt_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 0
End Sub
Private Sub edcLog1Dt_GotFocus()
    Dim slDate As String
    '4/16/11
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    
    imL1OrL2 = 1
    imGameNoIndex = 1
    slDate = edcLog1Dt.Text
    If (slDate = "") And (imFirstLog1) Then
        '4/16/11
        imFirstLog1 = False
        If tmVef.sType <> "G" Then
            If lmEarliestAllowedDate > 0 Then
                slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
            Else
                slDate = Format$(lmNowDatePlus1, "m/d/yy")
            End If
            'edcLog1Dt.Text = slDate
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            lacDate.Visible = False
        Else
            For ilLoop = 0 To lbcGameNo(1).ListCount - 1 Step 1
                ilGsf = lbcGameNo(1).ItemData(ilLoop)
                If tmGsfInfo(ilGsf).lGameDate >= lmEarliestAllowedDate Then
                    lbcGameNo(1).ListIndex = ilLoop
                    Exit For
                End If
            Next ilLoop
        End If
    End If
    '4/16/11
    If tmVef.sType = "G" Then
        imGameNoComboBoxIndex = lbcGameNo(1).ListIndex
    End If
    'plcCalendar.Visible = False
    plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
    '4/16/11
    lbcGameNo(1).Move pbcSelect(0).Left + edcLog1Dt.Left, pbcSelect(0).Top + edcDate.Top + edcLog1Dt.height + 15
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcLog1Dt_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcLog1Dt_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    'Filter characters (allow only BackSpace, numbers 0 thru 9
    If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
        Beep
        KeyAscii = 0
        Exit Sub
    End If
End Sub
Private Sub edcLog1Dt_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    '4/16/11
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
                plcCalendar.Visible = Not plcCalendar.Visible
            Else
                slDate = edcLog1Dt.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYUP Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                    End If
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcLog1Dt.Text = slDate
                End If
            End If
        Else
            gProcessArrowKey Shift, KeyCode, lbcGameNo(1), imLbcArrowSetting
        End If
        edcLog1Dt.SelStart = 0
        edcLog1Dt.SelLength = Len(edcLog1Dt.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
            Else
                slDate = edcLog1Dt.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYLEFT Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                    End If
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcLog1Dt.Text = slDate
                End If
            End If
            edcLog1Dt.SelStart = 0
            edcLog1Dt.SelLength = Len(edcLog1Dt.Text)
        End If
    End If
End Sub
Private Sub edcLog1Dt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub edcLog2Dt_Change()
    Dim slDate As String
    Dim llDate As Long
    '4/16/11
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    
    imFirstLog2 = False
    pbcLog2.Cls
    If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Log day
        '4/16/11
        If tmVef.sType <> "G" Then
            slDate = edcLog2Dt.Text
            If Not gValidDate(slDate) Then
                lacDate.Visible = False
            Else
                lacDate.Visible = True
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
                slDate = gFormatDate(slDate)
                llDate = gDateValue(slDate)
                If imLog2Type = 4 Then
                    If llDate < lmEarliestAllowedDate Then
                        edcLog2Dt.ForeColor = RED
                    ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
                        edcLog2Dt.ForeColor = MAGENTA
                    Else
                        edcLog2Dt.ForeColor = BLUE 'DARKPURPLE'BLUE
                    End If
                Else
                    edcLog2Dt.ForeColor = BLUE 'DARKPURPLE'BLUE
                End If
                If Not imProcVefChg Then
                    'plcL1Date.Caption = slDate
                    tmcClick.Enabled = False
                    imSelectDelay = True
                    imDelayType = 2
                    tmcClick.Interval = 3000    '2 seconds
                    tmcClick.Enabled = True
                End If
            End If
        Else
            If imLog2Type = 4 Then
                imLbcArrowSetting = True
                gMatchLookAhead edcLog2Dt, lbcGameNo(2), imBSMode, imGameNoComboBoxIndex
                imSelectedGameNo = lbcGameNo(2).ListIndex
                tmcClick.Enabled = False
                DoEvents
                If imSelectedGameNo <> -1 Then
                    imSelectDelay = True
                    imDelayType = 2
                    tmcClick.Interval = 3000    '2 seconds
                    tmcClick.Enabled = True
                End If
                imLbcArrowSetting = False
            End If
        End If
    ElseIf imLog2Type = 3 Then  'Missed by advertiser
        imLbcArrowSetting = True
        gMatchLookAhead edcLog2Dt, lbcAdvt, imBSMode, imAdvtComboBoxIndex
        imSelectedAdvt = lbcAdvt.ListIndex
        mBuildMissedView 0, False
        imLbcArrowSetting = False
    End If
End Sub
Private Sub edcLog2Dt_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub edcLog2Dt_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG2, State, 0
End Sub
Private Sub edcLog2Dt_GotFocus()
    Dim slDate As String
    '4/16/11
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    imGameNoIndex = 2
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Log day
        imL1OrL2 = 2
        slDate = edcLog2Dt.Text
        If (slDate = "") And (imFirstLog2) Then
            imFirstLog2 = False
            '4/16/11
            If tmVef.sType <> "G" Then
                slDate = edcLog1Dt.Text
                If slDate = "" Then
                    If lmEarliestAllowedDate > 0 Then
                        slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
                    Else
                        slDate = Format$(lmNowDatePlus1, "m/d/yy")
                    End If
                End If
                'edcLog2Dt.Text = slDate
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
                lacDate.Visible = False
            Else
                If imLog2Type = 4 Then
                    For ilLoop = 0 To lbcGameNo(2).ListCount - 1 Step 1
                        ilGsf = lbcGameNo(2).ItemData(ilLoop)
                        If tmGsfInfo(ilGsf).lGameDate >= lmEarliestAllowedDate Then
                            lbcGameNo(2).ListIndex = ilLoop
                            Exit For
                        End If
                    Next ilLoop
                End If
            End If
        End If
    ElseIf imLog2Type = 3 Then  'Missed by advertiser
        lbcLog2Type.Visible = False
        'lbcAdvt.Move plcTime.Left + edcLog2Dt.Left, plcTime.Top + edcLog2Dt.Top + edcLog2Dt.Height
        'lbcAdvt.Move pbcSelect(0).Left + cmcMissedLog2.Left + cmcMissedLog2.Width - lbcAdvt.Width, pbcSelect(0).Top + edcMissedLog2.Top + edcMissedLog2.Height
        lbcAdvt.Left = edcLog2Dt.Left
        lbcAdvt.Top = edcLog2Type.Top + edcLog2Type.height
        imAdvtComboBoxIndex = imSelectedAdvt
    End If
    '4/16/11
    If tmVef.sType = "G" Then
        imGameNoComboBoxIndex = lbcGameNo(2).ListIndex
    End If
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcLog2Dt_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcLog2Dt_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Log day
        'Filter characters (allow only BackSpace, numbers 0 thru 9
        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
    End If
End Sub
Private Sub edcLog2Dt_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    '4/16/11
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
                If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then    'Missed date or Log2 or Cancelled or Hidden
                    plcCalendar.Visible = Not plcCalendar.Visible
                ElseIf imLog2Type = 3 Then  'Missed by advt
                    lbcAdvt.Visible = Not lbcAdvt.Visible
                End If
            Else
                If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed date or Log2 or Cancelled or Hidden
                    slDate = edcLog2Dt.Text
                    If gValidDate(slDate) Then
                        If KeyCode = KEYUP Then 'Up arrow
                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                        Else
                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                        End If
                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                        edcLog2Dt.Text = slDate
                    End If
                ElseIf imLog2Type = 3 Then
                    gProcessArrowKey Shift, KeyCode, lbcAdvt, imLbcArrowSetting
                End If
            End If
        Else
            If imLog2Type = 4 Then
                gProcessArrowKey Shift, KeyCode, lbcGameNo(2), imLbcArrowSetting
            End If
        End If
        edcLog2Dt.SelStart = 0
        edcLog2Dt.SelLength = Len(edcLog2Dt.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If tmVef.sType <> "G" Then
            If (Shift And vbAltMask) > 0 Then
            Else
                If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Then   'Missed date or Log2 or Cancelled Or Hidden
                    slDate = edcLog2Dt.Text
                    If gValidDate(slDate) Then
                        If KeyCode = KEYLEFT Then 'Up arrow
                            slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                        Else
                            slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                        End If
                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                        edcLog2Dt.Text = slDate
                    End If
                End If
            End If
            edcLog2Dt.SelStart = 0
            edcLog2Dt.SelLength = Len(edcLog2Dt.Text)
        End If
    End If
End Sub
Private Sub edcLog2Dt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    'mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub edcLog2Type_Change()
    Dim ilLoop As Integer
    Screen.MousePointer = vbHourglass  'Wait
    imLbcArrowSetting = True
    gMatchLookAhead edcLog2Type, lbcLog2Type, imBSMode, imL2TypeComboBoxIndex
    If (imLog2Type = 0) And (imLog2Show = 1) And (lbcLog2Type.ListIndex <> 1) Then
        ReDim tmSdfMdExt(LBound(tmSvSdfMdExt) To UBound(tmSvSdfMdExt)) As SDFMDEXT
        For ilLoop = LBound(tmSvSdfMdExt) To UBound(tmSvSdfMdExt) Step 1
            tmSdfMdExt(ilLoop) = tmSvSdfMdExt(ilLoop)
        Next ilLoop
    End If
    If lbcLog2Type.ListIndex < 0 Then
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    'imLog2Type = lbcLog2Type.ListIndex
    ''If imLog2Type = 0 Then
    ''    imLog2Show = 0
    ''ElseIf imLog2Type = 1 Then
    ''    imLog2Type = 0
    ''    imLog2Show = 1
    ''Else
    ''    imLog2Type = imLog2Type - 1
    ''End If
    'If tgSpf.sSchdRemnant = "Y" Then
    '    If imLog2Type >= 5 Then
    '        imLog2Type = imLog2Type + 1
    '    End If
    'End If
    imLog2Type = imLog2Map(lbcLog2Type.ListIndex)
    tmCtrls(MISSEDAREAINDEX).sShow = ""
    pbcMissed.Cls
    pbcLog2.Cls
    If imLog2Type = 4 Then  'Log date
        'hbcL2Date.Width = 705
        plcLog2Tm.Visible = True
        'hbcL2Date.Visible = True
        'plcL2Date.Visible = True
        edcLog2Dt.Left = 7500   '6060
        edcLog2Dt.Top = 30
        cmcLog2Dt.Left = edcLog2Dt.Left + edcLog2Dt.Width
        cmcLog2Dt.Top = edcLog2Dt.Top
        edcLog2Dt.Visible = True
        cmcLog2Dt.Visible = True
        'If smLog2Date <> "" Then
        '    llDate = gDateValue(smLog2Date)
        '    If (llDate >= lmCEarliestDate) And (llDate <= lmCLatestDate) Then
        '        ilValue = (llDate - lmCEarliestDate) + 1
        '    Else
        '        If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
        '            ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
        '        Else
        '            ilValue = hbcL2Date.Min
        '        End If
        '    End If
        'Else
        '    If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
        '        ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
        '    Else
        '        ilValue = hbcL2Date.Min
        '    End If
        'End If
        'imIgnoreChg = True
        'If hbcL2Date.Value <> ilValue Then
        '    hbcL2Date.Value = ilValue
        'Else
        '    hbcL2Date_Change
        'End If
        'imIgnoreChg = False
        edcLog2Dt.Text = smLog2Date
        mHbcL2DateChange
    ElseIf imLog2Type = 3 Then  'Missed by advertiser
        plcLog2Tm.Visible = False
        'hbcL2Date.Visible = False
        'plcL2Date.Visible = False
        edcLog2Dt.Left = 6690
        edcLog2Dt.Top = 385
        cmcLog2Dt.Left = edcLog2Dt.Left + edcLog2Dt.Width
        cmcLog2Dt.Top = edcLog2Dt.Top + 15
        edcLog2Dt.Visible = True
        cmcLog2Dt.Visible = True
        If imSelectedAdvt >= 0 Then
            If edcLog2Dt.Text <> lbcAdvt.List(imSelectedAdvt) Then
                edcLog2Dt.Text = lbcAdvt.List(imSelectedAdvt)
            Else
                edcLog2Dt_Change
            End If
        Else
            If edcLog2Dt.Text <> "" Then
                edcLog2Dt.Text = ""
            Else
                edcLog2Dt_Change
            End If
        End If
    ElseIf (imLog2Type = 0) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed or Cancelled Or Hidden by date
        plcLog2Tm.Visible = False
        edcLog2Dt.Left = 6690
        edcLog2Dt.Top = 385
        cmcLog2Dt.Left = edcLog2Dt.Left + edcLog2Dt.Width
        cmcLog2Dt.Top = edcLog2Dt.Top + 15
        '4/16/11
        If tmVef.sType <> "G" Then
            If imDW = 0 Then
                edcLog2Dt.Visible = True
                cmcLog2Dt.Visible = True
            End If
        Else
            edcLog2Dt.Visible = False
            cmcLog2Dt.Visible = False
        End If
        'hbcL2Date.Width = 1770
        'hbcL2Date.Visible = True
        'plcL2Date.Visible = True
        'If smMissedDate <> "" Then
        '    llDate = gDateValue(smMissedDate)
        '    If (llDate >= lmCEarliestDate) And (llDate <= lmCLatestDate) Then
        '        ilValue = (llDate - lmCEarliestDate) + 1
        '    Else
        '        If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
        '            ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
        '        Else
        '            ilValue = hbcL2Date.Min
        '        End If
        '    End If
        'Else
        '    If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
        '        ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
        '    Else
        '        ilValue = hbcL2Date.Min
        '    End If
        'End If
        'imIgnoreChg = True
        'If hbcL2Date.Value <> ilValue Then
        '    hbcL2Date.Value = ilValue
        'Else
        '    hbcL2Date_Change
        'End If
        'imIgnoreChg = False
        If tmVef.sType <> "G" Then
            edcLog2Dt.Text = smMissedDate
        End If
        mHbcL2DateChange
    ElseIf (imLog2Type = 1) Or (imLog2Type = 2) Then
        plcLog2Tm.Visible = False
        'hbcL2Date.Visible = False
        'plcL2Date.Visible = False
        edcLog2Dt.Visible = False
        cmcLog2Dt.Visible = False
        mBuildMissedView 0, False
    Else    'Non scheduled contracts
        plcLog2Tm.Visible = False
        'hbcL2Date.Visible = False
        'plcL2Date.Visible = False
        edcLog2Dt.Visible = False
        cmcLog2Dt.Visible = False
        mManSchPop 0, imLog2Type, lmL2ManSchCode(), imL2ManSchInfo(), lmL2ManSchInfo(), smL2ManSchInfo(), lbcL2ManSch, tmL2ManSchCode()
        mMakeManSchView 0
    End If
    imLbcArrowSetting = False
    Screen.MousePointer = vbDefault  'Wait
End Sub
Private Sub edcLog2Type_DragDrop(Source As control, X As Single, Y As Single)
    mClearDrag True
End Sub
Private Sub edcLog2Type_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG2, State, 0
End Sub
Private Sub edcLog2Type_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    plcCalendar.Visible = False
    lbcAdvt.Visible = False
    lbcGameNo(1).Visible = False
    lbcGameNo(2).Visible = False
    lbcGameNo(3).Visible = False
    If lbcLog2Type.ListIndex < 0 Then
        lbcLog2Type.ListIndex = 0
        imL2TypeComboBoxIndex = 0
    End If
    If tmVef.sType = "G" Then
        If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
            edcLog2Dt.Visible = False
            cmcLog2Dt.Visible = False
        End If
    End If
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
    imL2TypeComboBoxIndex = lbcLog2Type.ListIndex
End Sub
Private Sub edcLog2Type_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcLog2Type_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
End Sub
Private Sub edcLog2Type_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        gProcessArrowKey Shift, KeyCode, lbcLog2Type, imLbcArrowSetting
        edcLog2Type.SelStart = 0
        edcLog2Type.SelLength = Len(edcLog2Type.Text)
    End If
End Sub
Private Sub edcLog2Type_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub edcMCReason_Change()
    imLbcArrowSetting = True
    gMatchLookAhead edcMCReason, lbcMCReason, imBSMode, imComboBoxIndex
    imLbcArrowSetting = False
    If imBoxNo = CANCELREASONINDEX Then
        imCancelReason = lbcMCReason.ListIndex
    Else
        imMissedReason = lbcMCReason.ListIndex
    End If
End Sub

Private Sub edcMCReason_Click()
    edcMCReason_Change
End Sub

Private Sub edcMCReason_GotFocus()
    imComboBoxIndex = lbcMCReason.ListIndex
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcMCReason_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcMCReason_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcMCReason.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcMCReason_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        gProcessArrowKey Shift, KeyCode, lbcMCReason, imLbcArrowSetting
        edcMCReason.SelStart = 0
        edcMCReason.SelLength = Len(edcMCReason.Text)
    End If
End Sub
Private Sub edcMissedDt_Change()
    Dim slDate As String
    Dim llDate As Long
    pbcMissed.Cls
    imFirstMissed = False
    If imAdMdType = 3 Then  'Missed by advertiser
        imLbcArrowSetting = True
        gMatchLookAhead edcMissedDt, lbcAdvt, imBSMode, imAdMdAdvtComboBoxIndex
        imAdMdSelectedAdvt = lbcAdvt.ListIndex
        mBuildMissedView 1, False
        imLbcArrowSetting = False
    ElseIf (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by Date
        slDate = edcMissedDt.Text
        If Not gValidDate(slDate) Then
            lacDate.Visible = False
        Else
            lacDate.Visible = True
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            slDate = gFormatDate(slDate)
            llDate = gDateValue(slDate)
            edcMissedDt.ForeColor = BLUE 'DARKPURPLE'BLUE
            If Not imProcVefChg Then
                'plcAdMdDate.Caption = slDate
                smAdMdMissedDate = slDate
                tmcClick.Enabled = False
                imSelectDelay = True
                imDelayType = 3
                tmcClick.Interval = 3000    '2 seconds
                tmcClick.Enabled = True
            End If
        End If
    End If
End Sub
Private Sub edcMissedDt_GotFocus()
    Dim slDate As String
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    'When first starting this is getting focus, then vehicle drop down
    'Force back to vehicle
    If Trim$(edcDate.Text) = "" Then
        cbcVehicle.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    'lbcAdvt.Move plcAdvertiser.Left + edcMissedDt.Left, plcAdvertiser.Top + edcMissedDt.Top - lbcAdvt.Height
    'lbcAdvt.Move plcAdvertiser.Left + cmcMissedDt.Left + cmcMissedDt.Width - lbcAdvt.Width, plcAdvertiser.Top + edcMissedDt.Top - lbcAdvt.Height
    If imAdMdType = 3 Then  'Missed by advertiser
        imAdMdAdvtComboBoxIndex = imAdMdSelectedAdvt
    ElseIf (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by Date
        imL1OrL2 = 5
        slDate = edcMissedDt.Text
        If (slDate = "") And (imFirstMissed) Then
            imFirstMissed = False

            'slDate = edcDate.Text
            mGetEdcDate 0
            slDate = smEdcDate
            If slDate = "" Then
                If lmEarliestAllowedDate > 0 Then
                    slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
                Else
                    slDate = Format$(lmNowDatePlus1, "m/d/yy")
                End If
            End If
            'edcLog2Dt.Text = slDate
            gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
            pbcCalendar_Paint   'mBoxCalDate called within paint
            lacDate.Visible = False
        End If
    End If
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
End Sub
Private Sub edcMissedDt_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcMissedDt_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcMissedDt.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by Date
        'Filter characters (allow only BackSpace, numbers 0 thru 9
        If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
            Beep
            KeyAscii = 0
            Exit Sub
        End If
    End If
End Sub
Private Sub edcMissedDt_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        If (Shift And vbAltMask) > 0 Then
            If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then     'Missed date
                plcCalendar.Visible = Not plcCalendar.Visible
            ElseIf imAdMdType = 3 Then  'Missed by advt
                lbcAdvt.Visible = Not lbcAdvt.Visible
            End If
        Else
            If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then     'Missed date
                slDate = edcMissedDt.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYUP Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                    End If
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcMissedDt.Text = slDate
                End If
            ElseIf imAdMdType = 3 Then
                gProcessArrowKey Shift, KeyCode, lbcAdvt, imLbcArrowSetting
            End If
        End If
        edcMissedDt.SelStart = 0
        edcMissedDt.SelLength = Len(edcMissedDt.Text)
    End If
    If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
        If (Shift And vbAltMask) > 0 Then
        Else
            If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then     'Missed date
                slDate = edcMissedDt.Text
                If gValidDate(slDate) Then
                    If KeyCode = KEYLEFT Then 'Up arrow
                        slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                    Else
                        slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                    End If
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    edcMissedDt.Text = slDate
                End If
            End If
        End If
        edcMissedDt.SelStart = 0
        edcMissedDt.SelLength = Len(edcMissedDt.Text)
    End If
End Sub
Private Sub edcMissedDt_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
'    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub edcMissedType_Change()
    Dim slDate As String
    Dim llDate As Long
    Screen.MousePointer = vbHourglass  'Wait
    imLbcArrowSetting = True
    gMatchLookAhead edcMissedType, lbcAdMdType, imBSMode, imAdMdTypeComboBoxIndex
    'If (imAdMdType = 0) And (imADMdShow = 1) And (lbcAdMdType.ListIndex <> 1) Then
    '    ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
    '    For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
    '        tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
    '    Next ilLoop
    'End If
    smManSchCodeTag = ""
    smAdMdSdfMdExtTag = ""
    If lbcAdMdType.ListIndex < 0 Then
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    'imAdMdType = lbcAdMdType.ListIndex
    ''If imAdMdType = 0 Then
    ''    imAdMdShow = 0
    ''ElseIf imAdMdType = 1 Then
    ''    imAdMdType = 0
    ''    imAdMdShow = 1
    ''Else
    ''    imAdMdType = imAdMdType - 1
    ''End If
    'If tgSpf.sSchdRemnant = "Y" Then
    '    If imAdMdType >= 4 Then
    '        imAdMdType = imAdMdType + 1
    '    End If
    'End If
    edcMissedDt.Visible = False
    cmcMissedDt.Visible = False
    lbcAdvt.Visible = False
    lbcAdMdType.ZOrder vbBringToFront
    imAdMdType = imAdMdMap(lbcAdMdType.ListIndex)
    tmCtrls(MISSEDAREAINDEX).sShow = ""
    pbcMissed.Cls
    If imAdMdType <= 2 Then
        pbcSC.Visible = True
    Else
        If imAdMdType <= 2 Then
            pbcSC.Visible = True
        Else
            If tmVef.sType <> "G" Then
                If ((imAdMdType = 4) And (tgSpf.sSchdRemnant <> "Y")) Or (imAdMdType = 5) Or (imAdMdType = 6) Or ((imAdMdType = 7) And (tgSpf.sSchdPSA <> "Y")) Or ((imAdMdType = 8) And (tgSpf.sSchdPromo <> "Y")) Then
                    pbcSC.Visible = True
                Else
                    pbcSC.Visible = False
                End If
            Else
                pbcSC.Visible = False
            End If
        End If
    End If
    'If tmVef.sType = "G" Then
    '    edcMissedDt.Visible = False
    '    cmcMissedDt.Visible = False
    '    mBuildMissedView 1
    '    Screen.MousePointer = vbDefault  'Wait
    '    Exit Sub
    'End If
    If imAdMdType = 3 Then  'Missed by advertiser
        'hbcAdMdDate.Visible = False
        'plcAdMdDate.Visible = False
        edcMissedDt.Visible = True
        cmcMissedDt.Visible = True
        If imAdMdSelectedAdvt >= 0 Then
            If edcMissedDt.Text <> lbcAdvt.List(imAdMdSelectedAdvt) Then
                edcMissedDt.Text = lbcAdvt.List(imAdMdSelectedAdvt)
            Else
                edcMissedDt_Change
            End If
        Else
            If edcMissedDt.Text <> "" Then
                edcMissedDt.Text = ""
            Else
                edcMissedDt_Change
            End If
        End If
    ElseIf (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed or Cancelled or Hidden by date
        If tmVef.sType <> "G" Then
            If edcMissedType.Visible Then
                edcMissedDt.Visible = True  ' False
                cmcMissedDt.Visible = True  'False
            End If
        End If
        'hbcAdMdDate.Visible = True
        'plcAdMdDate.Visible = True
        If smAdMdMissedDate <> "" Then
            llDate = gDateValue(smAdMdMissedDate)
            'If (llDate >= lmCEarliestDate) And (llDate <= lmCLatestDate) Then
            '    ilValue = (llDate - lmCEarliestDate) + 1
            'Else
            '    If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
            '        ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
            '    Else
            '        ilValue = hbcAdMdDate.Min
            '    End If
            'End If
        Else
            'If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
            '    ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
            'Else
            '    ilValue = hbcAdMdDate.Min
            'End If
            llDate = lmEarliestAllowedDate
        End If
        If Not imProcVefChg Then
            slDate = edcMissedDt.Text
            'If hbcAdMdDate.Value <> ilValue Then
            If gDateValue(slDate) <> llDate Then
                imIgnoreChg = True
                'hbcAdMdDate.Value = ilValue
                edcMissedDt.Text = Format$(llDate, "m/d/yy")
                mHbcAdMdDateChange
                imIgnoreChg = False
            Else
                mHbcAdMdDateChange
            End If
        End If
    ElseIf (imAdMdType = 1) Or (imAdMdType = 2) Then
'        edcMissedDt.Visible = False
'        cmcMissedDt.Visible = False
'        'hbcAdMdDate.Visible = False
'        'plcAdMdDate.Visible = False
        mBuildMissedView 1, False
    ElseIf imAdMdType = 11 Then 'Extra Bonus
'        edcMissedDt.Visible = False
'        cmcMissedDt.Visible = False
'        'hbcAdMdDate.Visible = False
'        'plcAdMdDate.Visible = False
        mExtraBonusPop lmAdMdManSchCode(), imAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
        mMakeManSchView 1
    Else
'        edcMissedDt.Visible = False
'        cmcMissedDt.Visible = False
'        'hbcAdMdDate.Visible = False
'        'plcAdMdDate.Visible = False
        mManSchPop 1, imAdMdType + 1, lmAdMdManSchCode(), imAdMdManSchInfo(), lmAdMdManSchInfo(), smAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
        mMakeManSchView 1
    End If
    imLbcArrowSetting = False
    Screen.MousePointer = vbDefault  'Wait
End Sub
Private Sub edcMissedType_GotFocus()
    plcCalendar.Visible = False
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdvt.Visible = False
    'lbcAdMdType.Move plcAdvertiser.Left + edcMissedType.Left, plcAdvertiser.Top + edcMissedType.Top - lbcAdMdType.Height
    If lbcAdMdType.ListIndex < 0 Then
        lbcAdMdType.ListIndex = 0
        imAdMdTypeComboBoxIndex = 0
    End If
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False
    imAdMdTypeComboBoxIndex = lbcAdMdType.ListIndex
End Sub
Private Sub edcMissedType_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub
Private Sub edcMissedType_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
End Sub
Private Sub edcMissedType_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        gProcessArrowKey Shift, KeyCode, lbcAdMdType, imLbcArrowSetting
        edcMissedType.SelStart = 0
        edcMissedType.SelLength = Len(edcMissedType.Text)
    End If
End Sub
Private Sub edcMissedType_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    'mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub edcMore_Change()
    tmcSetShow.Enabled = False
    imLbcArrowSetting = True
    gMatchLookAhead edcMore, lbcMore, imBSMode, imComboBoxIndex
    imLbcArrowSetting = False
    imMoreIndex = lbcMore.ListIndex
    tmcSetShow.Enabled = True
End Sub

Private Sub edcMore_Click()
    edcMore_Change
End Sub

Private Sub edcMore_GotFocus()
    imComboBoxIndex = lbcMore.ListIndex
    gCtrlGotFocus ActiveControl
End Sub

Private Sub edcMore_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcMore_KeyPress(KeyAscii As Integer)
    Dim ilKey As Integer
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If edcMore.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    ilKey = KeyAscii
    If Not gCheckKeyAscii(ilKey) Then
        KeyAscii = 0
        Exit Sub
    End If
End Sub

Private Sub edcMore_KeyUp(KeyCode As Integer, Shift As Integer)
    If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
        gProcessArrowKey Shift, KeyCode, lbcMore, imLbcArrowSetting
        edcMore.SelStart = 0
        edcMore.SelLength = Len(edcMore.Text)
    End If
End Sub

Private Sub edcNote_Change()
    Dim slDate As String
    Dim llDate As Long
    Dim slStr As String
    
    Select Case imEnableCol
        Case WEEKDATEINDEX
            slDate = edcNote.Text
            If Not gValidDate(slDate) Then
                lacDate.Visible = False
            Else
                lacDate.Visible = True
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
                plcCalendar.Visible = False
            End If
        Case NOTEINDEX
    End Select
End Sub

Private Sub edcNote_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub edcNote_GotFocus()
    Dim slDate As String
    
    Select Case imEnableCol
        Case WEEKDATEINDEX
            slDate = edcNote.Text
            If (slDate = "") And (imFirstNote) Then
                imFirstNote = False
                If lmEarliestAllowedDate > 0 Then
                    slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
                Else
                    slDate = Format$(lmNowDatePlus1, "m/d/yy")
                End If
                slDate = gObtainPrevMonday(slDate)
                'edcLog1Dt.Text = slDate
                gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
                lacDate.Visible = False
            End If
        Case NOTEINDEX
    End Select
    If Not imBypassFocus Then
        gCtrlGotFocus ActiveControl
    End If
    imBypassFocus = False

End Sub

Private Sub edcNote_KeyDown(KeyCode As Integer, Shift As Integer)
    'Delete key causes the charact to the right of the cursor to be deleted
    imBSMode = False
End Sub

Private Sub edcNote_KeyPress(KeyAscii As Integer)
    If KeyAscii = 8 Then    'Process backspace key (delete key handled as a KeyDown Event)
        If ActiveControl.SelLength <> 0 Then    'avoid deleting two characters
            imBSMode = True 'Force deletion of character prior to selected text
        End If
    End If
    Select Case imEnableCol
        Case WEEKDATEINDEX
            'Filter characters (allow only BackSpace, numbers 0 thru 9
            If (KeyAscii <> KEYBACKSPACE) And ((KeyAscii < KEY0) Or (KeyAscii > KEY9)) And (KeyAscii <> KEYSLASH) Then
                Beep
                KeyAscii = 0
                Exit Sub
            End If
        Case NOTEINDEX
    End Select
End Sub

Private Sub edcNote_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim slDate As String

    Select Case imEnableCol
        Case WEEKDATEINDEX
            If (KeyCode = KEYUP) Or (KeyCode = KEYDOWN) Then
                If (Shift And vbAltMask) > 0 Then
                    plcCalendar.Visible = Not plcCalendar.Visible
                Else
                    slDate = edcNote.Text
                    If gValidDate(slDate) Then
                        If KeyCode = KEYUP Then 'Up arrow
                            slDate = Format$(gDateValue(slDate) - 7, "m/d/yy")
                        Else
                            slDate = Format$(gDateValue(slDate) + 7, "m/d/yy")
                        End If
                        slDate = gObtainPrevMonday(slDate)
                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                        edcNote.Text = slDate
                    End If
                End If
                edcNote.SelStart = 0
                edcNote.SelLength = Len(edcNote.Text)
            End If
            If (KeyCode = KEYLEFT) Or (KeyCode = KEYRIGHT) Then
                If (Shift And vbAltMask) > 0 Then
                Else
                    slDate = edcNote.Text
                    If gValidDate(slDate) Then
                        If KeyCode = KEYLEFT Then 'Up arrow
                            slDate = Format$(gDateValue(slDate) - 1, "m/d/yy")
                        Else
                            slDate = Format$(gDateValue(slDate) + 1, "m/d/yy")
                        End If
                        slDate = gObtainPrevMonday(slDate)
                        gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                        edcNote.Text = slDate
                    End If
                End If
                edcNote.SelStart = 0
                edcNote.SelLength = Len(edcNote.Text)
            End If
        Case NOTEINDEX
    End Select
End Sub

Private Sub edcNote_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    'plcConflictInfo.Visible = False
    'mClearDrag True
    'If tmcDrag.Enabled Then
    '    imDragType = -1
    '    imDragSrce = -1
    '    tmcDrag.Enabled = False
    'End If
End Sub

Private Sub Form_Activate()

    If Not imFirstActivate Then
        DoEvents    'Process events so pending keys are not sent to this
                    'form when keypreview turn on
        gShowBranner imUpdateAllowed
        Screen.MousePointer = vbHourglass
        pbcMissed.Cls
        pbcMissed_Paint
        pbcAdWorkArea.Cls
        pbcAdWorkArea_Paint
        Screen.MousePointer = vbDefault
        Me.KeyPreview = True  'To get Alt J and Alt L keys
        Exit Sub
    End If
    Me.KeyPreview = True
    If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
        imUpdateAllowed = False
        cmcLock.Enabled = False
        cmcRectify.Enabled = False
        cmcReSchd.Enabled = False
    Else
        imUpdateAllowed = True
    End If
    'If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName) Then
    '    cmcMGs.Visible = True
    'End If
    'gShowBranner imUpdateAllowed
    'DoEvents    'Process events so pending keys are not sent to this
                'form when keypreview turn on
    'Spots.KeyPreview = True
    'plcSelect.ZOrder vbBringToFront
    'rbcTime.ZOrder vbBringToFront
    'rbcAdvt.ZOrder vbBringToFront
    Me.ZOrder 0 'Send to front
    pbcDW.ZOrder vbBringToFront
    plcAdvertiser.ZOrder vbBringToFront
    pbcContract.ZOrder vbBringToFront
    'plcDate.ZOrder vbBringToFront
    edcLog1Dt.ZOrder vbBringToFront
    'hbcContract.ZOrder vbBringToFront
    edcDate.ZOrder vbBringToFront
    'plcAdvtTm.ZOrder vbBringToFront
    cbcVehicle.ZOrder vbBringToFront
    pbcKey.ZOrder vbBringToFront
    pbcKey.Move pbcSelect(0).Left, pbcSelect(0).Top
    pbcSpotInfo(0).ZOrder vbBringToFront
    pbcSpotInfo(1).ZOrder vbBringToFront
    lbcPackageInfo(0).ZOrder vbBringToFront
    lbcPackageInfo(1).ZOrder vbBringToFront
    plcCalendar.ZOrder vbBringToFront
    lbcGameNo(0).ZOrder vbBringToFront
    lbcGameList.ZOrder vbBringToFront
    plcConflictInfo.ZOrder vbBringToFront
    pbcKey.ZOrder vbBringToFront
    If imFirstActivate Then
        If sgSpotCallType = "T" Then
            'rbcTime.Value = True
            imDW = 0
            mPopView
            plcAdvertiser.Visible = False
            plcTime.Visible = True
            imcPrt.Visible = False
            pbcSelect(0).Visible = True
            pbcSelect(1).Visible = False
            If Trim$(edcLog1Dt.Text) = "" Then
                plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
                plcCalendar.Visible = True
                imL1OrL2 = 1
            End If
        Else
            'If rbcAdvt.Value Then
            '    rbcAdvt_Click True
            'Else
            '    rbcAdvt.Value = True
            'End If
            imDW = 1
            plcTime.Visible = False
            plcAdvertiser.Visible = True
            'If Trim$(plcDate.Caption) <> "" Then
            If Trim$(edcDate.Text) <> "" Then
                imcPrt.Visible = True
            Else
                imcPrt.Visible = False
            End If
            pbcSelect(1).Visible = True
            pbcSelect(0).Visible = False
            If Trim$(edcDate.Text) = "" Then
                plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
                plcCalendar.Visible = True
                imL1OrL2 = 4
            End If
        End If
        'pbcDW.Cls
        pbcDW_Paint
    End If
    imFirstActivate = False
    pbcInitCover.BorderStyle = 0
    pbcInitCover.ZOrder vbBringToFront
    'Spots.Refresh
End Sub
Private Sub Form_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub Form_Deactivate()
    'Spots.KeyPreview = False
    Me.KeyPreview = False
End Sub
Private Sub Form_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub Form_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim ilReSet As Integer

    If (KeyCode = KEYF1) Or (KeyCode = KEYF4) Or (KeyCode = KEYF5) Then
        If (cbcVehicle.Enabled) Then
            cbcVehicle.Enabled = False
            ilReSet = True
        Else
            ilReSet = False
        End If
        gFunctionKeyBranch KeyCode
        If ilReSet Then
            cbcVehicle.Enabled = True
        End If
    End If
End Sub
Private Sub Form_LinkExecute(CmdStr As String, Cancel As Integer)
    sgDoneMsg = CmdStr
    igChildDone = True
    Cancel = 0
End Sub
Private Sub Form_Load()
    Dim llWidth As Long
    Dim llPercentAdjW As Long
    
    Me.Width = 9585
    If Screen.Width / 15 = 640 Then
        fmAdjFactorW = 1#
        fmAdjFactorH = 1#
    Else
        llPercentAdjW = 99
        'fmAdjFactorW = ((lgPercentAdjW * ((Screen.Width) / (640 * 15 / Me.Width))) / 100) / Me.Width
        Me.Width = (llPercentAdjW * ((Screen.Width) / (640 * 15 / Me.Width))) / 100
        '90 is width to plcAdvetiser.left
        'fmAdjFactorW = (Me.Width - 2 * 90 - 2 * fgPanelAdj - 2 * fgBevelX - vbcContract.Width) / (7 * (1245 + 15))
        fmAdjFactorW = (Me.Width - 2 * 90 - 2 * fgPanelAdj - 2 * fgBevelX - vbcContract.Width) / (pbcContract.Width)
        llWidth = 100 * fmAdjFactorW
        fmAdjFactorW = llWidth / 100
        fmAdjFactorH = ((lgPercentAdjH * ((Screen.height) / (480 * 15 / Me.height))) / 100) / Me.height
        Me.height = (lgPercentAdjH * ((Screen.height) / (480 * 15 / Me.height))) / 100
    End If
    pbcInitCover.Move 0, 0, Me.Width, Me.height
    mInit
    If imTerminate Then
        mTerminate
    End If
End Sub
Private Sub Form_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub Form_Unload(Cancel As Integer)
    Dim ilRet As Integer
    
    On Error Resume Next
    
    mSaveNotes imVehCode, False
    
    btrExtClear hmRlf   'Clear any previous extend operation
    ilRet = btrClose(hmRlf)
    btrDestroy hmRlf
    btrExtClear hmVef   'Clear any previous extend operation
    ilRet = btrClose(hmVef)
    btrDestroy hmVef
    ilRet = btrClose(hmVsf)
    btrDestroy hmVsf
    '
    'End of removal
    '
    If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS) Then
        btrDestroy hmRaf
        btrDestroy hmSef
    End If
    ilRet = btrClose(hmSxf)
    btrDestroy hmSxf
    btrExtClear hmGsf   'Clear any previous extend operation
    ilRet = btrClose(hmGsf)
    btrDestroy hmGsf
    btrExtClear hmGhf   'Clear any previous extend operation
    ilRet = btrClose(hmGhf)
    btrDestroy hmGhf
    btrExtClear hmFsf   'Clear any previous extend operation
    ilRet = btrClose(hmFsf)
    btrDestroy hmFsf
    btrExtClear hmFnf   'Clear any previous extend operation
    ilRet = btrClose(hmFnf)
    btrDestroy hmFnf
    btrExtClear hmPrf   'Clear any previous extend operation
    ilRet = btrClose(hmPrf)
    btrDestroy hmPrf
    btrExtClear hmMtf   'Clear any previous extend operation
    ilRet = btrClose(hmMtf)
    btrDestroy hmMtf
    btrExtClear hmStf   'Clear any previous extend operation
    ilRet = btrClose(hmStf)
    btrDestroy hmStf
    btrExtClear hmSmf   'Clear any previous extend operation
    ilRet = btrClose(hmSmf)
    btrDestroy hmSmf
    btrExtClear hmCff   'Clear any previous extend operation
    ilRet = btrClose(hmCff)
    btrDestroy hmCff
    btrExtClear hmSwf   'Clear any previous extend operation
    ilRet = btrClose(hmSwf)
    btrDestroy hmSwf
    btrExtClear hmRdf   'Clear any previous extend operation
    ilRet = btrClose(hmRdf)
    btrDestroy hmRdf
    btrExtClear hmCHF   'Clear any previous extend operation
    ilRet = btrClose(hmCHF)
    btrDestroy hmCHF
    btrExtClear hmClf   'Clear any previous extend operation
    ilRet = btrClose(hmClf)
    btrDestroy hmClf
    btrExtClear hmCxf   'Clear any previous extend operation
    ilRet = btrClose(hmCxf)
    btrDestroy hmCxf
    btrExtClear hmAdf   'Clear any previous extend operation
    ilRet = btrClose(hmAdf)
    btrDestroy hmAdf
    btrExtClear hmDpf   'Clear any previous extend operation
    ilRet = btrClose(hmDpf)
    btrDestroy hmDpf
    btrExtClear hmDef   'Clear any previous extend operation
    ilRet = btrClose(hmDef)
    btrDestroy hmDef
    btrExtClear hmDrf   'Clear any previous extend operation
    ilRet = btrClose(hmDrf)
    btrDestroy hmDrf
    btrExtClear hmMnf   'Clear any previous extend operation
    ilRet = btrClose(hmMnf)
    btrDestroy hmMnf
    btrExtClear hmAnf   'Clear any previous extend operation
    ilRet = btrClose(hmAnf)
    btrDestroy hmAnf
    btrExtClear hmSlf   'Clear any previous extend operation
    ilRet = btrClose(hmSlf)
    btrDestroy hmSlf
    btrExtClear hmCrf   'Clear any previous extend operation
    ilRet = btrClose(hmCrf)
    btrDestroy hmCrf
    btrExtClear hmSif   'Clear any previous extend operation
    ilRet = btrClose(hmSif)
    btrDestroy hmSif
    btrExtClear hmLcf   'Clear any previous extend operation
    ilRet = btrClose(hmLcf)
    btrDestroy hmLcf
    btrExtClear hmSsf   'Clear any previous extend operation
    ilRet = btrClose(hmSsf)
    btrDestroy hmSsf
    btrExtClear hmSdf   'Clear any previous extend operation
    ilRet = btrClose(hmSdf)
    btrDestroy hmSdf
    ilRet = btrClose(hmCif)
    btrDestroy hmCif
    ilRet = btrClose(hmCpf)
    btrDestroy hmCpf
    ilRet = btrClose(hmTzf)
    btrDestroy hmTzf
    ilRet = btrClose(hmMcf)
    btrDestroy hmMcf
    ilRet = btrClose(hmPaf)
    btrDestroy hmPaf
    ilRet = btrClose(hmCgf)
    btrDestroy hmCgf
    
    Erase tmStationsHL
    Erase tmStationsClf
    Erase tmTeam
    Erase tmGsfInfo
    Erase tmGameSdfMdExt
    Erase tmFCff
    Erase tmSdfExt
    Erase tmSdfExtSort
    Erase tmAdMdManSchCode
    Erase tmManMdExt
    Erase tmL2ManSchCode
    Erase tmMissedCode
    Erase tmRateCardCode
    Erase tmMoEvt
    Erase tmTuEvt
    Erase tmWeEvt
    Erase tmThEvt
    Erase tmFrEvt
    Erase tmSaEvt
    Erase tmSuEvt
    Erase tmMoEvtTemp
    Erase tmTuEvtTemp
    Erase tmWeEvtTemp
    Erase tmThEvtTemp
    Erase tmFrEvtTemp
    Erase tmSaEvtTemp
    Erase tmSuEvtTemp
    Erase tmPrevSuEvt
    Erase tmNextMoEvt
    Erase tmL1Evt
    Erase tmL2Evt
    Erase tmSdfMdExt
    Erase tmSvSdfMdExt
    Erase tmAdMdSdfMdExt
    Erase tmSvAdMdSdfMdExt
    Erase tmWAMdExt
    Erase tmSpotMove
    Erase tmRdf
    Erase tmRCDP
    Erase lmL2ManSchCode
    Erase imL2ManSchInfo
    Erase lmL2ManSchInfo
    Erase lmAdMdManSchCode
    Erase imAdMdManSchInfo
    Erase lmAdMdManSchInfo
    Erase imLineNoExtra
    Erase smLineInfoOk
    Erase smLineInfoNotOk
    Erase tmPkClf
    Erase tmCff0
    Erase tmCff1
    Erase tmMoRowIndex
    Erase tmTuRowIndex
    Erase tmWeRowIndex
    Erase tmThRowIndex
    Erase tmFrRowIndex
    Erase tmSaRowIndex
    Erase tmSuRowIndex
    Erase tgSdfExt
    Erase tgSdfExtSort
    Erase tgMoVcf0
    Erase tgMoVcf6
    Erase tgMoVcf7
    Erase tgTuVcf0
    Erase tgTuVcf6
    Erase tgTuVcf7
    Erase tgWeVcf0
    Erase tgWeVcf6
    Erase tgWeVcf7
    Erase tgThVcf0
    Erase tgThVcf6
    Erase tgThVcf7
    Erase tgFrVcf0
    Erase tgFrVcf6
    Erase tgFrVcf7
    Erase tgSaVcf0
    Erase tgSaVcf6
    Erase tgSaVcf7
    Erase tgSuVcf0
    Erase tgSuVcf6
    Erase tgSuVcf7
    Erase tgMoEvt
    Erase tgTuEvt
    Erase tgWeEvt
    Erase tgThEvt
    Erase tgFrEvt
    Erase tgSaEvt
    Erase tgSuEvt
    Erase tgMoRowIndex
    Erase tgTuRowIndex
    Erase tgWeRowIndex
    Erase tgThRowIndex
    Erase tgFrRowIndex
    Erase tgSaRowIndex
    Erase tgSuRowIndex
    Erase tgL1Evt
    Erase tgL1RowIndex
    Erase tgL1Vcf0
    Erase tgL1Vcf6
    Erase tgL1Vcf7
    Erase tgL2Evt
    Erase tgSdfMdExt
    Erase tgL2RowIndex
    Erase tgL2Vcf0
    Erase tgL2Vcf6
    Erase tgL2Vcf7
    Erase tgAdMdSdfMdExt
    Erase tgWAMdExt
    Erase tgSptMve
    Erase tgAvailMix
    Erase tmCTVcf0
    Erase tmCTVcf6
    Erase tmCTVcf7
    Erase tmGameEvt
    Erase tmSeasonInfo

    Erase tmUserVehicle
    
    rst_Vnf.Close
    
    If igAlertSpotStatus = 1 Then
        Traffic!tmcInitAlert.Enabled = True
    End If
    igJobShowing(SPOTSJOB) = False
        
    Set Spots = Nothing

End Sub

Private Sub grdNote_EnterCell()
    mSetShow imEnableCol
End Sub

Private Sub grdNote_GotFocus()
    mSetShow imEnableCol
End Sub

Private Sub grdNote_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilCol As Integer
    Dim ilRow As Integer

    If Y < grdNote.rowHeight(0) Then
        grdNote.Col = grdNote.MouseCol
        mNoteSortCol grdNote.Col
        Exit Sub
    End If
    ilCol = grdNote.MouseCol
    ilRow = grdNote.MouseRow
    If ilCol < grdNote.FixedCols Then
        grdNote.Redraw = True
        Exit Sub
    End If
    If ilRow < grdNote.FixedRows Then
        grdNote.Redraw = True
        Exit Sub
    End If
    grdNote.Row = ilRow
    grdNote.Col = ilCol
    grdNote.Redraw = True
    imEnableSource = 1
    pbcCalendar.Cls
    pbcCalendar_Paint
    imEnableCol = ilCol
    imEnableRow = ilRow
    mEnableBox imEnableCol

End Sub

Private Sub grdNote_Scroll()
    mSetShow imEnableCol
End Sub

Private Sub imcFont_Click()
    If smSpotFont = "S" Then
        smSpotFont = "A"
        pbcContract.FontName = smDefFontName
        pbcContract.FontSize = fmDefFontSize
    Else
        smSpotFont = "S"
    End If
    pbcContract.Cls
    pbcContract_Paint
End Sub

Private Sub imcFont_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcSort.Visible = False
End Sub

Private Sub imcKey_Click()
    pbcKey.Visible = Not pbcKey.Visible
End Sub

Private Sub imcKey_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub imcKey_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcSort.Visible = False
    'pbcKey.Visible = True
    imIgnoreChg = False
    mClearDrag False
End Sub
Private Sub imcKey_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    'pbcKey.Visible = False
    imDragSrce = -1
End Sub
Private Sub imcPrt_Click()
    Dim ilRet As Integer       'Call return value
    Dim ilCRet As Integer
    Dim llSwfRecPos As Long
    Dim slStr As String        'General string
    Dim ilLoop As Integer
    Dim slDate As String
    Dim ilEvt1 As Integer
    Dim ilEvt2 As Integer
    Dim ilEvt3 As Integer
    Dim ilEvt4 As Integer
    Dim ilEvt5 As Integer
    Dim ilEvt6 As Integer
    Dim ilEvt7 As Integer
    Dim ilEndEvt1 As Integer
    Dim ilEndEvt2 As Integer
    Dim ilEndEvt3 As Integer
    Dim ilEndEvt4 As Integer
    Dim ilEndEvt5 As Integer
    Dim ilEndEvt6 As Integer
    Dim ilEndEvt7 As Integer
    Dim llNoRecs As Long
    Dim ilEndEvtIndex As Integer
    Dim slEvt As String
    Dim ilAdMdType As Integer
    Dim ilDone As Integer

    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    'If vehcile selected, and dates, then print
    If imVehSelectedIndex < 0 Then
        Exit Sub
    End If
    'If Trim$(plcDate.Caption) = "" Then
    If Trim$(edcDate.Text) = "" Then
        Exit Sub
    End If
    'Unload IconTraf
    'If Not gWinRoom(igNoExeWinRes(RPTSELEXE)) Then
    '    Exit Sub
    'End If
    'Screen.MousePointer = vbHourGlass
    ''Make records - imVehCode
    Screen.MousePointer = vbHourglass
    sgReportListName = "Spot Screen Snap Shot"
    ''Delete any old record for this user and vehicle
    llNoRecs = 0
    'tmSwfSrchKey.iUrfCode = tgUrf(0).iCode        'User code
    tmSwfSrchKey.iVefCode = imVehCode   'Vehicle code
    tmSwfSrchKey.iType = 0       '0=Header- fields contain dates; 1=Events contained within fields
    tmSwfSrchKey.lSeqNo = 0       'Sequence number (0 To --)
    ilRet = btrGetGreaterOrEqual(hmSwf, tmSwf, imSwfRecLen, tmSwfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    'Do While (ilRet = BTRV_ERR_NONE) And (tmSwf.iUrfCode = tgUrf(0).iCode) And (tmSwf.iVefCode = imVehCode)
    Do While (ilRet = BTRV_ERR_NONE) And (tmSwf.iVefCode = imVehCode)
        ilRet = btrGetPosition(hmSwf, llSwfRecPos)
        Do
            ilRet = btrDelete(hmSwf)
            If ilRet = BTRV_ERR_CONFLICT Then
                ilCRet = btrGetDirect(hmSwf, tmSwf, imSwfRecLen, llSwfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        ilRet = btrGetNext(hmSwf, tmSwf, imSwfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    'Make the records
    tmSwf.iUrfCode = tgUrf(0).iCode        'User code
    tmSwf.iVefCode = imVehCode   'Vehicle code
    tmSwf.iType = 0       '0=Header- fields contain dates; 1=Events contained within fields
    tmSwf.lSeqNo = 0       '2-2-05 chg to long;Sequence number (0 To --)
    'slDate = edcDate.Text   'plcDate.Caption
    mGetEdcDate 0
    slDate = smEdcDate
    'llDate = gDateValue(slDate)    dont need the header of date columns, formula passed for header to crystal
    'tmSwf.sDay1 = Format$(llDate, "dddd" & "," & "m/d/yy")  'Date or events
    'tmSwf.sDay2 = Format$(llDate + 1, "dddd" & ", " & "m/d/yy") 'Date or events
    'tmSwf.sDay3 = Format$(llDate + 2, "dddd" & ", " & "m/d/yy") 'Date or events
    'tmSwf.sDay4 = Format$(llDate + 3, "dddd" & ", " & "m/d/yy") 'Date or events
    'tmSwf.sDay5 = Format$(llDate + 4, "dddd" & ", " & "m/d/yy") 'Date or events
    'tmSwf.sDay6 = Format$(llDate + 5, "dddd" & ", " & "m/d/yy") 'Date or events
    'tmSwf.sDay7 = Format$(llDate + 6, "dddd" & ", " & "m/d/yy") 'Date or events
    'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
    tmSwf.iType = 1             'flag detail events within avail
    ilEvt1 = imLBEvt    'LBound(tmMoEvt)
    ilEvt2 = ilEvt1
    ilEvt3 = ilEvt1
    ilEvt4 = ilEvt1
    ilEvt5 = ilEvt1
    ilEvt6 = ilEvt1
    ilEvt7 = ilEvt1
    'tm--Evt build with avails and spots only (not programs)
    'all avail clusters have the same amount of subrecords
    tmSwf.lSeqNo = 100              '2-2-05 chg to long; seq # are 100s = avail sequence, 1-99 = line within avail
                                    'required for grouping in Crystal
    Do
        If tmVef.sType <> "G" Then
            ilEndEvtIndex = UBound(tmMoEvt) - 1
            mDetSwfEndIndex ilEvt1, tmMoEvt(), ilEndEvtIndex
            mDetSwfEndIndex ilEvt2, tmTuEvt(), ilEndEvtIndex
            mDetSwfEndIndex ilEvt3, tmWeEvt(), ilEndEvtIndex
            mDetSwfEndIndex ilEvt4, tmThEvt(), ilEndEvtIndex
            mDetSwfEndIndex ilEvt5, tmFrEvt(), ilEndEvtIndex
            mDetSwfEndIndex ilEvt6, tmSaEvt(), ilEndEvtIndex
            mDetSwfEndIndex ilEvt7, tmSuEvt(), ilEndEvtIndex
            mBuildSwf ilEvt1, ilEndEvtIndex, tmMoEvt(), tmSwf.sDay1
            mBuildSwf ilEvt2, ilEndEvtIndex, tmTuEvt(), tmSwf.sDay2
            mBuildSwf ilEvt3, ilEndEvtIndex, tmWeEvt(), tmSwf.sDay3
            mBuildSwf ilEvt4, ilEndEvtIndex, tmThEvt(), tmSwf.sDay4
            mBuildSwf ilEvt5, ilEndEvtIndex, tmFrEvt(), tmSwf.sDay5
            mBuildSwf ilEvt6, ilEndEvtIndex, tmSaEvt(), tmSwf.sDay6
            mBuildSwf ilEvt7, ilEndEvtIndex, tmSuEvt(), tmSwf.sDay7
        Else
            ilEndEvt1 = UBound(tmMoEvt) - 1
            mDetSwfEndIndex ilEvt1, tmMoEvt(), ilEndEvt1
            ilEndEvt2 = UBound(tmTuEvt) - 1
            mDetSwfEndIndex ilEvt2, tmTuEvt(), ilEndEvt2
            ilEndEvt3 = UBound(tmWeEvt) - 1
            mDetSwfEndIndex ilEvt3, tmWeEvt(), ilEndEvt3
            ilEndEvt4 = UBound(tmThEvt) - 1
            mDetSwfEndIndex ilEvt4, tmThEvt(), ilEndEvt4
            ilEndEvt5 = UBound(tmFrEvt) - 1
            mDetSwfEndIndex ilEvt5, tmFrEvt(), ilEndEvt5
            ilEndEvt6 = UBound(tmSaEvt) - 1
            mDetSwfEndIndex ilEvt6, tmSaEvt(), ilEndEvt6
            ilEndEvt7 = UBound(tmSuEvt) - 1
            mDetSwfEndIndex ilEvt7, tmSuEvt(), ilEndEvt7
            mBuildSwf ilEvt1, ilEndEvt1, tmMoEvt(), tmSwf.sDay1
            mBuildSwf ilEvt2, ilEndEvt2, tmTuEvt(), tmSwf.sDay2
            mBuildSwf ilEvt3, ilEndEvt3, tmWeEvt(), tmSwf.sDay3
            mBuildSwf ilEvt4, ilEndEvt4, tmThEvt(), tmSwf.sDay4
            mBuildSwf ilEvt5, ilEndEvt5, tmFrEvt(), tmSwf.sDay5
            mBuildSwf ilEvt6, ilEndEvt6, tmSaEvt(), tmSwf.sDay6
            mBuildSwf ilEvt7, ilEndEvt7, tmSuEvt(), tmSwf.sDay7
        End If
        mWriteSWFSnap               'create all the SWF records from the info stored inmemory
        ilDone = False
        If lmSelectedChfCode <= 0 Then
            If tmVef.sType <> "G" Then
                If ilEvt1 >= UBound(tmMoEvt) Then
                    ilDone = True
                End If
            Else
                If (ilEvt1 >= UBound(tmMoEvt)) And (ilEvt2 >= UBound(tmTuEvt)) And (ilEvt3 >= UBound(tmWeEvt)) And (ilEvt4 >= UBound(tmThEvt)) And (ilEvt5 >= UBound(tmFrEvt)) And (ilEvt6 >= UBound(tmSaEvt)) And (ilEvt7 >= UBound(tmSuEvt)) Then
                    ilDone = True
                End If
            End If
        Else
            If (ilEvt1 >= UBound(tmMoEvt)) And (ilEvt2 >= UBound(tmTuEvt)) And (ilEvt3 >= UBound(tmWeEvt)) And (ilEvt4 >= UBound(tmThEvt)) And (ilEvt5 >= UBound(tmFrEvt)) And (ilEvt6 >= UBound(tmSaEvt)) And (ilEvt7 >= UBound(tmSuEvt)) Then
                ilDone = True
            End If
        End If
    Loop Until ilDone = True
    'Include Missed
    mSnapSpotMissed
    If igTestSystem Then
        slStr = "Traffic^Test^NOHELP\" & sgUserName
    Else
        slStr = "Traffic^Prod^NOHELP\" & sgUserName
    End If
    slEvt = ""
    'ilAdMdType = imAdMdType
    'If tgSpf.sSchdRemnant = "Y" Then
    '    If imAdMdType >= 4 Then
    '        ilAdMdType = ilAdMdType - 1
    '    End If
    'End If
    For ilLoop = 0 To UBound(imAdMdMap) Step 1
        If imAdMdType = imAdMdMap(ilLoop) Then
            ilAdMdType = ilLoop
            Exit For
        End If
    Next ilLoop
    If ((imAdMdType >= 0) And (imAdMdType <= 11)) Or (imAdMdType = 3 And imAdMdSelectedAdvt >= 0) Then
        If (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
            'If UBound(tmAdMdSdfMdExt) > LBound(tmAdMdSdfMdExt) Then
            If UBound(tmAdMdSdfMdExt) > imLBSdfMdExt Then
                slEvt = Trim$(lbcAdMdType.List(ilAdMdType))     'get missed type string
            End If
        Else
            If lbcAdMdManSch.ListCount > 0 Then
                slEvt = lbcAdMdType.List(ilAdMdType)
            End If
        End If
    End If
    slStr = slStr & "\" & slDate & "\" & Trim$(str$(tgUrf(0).iCode)) & "\" & Trim$(str$(imVehCode)) & "\1" & "\" & slEvt
    'ilShell = Shell(sgExePath & "RptSelSS.Exe " & slStr, 1)
    'While GetModuleUsage(ilShell) > 0
    '    ilRet = DoEvents()
    'Wend
    sgCommandStr = slStr
    RptSelSS.Show vbModal
    ''Clear file
    tmSwfSrchKey.iVefCode = imVehCode   'Vehicle code
    tmSwfSrchKey.iType = 0       '0=Header- fields contain dates; 1=Events contained within fields
    tmSwfSrchKey.lSeqNo = 0       'Sequence number (0 To --)
    ilRet = btrGetGreaterOrEqual(hmSwf, tmSwf, imSwfRecLen, tmSwfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    'Do While (ilRet = BTRV_ERR_NONE) And (tmSwf.iUrfCode = tgUrf(0).iCode) And (tmSwf.iVefCode = imVehCode)
    Do While (ilRet = BTRV_ERR_NONE) And (tmSwf.iVefCode = imVehCode)
        ilRet = btrGetPosition(hmSwf, llSwfRecPos)
        Do
            ilRet = btrDelete(hmSwf)
            If ilRet = BTRV_ERR_CONFLICT Then
                ilCRet = btrGetDirect(hmSwf, tmSwf, imSwfRecLen, llSwfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            End If
        Loop While ilRet = BTRV_ERR_CONFLICT
        ilRet = btrGetNext(hmSwf, tmSwf, imSwfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    Screen.MousePointer = vbDefault
    'Traffic.Enabled = False
    'Do While Not igChildDone
    '    DoEvents
    'Loop
    'slStr = sgDoneMsg
    'Traffic.Enabled = True
    'Traffic!edcLinkSrceHelpMsg.Text = "Ok"
    'For ilLoop = 0 To 10
    '    DoEvents
    'Next ilLoop
    'Screen.MousePointer = vbDefault
End Sub
Private Sub imcPrt_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub imcPrt_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcSort.Visible = False
End Sub
Private Sub imcTrash_DragDrop(Source As control, X As Single, Y As Single)
    Dim ilRet As Integer
    Dim slMsg As String
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim slDate As String
    Dim llDate As Long
    Dim slType As String
    Dim slStatus As String
    Dim llRecPos As Long
    Dim ilGameNo As Integer
    Dim ilLoop As Integer

    mClearSpotInfo False
    '7/7/09:  Cancel moved next to Missed as a list
    If imTrashFire = 0 Then
        mClearDrag False
        mForceRepaintWeekly False
        Exit Sub
    End If
    'If rbcTime.Value Then
    If imDW = 0 Then
        If imDragSrce = DRAGLOG1 Then
            If Not mBlockDay(65536 * imVehCode + gDateValue(smLog1Date), 0) Then
                mClearDrag False
                mForceRepaintWeekly False
                Exit Sub
            End If
            slMsg = tmL1Evt(imDragIndexSrce).sShow
            slType = tmL1Evt(imDragIndexSrce).sCntrType
            If ((tmL1Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL1Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                slType = "X"
            End If
        ElseIf imDragSrce = DRAGLOG2 Then
            If imLog2Type = 4 Then
                If Not mBlockDay(65536 * imVehCode + gDateValue(smLog2Date), 0) Then
                    mClearDrag False
                    mForceRepaintWeekly False
                    Exit Sub
                End If
                slMsg = tmL2Evt(imDragIndexSrce).sShow
                slType = tmL2Evt(imDragIndexSrce).sCntrType
                If ((tmL2Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL2Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                    slType = "X"
                End If
            ElseIf (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Then
                slMsg = tmSdfMdExt(imDragIndexSrce).sShow
                slType = " "
            End If
        ElseIf imDragSrce = DRAGHOLD Then
            slMsg = tmWAMdExt(imDragIndexSrce).sShow
            slType = " "
        End If
    Else
        If imDragSrce = DRAGCONTRACT Then
            Select Case imDragColNoSrce
                Case 1  'Monday
                    slMsg = tmMoEvt(imDragIndexSrce).sShow
                    slType = tmMoEvt(imDragIndexSrce).sCntrType
                    If ((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmMoEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
                Case 2  'Tuesday
                    slMsg = tmTuEvt(imDragIndexSrce).sShow
                    slType = tmTuEvt(imDragIndexSrce).sCntrType
                    If ((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmTuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
                Case 3  'Wednesday
                    slMsg = tmWeEvt(imDragIndexSrce).sShow
                    slType = tmWeEvt(imDragIndexSrce).sCntrType
                    If ((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmWeEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
                Case 4  'Thursday
                    slMsg = tmThEvt(imDragIndexSrce).sShow
                    slType = tmThEvt(imDragIndexSrce).sCntrType
                    If ((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmThEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
                Case 5  'Friday
                    slMsg = tmFrEvt(imDragIndexSrce).sShow
                    slType = tmFrEvt(imDragIndexSrce).sCntrType
                    If ((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmFrEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
                Case 6  'Saturday
                    slMsg = tmSaEvt(imDragIndexSrce).sShow
                    slType = tmSaEvt(imDragIndexSrce).sCntrType
                    If ((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSaEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
                Case 7  'Sunday
                    slMsg = tmSuEvt(imDragIndexSrce).sShow
                    slType = tmSuEvt(imDragIndexSrce).sCntrType
                    If ((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200) Then
                        slType = "X"
                    End If
            End Select
            'slDate = edcDate.Text   'plcDate.Caption
            mGetEdcDate imDragColNoSrce - 1
            slDate = smEdcDate
            llDate = gDateValue(slDate)
            'If Not mBlockDay(65536 * imVehCode + llDate + imDragColNoSrce - 1, 0) Then
            If Not mBlockDay(65536 * imVehCode + lmLockDate, 0) Then
                mClearDrag False
                mForceRepaintWeekly False
                Exit Sub
            End If
        ElseIf imDragSrce = DRAGADMD Then
            slMsg = tmAdMdSdfMdExt(imDragIndexSrce).sShow
            slType = " "
        ElseIf imDragSrce = DRAGWORKAREA Then
            slMsg = tmWAMdExt(imDragIndexSrce).sShow
            slType = " "
        End If
    End If
    If ((slType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slType = "M") And (tgSpf.sSchdPromo <> "Y")) Or ((slType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slType = "Q") Or (slType = "R") Or (slType = "X") Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("This will *****REMOVE***** the spot, Ok to remove " & slMsg, vbYesNo + vbQuestion + vbDefaultButton2, "Delete Spot")
        'DoEvents
        slStatus = "D"
    ElseIf (slType = "V") Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("This will *****HIDE***** the Reservation spot, Ok to hide " & slMsg, vbYesNo + vbQuestion + vbDefaultButton2, "Delete Spot")
        'DoEvents
        slStatus = "H"
    Else
        Screen.MousePointer = vbDefault
        'ilRet = MsgBox("This will *****DELETE***** the spot, Ok to delete " & slMsg, vbYesNo + vbQuestion + vbDefaultButton2, "Delete Spot")
        ilRet = MsgBox("This will *****CANCEL***** the spot, Ok to cancel " & slMsg, vbYesNo + vbQuestion + vbDefaultButton2, "Delete Spot")
        'DoEvents
        slStatus = "C"
    End If
    If ilRet = vbYes Then
        ilRet = mBeginTrans(True, False)   'btrBeginTrans(hmSdf, 1000)
        If ilRet <> BTRV_ERR_NONE Then
            'Screen.MousePointer = vbDefault
            'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
            'mClearDrag False
            Exit Sub
        End If
        If ilRet = BTRV_ERR_NONE Then
            Screen.MousePointer = vbHourglass
            'ReDim tmTrash(1 To 1) As SDFMDEXT
            ReDim tmTrash(0 To 1) As SDFMDEXT
            'If rbcTime.Value Then
            If imDW = 0 Then
                If imDragSrce = DRAGLOG1 Then
                    If tmVef.sType <> "G" Then
                        ilGameNo = 0
                    Else
                        ilGameNo = mGetL1GameNo
                        If ilGameNo <= 0 Then
                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                            'mClearDrag False
                            'mForceRepaintWeekly True
                            Exit Sub
                        End If
                        smLog1Date = mGetL1GameDate
                    End If
                    llSdfRecPosSrce = tmL1Evt(imDragIndexSrce).lTime
                    mGetAvailIndex tmL1Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    ilRet = mUnschSpot(slStatus, -1, smLog1Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                    If Not ilRet Then
                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                        'mClearDrag False
                        'mForceRepaintWeekly True
                        Exit Sub
                    End If
                    tmSmfA.lChfCode = 0
                    If slStatus = "D" Then
                        If (imLog2Type > 4) And (imLog2Type < 10) Then
                            For ilLoop = LBound(imL2ManSchInfo, 2) To UBound(imL2ManSchInfo, 2) - 1 Step 1
                                imL2ManSchInfo(3, ilLoop) = 0
                            Next ilLoop
                            mBuildManSpotCount slType, tmL1Evt(), lmL2ManSchCode(), imL2ManSchInfo()
                            lbcManSchSpotSort.Tag = ""
                            mMakeManSchView 0
                            If imLog2Type - 1 = imAdMdType Then
                                For ilLoop = LBound(imAdMdManSchInfo, 2) To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                    imAdMdManSchInfo(3, ilLoop) = 0
                                Next ilLoop
                                mBuildManSpotCount slType, tmMoEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmTuEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmWeEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmThEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmFrEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmSaEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmSuEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mMakeManSchView 1
                            End If
                        Else
                            If (imAdMdType > 3) And (imAdMdType < 9) Then
                                For ilLoop = LBound(imAdMdManSchInfo, 2) To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                    imAdMdManSchInfo(3, ilLoop) = 0
                                Next ilLoop
                                mBuildManSpotCount slType, tmMoEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmTuEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmWeEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmThEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmFrEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmSaEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                mBuildManSpotCount slType, tmSuEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                                lbcManSchSpotSort.Tag = ""
                                mMakeManSchView 1
                            ElseIf imAdMdType = 11 Then
                                'Fix the counts
                                mExtraBonusPop lmAdMdManSchCode(), imAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
                                mMakeManSchView 1
                            End If
                        End If
                    End If
                    ilRet = btrEndTrans(hmSdf)
                    mVbcHoldMinMax False
                    mVbcL1MinMax False
                    mVbcL2MinMax False
                    mVbcMissedMinMax False
                    mVbcAvailMinMax False
                    mVbcContractMinMax False
                ElseIf imDragSrce = DRAGLOG2 Then
                    If imLog2Type = 4 Then
                        If tmVef.sType <> "G" Then
                            ilGameNo = 0
                        Else
                            ilGameNo = mGetL2GameNo
                            If ilGameNo <= 0 Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            smLog2Date = mGetL2GameDate
                        End If
                        llSdfRecPosSrce = tmL2Evt(imDragIndexSrce).lTime
                        mGetAvailIndex tmL2Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("C", -1, smLog2Date, 0, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                        If Not ilRet Then
                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                            'mClearDrag False
                            'mForceRepaintWeekly True
                            Exit Sub
                        End If
                        tmSmfA.lChfCode = 0
                        ilRet = btrEndTrans(hmSdf)
                        mVbcHoldMinMax False
                        mVbcL1MinMax False
                        mVbcL2MinMax False
                        mVbcMissedMinMax False
                        mVbcAvailMinMax False
                        mVbcContractMinMax False
                    ElseIf (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Then
                        llRecPos = tmSdfMdExt(imDragIndexSrce).lRecPos
                        ilRet = mChgMissedStatus(llRecPos)
                        If Not ilRet Then
                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                            'mClearDrag False
                            'mForceRepaintWeekly True
                            Exit Sub
                        End If
                        ilRet = btrEndTrans(hmSdf)
                    End If
                ElseIf imDragSrce = DRAGHOLD Then
                    llRecPos = tmWAMdExt(imDragIndexSrce).lRecPos
                    ilRet = mChgMissedStatus(llRecPos)
                    If Not ilRet Then
                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                        'mClearDrag False
                        'mForceRepaintWeekly True
                        Exit Sub
                    End If
                    ilRet = btrEndTrans(hmSdf)
                Else
                    ilRet = btrEndTrans(hmSdf)
                End If
            Else
                If imDragSrce = DRAGCONTRACT Then
                    'slDate = edcDate.Text   'plcDate.Caption
                    'llDate = gDateValue(slDate)
                    'slDate = Format$(llDate + imDragColNoSrce - 1, "m/d/yy")
                    mGetEdcDate imDragColNoSrce - 1
                    slDate = smEdcDate
                    ilGameNo = imEdcGameNo
                    Select Case imDragColNoSrce
                        Case 1  'Monday
                            llSdfRecPosSrce = tmMoEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmMoEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                        Case 2  'Tuesday
                            llSdfRecPosSrce = tmTuEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmTuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                        Case 3  'Wednesday
                            llSdfRecPosSrce = tmWeEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmWeEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                        Case 4  'Thursday
                            llSdfRecPosSrce = tmThEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmThEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                        Case 5  'Friday
                            llSdfRecPosSrce = tmFrEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmFrEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                        Case 6  'Saturday
                            llSdfRecPosSrce = tmSaEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmSaEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                        Case 7  'Sunday
                            llSdfRecPosSrce = tmSuEvt(imDragIndexSrce).lTime
                            mGetAvailIndex tmSuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                            ilRet = mUnschSpot(slStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmTrash(), tmSmfA)
                            If Not ilRet Then
                                mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                'mClearDrag False
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            tmSmfA.lChfCode = 0
                    End Select
                    If slStatus = "D" Then
                        If (imAdMdType > 3) And (imAdMdType < 9) Then
                            For ilLoop = LBound(imAdMdManSchInfo, 2) To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                imAdMdManSchInfo(3, ilLoop) = 0
                            Next ilLoop
                            mBuildManSpotCount slType, tmMoEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            mBuildManSpotCount slType, tmTuEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            mBuildManSpotCount slType, tmWeEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            mBuildManSpotCount slType, tmThEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            mBuildManSpotCount slType, tmFrEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            mBuildManSpotCount slType, tmSaEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            mBuildManSpotCount slType, tmSuEvt(), lmAdMdManSchCode(), imAdMdManSchInfo()
                            lbcManSchSpotSort.Tag = ""
                            mMakeManSchView 1
                            If imLog2Type - 1 = imAdMdType Then
                                For ilLoop = LBound(imL2ManSchInfo, 2) To UBound(imL2ManSchInfo, 2) - 1 Step 1
                                    imL2ManSchInfo(3, ilLoop) = 0
                                Next ilLoop
                                mBuildManSpotCount slType, tmL1Evt(), lmL2ManSchCode(), imL2ManSchInfo()
                                mMakeManSchView 0
                            End If
                        ElseIf imAdMdType = 11 Then
                            'Fix the counts
                            mExtraBonusPop lmAdMdManSchCode(), imAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
                            mMakeManSchView 1
                        Else
                            If (imLog2Type > 4) And (imLog2Type < 10) Then
                                For ilLoop = LBound(imL2ManSchInfo, 2) To UBound(imL2ManSchInfo, 2) - 1 Step 1
                                    imL2ManSchInfo(3, ilLoop) = 0
                                Next ilLoop
                                mBuildManSpotCount slType, tmL1Evt(), lmL2ManSchCode(), imL2ManSchInfo()
                                lbcManSchSpotSort.Tag = ""
                                mMakeManSchView 0
                            End If
                        End If
                    End If
                    ilRet = btrEndTrans(hmSdf)
                    mVbcHoldMinMax False
                    mVbcL1MinMax False
                    mVbcL2MinMax False
                    mMissedSummary imDW
                    mVbcMissedMinMax False
                    mVbcAvailMinMax False
                    mVbcContractMinMax False
                ElseIf imDragSrce = DRAGADMD Then
                    llRecPos = tmAdMdSdfMdExt(imDragIndexSrce).lRecPos
                    ilRet = mChgMissedStatus(llRecPos)
                    If Not ilRet Then
                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                        'mClearDrag False
                        'mForceRepaintWeekly True
                        Exit Sub
                    End If
                    ilRet = btrEndTrans(hmSdf)
                ElseIf imDragSrce = DRAGWORKAREA Then
                    llRecPos = tmWAMdExt(imDragIndexSrce).lRecPos
                    ilRet = mChgMissedStatus(llRecPos)
                    If Not ilRet Then
                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                        'mClearDrag False
                        'mForceRepaintWeekly True
                        Exit Sub
                    End If
                    ilRet = btrEndTrans(hmSdf)
                Else
                    ilRet = btrEndTrans(hmSdf)
                End If
            End If
            Screen.MousePointer = vbDefault
        End If
    End If
    mClearDrag False
End Sub
Private Sub imcTrash_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    'If rbcTime.Value Then
    If imDW = 0 Then
        If imDragSrce = DRAGLOG1 Then
            If State = vbEnter Then    'Enter drag over
                lacL1Frame.DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFire.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideDn.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                End If
            ElseIf State = vbLeave Then
                lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFireOut.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideUp.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                End If
            End If
            Exit Sub
        ElseIf imDragSrce = DRAGLOG2 Then
            If imLog2Type = 4 Then
                If State = vbEnter Then    'Enter drag over
                    lacL2Frame.DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                    If imTrashFire = 1 Then
                        imcTrash.Picture = IconTraf!imcFire.Picture
                    ElseIf imTrashFire = 2 Then
                        imcTrash.Picture = IconTraf!imcHideDn.Picture
                    Else
                        imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                    End If
                ElseIf State = vbLeave Then
                    lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    If imTrashFire = 1 Then
                        imcTrash.Picture = IconTraf!imcFireOut.Picture
                    ElseIf imTrashFire = 2 Then
                        imcTrash.Picture = IconTraf!imcHideUp.Picture
                    Else
                        imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                    End If
                End If
                Exit Sub
            ElseIf (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Then
                If State = vbEnter Then    'Enter drag over
                    lacL2Frame.DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                    If imTrashFire = 1 Then
                        imcTrash.Picture = IconTraf!imcFire.Picture
                    ElseIf imTrashFire = 2 Then
                        imcTrash.Picture = IconTraf!imcHideDn.Picture
                    Else
                        imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                    End If
                ElseIf State = vbLeave Then
                    lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    If imTrashFire = 1 Then
                        imcTrash.Picture = IconTraf!imcFireOut.Picture
                    ElseIf imTrashFire = 2 Then
                        imcTrash.Picture = IconTraf!imcHideUp.Picture
                    Else
                        imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                    End If
                End If
                Exit Sub
            End If
        ElseIf imDragSrce = DRAGHOLD Then
            If State = vbEnter Then    'Enter drag over
                lacWAFrame(0).DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFire.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideDn.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                End If
            ElseIf State = vbLeave Then
                lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFireOut.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideUp.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                End If
            End If
            Exit Sub
        End If
    Else
        If imDragSrce = DRAGCONTRACT Then
            If State = vbEnter Then    'Enter drag over
                lacAFrame.DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFire.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideDn.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                End If
            ElseIf State = vbLeave Then
                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFireOut.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideUp.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                End If
            End If
            Exit Sub
        ElseIf imDragSrce = DRAGADMD Then
            If State = vbEnter Then    'Enter drag over
                lacAdMdFrame.DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFire.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideDn.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                End If
            ElseIf State = vbLeave Then
                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFireOut.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideUp.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                End If
            End If
            Exit Sub
        ElseIf imDragSrce = DRAGWORKAREA Then
            If State = vbEnter Then    'Enter drag over
                lacWAFrame(1).DragIcon = IconTraf!imcIconDwnArrow.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFire.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideDn.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxOpened.Picture
                End If
            ElseIf State = vbLeave Then
                lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                If imTrashFire = 1 Then
                    imcTrash.Picture = IconTraf!imcFireOut.Picture
                ElseIf imTrashFire = 2 Then
                    imcTrash.Picture = IconTraf!imcHideUp.Picture
                Else
                    imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                End If
            End If
            Exit Sub
        End If
    End If
End Sub
Private Sub imcTrash_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    lbcSort.Visible = False
End Sub
Private Sub imcTrash_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub lacAdMdFrame_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacAFrame_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacL1Frame_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacL1Info_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacL1Info_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub lacL2Frame_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacL2Info_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacL2Info_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub lacLog1_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacLog1_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 0
End Sub
Private Sub lacLog1_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub lacShowForm_Click()
'    Dim slStr As String
'    Dim ilPos As Integer
'
'    slStr = Trim$(lacShowForm.Caption)
'    ilPos = InStr(1, slStr, "Length", 1)
'    If ilPos > 0 Then
'        lacShowForm.Caption = " Highlight Name"
'    Else
'        ilPos = InStr(1, slStr, "Name", 1)
'        If ilPos > 0 Then
'            lacShowForm.Caption = " Show Block"
'        Else
'            ilPos = InStr(1, slStr, "Block", 1)
'            If ilPos > 0 Then
'                lacShowForm.Caption = " Invert Line"
'            Else
'                lacShowForm.Caption = " Highlight Length"
'            End If
'        End If
'    End If
'    pbcContract.Cls
    pbcContract_Paint
End Sub

Private Sub lacTimeLog_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacTimeLog_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 1
End Sub
Private Sub lacTimeLog_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub lacWA_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lacWA_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGHOLD, State, 0
End Sub
Private Sub lacWA_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub lacWAFrame_DragDrop(Index As Integer, Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub lbcAdMdType_Click()
    gProcessLbcClick lbcAdMdType, edcMissedType, imAdMdTypeChgMode, imLbcArrowSetting
End Sub
Private Sub lbcAdvt_Click()
    'If rbcTime.Value Then
    If imDW = 0 Then
        gProcessLbcClick lbcAdvt, edcLog2Dt, imAdvtChgMode, imLbcArrowSetting
    Else
        gProcessLbcClick lbcAdvt, edcMissedDt, imAdMdAdvtChgMode, imLbcArrowSetting
    End If
End Sub



Private Sub lbcDW_Click()
    gProcessLbcClick lbcDW, edcDW, imDWChgMode, imLbcArrowSetting
End Sub

Private Sub lbcGameNo_Click(Index As Integer)
    '4/16/11
    If imDW = 0 Then
        If imL1OrL2 = 1 Then
            gProcessLbcClick lbcGameNo(Index), edcLog1Dt, imGameNoChgMode, imLbcArrowSetting
        ElseIf imL1OrL2 = 2 Then
            gProcessLbcClick lbcGameNo(Index), edcLog2Dt, imGameNoChgMode, imLbcArrowSetting
        ElseIf imL1OrL2 = 3 Then
            gProcessLbcClick lbcGameNo(Index), edcAvDate, imGameNoChgMode, imLbcArrowSetting
        End If
    Else
        gProcessLbcClick lbcGameNo(Index), edcDate, imGameNoChgMode, imLbcArrowSetting
    End If
End Sub

Private Sub lbcLog2Type_Click()
    gProcessLbcClick lbcLog2Type, edcLog2Type, imL2TypeChgMode, imLbcArrowSetting
End Sub

Private Sub lbcMCReason_Click()
    gProcessLbcClick lbcMCReason, edcMCReason, imMCReasonChgMode, imLbcArrowSetting
End Sub

Private Sub lbcMore_Click()
    gProcessLbcClick lbcMore, edcMore, imMoreChgMode, imLbcArrowSetting
End Sub

Private Sub lbcSort_Click()
    If imSortIndex <> lbcSort.ListIndex Then
        Screen.MousePointer = vbHourglass
        imSortIndex = lbcSort.ListIndex
        mSortMissed tmAdMdSdfMdExt()
        pbcMissed.Cls
        pbcMissed_Paint
        mSortMissed tmWAMdExt()
        pbcAdWorkArea.Cls
        pbcAdWorkArea_Paint
        lbcSort.Visible = False
        Screen.MousePointer = vbDefault
    End If
End Sub

Private Sub pbcClose_GotFocus()
    Dim ilLoop As Integer
    ilLoop = 0  'Require so that focus cab be set to this control
End Sub

Private Sub pbcDW_GotFocus()
    lbcGameNo(0).Visible = False
    lbcGameNo(1).Visible = False
    lbcGameNo(2).Visible = False
    lbcGameNo(3).Visible = False
    plcCalendar.Visible = False
End Sub

Private Sub pbcHighlight_KeyPress(KeyAscii As Integer)
    If (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
        imHighlight = 0
        pbcHighlight.Cls
        pbcHighlight_Paint
        If imDW = 0 Then
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
        Else
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        End If
    ElseIf (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Then
        imHighlight = 1
        pbcHighlight.Cls
        pbcHighlight_Paint
        If imDW = 0 Then
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
        Else
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        End If
    ElseIf (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        imHighlight = 2
        pbcHighlight.Cls
        pbcHighlight_Paint
        If imDW = 0 Then
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
        Else
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        End If
    ElseIf ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS) And (KeyAscii = Asc("S")) Or (KeyAscii = Asc("s")) Then
        imHighlight = 3
        pbcHighlight.Cls
        pbcHighlight_Paint
        If imDW = 0 Then
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
        Else
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        End If
    End If
    If KeyAscii = Asc(" ") Then
        imHighlight = imHighlight + 1
        If imHighlight > 2 Then
            If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
                imHighlight = 0
            ElseIf imHighlight > 3 Then
                imHighlight = 0
            End If
        End If
        pbcHighlight.Cls
        pbcHighlight_Paint
        If imDW = 0 Then
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
        Else
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        End If
    End If
End Sub

Private Sub pbcHighlight_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imHighlight = imHighlight + 1
    If imHighlight > 2 Then
        If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) <> SPLITNETWORKS) Then
            imHighlight = 0
        ElseIf imHighlight > 3 Then
            imHighlight = 0
        End If
    End If
    pbcHighlight.Cls
    pbcHighlight_Paint
    If imDW = 0 Then
        pbcLog1.Cls 'pbcLog1_Paint
        pbcLog2.Cls
        pbcAvail.Cls 'pbcAvail_Paint
        pbcLog1_Paint 'pbcLog1_Paint
        pbcLog2_Paint
        pbcAvail_Paint 'pbcAvail_Paint
    Else
        pbcContract.Cls
        pbcMissed.Cls
        pbcAdWorkArea.Cls
        pbcContract_Paint
        pbcMissed_Paint
        pbcAdWorkArea_Paint
    End If
End Sub

Private Sub pbcHighlight_Paint()
    pbcHighlight.CurrentX = fgBoxInsetX \ 20
    pbcHighlight.CurrentY = 0
    If imHighlight = 1 Then
        pbcHighlight.Print "Same Prot'n"
    ElseIf imHighlight = 2 Then
        pbcHighlight.Print "Conflict Chk"
    ElseIf imHighlight = 3 Then
        pbcHighlight.Print "Split Netwk"
    Else
        pbcHighlight.Print "Same Advt"
    End If
End Sub


'*******************************************************
'*                                                     *
'*      Procedure Name:mAbortTrans True,                    *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Restore all array as Trans Log  *
'*                     aborted                         *
'*                                                     *
'*******************************************************
Private Sub mAbortTrans(ilShowMsg As Integer, ilClear As Integer, ilForcePaint As Integer)
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Screen.MousePointer = vbDefault
    ilRet = btrAbortTrans(hmSdf)
    mUnblockDay
    If ilShowMsg Then
        ilRet = MsgBox("Task could not be completed successfully because of " & str$(igBtrError) & "/" & sgErrLoc & ", Redo Task", vbOKOnly + vbExclamation, "Spot")
    End If
    igBtrError = BTRV_ERR_NONE
    sgErrLoc = ""
    ReDim tmSdfExt(LBound(tgSdfExt) To UBound(tgSdfExt)) As SDFEXT
    For ilLoop = LBound(tgSdfExt) To UBound(tgSdfExt) Step 1
        tmSdfExt(ilLoop) = tgSdfExt(ilLoop)
    Next ilLoop
    ReDim tmSdfExtSort(LBound(tgSdfExtSort) To UBound(tgSdfExtSort)) As SDFEXTSORT
    For ilLoop = LBound(tgSdfExtSort) To UBound(tgSdfExtSort) Step 1
        tmSdfExtSort(ilLoop) = tgSdfExtSort(ilLoop)
    Next ilLoop
    For ilLoop = 0 To 23 Step 1
        imHourCount(ilLoop) = igHourCount(ilLoop)
    Next ilLoop
    For ilLoop = 0 To 6 Step 1
        imDayCount(ilLoop) = igDayCount(ilLoop)
    Next ilLoop
    ReDim tmMoVcf0(LBound(tgMoVcf0) To UBound(tgMoVcf0)) As VCF
    For ilLoop = LBound(tgMoVcf0) To UBound(tgMoVcf0) Step 1
        tmMoVcf0(ilLoop) = tgMoVcf0(ilLoop)
    Next ilLoop
    ReDim tmMoVcf6(LBound(tgMoVcf6) To UBound(tgMoVcf6)) As VCF
    For ilLoop = LBound(tgMoVcf6) To UBound(tgMoVcf6) Step 1
        tmMoVcf6(ilLoop) = tgMoVcf6(ilLoop)
    Next ilLoop
    ReDim tmMoVcf7(LBound(tgMoVcf7) To UBound(tgMoVcf7)) As VCF
    For ilLoop = LBound(tgMoVcf7) To UBound(tgMoVcf7) Step 1
        tmMoVcf7(ilLoop) = tgMoVcf7(ilLoop)
    Next ilLoop
    ReDim tmTuVcf0(LBound(tgTuVcf0) To UBound(tgTuVcf0)) As VCF
    For ilLoop = LBound(tgTuVcf0) To UBound(tgTuVcf0) Step 1
        tmTuVcf0(ilLoop) = tgTuVcf0(ilLoop)
    Next ilLoop
    ReDim tmTuVcf6(LBound(tgTuVcf6) To UBound(tgTuVcf6)) As VCF
    For ilLoop = LBound(tgTuVcf6) To UBound(tgTuVcf6) Step 1
        tmTuVcf6(ilLoop) = tgTuVcf6(ilLoop)
    Next ilLoop
    ReDim tmTuVcf7(LBound(tgTuVcf7) To UBound(tgTuVcf7)) As VCF
    For ilLoop = LBound(tgTuVcf7) To UBound(tgTuVcf7) Step 1
        tmTuVcf7(ilLoop) = tgTuVcf7(ilLoop)
    Next ilLoop
    ReDim tmWeVcf0(LBound(tgWeVcf0) To UBound(tgWeVcf0)) As VCF
    For ilLoop = LBound(tgWeVcf0) To UBound(tgWeVcf0) Step 1
        tmWeVcf0(ilLoop) = tgWeVcf0(ilLoop)
    Next ilLoop
    ReDim tmWeVcf6(LBound(tgWeVcf6) To UBound(tgWeVcf6)) As VCF
    For ilLoop = LBound(tgWeVcf6) To UBound(tgWeVcf6) Step 1
        tmWeVcf6(ilLoop) = tgWeVcf6(ilLoop)
    Next ilLoop
    ReDim tmWeVcf7(LBound(tgWeVcf7) To UBound(tgWeVcf7)) As VCF
    For ilLoop = LBound(tgWeVcf7) To UBound(tgWeVcf7) Step 1
        tmWeVcf7(ilLoop) = tgWeVcf7(ilLoop)
    Next ilLoop
    ReDim tmThVcf0(LBound(tgThVcf0) To UBound(tgThVcf0)) As VCF
    For ilLoop = LBound(tgThVcf0) To UBound(tgThVcf0) Step 1
        tmThVcf0(ilLoop) = tgThVcf0(ilLoop)
    Next ilLoop
    ReDim tmThVcf6(LBound(tgThVcf6) To UBound(tgThVcf6)) As VCF
    For ilLoop = LBound(tgThVcf6) To UBound(tgThVcf6) Step 1
        tmThVcf6(ilLoop) = tgThVcf6(ilLoop)
    Next ilLoop
    ReDim tmThVcf7(LBound(tgThVcf7) To UBound(tgThVcf7)) As VCF
    For ilLoop = LBound(tgThVcf7) To UBound(tgThVcf7) Step 1
        tmThVcf7(ilLoop) = tgThVcf7(ilLoop)
    Next ilLoop
    ReDim tmFrVcf0(LBound(tgFrVcf0) To UBound(tgFrVcf0)) As VCF
    For ilLoop = LBound(tgFrVcf0) To UBound(tgFrVcf0) Step 1
        tmFrVcf0(ilLoop) = tgFrVcf0(ilLoop)
    Next ilLoop
    ReDim tmFrVcf6(LBound(tgFrVcf6) To UBound(tgFrVcf6)) As VCF
    For ilLoop = LBound(tgFrVcf6) To UBound(tgFrVcf6) Step 1
        tmFrVcf6(ilLoop) = tgFrVcf6(ilLoop)
    Next ilLoop
    ReDim tmFrVcf7(LBound(tgFrVcf7) To UBound(tgFrVcf7)) As VCF
    For ilLoop = LBound(tgFrVcf7) To UBound(tgFrVcf7) Step 1
        tmFrVcf7(ilLoop) = tgFrVcf7(ilLoop)
    Next ilLoop
    ReDim tmSaVcf0(LBound(tgSaVcf0) To UBound(tgSaVcf0)) As VCF
    For ilLoop = LBound(tgSaVcf0) To UBound(tgSaVcf0) Step 1
        tmSaVcf0(ilLoop) = tgSaVcf0(ilLoop)
    Next ilLoop
    ReDim tmSaVcf6(LBound(tgSaVcf6) To UBound(tgSaVcf6)) As VCF
    For ilLoop = LBound(tgSaVcf6) To UBound(tgSaVcf6) Step 1
        tmSaVcf6(ilLoop) = tgSaVcf6(ilLoop)
    Next ilLoop
    ReDim tmSaVcf7(LBound(tgSaVcf7) To UBound(tgSaVcf7)) As VCF
    For ilLoop = LBound(tgSaVcf7) To UBound(tgSaVcf7) Step 1
        tmSaVcf7(ilLoop) = tgSaVcf7(ilLoop)
    Next ilLoop
    ReDim tmSuVcf0(LBound(tgSuVcf0) To UBound(tgSuVcf0)) As VCF
    For ilLoop = LBound(tgSuVcf0) To UBound(tgSuVcf0) Step 1
        tmSuVcf0(ilLoop) = tgSuVcf0(ilLoop)
    Next ilLoop
    ReDim tmSuVcf6(LBound(tgSuVcf6) To UBound(tgSuVcf6)) As VCF
    For ilLoop = LBound(tgSuVcf6) To UBound(tgSuVcf6) Step 1
        tmSuVcf6(ilLoop) = tgSuVcf6(ilLoop)
    Next ilLoop
    ReDim tmSuVcf7(LBound(tgSuVcf7) To UBound(tgSuVcf7)) As VCF
    For ilLoop = LBound(tgSuVcf7) To UBound(tgSuVcf7) Step 1
        tmSuVcf7(ilLoop) = tgSuVcf7(ilLoop)
    Next ilLoop
    ReDim tmMoEvt(LBound(tgMoEvt) To UBound(tgMoEvt)) As EVTINFO
    For ilLoop = LBound(tgMoEvt) To UBound(tgMoEvt) Step 1
        tmMoEvt(ilLoop) = tgMoEvt(ilLoop)
    Next ilLoop
    ReDim tmTuEvt(LBound(tgTuEvt) To UBound(tgTuEvt)) As EVTINFO
    For ilLoop = LBound(tgTuEvt) To UBound(tgTuEvt) Step 1
        tmTuEvt(ilLoop) = tgTuEvt(ilLoop)
    Next ilLoop
    ReDim tmWeEvt(LBound(tgWeEvt) To UBound(tgWeEvt)) As EVTINFO
    For ilLoop = LBound(tgWeEvt) To UBound(tgWeEvt) Step 1
        tmWeEvt(ilLoop) = tgWeEvt(ilLoop)
    Next ilLoop
    ReDim tmThEvt(LBound(tgThEvt) To UBound(tgThEvt)) As EVTINFO
    For ilLoop = LBound(tgThEvt) To UBound(tgThEvt) Step 1
        tmThEvt(ilLoop) = tgThEvt(ilLoop)
    Next ilLoop
    ReDim tmFrEvt(LBound(tgFrEvt) To UBound(tgFrEvt)) As EVTINFO
    For ilLoop = LBound(tgFrEvt) To UBound(tgFrEvt) Step 1
        tmFrEvt(ilLoop) = tgFrEvt(ilLoop)
    Next ilLoop
    ReDim tmSaEvt(LBound(tgSaEvt) To UBound(tgSaEvt)) As EVTINFO
    For ilLoop = LBound(tgSaEvt) To UBound(tgSaEvt) Step 1
        tmSaEvt(ilLoop) = tgSaEvt(ilLoop)
    Next ilLoop
    ReDim tmSuEvt(LBound(tgSuEvt) To UBound(tgSuEvt)) As EVTINFO
    For ilLoop = LBound(tgSuEvt) To UBound(tgSuEvt) Step 1
        tmSuEvt(ilLoop) = tgSuEvt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgMoRowIndex) To UBound(tgMoRowIndex) Step 1
        tmMoRowIndex(ilLoop) = tgMoRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgTuRowIndex) To UBound(tgTuRowIndex) Step 1
        tmTuRowIndex(ilLoop) = tgTuRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgWeRowIndex) To UBound(tgWeRowIndex) Step 1
        tmWeRowIndex(ilLoop) = tgWeRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgThRowIndex) To UBound(tgThRowIndex) Step 1
        tmThRowIndex(ilLoop) = tgThRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgFrRowIndex) To UBound(tgFrRowIndex) Step 1
        tmFrRowIndex(ilLoop) = tgFrRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgSaRowIndex) To UBound(tgSaRowIndex) Step 1
        tmSaRowIndex(ilLoop) = tgSaRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgSuRowIndex) To UBound(tgSuRowIndex) Step 1
        tmSuRowIndex(ilLoop) = tgSuRowIndex(ilLoop)
    Next ilLoop
    imAMax = igAMax
    ReDim tmL1Evt(LBound(tgL1Evt) To UBound(tgL1Evt)) As EVTINFO
    For ilLoop = LBound(tgL1Evt) To UBound(tgL1Evt) Step 1
        tmL1Evt(ilLoop) = tgL1Evt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgL1RowIndex) To UBound(tgL1RowIndex) Step 1
        tmL1RowIndex(ilLoop) = tgL1RowIndex(ilLoop)
    Next ilLoop
    ReDim tmL1Vcf0(LBound(tgL1Vcf0) To UBound(tgL1Vcf0)) As VCF
    For ilLoop = LBound(tgL1Vcf0) To UBound(tgL1Vcf0) Step 1
        tmL1Vcf0(ilLoop) = tgL1Vcf0(ilLoop)
    Next ilLoop
    ReDim tmL1Vcf6(LBound(tgL1Vcf6) To UBound(tgL1Vcf6)) As VCF
    For ilLoop = LBound(tgL1Vcf6) To UBound(tgL1Vcf6) Step 1
        tmL1Vcf6(ilLoop) = tgL1Vcf6(ilLoop)
    Next ilLoop
    ReDim tmL1Vcf7(LBound(tgL1Vcf7) To UBound(tgL1Vcf7)) As VCF
    For ilLoop = LBound(tgL1Vcf7) To UBound(tgL1Vcf7) Step 1
        tmL1Vcf7(ilLoop) = tgL1Vcf7(ilLoop)
    Next ilLoop
    ReDim tmL2Evt(LBound(tgL2Evt) To UBound(tgL2Evt)) As EVTINFO
    For ilLoop = LBound(tgL2Evt) To UBound(tgL2Evt) Step 1
        tmL2Evt(ilLoop) = tgL2Evt(ilLoop)
    Next ilLoop
    ReDim tmSdfMdExt(LBound(tgSdfMdExt) To UBound(tgSdfMdExt)) As SDFMDEXT
    For ilLoop = LBound(tgSdfMdExt) To UBound(tgSdfMdExt) Step 1
        tmSdfMdExt(ilLoop) = tgSdfMdExt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgL2RowIndex) To UBound(tgL2RowIndex) Step 1
        tmL2RowIndex(ilLoop) = tgL2RowIndex(ilLoop)
    Next ilLoop
    ReDim tmL2Vcf0(LBound(tgL2Vcf0) To UBound(tgL2Vcf0)) As VCF
    For ilLoop = LBound(tgL2Vcf0) To UBound(tgL2Vcf0) Step 1
        tmL2Vcf0(ilLoop) = tgL2Vcf0(ilLoop)
    Next ilLoop
    ReDim tmL2Vcf6(LBound(tgL2Vcf6) To UBound(tgL2Vcf6)) As VCF
    For ilLoop = LBound(tgL2Vcf6) To UBound(tgL2Vcf6) Step 1
        tmL2Vcf6(ilLoop) = tgL2Vcf6(ilLoop)
    Next ilLoop
    ReDim tmL2Vcf7(LBound(tgL2Vcf7) To UBound(tgL2Vcf7)) As VCF
    For ilLoop = LBound(tgL2Vcf7) To UBound(tgL2Vcf7) Step 1
        tmL2Vcf7(ilLoop) = tgL2Vcf7(ilLoop)
    Next ilLoop
    ReDim tmAdMdSdfMdExt(LBound(tgAdMdSdfMdExt) To UBound(tgAdMdSdfMdExt)) As SDFMDEXT
    For ilLoop = LBound(tgAdMdSdfMdExt) To UBound(tgAdMdSdfMdExt) Step 1
        tmAdMdSdfMdExt(ilLoop) = tgAdMdSdfMdExt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tgAdMdRowIndex) To UBound(tgAdMdRowIndex) Step 1
        tmAdMdRowIndex(ilLoop) = tgAdMdRowIndex(ilLoop)
    Next ilLoop
    ReDim tmWAMdExt(LBound(tgWAMdExt) To UBound(tgWAMdExt)) As SDFMDEXT
    For ilLoop = LBound(tgWAMdExt) To UBound(tgWAMdExt) Step 1
        tmWAMdExt(ilLoop) = tgWAMdExt(ilLoop)
    Next ilLoop
    tmAddEvt = tgAddEvt
    ReDim tmSpotMove(LBound(tgSptMve) To UBound(tgSptMve)) As SPOTMOVE
    For ilLoop = LBound(tgSptMve) To UBound(tgSptMve) Step 1
        tmSpotMove(ilLoop) = tgSptMve(ilLoop)
    Next ilLoop
    For ilLoop = 0 To 6 Step 1
        lmSsfRecPos(ilLoop) = 0
    Next ilLoop
    If ilClear Then
        mClearDrag ilForcePaint
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mAddEvt                         *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Add spot event to array and     *
'*                     adjust remainder record         *
'*                                                     *
'*******************************************************
Private Function mAddEvt(tlAddEvt As EVTINFO, llSsfAvailRecPos As Long, ilSsfAvailIndex As Integer, ilPosition As Integer, ilCorrectSsfIndies As Integer, tlEvt() As EVTINFO, tlVcf() As VCF, slVcfDay As String) As Integer
'
'   ilRet = mAddEvt(tlAddEvt, ilSsfAvailIndex, ilPosition, ilCorrectSsfIndies, tlEvt(), tlVcf())
'   Where:
'       tlAddEvt(I)- Event to be added
'       llSsfAvailrecPos(I)- Avail Ssf record position
'       ilSsfAvailIndex(I)- Avail index that event is to be added into
'       ilPosition(I)- position within avail to add event (-1=end)
'       ilCorrectSsfIndies(I)- True=increment tlEvt().iSpotIndex if same Ssf record
'                              False= leave indices alone
'       tlEvt()(I/O)- Event array
'
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilInsertRec As Integer
    Dim ilConflictInserted As Integer
    Dim ilNoSpots As Integer
    Dim il99Index As Integer
    Dim ilFreeIndex As Integer
    Dim slTime As String
    Dim slAvTime As String
    Dim llTime As Long
    Dim ilAvail As Integer
    Dim ilVcf As Integer
    Dim ilEvt As Integer
    Dim ilFind99 As Integer
    ilInsertRec = True
    tlAddEvt.sCITFlag = ""
    tlAddEvt.sCopyCIT = ""
    'For ilIndex = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilIndex = imLBEvt To UBound(tlEvt) - 1 Step 1
        If (llSsfAvailRecPos = tlEvt(ilIndex).lSsfRecPos) And (ilSsfAvailIndex = tlEvt(ilIndex).iSsfIndex) And (tlEvt(ilIndex).iType >= 2) And (tlEvt(ilIndex).iType <= 9) Then
            If (tlAddEvt.iLineInfo And &H1000) <> &H1000 Then
                ilFind99 = True
                If ((tlAddEvt.iLineInfo And &H800) = &H800) And (ilPosition > 0) Then
                    If ilIndex + 1 <= UBound(tlEvt) - 1 Then
                        If tlEvt(ilIndex + 1).iType = 100 Then
                            If (tlEvt(ilIndex + 1).iLineInfo And &H800) = &H800 Then
                                ilFind99 = False
                            End If
                        End If
                    End If
                End If
                If ilFind99 Then
                    For ilLoop = ilIndex + 1 To UBound(tlEvt) - 1 Step 1
                        If tlEvt(ilLoop).iType = 99 Then
                            'Adjust values then move
                            If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                                'For spot records- len is stored in the unit field
                                If (tlAddEvt.iUnits < tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).iUnits > 1) Then
                                    tlEvt(ilLoop).lLen = tlEvt(ilLoop).lLen - tlAddEvt.iUnits
                                    tlEvt(ilLoop).iUnits = tlEvt(ilLoop).iUnits - 1
                                    slStr = "  " & Trim$(str$(tlEvt(ilLoop).iUnits)) & "/" & Trim$(str$(tlEvt(ilLoop).lLen))   'Time/Units/Seconds
                                    tlEvt(ilLoop).sShow = slStr   'Time/Units/Seconds
                                Else
                                    ilInsertRec = False
                                    il99Index = ilLoop
                                End If
                            ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                                ilInsertRec = False
                                il99Index = ilLoop
                            ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
                                ilInsertRec = False
                                il99Index = ilLoop
                            End If
                            Exit For
                        ElseIf tlEvt(ilLoop).iType <> 100 Then  'Create remainder record in whole
                            Exit For
                        End If
                    Next ilLoop
                End If
            End If
            ilNoSpots = 0
            For ilLoop = ilIndex + 1 To UBound(tlEvt) - 1 Step 1
                If tlEvt(ilLoop).iType = 100 Then
                    ilNoSpots = ilNoSpots + 1
                Else
                    Exit For
                End If
            Next ilLoop
            'Insert new record
            If (ilPosition <= 0) Or (ilPosition > ilNoSpots) Then
                ilFreeIndex = ilIndex + ilNoSpots + 1
            Else
                ilFreeIndex = ilIndex + ilPosition
            End If
            tlAddEvt.lSsfRecPos = tlEvt(ilFreeIndex - 1).lSsfRecPos
            tlAddEvt.iSsfIndex = tlEvt(ilFreeIndex - 1).iSsfIndex + 1
            If ilInsertRec Then
                ReDim Preserve tlEvt(0 To UBound(tlEvt) + 1) As EVTINFO
                'Move all subrecords down one to make room for spot
                For ilLoop = UBound(tlEvt) - 2 To ilFreeIndex Step -1
                    If ilLoop = ilFreeIndex Then
                        If (tlAddEvt.iLineInfo And &H800) = &H800 Then
                            If (tlEvt(ilLoop).iLineInfo And &H800) = &H800 Then
                                tlEvt(ilLoop).iLineInfo = (tlEvt(ilLoop).iLineInfo And (Not &H800)) Or &H1000
                            End If
                        End If
                    End If
                    If ilCorrectSsfIndies Then
                        If llSsfAvailRecPos = tlEvt(ilLoop).lSsfRecPos Then
                            tlEvt(ilLoop).iSsfIndex = tlEvt(ilLoop).iSsfIndex + 1
                        End If
                    End If
                    tlEvt(ilLoop + 1) = tlEvt(ilLoop)
                Next ilLoop
                tlEvt(ilFreeIndex) = tlAddEvt
            Else
                For ilLoop = il99Index - 1 To ilFreeIndex Step -1
                    tlEvt(ilLoop + 1) = tlEvt(ilLoop)
                Next ilLoop
                tlEvt(ilFreeIndex) = tlAddEvt
                If ilCorrectSsfIndies Then
                    For ilLoop = UBound(tlEvt) - 1 To ilFreeIndex + 1 Step -1
                        If llSsfAvailRecPos = tlEvt(ilLoop).lSsfRecPos Then
                            tlEvt(ilLoop).iSsfIndex = tlEvt(ilLoop).iSsfIndex + 1
                        End If
                    Next ilLoop
                End If
            End If
            mAddEvt = True
            'If (UBound(tlVcf) > 1) And (tgSpf.sHideGhostSptScr <> "Y") Then
            If (UBound(tlVcf) > 0) And (tgSpf.sHideGhostSptScr <> "Y") Then
                For ilLoop = LBound(tlVcf) To UBound(tlVcf) Step 1
                    gUnpackTime tlVcf(ilLoop).iSellTime(0), tlVcf(ilLoop).iSellTime(1), "A", "1", slTime
                    llTime = CLng(gTimeToCurrency(slTime, False))
                    If llTime = tlEvt(ilIndex).lTime Then
                        slAvTime = slTime
                        For ilVcf = LBound(tlVcf(ilLoop).iCSV) To UBound(tlVcf(ilLoop).iCSV) Step 1
                            If (imVehCode = tlVcf(ilLoop).iCSV(ilVcf)) And (slVcfDay = tlVcf(ilLoop).sCSD(ilVcf)) Then
                                'Find matching avail, then add event as 101
                                gUnpackTime tlVcf(ilLoop).iCST(0, ilVcf), tlVcf(ilLoop).iCST(1, ilVcf), "A", "1", slTime
                                llTime = CLng(gTimeToCurrency(slTime, False))
                                'For ilAvail = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
                                For ilAvail = imLBEvt To UBound(tlEvt) - 1 Step 1
                                    If (tlEvt(ilAvail).iType >= 2) And (tlEvt(ilAvail).iType <= 9) And (tlEvt(ilAvail).lTime = llTime) Then
                                        'Insert event
                                        ilConflictInserted = False
                                        For ilFreeIndex = ilAvail + 1 To UBound(tlEvt) - 1 Step 1
                                            If tlEvt(ilFreeIndex).iType < 99 Then
                                                ReDim Preserve tlEvt(0 To UBound(tlEvt) + 1) As EVTINFO
                                                'Move all subrecords down one to make room for spot
                                                For ilEvt = UBound(tlEvt) - 2 To ilFreeIndex Step -1
                                                    tlEvt(ilEvt + 1) = tlEvt(ilEvt)
                                                Next ilEvt
                                                tlEvt(ilFreeIndex) = tlAddEvt
                                                tlEvt(ilFreeIndex).iType = 101
                                                tlEvt(ilFreeIndex).lSsfRecPos = 0
                                                tlEvt(ilFreeIndex).iSsfIndex = 0
                                                'tlEvt(ilFreeIndex).sSpot = tlEvt(ilFreeIndex).sShow
                                                'tlEvt(ilFreeIndex).sShow = "  " & Left$(smVehName, 3) & "/" & slAvTime & "/" & tlEvt(ilFreeIndex).sShow
                                                tlEvt(ilFreeIndex).sSpot = tlEvt(ilFreeIndex).sShow
                                                tlEvt(ilFreeIndex).sShow = "  " & Left$(smVehName, 3) & "," & slAvTime & "," & LTrim$(tlEvt(ilFreeIndex).sShow)
                                                slStr = LTrim$(tlEvt(ilFreeIndex).sSpot)
                                                'Remove spot length
                                                'Do While (Asc(slStr) <> Asc(" ")) And (Asc(slStr) <> Asc("+")) And (Asc(slStr) <> Asc("-")) And (Asc(slStr) <> Asc("!")) And (Asc(slStr) <> Asc(">")) And (Asc(slStr) <> Asc("<"))
                                                Do While (Asc(slStr) <> Asc(" ")) And (Asc(slStr) <> Asc("+")) And (Asc(slStr) <> Asc("-")) And (Asc(slStr) <> Asc("!")) And (Asc(slStr) <> Asc("@")) And (Asc(slStr) <> Asc("#"))
                                                    slStr = right$(slStr, Len(slStr) - 1)
                                                Loop
                                                tlEvt(ilFreeIndex).sSpot = "  " & Left$(smVehName, 2) & "," & slStr
                                                ilConflictInserted = True
                                                Exit For
                                            End If
                                        Next ilFreeIndex
                                        If Not ilConflictInserted Then
                                            ReDim Preserve tlEvt(0 To UBound(tlEvt) + 1) As EVTINFO
                                            ilFreeIndex = UBound(tlEvt) - 1
                                            tlEvt(ilFreeIndex) = tlAddEvt
                                            tlEvt(ilFreeIndex).iType = 101
                                            tlEvt(ilFreeIndex).lSsfRecPos = 0
                                            tlEvt(ilFreeIndex).iSsfIndex = 0
                                            'tlEvt(ilFreeIndex).sSpot = tlEvt(ilFreeIndex).sShow
                                            'tlEvt(ilFreeIndex).sShow = "  " & Left$(smVehName, 3) & "/" & slAvTime & "/" & tlEvt(ilFreeIndex).sShow
                                            tlEvt(ilFreeIndex).sSpot = tlEvt(ilFreeIndex).sShow
                                            tlEvt(ilFreeIndex).sShow = "  " & Left$(smVehName, 3) & "," & slAvTime & "," & LTrim$(tlEvt(ilFreeIndex).sShow)
                                            slStr = LTrim$(tlEvt(ilFreeIndex).sSpot)
                                            'Remove spot length
                                            'Do While (Asc(slStr) <> Asc(" ")) And (Asc(slStr) <> Asc("+")) And (Asc(slStr) <> Asc("-")) And (Asc(slStr) <> Asc("!")) And (Asc(slStr) <> Asc(">")) And (Asc(slStr) <> Asc("<"))
                                            Do While (Asc(slStr) <> Asc(" ")) And (Asc(slStr) <> Asc("+")) And (Asc(slStr) <> Asc("-")) And (Asc(slStr) <> Asc("!")) And (Asc(slStr) <> Asc("@")) And (Asc(slStr) <> Asc("#"))
                                                slStr = right$(slStr, Len(slStr) - 1)
                                            Loop
                                            tlEvt(ilFreeIndex).sSpot = "  " & Left$(smVehName, 2) & "," & slStr
                                        End If
                                        Exit For
                                    End If
                                Next ilAvail
                            End If
                        Next ilVcf
                    End If
                Next ilLoop
            End If
            Exit Function
        End If
    Next ilIndex
    mAddEvt = False
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mAdjCounts                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Adjust counts for hour and day *
'*                      for a spot                     *
'*                                                     *
'*******************************************************
Private Sub mAdjCounts(ilAdj As Integer, tlSdfExt As SDFEXT)
'
'   mAdjCounts ilAdj, tmSdfExt
'   Where:
'       ilAdj(I)- +1 or -1
'       tmSdfExt(I)- Spot to adjust count for
'
    Dim ilHrIndex As Integer
    Dim ilDay As Integer
    Dim slDate As String
    If imToggleRot = 2 Then
        If tlSdfExt.sSpotType = "X" Then
            Exit Sub
        End If
        If (tlSdfExt.sSchStatus = "G") Or (tlSdfExt.sSchStatus = "O") Then
            If tlSdfExt.iVefCode <> imVehCode Then
                Exit Sub
            End If
        End If
    ElseIf imToggleRot = 3 Then
        If tlSdfExt.sSpotType = "X" Then
            Exit Sub
        End If
        If (tlSdfExt.sSchStatus = "G") Or (tlSdfExt.sSchStatus = "O") Then
            If tlSdfExt.iVefCode <> imVehCode Then
                Exit Sub
            End If
        End If
        If (imCountLineNo <> tlSdfExt.iLineNo) Then
            Exit Sub
        End If
    Else
        If (tlSdfExt.sSchStatus = "G") Or (tlSdfExt.sSchStatus = "O") Then
            If tlSdfExt.iVefCode <> imVehCode Then
                Exit Sub
            End If
        End If
    End If
    If ((tlSdfExt.sSchStatus = "S") Or (tlSdfExt.sSchStatus = "G") Or (tlSdfExt.sSchStatus = "O")) Or (ilAdj = -1) Then
        gUnpackDate tlSdfExt.iDate(0), tlSdfExt.iDate(1), slDate
        If (imToggleDate = 1) Or ((imToggleDate = 0) And (gDateValue(slDate) < lmNowDatePlus1)) Then
            ilHrIndex = tlSdfExt.iTime(1) \ 256  'Yields hour index 0-23
            imHourCount(ilHrIndex) = imHourCount(ilHrIndex) + ilAdj
            'Day count- only count weekly buys as day buy bias results
            ilDay = gWeekDayStr(slDate)
            'ilRet = mReadChfClfRdfCffRec(tlSdfExt.lChfCode, tlSdfExt.iLineNo, slDate, slStartDate, slEndDate, slNoSpots)
            'If ilRet And tmCff(0).sDelete <> "Y" Then
                'Test days
            '    If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then 'Weekly
            '        If (tmCff(0).iDay(ilDay) > 0) Or (tmCff(0).sXDay(ilDay) = "Y") Then
                        imDayCount(ilDay) = imDayCount(ilDay) + ilAdj
            '        End If
            '    End If
            'End If
        End If
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mAdvtPop                        *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Advertiser list box   *
'*                      if requireds                   *
'*                                                     *
'*******************************************************
Private Sub mAdvtPop()
'
'   mAdvtPop
'   Where:
'
    Dim ilRet As Integer
    'Repopulate if required- if sales source changed by another user while in this screen
    'ilRet = gPopAdvtBox(Spots, lbcAdvt, Traffic!lbcAdvertiser)
    ilRet = gPopAdvtBox(Spots, lbcAdvt, tgSpotAdvertiser(), sgSpotAdvertiserTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mAdvtPopErr
        gCPErrorMsg ilRet, "mAdvtPop (gPopAdvtBox)", Spots
        On Error GoTo 0
    End If
    lbcAdvt.height = gListBoxHeight(lbcAdvt.ListCount, 10)
    Exit Sub
mAdvtPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mAvailGridLoc                   *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Move spot into avail location   *
'*                                                     *
'*******************************************************
Private Function mAvailGridLoc(X As Single, Y As Single, llStartDate As Long, llEndDate As Long, llStartTime As Long, llEndTime As Long, ilGameNo As Integer) As Integer
    Dim slDate As String
    ReDim llDate(0 To 6) As Long
    Dim ilStartDayIndex As Integer
    Dim ilEndDayIndex As Integer
    Dim ilDayAllowed As Integer
    Dim ilLoop As Integer
    Dim ilStart As Integer
    Dim ilEnd As Integer
    Dim ilRow As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer
    Dim ilDay As Integer
    Dim ilIndex As Integer
    ReDim ilBuildGameNo(0 To 6) As Integer
    Dim ilGameIndex As Integer
    Dim slStr As String
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    
    mAvailGridLoc = False
    ilStartDayIndex = -1
    ilEndDayIndex = -1
    llStartDate = -1
    llEndDate = -1
    llStartTime = -1
    llEndTime = -1
    If Trim$(edcAvDate.Text) = "" Then
        Exit Function
    End If
    If tmVef.sType <> "G" Then
        slDate = edcAvDate.Text 'plcAvDate.Caption
        llDate(0) = gDateValue(slDate)
        llDate(1) = llDate(0) + 1
        llDate(2) = llDate(1) + 1
        llDate(3) = llDate(2) + 1
        llDate(4) = llDate(3) + 1
        llDate(5) = llDate(4) + 1
        llDate(6) = llDate(5) + 1
        For ilDay = 0 To 6 Step 1
            ilBuildGameNo(ilDay) = 0
        Next ilDay
    Else
        ilBuildGameNo(0) = mGetAvGameNo()
        If ilBuildGameNo(0) <= 0 Then
            Exit Function
        End If
        slDate = mGetAvGameDate()
        If slDate = "" Then
            Exit Function
        End If
        ilGameIndex = mFindGameNoIndex(ilBuildGameNo(0))
        llDate(0) = gDateValue(slDate)
        For ilDay = 1 To 6 Step 1
            llDate(ilDay) = -1
            ilBuildGameNo(ilDay) = -1
            If ilGameIndex + ilDay < lbcGameNo(3).ListCount Then
                slStr = lbcGameNo(3).List(ilGameIndex + ilDay)
                ilPos1 = InStr(1, slStr, " ", vbTextCompare)
                If ilPos1 > 0 Then
                    ilBuildGameNo(ilDay) = Val(Trim$(Left(slStr, ilPos1)))
                    ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
                    If ilPos2 > 0 Then
                        llDate(ilDay) = gDateValue(Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1)))
                    End If
                End If
            End If
        Next ilDay
    End If
    'Determine Column
    If (X >= tmAvCtrls(1).fBoxX) And (X <= (tmAvCtrls(1).fBoxX + tmAvCtrls(1).fBoxW)) And (tmVef.sType <> "G") Then
        ilStartDayIndex = 0
        ilEndDayIndex = 6
        For ilDay = 0 To 6 Step 1
            If (llDate(ilDay) < lmEarliestAllowedDate) And (llDate(ilDay) > 0) Then
                ilStartDayIndex = ilDay + 1 'Set to next day
            End If
        Next ilDay
    Else
        For ilDay = 0 To 6 Step 1
            If llDate(ilDay) > 0 Then
                If llDate(ilDay) < lmEarliestAllowedDate Then
                    ilDayAllowed = False
                ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate(ilDay) <= lmLastLogDate) Then
                    ilDayAllowed = True
                Else
                    ilDayAllowed = True
                End If
                If ilDayAllowed Then
                    If (X >= tmAvCtrls(ilDay + 2).fBoxX) And (X <= (tmAvCtrls(ilDay + 2).fBoxX + tmAvCtrls(ilDay + 2).fBoxW)) Then
                        ilStartDayIndex = ilDay
                        ilEndDayIndex = ilDay
                        Exit For
                    End If
                End If
            End If
        Next ilDay
    End If
    If ilStartDayIndex = -1 Then
        Exit Function
    End If
    If (tmVef.sType = "G") And (ilBuildGameNo(ilStartDayIndex) = -1) Then
        Exit Function
    End If
    llStartDate = llDate(ilStartDayIndex)
    llEndDate = llDate(ilEndDayIndex)
    ilGameNo = ilBuildGameNo(ilStartDayIndex)
    'Determine row
    ilStart = vbcAvail.Value
    ilEnd = vbcAvail.Value + vbcAvail.LargeChange
    If imAvailTm = 1 Then   '0=Hourly; 1=Daypart
        If ilEnd > lbcDPSort.ListCount Then
            ilEnd = lbcDPSort.ListCount
        End If
    Else
        If ilEnd > 24 Then
            ilEnd = 24
        End If
    End If
    ilRow = 1
    For ilLoop = ilStart To ilEnd Step 1
        If (Y >= tmAvCtrls(1).fBoxY + (ilRow) * (fgBoxGridH + 15)) And (Y <= tmAvCtrls(1).fBoxY + (ilRow + 1) * (fgBoxGridH + 15)) Then
            If imAvailTm = 1 Then   '0=Hourly; 1=Daypart
                slNameCode = lbcDPSort.List(ilLoop - 1)
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                ilIndex = Val(slCode)
                llStartTime = tmRCDP(ilIndex).lStartTime
                llEndTime = tmRCDP(ilIndex).lEndTime - 1
                Exit For
            Else
                llStartTime = (vbcAvail.Value + ilRow - 2) * CLng(3600)
                llEndTime = llStartTime + 3599
                Exit For
            End If
        End If
        ilRow = ilRow + 1
    Next ilLoop
    'Disallow all time as unable to desire which times to book into
    If llStartTime = -1 Then
        'If (Y < tmAvCtrls(1).fBoxY) Or (Y > tmAvCtrls(1).fBoxY + (fgBoxGridH + 15)) Then
            Exit Function
        'End If
        'llStartTime = 0
        'llEndTime = 24 * 3600 - 1
    End If
    mAvailGridLoc = True
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mAvailMix                       *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Restore all array as Trans Log  *
'*                     aborted                         *
'*                                                     *
'*******************************************************
Private Function mAvailMix(llStartDate As Long, llEndDate As Long, llStartTime As Long, llEndTime As Long, ilGameNo As Integer) As Integer
    Dim llDate As Long
    Dim ilDay As Integer
    Dim ilLoop As Integer
    Dim ilNum As Integer
    Dim slStr As String
    Dim ilGameIndex As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slGameDate As String
    Dim ilRet As Integer
    ReDim tgAvailMix(0 To 0) As AVAILMIX
    If tmVef.sType <> "G" Then
        For llDate = llStartDate To llEndDate Step 1
            ilDay = gWeekDayLong(llDate)
            Select Case ilDay
                Case 0
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmMoEvt()
                Case 1
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmTuEvt()
                Case 2
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmWeEvt()
                Case 3
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmThEvt()
                Case 4
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmFrEvt()
                Case 5
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmSaEvt()
                Case 6
                    mAvailMixBuild ilDay, llStartTime, llEndTime, tmSuEvt()
            End Select
        Next llDate
    Else
        slGameDate = mFindGameNoDate(ilGameNo, 3)
        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slGameDate, "12:00AM", "12:00AM", ilGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmGameEvt())
        mAvailMixBuild ilDay, llStartTime, llEndTime, tmGameEvt()
    End If
    'Randomize records
    Randomize
    For ilLoop = LBound(tgAvailMix) To UBound(tgAvailMix) - 1 Step 1
        ilNum = Int(UBound(tgAvailMix) * Rnd + 1)
        slStr = Trim$(str$(ilNum))
        Do While Len(slStr) < 5
            slStr = "0" & slStr
        Loop
        tgAvailMix(ilLoop).sKey = slStr
    Next ilLoop
    If UBound(tgAvailMix) - 1 > 0 Then
        ArraySortTyp fnAV(tgAvailMix(), 0), UBound(tgAvailMix), 0, LenB(tgAvailMix(0)), 0, LenB(tgAvailMix(0).sKey), 0
    End If
    If UBound(tgAvailMix) > 0 Then
        mAvailMix = True
    Else
        mAvailMix = False
    End If
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mAvailMixBuild                  *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Get avails                      *
'*                                                     *
'*******************************************************
Private Sub mAvailMixBuild(ilDay As Integer, llStartTime As Long, llEndTime As Long, tlEvt() As EVTINFO)
    Dim ilOk As Integer
    Dim ilRow As Integer
    Dim ilUpper As Integer
    Dim ilAvail As Integer
    'For ilRow = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilRow = imLBEvt To UBound(tlEvt) - 1 Step 1
        If (tlEvt(ilRow).iType = 99) Then
            'Backup to avail
            ilOk = True
            'For ilAvail = ilRow - 1 To 1 Step -1
            For ilAvail = ilRow - 1 To imLBEvt Step -1
                If (tlEvt(ilAvail).iType >= 2) And (tlEvt(ilAvail).iType <= 9) Then
                    If (tlEvt(ilAvail).lTime >= llStartTime) And (tlEvt(ilAvail).lTime <= llEndTime) Then
                        If tlEvt(ilAvail).iType = 8 Then   'PSA Avail- only allow PSAs
                            If smDragCntrType <> "S" Then
                                ilOk = False
                            End If
                        End If
                        If tlEvt(ilAvail).iType = 9 Then   'Promo Avail- only allow promos
                            If smDragCntrType <> "M" Then
                                ilOk = False
                            End If
                        End If
                    Else
                        ilOk = False
                    End If
                    If ilOk Then
                        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                            If imDragSpotLen <= tlEvt(ilRow).lLen Then
                                ilOk = True
                            End If
                        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                            If imDragSpotLen = tlEvt(ilRow).lLen Then
                                ilOk = True
                            End If
                        End If
                    End If
                    If ilOk Then
                        ilUpper = UBound(tgAvailMix)
                        tgAvailMix(ilUpper).iColNo = ilDay
                        tgAvailMix(ilUpper).iRowNo = ilRow
                        tgAvailMix(ilUpper).iIndex = ilRow
                        ReDim Preserve tgAvailMix(0 To ilUpper + 1) As AVAILMIX
                    End If
                    Exit For
                End If
            Next ilAvail
        End If
    Next ilRow
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mAvailMixSch                    *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move spot to avail             *
'*                                                     *
'*******************************************************
Private Function mAvailMixSch(ilGameNo As Integer) As Integer
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilGameNo                                                                              *
'******************************************************************************************

    Dim ilPass As Integer   '0=Find avail without any conflicts; 1=Find avail and move as MG
    Dim ilAvail As Integer
    Dim llDate As Long
    Dim slDate As String
    Dim slSchStatus As String
    Dim ilDay As Integer
    Dim ilShowMsg As Integer
    Dim ilBkQH As Integer
    Dim llStartDate As Long
    Dim ilSchd As Integer
    Dim ilL1GameNo As Integer
    Dim ilL2GameNo As Integer
    Dim ilRet As Integer

    If Trim$(edcAvDate.Text) = "" Then
        mAvailMixSch = False
        Exit Function
    End If
    ilSchd = 0
    If tmVef.sType <> "G" Then
        slDate = edcAvDate.Text 'plcAvDate.Caption
        llStartDate = gDateValue(slDate)
    End If
    For ilPass = 0 To 1 Step 1
        If ilPass = 0 Then
            ilShowMsg = 2   'No overrides required
        Else
            ilShowMsg = 3   'week, day or time overrides only
        End If
        For ilAvail = LBound(tgAvailMix) To UBound(tgAvailMix) - 1 Step 1
            If tmVef.sType <> "G" Then
                llDate = llStartDate + tgAvailMix(ilAvail).iColNo
                slDate = Format$(llDate, "m/d/yy")
            Else
                slDate = mFindGameNoDate(ilGameNo, 3)
                ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, "12:00AM", "12:00AM", ilGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmGameEvt())
            End If
            imDragIndexDest = tgAvailMix(ilAvail).iIndex
            ilDay = tgAvailMix(ilAvail).iColNo
            Select Case imDragSrce
                Case DRAGLOG1   'Move spot to bump and show within work
                    'ReDim tmSpotMove(1 To 2) As SPOTMOVE
                    'tmSpotMove(1).iSpotIndex = tmL1Evt(imDragIndexSrce).iSsfIndex
                    'tmSpotMove(1).lSpotSsfRecPos = tmL1Evt(imDragIndexSrce).lSsfRecPos
                    'tmSpotMove(1).lSdfCode = tmL1Evt(imDragIndexSrce).lSdfCode
                    'tmSpotMove(1).iAvailIndex = -1
                    ReDim tmSpotMove(0 To 1) As SPOTMOVE
                    tmSpotMove(0).iSpotIndex = tmL1Evt(imDragIndexSrce).iSsfIndex
                    tmSpotMove(0).lSpotSsfRecPos = tmL1Evt(imDragIndexSrce).lSsfRecPos
                    tmSpotMove(0).lSdfCode = tmL1Evt(imDragIndexSrce).lSdfCode
                    tmSpotMove(0).iAvailIndex = -1
                    If tmVef.sType <> "G" Then
                        Select Case ilDay
                            Case 0
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmMoEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 1
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmTuEvt(), imDragIndexDest, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 2
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmWeEvt(), imDragIndexDest, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 3
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmThEvt(), imDragIndexDest, tmThVcf0(), tmThVcf6(), tmThVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 4
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmFrEvt(), imDragIndexDest, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 5
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmSaEvt(), imDragIndexDest, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 6
                                slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, 0, tmSuEvt(), imDragIndexDest, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmL1Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                        End Select
                    Else
                        slSchStatus = mMoveTest(tmL1Evt(imDragIndexSrce).lTime, slDate, ilGameNo, tmGameEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmGameEvt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                    End If
                    If (slSchStatus = "D") And (ilShowMsg = 3) Then
                        mAvailMixSch = False
                        Exit Function
                    End If
                    If (slSchStatus = "S") Or (slSchStatus = "G") Or (slSchStatus = "O") Then
                        If tmVef.sType <> "G" Then
                            Select Case ilDay
                                Case 0
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), slSchStatus
                                    End If
                                Case 1
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), slSchStatus
                                    End If
                                Case 2
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), slSchStatus
                                    End If
                                Case 3
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), slSchStatus
                                    End If
                                Case 4
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), slSchStatus
                                    End If
                                Case 5
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), slSchStatus
                                    End If
                               Case 6
                                    If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                        mLogMoveSpot slDate, 0, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    Else
                                        mLogLogMoveSpot smLog1Date, 0, slDate, 0, tmL1Evt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), slSchStatus
                                    End If
                            End Select
                            If gDateValue(smLog1Date) = gDateValue(slDate) Then
                                ilSchd = 2
                            Else
                                ilSchd = 1
                            End If
                        Else
                            ilL1GameNo = mGetL1GameNo()
                            If ilL1GameNo = ilGameNo Then
                                mLogMoveSpot slDate, ilGameNo, tmGameEvt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                ilSchd = 2
                            Else
                                mLogLogMoveSpot smLog1Date, ilL1GameNo, slDate, ilGameNo, tmL1Evt(), tmGameEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), slSchStatus
                                ilSchd = 1
                            End If
                        End If
                        Exit For
                    End If
                Case DRAGLOG2   'Test source
                    If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Then
                        'ReDim tmSpotMove(1 To 1) As SPOTMOVE
                        ReDim tmSpotMove(0 To 0) As SPOTMOVE
                        If tmVef.sType <> "G" Then
                            Select Case ilDay
                                Case 0
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmMoEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 1
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmTuEvt(), imDragIndexDest, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 2
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmWeEvt(), imDragIndexDest, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 3
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmThEvt(), imDragIndexDest, tmThVcf0(), tmThVcf6(), tmThVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 4
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmFrEvt(), imDragIndexDest, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 5
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmSaEvt(), imDragIndexDest, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 6
                                    slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmSuEvt(), imDragIndexDest, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            End Select
                        Else
                            slSchStatus = mMoveTest(tmSdfMdExt(imDragIndexSrce).lRecPos, slDate, ilGameNo, tmGameEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmSdfMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                        End If
                        If (slSchStatus = "D") And (ilShowMsg = 3) Then
                            mAvailMixSch = False
                            Exit Function
                        End If
                        If (slSchStatus = "S") Or (slSchStatus = "G") Or (slSchStatus = "O") Then
                            If tmVef.sType <> "G" Then
                                Select Case ilDay
                                    Case 0
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), slSchStatus
                                    Case 1
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), slSchStatus
                                    Case 2
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), slSchStatus
                                    Case 3
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), slSchStatus
                                    Case 4
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), slSchStatus
                                    Case 5
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), slSchStatus
                                   Case 6
                                        mMdMoveSpot 1, tmSdfMdExt(), slDate, 0, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), slSchStatus
                                End Select
                            Else
                                mMdMoveSpot 1, tmSdfMdExt(), slDate, ilGameNo, tmGameEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), slSchStatus
                            End If
                            ilSchd = 3
                            Exit For
                        End If

                    ElseIf imLog2Type = 4 Then  'Moving from missed to work is ignored
                        'ReDim tmSpotMove(1 To 2) As SPOTMOVE
                        'tmSpotMove(1).iSpotIndex = tmL2Evt(imDragIndexSrce).iSsfIndex
                        'tmSpotMove(1).lSpotSsfRecPos = tmL2Evt(imDragIndexSrce).lSsfRecPos
                        'tmSpotMove(1).lSdfCode = tmL2Evt(imDragIndexSrce).lSdfCode
                        'tmSpotMove(1).iAvailIndex = -1
                        ReDim tmSpotMove(0 To 1) As SPOTMOVE
                        tmSpotMove(0).iSpotIndex = tmL2Evt(imDragIndexSrce).iSsfIndex
                        tmSpotMove(0).lSpotSsfRecPos = tmL2Evt(imDragIndexSrce).lSsfRecPos
                        tmSpotMove(0).lSdfCode = tmL2Evt(imDragIndexSrce).lSdfCode
                        tmSpotMove(0).iAvailIndex = -1
                        If tmVef.sType <> "G" Then
                            Select Case ilDay
                                Case 0
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmMoEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 1
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmTuEvt(), imDragIndexDest, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 2
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmWeEvt(), imDragIndexDest, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 3
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmThEvt(), imDragIndexDest, tmThVcf0(), tmThVcf6(), tmThVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 4
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmFrEvt(), imDragIndexDest, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 5
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmSaEvt(), imDragIndexDest, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                                Case 6
                                    slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, 0, tmSuEvt(), imDragIndexDest, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            End Select
                        Else
                            slSchStatus = mMoveTest(tmL2Evt(imDragIndexSrce).lTime, slDate, ilGameNo, tmGameEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmL2Evt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                        End If
                        If (slSchStatus = "D") And (ilShowMsg = 3) Then
                            mAvailMixSch = False
                            Exit Function
                        End If
                        If (slSchStatus = "S") Or (slSchStatus = "G") Or (slSchStatus = "O") Then
                            If tmVef.sType <> "G" Then
                                Select Case ilDay
                                    Case 0
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), slSchStatus
                                        End If
                                    Case 1
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), slSchStatus
                                        End If
                                    Case 2
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), slSchStatus
                                        End If
                                    Case 3
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), slSchStatus
                                        End If
                                    Case 4
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), slSchStatus
                                        End If
                                    Case 5
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), slSchStatus
                                        End If
                                   Case 6
                                        If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                            mLogMoveSpot slDate, 0, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), slSchStatus
                                        Else
                                            mLogLogMoveSpot smLog2Date, 0, slDate, 0, tmL2Evt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), slSchStatus
                                        End If
                                End Select
                                If gDateValue(smLog2Date) = gDateValue(slDate) Then
                                    ilSchd = 2
                                Else
                                    ilSchd = 1
                                End If
                            Else
                                ilL2GameNo = mGetL2GameNo()
                                If ilL2GameNo = ilGameNo Then
                                    mLogMoveSpot slDate, ilGameNo, tmGameEvt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), slSchStatus
                                    ilSchd = 2
                                Else
                                    mLogLogMoveSpot smLog2Date, ilL2GameNo, slDate, ilGameNo, tmL2Evt(), tmGameEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), slSchStatus
                                    ilSchd = 1
                                End If
                            End If
                            Exit For
                        End If
                    End If
                Case DRAGHOLD
                    'ReDim tmSpotMove(1 To 1) As SPOTMOVE
                    ReDim tmSpotMove(0 To 0) As SPOTMOVE
                    If tmVef.sType <> "G" Then
                        Select Case ilDay
                            Case 0
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmMoEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 1
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmTuEvt(), imDragIndexDest, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 2
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmWeEvt(), imDragIndexDest, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 3
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmThEvt(), imDragIndexDest, tmThVcf0(), tmThVcf6(), tmThVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 4
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmFrEvt(), imDragIndexDest, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 5
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmSaEvt(), imDragIndexDest, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                            Case 6
                                slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, 0, tmSuEvt(), imDragIndexDest, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                        End Select
                    Else
                        slSchStatus = mMoveTest(tmWAMdExt(imDragIndexSrce).lRecPos, slDate, ilGameNo, tmGameEvt(), imDragIndexDest, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmWAMdExt(imDragIndexSrce).sShow, ilBkQH, ilShowMsg)
                    End If
                    If (slSchStatus = "D") And (ilShowMsg = 3) Then
                        mAvailMixSch = False
                        Exit Function
                    End If
                    If (slSchStatus = "S") Or (slSchStatus = "G") Or (slSchStatus = "O") Then
                        If tmVef.sType <> "G" Then
                            Select Case ilDay
                                Case 0
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), slSchStatus
                                Case 1
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), slSchStatus
                                Case 2
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), slSchStatus
                                Case 3
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), slSchStatus
                                Case 4
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), slSchStatus
                                Case 5
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), slSchStatus
                                Case 6
                                    mMdMoveSpot -1, tmWAMdExt(), slDate, 0, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), slSchStatus
                            End Select
                        Else
                            mMdMoveSpot -1, tmWAMdExt(), slDate, ilGameNo, tmGameEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), slSchStatus
                        End If
                        ilSchd = 3
                        Exit For
                    End If
            End Select
        Next ilAvail
        If ilSchd <> 0 Then
            Exit For
        End If
    Next ilPass
    'Rebuild L1 if source is L1 or destination is L1 as used tmXXEvt (xx = Mo; Tu,...)
    If (ilSchd) And (ilSchd = 1) Then
        pbcHold.Cls
        pbcHold_Paint
        pbcAdWorkArea.Cls
        pbcAdWorkArea_Paint
        'Following are done in the Move routines
        'mVbcL1MinMax False
        'mVbcL2MinMax False
        mMissedSummary 1
        'mVbcMissedMinMax False
        'mVbcAvailMinMax False
        'mVbcContractMinMax False
    End If
    If tmVef.sType <> "G" Then
        If (ilSchd) And (ilSchd = 2) Then
            pbcHold.Cls
            pbcHold_Paint
            pbcAdWorkArea.Cls
            pbcAdWorkArea_Paint
            'Following are done in the Move routines
            'mVbcL1MinMax False
            'mVbcL2MinMax False
            mMissedSummary 1
            'mVbcMissedMinMax False
            'mVbcAvailMinMax False
            'mVbcContractMinMax False
        End If
    Else
        mForceRepaintDaily
    End If
    mAvailMixSch = True
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mAvailRoom                      *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if room for spot     *
'*                                                     *
'*******************************************************
Private Function mAvailRoom(ilDragDest As Integer, ilDragDestColNo As Integer, ilSrceIndex As Integer, tlSrceEvt() As EVTINFO, ilDestIndex As Integer, tlDestEvt() As EVTINFO) As Integer
'
'   ilRet = mAvailRoom(ilDragDest, ilDragDestColNo, ilSrceIndex, tlSrceEvt(), ilDestIndex, tlDestEvt())
'   Where:
'       ilDragDest(I)- Drag destination (DRAGLOG1 or DRAGLOG2 or DRAGCONTRACT)
'       ilDragDestColNo(I)- Drag destination column number (only valid for DRAGCONTRACT)
'       ilDestIndex(I)- Index into tlDestEvt where spot is being moved
'       tlDestEvt()(I)- Array of events
'
'       ilRet(O)- True=Room exist; False=Sufficient room for spot
'
    Dim ilLoop As Integer
    Dim ilLen As Integer
    Dim slDate As String
    'Check dates- Source is checked in tmDrag
    If ilDragDest = DRAGLOG1 Then
        If gDateValue(smLog1Date) < lmEarliestAllowedDate Then
            mAvailRoom = False
            Exit Function
        End If
    ElseIf (ilDragDest = DRAGLOG2) And (imLog2Type = 4) Then
        If gDateValue(smLog2Date) < lmEarliestAllowedDate Then
            mAvailRoom = False
            Exit Function
        End If
    ElseIf ilDragDest = DRAGCONTRACT Then
        'slDate = edcDate.Text   'plcDate.Caption    'Start date of the week
        'If gDateValue(slDate) + ilDragDestColNo - 1 < lmEarliestAllowedDate Then
        mGetEdcDate ilDragDestColNo - 1
        slDate = smEdcDate
        If lmEdcDate < lmEarliestAllowedDate Then
            mAvailRoom = False
            Exit Function
        End If
    End If
    'Check if same contract/line- if so bypass (lLen contains ChfCode)
    smSplitNetworkType = ""
    smSplitNetworkMixLen = "N"
    If tlDestEvt(ilDestIndex).iType = 100 Then
'9/17/05: Allow swap as if does not hurt anything and it allows fill and $ spots of the same contract to be swapped
'        If (imDragSrce = DRAGLOG1) Or ((imDragSrce = DRAGLOG2) And (imLog2Type = 4)) Then
'            If (tlSrceEvt(ilSrceIndex).lLen = tlDestEvt(ilDestIndex).lLen) And (tlSrceEvt(ilSrceIndex).iLineNo = tlDestEvt(ilDestIndex).iLineNo) Then
'                mAvailRoom = False
'                Exit Function
'            End If
'        ElseIf imDragSrce = DRAGCONTRACT Then
'            If (tlSrceEvt(ilSrceIndex).lLen = tlDestEvt(ilDestIndex).lLen) And (tlSrceEvt(ilSrceIndex).iLineNo = tlDestEvt(ilDestIndex).iLineNo) Then
'                mAvailRoom = False
'                Exit Function
'            End If
'        End If
        'disallow drag if on top of itself
        If tlSrceEvt(ilSrceIndex).lSdfCode = tlDestEvt(ilDestIndex).lSdfCode Then
            mAvailRoom = False
            Exit Function
        End If
        'Disallow swap if Split Network
        'If ((tlDestEvt(ilDestIndex).iLineInfo And &H800) = &H800) Or ((tlDestEvt(ilDestIndex).iLineInfo And &H1000) = &H1000) Then
        If ((tlDestEvt(ilDestIndex).iLineInfo And &H800) = &H800) Then
            If ((tlSrceEvt(ilSrceIndex).iLineInfo And &H800) = &H800) Or ((tlSrceEvt(ilSrceIndex).iLineInfo And &H1000) = &H1000) Then
                '10/6/08:  Allow mix lengths
                If (Asc(tgSpf.sUsingFeatures7) And REGIONMIXLEN) <> REGIONMIXLEN Then
                    If (imDragSpotLen = tlDestEvt(ilDestIndex).iUnits) Then
                        smSplitNetworkType = "S"
                        mAvailRoom = True
                    Else
                        mAvailRoom = False
                    End If
                Else
                    If (imDragSpotLen <= tlDestEvt(ilDestIndex).iUnits) Then
                        smSplitNetworkType = "S"
                        mAvailRoom = True
                    Else
                        '10/6/08:  Check if room exist
                        ilLoop = ilDestIndex
                        Do
                            ilLoop = ilLoop + 1
                            If ilLoop >= UBound(tlDestEvt) Then
                                mAvailRoom = False
                                Exit Function
                            End If
                            If tlDestEvt(ilLoop).iType = 99 Then
                                If imDragSpotLen - tlDestEvt(ilDestIndex).iUnits <= tlDestEvt(ilLoop).lLen Then  'Length stored within iUnits
                                    'Test the other way
                                    smSplitNetworkType = "P"
                                    smSplitNetworkMixLen = "Y"
                                    mAvailRoom = True
                                    Exit Function
                                Else
                                    Exit Do
                                    'mAvailRoom = False
                                    'Exit Function
                                End If
                            End If
                        Loop While tlDestEvt(ilLoop).iType = 100
                        mAvailRoom = False
                    End If
                End If
            Else
                mAvailRoom = False
            End If
            Exit Function
        Else
            If ((tlSrceEvt(ilSrceIndex).iLineInfo And &H800) = &H800) Or ((tlSrceEvt(ilSrceIndex).iLineInfo And &H1000) = &H1000) Then
                mAvailRoom = False
                Exit Function
            End If
        End If
    Else
        If ((tlSrceEvt(ilSrceIndex).iLineInfo And &H800) = &H800) Or ((tlSrceEvt(ilSrceIndex).iLineInfo And &H1000) = &H1000) Then
            If (rbcMode(1).Value) Or (imDblClickMode = 2) Then
                mAvailRoom = False
                Exit Function
            End If
            smSplitNetworkType = "P"
            smSplitNetworkMixLen = "N"
        End If
    End If

    'Test if allowed into avail type
    ilLoop = ilDestIndex
    Do
        ilLoop = ilLoop - 1
        'If ilLoop < LBound(tlDestEvt) Then
        If ilLoop < imLBEvt Then
            Exit Do
        End If
        If (tlDestEvt(ilLoop).iType >= 2) And (tlDestEvt(ilLoop).iType <= 9) Then
            'If ((tlDestEvt(ilLoop).iLineInfo And SSLOCK) = SSLOCK) Then
            '    mAvailRoom = False
            '    Exit Function
            'End If
            'If tlDestEvt(ilDestIndex).iType = 100 Then
            '    If ((tlDestEvt(ilLoop).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT) Then
            '        mAvailRoom = False
            '        Exit Function
            '    End If
            'End If
            If tlDestEvt(ilLoop).iType = 2 Then   'Contract avail
                'Exit Do
                If (smDragCntrType = "M") And (tgSpf.sSchdPromo = "Y") Then
                    If ((Asc(tgSpf.sUsingFeatures3) And PROMOINTOCONTRACTAVAILS) <> PROMOINTOCONTRACTAVAILS) Then
                        mAvailRoom = False
                        Exit Function
                    Else
                        Exit Do
                    End If
                Else
                    If (smDragCntrType = "S") And (tgSpf.sSchdPSA = "Y") Then
                        If ((Asc(tgSpf.sUsingFeatures3) And PSAINTOCONTRACTAVAILS) <> PSAINTOCONTRACTAVAILS) Then
                            mAvailRoom = False
                            Exit Function
                        Else
                            Exit Do
                        End If
                    Else
                        Exit Do
                    End If
                End If
            End If
            If tlDestEvt(ilLoop).iType = 8 Then   'PSA Avail- only allow PSAs
                If (smDragCntrType <> "S") Or (tgSpf.sSchdPSA <> "Y") Then
                    mAvailRoom = False
                    Exit Function
                Else
                    Exit Do
                End If
            End If
            If tlDestEvt(ilLoop).iType = 9 Then   'Promo Avail- only allow promos
                If (smDragCntrType <> "M") Or (tgSpf.sSchdPromo <> "Y") Then
                    mAvailRoom = False
                    Exit Function
                Else
                    Exit Do
                End If
            End If
            mAvailRoom = False
            Exit Function
        End If
    'Loop While ilLoop > LBound(tlDestEvt)
    Loop While ilLoop > imLBEvt

    If (tlDestEvt(ilDestIndex).iType = 100) Or (tlDestEvt(ilDestIndex).iType = 99) Then  'Spot
        'Test if within same avail- if so, bypass room test
        'If source is Log2 , then destination is Log1 or Log2
        If ((imDragSrce = DRAGLOG1) And (ilDragDest = imDragSrce)) Or (imLog2Type = 4) Or ((imDragSrce = DRAGCONTRACT) And (ilDragDestColNo = imDragColNoSrce)) Then
            ilLoop = ilDestIndex
            Do
                ilLoop = ilLoop - 1
                'If ilLoop < LBound(tlDestEvt) Then
                If ilLoop < imLBEvt Then
                    Exit Do
                End If
                If (tlDestEvt(ilLoop).iType = 100) And (tlSrceEvt(ilSrceIndex).lTime = tlDestEvt(ilLoop).lTime) Then
                    If (tlDestEvt(ilDestIndex).iType = 99) And (ilLoop + 1 = ilDestIndex) Then
                        mAvailRoom = False
                    Else
                        mAvailRoom = True
                    End If
                    Exit Function
                End If
            Loop While tlDestEvt(ilLoop).iType = 100
            ilLoop = ilDestIndex
            Do
                ilLoop = ilLoop + 1
                If ilLoop >= UBound(tlDestEvt) Then
                    Exit Do
                End If
                If (tlDestEvt(ilLoop).iType = 100) And (tlSrceEvt(ilSrceIndex).lTime = tlDestEvt(ilLoop).lTime) Then
                    mAvailRoom = True
                    Exit Function
                End If
            Loop While tlDestEvt(ilLoop).iType = 100
        End If
    Else
        mAvailRoom = False
        Exit Function
    End If
    If tlDestEvt(ilDestIndex).iType = 100 Then  'Spot-swap logic room must exist for both spots

        'Test if allowed into avail type
        ilLoop = ilSrceIndex
        Do
            ilLoop = ilLoop - 1
            'If ilLoop < LBound(tlSrceEvt) Then
            If ilLoop < imLBEvt Then
                Exit Do
            End If
            If (tlSrceEvt(ilLoop).iType >= 2) And (tlSrceEvt(ilLoop).iType <= 9) Then
                If tlSrceEvt(ilLoop).iType = 2 Then   'Contract avail
                    'Exit Do
                    If (tlDestEvt(ilDestIndex).sCntrType = "M") And (tgSpf.sSchdPromo = "Y") Then
                        If ((Asc(tgSpf.sUsingFeatures3) And PROMOINTOCONTRACTAVAILS) <> PROMOINTOCONTRACTAVAILS) Then
                            mAvailRoom = False
                            Exit Function
                        Else
                            Exit Do
                        End If
                    Else
                        If (tlDestEvt(ilDestIndex).sCntrType = "S") And (tgSpf.sSchdPSA = "Y") Then
                            If ((Asc(tgSpf.sUsingFeatures3) And PSAINTOCONTRACTAVAILS) <> PSAINTOCONTRACTAVAILS) Then
                                mAvailRoom = False
                                Exit Function
                            Else
                                Exit Do
                            End If
                        Else
                            Exit Do
                        End If
                    End If
                End If
                If tlSrceEvt(ilLoop).iType = 8 Then   'PSA Avail- only allow PSAs
                    If (tlDestEvt(ilDestIndex).sCntrType <> "S") Or (tgSpf.sSchdPSA <> "Y") Then
                        mAvailRoom = False
                        Exit Function
                    Else
                        Exit Do
                    End If
                End If
                If tlSrceEvt(ilLoop).iType = 9 Then   'Promo Avail- only allow promos
                    If (tlDestEvt(ilDestIndex).sCntrType <> "M") Or (tgSpf.sSchdPromo <> "Y") Then
                        mAvailRoom = False
                        Exit Function
                    Else
                        Exit Do
                    End If
                End If
                mAvailRoom = False
                Exit Function
            End If
        'Loop While ilLoop > LBound(tlSrceEvt)
        Loop While ilLoop > imLBEvt
        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
            If imDragSpotLen = tlDestEvt(ilDestIndex).iUnits Then  'Length stored within iUnits
                mAvailRoom = True
                Exit Function
            Else    'Test if room exist within avail-Search for record type 99
                If imDragSpotLen < tlDestEvt(ilDestIndex).iUnits Then
                    ilLen = tlDestEvt(ilDestIndex).iUnits
                    ilLoop = ilSrceIndex
                    Do
                        ilLoop = ilLoop + 1
                        If ilLoop >= UBound(tlSrceEvt) Then
                            mAvailRoom = False
                            Exit Function
                        End If
                        If tlSrceEvt(ilLoop).iType = 99 Then
                            If ilLen <= tlSrceEvt(ilSrceIndex).iUnits + tlSrceEvt(ilLoop).lLen Then   'Length stored within iUnits
                                mAvailRoom = True
                                Exit Function
                            Else
                                Exit Do
                                'mAvailRoom = False
                                'Exit Function
                            End If
                        End If
                    Loop While tlSrceEvt(ilLoop).iType = 100
                    'Determine if sufficient remaining time (1/60 with 30 and 1/60 with 60)
                    ilLoop = ilSrceIndex
                    Do
                        ilLoop = ilLoop - 1
                        'If ilLoop < LBound(tlSrceEvt) Then
                        If ilLoop < imLBEvt Then
                            Exit Do
                        End If
                        If (tlSrceEvt(ilLoop).iType >= 2) And (tlSrceEvt(ilLoop).iType <= 9) Then
                            ilLen = tlSrceEvt(ilLoop).lLen
                            Do
                                ilLoop = ilLoop + 1
                                If ilLoop >= UBound(tlSrceEvt) Then
                                    mAvailRoom = False
                                    Exit Function
                                End If
                                If (ilLoop <> ilSrceIndex) And (tlSrceEvt(ilLoop).iType = 100) Then
                                    ilLen = ilLen - tlSrceEvt(ilLoop).iUnits
                                End If
                            Loop While tlSrceEvt(ilLoop).iType = 100
                            If ilLen >= tlDestEvt(ilDestIndex).iUnits Then   'Length stored within iUnits
                                mAvailRoom = True
                                Exit Function
                            Else
                                mAvailRoom = False
                                Exit Function
                            End If
                        End If
                    'Loop While ilLoop > LBound(tlSrceEvt)
                    Loop While ilLoop > imLBEvt
                    mAvailRoom = False
                    Exit Function
                Else
                    ilLoop = ilDestIndex
                    Do
                        ilLoop = ilLoop + 1
                        If ilLoop >= UBound(tlDestEvt) Then
                            mAvailRoom = False
                            Exit Function
                        End If
                        If tlDestEvt(ilLoop).iType = 99 Then
                            If imDragSpotLen <= tlDestEvt(ilDestIndex).iUnits + tlDestEvt(ilLoop).lLen Then   'Length stored within iUnits
                                'Test the other way
                                mAvailRoom = True
                                Exit Function
                            Else
                                Exit Do
                                'mAvailRoom = False
                                'Exit Function
                            End If
                        End If
                    Loop While tlDestEvt(ilLoop).iType = 100
                    ilLoop = ilDestIndex
                    Do
                        ilLoop = ilLoop - 1
                        'If ilLoop < LBound(tlDestEvt) Then
                        If ilLoop < imLBEvt Then
                            Exit Do
                        End If
                        If (tlDestEvt(ilLoop).iType >= 2) And (tlDestEvt(ilLoop).iType <= 9) Then
                            ilLen = tlDestEvt(ilLoop).lLen
                            Do
                                ilLoop = ilLoop + 1
                                If ilLoop >= UBound(tlDestEvt) Then
                                    mAvailRoom = False
                                    Exit Function
                                End If
                                If (ilLoop <> ilDestIndex) And (tlDestEvt(ilLoop).iType = 100) Then
                                    ilLen = ilLen - tlDestEvt(ilLoop).iUnits
                                End If
                            Loop While tlDestEvt(ilLoop).iType = 100
                            If ilLen >= imDragSpotLen Then   'Length stored within iUnits
                                mAvailRoom = True
                                Exit Function
                            Else
                                mAvailRoom = False
                                Exit Function
                            End If
                        End If
                    'Loop While ilLoop > LBound(tlSrceEvt)
                    Loop While ilLoop > imLBEvt
                    mAvailRoom = False
                    Exit Function
                End If
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
            If imDragSpotLen = tlDestEvt(ilDestIndex).iUnits Then  'Length stored within iUnits
                mAvailRoom = True
                Exit Function
            Else
                mAvailRoom = False
                Exit Function
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
        End If
    ElseIf tlDestEvt(ilDestIndex).iType = 99 Then   'Open avail area
        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
            If (imDragSpotLen <= tlDestEvt(ilDestIndex).lLen) Then
                mAvailRoom = True
                Exit Function
            Else
                mAvailRoom = False
                Exit Function
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
            If (imDragSpotLen = tlDestEvt(ilDestIndex).lLen) Then
                mAvailRoom = True
                Exit Function
            Else
                mAvailRoom = False
                Exit Function
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
        End If
    End If
    mAvailRoom = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mAvailRoomMdSwap                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if room for spot     *
'*                                                     *
'*******************************************************
Private Function mAvailRoomMdSwap(ilDragDest As Integer, ilDragDestColNo As Integer, ilEvtIndex As Integer, tlEvt() As EVTINFO, ilMdIndex As Integer, tlSdfMdExt() As SDFMDEXT) As Integer
'
'   ilRet = mAvailRoomMdSwap(ilMissedDest, ilMissedDestColNo, ilEvtIndex, tlEvt(), ilMdIndex, tlSdfMdExt())
'   Where:
'       ilMissedDest(I)- Missed spot destination (DRAGLOG1 or DRAGLOG2 or DRAGCONTRACT)
'       ilMissedDestColNo(I)- Missed destination column number (only valid for DRAGCONTRACT)
'       ilEvtIndex(I)- Index into tlEvt where spot moving or swapped
'       tlEvt()(I)- Array of events
'       ilMdIndex(I)- Index into tlSdfMdExt of missed spot
'       tlSdfMfExt()(I)- Array of missed spots
'
'       ilRet(O)- True=Room exist; False=Sufficient room for spot
'
    Dim ilLoop As Integer
    Dim ilLen As Integer
    Dim slDate As String
    Dim slCntrType As String

    If ilMdIndex >= UBound(tlSdfMdExt) Then
        mAvailRoomMdSwap = False
        Exit Function
    End If
    slCntrType = tlSdfMdExt(ilMdIndex).sCntrType
    'Check dates- Source is checked in tmDrag
    If ilDragDest = DRAGLOG1 Then
        If gDateValue(smLog1Date) < lmEarliestAllowedDate Then
            mAvailRoomMdSwap = False
            Exit Function
        End If
    ElseIf ilDragDest = DRAGLOG2 And imLog2Type = 4 Then
        If gDateValue(smLog2Date) < lmEarliestAllowedDate Then
            mAvailRoomMdSwap = False
            Exit Function
        End If
    ElseIf ilDragDest = DRAGCONTRACT Then
        'slDate = edcDate.Text   'plcDate.Caption    'Start date of the week
        'If gDateValue(slDate) + ilDragDestColNo - 1 < lmEarliestAllowedDate Then
        mGetEdcDate ilDragDestColNo - 1
        slDate = smEdcDate
        If lmEdcDate < lmEarliestAllowedDate Then
            mAvailRoomMdSwap = False
            Exit Function
        End If
    End If
    'Check if same contract/line- if so bypass (lLen contains ChfCode)
    smSplitNetworkType = ""
    smSplitNetworkMixLen = "N"
    If tlEvt(ilEvtIndex).iType = 100 Then
        If (tlEvt(ilEvtIndex).lLen = tlSdfMdExt(ilMdIndex).lChfCode) And (tlEvt(ilEvtIndex).iLineNo = tlSdfMdExt(ilMdIndex).iLineNo) Then
            mAvailRoomMdSwap = False
            Exit Function
        End If
        'Problem exist with moving from Contract area to swap with missed spot-> Avail is removed
        If imDragSrce = DRAGCONTRACT Then
            mAvailRoomMdSwap = False
            Exit Function
        End If
        'If ((tlEvt(ilEvtIndex).iLineInfo And &H10) = &H10) Then 'Extra spot- disallow swap
        '    mAvailRoomMdSwap = False
        '    Exit Function
        'End If
        'Disallow swap if Split Network
        '10/6/08:  Allow mix lengths
        'If ((tlEvt(ilEvtIndex).iLineInfo And &H800) = &H800) Or ((tlEvt(ilEvtIndex).iLineInfo And &H1000) = &H1000) Then
        If ((tlEvt(ilEvtIndex).iLineInfo And &H800) = &H800) Then
            If (tlSdfMdExt(ilMdIndex).sSplitNetwork = "Y") Then
                If (Asc(tgSpf.sUsingFeatures7) And REGIONMIXLEN) <> REGIONMIXLEN Then
                    If (imDragSpotLen = tlEvt(ilEvtIndex).iUnits) Then
                        smSplitNetworkType = "S"
                        mAvailRoomMdSwap = True
                    Else
                        mAvailRoomMdSwap = False
                    End If
                Else
                    If imDragSpotLen <= tlEvt(ilEvtIndex).iUnits Then
                        smSplitNetworkType = "S"
                        mAvailRoomMdSwap = True
                    Else
                        '10/6/08:  Check if room exist
                        ilLoop = ilMdIndex
                        Do
                            ilLoop = ilLoop + 1
                            If ilLoop >= UBound(tlEvt) Then
                                mAvailRoomMdSwap = False
                                Exit Function
                            End If
                            If tlEvt(ilLoop).iType = 99 Then
                                If imDragSpotLen - tlEvt(ilMdIndex).iUnits <= tlEvt(ilLoop).lLen Then  'Length stored within iUnits
                                    'Test the other way
                                    smSplitNetworkType = "P"
                                    smSplitNetworkMixLen = "Y"
                                    mAvailRoomMdSwap = True
                                    Exit Function
                                Else
                                    Exit Do
                                    'mAvailRoom = False
                                    'Exit Function
                                End If
                            End If
                        Loop While tlEvt(ilLoop).iType = 100
                        mAvailRoomMdSwap = False
                    End If
                End If
            Else
                mAvailRoomMdSwap = False
            End If
            Exit Function
        Else
            If (tlSdfMdExt(ilMdIndex).sSplitNetwork = "Y") Then
                mAvailRoomMdSwap = False
                Exit Function
            End If
        End If
    Else
        If (tlSdfMdExt(ilMdIndex).sSplitNetwork = "Y") Then
            If (rbcMode(1).Value) Or (imDblClickMode = 2) Then
                mAvailRoomMdSwap = False
                Exit Function
            End If
            smSplitNetworkType = "P"
        End If
    End If
    'Test if allowed into avail type
    ilLoop = ilEvtIndex
    Do
        ilLoop = ilLoop - 1
        'If ilLoop < LBound(tlEvt) Then
        If ilLoop < imLBEvt Then
            Exit Do
        End If
        If (tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9) Then
            'If ((tlEvt(ilLoop).iLineInfo And SSLOCK) = SSLOCK) Then   'iLineInfo contains iAvInfo
            '    mAvailRoomMdSwap = False
            '    Exit Function
            'End If
            'If tlEvt(ilEvtIndex).iType = 100 Then
            '    If ((tlEvt(ilLoop).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT) Then   'iLineInfo contains iAvInfo
            '        mAvailRoomMdSwap = False
            '        Exit Function
            '    End If
            'End If
            If tlEvt(ilLoop).iType = 2 Then   'Contract avail
                'Exit Do
                'If (smDragCntrType = "M") And (tgSpf.sSchdPromo = "Y") Then
                If (slCntrType = "M") And (tgSpf.sSchdPromo = "Y") Then
                    If ((Asc(tgSpf.sUsingFeatures3) And PROMOINTOCONTRACTAVAILS) <> PROMOINTOCONTRACTAVAILS) Then
                        mAvailRoomMdSwap = False
                        Exit Function
                    Else
                        Exit Do
                    End If
                Else
                    'If (smDragCntrType = "S") And (tgSpf.sSchdPSA = "Y") Then
                    If (slCntrType = "S") And (tgSpf.sSchdPSA = "Y") Then
                        If ((Asc(tgSpf.sUsingFeatures3) And PSAINTOCONTRACTAVAILS) <> PSAINTOCONTRACTAVAILS) Then
                            mAvailRoomMdSwap = False
                            Exit Function
                        Else
                            Exit Do
                        End If
                    Else
                        Exit Do
                    End If
                End If
            End If
            If tlEvt(ilLoop).iType = 8 Then   'PSA Avail- only allow PSAs
                'If smDragCntrType <> "S" Then
                If (slCntrType <> "S") Or (tgSpf.sSchdPSA <> "Y") Then
                    mAvailRoomMdSwap = False
                    Exit Function
                Else
                    Exit Do
                End If
            End If
            If tlEvt(ilLoop).iType = 9 Then   'Promo Avail- only allow promos
                'If smDragCntrType <> "M" Then
                If (slCntrType <> "M") Or (tgSpf.sSchdPromo <> "Y") Then
                    mAvailRoomMdSwap = False
                    Exit Function
                Else
                    Exit Do
                End If
            End If
            mAvailRoomMdSwap = False
            Exit Function
        End If
    'Loop While ilLoop > LBound(tlEvt)
    Loop While ilLoop > imLBEvt
    If tlEvt(ilEvtIndex).iType = 100 Then  'Spot-swap logic room must exist for both spots
        If ((ilDragDest = DRAGLOG1) And ((imLog2Type = 10) Or (imLog2Type = 11))) Or ((ilDragDest = DRAGCONTRACT) And ((imAdMdType = 9) Or (imAdMdType = 10))) Then
            mAvailRoomMdSwap = False
            Exit Function
        End If
        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
            If tlSdfMdExt(ilMdIndex).iLen = tlEvt(ilEvtIndex).iUnits Then  'Length stored within iUnits
                mAvailRoomMdSwap = True
                Exit Function
            Else    'Test if room exist within avail-Search for record type 99
                'If imDragSpotLen > tlEvt(ilEvtIndex).iUnits Then
                If tlSdfMdExt(ilMdIndex).iLen > tlEvt(ilEvtIndex).iUnits Then
                    ilLoop = ilEvtIndex
                    Do
                        ilLoop = ilLoop + 1
                        If ilLoop >= UBound(tlEvt) Then
                            mAvailRoomMdSwap = False
                            Exit Function
                        End If
                        If tlEvt(ilLoop).iType = 99 Then
                            If tlSdfMdExt(ilMdIndex).iLen <= tlEvt(ilEvtIndex).iUnits + tlEvt(ilLoop).lLen Then   'Length stored within iUnits
                                'Test the other way
                                mAvailRoomMdSwap = True
                                Exit Function
                            Else
                                Exit Do
                                'mAvailRoomMdSwap = False
                                'Exit Function
                            End If
                        End If
                    Loop While tlEvt(ilLoop).iType = 100
                    'Determine if sufficient remaining time (1/60 with 30 and 1/60 with 60)
                    ilLoop = ilEvtIndex
                    Do
                        ilLoop = ilLoop - 1
                        'If ilLoop < LBound(tlEvt) Then
                        If ilLoop < imLBEvt Then
                            Exit Do
                        End If
                        If (tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9) Then
                            ilLen = tlEvt(ilLoop).lLen
                            Do
                                ilLoop = ilLoop + 1
                                If ilLoop >= UBound(tlEvt) Then
                                    mAvailRoomMdSwap = False
                                    Exit Function
                                End If
                                If (ilLoop <> ilEvtIndex) And (tlEvt(ilLoop).iType = 100) Then
                                    ilLen = ilLen - tlEvt(ilLoop).iUnits
                                End If
                            Loop While tlEvt(ilLoop).iType = 100
                            If ilLen >= tlSdfMdExt(ilMdIndex).iLen Then   'Length stored within iUnits
                                mAvailRoomMdSwap = True
                                Exit Function
                            Else
                                mAvailRoomMdSwap = False
                                Exit Function
                            End If
                        End If
                    'Loop While ilLoop > LBound(tlEvt)
                    Loop While ilLoop > imLBEvt
                    mAvailRoomMdSwap = False
                    Exit Function
                Else
                    mAvailRoomMdSwap = True
                    Exit Function
                End If
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
            If tlSdfMdExt(ilMdIndex).iLen = tlEvt(ilEvtIndex).iUnits Then  'Length stored within iUnits
                mAvailRoomMdSwap = True
                Exit Function
            Else
                mAvailRoomMdSwap = False
                Exit Function
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
        End If
    ElseIf tlEvt(ilEvtIndex).iType = 99 Then   'Open avail area
        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
            If (tlSdfMdExt(ilMdIndex).iLen <= tlEvt(ilEvtIndex).lLen) Then
                mAvailRoomMdSwap = True
                Exit Function
            Else
                mAvailRoomMdSwap = False
                Exit Function
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
            If (tlSdfMdExt(ilMdIndex).iLen = tlEvt(ilEvtIndex).lLen) Then
                mAvailRoomMdSwap = True
                Exit Function
            Else
                mAvailRoomMdSwap = False
                Exit Function
            End If
        ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
        End If
    End If
    mAvailRoomMdSwap = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mBeginTrans                     *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Save all arrays incase of abort *
'*                     required                        *
'*                                                     *
'*******************************************************
Private Function mBeginTrans(ilClear As Integer, ilForcePaint As Integer) As Integer
    Dim ilRet As Integer
    Dim ilCRet As Integer
    Dim ilLoop As Integer
    ilRet = btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        Screen.MousePointer = vbDefault
        ilCRet = MsgBox("Task could not be completed", vbOKOnly + vbExclamation, "Spot")
        If ilClear Then
            mClearDrag ilForcePaint
        End If
        mUnblockDay
        mBeginTrans = ilRet
        Exit Function
    End If
    ReDim tgSdfExt(LBound(tmSdfExt) To UBound(tmSdfExt)) As SDFEXT
    For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) Step 1
        tgSdfExt(ilLoop) = tmSdfExt(ilLoop)
    Next ilLoop
    ReDim tgSdfExtSort(LBound(tmSdfExtSort) To UBound(tmSdfExtSort)) As SDFEXTSORT
    For ilLoop = LBound(tmSdfExtSort) To UBound(tmSdfExtSort) Step 1
        tgSdfExtSort(ilLoop) = tmSdfExtSort(ilLoop)
    Next ilLoop
    For ilLoop = 0 To 23 Step 1
        igHourCount(ilLoop) = imHourCount(ilLoop)
    Next ilLoop
    For ilLoop = 0 To 6 Step 1
        igDayCount(ilLoop) = imDayCount(ilLoop)
    Next ilLoop
    ReDim tgMoVcf0(LBound(tmMoVcf0) To UBound(tmMoVcf0)) As VCF
    For ilLoop = LBound(tmMoVcf0) To UBound(tmMoVcf0) Step 1
        tgMoVcf0(ilLoop) = tmMoVcf0(ilLoop)
    Next ilLoop
    ReDim tgMoVcf6(LBound(tmMoVcf6) To UBound(tmMoVcf6)) As VCF
    For ilLoop = LBound(tmMoVcf6) To UBound(tmMoVcf6) Step 1
        tgMoVcf6(ilLoop) = tmMoVcf6(ilLoop)
    Next ilLoop
    ReDim tgMoVcf7(LBound(tmMoVcf7) To UBound(tmMoVcf7)) As VCF
    For ilLoop = LBound(tmMoVcf7) To UBound(tmMoVcf7) Step 1
        tgMoVcf7(ilLoop) = tmMoVcf7(ilLoop)
    Next ilLoop
    ReDim tgTuVcf0(LBound(tmTuVcf0) To UBound(tmTuVcf0)) As VCF
    For ilLoop = LBound(tmTuVcf0) To UBound(tmTuVcf0) Step 1
        tgTuVcf0(ilLoop) = tmTuVcf0(ilLoop)
    Next ilLoop
    ReDim tgTuVcf6(LBound(tmTuVcf6) To UBound(tmTuVcf6)) As VCF
    For ilLoop = LBound(tmTuVcf6) To UBound(tmTuVcf6) Step 1
        tgTuVcf6(ilLoop) = tmTuVcf6(ilLoop)
    Next ilLoop
    ReDim tgTuVcf7(LBound(tmTuVcf7) To UBound(tmTuVcf7)) As VCF
    For ilLoop = LBound(tmTuVcf7) To UBound(tmTuVcf7) Step 1
        tgTuVcf7(ilLoop) = tmTuVcf7(ilLoop)
    Next ilLoop
    ReDim tgWeVcf0(LBound(tmWeVcf0) To UBound(tmWeVcf0)) As VCF
    For ilLoop = LBound(tmWeVcf0) To UBound(tmWeVcf0) Step 1
        tgWeVcf0(ilLoop) = tmWeVcf0(ilLoop)
    Next ilLoop
    ReDim tgWeVcf6(LBound(tmWeVcf6) To UBound(tmWeVcf6)) As VCF
    For ilLoop = LBound(tmWeVcf6) To UBound(tmWeVcf6) Step 1
        tgWeVcf6(ilLoop) = tmWeVcf6(ilLoop)
    Next ilLoop
    ReDim tgWeVcf7(LBound(tmWeVcf7) To UBound(tmWeVcf7)) As VCF
    For ilLoop = LBound(tmWeVcf7) To UBound(tmWeVcf7) Step 1
        tgWeVcf7(ilLoop) = tmWeVcf7(ilLoop)
    Next ilLoop
    ReDim tgThVcf0(LBound(tmThVcf0) To UBound(tmThVcf0)) As VCF
    For ilLoop = LBound(tmThVcf0) To UBound(tmThVcf0) Step 1
        tgThVcf0(ilLoop) = tmThVcf0(ilLoop)
    Next ilLoop
    ReDim tgThVcf6(LBound(tmThVcf6) To UBound(tmThVcf6)) As VCF
    For ilLoop = LBound(tmThVcf6) To UBound(tmThVcf6) Step 1
        tgThVcf6(ilLoop) = tmThVcf6(ilLoop)
    Next ilLoop
    ReDim tgThVcf7(LBound(tmThVcf7) To UBound(tmThVcf7)) As VCF
    For ilLoop = LBound(tmThVcf7) To UBound(tmThVcf7) Step 1
        tgThVcf7(ilLoop) = tmThVcf7(ilLoop)
    Next ilLoop
    ReDim tgFrVcf0(LBound(tmFrVcf0) To UBound(tmFrVcf0)) As VCF
    For ilLoop = LBound(tmFrVcf0) To UBound(tmFrVcf0) Step 1
        tgFrVcf0(ilLoop) = tmFrVcf0(ilLoop)
    Next ilLoop
    ReDim tgFrVcf6(LBound(tmFrVcf6) To UBound(tmFrVcf6)) As VCF
    For ilLoop = LBound(tmFrVcf6) To UBound(tmFrVcf6) Step 1
        tgFrVcf6(ilLoop) = tmFrVcf6(ilLoop)
    Next ilLoop
    ReDim tgFrVcf7(LBound(tmFrVcf7) To UBound(tmFrVcf7)) As VCF
    For ilLoop = LBound(tmFrVcf7) To UBound(tmFrVcf7) Step 1
        tgFrVcf7(ilLoop) = tmFrVcf7(ilLoop)
    Next ilLoop
    ReDim tgSaVcf0(LBound(tmSaVcf0) To UBound(tmSaVcf0)) As VCF
    For ilLoop = LBound(tmSaVcf0) To UBound(tmSaVcf0) Step 1
        tgSaVcf0(ilLoop) = tmSaVcf0(ilLoop)
    Next ilLoop
    ReDim tgSaVcf6(LBound(tmSaVcf6) To UBound(tmSaVcf6)) As VCF
    For ilLoop = LBound(tmSaVcf6) To UBound(tmSaVcf6) Step 1
        tgSaVcf6(ilLoop) = tmSaVcf6(ilLoop)
    Next ilLoop
    ReDim tgSaVcf7(LBound(tmSaVcf7) To UBound(tmSaVcf7)) As VCF
    For ilLoop = LBound(tmSaVcf7) To UBound(tmSaVcf7) Step 1
        tgSaVcf7(ilLoop) = tmSaVcf7(ilLoop)
    Next ilLoop
    ReDim tgSuVcf0(LBound(tmSuVcf0) To UBound(tmSuVcf0)) As VCF
    For ilLoop = LBound(tmSuVcf0) To UBound(tmSuVcf0) Step 1
        tgSuVcf0(ilLoop) = tmSuVcf0(ilLoop)
    Next ilLoop
    ReDim tgSuVcf6(LBound(tmSuVcf6) To UBound(tmSuVcf6)) As VCF
    For ilLoop = LBound(tmSuVcf6) To UBound(tmSuVcf6) Step 1
        tgSuVcf6(ilLoop) = tmSuVcf6(ilLoop)
    Next ilLoop
    ReDim tgSuVcf7(LBound(tmSuVcf7) To UBound(tmSuVcf7)) As VCF
    For ilLoop = LBound(tmSuVcf7) To UBound(tmSuVcf7) Step 1
        tgSuVcf7(ilLoop) = tmSuVcf7(ilLoop)
    Next ilLoop
    ReDim tgMoEvt(LBound(tmMoEvt) To UBound(tmMoEvt)) As EVTINFO
    For ilLoop = LBound(tmMoEvt) To UBound(tmMoEvt) Step 1
        tgMoEvt(ilLoop) = tmMoEvt(ilLoop)
    Next ilLoop
    ReDim tgTuEvt(LBound(tmTuEvt) To UBound(tmTuEvt)) As EVTINFO
    For ilLoop = LBound(tmTuEvt) To UBound(tmTuEvt) Step 1
        tgTuEvt(ilLoop) = tmTuEvt(ilLoop)
    Next ilLoop
    ReDim tgWeEvt(LBound(tmWeEvt) To UBound(tmWeEvt)) As EVTINFO
    For ilLoop = LBound(tmWeEvt) To UBound(tmWeEvt) Step 1
        tgWeEvt(ilLoop) = tmWeEvt(ilLoop)
    Next ilLoop
    ReDim tgThEvt(LBound(tmThEvt) To UBound(tmThEvt)) As EVTINFO
    For ilLoop = LBound(tmThEvt) To UBound(tmThEvt) Step 1
        tgThEvt(ilLoop) = tmThEvt(ilLoop)
    Next ilLoop
    ReDim tgFrEvt(LBound(tmFrEvt) To UBound(tmFrEvt)) As EVTINFO
    For ilLoop = LBound(tmFrEvt) To UBound(tmFrEvt) Step 1
        tgFrEvt(ilLoop) = tmFrEvt(ilLoop)
    Next ilLoop
    ReDim tgSaEvt(LBound(tmSaEvt) To UBound(tmSaEvt)) As EVTINFO
    For ilLoop = LBound(tmSaEvt) To UBound(tmSaEvt) Step 1
        tgSaEvt(ilLoop) = tmSaEvt(ilLoop)
    Next ilLoop
    ReDim tgSuEvt(LBound(tmSuEvt) To UBound(tmSuEvt)) As EVTINFO
    For ilLoop = LBound(tmSuEvt) To UBound(tmSuEvt) Step 1
        tgSuEvt(ilLoop) = tmSuEvt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmMoRowIndex) To UBound(tmMoRowIndex) Step 1
        tgMoRowIndex(ilLoop) = tmMoRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmTuRowIndex) To UBound(tmTuRowIndex) Step 1
        tgTuRowIndex(ilLoop) = tmTuRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmWeRowIndex) To UBound(tmWeRowIndex) Step 1
        tgWeRowIndex(ilLoop) = tmWeRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmThRowIndex) To UBound(tmThRowIndex) Step 1
        tgThRowIndex(ilLoop) = tmThRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmFrRowIndex) To UBound(tmFrRowIndex) Step 1
        tgFrRowIndex(ilLoop) = tmFrRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmSaRowIndex) To UBound(tmSaRowIndex) Step 1
        tgSaRowIndex(ilLoop) = tmSaRowIndex(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmSuRowIndex) To UBound(tmSuRowIndex) Step 1
        tgSuRowIndex(ilLoop) = tmSuRowIndex(ilLoop)
    Next ilLoop
    igAMax = imAMax
    ReDim tgL1Evt(LBound(tmL1Evt) To UBound(tmL1Evt)) As EVTINFO
    For ilLoop = LBound(tmL1Evt) To UBound(tmL1Evt) Step 1
        tgL1Evt(ilLoop) = tmL1Evt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmL1RowIndex) To UBound(tmL1RowIndex) Step 1
        tgL1RowIndex(ilLoop) = tmL1RowIndex(ilLoop)
    Next ilLoop
    ReDim tgL1Vcf0(LBound(tmL1Vcf0) To UBound(tmL1Vcf0)) As VCF
    For ilLoop = LBound(tmL1Vcf0) To UBound(tmL1Vcf0) Step 1
        tgL1Vcf0(ilLoop) = tmL1Vcf0(ilLoop)
    Next ilLoop
    ReDim tgL1Vcf6(LBound(tmL1Vcf6) To UBound(tmL1Vcf6)) As VCF
    For ilLoop = LBound(tmL1Vcf6) To UBound(tmL1Vcf6) Step 1
        tgL1Vcf6(ilLoop) = tmL1Vcf6(ilLoop)
    Next ilLoop
    ReDim tgL1Vcf7(LBound(tmL1Vcf7) To UBound(tmL1Vcf7)) As VCF
    For ilLoop = LBound(tmL1Vcf7) To UBound(tmL1Vcf7) Step 1
        tgL1Vcf7(ilLoop) = tmL1Vcf7(ilLoop)
    Next ilLoop
    ReDim tgL2Evt(LBound(tmL2Evt) To UBound(tmL2Evt)) As EVTINFO
    For ilLoop = LBound(tmL2Evt) To UBound(tmL2Evt) Step 1
        tgL2Evt(ilLoop) = tmL2Evt(ilLoop)
    Next ilLoop
    ReDim tgSdfMdExt(LBound(tmSdfMdExt) To UBound(tmSdfMdExt)) As SDFMDEXT
    For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
        tgSdfMdExt(ilLoop) = tmSdfMdExt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmL2RowIndex) To UBound(tmL2RowIndex) Step 1
        tgL2RowIndex(ilLoop) = tmL2RowIndex(ilLoop)
    Next ilLoop
    ReDim tgL2Vcf0(LBound(tmL2Vcf0) To UBound(tmL2Vcf0)) As VCF
    For ilLoop = LBound(tmL2Vcf0) To UBound(tmL2Vcf0) Step 1
        tgL2Vcf0(ilLoop) = tmL2Vcf0(ilLoop)
    Next ilLoop
    ReDim tgL2Vcf6(LBound(tmL2Vcf6) To UBound(tmL2Vcf6)) As VCF
    For ilLoop = LBound(tmL2Vcf6) To UBound(tmL2Vcf6) Step 1
        tgL2Vcf6(ilLoop) = tmL2Vcf6(ilLoop)
    Next ilLoop
    ReDim tgL2Vcf7(LBound(tmL2Vcf7) To UBound(tmL2Vcf7)) As VCF
    For ilLoop = LBound(tmL2Vcf7) To UBound(tmL2Vcf7) Step 1
        tgL2Vcf7(ilLoop) = tmL2Vcf7(ilLoop)
    Next ilLoop
    ReDim tgAdMdSdfMdExt(LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
    For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) Step 1
        tgAdMdSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
    Next ilLoop
    For ilLoop = LBound(tmAdMdRowIndex) To UBound(tmAdMdRowIndex) Step 1
        tgAdMdRowIndex(ilLoop) = tmAdMdRowIndex(ilLoop)
    Next ilLoop
    ReDim tgWAMdExt(LBound(tmWAMdExt) To UBound(tmWAMdExt)) As SDFMDEXT
    For ilLoop = LBound(tmWAMdExt) To UBound(tmWAMdExt) Step 1
        tgWAMdExt(ilLoop) = tmWAMdExt(ilLoop)
    Next ilLoop
    tgAddEvt = tmAddEvt
    ReDim tgSptMve(LBound(tmSpotMove) To UBound(tmSpotMove)) As SPOTMOVE
    For ilLoop = LBound(tmSpotMove) To UBound(tmSpotMove) Step 1
        tgSptMve(ilLoop) = tmSpotMove(ilLoop)
    Next ilLoop
    mBeginTrans = BTRV_ERR_NONE
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mBookExtraSpot                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Book Extra Bonus spot          *
'*                                                     *
'*******************************************************
Private Sub mBookExtraSpot(tlEvt() As EVTINFO)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slDate                        ilListIndex                   ilGsf                     *
'*                                                                                        *
'******************************************************************************************

    Dim slBookDate As String
    Dim llDate As Long
    Dim ilSsfDay As Integer
    Dim ilStartIndex As Integer
    Dim ilIndexSrce As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim ilMoveOk As Integer
    Dim ilAvailIndex As Integer
    Dim ilSsfAvailIndex As Integer
    Dim llSsfAvailRecPos As Long
    Dim llSdfRecPos As Long
    Dim llSchCode As Long
    Dim llFsfCode As Long
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slNoSpots As String
    Dim ilBkQH As Integer
    Dim ilFound As Integer
    Dim ilTime As Integer
    Dim ilPosition As Integer
    Dim slTime As String
    Dim slLineInfo As String
    Dim ilLine As Integer
    Dim slLine As String
    Dim slSchStatus As String
    Dim ilSpots As Integer
    Dim llTime As Long
    Dim ilVefCode As Integer
    Dim ilValue As Integer
    Dim ilPriceLevel As Integer
    Dim ilGameNo As Integer
    Dim ilBookDayIndex As Integer

    mGetEdcDate imDragColNoDest - 1
    slBookDate = smEdcDate
    llDate = lmEdcDate
    ilGameNo = imEdcGameNo
    ilBookDayIndex = gWeekDayStr(slBookDate)
    ilSsfDay = imSsfDayIndex
    If Not mBlockDay(65536 * imVehCode + lmLockDate, 0) Then
        mForceRepaintWeekly False
        Exit Sub
    End If
    ilStartIndex = -1
    ilIndexSrce = -1
    'For ilLoop = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
    For ilLoop = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
        If imAdMdManSchInfo(6, ilLoop) + 1 = imDragIndexSrce Then
            ilIndexSrce = ilLoop
            llSchCode = lmAdMdManSchCode(1, ilLoop)
            llFsfCode = lmAdMdManSchCode(2, ilLoop)
            Exit For
        End If
    Next ilLoop
    If ilIndexSrce = -1 Then
        mUnblockDay
        Exit Sub
    End If
    imListField(1) = 15
    imListField(2) = 12 * igAlignCharWidth
    imListField(3) = 26 * igAlignCharWidth
    imListField(4) = 46 * igAlignCharWidth
    imListField(5) = 110 * igAlignCharWidth
    SpotLine!lbcLine.Clear
    'ReDim smLineInfoOk(1 To 1) As String
    'ReDim smLineInfoNotOk(1 To 1) As String
    ReDim smLineInfoOk(0 To 0) As String
    ReDim smLineInfoNotOk(0 To 0) As String
    If mManSchCheckRoom(DRAGCONTRACT, imDragColNoDest, imAdMdManSchInfo(2, ilIndexSrce), imDragIndexDest, tlEvt()) Then
        'Determine which line match times from the contract
        'ReDim imLineNoExtra(1 To 1) As Integer
        ReDim imLineNoExtra(0 To 0) As Integer
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmMoEvt()
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmTuEvt()
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmWeEvt()
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmThEvt()
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmFrEvt()
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmSaEvt()
        mGetExtraLineNo lmAdMdManSchCode(1, ilIndexSrce), imAdMdManSchInfo(2, ilIndexSrce), tmSuEvt()
        For ilLoop = LBound(imLineNoExtra) To UBound(imLineNoExtra) - 1 Step 1
            ilRet = mReadChfClfRdfCffRec(llSchCode, imLineNoExtra(ilLoop), llFsfCode, ilGameNo, slBookDate, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
            If ilRet Then
                If tmCff(0).sDelete <> "Y" Then
                    slLineInfo = "Line #" & str$(tmClf.iLine) & "|" & "Valid Week"
                Else
                    slLineInfo = "Line #" & str$(tmClf.iLine) & "|" & "Invalid Week"
                End If
                ilMoveOk = True
                ilAvailIndex = imDragIndexDest
                Do
                    ilAvailIndex = ilAvailIndex - 1
                    'If ilAvailIndex < LBound(tlEvt) Then
                    If ilAvailIndex < imLBEvt Then
                        ilMoveOk = False
                        Exit Do
                    End If
                    If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
                        ilSsfAvailIndex = tlEvt(ilAvailIndex).iSsfIndex
                        Exit Do
                    End If
                Loop
                If ilMoveOk Then
                    imSsfRecLen = Len(tmSsf(ilSsfDay))
                    If lmSsfRecPos(ilSsfDay) <> tlEvt(ilAvailIndex).lSsfRecPos Then
                        ilRet = gSSFGetDirect(hmSsf, tmSsf(ilSsfDay), imSsfRecLen, tlEvt(ilAvailIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        lmSsfRecPos(ilSsfDay) = tlEvt(ilAvailIndex).lSsfRecPos
                        lmSsfDate(ilSsfDay) = gDateValue(slBookDate)
                    End If
                    'Determine advertiser separation-Ingore- obtain allowed times
                    gGetLineSchParameters hmSsf, tmSsf(), lmSsfDate(), lmSsfRecPos(), llDate, imVehCode, tmChf.iAdfCode, ilGameNo, tmCff(), tmClf, tmLnRdf, lmSepLength, lmStartDateLen, lmEndDateLen, lmChfCode, imLineNo, imAdfCode, imVehComp, imHour(), imDay(), imQH(), imAHour(), imADay(), imAQH(), lmTBStartTime(), lmTBEndTime(), lmEarliestAllowedDate, imSkip(), tmChf.sType, tmChf.iPctTrade, ilBkQH, False, imPriceLevel
                    ilFound = False
                    For ilTime = LBound(lmTBStartTime) To UBound(lmTBEndTime) Step 1
                        If lmTBStartTime(ilTime) <> -1 Then
                            If (tlEvt(ilAvailIndex).lTime >= lmTBStartTime(ilTime)) And (tlEvt(ilAvailIndex).lTime <= lmTBEndTime(ilTime)) Then
                                ilFound = True
                                llTime = lmTBStartTime(ilTime)
                                slTime = gFormatTimeLong(llTime, "A", "1")
                                llTime = lmTBEndTime(ilTime)
                                slTime = slTime & "-" & gFormatTimeLong(llTime, "A", "1")
                                Exit For
                            End If
                        End If
                    Next ilTime
                    If ilFound Then
                        slLineInfo = slLineInfo & "|" & slTime
                    Else
                        ilMoveOk = False
                        ilFound = False
                        For ilTime = LBound(lmTBStartTime) To UBound(lmTBEndTime) Step 1
                            If lmTBStartTime(ilTime) <> -1 Then
                                ilFound = True
                                slTime = gFormatTimeLong(lmTBStartTime(ilTime), "A", "1")
                                slTime = slTime & "-" & gFormatTimeLong(lmTBEndTime(ilTime), "A", "1")
                                Exit For
                            End If
                        Next ilTime
                        If ilFound Then
                            slLineInfo = slLineInfo & "|" & slTime
                        Else
                            slLineInfo = slLineInfo & "|" & "Invalid Time"
                        End If
                    End If
                    If tmCff(0).sDelete <> "Y" Then
                        'If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then 'Weekly
                        If (tmCff(0).sDyWk <> "D") Then  'Weekly
                            ilSpots = tmCff(0).iSpotsWk + tmCff(0).iXSpotsWk
                            slLineInfo = slLineInfo & "|" & Trim$(str$(ilSpots)) & "/Week"
                            If (tmCff(0).iDay(ilBookDayIndex) <= 0) And (tmCff(0).sXDay(ilBookDayIndex) <> "Y") Then
                                ilMoveOk = False
                                slLineInfo = slLineInfo & " Invalid Day"
                            End If
                        Else
                            If tmCff(0).iDay(ilBookDayIndex) <= 0 Then
                                ilMoveOk = False
                                slLineInfo = slLineInfo & "|" & "Invalid Day"
                            Else
                                slLineInfo = slLineInfo & "|" & Trim$(str$(tmCff(0).iDay(ilBookDayIndex))) & "/Day"
                            End If
                        End If
                    Else
                        ilMoveOk = False
                    End If
                    If ilMoveOk Then
                        smLineInfoOk(UBound(smLineInfoOk)) = slLineInfo
                        'ReDim Preserve smLineInfoOk(1 To UBound(smLineInfoOk) + 1) As String
                        ReDim Preserve smLineInfoOk(LBound(smLineInfoOk) To UBound(smLineInfoOk) + 1) As String
                    Else
                        smLineInfoNotOk(UBound(smLineInfoNotOk)) = slLineInfo
                        'ReDim Preserve smLineInfoNotOk(1 To UBound(smLineInfoNotOk) + 1) As String
                        ReDim Preserve smLineInfoNotOk(LBound(smLineInfoNotOk) To UBound(smLineInfoNotOk) + 1) As String
                    End If
                End If
            End If
        Next ilLoop
        'If UBound(smLineInfoOk) = 2 Then
        If UBound(smLineInfoOk) = LBound(smLineInfoOk) + 1 Then
            ilRet = gParseItem(smLineInfoOk(LBound(smLineInfoOk)), 1, "|", slLine)
            ilRet = gParseItem(slLine, 2, "#", slLine)
            ilLine = Val(slLine)
            slSchStatus = "S"
        ElseIf UBound(smLineInfoOk) > LBound(smLineInfoOk) + 1 Then
            For ilLoop = LBound(smLineInfoOk) To UBound(smLineInfoOk) - 1 Step 1
                'SpotLine!lbcLine.AddItem gAlignStringByPixel(smLineInfoOk(ilLoop), "|", imListField(), imListFieldChar())
                SpotLine!lbcLine.AddItem smLineInfoOk(ilLoop)
            Next ilLoop
            Screen.MousePointer = vbDefault
            SpotLine.Show vbModal
            Screen.MousePointer = vbHourglass
            DoEvents
            ilLine = igSpotLineReturn
            slSchStatus = "S"
        'ElseIf UBound(smLineInfoNotOk) = 2 Then
        ElseIf UBound(smLineInfoNotOk) = LBound(smLineInfoNotOk) + 1 Then
            ilRet = gParseItem(smLineInfoNotOk(LBound(smLineInfoNotOk)), 1, "|", slLine)
            ilRet = gParseItem(slLine, 2, "#", slLine)
            ilLine = Val(slLine)
            slSchStatus = "O"
        'ElseIf UBound(smLineInfoNotOk) > 2 Then
        ElseIf UBound(smLineInfoNotOk) > LBound(smLineInfoNotOk) + 1 Then
            'For ilLoop = 1 To UBound(smLineInfoNotOk) - 1 Step 1
            For ilLoop = LBound(smLineInfoNotOk) To UBound(smLineInfoNotOk) - 1 Step 1
                'SpotLine!lbcLine.AddItem gAlignStringByPixel(smLineInfoNotOk(ilLoop), "|", imListField(), imListFieldChar())
                SpotLine!lbcLine.AddItem smLineInfoNotOk(ilLoop)
            Next ilLoop
            Screen.MousePointer = vbDefault
            SpotLine.Show vbModal
            Screen.MousePointer = vbHourglass
            DoEvents
            ilLine = igSpotLineReturn
            slSchStatus = "O"
        Else
            ilLine = -1
        End If
        If ilLine > 0 Then
            ilRet = mReadChfClfRdfCffRec(llSchCode, ilLine, llFsfCode, ilGameNo, slBookDate, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
            If ilRet Then
                'Determine if extra associated with a spot original schedule to another vehicle
                'If so, associate this spot with the same vehicle
                ilMoveOk = True
                If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmMoEvt(), ilVefCode) Then
                    If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmTuEvt(), ilVefCode) Then
                        If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmWeEvt(), ilVefCode) Then
                            If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmThEvt(), ilVefCode) Then
                                If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmFrEvt(), ilVefCode) Then
                                    If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmSaEvt(), ilVefCode) Then
                                        If Not mFindFromVehicle(llSchCode, ilLine, llFsfCode, tmSuEvt(), ilVefCode) Then
                                            ilMoveOk = False
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If ilVefCode <> imVehCode Then
                    slSchStatus = "O"
                End If
                ilAvailIndex = imDragIndexDest
                Do
                    ilAvailIndex = ilAvailIndex - 1
                    'If ilAvailIndex < LBound(tlEvt) Then
                    If ilAvailIndex < imLBEvt Then
                        ilMoveOk = False
                        Exit Do
                    End If
                    If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
                        ilSsfAvailIndex = tlEvt(ilAvailIndex).iSsfIndex
                        Exit Do
                    End If
                Loop
                If ilMoveOk Then
                    ilRet = mBeginTrans(False, False)   'btrBeginTrans(hmSdf, 1000)
                    If ilRet = BTRV_ERR_NONE Then
                        imSsfRecLen = Len(tmSsf(ilSsfDay))
                        If lmSsfRecPos(ilSsfDay) <> tlEvt(ilAvailIndex).lSsfRecPos Then
                            ilRet = gSSFGetDirect(hmSsf, tmSsf(ilSsfDay), imSsfRecLen, tlEvt(ilAvailIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            lmSsfRecPos(ilSsfDay) = tlEvt(ilAvailIndex).lSsfRecPos
                            lmSsfDate(ilSsfDay) = gDateValue(slBookDate)
                        End If
                        'Determine advertiser separation-Ingore- obtain allowed times
                        gGetLineSchParameters hmSsf, tmSsf(), lmSsfDate(), lmSsfRecPos(), llDate, imVehCode, tmChf.iAdfCode, ilGameNo, tmCff(), tmClf, tmLnRdf, lmSepLength, lmStartDateLen, lmEndDateLen, lmChfCode, imLineNo, imAdfCode, imVehComp, imHour(), imDay(), imQH(), imAHour(), imADay(), imAQH(), lmTBStartTime(), lmTBEndTime(), lmEarliestAllowedDate, imSkip(), tmChf.sType, tmChf.iPctTrade, ilBkQH, False, imPriceLevel
                        ilRet = mMakeUnschSpot(tmChf.lCode, tmClf.iLine, llFsfCode, ilGameNo, slBookDate, ilVefCode, True, False, llSdfRecPos)
                        If Not ilRet Then
                            mAbortTrans True, False, False  'ilRet = btrAbortTrans(hmSdf)
                            'mForceRepaintWeekly True
                            Exit Sub
                        End If
                        mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, slTime
                        tmAddEvt.iType = 100
                        tmAddEvt.lTime = llSdfRecPos
                        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        smSplitNetworkType = ""
                        smSplitNetworkMixLen = "N"
                        gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slBookDate, slTime, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
                        tmSmfA.lChfCode = 0
                        ilBkQH = 1045   'ignore booking quarter hour since manual move
                        ilPriceLevel = 0
                        ilRet = mSchSpot(slSchStatus, -1, slBookDate, ilGameNo, llSdfRecPos, ilBkQH, tmAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmSmfA, ilPriceLevel)
                        If Not ilRet Then
                            mAbortTrans True, False, False  'ilRet = btrAbortTrans(hmSdf)
                            'mForceRepaintWeekly True
                            Exit Sub
                        End If
                        imAdMdManSchInfo(3, ilIndexSrce) = imAdMdManSchInfo(3, ilIndexSrce) + 1
                        'Fix the counts
                        ilValue = vbcMissed.Value
                        mExtraBonusPop lmAdMdManSchCode(), imAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
                        mMakeManSchView 1
                        'mVbcL1MinMax False
                        'mVbcL2MinMax False
                        mVbcMissedMinMax False
                        mVbcAvailMinMax False
                        mVbcContractMinMax False
                        vbcMissed.Value = ilValue
                        ilRet = btrEndTrans(hmSdf)
                    Else
                        'Screen.MousePointer = vbDefault
                        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                    End If
                    mUnblockDay
                    Exit Sub
                End If
            End If
        End If
    End If
    mUnblockDay
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBookManSchSpot                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Book Manual scheduled spot     *
'*                                                     *
'*******************************************************
Private Sub mBookManSchSpot(ilSource As Integer, tlEvt() As EVTINFO)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slDate                        ilListIndex                   ilGsf                     *
'*                                                                                        *
'******************************************************************************************

    Dim ilLoop As Integer
    Dim ilTime As Integer
    Dim ilIndex As Integer
    Dim slBookDate As String
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slNoSpots As String
    Dim ilMoveOk As Integer
    Dim ilSsfDay As Integer
    Dim llSdfRecPos As Long
    Dim llSsfAvailRecPos As Long
    Dim ilAvailIndex As Integer
    Dim ilSsfAvailIndex As Integer
    Dim ilPosition As Integer
    Dim slTime As String
    Dim ilRet As Integer
    Dim ilCount As Integer
    Dim ilStartIndex As Integer
    Dim ilEndIndex As Integer
    Dim ilNoGen As Integer
    Dim ilNum As Integer
    Dim ilFound As Integer
    Dim llDate As Long
    Dim ilIndexSrce As Integer
    Dim llSchCode As Long
    Dim llFsfCode As Long
    Dim ilBkQH As Integer
    Dim ilGameNo As Integer
    Dim ilBookDayIndex As Integer
    Dim ilRoom As Integer
    '5/5/11: Active manual contract for games
    Dim ilGameMatch As Integer
    'ReDim tmManMdExt(1 To 1) As SDFMDEXT
    ReDim tmManMdExt(0 To 1) As SDFMDEXT


    If ilSource = 0 Then
        slBookDate = smLog1Date
        llDate = gDateValue(slBookDate)
        ilGameNo = 0
        'MAI/Sirius: Added 10/4 Added Record Lock
        If Not mBlockDay(65536 * imVehCode + llDate, 0) Then
            mForceRepaintWeekly False
            Exit Sub
        End If
        ilSsfDay = imLog1Day
        ilCount = -1    '0
        ilStartIndex = -1
        ilIndexSrce = -1
        '6/18/06: Man Schd Replace Fill
        ilRet = mBeginTrans(False, False)  'btrBeginTrans(hmSdf, 1000)
        If ilRet <> BTRV_ERR_NONE Then
            mUnblockDay
            Exit Sub
        End If
        If tlEvt(imDragIndexDest).iType = 100 Then
            'Delete fill spot
            llSdfRecPos = tlEvt(imDragIndexDest).lTime
            If (((tlEvt(imDragIndexDest).iLineInfo And &H10) = &H10) And ((tlEvt(imDragIndexDest).iLineInfo And &H200) <> &H200)) Then
                llSsfAvailRecPos = tlEvt(imDragIndexDest).lSsfRecPos
                ilSsfAvailIndex = tlEvt(imDragIndexDest).iSsfIndex
                ilRet = mUnschSpot("D", 0, slBookDate, ilGameNo, llSsfAvailRecPos, llSdfRecPos, tmManMdExt(), tmSmfA)   'Spot added to tlMdExt as last event
            Else
                mUnblockDay
                Exit Sub
            End If
        End If
        '6/18/06: Man Schd Replace Fill

        'ilIndexSrce = 1
        'llSchCode = lmL2ManSchCode(1)
        'If ilIndexSrce <> imDragIndexSrce Then
        '    For ilLoop = 2 To UBound(lmL2ManSchCode) - 1 Step 1
        '        If llSchCode <> lmL2ManSchCode(ilLoop) Then
        '            ilIndexSrce = ilIndexSrce + 1
        '            llSchCode = lmL2ManSchCode(ilLoop)
        '            If ilIndexSrce = imDragIndexSrce Then
        '                ilIndexSrce = ilLoop
        '                Exit For
        '            End If
        '        End If
        '    Next ilLoop
        'End If
        'For ilLoop = 1 To UBound(lmL2ManSchCode, 2) - 1 Step 1
        For ilLoop = 0 To UBound(lmL2ManSchCode, 2) - 1 Step 1
            If imL2ManSchInfo(6, ilLoop) + 1 = imDragIndexSrce Then
                ilIndexSrce = ilLoop
                llSchCode = lmL2ManSchCode(1, ilLoop)
                llFsfCode = lmL2ManSchCode(2, ilLoop)
                Exit For
            End If
        Next ilLoop
        If ilIndexSrce = -1 Then
            '6/18/06: Man Schd Replace Fill
            'mUnblockDay
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            '6/18/06: Man Schd Replace Fill
            Exit Sub
        End If
        'For ilLoop = 1 To UBound(lmL2ManSchCode, 2) - 1 Step 1
        For ilLoop = 0 To UBound(lmL2ManSchCode, 2) - 1 Step 1
            If ((lmL2ManSchCode(1, ilIndexSrce) = lmL2ManSchCode(1, ilLoop)) And (lmL2ManSchCode(1, ilIndexSrce) > 0)) Or ((lmL2ManSchCode(2, ilIndexSrce) = lmL2ManSchCode(2, ilLoop)) And (lmL2ManSchCode(2, ilIndexSrce) > 0)) Then
                ilCount = ilCount + 1
                If ilStartIndex = -1 Then
                    ilStartIndex = ilLoop
                End If
                ilEndIndex = ilLoop
            End If
        Next ilLoop
        If ilCount < 0 Then '<= 0 Then
            '6/18/06: Man Schd Replace Fill
            'mUnblockDay
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            '6/18/06: Man Schd Replace Fill
            Exit Sub
        End If
        'Contracts information stored in length order- store largest first
        'ReDim ilOrder(1 To ilCount) As Integer
        ReDim ilOrder(0 To ilCount) As Integer
        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Or (tgVpf(imVpfIndex).sSSellOut = "M") Or (tgVpf(imVpfIndex).sSSellOut = "T") Then   'Order contract in length order
            ilCount = LBound(ilOrder)
            For ilLoop = ilEndIndex To ilStartIndex Step -1
                ilOrder(ilCount) = ilLoop
                ilCount = ilCount + 1
            Next ilLoop
        Else
            Randomize   'Seed random number generator
            'Randomily select
            ilNoGen = -1    '0
            Do
                ilNum = Int((ilEndIndex - ilStartIndex + 1) * Rnd + ilStartIndex)
                ilFound = False
                For ilLoop = 0 To ilNoGen Step 1
                    If ilOrder(ilLoop) = ilNum Then
                        ilFound = True
                        Exit For
                    End If
                Next ilLoop
                If ilFound = False Then
                    ilNoGen = ilNoGen + 1
                    ilOrder(ilNoGen) = ilNum
                End If
            Loop Until ilNoGen = ilCount
        End If
        'For ilIndex = 1 To UBound(ilOrder) Step 1
        For ilIndex = 0 To UBound(ilOrder) Step 1
            ilLoop = ilOrder(ilIndex)
            If mManSchCheckRoom(DRAGLOG1, 0, imL2ManSchInfo(2, ilLoop), imDragIndexDest, tlEvt()) Then
                'Test if legal day
                '5/5/11: Active Manual Game mode
                ilGameNo = mGetL1GameNo
                ilRet = mReadChfClfRdfCffRec(lmL2ManSchCode(1, ilLoop), imL2ManSchInfo(1, ilLoop), lmL2ManSchCode(2, ilLoop), ilGameNo, slBookDate, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
                '5/5/11
                If ilRet And tmCff(0).sDelete <> "Y" Then
                    ilMoveOk = True
                    'If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then 'Weekly
                    If (tmCff(0).sDyWk <> "D") Then  'Weekly
                        If (tmCff(0).iDay(ilSsfDay) <= 0) And (tmCff(0).sXDay(ilSsfDay) <> "Y") Then
                            ilMoveOk = False
                        End If
                    Else
                        If tmCff(0).iDay(ilSsfDay) <= 0 Then
                            ilMoveOk = False
                        End If
                    End If
                    If ilMoveOk Then
                        ilAvailIndex = imDragIndexDest
                        Do
                            ilAvailIndex = ilAvailIndex - 1
                            'If ilAvailIndex < LBound(tlEvt) Then
                            If ilAvailIndex < imLBEvt Then
                                ilMoveOk = False
                                Exit Do
                            End If
                            If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
                                ilSsfAvailIndex = tlEvt(ilAvailIndex).iSsfIndex
                                Exit Do
                            End If
                        Loop
                        If ilMoveOk Then
                            imSsfRecLen = Len(tmSsf(ilSsfDay))
                            If lmSsfRecPos(ilSsfDay) <> tlEvt(ilAvailIndex).lSsfRecPos Then
                                ilRet = gSSFGetDirect(hmSsf, tmSsf(ilSsfDay), imSsfRecLen, tlEvt(ilAvailIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                lmSsfRecPos(ilSsfDay) = tlEvt(ilAvailIndex).lSsfRecPos
                                lmSsfDate(ilSsfDay) = gDateValue(slBookDate)
                            End If
                            'Determine advertiser separation-Ingore- obtain allowed times
                            lmChfCode = 0   'Force to recompute value so ilBkQH gets commputed
                            gGetLineSchParameters hmSsf, tmSsf(), lmSsfDate(), lmSsfRecPos(), llDate, imVehCode, tmChf.iAdfCode, ilGameNo, tmCff(), tmClf, tmLnRdf, lmSepLength, lmStartDateLen, lmEndDateLen, lmChfCode, imLineNo, imAdfCode, imVehComp, imHour(), imDay(), imQH(), imAHour(), imADay(), imAQH(), lmTBStartTime(), lmTBEndTime(), lmEarliestAllowedDate, imSkip(), tmChf.sType, tmChf.iPctTrade, ilBkQH, False, imPriceLevel
                            'Check Times
                            ilFound = False
                            For ilTime = LBound(lmTBStartTime) To UBound(lmTBEndTime) Step 1
                                If lmTBStartTime(ilTime) <> -1 Then
                                    If (tlEvt(ilAvailIndex).lTime >= lmTBStartTime(ilTime)) And (tlEvt(ilAvailIndex).lTime <= lmTBEndTime(ilTime)) Then
                                        ilFound = True
                                        Exit For
                                    End If
                                End If
                            Next ilTime
                            If Not ilFound Then
                                ilMoveOk = False
                            End If
                        End If
                    End If
                    If ilMoveOk Then
                        '6/18/06: Man Schd Replace Fill
                        'ilRet = mBeginTrans(False, False)   'btrBeginTrans(hmSdf, 1000)
                        'If ilRet = BTRV_ERR_NONE Then
                        '6/18/06: Man Schd Replace Fill
                            ilRet = mMakeUnschSpot(lmL2ManSchCode(1, ilLoop), imL2ManSchInfo(1, ilLoop), lmL2ManSchCode(2, ilLoop), imL2ManSchInfo(7, ilLoop), slBookDate, imVehCode, False, False, llSdfRecPos)
                            If Not ilRet Then
                                mAbortTrans True, False, False  'ilRet = btrAbortTrans(hmSdf)
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, slTime
                            tmAddEvt.iType = 100
                            tmAddEvt.lTime = llSdfRecPos
                            ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                            gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slBookDate, slTime, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
                            tmSmfA.lChfCode = 0
                            'ilBkQH = 1000   'ignore Booking quarter hours since manual spot
                            ilRet = mSchSpot("S", -1, slBookDate, ilGameNo, llSdfRecPos, ilBkQH, tmAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmSmfA, imPriceLevel)
                            If Not ilRet Then
                                mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
                                'mForceRepaintWeekly True
                                Exit Sub
                            End If
                            imL2ManSchInfo(3, ilLoop) = imL2ManSchInfo(3, ilLoop) + 1
                            lbcManSchSpotSort.Tag = ""
                            mMakeManSchView 0
                            If imLog2Type - 1 = imAdMdType Then
                                mMakeManSchView 1
                            End If
                            mVbcL1MinMax False
                            mVbcL2MinMax False
                            mVbcMissedMinMax False
                            mVbcAvailMinMax False
                            mVbcContractMinMax False
                            ilRet = btrEndTrans(hmSdf)
                        '6/18/06: Man Schd Replace Fill
                        'Else
                        '    'Screen.MousePointer = vbDefault
                        '    'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                        'End If
                        '6/18/06: Man Schd Replace Fill
                        mUnblockDay
                        Exit Sub
                    End If
                End If
            End If
        Next ilIndex
        '6/18/06: Man Schd Replace Fill
        'mUnblockDay
        mAbortTrans False, False, False 'ilRet = btrAbortTrans(hmSdf)
        '6/18/06: Man Schd Replace Fill
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Move outside of contract limits- spot not moved", vbOKOnly + vbExclamation, "Move Status")
        DoEvents
        Exit Sub
    Else
        mGetEdcDate imDragColNoDest - 1
        slBookDate = smEdcDate
        llDate = lmEdcDate
        ilBookDayIndex = gWeekDayStr(slBookDate)
        ilGameNo = imEdcGameNo
        ilSsfDay = imSsfDayIndex
        If Not mBlockDay(65536 * CLng(imVehCode) + lmLockDate, 0) Then
            mForceRepaintWeekly False
            Exit Sub
        End If
        '6/18/06: Man Schd Replace Fill
        ilRet = mBeginTrans(False, False)  'btrBeginTrans(hmSdf, 1000)
        If ilRet <> BTRV_ERR_NONE Then
            mUnblockDay
            Exit Sub
        End If
        If tlEvt(imDragIndexDest).iType = 100 Then
            'Delete fill spot
            llSdfRecPos = tlEvt(imDragIndexDest).lTime
            If (((tlEvt(imDragIndexDest).iLineInfo And &H10) = &H10) And ((tlEvt(imDragIndexDest).iLineInfo And &H200) <> &H200)) Then
                llSsfAvailRecPos = tlEvt(imDragIndexDest).lSsfRecPos
                ilSsfAvailIndex = tlEvt(imDragIndexDest).iSsfIndex
                ilRet = mUnschSpot("D", 0, slBookDate, ilGameNo, llSsfAvailRecPos, llSdfRecPos, tmManMdExt(), tmSmfA)   'Spot added to tlMdExt as last event
            Else
                mUnblockDay
                Exit Sub
            End If
        End If
        '6/18/06: Man Schd Replace Fill
        ilCount = -1    '0
        ilStartIndex = -1
        ilIndexSrce = -1
        'ilIndexSrce = 1
        'llSchCode = lmAdMdManSchCode(1)
        'If ilIndexSrce <> imDragIndexSrce Then
        '    For ilLoop = 2 To UBound(lmAdMdManSchCode) - 1 Step 1
        '        If llSchCode <> lmAdMdManSchCode(ilLoop) Then
        '            ilIndexSrce = ilIndexSrce + 1
        '            llSchCode = lmAdMdManSchCode(ilLoop)
        '            If ilIndexSrce = imDragIndexSrce Then
        '                ilIndexSrce = ilLoop
        '                Exit For
        '            End If
        '        End If
        '    Next ilLoop
        'End If
        'For ilLoop = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
        For ilLoop = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
            If imAdMdManSchInfo(6, ilLoop) + 1 = imDragIndexSrce Then
                ilIndexSrce = ilLoop
                llSchCode = lmAdMdManSchCode(1, ilLoop)
                llFsfCode = lmAdMdManSchCode(2, ilLoop)
                Exit For
            End If
        Next ilLoop
        If ilIndexSrce = -1 Then
            '6/18/06: Man Schd Replace Fill
            'mUnblockDay
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            '6/18/06: Man Schd Replace Fill
            Exit Sub
        End If
        'For ilLoop = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
        For ilLoop = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
            If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilIndexSrce) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilIndexSrce) > 0)) Then
                'ilCount = ilCount + 1
                'If ilStartIndex = -1 Then
                '    ilStartIndex = ilLoop
                'End If
                'ilEndIndex = ilLoop
                'If ((imADMdShow = 0) And (ilLoop = imDragIndexSrce)) Or (imADMdShow = 1) Then
                If ((imADMdShow = 0) And (imAdMdManSchInfo(6, ilLoop) + 1 = imDragIndexSrce)) Or (imADMdShow = 1) Then
                    ilCount = ilCount + 1
                    If ilStartIndex = -1 Then
                        ilStartIndex = ilLoop
                    End If
                    ilEndIndex = ilLoop
                    If (imADMdShow = 0) Then
                        Exit For
                    End If
                End If
            End If
        Next ilLoop
        If ilCount < 0 Then     '<= 0 Then
            '6/18/06: Man Schd Replace Fill
            'mUnblockDay
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            '6/18/06: Man Schd Replace Fill
            Exit Sub
        End If
        'Contracts information stored in length order- store largest first
        'ReDim ilOrder(1 To ilCount) As Integer
        ReDim ilOrder(0 To ilCount) As Integer
        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Or (tgVpf(imVpfIndex).sSSellOut = "M") Or (tgVpf(imVpfIndex).sSSellOut = "T") Then   'Order contract in length order
            ilCount = LBound(ilOrder) '1
            For ilLoop = ilEndIndex To ilStartIndex Step -1
                ilOrder(ilCount) = ilLoop
                ilCount = ilCount + 1
            Next ilLoop
        Else
            Randomize   'Seed random number generator
            'Randomily select
            ilNoGen = -1    '0
            Do
                ilNum = Int((ilEndIndex - ilStartIndex + 1) * Rnd + ilStartIndex)
                ilFound = False
                For ilLoop = 0 To ilNoGen Step 1
                    If ilOrder(ilLoop) = ilNum Then
                        ilFound = True
                        Exit For
                    End If
                Next ilLoop
                If ilFound = False Then
                    ilNoGen = ilNoGen + 1
                    ilOrder(ilNoGen) = ilNum
                End If
            Loop Until ilNoGen = ilCount
        End If
        ilRoom = False
        '5/5/11: Active manual contract for games
        If ilGameNo > 0 Then
            ilGameMatch = False
        Else
            ilGameMatch = True
        End If
        '5/5/11
        'For ilIndex = 1 To UBound(ilOrder) Step 1
        For ilIndex = 0 To UBound(ilOrder) Step 1
            ilLoop = ilOrder(ilIndex)
            If imAdMdManSchInfo(7, ilLoop) = ilGameNo Then
                '5/5/11: Active manual contract for games
                ilGameMatch = True
                If mManSchCheckRoom(DRAGCONTRACT, imDragColNoDest, imAdMdManSchInfo(2, ilLoop), imDragIndexDest, tlEvt()) Then
                    ilRoom = True
                    'Test if legal day
                    ilRet = mReadChfClfRdfCffRec(lmAdMdManSchCode(1, ilLoop), imAdMdManSchInfo(1, ilLoop), lmAdMdManSchCode(2, ilLoop), ilGameNo, slBookDate, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
                    If ilRet And tmCff(0).sDelete <> "Y" Then
                        ilMoveOk = True
                        'If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then 'Weekly
                        If (tmCff(0).sDyWk <> "D") Then  'Weekly
                            If (tmCff(0).iDay(ilBookDayIndex) <= 0) And (tmCff(0).sXDay(ilBookDayIndex) <> "Y") Then
                                ilMoveOk = False
                            End If
                        Else
                            If tmCff(0).iDay(ilBookDayIndex) <= 0 Then
                                ilMoveOk = False
                            End If
                        End If
                        If ilMoveOk Then
                            ilAvailIndex = imDragIndexDest
                            Do
                                ilAvailIndex = ilAvailIndex - 1
                                'If ilAvailIndex < LBound(tlEvt) Then
                                If ilAvailIndex < imLBEvt Then
                                    ilMoveOk = False
                                    Exit Do
                                End If
                                If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
                                    ilSsfAvailIndex = tlEvt(ilAvailIndex).iSsfIndex
                                    Exit Do
                                End If
                            Loop
                            If ilMoveOk Then
                                imSsfRecLen = Len(tmSsf(ilSsfDay))
                                If lmSsfRecPos(ilSsfDay) <> tlEvt(ilAvailIndex).lSsfRecPos Then
                                    ilRet = gSSFGetDirect(hmSsf, tmSsf(ilSsfDay), imSsfRecLen, tlEvt(ilAvailIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                    lmSsfRecPos(ilSsfDay) = tlEvt(ilAvailIndex).lSsfRecPos
                                    lmSsfDate(ilSsfDay) = gDateValue(slBookDate)
                                End If
                                'Determine advertiser separation-Ingore- obtain allowed times
                                lmChfCode = 0   'Force to recompute value so ilBkQH gets commputed
                                gGetLineSchParameters hmSsf, tmSsf(), lmSsfDate(), lmSsfRecPos(), llDate, imVehCode, tmChf.iAdfCode, ilGameNo, tmCff(), tmClf, tmLnRdf, lmSepLength, lmStartDateLen, lmEndDateLen, lmChfCode, imLineNo, imAdfCode, imVehComp, imHour(), imDay(), imQH(), imAHour(), imADay(), imAQH(), lmTBStartTime(), lmTBEndTime(), lmEarliestAllowedDate, imSkip(), tmChf.sType, tmChf.iPctTrade, ilBkQH, False, imPriceLevel
                                'Check Times
                                ilFound = False
                                For ilTime = LBound(lmTBStartTime) To UBound(lmTBEndTime) Step 1
                                    If lmTBStartTime(ilTime) <> -1 Then
                                        If (tlEvt(ilAvailIndex).lTime >= lmTBStartTime(ilTime)) And (tlEvt(ilAvailIndex).lTime <= lmTBEndTime(ilTime)) Then
                                            ilFound = True
                                            Exit For
                                        End If
                                    End If
                                Next ilTime
                                If Not ilFound Then
                                    ilMoveOk = False
                                End If
                            End If
                        End If
                        If ilMoveOk Then
                            '6/18/06: Man Schd Replace Fill
                            'ilRet = mBeginTrans(False, False)  'btrBeginTrans(hmSdf, 1000)
                            'If ilRet = BTRV_ERR_NONE Then
                            '6/18/06: Man Schd Replace Fill
                                ilRet = mMakeUnschSpot(lmAdMdManSchCode(1, ilLoop), imAdMdManSchInfo(1, ilLoop), lmAdMdManSchCode(2, ilLoop), ilGameNo, slBookDate, imVehCode, False, False, llSdfRecPos)
                                If Not ilRet Then
                                    mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
                                    'mForceRepaintWeekly True
                                    Exit Sub
                                End If
                                mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, slTime
                                tmAddEvt.iType = 100
                                tmAddEvt.lTime = llSdfRecPos
                                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slBookDate, slTime, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
                                tmSmfA.lChfCode = 0
                                'ilBkQH = 1000   'ignore booking quarter hour since manual move
                                ilRet = mSchSpot("S", -1, slBookDate, ilGameNo, llSdfRecPos, ilBkQH, tmAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmSmfA, imPriceLevel)
                                If Not ilRet Then
                                    mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
                                    'mForceRepaintWeekly True
                                    Exit Sub
                                End If
                                imAdMdManSchInfo(3, ilLoop) = imAdMdManSchInfo(3, ilLoop) + 1
                                lbcManSchSpotSort.Tag = ""
                                mMakeManSchView 1
                                If imLog2Type - 1 = imAdMdType Then
                                    mMakeManSchView 0
                                End If
                                mVbcL1MinMax False
                                mVbcL2MinMax False
                                mVbcMissedMinMax False
                                mVbcAvailMinMax False
                                mVbcContractMinMax False
                                ilRet = btrEndTrans(hmSdf)
                            '6/18/06: Man Schd Replace Fill
                            'Else
                            '    'Screen.MousePointer = vbDefault
                            '    'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                            'End If
                            '6/18/06: Man Schd Replace Fill
                            mUnblockDay
                            Exit Sub
                        End If
                    End If
                End If
            End If
        Next ilIndex
        '6/18/06: Man Schd Replace Fill
        'mUnblockDay
        mAbortTrans False, False, False 'ilRet = btrAbortTrans(hmSdf)
        '6/18/06: Man Schd Replace Fill
        Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Move outside of contract limits- spot not moved", vbOkOnly + vbExclamation, "Move Status")
        '5/5/11: Active manual contract for games
        If ilGameMatch Then
            If ilRoom Then
                ilRet = MsgBox("Move outside of contract limits- spot not moved", vbOKOnly + vbExclamation, "Move Status")
            Else
                ilRet = MsgBox("Spot Length exceeds Remaining Avail Time- spot not moved", vbOKOnly + vbExclamation, "Move Status")
            End If
        '5/5/11: Active manual contract for games
        Else
            ilRet = MsgBox("Event Numbers not matching- spot not moved", vbOKOnly + vbExclamation, "Move Status")
        End If
        '5/5/11
        DoEvents
        Exit Sub
    End If
    '6/18/06: Man Schd Replace Fill
    'mUnblockDay
    mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
    '6/18/06: Man Schd Replace Fill
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBookRightFill                  *
'*                                                     *
'*             Created:4/21/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Book a Right Double Click       *
'*                     Fill spot                       *
'*                                                     *
'*******************************************************
Private Sub mBookRightFill(slBookDate As String, ilGameNo As Integer, llChfCode As Long, ilLineNo As Integer, llFsfCode As Long, tlEvt() As EVTINFO)
    Dim ilRet As Integer
    Dim llSsfAvailRecPos As Long
    Dim ilSsfAvailIndex As Integer
    Dim ilPosition As Integer
    Dim ilBkQH As Integer
    Dim slTime As String
    Dim llSdfRecPos As Long
    Dim ilPriceLevel As Integer

    If ilGameNo <= 0 Then
        If Not mBlockDay(65536 * imVehCode + gDateValue(slBookDate), 0) Then
            mForceRepaintWeekly False
            Exit Sub
        End If
    Else
        If Not mBlockDay(65536 * imVehCode + ilGameNo, 0) Then
            mForceRepaintWeekly False
            Exit Sub
        End If
    End If
    ilRet = mBeginTrans(False, False)  'btrBeginTrans(hmSdf, 1000)
    If ilRet = BTRV_ERR_NONE Then
        '2/10/05- Changed to use Line vehicle
        'ilRet = mMakeUnschSpot(llChfCode, ilLineNo, llFsfCode, slBookDate, imVehCode, True, True, llSdfRecPos)
        ilRet = mReadChfClfRdfRec(llChfCode, ilLineNo, llFsfCode)
        If Not ilRet Then
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            Exit Sub
        End If
        'Disallow fil if Split Network buy because how will the fill be teated. As a split network or regular buy
        If tmClf.lRafCode > 0 Then
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            'mForceRepaintWeekly True
            Exit Sub
        End If
        ilRet = mMakeUnschSpot(llChfCode, ilLineNo, llFsfCode, ilGameNo, slBookDate, tmClf.iVefCode, True, True, llSdfRecPos)
        If Not ilRet Then
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            'mForceRepaintWeekly True
            Exit Sub
        End If
        If tmChf.sType = "S" Then
            ilBkQH = 1060
        ElseIf tmChf.sType = "M" Then
            ilBkQH = 1050
        ElseIf tmChf.sType = "Q" Then
            ilBkQH = 1030
        Else
            ilBkQH = 1045
        End If
        mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, slTime
        tmAddEvt.iType = 100
        tmAddEvt.lTime = llSdfRecPos
        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
        smSplitNetworkType = ""
        smSplitNetworkMixLen = "N"
        gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slBookDate, slTime, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
        tmSmfA.lChfCode = 0
        ilPriceLevel = 0
        'ilBkQH = 1045   'ignore booking quarter hour since manual move
        ilRet = mSchSpot("O", -1, slBookDate, ilGameNo, llSdfRecPos, ilBkQH, tmAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmSmfA, ilPriceLevel)
        If Not ilRet Then
            mAbortTrans True, False, False 'ilRet = btrAbortTrans(hmSdf)
            'mForceRepaintWeekly True
            Exit Sub
        End If
        mVbcL1MinMax False
        mVbcL2MinMax False
        mVbcMissedMinMax False
        mVbcAvailMinMax False
        mVbcContractMinMax False
        ilRet = btrEndTrans(hmSdf)
    Else
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
    End If
    mUnblockDay
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBoxCalDate                     *
'*                                                     *
'*             Created:8/25/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Place box around calendar date *
'*                                                     *
'*******************************************************
Private Sub mBoxCalDate()
    Dim slStr As String
    Dim ilRowNo As Integer
    Dim llInputDate As Long
    Dim ilWkDay As Integer
    Dim slDay As String
    Dim llDate As Long
    If imEnableSource = 0 Then
        If imL1OrL2 = 0 Then
            Exit Sub
        End If
        If imL1OrL2 = 1 Then
            slStr = edcLog1Dt.Text
        ElseIf imL1OrL2 = 2 Then
            slStr = edcLog2Dt.Text
        ElseIf imL1OrL2 = 3 Then
            slStr = edcAvDate.Text
        ElseIf imL1OrL2 = 4 Then
            slStr = edcDate.Text
        ElseIf imL1OrL2 = 5 Then
            slStr = edcMissedDt.Text
        Else
        End If
    ElseIf imEnableSource = 1 Then
        slStr = edcNote.Text
    End If
    If gValidDate(slStr) Then
        llInputDate = gDateValue(slStr)
        If (llInputDate >= lmCalStartDate) And (llInputDate <= lmCalEndDate) Then
            ilRowNo = 0
            llDate = lmCalStartDate
            Do
                ilWkDay = gWeekDayLong(llDate)
                slDay = Trim$(str$(Day(llDate)))
                If llDate = llInputDate Then
                    lacDate.Caption = slDay
                    lacDate.Move tmCDCtrls(ilWkDay + 1).fBoxX - 30, tmCDCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15) - 30
                    lacDate.Visible = True
                    Exit Sub
                End If
                If ilWkDay = 6 Then
                    ilRowNo = ilRowNo + 1
                End If
                llDate = llDate + 1
            Loop Until llDate > lmCalEndDate
            lacDate.Visible = False
        Else
            lacDate.Visible = False
        End If
    Else
        lacDate.Visible = False
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBuildAdvtView                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build images for advertiser    *
'*                      view                           *
'*                                                     *
'*******************************************************
Private Sub mBuildAdvtView()
    Dim ilLoop As Integer
    Dim slDate As String
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llDate As Long
    Dim ilRet As Integer
    Dim ilDay As Integer
    Dim slStartTime As String
    Dim slEndTime As String
    Dim ilGsf As Integer
    Dim ilGameNo As Integer
    ReDim tmMoEvt(0 To imLBEvt) As EVTINFO
    ReDim tmTuEvt(0 To imLBEvt) As EVTINFO
    ReDim tmWeEvt(0 To imLBEvt) As EVTINFO
    ReDim tmThEvt(0 To imLBEvt) As EVTINFO
    ReDim tmFrEvt(0 To imLBEvt) As EVTINFO
    ReDim tmSaEvt(0 To imLBEvt) As EVTINFO
    ReDim tmSuEvt(0 To imLBEvt) As EVTINFO
    If tmVef.sType <> "G" Then
        slDate = edcDate.Text   'plcDate.Caption
        If Trim$(slDate) = "" Then
            Exit Sub
        End If
        If Not gValidDate(slDate) Then
            Exit Sub
        End If
        slStartTime = "12:00AM"
        slEndTime = "12:00AM"
        llStartDate = gDateValue(gObtainPrevMonday(slDate))
        llEndDate = llStartDate + 6
        For ilLoop = 0 To 14 Step 1
            imEvtType(ilLoop) = False
        Next ilLoop
        'For ilLoop = 2 To 9 Step 1  'Avail only
        imEvtType(2) = True
        For ilLoop = 6 To 9 Step 1  'Avail only
            imEvtType(ilLoop) = True
        Next ilLoop
        For llDate = llStartDate To llEndDate Step 1
            ilDay = gWeekDayLong(llDate)
            slDate = Format$(llDate, "m/d/yy")
            Select Case ilDay
                Case 0
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), imEvtType(), tmMoEvt())
                Case 1
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), imEvtType(), tmTuEvt())
                Case 2
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), imEvtType(), tmWeEvt())
                Case 3
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmThVcf0(), tmThVcf6(), tmThVcf7(), imEvtType(), tmThEvt())
                Case 4
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), imEvtType(), tmFrEvt())
                Case 5
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), imEvtType(), tmSaEvt())
                Case 6
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, 0, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), imEvtType(), tmSuEvt())
            End Select
        Next llDate
    Else
        If lbcGameNo(0).ListIndex < 0 Then
            Exit Sub
        End If
        imEvtType(2) = True
        For ilLoop = 6 To 9 Step 1  'Avail only
            imEvtType(ilLoop) = True
        Next ilLoop
        For ilLoop = 0 To 6 Step 1
            If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                llDate = tmGsfInfo(ilGsf).lGameDate
                ilGameNo = tmGsfInfo(ilGsf).iGameNo
                ilDay = gWeekDayLong(llDate)
                slDate = Format$(llDate, "m/d/yy")
                Select Case ilLoop
                    Case 0
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), imEvtType(), tmMoEvt())
                    Case 1
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), imEvtType(), tmTuEvt())
                    Case 2
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), imEvtType(), tmWeEvt())
                    Case 3
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmThVcf0(), tmThVcf6(), tmThVcf7(), imEvtType(), tmThEvt())
                    Case 4
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), imEvtType(), tmFrEvt())
                    Case 5
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), imEvtType(), tmSaEvt())
                    Case 6
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), imEvtType(), tmSuEvt())
                End Select
            End If
        Next ilLoop
    End If
    mSyncDays
    mVbcContractMinMax True
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBuildExtraBonus                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build Extra array              *
'*                                                     *
'*******************************************************
Private Sub mBuildExtraBonus(tlEvt() As EVTINFO, llManSchCode() As Long, ilManSchInfo() As Integer)
    Dim ilUpper As Integer
    Dim ilTest As Integer
    Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim slCntrType As String

    ilUpper = UBound(llManSchCode, 2)
    'For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilLoop = imLBEvt To UBound(tlEvt) - 1 Step 1
        If tlEvt(ilLoop).iType = 100 Then '2-9= avail; 99=Remain avils; 101 =conflict spot; -1=place holder
            'Bypass manully moved spots and extra spot
            'Also partial network buys
            slCntrType = tlEvt(ilLoop).sCntrType
            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or ((tlEvt(ilLoop).iLineInfo And &H10) = &H10) Or ((tlEvt(ilLoop).iLineInfo And &H800) = &H800) Or ((tlEvt(ilLoop).iLineInfo And &H1000) = &H1000) Then
            Else
                ilFound = False
                'For ilTest = 1 To ilUpper - 1 Step 1
                For ilTest = 0 To ilUpper - 1 Step 1
                    'lLen contains chfcode; iUnits contains len
                    If (llManSchCode(1, ilTest) = tlEvt(ilLoop).lLen) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lLen <> 0) Then
                        ilFound = True
                        If (tlEvt(ilLoop).iLineInfo And &H10) = &H10 Then
                            ilManSchInfo(3, ilTest) = ilManSchInfo(3, ilTest) + 1
                        End If
                        Exit For
                    End If
                    If (llManSchCode(2, ilTest) = tlEvt(ilLoop).lFsfCode) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lFsfCode <> 0) Then
                        ilFound = True
                        If (tlEvt(ilLoop).iLineInfo And &H10) = &H10 Then
                            ilManSchInfo(3, ilTest) = ilManSchInfo(3, ilTest) + 1
                        End If
                        Exit For
                    End If
                Next ilTest
                If Not ilFound Then
                    llManSchCode(1, ilUpper) = tlEvt(ilLoop).lLen    'ChfCode
                    llManSchCode(2, ilUpper) = tlEvt(ilLoop).lFsfCode
                    ilManSchInfo(1, ilUpper) = 0    'Unused
                    ilManSchInfo(2, ilUpper) = tlEvt(ilLoop).iUnits   'Len
                    If (tlEvt(ilLoop).iLineInfo And &H10) = &H10 Then
                        ilManSchInfo(3, ilUpper) = 1    '# extra bonus found in the week
                    Else
                        ilManSchInfo(3, ilUpper) = 0    '# extra bonus found in the week
                    End If
                    ilManSchInfo(4, ilUpper) = 0    'Unused
                    ilManSchInfo(5, ilUpper) = 0    'lbcAdMdManSchCode Index
                    ilManSchInfo(6, ilUpper) = 0    'lbcAdMdManSch Index
                    ReDim Preserve llManSchCode(0 To 2, 0 To ilUpper + 1) As Long
                    ReDim Preserve ilManSchInfo(0 To 7, 0 To ilUpper + 1) As Integer
                    ilUpper = ilUpper + 1
                End If
            End If
        End If
    Next ilLoop
    'For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilLoop = imLBEvt To UBound(tlEvt) - 1 Step 1
        If tlEvt(ilLoop).iType = 100 Then '2-9= avail; 99=Remain avils; 101 =conflict spot; -1=place holder
            If (tlEvt(ilLoop).iLineInfo And &H10) = &H10 Then
                'For ilTest = 1 To ilUpper - 1 Step 1
                For ilTest = 0 To ilUpper - 1 Step 1
                    'lLen contains chfcode; iUnits contains len
                    If ((llManSchCode(1, ilTest) = tlEvt(ilLoop).lLen) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lLen > 0)) Or ((llManSchCode(2, ilTest) = tlEvt(ilLoop).lFsfCode) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lFsfCode > 0)) Then
                        ilManSchInfo(3, ilTest) = ilManSchInfo(3, ilTest) + 1
                        Exit For
                    End If
                Next ilTest
            End If
        End If
    Next ilLoop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBuildMissedView                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build images for time view     *
'*                                                     *
'*******************************************************
Private Sub mBuildMissedView(ilSource As Integer, ilForceRepop As Integer)
'
'   mBuildMissedView ilSource
'   Where:
'       ilSource(I)- 0=Time srceen, 1=Advertiser screen
'
'       ilSource = 0
'       imLog2Type = 0: Missed by Date; 1: Missed by Current Month; 2: Missed Current Month plus Passed; 3: Missed by Advertiser; 10=Cancelled by Date; 11=Hidden by Date
'       ilSource = 1
'       imAdMdType = 0: Missed by Date; 1: Missed by Current Month; 2: Missed Current Month plus Passed; 3: Missed by Advertiser; 9=Cancelled by Date; 10=Hidden by Date
'
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim slDate As String
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilAdfCode As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slInfo As String
    Dim slStr As String
    Dim llAdMdDate As Long
    Dim ilGameNo As Integer
    Dim ilGsf As Integer
    Dim ilGame As Integer
    Dim blCheckOtherVehicles As Boolean
    Dim blIncludeMissedMG As Boolean

    blCheckOtherVehicles = False
    If smMissedFromOthers = "Y" Then
        If rbcMissedType(1).Value Then
            blCheckOtherVehicles = True
        End If
    End If
    blIncludeMissedMG = True
    If ilSource = 0 Then
        If imLog2Type = 3 Then  'Missed by advertiser
            If imSelectedAdvt < 0 Then
                Exit Sub
            End If
            slNameCode = tgSpotAdvertiser(imSelectedAdvt).sKey 'Traffic!lbcAdvertiser.List(imSelectedAdvt)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mBuildMissedViewErr
            gCPErrorMsg ilRet, "mBuildMissedView (gParseItem field 2: Advertiser)", Spots
            On Error GoTo 0
            ilAdfCode = Val(slCode)
            slStartDate = "1/1/1970"
            slEndDate = "12/31/2060"
            'Tag test added for reschd test if this is called before contract area
            If (imAdMdSelectedAdvt <> imSelectedAdvt) Or (smAdMdSdfMdExtTag = "") Or (ilForceRepop) Or (tmVef.sType = "G") Then
                '4/16/11
                If tmVef.sType <> "G" Then
                    ilRet = gObtainMissedSpot("M", imVehCode, ilAdfCode, 0, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                Else
                    ilRet = gObtainMissedSpot("M", imVehCode, ilAdfCode, -1, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                End If
            Else
                'lbcMissedSort.Clear
                'For ilLoop = 0 To lbcAdMdMissedSort.ListCount - 1 Step 1
                '    lbcMissedSort.AddItem lbcAdMdMissedSort.List(ilLoop)
                '    lbcMissedSort.ItemData(lbcMissedSort.NewIndex) = lbcAdMdMissedSort.List(ilLoop)
                'Next ilLoop
                smSdfMdExtTag = smAdMdSdfMdExtTag
                'ReDim tmSdfMdExt(1 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                ReDim tmSdfMdExt(0 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    tmSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
                Next ilLoop
            End If
        ElseIf imLog2Type = 0 Then    'Missed by date
            '4/16/11
            If tmVef.sType <> "G" Then
                slDate = smMissedDate
                If Trim$(slDate) = "" Then
                    Exit Sub
                End If
                If Not gValidDate(slDate) Then
                    Exit Sub
                End If
                If (smAdMdMissedDate = "") Or (smAdMdSdfMdExtTag = "") Then
                    llAdMdDate = 0
                Else
                    llAdMdDate = gDateValue(gObtainPrevMonday(smAdMdMissedDate))
                End If
                slStartDate = gObtainPrevMonday(slDate)
                slEndDate = gObtainNextSunday(slDate)
                If (gDateValue(slStartDate) <> llAdMdDate) Or (imAdMdType <> 0) Or (imADMdShow <> 0) Or (ilForceRepop) Or (tmVef.sType = "G") Then
                    smSdfMdExtTag = ""  'Force repopulation
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                Else
                    'lbcMissedSort.Clear
                    'For ilLoop = 0 To lbcAdMdMissedSort.ListCount - 1 Step 1
                    '    lbcMissedSort.AddItem lbcAdMdMissedSort.List(ilLoop)
                    '    lbcMissedSort.ItemData(lbcMissedSort.NewIndex) = lbcAdMdMissedSort.List(ilLoop)
                    'Next ilLoop
                    smSdfMdExtTag = smAdMdSdfMdExtTag
                    'ReDim tmSdfMdExt(1 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                    ReDim tmSdfMdExt(0 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                    For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                        tmSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
                    Next ilLoop
                End If
            Else
                ilGameNo = mGetL1GameNo()
                If ilGameNo > 0 Then
                    smSdfMdExtTag = ""
                    slStartDate = mGetL1GameDate()
                    slEndDate = slStartDate
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, ilGameNo, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                End If
            End If
        ElseIf imLog2Type = 1 Then    'Missed by Current Month
            '4/16/11
            If tmVef.sType <> "G" Then
                slDate = edcDate.Text   'plcDate.Caption    'Format$(gNow(), "m/d/yy")
            Else
                slDate = mGetL2GameDate()
            End If
            If Trim$(slDate) = "" Then
                Exit Sub
            End If
            smMissedDate = gObtainPrevMonday(slDate)
            slStartDate = gObtainStartStd(slDate)
            slEndDate = gObtainNextSunday(slDate)
            If (imAdMdType <> 1) Or (ilForceRepop) Or (tmVef.sType = "G") Then
                smSdfMdExtTag = ""  'Force repopulation
                '4/16/11
                If tmVef.sType <> "G" Then
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                Else
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, -1, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                End If
            Else
                'lbcMissedSort.Clear
                'For ilLoop = 0 To lbcAdMdMissedSort.ListCount - 1 Step 1
                '    lbcMissedSort.AddItem lbcAdMdMissedSort.List(ilLoop)
                '    lbcMissedSort.ItemData(lbcMissedSort.NewIndex) = lbcAdMdMissedSort.List(ilLoop)
                'Next ilLoop
                smSdfMdExtTag = smAdMdSdfMdExtTag
                'ReDim tmSdfMdExt(1 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                ReDim tmSdfMdExt(0 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    tmSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
                Next ilLoop
            End If
        ElseIf imLog2Type = 2 Then    'Missed by Past Month
            '4/16/11
            If tmVef.sType <> "G" Then
                slDate = edcDate.Text   'plcDate.Caption    'Format$(gNow(), "m/d/yy")
            Else
                slDate = mGetL1GameDate()
            End If
            If Trim$(slDate) = "" Then
                Exit Sub
            End If
            slStartDate = "1/1/94"
            slEndDate = gObtainNextSunday(slDate)
            If (imAdMdType <> 2) Or (ilForceRepop) Or (tmVef.sType = "G") Then
                smSdfMdExtTag = ""  'Force repopulation
                '4/16/11
                If tmVef.sType <> "G" Then
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                Else
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, -1, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
                End If
            Else
                'lbcMissedSort.Clear
                'For ilLoop = 0 To lbcAdMdMissedSort.ListCount - 1 Step 1
                '    lbcMissedSort.AddItem lbcAdMdMissedSort.List(ilLoop)
                '    lbcMissedSort.ItemData(lbcMissedSort.NewIndex) = lbcAdMdMissedSort.List(ilLoop)
                'Next ilLoop
                smSdfMdExtTag = smAdMdSdfMdExtTag
                'ReDim tmSdfMdExt(1 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                ReDim tmSdfMdExt(0 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    tmSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
                Next ilLoop
            End If
        ElseIf imLog2Type = 10 Then    'Cancelled by date
            '4/16/11
            If tmVef.sType <> "G" Then
                slDate = smMissedDate
                If Trim$(slDate) = "" Then
                    Exit Sub
                End If
                If Not gValidDate(slDate) Then
                    Exit Sub
                End If
                If (smAdMdMissedDate = "") Or (smAdMdSdfMdExtTag = "") Then
                    llAdMdDate = 0
                Else
                    llAdMdDate = gDateValue(gObtainPrevMonday(smAdMdMissedDate))
                End If
                slStartDate = gObtainPrevMonday(slDate)
                slEndDate = gObtainNextSunday(slDate)
                If (gDateValue(slStartDate) <> llAdMdDate) Or (imAdMdType <> 9) Or (ilForceRepop) Or (tmVef.sType = "G") Then
                    smSdfMdExtTag = ""  'Force repopulation
                    ilRet = gObtainMissedSpot("C", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag)
                Else
                    'lbcMissedSort.Clear
                    'For ilLoop = 0 To lbcAdMdMissedSort.ListCount - 1 Step 1
                    '    lbcMissedSort.AddItem lbcAdMdMissedSort.List(ilLoop)
                    '    lbcMissedSort.ItemData(lbcMissedSort.NewIndex) = lbcAdMdMissedSort.List(ilLoop)
                    'Next ilLoop
                    smSdfMdExtTag = smAdMdSdfMdExtTag
                    'ReDim tmSdfMdExt(1 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                    ReDim tmSdfMdExt(0 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                    For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                        tmSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
                    Next ilLoop
                End If
            Else
                ilGameNo = mGetL1GameNo()
                If ilGameNo > 0 Then
                    smGameSdfMdExtTag = ""
                    ilRet = gObtainMissedSpot("C", imVehCode, -1, ilGameNo, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag)
                Else
                    'ReDim tmSdfMdExt(1 To 1) As SDFMDEXT
                    ReDim tmSdfMdExt(0 To 1) As SDFMDEXT
                    smSdfMdExtTag = ""
                End If
            End If
        ElseIf imLog2Type = 11 Then    'Hidden by date
            '4/16/11
            If tmVef.sType <> "G" Then
                slDate = smMissedDate
                If Trim$(slDate) = "" Then
                    Exit Sub
                End If
                If Not gValidDate(slDate) Then
                    Exit Sub
                End If
                If (smAdMdMissedDate = "") Or (smAdMdSdfMdExtTag = "") Then
                    llAdMdDate = 0
                Else
                    llAdMdDate = gDateValue(gObtainPrevMonday(smAdMdMissedDate))
                End If
                slStartDate = gObtainPrevMonday(slDate)
                slEndDate = gObtainNextSunday(slDate)
                If (gDateValue(slStartDate) <> llAdMdDate) Or (imAdMdType <> 10) Or (ilForceRepop) Or (tmVef.sType = "G") Then
                    smSdfMdExtTag = ""  'Force repopulation
                    ilRet = gObtainMissedSpot("H", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag)
                Else
                    'lbcMissedSort.Clear
                    'For ilLoop = 0 To lbcAdMdMissedSort.ListCount - 1 Step 1
                    '    lbcMissedSort.AddItem lbcAdMdMissedSort.List(ilLoop)
                    '    lbcMissedSort.ItemData(lbcMissedSort.NewIndex) = lbcAdMdMissedSort.List(ilLoop)
                    'Next ilLoop
                    smSdfMdExtTag = smAdMdSdfMdExtTag
                    'ReDim tmSdfMdExt(1 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                    ReDim tmSdfMdExt(0 To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
                    For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                        tmSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
                    Next ilLoop
                End If
            Else
                ilGameNo = mGetL1GameNo()
                If ilGameNo > 0 Then
                    smGameSdfMdExtTag = ""
                    ilRet = gObtainMissedSpot("H", imVehCode, -1, ilGameNo, slStartDate, slEndDate, 2, tmSdfMdExt(), smSdfMdExtTag)
                Else
                    'ReDim tmSdfMdExt(1 To 1) As SDFMDEXT
                    ReDim tmSdfMdExt(0 To 1) As SDFMDEXT
                    smSdfMdExtTag = ""
                End If
            End If
        End If
        'Room missed spots that are within Work Area
        'For ilLoop = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
        For ilLoop = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
            'For ilIndex = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) - 1 Step 1
            For ilIndex = imLBSdfMdExt To UBound(tmSdfMdExt) - 1 Step 1
                If tmWAMdExt(ilLoop).lRecPos = tmSdfMdExt(ilIndex).lRecPos Then
                    mCompressMd ilIndex, tmSdfMdExt() ', lbcMissedSort
                    Exit For
                End If
            Next ilIndex
        Next ilLoop
        'ilLoop = LBound(tmSdfMdExt)
        ilLoop = imLBSdfMdExt
        Do
            If ilLoop > UBound(tmSdfMdExt) - 1 Then
                Exit Do
            End If
            'slStr = Trim$(Str$(tmSdfMdExt(ilLoop).lCntrNo))
            'slStr = slStr & "  " & RTrim$(tmSdfMdExt(ilLoop).sAdvtAbbr) & " "
            'slStr = RTrim$(tmSdfMdExt(ilLoop).sAdvtAbbr) & " "
            gUnpackDate tmSdfMdExt(ilLoop).iDate(0), tmSdfMdExt(ilLoop).iDate(1), slDate
            'slStr = slStr & "  " & slDate
            ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmSdfMdExt(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If tmSdf.sBill <> "Y" Then
                slInfo = mMakeMissedInfo(tmSdfMdExt(ilLoop).lChfCode, tmSdfMdExt(ilLoop).iLineNo, tmSdfMdExt(ilLoop).lFsfCode, tmSdfMdExt(ilLoop).iGameNo, slDate, tmSdfMdExt(ilLoop).sAdvtAbbr, tmSdfMdExt(ilLoop).sAdvtProd, tmSdfMdExt(ilLoop).sPrice, tmSdfMdExt(ilLoop).lchfcxfCode, tmSdfMdExt(ilLoop).lchfcxfInt, tmSdfMdExt(ilLoop).lClfCxfCode, tmSdfMdExt(ilLoop).iNoOrdered, tmSdfMdExt(ilLoop).iLineInfo, tmSdfMdExt(ilLoop).sCntrType, tmSdfMdExt(ilLoop).lSxfCode)
                tmSdfMdExt(ilLoop).iMissedMG = False
                If Left$(slInfo, 1) = "~" Then
                    slInfo = Mid$(slInfo, 2)
                    tmSdfMdExt(ilLoop).iMissedMG = True
                End If
                If slInfo <> "" Then
                    'slStr = slStr & " " & slInfo
                    slStr = slInfo
                    tmSdfMdExt(ilLoop).sShow = slStr
                    ilLoop = ilLoop + 1
                Else
                    mCompressMd ilLoop, tmSdfMdExt() ', lbcMissedSort
                End If
            Else
                mCompressMd ilLoop, tmSdfMdExt() ', lbcMissedSort
            End If
        Loop
        mMissedSummary ilSource
        mVbcL2MinMax True
    Else
        If imAdMdType = 3 Then  'Missed by advertiser
            If imAdMdSelectedAdvt < 0 Then
                Exit Sub
            End If
            slNameCode = tgSpotAdvertiser(imAdMdSelectedAdvt).sKey 'Traffic!lbcAdvertiser.List(imAdMdSelectedAdvt)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            On Error GoTo mBuildMissedViewErr
            gCPErrorMsg ilRet, "mBuildMissedView (gParseItem field 2: Advertiser)", Spots
            On Error GoTo 0
            ilAdfCode = Val(slCode)
            slStartDate = "1/1/1970"
            slEndDate = "12/31/2060"
            If tmVef.sType <> "G" Then
                ilRet = gObtainMissedSpot("M", imVehCode, ilAdfCode, 0, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            Else
                ilRet = gObtainMissedSpot("M", imVehCode, ilAdfCode, -1, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            End If
        ElseIf imAdMdType = 0 Then    'Missed by date
            If tmVef.sType <> "G" Then
                slDate = smAdMdMissedDate
                If Trim$(slDate) = "" Then
                    Exit Sub
                End If
                If Not gValidDate(slDate) Then
                    Exit Sub
                End If
                slStartDate = gObtainPrevMonday(slDate)
                slEndDate = gObtainNextSunday(slDate)
                ilRet = gObtainMissedSpot("M", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            Else
                If imSelectedGameNo >= 0 Then
                    'ReDim tmAdMdSdfMdExt(1 To 1) As SDFMDEXT
                    ReDim tmAdMdSdfMdExt(0 To 1) As SDFMDEXT
                    smAdMdSdfMdExtTag = ""
                    'For ilLoop = 0 To 6 Step 1
                    '    If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                    '        ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                    '        ilGameNo = tmGsfInfo(ilGsf).iGameNo
                    '        slStartDate = mFindGameNoDate(ilGameNo, 0)
                    '        slEndDate = slStartDate
                    '        smGameSdfMdExtTag = ""
                    '        ilRet = gObtainMissedSpot("M", imVehCode, -1, ilGameNo, slStartDate, slEndDate, 2, tmGameSdfMdExt(), smGameSdfMdExtTag, blCheckOtherVehicles)
                    '        For ilGame = LBound(tmGameSdfMdExt) To UBound(tmGameSdfMdExt) - 1 Step 1
                    '            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmGameSdfMdExt(ilGame)
                    '            ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                    '        Next ilGame
                    '    End If
                    'Next ilLoop
                    ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                    ilGameNo = tmGsfInfo(ilGsf).iGameNo
                    slStartDate = Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
                    slEndDate = slStartDate
                    For ilLoop = 0 To 6 Step 1
                        If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                            If tmGsfInfo(ilGsf).lGameDate > gDateValue(slEndDate) Then
                                slEndDate = Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
                            End If
                        End If
                    Next ilLoop
                    ilRet = gObtainMissedSpot("M", imVehCode, -1, -1, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)

                End If
            End If
        ElseIf imAdMdType = 1 Then    'Missed by current month
            'slDate = edcDate.Text   'plcDate.Caption    'Format$(gNow(), "m/d/yy")
            mGetEdcDate 0
            slDate = smEdcDate
            If Trim$(slDate) = "" Then
                'ReDim tmSdfMdExt(1 To 1) As SDFMDEXT
                ReDim tmSdfMdExt(0 To 1) As SDFMDEXT
                smSdfMdExtTag = ""
                Exit Sub
            End If
            slStartDate = gObtainStartStd(slDate)
            slEndDate = gObtainNextSunday(slDate)
            If tmVef.sType <> "G" Then
                ilRet = gObtainMissedSpot("M", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            Else
                For ilLoop = 0 To 6 Step 1
                    If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                        ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                        If tmGsfInfo(ilGsf).lGameDate > gDateValue(slEndDate) Then
                            slEndDate = Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
                        End If
                    End If
                Next ilLoop
                ilRet = gObtainMissedSpot("M", imVehCode, -1, -1, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            End If
        ElseIf imAdMdType = 2 Then    'Missed by current month and pass months
            'slDate = edcDate.Text   'plcDate.Caption    'Format$(gNow(), "m/d/yy")
            mGetEdcDate 0
            slDate = smEdcDate
            If Trim$(slDate) = "" Then
                'ReDim tmSdfMdExt(1 To 1) As SDFMDEXT
                ReDim tmSdfMdExt(0 To 1) As SDFMDEXT
                smSdfMdExtTag = ""
                Exit Sub
            End If
            slStartDate = "1/1/94"
            slEndDate = gObtainNextSunday(slDate)
            If tmVef.sType <> "G" Then
                ilRet = gObtainMissedSpot("M", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            Else
                For ilLoop = 0 To 6 Step 1
                    If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                        ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                        If tmGsfInfo(ilGsf).lGameDate > gDateValue(slEndDate) Then
                            slEndDate = Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
                        End If
                    End If
                Next ilLoop
                ilRet = gObtainMissedSpot("M", imVehCode, -1, -1, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag, blCheckOtherVehicles, blIncludeMissedMG)
            End If
        ElseIf imAdMdType = 9 Then    'Cancelled by date
            If tmVef.sType <> "G" Then
                slDate = smAdMdMissedDate
                If Trim$(slDate) = "" Then
                    Exit Sub
                End If
                If Not gValidDate(slDate) Then
                    Exit Sub
                End If
                slStartDate = gObtainPrevMonday(slDate)
                slEndDate = gObtainNextSunday(slDate)
                ilRet = gObtainMissedSpot("C", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag)
            Else
                If imSelectedGameNo >= 0 Then
                    'ReDim tmAdMdSdfMdExt(1 To 1) As SDFMDEXT
                    ReDim tmAdMdSdfMdExt(0 To 1) As SDFMDEXT
                    For ilLoop = 0 To 6 Step 1
                        If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                            ilGameNo = tmGsfInfo(ilGsf).iGameNo
                            smGameSdfMdExtTag = ""
                            ilRet = gObtainMissedSpot("C", imVehCode, -1, ilGameNo, slStartDate, slEndDate, 2, tmGameSdfMdExt(), smGameSdfMdExtTag)
                            For ilGame = LBound(tmGameSdfMdExt) To UBound(tmGameSdfMdExt) - 1 Step 1
                                tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmGameSdfMdExt(ilGame)
                                'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            Next ilGame
                        End If
                    Next ilLoop
                End If
            End If
        ElseIf imAdMdType = 10 Then    'Hidden by date
            If tmVef.sType <> "G" Then
                slDate = smAdMdMissedDate
                If Trim$(slDate) = "" Then
                    Exit Sub
                End If
                If Not gValidDate(slDate) Then
                    Exit Sub
                End If
                slStartDate = gObtainPrevMonday(slDate)
                slEndDate = gObtainNextSunday(slDate)
                ilRet = gObtainMissedSpot("H", imVehCode, -1, 0, slStartDate, slEndDate, 2, tmAdMdSdfMdExt(), smAdMdSdfMdExtTag)
            Else
                If imSelectedGameNo >= 0 Then
                    'ReDim tmAdMdSdfMdExt(1 To 1) As SDFMDEXT
                    ReDim tmAdMdSdfMdExt(0 To 1) As SDFMDEXT
                    For ilLoop = 0 To 6 Step 1
                        If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                            ilGameNo = tmGsfInfo(ilGsf).iGameNo
                            smGameSdfMdExtTag = ""
                            ilRet = gObtainMissedSpot("H", imVehCode, -1, ilGameNo, slStartDate, slEndDate, 2, tmGameSdfMdExt(), smGameSdfMdExtTag)
                            For ilGame = LBound(tmGameSdfMdExt) To UBound(tmGameSdfMdExt) - 1 Step 1
                                tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmGameSdfMdExt(ilGame)
                                'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            Next ilGame
                        End If
                    Next ilLoop
                End If
            End If
        End If
        mPopWorkArea
        'Remove missed spots that are within Work Area
        'For ilLoop = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
        For ilLoop = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
            'For ilIndex = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
            For ilIndex = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                If tmWAMdExt(ilLoop).lRecPos = tmAdMdSdfMdExt(ilIndex).lRecPos Then
                    mCompressMd ilIndex, tmAdMdSdfMdExt()
                    Exit For
                End If
            Next ilIndex
        Next ilLoop
        'ilLoop = LBound(tmAdMdSdfMdExt)
        ilLoop = imLBSdfMdExt
        Do
            If ilLoop > UBound(tmAdMdSdfMdExt) - 1 Then
                Exit Do
            End If
            'slStr = Trim$(Str$(tmAdMdSdfMdExt(ilLoop).lCntrNo))
            'slStr = slStr & "  " & RTrim$(tmAdMdSdfMdExt(ilLoop).sAdvtAbbr) & " "
            'slStr = RTrim$(tmAdMdSdfMdExt(ilLoop).sAdvtAbbr) & " "
            gUnpackDate tmAdMdSdfMdExt(ilLoop).iDate(0), tmAdMdSdfMdExt(ilLoop).iDate(1), slDate
            'slStr = slStr & "  " & slDate
            ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmAdMdSdfMdExt(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            'Remove billed missed spots
            If tmSdf.sBill <> "Y" Then
                slInfo = mMakeMissedInfo(tmAdMdSdfMdExt(ilLoop).lChfCode, tmAdMdSdfMdExt(ilLoop).iLineNo, tmAdMdSdfMdExt(ilLoop).lFsfCode, tmAdMdSdfMdExt(ilLoop).iGameNo, slDate, tmAdMdSdfMdExt(ilLoop).sAdvtAbbr, tmAdMdSdfMdExt(ilLoop).sAdvtProd, tmAdMdSdfMdExt(ilLoop).sPrice, tmAdMdSdfMdExt(ilLoop).lchfcxfCode, tmAdMdSdfMdExt(ilLoop).lchfcxfInt, tmAdMdSdfMdExt(ilLoop).lClfCxfCode, tmAdMdSdfMdExt(ilLoop).iNoOrdered, tmAdMdSdfMdExt(ilLoop).iLineInfo, tmAdMdSdfMdExt(ilLoop).sCntrType, tmAdMdSdfMdExt(ilLoop).lSxfCode)
                tmAdMdSdfMdExt(ilLoop).iMissedMG = False
                If Left$(slInfo, 1) = "~" Then
                    slInfo = Mid$(slInfo, 2)
                    tmAdMdSdfMdExt(ilLoop).iMissedMG = True
                End If
                If slInfo <> "" Then
                    'slStr = slStr & " " & slInfo
                    slStr = slInfo
                    tmAdMdSdfMdExt(ilLoop).sShow = slStr
                    ilLoop = ilLoop + 1
                Else
                    mCompressMd ilLoop, tmAdMdSdfMdExt()
                End If
            Else
                mCompressMd ilLoop, tmAdMdSdfMdExt()
            End If
        Loop
        mSortMissed tmAdMdSdfMdExt()
        mMissedSummary ilSource
        mVbcMissedMinMax True
    End If
    Exit Sub
mBuildMissedViewErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBuildSwf                       *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build spot dump file           *
'*                                                     *
'*******************************************************
Private Sub mBuildSwf(ilEvtIndex As Integer, ilEndEvtIndex As Integer, tlEvt() As EVTINFO, slShow As String)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilPos                                                                                 *
'******************************************************************************************

    Dim slStr As String
    Dim slMore As String

    slShow = ""
    Do While ilEvtIndex < UBound(tlEvt)
        If lmSelectedChfCode <= 0 Then
            '7/5/14: Add check box for showing/not showing ghost spots
            'If ((tlEvt(ilEvtIndex).iType >= 2) And (tlEvt(ilEvtIndex).iType <= 9)) Or ((tlEvt(ilEvtIndex).iType = 99)) Or ((tlEvt(ilEvtIndex).iType = 100)) Or ((tlEvt(ilEvtIndex).iType = 101)) Or ((tlEvt(ilEvtIndex).iType = -1)) Then
            If ((tlEvt(ilEvtIndex).iType >= 2) And (tlEvt(ilEvtIndex).iType <= 9)) Or ((tlEvt(ilEvtIndex).iType = 99)) Or ((tlEvt(ilEvtIndex).iType = 100)) Or ((tlEvt(ilEvtIndex).iType = 101) And (ckcShowGhost.Value = vbChecked)) Or ((tlEvt(ilEvtIndex).iType = -1)) Then
                If tlEvt(ilEvtIndex).iType = 100 Then    'Spot
                        slStr = Trim$(tlEvt(ilEvtIndex).sShow)
                        'If imMore = 1 Then
                        '    ilPos = InStr(1, tlEvt(ilEvtIndex).sPrice, ".")
                        '    If ilPos > 1 Then
                        '        slStr = " $" & Left$(tlEvt(ilEvtIndex).sPrice, ilPos - 1) & " " & slStr
                        '    ElseIf ilPos = 1 Then
                        '        slStr = " $0" & slStr
                        '    Else
                        '        slStr = " " & Trim$(Left$(tlEvt(ilEvtIndex).sPrice, 5)) & " " & slStr
                        '    End If
                        'End If
                        slMore = mMoreInfo(tlEvt(ilEvtIndex).lSdfCode, tlEvt(ilEvtIndex).sPrice, tlEvt(ilEvtIndex).sNetRegionAbbr, tlEvt(ilEvtIndex).sCITFlag, tlEvt(ilEvtIndex).sCopyCIT, tlEvt(ilEvtIndex).sPtType, tlEvt(ilEvtIndex).lCopyCode, tlEvt(ilEvtIndex).iRotNo, tlEvt(ilEvtIndex).sLiveCopy)
                        If Trim$(slMore <> "") Then
                            slStr = " " & slMore & " " & slStr
                        End If
                        slShow = slShow & Chr$(10) & " " & slStr  'tlEvt(ilEvtIndex).sShow
                ElseIf tlEvt(ilEvtIndex).iType = 101 Then   'Conflicting Spot
                        slShow = slShow & Chr$(10) & tlEvt(ilEvtIndex).sShow
                ElseIf tlEvt(ilEvtIndex).iType = 99 Then    'Avail units remaining
                        slShow = slShow & Chr$(10) & tlEvt(ilEvtIndex).sShow
                ElseIf tlEvt(ilEvtIndex).iType = -1 Then    'place holder
                    If slShow <> "" Then
                        slShow = slShow & Chr$(10)
                    Else
                        slShow = " "
                    End If
                Else    'Avail
                    slShow = tlEvt(ilEvtIndex).sShow
                End If
            End If
        Else
            If (tlEvt(ilEvtIndex).iType = 100) And (tlEvt(ilEvtIndex).lLen = lmSelectedChfCode) Then      'Spot
                slStr = Trim$(tlEvt(ilEvtIndex).sSpot)
'                If imMore = 1 Then
'                    ilPos = InStr(1, tlEvt(ilEvtIndex).sPrice, ".")
'                    If ilPos > 1 Then
'                        slStr = " $" & Left$(tlEvt(ilEvtIndex).sPrice, ilPos - 1) & " " & slStr
'                    ElseIf ilPos = 1 Then
'                        slStr = " $0" & slStr
'                    Else
'                        slStr = " " & Trim$(Left$(tlEvt(ilEvtIndex).sPrice, 5)) & " " & slStr
'                    End If
'                End If
                slShow = slShow & Chr$(10) & slStr  'tlEvt(ilEvtIndex).sShow
                ilEvtIndex = ilEvtIndex + 1
                Exit Sub
            End If
        End If
        ilEvtIndex = ilEvtIndex + 1
        If ilEvtIndex > ilEndEvtIndex Then
            Exit Sub
        End If
    Loop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mBuildTimeView                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build images for time view     *
'*                                                     *
'*******************************************************
Private Sub mBuildTimeView(ilLogNo As Integer)
    Dim ilLoop As Integer
    Dim slDate As String
    Dim ilRet As Integer
    Dim slStartTime As String
    Dim slEndTime As String
    Dim ilUpper As Integer
    Dim slLog1 As String
    Dim slLog2 As String
    '4/16/11
    Dim ilGsf As Integer
    Dim ilGameNo As Integer
    Dim llDate As Long
    Dim ilDay As Integer
    If ilLogNo = 1 Then
        ReDim tmL1Evt(0 To imLBEvt) As EVTINFO
        imL1Max = 0
        '4/16/11
        If tmVef.sType <> "G" Then
            slDate = smLog1Date
            ilGameNo = 0
        Else
            'ilGsf = lbcGameNo.ItemData(imSelectedGameNo)
            'llDate = tmGsfInfo(ilGsf).lGameDate
            'ilGameNo = tmGsfInfo(ilGsf).iGameNo
            'ilDay = gWeekDayLong(llDate)
            'slDate = Format$(llDate, "m/d/yy")
            ilGameNo = mGetL1GameNo()
            If ilGameNo = 0 Then
                Exit Sub
            End If
            slDate = mGetL1GameDate()
        End If
    Else
        ReDim tmL2Evt(0 To imLBEvt) As EVTINFO
        '4/16/11
        If tmVef.sType <> "G" Then
            slDate = smLog2Date
            ilGameNo = 0
        Else
            'ilGsf = lbcGameNo.ItemData(imSelectedGameNo)
            'llDate = tmGsfInfo(ilGsf).lGameDate
            'ilGameNo = tmGsfInfo(ilGsf).iGameNo
            'ilDay = gWeekDayLong(llDate)
            'slDate = Format$(llDate, "m/d/yy")
            ilGameNo = mGetL2GameNo()
            If ilGameNo = 0 Then
                Exit Sub
            End If
            slDate = mGetL2GameDate()
        End If
    End If
    If Trim$(slDate) = "" Then
        Exit Sub
    End If
    If Not gValidDate(slDate) Then
        Exit Sub
    End If
    slStartTime = "12:00AM"
    slEndTime = "12:00AM"
    For ilLoop = 0 To 14 Step 1
        imEvtType(ilLoop) = False
    Next ilLoop
    'For ilLoop = 1 To 9 Step 1
    imEvtType(1) = True
    imEvtType(2) = True
    For ilLoop = 6 To 9 Step 1
        imEvtType(ilLoop) = True
    Next ilLoop
    If ilLogNo = 1 Then
        '4/16/11
        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmL1Evt())
        mVbcL1MinMax True
    Else    'Log2
        slLog1 = smLog1Date
        slLog2 = smLog2Date
        '4/16/11
        'If gDateValue(slLog1) <> gDateValue(slLog2)Then
        If ((gDateValue(slLog1) <> gDateValue(slLog2)) And (tmVef.sType <> "G")) Or ((edcLog1Dt.Text <> edcLog2Dt.Text) And (tmVef.sType = "G")) Then
            '4/16/11
            ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slDate, slStartTime, slEndTime, ilGameNo, tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), imEvtType(), tmL2Evt())
        Else
            ilUpper = UBound(tmL1Evt)
            ReDim tmL2Evt(0 To ilUpper) As EVTINFO
            'For ilLoop = LBound(tmL2Evt) To ilUpper Step 1
            For ilLoop = imLBEvt To ilUpper Step 1
                tmL2Evt(ilLoop) = tmL1Evt(ilLoop)
            Next ilLoop
        End If
        mVbcL2MinMax True
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mCbcVehChange                   *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process vehicle change         *
'*                                                     *
'*******************************************************
Private Sub mCbcVehChange()
    Dim ilRet As Integer
    Dim slDate As String
    Dim ilVehCode As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilVehSelectedIndex As Integer
    Dim ilLoopCount As Integer
    Dim ilUpdateAllowed As Integer
    If imChgMode = False Then
        imIgnoreDone = True
        imChgMode = True
        ilLoopCount = 0
        tmcClick.Enabled = False 'For safety
        'Do
            imProcVefChg = True 'Avoid double painting of missed area within log2
            imIgnoreGotFocus = True
            Screen.MousePointer = vbHourglass  'Wait
            If ilLoopCount > 0 Then
                If cbcVehicle.ListIndex >= 0 Then
                    cbcVehicle.Text = cbcVehicle.List(cbcVehicle.ListIndex)
                End If
            End If
            ilLoopCount = ilLoopCount + 1
            ilVehSelectedIndex = imVehSelectedIndex
            ' If there are characters in the combobox, look ahead
            '    to see if you can find a match
            If cbcVehicle.Text <> "" Then
                gManLookAhead cbcVehicle, imBSMode, imVehComboBoxIndex
            End If
            'imVehSelectedIndex is used to hold the index
            '   because VB has a bug
            imVehSelectedIndex = cbcVehicle.ListIndex
            '
            'Determine if vehicle is in use
            '
            'Remove this code when vehicle lock removed (except need imVehCode which is set in mGetVehIndex)
            '
            If (imVehSelectedIndex < LBound(tmUserVehicle)) Or (imVehSelectedIndex > UBound(tmUserVehicle)) Then
                Screen.MousePointer = vbDefault    'Default
                cbcVehicle.ListIndex = -1
                imVehSelectedIndex = -1
                imProcVefChg = False 'Avoid double painting of missed area within log2
                imIgnoreGotFocus = False
                imChgMode = False
                imIgnoreDone = False
                Exit Sub
            End If
            slNameCode = tmUserVehicle(imVehSelectedIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilVehCode = Val(slCode)
            ilUpdateAllowed = imUpdateAllowed
            If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
                imUpdateAllowed = False
            Else
                imUpdateAllowed = True
                If Not mOpenTwoHandles(False) Then
                    Screen.MousePointer = vbDefault    'Default
                    cmcDone_Click
                    Exit Sub
                End If
                If Not imOpenOk Then
                    imUpdateAllowed = False
                End If
            End If
            If imUpdateAllowed Then
                If (imVehCode > 0) And (ilVehCode <> imVehCode) Then
                    'ilRet = btrUnlock(hmVef, BTRV_UNLOCK_MULTIPLE)
                    mUnblockDay
                    'Do
                        tmVefSrchKey.iCode = ilVehCode
                        ''ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                        'ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_MULT_NOWAIT, SETFORWRITE)   'Get first record as starting point of extend operation
                        ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                        If (ilRet <> BTRV_ERR_NONE) And (ilRet <> BTRV_ERR_REC_LOCKED) Then
                            Screen.MousePointer = vbDefault    'Default
                            cbcVehicle.ListIndex = ilVehSelectedIndex
                            imVehSelectedIndex = ilVehSelectedIndex
                            imProcVefChg = False 'Avoid double painting of missed area within log2
                            imIgnoreGotFocus = False
                            imChgMode = False
                            imIgnoreDone = False
                            Exit Sub
                        End If
                        'If tmVef.sSpotLock = "Y" Then
                        If ilRet = BTRV_ERR_REC_LOCKED Then
                            Screen.MousePointer = vbDefault    'Default
                            MsgBox "Vehicle in Use- Set to View Mode", vbOKOnly + vbInformation, "Counterpoint"
                            imUpdateAllowed = False
                            DoEvents
                        Else
                            imUpdateAllowed = True
                            'tmVef.sSpotLock = "Y"
                            'ilRet = btrUpdate(hmVef, tmVef, imVefRecLen)
                        End If
                    'Loop While ilRet = BTRV_ERR_CONFLICT
                    'If ilUpdateAllowed Then
                    '    Do
                    '        tmVefSrchKey.iCode = imVehCode
                    '        ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                    '        If ilRet <> BTRV_ERR_NONE Then
                    '            Exit Do
                    '        End If
                    '        tmVef.sSpotLock = " "
                    '        ilRet = btrUpdate(hmVef, tmVef, imVefRecLen)
                    '    Loop While ilRet = BTRV_ERR_CONFLICT
                    'End If
                Else
                    'Do
                        tmVefSrchKey.iCode = ilVehCode
                        ''ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                        'If (imVehCode <= 0) Or (ilVehCode <> imVehCode) Then
                        '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_MULT_NOWAIT, SETFORWRITE)   'Get first record as starting point of extend operation
                        'Else
                        '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_MULT_NOWAIT, SETFORWRITE)   'Get first record as starting point of extend operation
                        'End If
                        ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                        If (ilRet <> BTRV_ERR_NONE) And (ilRet <> BTRV_ERR_REC_LOCKED) Then
                            Screen.MousePointer = vbDefault    'Default
                            cbcVehicle.ListIndex = -1
                            imVehSelectedIndex = -1
                            imProcVefChg = False 'Avoid double painting of missed area within log2
                            imIgnoreGotFocus = False
                            imChgMode = False
                            imIgnoreDone = False
                            Exit Sub
                        End If
                        If (imVehCode <= 0) Or (ilVehCode <> imVehCode) Then
                            If ilRet = BTRV_ERR_REC_LOCKED Then 'tmVef.sSpotLock = "Y" Then
                                Screen.MousePointer = vbDefault    'Default
                                Screen.MousePointer = vbDefault    'Default
                                MsgBox "Vehicle in Use- Set to View Mode", vbOKOnly + vbInformation, "Counterpoint"
                                imUpdateAllowed = False
                                DoEvents
                            End If
                        Else
                            imUpdateAllowed = True
                            'tmVef.sSpotLock = "Y"
                            'ilRet = btrUpdate(hmVef, tmVef, imVefRecLen)
                        End If
                    'Loop While ilRet = BTRV_ERR_CONFLICT
                End If
            Else
                tmVefSrchKey.iCode = ilVehCode
                ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                If ilRet <> BTRV_ERR_NONE Then
                    Screen.MousePointer = vbDefault    'Default
                    cbcVehicle.ListIndex = -1
                    imVehSelectedIndex = -1
                    imProcVefChg = False 'Avoid double painting of missed area within log2
                    imIgnoreGotFocus = False
                    imChgMode = False
                    imIgnoreDone = False
                    Exit Sub
                End If
           End If
            '
            'End of removal
            '
            ' this function uses imVehSelectedIndex to find the vehicles
            '      option table vehicle index and returns imVpfIndex
            imcPrt.Visible = False
            imFirstLog1 = True
            imFirstLog2 = True
            imFirstDate = True
            imFirstMissed = True
            imFirstAv = True
            imFirstNote = True
            smMissedFromOthers = "N"
            mInitDim
            mInitMissedDropdown
            mInitL2MissedDropdown
            pbcAvail.Cls
            pbcLog1.Cls
            pbcLog2.Cls
            'pbcHold.Cls
            pbcContract.Cls
            pbcMissed.Cls
            'pbcAdWorkArea.Cls
            lbcAdvt.ListIndex = -1
            smAdMdSdfMdExtTag = ""
            lmPrevSuDate = 0
            lmNextMoDate = 0
            mGetVehIndex    'This also sets imVehCode
            If imTerminate Then
                imProcVefChg = False 'Avoid double painting of missed area within log2
                imIgnoreGotFocus = False
                imChgMode = False
                imIgnoreDone = False
                Screen.MousePointer = vbDefault    'Default
                Exit Sub
            End If
            If imSeasonChgMode = False Then
                mSeasonPop
            End If
            ilRet = mGetPrgNames()
            lmSdfRecPosHighlight = 0
            imWhereComp1 = -1
            imWhereComp2 = -1
            imShowWhere = False
            'mCntrPop
            smLog1Date = "" 'Don't retain date from previous vehicle any longer
            'plcL1Date.Caption = ""
            edcLog1Dt.Text = ""
            smLog2Date = ""
            smMissedDate = ""
            smAdMdMissedDate = ""
            imLog2Show = 0
            imADMdShow = 0
            'plcL2Date.Caption = ""
            edcLog2Dt.Text = ""
            'plcAdMdDate.Caption = ""
            edcMissedDt.Text = ""
            mDateSpan  'This does not force a paint (imIgnoreChg = True)
            mObtainDayparts
            mVbcAvailMinMax True
            'Leave advertiser selection as is (imSelectedAdvt)
            If lbcAdMdType.ListIndex <> 0 Then
                lbcAdMdType.ListIndex = 0   'Missed by date
            Else
                edcMissedType_Change
            End If
            'imProcVefChg = False 'Avoid double painting of missed area within log2
            If lbcLog2Type.ListIndex <> 0 Then
                lbcLog2Type.ListIndex = 0   'Missed by date
                'lbcAdMdType.ListIndex = 0   'Missed by date
            Else
                edcLog2Type_Change
            End If
            'To aviod painting of missed by date when changing vehicles
            '1.  Moved setting imProcVefChg down changing selection by date
            '2.  Added test in mHbcL2DateChange to not set smMissedDate
            imProcVefChg = False 'Avoid double painting of missed area within log2
            'Force paints so outlines are draw
            If imViewSelect = 1 Then
                mCntrCounts
            End If
            'If rbcTime.Value Then
            DoEvents
            lbcGameNo(0).Visible = False
            lbcGameNo(1).Visible = False
            lbcGameNo(2).Visible = False
            lbcGameNo(3).Visible = False
            If imDW = 0 Then
                imL1OrL2 = 1
                pbcLog1_Paint 'pbcLog1_Paint
                pbcLog2_Paint
                pbcAvail_Paint 'pbcAvail_Paint
                'pbcHold_Paint
                '4/16/11: Add games to Daily view
                If tmVef.sType <> "G" Then
                    slDate = edcLog1Dt.Text
                    If slDate = "" Then
                        If lmEarliestAllowedDate > 0 Then
                            slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
                        Else
                            slDate = Format$(lmNowDatePlus1, "m/d/yy")
                        End If
                    End If
                    'edcLog2Dt.Text = slDate
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    pbcCalendar_Paint   'mBoxCalDate called within paint
                    lacDate.Visible = False
                Else
                    plcAdvtTm.Caption = ""
                    imGameNoComboBoxIndex = -1
                    If imDW = 1 Then
                        imGameNoIndex = 0
                        lbcGameNo(0).Visible = True
                    Else
                        imGameNoIndex = 1
                        lbcGameNo(1).Visible = True
                    End If
                    plcCalendar.Visible = False
                End If
            Else
                imL1OrL2 = 4
                pbcContract_Paint 'pbcContract_Paint
                'pbcAdWorkArea_Paint
                pbcSC.Cls
                pbcSC_Paint
                If tmVef.sType <> "G" Then
                    plcCalendar.Visible = True
                    DoEvents
                    slDate = edcDate.Text
                    If slDate = "" Then
                        If lmEarliestAllowedDate > 0 Then
                            slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
                        Else
                            slDate = gObtainNextMonday(Format$(lmNowDatePlus1, "m/d/yy"))
                        End If
                    End If
                    slDate = gObtainPrevMonday(slDate)
                    'edcLog2Dt.Text = slDate
                    gObtainMonthYear imCalType, slDate, imCalMonth, imCalYear
                    pbcCalendar_Paint   'mBoxCalDate called within paint
                    lacDate.Visible = False
                Else
                    plcAdvtTm.Caption = ""
                    imGameNoComboBoxIndex = -1
                    If imDW = 1 Then
                        imGameNoIndex = 0
                        lbcGameNo(0).Visible = True
                    Else
                        imGameNoIndex = 1
                        lbcGameNo(1).Visible = True
                    End If
                    plcCalendar.Visible = False
                End If
            End If
            mInitMissedDropdown
            mInitL2MissedDropdown
        'Loop While imVehSelectedIndex <> cbcVehicle.ListIndex
        mSetCommands
        pbcToggleRot_Paint
        'If imDW = 0 Then
        '    edcLog1Dt.SetFocus
        'Else
        '    edcDate.SetFocus
        'End If
        '2/7/09:  Added to handle case where focus can't be set
        On Error Resume Next
        If imSeasonChgMode = False Then
            cbcVehicle.SetFocus
        End If
        On Error GoTo 0
        Screen.MousePointer = vbDefault    'Default
        imIgnoreGotFocus = False
        imChgMode = False
        imIgnoreDone = False
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mChgMissedReason                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Change the missed reason of a  *
'*                      missed spot                    *
'*                                                     *
'*******************************************************
Private Sub mChgMissedReason(llSdfRecPos As Long)
    Dim ilRet As Integer
    Dim tlSdf As SDF
    Dim slNameCode As String
    Dim slCode As String
    Do
        ilRet = btrGetDirect(hmSdf, tlSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'        If lbcMissed.ListIndex < 0 Then
'            tlSdf.iMnfMissed = imMnfMissed
'        Else
'            slNameCode = tmMissedCode(lbcMissed.ListIndex).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
'            'Set missed reason
'            ilRet = gParseItem(slNameCode, 2, "\", slCode)
'            If ilRet = CP_MSG_NONE Then
'                tlSdf.iMnfMissed = Val(slCode)
'            Else
'                tlSdf.iMnfMissed = imMnfMissed
'            End If
'        End If
        If (tlSdf.sSchStatus <> "M") And (tlSdf.sSchStatus <> "C") Then
            Exit Sub
        End If
        If imMissedReason < 0 Then
            tlSdf.iMnfMissed = imMnfMissed
        Else
            slNameCode = tmMissedCode(imMissedReason).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
            'Set missed reason
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            If ilRet = CP_MSG_NONE Then
                tlSdf.iMnfMissed = Val(slCode)
            Else
                tlSdf.iMnfMissed = imMnfMissed
            End If
        End If
        tlSdf.sSchStatus = "M"
        tlSdf.iUrfCode = tgUrf(0).iCode
        ilRet = btrUpdate(hmSdf, tlSdf, imSdfRecLen)
    Loop While ilRet = BTRV_ERR_CONFLICT
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mChgMissedReason                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Change the missed reason of a  *
'*                      missed spot                    *
'*                                                     *
'*******************************************************
Private Sub mChgCancelReason(llSdfRecPos As Long)
    Dim ilRet As Integer
    Dim tlSdf As SDF
    Dim slNameCode As String
    Dim slCode As String
    Do
        ilRet = btrGetDirect(hmSdf, tlSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
'        If lbcMissed.ListIndex < 0 Then
'            tlSdf.iMnfMissed = imMnfMissed
'        Else
'            slNameCode = tmMissedCode(lbcMissed.ListIndex).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
'            'Set missed reason
'            ilRet = gParseItem(slNameCode, 2, "\", slCode)
'            If ilRet = CP_MSG_NONE Then
'                tlSdf.iMnfMissed = Val(slCode)
'            Else
'                tlSdf.iMnfMissed = imMnfMissed
'            End If
'        End If
        If (tlSdf.sSchStatus <> "M") And (tlSdf.sSchStatus <> "C") Then
            Exit Sub
        End If
        If imCancelReason < 0 Then
            tlSdf.iMnfMissed = imMnfMissed
        Else
            slNameCode = tmMissedCode(imCancelReason).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
            'Set missed reason
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            If ilRet = CP_MSG_NONE Then
                tlSdf.iMnfMissed = Val(slCode)
            Else
                tlSdf.iMnfMissed = imMnfMissed
            End If
        End If
        ilRet = gSxfDelete(hmSxf, tlSdf, True, True)
        tlSdf.sSchStatus = "C"
        tlSdf.iUrfCode = tgUrf(0).iCode
        ilRet = btrUpdate(hmSdf, tlSdf, imSdfRecLen)
    Loop While ilRet = BTRV_ERR_CONFLICT
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mChgMissedStatus                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Change the missed status to    *
'*                      cancelled                      *
'*                                                     *
'*******************************************************
Private Function mChgMissedStatus(llSdfRecPos As Long) As Integer
    Dim ilRet As Integer
    Dim tlSdf As SDF
    Dim ilLoop As Integer

    Do
        ilRet = btrGetDirect(hmSdf, tlSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
        If ilRet <> BTRV_ERR_NONE Then
            igBtrError = ilRet
            sgErrLoc = "mChgMissedStatus-GetDirect Sdf(1)"
            mChgMissedStatus = False
            Exit Function
        End If
        'tmSRec = tlSdf
        'ilRet = gGetByKeyForUpdate("Sdf", hmSdf, tmSRec)
        'tlSdf = tmSRec
        'If ilRet <> BTRV_ERR_NONE Then
        '    igBtrError = ilRet
        '    sgErrLoc = "mChgMissedStatus-GetByKey Sdf(2)"
        '    mChgMissedStatus = False
        '    Exit Function
        'End If
        If tlSdf.sSchStatus <> "M" Then
            mChgMissedStatus = True
            Exit Function
        End If
        tlSdf.sSchStatus = "C"
        tlSdf.iUrfCode = tgUrf(0).iCode
        ilRet = btrUpdate(hmSdf, tlSdf, imSdfRecLen)
    Loop While ilRet = BTRV_ERR_CONFLICT
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mChgMissedStatus-Update Sdf(3)"
        mChgMissedStatus = False
        Exit Function
    End If
    'Clear internal files
    'For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
    For ilLoop = imLBSdfMdExt To UBound(tmSdfMdExt) Step 1
        If tmSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
            mCompressMd ilLoop, tmSdfMdExt()
            Exit For
        End If
    Next ilLoop
    'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) Step 1
    For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) Step 1
        If tmAdMdSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
            mCompressMd ilLoop, tmAdMdSdfMdExt()
            Exit For
        End If
    Next ilLoop
    'For ilLoop = LBound(tmWAMdExt) To UBound(tmWAMdExt) Step 1
    For ilLoop = imLBSdfMdExt To UBound(tmWAMdExt) Step 1
        If tmWAMdExt(ilLoop).lRecPos = llSdfRecPos Then
            mCompressMd ilLoop, tmWAMdExt()
            Exit For
        End If
    Next ilLoop
    mVbcHoldMinMax False
    mVbcL1MinMax False
    mVbcL2MinMax False
    mMissedSummary imDW
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
    mChgMissedStatus = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mClearDrag                      *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Clear drag when drop on illegal*
'*                      object                         *
'*                                                     *
'*******************************************************
Private Sub mClearDrag(ilForcePaint As Integer)
    Dim ilDragSrce As Integer

    mUnblockDay
    smOverbookMode = "N"
    imShowWhere = False
    tmcScroll.Enabled = False   'incase dropped within scroll area
    mSetShow imBoxNo
    mClearSpotInfo ilForcePaint
    ilDragSrce = imDragSrce
    If imDragSrce = DRAGLOG1 Then
        If (imDragRowNoSrce >= vbcLog1.Value) And (imDragRowNoSrce <= (vbcLog1.Value + vbcLog1.LargeChange)) Then
            gInvertArea pbcLog1, CInt(tmL1Ctrls(1).fBoxX) \ 15, CInt(tmL1Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog1.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL1Ctrls(1).fBoxW) \ 15, CInt(tmL1Ctrls(1).fBoxH) \ 15
        End If
        'ilCompRow = vbcLog1.LargeChange + 1
        'If imL1Max > ilCompRow Then
        '    ilMaxRow = ilCompRow
        'Else
        '    ilMaxRow = imL1Max
        'End If
        'For ilRow = 1 To ilMaxRow Step 1
        '    If imDragRowNoSrce = ilRow + vbcLog1.Value - 1 Then
        '        gInvertArea pbcLog1, CInt(tmL1Ctrls(1).fBoxX) \ 15, CInt(tmL1Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog1.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL1Ctrls(1).fBoxW) \ 15, CInt(tmL1Ctrls(1).fBoxH) \ 15
        '        Exit For
        '    End If
        'Next ilRow
    ElseIf imDragSrce = DRAGLOG2 Then
        If (imDragRowNoSrce >= vbcLog2.Value) And (imDragRowNoSrce <= (vbcLog2.Value + vbcLog2.LargeChange)) Then
            If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
                If imDragRowNoSrce < UBound(tmSdfMdExt) Then
                    gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                End If
            Else
                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
            End If
        End If
        'ilCompRow = vbcLog2.LargeChange + 1
        'If imL2Max > ilCompRow Then
        '    ilMaxRow = ilCompRow
        'Else
        '    ilMaxRow = imL2Max
        'End If
        'For ilRow = 1 To ilMaxRow Step 1
        '    If imDragRowNoSrce = ilRow + vbcLog2.Value - 1 Then
        '        gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
        '        Exit For
        '    End If
        'Next ilRow
    ElseIf imDragSrce = DRAGHOLD Then
        If (imDragRowNoSrce >= vbcHold.Value) And (imDragRowNoSrce <= (vbcHold.Value + vbcHold.LargeChange)) Then
            If imDragRowNoSrce < UBound(tmWAMdExt) Then
                gInvertArea pbcHold, CInt(tmWACtrls(1).fBoxX) \ 15, CInt(tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcHold.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmWACtrls(1).fBoxW) \ 15, CInt(tmWACtrls(1).fBoxH) \ 15
            End If
        End If
        'ilCompRow = vbcHold.LargeChange + 1
        'If UBound(tmWAMdExt) - 1 > ilCompRow Then
        '    ilMaxRow = ilCompRow
        'Else
        '    ilMaxRow = UBound(tmWAMdExt) - 1
        'End If
        'For ilRow = 1 To ilMaxRow Step 1
        '    If imDragRowNoSrce = ilRow + vbcHold.Value - 1 Then
         '       gInvertArea pbcHold, CInt(tmWACtrls(1).fBoxX) \ 15, CInt(tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcHold.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmWACtrls(1).fBoxW) \ 15, CInt(tmWACtrls(1).fBoxH) \ 15
        '        Exit For
        '    End If
        'Next ilRow
    ElseIf imDragSrce = DRAGCONTRACT Then
        If (imDragRowNoSrce >= vbcContract.Value) And (imDragRowNoSrce <= (vbcContract.Value + vbcContract.LargeChange)) Then
            If (imDragColNoSrce >= imLBACtrls) And (imDragColNoSrce < UBound(tmACtrls)) Then
                gInvertArea pbcContract, CInt(tmACtrls(imDragColNoSrce).fBoxX) \ 15, CInt(tmACtrls(imDragColNoSrce).fBoxY + (imDragRowNoSrce - vbcContract.Value + 1) * (fgBoxGridH + 15)) \ 15, CInt(tmACtrls(imDragColNoSrce).fBoxW) \ 15, CInt(tmACtrls(imDragColNoSrce).fBoxH) \ 15
            End If
        End If
        'ilCompRow = vbcContract.LargeChange + 1
        'If imL1Max > ilCompRow Then
        '    ilMaxRow = ilCompRow
        'Else
        '    ilMaxRow = imAMax
        'End If
        'For ilRow = 1 To ilMaxRow Step 1
        '    If imDragRowNoSrce = ilRow + vbcContract.Value - 1 Then
        '        gInvertArea pbcContract, CInt(tmACtrls(imDragColNoSrce).fBoxX) \ 15, CInt(tmACtrls(imDragColNoSrce).fBoxY + (imDragRowNoSrce - vbcContract.Value + 1) * (fgBoxGridH + 15)) \ 15, CInt(tmACtrls(imDragColNoSrce).fBoxW) \ 15, CInt(tmACtrls(imDragColNoSrce).fBoxH) \ 15
        '        Exit For
        '    End If
        'Next ilRow
    ElseIf imDragSrce = DRAGADMD Then
        If (imDragRowNoSrce >= vbcMissed.Value) And (imDragRowNoSrce <= (vbcMissed.Value + vbcMissed.LargeChange)) Then
            If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                If imDragRowNoSrce < UBound(tmAdMdSdfMdExt) Then
                    gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                End If
            Else
                gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
            End If
        End If
    ElseIf imDragSrce = DRAGWORKAREA Then
        If (imDragRowNoSrce >= vbcAdWorkArea.Value) And (imDragRowNoSrce <= (vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange)) Then
            If imDragRowNoSrce < UBound(tmWAMdExt) Then
                gInvertArea pbcAdWorkArea, CInt(tmWACtrls(1).fBoxX) \ 15, CInt(tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcAdWorkArea.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmWACtrls(1).fBoxW) \ 15, CInt(tmWACtrls(1).fBoxH) \ 15
            End If
        End If
    End If
    imcTrash.Picture = IconTraf!imcBoxClosed.Picture
    imcTrash.Enabled = False
    imcTrash.Visible = False
    'If (Trim$(plcDate.Caption) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
    ''If (Trim$(edcWkDt.Text) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
    If (Trim$(edcDate.Text) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
        imcPrt.Visible = True
    Else
        imcPrt.Visible = False
    End If
    imDragRowNoSrce = -1
    imDragSrce = -1
    imDragScroll = -1
    smDragSrcePrgName = ""
    smDragDestPrgName = ""
    mShowPrgNames
    If ilDragSrce = DRAGLOG1 Then
        pbcLog1.Cls
        pbcLog1_Paint
    ElseIf ilDragSrce = DRAGLOG2 Then
        pbcLog2.Cls
        pbcLog2_Paint
    ElseIf ilDragSrce = DRAGHOLD Then
        pbcHold.Cls
        pbcHold_Paint
    ElseIf ilDragSrce = DRAGCONTRACT Then
        pbcContract.Cls
        pbcContract_Paint
    ElseIf ilDragSrce = DRAGADMD Then
        pbcMissed.Cls
        pbcMissed_Paint
    ElseIf ilDragSrce = DRAGWORKAREA Then
        pbcAdWorkArea.Cls
        pbcAdWorkArea_Paint
    End If
    mSetCommands
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClearSpotInfo                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Clear drag when drop on illegal*
'*                      object                         *
'*                                                     *
'*******************************************************
Private Sub mClearSpotInfo(ilForcePaint As Integer)
    imDblClick = 0
    imDblClickMode = 0
    plcConflictInfo.Visible = False
    If lmSdfRecPosHighlight <> 0 Then
        lmSdfRecPosHighlight = 0
        imWhereComp1 = -1
        imWhereComp2 = -1
        imShowWhere = False
        If ilForcePaint Then
            pbcContract.Cls
            pbcContract_Paint
            pbcLog1.Cls
            pbcLog1_Paint
            pbcLog2.Cls
            pbcLog2_Paint
        End If
    End If
    'If lmL1SdfRecPosHighlight <> 0 Then
    '    lmL1SdfRecPosHighlight = 0
    '    If ilForcePaint Then
    '        pbcLog1.Cls
    '        pbcLog1_Paint
    '    End If
    'End If
    'If lmL2SdfRecPosHighlight <> 0 Then
    '    lmL2SdfRecPosHighlight = 0
    '    If ilForcePaint Then
    '        pbcLog2.Cls
     '       pbcLog2_Paint
    '    End If
    'End If
    mSetCommands
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClickHold                      *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process single click on Avail  *
'*                      area                           *
'*                                                     *
'*******************************************************
Private Sub mClickAvail()
    tmcDblClick.Enabled = False
    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcAvail_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcAvail_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            imDragButton = 1
            tmcDrag_Timer
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    Screen.MousePointer = vbDefault
End Sub
Private Sub mClickContract()
    Dim ilBox As Integer
    Dim ilMaxRow As Integer
    Dim ilCompRow As Integer
    Dim ilRow As Integer
    Dim ilRowNo As Integer
    Dim ilLoop As Integer
    Dim ilSvHighlight As Integer
    Dim llSvCntrHighlight As Long
    Dim llSvSdfHighlight As Long
    Dim llSvFeedHighlight As Long
    Dim slSvNetworkHighlight As String
    Dim slDate As String
    Dim llDate As Long
    Dim ilSpotNo As Integer
    Dim ilFound As Integer
    Dim ilRet As Integer
    Dim ilGameNo As Integer
    Dim ilMax As Integer

    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcContract_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcContract_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            imDragButton = 1
            tmcDrag_Timer
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    ilSvHighlight = imHighlightAdvtCode
    llSvCntrHighlight = lmHighlightCntrCode
    llSvFeedHighlight = lmHighlightFeedCode
    llSvSdfHighlight = lmSdfRecPosHighlight
    slSvNetworkHighlight = smHighlightSplitNetwork
    mClearDrag True
    imRowRightMouse = -1
    imColRightMouse = -1
    DoEvents
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then   'Or (Not imUpdateAllowed) Then  'After Drop but before finished with drop
        Exit Sub
    End If
    If imMouseUpButton = 2 Then
        Exit Sub
    End If
    ilFound = False
    Screen.MousePointer = vbHourglass
    If lmSelectedChfCode = -1 Then
        ilCompRow = vbcContract.LargeChange + 1
        If UBound(tmMoEvt) - 1 > ilCompRow Then 'All days have same number of events
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = UBound(tmMoEvt) - 1
            If tmVef.sType = "G" Then
                If UBound(tmTuEvt) - 1 > ilMaxRow Then
                    ilMaxRow = UBound(tmTuEvt) - 1
                End If
                If UBound(tmWeEvt) - 1 > ilMaxRow Then
                    ilMaxRow = UBound(tmWeEvt) - 1
                End If
                If UBound(tmThEvt) - 1 > ilMaxRow Then
                    ilMaxRow = UBound(tmThEvt) - 1
                End If
                If UBound(tmFrEvt) - 1 > ilMaxRow Then
                    ilMaxRow = UBound(tmFrEvt) - 1
                End If
                If UBound(tmSaEvt) - 1 > ilMaxRow Then
                    ilMaxRow = UBound(tmSaEvt) - 1
                End If
                If UBound(tmSuEvt) - 1 > ilMaxRow Then
                    ilMaxRow = UBound(tmSuEvt) - 1
                End If
            End If
        End If
        ' Look through all rows
        imHighlightAdvtCode = -1
        lmHighlightCntrCode = -1
        lmHighlightFeedCode = -1
        smHighlightSplitNetwork = ""
        lmCountChfCode = -1
        imCountLineNo = -1
        lmCountFsfCode = -1
        lmSdfRecPosHighlight = 0
        imWhereComp1 = -1
        imWhereComp2 = -1
        imShowWhere = False
        For ilRow = 1 To ilMaxRow Step 1
            ' Look through all columns
            For ilBox = imLBACtrls To UBound(tmACtrls) Step 1
                ' See if this is the column
                If (fmMouseUpX >= tmACtrls(ilBox).fBoxX) And (fmMouseUpX <= (tmACtrls(ilBox).fBoxX + tmACtrls(ilBox).fBoxW)) Then
                    ' See of this is the row
                    If (fmMouseUpY >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(ilBox).fBoxY)) And (fmMouseUpY <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(ilBox).fBoxY + tmACtrls(ilBox).fBoxH)) Then
                        ilRowNo = ilRow + vbcContract.Value - 1
                        'slDate = edcDate.Text   'plcDate.Caption
                        'llDate = gDateValue(slDate)
                        'slDate = Format$(llDate + ilBox - 1, "m/d/yy")
                        mGetEdcDate ilBox - 1
                        slDate = smEdcDate
                        llDate = lmEdcDate
                        ilGameNo = imEdcGameNo
                        ilFound = True
                        Select Case ilBox
                            Case 1  'Monday
'                                If tmMoEvt(tmMoRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmMoEvt(tmMoRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmMoEvt(), ilRowNo)
                                If ilRowNo < UBound(tmMoEvt) Then
                                    If tmMoEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmMoEvt(ilRowNo)
                                    End If
                                End If
                            Case 2  'Tuesday
'                                If tmTuEvt(tmTuRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmTuEvt(tmTuRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmTuEvt(), ilRowNo)
                                If ilRowNo < UBound(tmTuEvt) Then
                                    If tmTuEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmTuEvt(ilRowNo)
                                    End If
                                End If
                            Case 3  'Wednesday
'                                If tmWeEvt(tmWeRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmWeEvt(tmWeRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmWeEvt(), ilRowNo)
                                If ilRowNo < UBound(tmWeEvt) Then
                                    If tmWeEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmWeEvt(ilRowNo)
                                    End If
                                End If
                            Case 4  'Thursday
'                                If tmThEvt(tmThRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmThEvt(tmThRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmThEvt(), ilRowNo)
                                If ilRowNo < UBound(tmThEvt) Then
                                    If tmThEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmThEvt(ilRowNo)
                                    End If
                                End If
                            Case 5  'Friday
'                                If tmFrEvt(tmFrRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmFrEvt(tmFrRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmFrEvt(), ilRowNo)
                                If ilRowNo < UBound(tmFrEvt) Then
                                    If tmFrEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmFrEvt(ilRowNo)
                                    End If
                                End If
                            Case 6  'Saturday
'                                If tmSaEvt(tmSaRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmSaEvt(tmSaRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmSaEvt(), ilRowNo)
                                If ilRowNo < UBound(tmSaEvt) Then
                                    If tmSaEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmSaEvt(ilRowNo)
                                    End If
                                End If
                            Case 7  'Sunday
'                                If tmSuEvt(tmSuRowIndex(ilRow)).iType = 100 Then    'Spot
'                                    imHighLightAdvtCode = tmSuEvt(tmSuRowIndex(ilRow)).lInfo And &H7FFF
                                ilRowNo = mRemapRow(tmSuEvt(), ilRowNo)
                                If ilRowNo < UBound(tmSuEvt) Then
                                    If tmSuEvt(ilRowNo).iType = 100 Then    'Spot
                                        mSetHighlights tmSuEvt(ilRowNo)
                                    End If
                                End If
                        End Select
                        Exit For
                    End If
                End If
            Next ilBox
            If ilFound Then
                Exit For
            End If
        Next ilRow
        If ilFound Then
            If llSvSdfHighlight = lmSdfRecPosHighlight Then
                lmSdfRecPosHighlight = 0
                imWhereComp1 = -1
                imWhereComp2 = -1
                imShowWhere = False
                lmCountChfCode = 0  'Contains contract code number
                imCountLineNo = 0
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                lbcPackageInfo(1).Visible = False
                lbcPackageInfo(0).Visible = False
                plcCalendar.Visible = False
                lbcGameList.Visible = False
                imNoSpotInfo = 0
                mSetCommands
                DoEvents
                pbcContract.Cls
                pbcContract_Paint
                pbcMissed.Cls
                pbcMissed_Paint
                pbcAdWorkArea.Cls
                pbcAdWorkArea_Paint
            End If
            If (llSvCntrHighlight <> lmHighlightCntrCode) Or (llSvFeedHighlight <> lmHighlightFeedCode) Or (ilSvHighlight <> imHighlightAdvtCode) Or (llSvSdfHighlight <> lmSdfRecPosHighlight) Or (slSvNetworkHighlight <> smHighlightSplitNetwork) Then
                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                mObtainSpotInfo lmCountChfCode, imCountLineNo, lmCountFsfCode, slDate, tmSpotInfoCtrls()
                pbcContract.Cls
                pbcContract_Paint
                pbcMissed.Cls
                pbcMissed_Paint
                pbcAdWorkArea.Cls
                pbcAdWorkArea_Paint
                Screen.MousePointer = vbHourglass
            Else
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                lbcPackageInfo(1).Visible = False
                lbcPackageInfo(0).Visible = False
                plcCalendar.Visible = False
                lbcGameList.Visible = False
                imNoSpotInfo = 0
                mSetCommands
            End If
            DoEvents
            If ((imToggleRot = 1) Or (imToggleRot = 2) Or (imToggleRot = 3)) And (lmSelectedChfCode = -1) Then
                mCntrCounts
                Screen.MousePointer = vbHourglass
            End If
            pbcDailyRot.Cls
            pbcHourRot.Cls
            pbcDailyRot_Paint
            pbcHourRot_Paint
        End If
        Screen.MousePointer = vbDefault
    Else
        ilMaxRow = vbcContract.LargeChange + 1
        For ilRow = 1 To ilMaxRow Step 1
            ' Look through all columns
            For ilBox = imLBACtrls To UBound(tmACtrls) Step 1
                ' See if this is the column
                If (fmMouseUpX >= tmACtrls(ilBox).fBoxX) And (fmMouseUpX <= (tmACtrls(ilBox).fBoxX + tmACtrls(ilBox).fBoxW)) Then
                    ' See of this is the row
                    If (fmMouseUpY >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(ilBox).fBoxY)) And (fmMouseUpY <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(ilBox).fBoxY + tmACtrls(ilBox).fBoxH)) Then
                        ilRowNo = ilRow + vbcContract.Value - 1
                        If ckcShowGhost.Value = vbUnchecked Then
                            Select Case ilBox
                                Case 1  'Monday
                                    ilRowNo = mRemapRow(tmMoEvt(), ilRowNo)
                                Case 2  'Tuesday
                                    ilRowNo = mRemapRow(tmTuEvt(), ilRowNo)
                                Case 3  'Wednesday
                                    ilRowNo = mRemapRow(tmWeEvt(), ilRowNo)
                                Case 4  'Thursday
                                    ilRowNo = mRemapRow(tmThEvt(), ilRowNo)
                                Case 5  'Friday
                                    ilRowNo = mRemapRow(tmFrEvt(), ilRowNo)
                                Case 6  'Saturday
                                    ilRowNo = mRemapRow(tmSaEvt(), ilRowNo)
                                Case 7  'Sunday
                                    ilRowNo = mRemapRow(tmSuEvt(), ilRowNo)
                            End Select
                        End If
                        'slDate = edcDate.Text   'plcDate.Caption
                        'llDate = gDateValue(slDate)
                        'slDate = Format$(llDate + ilBox - 1, "m/d/yy")
                        mGetEdcDate imDragColNoDest - 1
                        slDate = smEdcDate
                        llDate = lmEdcDate
                        ilGameNo = imEdcGameNo
                        ilSpotNo = 0
                        ilMax = UBound(tmMoEvt) - 1
                        If tmVef.sType = "G" Then
                            If UBound(tmTuEvt) - 1 > ilMax Then
                                ilMax = UBound(tmTuEvt) - 1
                            End If
                            If UBound(tmWeEvt) - 1 > ilMax Then
                                ilMax = UBound(tmWeEvt) - 1
                            End If
                            If UBound(tmThEvt) - 1 > ilMax Then
                                ilMax = UBound(tmThEvt) - 1
                            End If
                            If UBound(tmFrEvt) - 1 > ilMax Then
                                ilMax = UBound(tmFrEvt) - 1
                            End If
                            If UBound(tmSaEvt) - 1 > ilMax Then
                                ilMax = UBound(tmSaEvt) - 1
                            End If
                            If UBound(tmSuEvt) - 1 > ilMax Then
                                ilMax = UBound(tmSuEvt) - 1
                            End If
                        End If
                        'For ilLoop = LBound(tmMoEvt) To ilMax - 1 Step 1
                        For ilLoop = imLBEvt To ilMax - 1 Step 1
                            Select Case ilBox
                                Case 1  'Monday
                                    If ilLoop < UBound(tmMoEvt) Then
                                        If (tmMoEvt(ilLoop).iType = 100) And (tmMoEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmMoEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Case 2  'Tuesday
                                    If ilLoop < UBound(tmTuEvt) Then
                                        If (tmTuEvt(ilLoop).iType = 100) And (tmTuEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmTuEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Case 3  'Wednesday
                                    If ilLoop < UBound(tmWeEvt) Then
                                        If (tmWeEvt(ilLoop).iType = 100) And (tmWeEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmWeEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Case 4  'Thursday
                                    If ilLoop < UBound(tmThEvt) Then
                                        If (tmThEvt(ilLoop).iType = 100) And (tmThEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmThEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Case 5  'Friday
                                    If ilLoop < UBound(tmFrEvt) Then
                                        If (tmFrEvt(ilLoop).iType = 100) And (tmFrEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmFrEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Case 6  'Saturday
                                    If ilLoop < UBound(tmSaEvt) Then
                                        If (tmSaEvt(ilLoop).iType = 100) And (tmSaEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmSaEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                Case 7  'Sunday
                                    If ilLoop < UBound(tmSuEvt) Then
                                        If (tmSuEvt(ilLoop).iType = 100) And (tmSuEvt(ilLoop).lLen = lmSelectedChfCode) Then    'Spot
                                            ilSpotNo = ilSpotNo + 1
                                            If ilSpotNo = ilRowNo Then
                                                mSetHighlights tmSuEvt(ilLoop)
                                                ilFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                            End Select
                        Next ilLoop
                        If ilFound Then
                            Exit For
                        End If
                    End If
                End If
            Next ilBox
            If ilFound Then
                Exit For
            End If
        Next ilRow
        If ilFound Then
            If llSvSdfHighlight = lmSdfRecPosHighlight Then
                lmSdfRecPosHighlight = 0
                imWhereComp1 = -1
                imWhereComp2 = -1
                imShowWhere = False
                lmCountChfCode = 0  'Contains contract code number
                imCountLineNo = 0
                lmCountFsfCode = 0
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                lbcPackageInfo(1).Visible = False
                lbcPackageInfo(0).Visible = False
                plcCalendar.Visible = False
                lbcGameList.Visible = False
                imNoSpotInfo = 0
                mSetCommands
            End If
            If (llSvCntrHighlight <> lmHighlightCntrCode) Or (llSvFeedHighlight <> lmHighlightFeedCode) Or (ilSvHighlight <> imHighlightAdvtCode) Or (llSvSdfHighlight <> lmSdfRecPosHighlight) Or (slSvNetworkHighlight <> smHighlightSplitNetwork) Then
                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                mObtainSpotInfo lmCountChfCode, imCountLineNo, lmCountFsfCode, slDate, tmSpotInfoCtrls()
                pbcContract.Cls
                pbcContract_Paint
                pbcMissed.Cls
                pbcMissed_Paint
                Screen.MousePointer = vbHourglass
            Else
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                lbcPackageInfo(1).Visible = False
                lbcPackageInfo(0).Visible = False
                plcCalendar.Visible = False
                lbcGameList.Visible = False
                imNoSpotInfo = 0
                mSetCommands
            End If
            'If ((imToggleRot = 1) Or (imToggleRot = 2)) And (lmSelectedChfCode = -1) Then
            '    mCntrCounts
            'End If
            'pbcDailyRot.Cls
            'pbcHourRot.Cls
            'pbcDailyRot_Paint
            'pbcHourRot_Paint
        End If
        Screen.MousePointer = vbDefault
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClickHold                      *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process single click on Hold   *
'*                      area                           *
'*                                                     *
'*******************************************************
Private Sub mClickHold()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim slDate As String
    Dim ilRet As Integer
    tmcDblClick.Enabled = False
    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcHold_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcHold_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            imDragButton = 1
            tmcDrag_Timer
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then   'Or (Not imUpdateAllowed) Then  'After Drop but before finished with drop
        Exit Sub
    End If
    If imMouseUpButton = 2 Then
        Exit Sub
    End If
    ilCompRow = vbcHold.LargeChange + 1
    If UBound(tmWAMdExt) - 1 > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = UBound(tmWAMdExt) - 1
    End If
    For ilRow = 1 To ilMaxRow Step 1
        If (fmMouseUpY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (fmMouseUpY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
            'Test if row number can be dragged
            ilIndex = ilRow + vbcHold.Value - 1
            If (ilIndex < LBound(tmWAMdExt)) Or (ilIndex > UBound(tmWAMdExt)) Then
                Exit For
            End If
            If lmSdfRecPosHighlight <> tmWAMdExt(ilIndex).lRecPos Then
                lmSdfRecPosHighlight = tmWAMdExt(ilIndex).lRecPos
                gUnpackDate tmWAMdExt(ilIndex).iDate(0), tmWAMdExt(ilIndex).iDate(1), slDate
                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                mObtainSpotInfo tmWAMdExt(ilIndex).lChfCode, tmWAMdExt(ilIndex).iLineNo, tmWAMdExt(ilIndex).lFsfCode, slDate, tmSpotInfoCtrls()
                imWhereComp1 = tmChf.iMnfComp(0)
                imWhereComp2 = tmChf.iMnfComp(1)
                pbcHold.Cls
                pbcHold_Paint
                pbcAvail.Cls
                pbcAvail_Paint
                mSetCommands
            Else
                'Clear
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                lbcPackageInfo(1).Visible = False
                lbcPackageInfo(0).Visible = False
                plcCalendar.Visible = False
                lbcGameList.Visible = False
                imNoSpotInfo = 0
                lmSdfRecPosHighlight = 0
                imWhereComp1 = -1
                imWhereComp2 = -1
                imShowWhere = False
                pbcHold.Cls
                pbcHold_Paint
                pbcAvail.Cls
                pbcAvail_Paint
                mSetCommands
            End If
        End If
    Next ilRow
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClickLog1                      *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process single click on Log1   *
'*                      area                           *
'*                                                     *
'*******************************************************
Private Sub mClickLog1()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim ilRet As Integer
    Dim ilSvHighlight As Integer
    Dim llSvCntrHighlight As Long
    Dim llSvFeedHighlight As Long
    Dim llSvSdfHighlight As Long
    Dim slSvNetworkHighlight As String

    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcLog1_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcLog1_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            imDragButton = 1
            tmcDrag_Timer
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    mClearDrag True
    imRowRightMouse = -1
    DoEvents
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then   'Or (Not imUpdateAllowed) Then  'After Drop but before finished with drop
        Exit Sub
    End If
    If imMouseUpButton = 2 Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ilSvHighlight = imHighlightAdvtCode
    llSvCntrHighlight = lmHighlightCntrCode
    llSvFeedHighlight = lmHighlightFeedCode
    llSvSdfHighlight = lmSdfRecPosHighlight
    slSvNetworkHighlight = smHighlightSplitNetwork
    ilCompRow = vbcLog1.LargeChange + 1
    If imL1Max > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = imL1Max
    End If
    For ilRow = 1 To ilMaxRow Step 1
        If (fmMouseUpY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY)) And (fmMouseUpY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + tmL1Ctrls(1).fBoxH)) Then
            'Test if row number can be dragged
            ilIndex = tmL1RowIndex(ilRow)
            'If (ilIndex < LBound(tmL1Evt)) Or (ilIndex > UBound(tmL1Evt)) Then
            If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmL1Evt)) Then
                Exit For
            End If
            If tmL1Evt(ilIndex).iType = 100 Then    'Highlight spot
                If lmSdfRecPosHighlight <> tmL1Evt(ilIndex).lTime Then
                    lmSdfRecPosHighlight = tmL1Evt(ilIndex).lTime
                    imWhereComp1 = tmL1Evt(ilIndex).iMnfComp1
                    imWhereComp2 = tmL1Evt(ilIndex).iMnfComp2
                    lmHighlightCntrCode = tmL1Evt(ilIndex).lLen
                    lmHighlightFeedCode = tmL1Evt(ilIndex).lFsfCode
                    imHighlightAdvtCode = tmL1Evt(ilIndex).lInfo And &H7FFF
                    smHighlightSplitNetwork = ""
                    If (tmL1Evt(ilIndex).iLineInfo And &H800) = &H800 Then
                        smHighlightSplitNetwork = "P"
                    ElseIf (tmL1Evt(ilIndex).iLineInfo And &H1000) = &H1000 Then
                        smHighlightSplitNetwork = "S"
                    End If
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                    mObtainSpotInfo tmL1Evt(ilIndex).lLen, tmL1Evt(ilIndex).iLineNo, tmL1Evt(ilIndex).lFsfCode, smLog1Date, tmSpotInfoCtrls()
                    pbcLog1.Cls
                    pbcLog1_Paint
                    pbcHold.Cls
                    pbcHold_Paint
                    pbcAvail.Cls
                    pbcAvail_Paint
                    mSetCommands
                Else
                    pbcSpotInfo(1).Visible = False
                    pbcSpotInfo(0).Visible = False
                    lbcPackageInfo(1).Visible = False
                    lbcPackageInfo(0).Visible = False
                    plcCalendar.Visible = False
                    lbcGameList.Visible = False
                    imNoSpotInfo = 0
                    'lmL1SdfRecPosHighlight = 0
                    lmSdfRecPosHighlight = 0
                    lmHighlightCntrCode = 0
                    lmHighlightFeedCode = 0
                    imHighlightAdvtCode = 0
                    imWhereComp1 = -1
                    imWhereComp2 = -1
                    smHighlightSplitNetwork = ""
                    imShowWhere = False
                    pbcLog1.Cls
                    pbcLog1_Paint
                    pbcHold.Cls
                    pbcHold_Paint
                    pbcAvail.Cls
                    pbcAvail_Paint
                    mSetCommands
                End If
            End If
        End If
    Next ilRow
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClickLog2                      *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process single click on Log2   *
'*                      area                           *
'*                                                     *
'*******************************************************
Private Sub mClickLog2()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim slDate As String
    Dim ilRet As Integer
    Dim ilSvHighlight As Integer
    Dim llSvCntrHighlight As Long
    Dim llSvFeedHighlight As Long
    Dim llSvSdfHighlight As Long
    Dim slSvNetworkHighlight As String
    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcLog2_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcLog2_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            'Right mouse and Remnant; DR; Per Inquiry; PSA; Promo or Extra don't allow fill
            If (imDragButton = 2) And ((imLog2Type >= 5) And (imLog2Type <= 9)) Then
            Else
                imDragButton = 1
                tmcDrag_Timer
            End If
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    mClearDrag True
    imRowRightMouse = -1
    DoEvents
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then   'Or (Not imUpdateAllowed) Then  'After Drop but before finished with drop
        Exit Sub
    End If
    If imMouseUpButton = 2 Then
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ilSvHighlight = imHighlightAdvtCode
    llSvCntrHighlight = lmHighlightCntrCode
    llSvFeedHighlight = lmHighlightFeedCode
    llSvSdfHighlight = lmSdfRecPosHighlight
    slSvNetworkHighlight = smHighlightSplitNetwork
    If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed by advertiser
        imHighlightAdvtCode = -1
        lmHighlightFeedCode = -1
        lmHighlightCntrCode = -1
        smHighlightSplitNetwork = ""
    End If
    ilCompRow = vbcLog2.LargeChange + 1
    If imL2Max > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = imL2Max
    End If
    For ilRow = 1 To ilMaxRow Step 1
        If (fmMouseUpY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmMouseUpY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
            'Test if row number can be dragged
            If imLog2Type = 4 Then
                ilIndex = tmL2RowIndex(ilRow)
                'If (ilIndex < LBound(tmL2Evt)) Or (ilIndex > UBound(tmL2Evt)) Then
                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmL2Evt)) Then
                    Exit For
                End If
                If tmL2Evt(ilIndex).iType = 100 Then    'Highlight spot
                    'If lmL2SdfRecPosHighlight <> tmL2Evt(ilIndex).lTime Then
                        'lmL2SdfRecPosHighlight = tmL2Evt(ilIndex).lTime
                    If lmSdfRecPosHighlight <> tmL2Evt(ilIndex).lTime Then
                        lmSdfRecPosHighlight = tmL2Evt(ilIndex).lTime
                        imWhereComp1 = tmL2Evt(ilIndex).iMnfComp1
                        imWhereComp2 = tmL2Evt(ilIndex).iMnfComp2
                        lmHighlightCntrCode = tmL2Evt(ilIndex).lLen
                        lmHighlightFeedCode = tmL2Evt(ilIndex).lFsfCode
                        imHighlightAdvtCode = tmL2Evt(ilIndex).lInfo And &H7FFF
                        smHighlightSplitNetwork = ""
                        If (tmL2Evt(ilIndex).iLineInfo And &H800) = &H800 Then
                            smHighlightSplitNetwork = "P"
                        ElseIf (tmL2Evt(ilIndex).iLineInfo And &H1000) = &H1000 Then
                            smHighlightSplitNetwork = "S"
                        End If
                        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                        mObtainSpotInfo tmL2Evt(ilIndex).lLen, tmL2Evt(ilIndex).iLineNo, tmL2Evt(ilIndex).lFsfCode, smLog2Date, tmSpotInfoCtrls()
                        pbcLog2.Cls
                        pbcLog2_Paint
                        pbcHold.Cls
                        pbcHold_Paint
                        pbcAvail.Cls
                        pbcAvail_Paint
                        mSetCommands
                    Else
                        pbcSpotInfo(1).Visible = False
                        pbcSpotInfo(0).Visible = False
                        lbcPackageInfo(1).Visible = False
                        lbcPackageInfo(0).Visible = False
                        plcCalendar.Visible = False
                        lbcGameList.Visible = False
                        imNoSpotInfo = 0
                        'lmL2SdfRecPosHighlight = 0
                        lmSdfRecPosHighlight = 0
                        lmHighlightCntrCode = 0
                        lmHighlightFeedCode = 0
                        imHighlightAdvtCode = 0
                        imWhereComp1 = -1
                        imWhereComp2 = -1
                        smHighlightSplitNetwork = ""
                        imShowWhere = False
                        pbcLog2.Cls
                        pbcLog2_Paint
                        pbcHold.Cls
                        pbcHold_Paint
                        pbcAvail.Cls
                        pbcAvail_Paint
                        mSetCommands
                    End If
                End If
            ElseIf (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
                ilIndex = ilRow + vbcLog2.Value - 1
                'If (ilIndex < LBound(tmSdfMdExt)) Or (ilIndex > UBound(tmSdfMdExt)) Then
                If (ilIndex < imLBSdfMdExt) Or (ilIndex > UBound(tmSdfMdExt)) Then
                    Exit For
                End If
                If lmSdfRecPosHighlight <> tmSdfMdExt(ilIndex).lRecPos Then
                    lmSdfRecPosHighlight = tmSdfMdExt(ilIndex).lRecPos
                    lmHighlightCntrCode = tmSdfMdExt(ilIndex).lChfCode
                    lmHighlightFeedCode = tmSdfMdExt(ilIndex).lFsfCode
                    imHighlightAdvtCode = tmSdfMdExt(ilIndex).iAdfCode
                    smHighlightSplitNetwork = tmSdfMdExt(ilIndex).sSplitNetwork
                    gUnpackDate tmSdfMdExt(ilIndex).iDate(0), tmSdfMdExt(ilIndex).iDate(1), slDate
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                    mObtainSpotInfo tmSdfMdExt(ilIndex).lChfCode, tmSdfMdExt(ilIndex).iLineNo, tmSdfMdExt(ilIndex).lFsfCode, slDate, tmSpotInfoCtrls()
                    imWhereComp1 = tmChf.iMnfComp(0)
                    imWhereComp2 = tmChf.iMnfComp(1)
                    pbcLog2.Cls
                    pbcLog2_Paint
                    pbcHold.Cls
                    pbcHold_Paint
                Else
                    pbcSpotInfo(1).Visible = False
                    pbcSpotInfo(0).Visible = False
                    lbcPackageInfo(1).Visible = False
                    lbcPackageInfo(0).Visible = False
                    plcCalendar.Visible = False
                    lbcGameList.Visible = False
                    imNoSpotInfo = 0
                    lmSdfRecPosHighlight = 0
                    lmHighlightCntrCode = 0
                    lmHighlightFeedCode = 0
                    imHighlightAdvtCode = 0
                    imWhereComp1 = -1
                    imWhereComp2 = -1
                    smHighlightSplitNetwork = ""
                    imShowWhere = False
                    pbcLog2.Cls
                    pbcLog2_Paint
                    mSetCommands
                End If
            End If
        End If
    Next ilRow
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClickMissed                    *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process single click on missed *
'*                      area                           *
'*                                                     *
'*******************************************************
Private Sub mClickMissed()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim slDate As String
    Dim ilSvHighlight As Integer
    Dim llSvCntrHighlight As Long
    Dim llSvFeedHighlight As Long
    Dim llSvSdfHighlight As Long
    Dim slSvNetworkHighlight As String
    Dim ilFound As Integer
    Dim ilRet As Integer
    tmcDblClick.Enabled = False
    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcMissed_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcMissed_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            'Right mouse and Remnant; DR; Per Inquiry; PSA; Promo or Extra don't allow fill
            If (imDragButton = 2) And (((imAdMdType >= 4) And (imAdMdType <= 8)) Or (imAdMdType = 11)) Then
            Else
                imDragButton = 1
                tmcDrag_Timer
            End If
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then   'Or (Not imUpdateAllowed) Then  'After Drop but before finished with drop
        'mClearDrag True
        Exit Sub
    End If
    If imMouseUpButton = 2 Then
        Exit Sub
    End If
    ilSvHighlight = imHighlightAdvtCode
    llSvCntrHighlight = lmHighlightCntrCode
    llSvFeedHighlight = lmHighlightFeedCode
    llSvSdfHighlight = lmSdfRecPosHighlight
    slSvNetworkHighlight = smHighlightSplitNetwork
    ilCompRow = vbcMissed.LargeChange + 1
    If imAdMdMax > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = imAdMdMax
    End If
    If (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by advertiser
        imHighlightAdvtCode = -1
        lmHighlightFeedCode = -1
        lmHighlightCntrCode = -1
        smHighlightSplitNetwork = ""
    End If
    ilFound = False
    Screen.MousePointer = vbHourglass
    For ilRow = 1 To ilMaxRow Step 1
        If (fmMouseUpY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmMouseUpY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
            'Test if row number can be dragged
            If (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then 'Missed by advertiser
                ilIndex = ilRow + vbcMissed.Value - 1
                'If (ilIndex < LBound(tmAdMdSdfMdExt)) Or (ilIndex > UBound(tmAdMdSdfMdExt)) Then
                If (ilIndex < imLBSdfMdExt) Or (ilIndex > UBound(tmAdMdSdfMdExt)) Then
                    Exit For
                End If
                If mAdMdMultiSelection(ilIndex) Then
                    imNoSpotInfo = 0
                    pbcSpotInfo(1).Visible = False
                    pbcSpotInfo(0).Visible = False
                    pbcMissed.Cls
                    pbcMissed_Paint
                    pbcContract.Cls
                    pbcContract_Paint
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If lmSdfRecPosHighlight <> tmAdMdSdfMdExt(ilIndex).lRecPos Then
                    ilFound = True
                    lmHighlightCntrCode = tmAdMdSdfMdExt(ilIndex).lChfCode
                    lmHighlightFeedCode = tmAdMdSdfMdExt(ilIndex).lFsfCode
                    imHighlightAdvtCode = tmAdMdSdfMdExt(ilIndex).iAdfCode
                    lmCountChfCode = tmAdMdSdfMdExt(ilIndex).lChfCode
                    imCountLineNo = tmAdMdSdfMdExt(ilIndex).iLineNo
                    lmCountFsfCode = tmAdMdSdfMdExt(ilIndex).lFsfCode
                    lmSdfRecPosHighlight = tmAdMdSdfMdExt(ilIndex).lRecPos
                    smHighlightSplitNetwork = tmAdMdSdfMdExt(ilIndex).sSplitNetwork
                    gUnpackDate tmAdMdSdfMdExt(ilIndex).iDate(0), tmAdMdSdfMdExt(ilIndex).iDate(1), slDate
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                    mObtainSpotInfo tmAdMdSdfMdExt(ilIndex).lChfCode, tmAdMdSdfMdExt(ilIndex).iLineNo, tmAdMdSdfMdExt(ilIndex).lFsfCode, slDate, tmSpotInfoCtrls()
                    imWhereComp1 = tmChf.iMnfComp(0)
                    imWhereComp2 = tmChf.iMnfComp(1)
                    Screen.MousePointer = vbHourglass
                    pbcMissed.Cls
                    pbcMissed_Paint
                    pbcContract.Cls
                    pbcContract_Paint
                    If ((imToggleRot = 1) Or (imToggleRot = 2) Or (imToggleRot = 3)) And (lmSelectedChfCode = -1) Then
                        mCntrCounts
                        Screen.MousePointer = vbHourglass
                        pbcDailyRot.Cls
                        pbcHourRot.Cls
                        pbcDailyRot_Paint
                        pbcHourRot_Paint
                    End If
                Else
                    pbcSpotInfo(1).Visible = False
                    pbcSpotInfo(0).Visible = False
                    lbcPackageInfo(1).Visible = False
                    lbcPackageInfo(0).Visible = False
                    plcCalendar.Visible = False
                    lbcGameList.Visible = False
                    imNoSpotInfo = 0
                    lmSdfRecPosHighlight = 0
                    imWhereComp1 = -1
                    imWhereComp2 = -1
                    imShowWhere = False
                    pbcMissed.Cls
                    pbcMissed_Paint
                    mSetCommands
                End If
            End If
        End If
    Next ilRow
    If imDblClickMode > 0 Then
        mClearDrag True
    End If
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mClickWorkArea                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process single click on        *
'*                      Work                           *
'*                                                     *
'*******************************************************
Private Sub mClickWorkArea()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim slDate As String
    Dim ilRet As Integer

    tmcDblClick.Enabled = False
    If imDblClick > 0 Then
        If imDblClickMode > 0 Then
            If imDblClick = imDblClickMode Then
                pbcAdWorkArea_DragOver tmcDblClick, fmMouseUpX, fmMouseUpY, DRAGENTER
                pbcAdWorkArea_DragDrop tmcDblClick, fmMouseUpX, fmMouseUpY
            Else
                imDblClickMode = 0
                imDblClick = 0
                plcConflictInfo.Visible = False
                mClearDrag True
            End If
        Else
            imDragButton = 1
            tmcDrag_Timer
        End If
        imDblClick = 0
        Exit Sub
    End If
    imDblClickMode = 0
    imDblClick = 0
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Or (Not imUpdateAllowed) Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If imMouseUpButton = 2 Then
        Exit Sub
    End If
    ilCompRow = vbcAdWorkArea.LargeChange + 1
    If UBound(tmWAMdExt) - 1 > ilCompRow Then
        ilMaxRow = ilCompRow
    Else
        ilMaxRow = UBound(tmWAMdExt) - 1
    End If
    For ilRow = 1 To ilMaxRow Step 1
        If (fmMouseUpY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (fmMouseUpY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
            'Test if row number can be dragged
            ilIndex = ilRow + vbcAdWorkArea.Value - 1
            If (ilIndex < LBound(tmWAMdExt)) Or (ilIndex > UBound(tmWAMdExt)) Then
                Exit For
            End If
            If mWAMultiSelection(ilIndex) Then
                imHighlightAdvtCode = -1
                lmHighlightFeedCode = -1
                lmHighlightCntrCode = -1
                smHighlightSplitNetwork = ""
                imNoSpotInfo = 0
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                pbcAdWorkArea.Cls
                pbcAdWorkArea_Paint
                pbcContract.Cls
                pbcContract_Paint
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
            If lmSdfRecPosHighlight <> tmWAMdExt(ilIndex).lRecPos Then
                lmHighlightCntrCode = tmWAMdExt(ilIndex).lChfCode
                lmHighlightFeedCode = tmWAMdExt(ilIndex).lFsfCode
                imHighlightAdvtCode = tmWAMdExt(ilIndex).iAdfCode
                lmCountChfCode = tmWAMdExt(ilIndex).lChfCode
                imCountLineNo = tmWAMdExt(ilIndex).iLineNo
                lmCountFsfCode = tmWAMdExt(ilIndex).lFsfCode
                lmSdfRecPosHighlight = tmWAMdExt(ilIndex).lRecPos
                gUnpackDate tmWAMdExt(ilIndex).iDate(0), tmWAMdExt(ilIndex).iDate(1), slDate
                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, lmSdfRecPosHighlight, INDEXKEY0, BTRV_LOCK_NONE)
                mObtainSpotInfo tmWAMdExt(ilIndex).lChfCode, tmWAMdExt(ilIndex).iLineNo, tmWAMdExt(ilIndex).lFsfCode, slDate, tmSpotInfoCtrls()
                imWhereComp1 = tmChf.iMnfComp(0)
                imWhereComp2 = tmChf.iMnfComp(1)
                Screen.MousePointer = vbHourglass
                pbcAdWorkArea.Cls
                pbcAdWorkArea_Paint
                pbcContract.Cls
                pbcContract_Paint
            Else
                'Clear
                pbcSpotInfo(1).Visible = False
                pbcSpotInfo(0).Visible = False
                lbcPackageInfo(1).Visible = False
                lbcPackageInfo(0).Visible = False
                plcCalendar.Visible = False
                lbcGameList.Visible = False
                imNoSpotInfo = 0
                lmSdfRecPosHighlight = 0
                imWhereComp1 = -1
                imWhereComp2 = -1
                imShowWhere = False
                pbcAdWorkArea.Cls
                pbcAdWorkArea_Paint
                mSetCommands
            End If
        End If
    Next ilRow
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mCntrCounts                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Compute contract hour and day  *
'*                      counts                         *
'*                                                     *
'*******************************************************
Private Sub mCntrCounts()
    'Dim ilLoop As Integer
    Dim llLoop As Long
    'Dim ilIndex As Integer
    Dim llIndex As Long
    Dim ilRet As Integer
    Erase imHourCount   'Clear arrya
    Erase imDayCount    'Clear Array
    If lmCountChfCode <= 0 Then
        lmCurrCountChfCode = lmCountChfCode
        lmCurrCountFsfCode = lmCountFsfCode
        imCountLineNo = -1
        imCurrCountLineNo = -1
        imCurrCountVefCode = 0
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    If (lmCurrCountChfCode <> lmCountChfCode) Or (imCurrCountVefCode <> imVehCode) Or (lmCurrCountFsfCode <> lmCountFsfCode) Then
        ilRet = gObtainCntrSpot(CLng(imVehCode), True, lmCountChfCode, -1, "S", "", "", tmSdfExtSort(), tmSdfExt(), 0, True)
        lmCurrCountChfCode = lmCountChfCode
        lmCurrCountFsfCode = lmCountFsfCode
    End If
    If (imToggleRot = 1) Or (imToggleRot = 2) Or (imToggleRot = 3) Then
        'For ilLoop = 0 To UBound(tmSdfExtSort) - 1 Step 1
        For llLoop = 0 To UBound(tmSdfExtSort) - 1 Step 1
            'slNameCode = lbcCntrSpotSort.List(ilLoop)   'Line#|Vehicle Name|Date|Time/Index
            'ilRet = gParseItem(slNameCode, 2, "\", slCode)
            llIndex = tmSdfExtSort(llLoop).lSdfExtIndex 'Val(slCode)
'            If (imToggleRot = 1) Or (imToggleRot = 2) Or ((imToggleRot = 3) And (imCountLineNo = tmSdfExt(ilIndex).iLineNo)) Then
                mAdjCounts 1, tmSdfExt(llIndex)
'            End If
        Next llLoop
    End If
    imCurrCountLineNo = imCountLineNo
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mCompressMd                     *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Remove record from Missed table*
'*                      and sort list                  *
'*                                                     *
'*******************************************************
Private Sub mCompressMd(ilIndex As Integer, tlSdfMdExt() As SDFMDEXT) ', lbcCtrl As Control)
    Dim ilCompress As Integer
    For ilCompress = ilIndex To UBound(tlSdfMdExt) - 1 Step 1
        tlSdfMdExt(ilCompress) = tlSdfMdExt(ilCompress + 1)
    Next ilCompress
    If UBound(tlSdfMdExt) > 1 Then
        'ReDim Preserve tlSdfMdExt(1 To UBound(tlSdfMdExt) - 1) As SDFMDEXT
        ReDim Preserve tlSdfMdExt(0 To UBound(tlSdfMdExt) - 1) As SDFMDEXT
    End If
    'For ilCompress = 0 To lbcCtrl.ListCount - 1 Step 1
    '    If lbcCtrl.ItemData(ilCompress) = ilIndex Then
    '        lbcCtrl.RemoveItem ilCompress
    '        Exit For
    '    End If
    'Next ilCompress
    'For ilCompress = 0 To lbcCtrl.ListCount - 1 Step 1
    '    If lbcCtrl.ItemData(ilCompress) > ilIndex Then
    '        lbcCtrl.ItemData(ilCompress) = lbcCtrl.ItemData(ilCompress) - 1
    '    End If
    'Next ilCompress
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mDateSpan                       *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine date span of current *
'*                      pending                        *
'*                                                     *
'*******************************************************
Private Sub mDateSpan()
    Dim ilType As Integer
    Dim slDate As String
    Dim ilRet As Integer
    Dim slLog1 As String
    Dim ilGsf As Integer
    Dim slStr As String
    '4/16/11
    Dim ilLoop As Integer

    lmCEarliestDate = -1
    lmCLatestDate = -1
    If tmVef.sType <> "G" Then
        tmLcfSrchKey.iType = 0
        ilType = 0
        tmLcfSrchKey.sStatus = "C"
        tmLcfSrchKey.iVefCode = imVehCode
        tmLcfSrchKey.iLogDate(0) = 257  'Year 1/1/2100
        tmLcfSrchKey.iLogDate(1) = 2100
        tmLcfSrchKey.iSeqNo = 1
        ilRet = btrGetLessOrEqual(hmLcf, tmLcf, imLcfRecLen, tmLcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get last current record to obtain date
        If (ilRet = BTRV_ERR_NONE) And (tmLcf.sStatus = "C") And (tmLcf.iVefCode = imVehCode) And (tmLcf.iType = ilType) Then
            gUnpackDate tmLcf.iLogDate(0), tmLcf.iLogDate(1), slDate
            lmCLatestDate = gDateValue(gObtainNextSunday(slDate))
            tmLcfSrchKey.iType = ilType
            tmLcfSrchKey.sStatus = "C"
            tmLcfSrchKey.iVefCode = imVehCode
            tmLcfSrchKey.iLogDate(0) = 257  'Year 1/1/1900
            tmLcfSrchKey.iLogDate(1) = 1900
            tmLcfSrchKey.iSeqNo = 1
            ilRet = btrGetGreaterOrEqual(hmLcf, tmLcf, imLcfRecLen, tmLcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get last current record to obtain date
            If (ilRet = BTRV_ERR_NONE) And (tmLcf.sStatus = "C") And (tmLcf.iVefCode = imVehCode) And (tmLcf.iType = ilType) Then
                gUnpackDate tmLcf.iLogDate(0), tmLcf.iLogDate(1), slDate
                lmCEarliestDate = gDateValue(gObtainPrevMonday(slDate))
            Else
                slDate = Format$(gNow(), "m/d/yy")
                slDate = gObtainNextMonday(slDate)
                slDate = gDecOneWeek(slDate)
                lmCEarliestDate = gDateValue(slDate)
            End If
        Else
            slDate = Format$(gNow(), "m/d/yy")
            slDate = gObtainNextMonday(slDate)
            lmCEarliestDate = gDateValue(slDate)
            lmCLatestDate = lmCEarliestDate + 6
        End If
    Else
        lbcGameNo(0).Clear
        '4/16/11
        lbcGameNo(1).Clear
        lbcGameNo(2).Clear
        lbcGameNo(3).Clear
        lbcGameList.Clear
        If lmSeasonGhfCode <= 0 Then
            Exit Sub
        End If
        
        ilRet = gGetGameDates(hmLcf, hmGhf, hmGsf, tmVef.iCode, tmTeam(), tmGsfInfo(), lmSeasonGhfCode)
        For ilGsf = LBound(tmGsfInfo) To UBound(tmGsfInfo) - 1 Step 1
            If lmCEarliestDate = -1 Then
                lmCEarliestDate = tmGsfInfo(ilGsf).lGameDate
                lmCLatestDate = lmCEarliestDate
            Else
                If lmCEarliestDate > tmGsfInfo(ilGsf).lGameDate Then
                    lmCEarliestDate = tmGsfInfo(ilGsf).lGameDate
                End If
                If lmCLatestDate < tmGsfInfo(ilGsf).lGameDate Then
                    lmCLatestDate = tmGsfInfo(ilGsf).lGameDate
                End If
            End If
            slStr = Trim$(str$(tmGsfInfo(ilGsf).iGameNo))
            slStr = slStr & " " & Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
            slStr = slStr & " " & Trim$(Left(tmGsfInfo(ilGsf).sVisitName, 4)) & "@" & Trim$(Left(tmGsfInfo(ilGsf).sHomeName, 4))
            lbcGameNo(0).AddItem slStr
            lbcGameNo(0).ItemData(lbcGameNo(0).NewIndex) = ilGsf
            lbcGameNo(1).AddItem slStr
            lbcGameNo(1).ItemData(lbcGameNo(0).NewIndex) = ilGsf
            lbcGameNo(2).AddItem slStr
            lbcGameNo(2).ItemData(lbcGameNo(0).NewIndex) = ilGsf
            lbcGameNo(3).AddItem slStr
            lbcGameNo(3).ItemData(lbcGameNo(0).NewIndex) = ilGsf
            lbcGameList.AddItem slStr
            lbcGameList.ItemData(lbcGameList.NewIndex) = ilGsf
        Next ilGsf
        lbcGameNo(0).height = gListBoxHeight(lbcGameNo(0).ListCount, 13)
        lbcGameNo(1).height = gListBoxHeight(lbcGameNo(1).ListCount, 13)
        lbcGameNo(2).height = gListBoxHeight(lbcGameNo(2).ListCount, 13)
        lbcGameNo(3).height = gListBoxHeight(lbcGameNo(3).ListCount, 13)
        lbcGameList.height = gListBoxHeight(lbcGameList.ListCount, 7)
    End If
    'imIgnoreChg = True
    'hbcContract.Min = 1
    'imIgnoreChg = True
    'hbcContract.Max = (lmCLatestDate - lmCEarliestDate) \ 7 + 1 '1 for adjusting
'    If (lmNowMoDate >= lmCEarliestDate) And (lmNowMoDate <= lmCLatestDate) Then
'        ilValue = (lmNowMoDate - lmCEarliestDate) \ 7 + 1
'    Else
'        ilValue = hbcContract.Min
'    End If
    'If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
    'Back up one week so init scroll to right is to first allowed week
    'If (lmEarliestAllowedDate - 7 >= lmCEarliestDate) And (lmEarliestAllowedDate - 7 <= lmCLatestDate) Then
    '    ilValue = (lmEarliestAllowedDate - 7 - lmCEarliestDate) \ 7 + 1
    'Else
    '    ilValue = hbcContract.Min
    'End If
    'imIgnoreChg = True
    'hbcAvDate.Min = hbcContract.Min
    'imIgnoreChg = True
    'hbcAvDate.Max = hbcContract.Max '1 for adjusting
    'imIgnoreChg = True
    'If hbcContract.Value <> ilValue Then
    '    hbcContract.Value = ilValue
    'Else
    '    'hbcContract_Change
    'End If
    'llDate = 7 * (hbcContract.Value - 1) + lmCEarliestDate
    'slDate = Format(llDate, "m/d/yy")
    'slDate = gFormatDate(slDate)
    'If llDate < lmEarliestAllowedDate Then
    '    'plcDate.ForeColor = RED
    '    edcLog1Dt.ForeColor = RED
    '    edcDate.ForeColor = RED
    'ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
    '    'plcDate.ForeColor = MAGENTA
    '    edcLog1Dt.ForeColor = MAGENTA
    '    edcDate.ForeColor = MAGENTA
    'Else
    '    'plcDate.ForeColor = BLUE
    '    edcLog1Dt.ForeColor = BLUE
    '    edcDate.ForeColor = BLUE
    'End If
    'plcDate.Caption = "" 'slDate
    edcDate.Text = ""
    'imIgnoreChg = True
    'If hbcAvDate.Value <> ilValue Then
    '    hbcAvDate.Value = ilValue
    'Else
    '    hbcAvDate_Change
    'End If
    'Screen.MousePointer = vbHourGlass  'Wait
    'llDate = 7 * (hbcAvDate.Value - 1) + lmCEarliestDate
    'slDate = Format(llDate, "m/d/yy")
    'slDate = gFormatDate(slDate)
    ''plcAvDate.Caption = "" 'slDate
    edcAvDate.Text = ""
    mBuildAdvtView  'This read forces vbcChange
    'Set spots by time
    If tmVef.sType <> "G" Then
        slLog1 = smLog1Date 'Retained log1 from previous vehicle
    ''    slDate = plcDate.Caption
        If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
            slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
        Else
            'slDate = edcDate.Text   'plcDate.Caption
            mGetEdcDate 0
            slDate = smEdcDate
        End If
        'imIgnoreChg = True
        'hbcL1Date.Min = 1
        'imIgnoreChg = True
        'hbcL1Date.Max = (lmCLatestDate - lmCEarliestDate) + 1  '1 for adjusting
        'imIgnoreChg = True
        'hbcL2Date.Min = 1'hbcL1Date.Min
        'imIgnoreChg = True
        'hbcL2Date.Max = (lmCLatestDate - lmCEarliestDate) + 1  'hbcL1Date.Max
        'imIgnoreChg = True
        'hbcAdMdDate.Min = 1'hbcL1Date.Min
        'imIgnoreChg = True
        'hbcAdMdDate.Max = (lmCLatestDate - lmCEarliestDate) + 1  'hbcL1Date.Max
        'imIgnoreChg = True 'False
        If slLog1 <> "" Then    'Log date exist for previous vehicle
            'If (gDateValue(slLog1) <> gDateValue(slDate)) Or (hbcL1Date.Value <> (gDateValue(slDate) - lmCEarliestDate + 1)) Then
            '    ilValue = (gDateValue(slDate) - lmCEarliestDate) + 1
            '    If hbcL1Date.Value <> ilValue Then
            '        hbcL1Date.Value = ilValue
            '    Else
            '        'hbcL1Date_Change
            '    End If
            'Else
            '    'hbcL1Date_Change
            'End If
            'mHbcL1DateChange
            If (gDateValue(slLog1) <> gDateValue(slDate)) Then
                edcLog1Dt.Text = slDate
            Else
                edcLog1Dt_Change
            End If
        Else
            'If (lmEarliestAllowedDate >= lmCEarliestDate) And (lmEarliestAllowedDate <= lmCLatestDate) Then
            '    ilValue = (lmEarliestAllowedDate - lmCEarliestDate) + 1
            'Else
            '    ilValue = hbcL1Date.Min
            'End If
            'If hbcL1Date.Value <> ilValue Then
            '    'hbcL1Date.Value = ilValue
            'Else
            '    'hbcL1Date_Change
            'End If
            ''mHbcL1DateChange
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mDetSwfEndIndex                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine end index from       *
'*                      starting index (next avail)    *
'*                                                     *
'*******************************************************
Private Sub mDetSwfEndIndex(ilEvtIndex As Integer, tlEvt() As EVTINFO, ilEndEvtIndex As Integer)
    Dim ilTempIndex As Integer
    ilTempIndex = ilEvtIndex + 1
    Do While ilTempIndex < UBound(tlEvt)
        If lmSelectedChfCode <= 0 Then
            If ((tlEvt(ilTempIndex).iType >= 2) And (tlEvt(ilTempIndex).iType <= 9)) Then
                If ilTempIndex - 1 < ilEndEvtIndex Then
                    ilEndEvtIndex = ilTempIndex - 1
                End If
                Exit Sub
            End If
            ilTempIndex = ilTempIndex + 1
        Else
            'If (tlEvt(ilTempIndex).iType = 100) And (tlEvt(ilTempIndex).lLen = lmSelectedChfCode) Then
            '    If ilTempIndex - 1 < ilEndEvtIndex Then
            '        ilEndEvtIndex = ilTempIndex - 1
            '    End If
            '    Exit Sub
            'End If
            'ilTempIndex = ilTempIndex + 1
            ilEndEvtIndex = UBound(tlEvt) - 1
            Exit Sub
        End If
    Loop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mDragOver                       *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Process drag over              *
'*                                                     *
'*******************************************************
Private Sub mDragOver(ilObject As Integer, State As Integer, Index As Integer)
    If imDragSrce = DRAGADMD Then
        If (ilObject = DRAGCONTRACT) And (lmSelectedChfCode > 0) Then
            Exit Sub
        End If
        If (ilObject = DRAGMDREASON) And (((imAdMdType > 3) And (imAdMdType < 9)) Or (imAdMdType = 9) Or (imAdMdType = 10) Or (imAdMdType = 11)) Then
            Exit Sub
        End If
    End If
    If (imDragSrce = DRAGLOG2) Then
        If (ilObject = DRAGMDREASON) And (((imLog2Type > 4) And (imLog2Type < 10)) Or (imLog2Type = 10) Or (imLog2Type = 11)) Then
            Exit Sub
        End If
    End If
    imDragScroll = ilObject
    If State = vbEnter Then
        If imDragScroll = DRAGMDREASON Then
            tmcScroll.Interval = 2000
        End If
        tmcScroll.Enabled = True
        imScrollDir = Index
        Exit Sub
    End If
    If State = vbOver Then
        imScrollDir = Index
        Exit Sub
    End If
    If State = vbLeave Then
        imDragScroll = -1
        tmcScroll.Enabled = False
        tmcScroll.Interval = 1000
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
        Exit Sub
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mExtraBonusPop                  *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection combo   *
'*                      box                            *
'*                                                     *
'*******************************************************
Private Sub mExtraBonusPop(llManSchCode() As Long, ilManSchInfo() As Integer, lbcManSch As control, tlManSchCode() As SORTCODE)
'
'   mExtraBonusPop llManSchCode(), ilManSchInfo(), lbcManSch
'   Where:
'       lbcManSch(O)- Advertiser/Contract #: # Extra Bonus Spots Spot len
'       lbcManSchCode(O)- Advertiser/Contract #: # Extra Bonus Spots Spot len\Cntr Code
'
    Dim ilRet As Integer 'btrieve status
    Dim slNameCode As String  'Name and code
    Dim slCode As String    'Code number
    Dim slType As String
    Dim slName As String
    Dim slAdvt As String
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slLen As String
    Dim ilLen As Integer
    Dim ilPos As Integer
    If imVehCode < 0 Then
        Exit Sub
    End If
    ReDim llManSchCode(0 To 2, 0 To 0) As Long
    ReDim ilManSchInfo(0 To 7, 0 To 0) As Integer
    lbcManSch.Clear
    'lbcManSchCode.Clear
    ReDim tlManSchCode(0 To 0) As SORTCODE
    smManSchCodeTag = ""
    'Span tmMoEvt; tmTuEvt;...
    mBuildExtraBonus tmMoEvt(), llManSchCode(), ilManSchInfo()
    mBuildExtraBonus tmTuEvt(), llManSchCode(), ilManSchInfo()
    mBuildExtraBonus tmWeEvt(), llManSchCode(), ilManSchInfo()
    mBuildExtraBonus tmThEvt(), llManSchCode(), ilManSchInfo()
    mBuildExtraBonus tmFrEvt(), llManSchCode(), ilManSchInfo()
    mBuildExtraBonus tmSaEvt(), llManSchCode(), ilManSchInfo()
    mBuildExtraBonus tmSuEvt(), llManSchCode(), ilManSchInfo()
    'Make list box images
    For ilLoop = LBound(llManSchCode, 2) To UBound(llManSchCode, 2) - 1 Step 1
        If llManSchCode(1, ilLoop) > 0 Then
            tmChfSrchKey.lCode = llManSchCode(1, ilLoop)
            ilRet = btrGetEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                gUnpackDate tmChf.iStartDate(0), tmChf.iStartDate(1), slStartDate
                gUnpackDate tmChf.iEndDate(0), tmChf.iEndDate(1), slEndDate
                slAdvt = "Missing"
                'For ilIndex = LBound(tgCommAdf) To UBound(tgCommAdf) Step 1
                '    If tmChf.iAdfCode = tgCommAdf(ilIndex).iCode Then
                    ilIndex = gBinarySearchAdf(tmChf.iAdfCode)
                    If ilIndex <> -1 Then
                        slAdvt = Trim$(tgCommAdf(ilIndex).sAbbr)
                '        Exit For
                    End If
                'Next ilIndex
                slName = slAdvt & "/" & Trim$(str$(tmChf.lCntrNo))
                slName = slName & ": " & slStartDate & "-" & slEndDate & str(ilManSchInfo(3, ilLoop)) & str(ilManSchInfo(2, ilLoop)) & "s"
                'lbcManSchCode.AddItem slName & "\" & Str$(llManSchCode(ilLoop))
                tlManSchCode(UBound(tlManSchCode)).sKey = slName & "\" & str$(llManSchCode(1, ilLoop)) & "\C"
            End If
        Else
            tmFSFSrchKey.lCode = llManSchCode(2, ilLoop)
            ilRet = btrGetEqual(hmFsf, tmFsf, imFsfRecLen, tmFSFSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                gMoveFeedToCntr tmFsf, tmLnRdf, tmChf, tmClf, tmFCff(), hmFnf, hmPrf
                gUnpackDate tmChf.iStartDate(0), tmChf.iStartDate(1), slStartDate
                gUnpackDate tmChf.iEndDate(0), tmChf.iEndDate(1), slEndDate
                slAdvt = "Missing"
                'For ilIndex = LBound(tgCommAdf) To UBound(tgCommAdf) Step 1
                '    If tmChf.iAdfCode = tgCommAdf(ilIndex).iCode Then
                    ilIndex = gBinarySearchAdf(tmChf.iAdfCode)
                    If ilIndex <> -1 Then
                        slAdvt = Trim$(tgCommAdf(ilIndex).sAbbr)
                '        Exit For
                    End If
                'Next ilIndex
                slName = slAdvt & "/" & Trim$(tmFsf.sRefID)
                slName = slName & ": " & slStartDate & "-" & slEndDate & str(ilManSchInfo(3, ilLoop)) & str(ilManSchInfo(2, ilLoop)) & "s"
                'lbcManSchCode.AddItem slName & "\" & Str$(llManSchCode(ilLoop))
                tlManSchCode(UBound(tlManSchCode)).sKey = slName & "\" & str$(llManSchCode(2, ilLoop)) & "\F"
            End If
        End If
    Next ilLoop
    'Sort then output new headers and lines
    If UBound(tlManSchCode) - 1 > 0 Then
        ArraySortTyp fnAV(tlManSchCode(), 0), UBound(tlManSchCode), 0, LenB(tlManSchCode(0)), 0, LenB(tlManSchCode(0).sKey), 0
    End If
    For ilIndex = 0 To UBound(tlManSchCode) - 1 Step 1  'lbcManSchCode.ListCount - 1 Step 1
        slNameCode = tlManSchCode(ilIndex).sKey    'lbcManSchCode.List(ilIndex)
        ilRet = gParseItem(slNameCode, 3, "\", slType)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        ilRet = gParseItem(slNameCode, 1, "\", slName)
        ilPos = Len(slName)
        Do While ilPos > 0
            If Mid$(slName, ilPos, 1) = " " Then
                slLen = Mid$(slName, ilPos + 1)
                slLen = Left$(slLen, Len(slLen) - 1)
                Exit Do
            Else
                ilPos = ilPos - 1
            End If
        Loop
        ilLen = Val(slLen)
        For ilLoop = LBound(llManSchCode, 2) To UBound(llManSchCode, 2) - 1 Step 1
            If slType <> "F" Then
                If (Val(slCode) = llManSchCode(1, ilLoop)) And (ilManSchInfo(2, ilLoop) = ilLen) Then
                    ilManSchInfo(5, ilLoop) = ilIndex
                    lbcManSch.AddItem slName
                    ilManSchInfo(6, ilLoop) = lbcManSch.ListCount - 1
                    Exit For
                End If
            Else
                If (Val(slCode) = llManSchCode(2, ilLoop)) And (ilManSchInfo(2, ilLoop) = ilLen) Then
                    ilManSchInfo(5, ilLoop) = ilIndex
                    lbcManSch.AddItem slName
                    ilManSchInfo(6, ilLoop) = lbcManSch.ListCount - 1
                    Exit For
                End If
            End If
        Next ilLoop
    Next ilIndex
    Screen.MousePointer = vbDefault
    Exit Sub

    On Error GoTo 0
    imTerminate = True
    Screen.MousePointer = vbDefault
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mFindFromVehicle                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine vehicle associated   *
'*                      for an extra spot              *
'*                                                     *
'*******************************************************
Private Function mFindFromVehicle(llChfCode As Long, ilLineNo As Integer, llFsfCode As Long, tlEvt() As EVTINFO, ilVefCode As Integer) As Integer
    Dim ilLoop As Integer
    Dim tlSdf As SDF
    Dim ilRet As Integer
    Dim tlSmf As SMF
    mFindFromVehicle = False
    'For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilLoop = imLBEvt To UBound(tlEvt) - 1 Step 1
        If (tlEvt(ilLoop).iType = 100) And (tlEvt(ilLoop).lLen = llChfCode) And (tlEvt(ilLoop).iLineNo = ilLineNo) And (tlEvt(ilLoop).lFsfCode = llFsfCode) Then '2-9= avail; 99=Remain avils; 101 =conflict spot; -1=place holder
            ilRet = btrGetDirect(hmSdf, tlSdf, imSdfRecLen, tlEvt(ilLoop).lTime, INDEXKEY0, BTRV_LOCK_NONE)
            If (tlSdf.sSchStatus = "G") Or (tlSdf.sSchStatus = "O") Then
                'tmSmfSrchKey.lChfCode = tlSdf.lChfCode
                'tmSmfSrchKey.iLineNo = tlSdf.iLineNo
                'tmSmfSrchKey.iMissedDate(0) = 0 'sch date =tlSdf.iDate(0)
                'tmSmfSrchKey.iMissedDate(1) = 0 'sch date =tlSdf.iDate(1)
                imSmfRecLen = Len(tlSmf)
                'ilRet = btrGetGreaterOrEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get current record
                'Do While (ilRet = BTRV_ERR_NONE) And (tlSmf.lChfCode = tlSdf.lChfCode) And (tlSmf.iLineNo = tlSdf.iLineNo)
                tmSmfSrchKey2.lCode = tlSdf.lCode
                ilRet = btrGetEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                If ilRet = BTRV_ERR_NONE Then
                    If (tlSmf.lSdfCode = tlSdf.lCode) Then
                        ilVefCode = tlSmf.iOrigSchVef
                        mFindFromVehicle = True
                        Exit Function
                    End If
                 '   ilRet = btrGetNext(hmSmf, tlSmf, imSmfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                'Loop
                End If
            Else
                ilVefCode = tlSdf.iVefCode
                mFindFromVehicle = True
                Exit Function
            End If
        End If
    Next ilLoop
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mForceRepaintWeekly                   *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Force regeneration of screen   *
'*                                                     *
'*******************************************************
Private Sub mForceRepaintWeekly(ilShowMsg As Integer)
    Dim ilRet As Integer
    If ilShowMsg Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Task could not be completed successfully because of error" & str$(igBtrError) & "/" & sgErrLoc & ", Spot screen will be regenerated", vbOKOnly + vbExclamation, "Spot")
    End If
    igBtrError = BTRV_ERR_NONE
    sgErrLoc = ""
    'Repaint screen
    DoEvents
    'imSelectDelay = True
    'imDelayType = 4
    'tmcClick.Interval = 3000    '2 seconds
    'tmcClick.Enabled = True
    Screen.MousePointer = vbHourglass
    mHbcAdvtDateChange
    'If (Trim$(plcDate.Caption) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
    If (Trim$(edcDate.Text) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
        imcPrt.Visible = True
    Else
        imcPrt.Visible = False
    End If
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetAvailIndex                  *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Determine avail index and spot  *
'*                     position                        *
'*                                                     *
'*******************************************************
Private Sub mGetAvailIndex(tlEvt() As EVTINFO, ilSpotIndex As Integer, llSsfAvailRecPos As Long, ilSsfAvailIndex As Integer, ilPosition As Integer, slTime As String)
    Dim ilLoop As Integer
    Dim ilPos As Integer
    ilPos = 1
    'For ilLoop = ilSpotIndex - 1 To LBound(tlEvt) Step -1
    For ilLoop = ilSpotIndex - 1 To imLBEvt Step -1
        If (tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9) Then
            llSsfAvailRecPos = tlEvt(ilLoop).lSsfRecPos
            ilSsfAvailIndex = tlEvt(ilLoop).iSsfIndex
            If tlEvt(ilSpotIndex).iType <> 99 And smOverbookMode <> "Y" Then
                ilPosition = ilPos
            Else
                ilPosition = 0
            End If
            slTime = gCurrencyToTime(CCur(tlEvt(ilLoop).lTime))
            If (InStr(slTime, "A") > 0) Or (InStr(slTime, "P") > 0) Then
                slTime = Left$(slTime, Len(slTime) - 1)
            Else
                slTime = slTime
            End If
            Exit Sub
        ElseIf tlEvt(ilLoop).iType = 100 Then
            ilPos = ilPos + 1
        End If
    Next ilLoop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetAvailStat                   *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Get avail numbers for specified*
'*                      times                          *
'*                                                     *
'*******************************************************
Private Function mGetAvailStat(tlEvt() As EVTINFO, llStartTime As Long, llEndTime As Long, ilCompConflict As Integer) As String
    Dim ilUnitInv As Integer
    Dim llSecInv As Long
    Dim ilUnitSold As Integer
    Dim llSecSold As Long
    Dim ilEvt As Integer
    Dim slStr As String
    Dim ilCompCount As Integer
    Dim ilCompInBreak As Integer
    Dim ilAvailUnits As Integer
    ilUnitInv = 0
    llSecInv = 0
    ilUnitSold = 0
    llSecSold = 0
    ilCompConflict = True
    ilCompCount = 0
    'ilEvt = LBound(tlEvt)
    ilEvt = imLBEvt
    Do While ilEvt < UBound(tlEvt)
        If ((tlEvt(ilEvt).iType >= 2) And (tlEvt(ilEvt).iType <= 9)) Then
            If tlEvt(ilEvt).lTime > llEndTime Then
                'Output values
                slStr = mMakeAvailShow(ilUnitSold, llSecSold, ilUnitInv, llSecInv)
                Exit Do
            End If
            If tlEvt(ilEvt).lTime >= llStartTime Then
                ilAvailUnits = tlEvt(ilEvt).iUnits
                ilUnitInv = ilUnitInv + tlEvt(ilEvt).iUnits
                llSecInv = llSecInv + tlEvt(ilEvt).lLen
                ilCompInBreak = False
                Do While tlEvt(ilEvt + 1).iType = 100
                    ilEvt = ilEvt + 1
                    'Don't count PSA or Promos
                    If (tlEvt(ilEvt).sCntrType <> "S") And (tlEvt(ilEvt).sCntrType <> "M") Then
                        ilUnitSold = ilUnitSold + 1
                        llSecSold = llSecSold + tlEvt(ilEvt).iUnits 'units contains spot length
                    End If
                    If (imWhereComp1 = tlEvt(ilEvt).iMnfComp1) Or (imWhereComp1 = tlEvt(ilEvt).iMnfComp2) Then
                        If imWhereComp1 <> 0 Then
                            ilCompInBreak = True
                        End If
                    ElseIf (imWhereComp2 = tlEvt(ilEvt).iMnfComp1) Or (imWhereComp2 = tlEvt(ilEvt).iMnfComp2) Then
                        If imWhereComp2 <> 0 Then
                            ilCompInBreak = True
                        End If
                    End If
                    If ilEvt + 1 >= UBound(tlEvt) Then
                        Exit Do
                    End If
                Loop
                If tgVpf(imVpfIndex).sSCompType = "T" Then
                    If ilCompInBreak Then
                        ilCompCount = ilCompCount + 1
                    End If
                ElseIf tgVpf(imVpfIndex).sSCompType = "B" Then
                    If Not ilCompInBreak Then
                        ilCompConflict = False
                    End If
                ElseIf tgVpf(imVpfIndex).sSCompType = "N" Then
                    If Not ilCompInBreak Then
                        ilCompConflict = False
                    Else
                        If ilAvailUnits > 2 Then
                            ilCompConflict = False
                        End If
                    End If
                End If
            End If
        End If
        ilEvt = ilEvt + 1
    Loop
    If ilEvt >= UBound(tlEvt) Then
        slStr = mMakeAvailShow(ilUnitSold, llSecSold, ilUnitInv, llSecInv)
    End If
    If tgVpf(imVpfIndex).sSCompType = "T" Then
        If lmCompTime > 0 Then
            If (llEndTime - llStartTime + 1) / lmCompTime > ilCompCount Then
                ilCompConflict = False
            End If
        Else
            ilCompConflict = False
        End If
    End If
    mGetAvailStat = slStr
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetCopy                        *
'*                                                     *
'*             Created:10/27/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Obtain copy associated with sdf*
'*                                                     *
'*******************************************************
Private Function mGetCopy(llSdfCode As Long) As String
    Dim ilRet As Integer
    Dim slISCI As String
    Dim slCart As String
    Dim slCreativeTitle As String
    Dim slStr As String

    Dim tlSdf As SDF
    mGetCopy = ""
    tmSdfSrchKey3.lCode = llSdfCode
    ilRet = btrGetEqual(hmSdf, tlSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
    If ilRet <> BTRV_ERR_NONE Then
        Exit Function
    End If
    mGetCopyInfo tlSdf.sPtType, tlSdf.lCopyCode, slCart, slISCI, slCreativeTitle
    If slCart <> "" Then
        slStr = slCart & "/" & slISCI
    Else
        slStr = slISCI
    End If
    If tlSdf.iRotNo > 0 Then
        mGetCopy = slStr & " i" & Trim$(str$(tlSdf.iRotNo))
    Else
        mGetCopy = slStr
    End If
End Function
'
'
'           mGetEventLength - get the maximum number of
'               carriage returns to create as many swf
'               records
'               <input> - slEventStr - string with events within
'                   an avail with c/r
'                   ilCountCR - max. # of carriage returns to
'                   create as many SWF records.
'
Private Function mGetEventLength(slEventStr As String, ilCountCR As Integer) As Integer
Dim ilRet As Integer
Dim ilCR As Integer
Dim ilIndex As Integer
    mGetEventLength = ilCountCR
    ilCR = 0
    For ilIndex = 1 To Len(slEventStr)
        ilRet = InStr(ilIndex, slEventStr, Chr$(10))
        If ilRet = 0 Then
            Exit For
        Else
            ilCR = ilCR + 1
            ilIndex = ilRet + 1
        End If
    Next ilIndex
    If ilCR > ilCountCR Then
        mGetEventLength = ilCR
    End If
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetExtraLineNo                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine line number for extra*
'*                                                     *
'*******************************************************
Private Sub mGetExtraLineNo(llChfCode As Long, ilLen As Integer, tlEvt() As EVTINFO)
    Dim ilUpper As Integer
    Dim ilTest As Integer
    Dim ilFound As Integer
    Dim ilLoop As Integer
    If llChfCode <= 0 Then
        Exit Sub
    End If
    ilUpper = UBound(imLineNoExtra)
    'For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilLoop = imLBEvt To UBound(tlEvt) - 1 Step 1
        If (tlEvt(ilLoop).iType = 100) And (tlEvt(ilLoop).lLen = llChfCode) And (tlEvt(ilLoop).iUnits = ilLen) Then '2-9= avail; 99=Remain avils; 101 =conflict spot; -1=place holder
            ilFound = False
            For ilTest = 1 To ilUpper - 1 Step 1
                If imLineNoExtra(ilTest) = tlEvt(ilLoop).iLineNo Then
                    ilFound = True
                    Exit For
                End If
            Next ilTest
            If Not ilFound Then
                imLineNoExtra(ilUpper) = tlEvt(ilLoop).iLineNo
                'ReDim Preserve imLineNoExtra(1 To ilUpper + 1) As Integer
                ReDim Preserve imLineNoExtra(LBound(imLineNoExtra) To ilUpper + 1) As Integer
                ilUpper = ilUpper + 1
            End If
        End If
    Next ilLoop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mGetVehIndex                    *
'*                                                     *
'*             Created:3/01/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Get vehicle index and option   *
'*                      index                          *
'*                                                     *
'*******************************************************
Private Sub mGetVehIndex()
'
'   mGetVehIndex
'   Where:
'
    Dim ilRet As Integer 'btrieve status
    Dim slNameCode As String
    Dim slCode As String
    Dim llVehLLD As Long        'Vehicle last log date
    Dim slDate As String
    Dim slLength As String
    Dim ilVff As Integer
    Dim ilVef As Integer
    
    slNameCode = tmUserVehicle(imVehSelectedIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
    ilRet = gParseItem(slNameCode, 1, "\", smVehName)
    ilRet = gParseItem(smVehName, 3, "|", smVehName)
    ilRet = gParseItem(slNameCode, 2, "\", slCode)
    On Error GoTo mGetVehIndexErr
    gCPErrorMsg ilRet, "mGetVehIndex (gParseItem field 2: Vehicle)", Spots
    On Error GoTo 0
    imVehCode = Val(slCode)
    imVpfIndex = gBinarySearchVpfPlus(imVehCode)    'gVpfFind(Spots, imVehCode)
    If (tgVpf(imVpfIndex).iLLD(0) <> 0) Or (tgVpf(imVpfIndex).iLLD(1) <> 0) Then
        gUnpackDate tgVpf(imVpfIndex).iLLD(0), tgVpf(imVpfIndex).iLLD(1), slDate
        lmLastLogDate = gDateValue(slDate)
        slDate = gObtainPrevMonday(slDate)
        llVehLLD = gDateValue(slDate)
        If llVehLLD > lmNowMoDate Then
            smCurrentWkDate = Format$(llVehLLD, "m/d/yy")
        Else
            smCurrentWkDate = Format$(lmNowMoDate, "m/d/yy")
        End If
    Else
        lmLastLogDate = -1
        smCurrentWkDate = Format$(lmNowMoDate, "m/d/yy")
    End If
    If (tgVpf(imVpfIndex).sSSellOut <> "B") And (tgVpf(imVpfIndex).sSSellOut <> "U") And (tgVpf(imVpfIndex).sSSellOut <> "M") Then
        If imAvailUn = 1 Then
            imAvailUn = 0
            pbcAvailUn_Paint
        End If
    End If
    If tgVpf(imVpfIndex).sLTiming = "Y" Then
        pbcTimeLog.Visible = True
    Else
        pbcTimeLog.Visible = False
    End If
    slDate = Format$(gNow(), "m/d/yy")
    If ((Asc(tgSpf.sUsingFeatures4) And ALLOWMOVEONTODAY) = ALLOWMOVEONTODAY) Then
        lmEarliestAllowedDate = gDateValue(slDate)
    Else
        lmEarliestAllowedDate = gDateValue(slDate) + 1
    End If
    lmNowDatePlus1 = lmEarliestAllowedDate
    If lmLastLogDate >= lmEarliestAllowedDate Then
        If tgVpf(imVpfIndex).sMoveLLD <> "Y" Then
            If ((Asc(tgSpf.sUsingFeatures4) And ALLOWMOVEONTODAY) = ALLOWMOVEONTODAY) Then
                If lmEarliestAllowedDate <= lmLastLogDate Then
                    lmEarliestAllowedDate = lmLastLogDate + 1 'gDateValue(slDate) + 1
                End If
            Else
                lmEarliestAllowedDate = lmLastLogDate + 1 'gDateValue(slDate) + 1
            End If
        End If
    End If
    'Obtain competitive separation time
    If tgVpf(imVpfIndex).sSCompType = "T" Then
        gUnpackLength tgVpf(imVpfIndex).iSCompLen(0), tgVpf(imVpfIndex).iSCompLen(1), "3", False, slLength
        lmCompTime = CLng(gLengthToCurrency(slLength))
    Else
        lmCompTime = 0&
    End If
    imTFNExist = gLCFTFNExist(hmLcf, "C", imVehCode)

    smMissedFromOthers = "N"
    ilVef = gBinarySearchVef(imVehCode)
    If ilVef <> -1 Then
        If (tgSpf.sHideGhostSptScr <> "Y") And (tgMVef(ilVef).sType = "S") Then
            ckcShowGhost.Visible = True
        Else
            ckcShowGhost.Visible = False
        End If
        For ilVff = LBound(tgVff) To UBound(tgVff) Step 1
            '3/9/17: remove test to handle the case where only one sports vehicle is set and it is the selected vehicle.
            'If tgVff(ilVff).iVefCode <> imVehCode Then
                If tgMVef(ilVef).sType = "G" Then
                    If tgVff(ilVff).sMoveNonToSport = "Y" Then
                        smMissedFromOthers = "Y"
                    End If
                    If tgVff(ilVff).sMoveSportToSport = "Y" Then
                        smMissedFromOthers = "Y"
                    End If
                Else
                    If tgVff(ilVff).sMoveSportToNon = "Y" Then
                        smMissedFromOthers = "Y"
                    End If
                End If
                If smMissedFromOthers = "Y" Then
                    Exit For
                End If
            'End If
        Next ilVff
    Else
        ckcShowGhost.Visible = False
    End If
    Exit Sub
mGetVehIndexErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mHbcAdMdDateChange              *
'*                                                     *
'*             Created:3/01/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Advt missed date change        *
'*                                                     *
'*******************************************************
Private Sub mHbcAdMdDateChange()
    Dim llDate As Long
    Dim slDate As String

    Screen.MousePointer = vbHourglass  'Wait
    'llDate = (hbcAdMdDate.Value - 1) + lmCEarliestDate
    'slDate = Format(llDate, "m/d/yy")
    slDate = edcMissedDt.Text
    llDate = gDateValue(slDate)
    slDate = gFormatDate(slDate)
    'plcAdMdDate.Caption = slDate
    smAdMdMissedDate = slDate
    edcMissedDt.Text = slDate
    mBuildMissedView 1, False
    If Not imProcVefChg Then
        If smMissedDate = "" Then
            'If (imLog2Type = 0) And (plcL1Date.Caption <> "") Then
            If (imLog2Type = 0) And (Trim$(edcLog1Dt.Text) <> "") Then
                'Set dates
                'imIgnoreChg = True
                slDate = edcLog1Dt.Text
                'hbcL2Date.Value = (gDateValue(slDate) - lmCEarliestDate) \ 7 + 1'hbcL1Date.Value
                edcLog2Dt.Text = slDate
                mHbcL2DateChange
                'imIgnoreChg = False
            End If
        End If
    End If
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mHbcAdvtDateChange              *
'*                                                     *
'*             Created:3/01/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Advt date change               *
'*                                                     *
'*******************************************************
Private Sub mHbcAdvtDateChange()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilGsf                                                                                 *
'******************************************************************************************

    Dim slDate As String
    Dim llDate As Long
    Dim slStr As String

    Screen.MousePointer = vbHourglass  'Wait
    'If tmVef.sType <> "G" Then
    '    slDate = edcDate.Text
    '    llDate = gDateValue(slDate)
    'Else
    '    ilGsf = lbcGameNo.ItemData(imSelectedGameNo)
    '    llDate = tmGsfInfo(ilGsf).lGameDate
    '    slDate = Format(llDate, "m/d/yy")
    'End If
    mGetEdcDate 0
    llDate = lmEdcDate
    slDate = smEdcDate
    'llDate = 7 * (hbcContract.Value - 1) + lmCEarliestDate
    'slDate = Format(llDate, "m/d/yy")
    slDate = gFormatDate(slDate)
    If llDate < lmEarliestAllowedDate Then
        'plcDate.ForeColor = RED
        edcDate.ForeColor = RED
    ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
        'plcDate.ForeColor = MAGENTA
        edcDate.ForeColor = MAGENTA
    Else
        'plcDate.ForeColor = BLUE
        edcDate.ForeColor = BLUE
    End If
    'plcDate.Caption = slDate
    If tmVef.sType <> "G" Then
        '2/1/12: Avoid change if date match
        If gDateValue(edcDate.Text) <> gDateValue(slDate) Then
            edcDate.Text = slDate
        Else
            imIgnoreChg = True
            edcDate.Text = slDate
        End If
    End If
    pbcContract.Cls
    If imAdMdType <> 3 Then
        pbcMissed.Cls
        'plcAdMdDate.Caption = ""
        edcMissedDt.Text = ""
        lbcAdvt.ListIndex = -1
        smAdMdSdfMdExtTag = ""
    End If
    mBuildAdvtView  'This read forces vbcChange
    Screen.MousePointer = vbHourglass
'    pbcContract_Paint
    If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
        imIgnoreChg = True
        'hbcAdMdDate.Value = llDate - lmCEarliestDate + 1
        edcMissedDt.Text = Format$(llDate, "m/d/yy")
        'If (imLog2Type = 0) And (smMissedDate = "") Then
        '    imIgnoreChg = True
        '    hbcL2Date.Value = llDate - lmCEarliestDate + 1
        'End If
        mHbcAdMdDateChange
    ElseIf (imAdMdType = 1) Or (imAdMdType = 2) Then
        mBuildMissedView 1, False
    ElseIf (imAdMdType > 3) And (imAdMdType <> 11) Then
        mMakeManSchView 1
    ElseIf (imAdMdType = 11) Then
        mExtraBonusPop lmAdMdManSchCode(), imAdMdManSchInfo(), lbcAdMdManSch, tmAdMdManSchCode()
        mMakeManSchView 1
    End If
    Screen.MousePointer = vbHourglass
    imIgnoreChg = False
    imAdvtBuild = True
    'If hbcAvDate.Value = hbcContract.Value Then
    '    hbcAvDate_Change
    'Else
    '    hbcAvDate.Value = hbcContract.Value
    'End If
    'slDate = edcDate.Text   'plcDate.Caption
    If tmVef.sType <> "G" Then
        mGetEdcDate 0
        slDate = smEdcDate
        slStr = edcAvDate.Text
        If gDateValue(slStr) = gDateValue(slDate) Then
            edcAvDate_Change
        Else
            edcAvDate.Text = slDate
        End If
    Else
        edcAvDate.Text = ""
        edcAvDate.Text = edcLog1Dt.Text
    End If
    pbcAvail.Cls
    pbcAvail_Paint
    imAdvtBuild = False
    mSetCommands
    'Screen.MousePointer = vbDefault    'Default
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mHbcL1DateChange                *
'*                                                     *
'*             Created:3/01/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Log1 date change               *
'*                                                     *
'*******************************************************
Private Sub mHbcL1DateChange()
    Dim llDate As Long
    Dim slDate As String
    Dim llAvDate As Long
    Dim ilL2MissedGen As Integer
    tmcClick.Enabled = False
    Screen.MousePointer = vbHourglass  'Wait
    DoEvents
    ilL2MissedGen = False
    '4/16/11
    If tmVef.sType <> "G" Then
        slDate = edcLog1Dt.Text
        llDate = gDateValue(slDate) '(hbcL1Date.Value - 1) + lmCEarliestDate
    Else
        slDate = mGetL1GameDate()
        If slDate = "" Then
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        llDate = gDateValue(slDate)
    End If
    'slDate = Format(llDate, "m/d/yy")
    'slDate = gFormatDate(slDate)
    If llDate < lmEarliestAllowedDate Then
        'plcL1Date.ForeColor = RED
        edcLog1Dt.ForeColor = RED
    ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
        'plcL1Date.ForeColor = MAGENTA
        edcLog1Dt.ForeColor = MAGENTA
    Else
        'plcL1Date.ForeColor = BLUE'DARKPURPLE'BLUE
        edcLog1Dt.ForeColor = BLUE
    End If
    'plcL1Date.Caption = slDate
    '4/16/11
    If tmVef.sType <> "G" Then
        edcLog1Dt.Text = slDate
    End If
    smLog1Date = slDate
    imLog1Day = gWeekDayStr(smLog1Date)
    mBuildTimeView 1
    'Change avail week date if required
    '4/16/11
    If tmVef.sType <> "G" Then
        llDate = gDateValue(gObtainPrevMonday(slDate))
        slDate = edcAvDate.Text 'plcAvDate.Caption
        llAvDate = gDateValue(gObtainPrevMonday(slDate))
        imIgnoreChg = True
        If llAvDate = 0 Then
            If (imLog2Type = 0) And (smMissedDate = "") Then
                ilL2MissedGen = True
            End If
            'ilValue = (llDate - lmCEarliestDate) \ 7 + 1
            'If (ilValue >= hbcAvDate.Min) And (ilValue <= hbcAvDate.Max) Then
            '    If hbcAvDate.Value <> ilValue Then
            '        hbcAvDate.Value = ilValue
            '    Else
            '        hbcAvDate_Change
            '    End If
            'End If
            edcAvDate.Text = gObtainPrevMonday(Format$(llDate, "m/d/yy"))
            mHbcAdvtDateChange
            If imAvailTm = 1 Then
                mObtainDayparts
            End If
        ElseIf llDate > llAvDate Then
            'If hbcAvDate.Value + (llDate - llAvDate) \ 7 <= hbcAvDate.Max Then
            '    If hbcAvDate.Value <> hbcAvDate.Value + (llDate - llAvDate) \ 7 Then
            '        hbcAvDate.Value = hbcAvDate.Value + (llDate - llAvDate) \ 7
            '    Else
            '        hbcAvDate_Change
            '    End If
            'End If
            edcAvDate.Text = gObtainPrevMonday(Format$(llDate, "m/d/yy"))
            mHbcAdvtDateChange
            If imAvailTm = 1 Then
                mObtainDayparts
            End If
        ElseIf llDate < llAvDate Then
            'If hbcAvDate.Value + (llDate - llAvDate) \ 7 >= hbcAvDate.Min Then
            '    If hbcAvDate.Value <> hbcAvDate.Value + (llDate - llAvDate) \ 7 Then
            '        hbcAvDate.Value = hbcAvDate.Value + (llDate - llAvDate) \ 7
            '    Else
            '        hbcAvDate_Change
            '    End If
            'End If
            edcAvDate.Text = gObtainPrevMonday(Format$(llDate, "m/d/yy"))
            mHbcAdvtDateChange
            If imAvailTm = 1 Then
                mObtainDayparts
            End If
        Else
        End If
    Else
        edcAvDate.Text = ""
        edcAvDate.Text = edcLog1Dt.Text
        pbcAvail.Cls
    End If
    imIgnoreChg = False
    Screen.MousePointer = vbHourglass
    'If missed by date- change date of missed-after hbcAvDate  change, since
    ' this change will cause a hbcContract change that could cause missed to be obtained
    'for the week
    If (imLog2Type = 0) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed or Cancelled Or Hidden by date
        imIgnoreChg = True
        If tmVef.sType <> "G" Then
            If smLog2Date <> "" Then
                If gDateValue(smLog2Date) <> gDateValue(smLog1Date) Then
                    slDate = smLog1Date
                    'hbcL2Date.Value = (gDateValue(slDate) - lmCEarliestDate) \ 7 + 1'hbcL1Date.Value
                    edcLog2Dt.Text = slDate
                End If
            Else
                slDate = edcLog1Dt.Text
                'hbcL2Date.Value = (gDateValue(slDate) - lmCEarliestDate) \ 7 + 1'hbcL1Date.Value
                edcLog2Dt.Text = slDate
            End If
        End If
        imIgnoreChg = False
        If (Not imProcVefChg) And (Not ilL2MissedGen) Then 'Avoid double painting of missed area within log2
            mHbcL2DateChange
        End If
    ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then
        mMakeManSchView 0
    End If
    pbcLog1_Paint
    pbcLog2_Paint
    pbcAvail_Paint
    imIgnoreChg = False
    Screen.MousePointer = vbDefault    'Default
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mHbcL2DateChange                *
'*                                                     *
'*             Created:3/01/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Log2 date change               *
'*                                                     *
'*******************************************************
Private Sub mHbcL2DateChange()
    Dim llDate As Long
    Dim slDate As String
    tmcClick.Enabled = False
    If imLog2Type = 4 Then  'Log date
        Screen.MousePointer = vbHourglass  'Wait
        '4/16/11
        If tmVef.sType <> "G" Then
            slDate = edcLog2Dt.Text
            If Trim$(slDate) = "" Then
                slDate = edcLog1Dt.Text
            End If
            If Trim$(slDate) = "" Then
                If lmEarliestAllowedDate > 0 Then
                    slDate = Format$(lmEarliestAllowedDate, "m/d/yy")
                Else
                    slDate = Format$(lmNowDatePlus1, "m/d/yy")
                End If
            End If
            slDate = gFormatDate(slDate)
            llDate = gDateValue(slDate)
        Else
            slDate = mGetL2GameDate()
            If slDate = "" Then
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
            llDate = gDateValue(slDate)
        End If
        'llDate = (hbcL2Date.Value - 1) + lmCEarliestDate
        'slDate = Format(llDate, "m/d/yy")
        'slDate = gFormatDate(slDate)
        If llDate < lmEarliestAllowedDate Then
            'plcL2Date.ForeColor = RED
            edcLog2Dt.ForeColor = RED
        ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
            'plcL2Date.ForeColor = MAGENTA
            edcLog2Dt.ForeColor = MAGENTA
        Else
            'plcL2Date.ForeColor = BLUE'DARKPURPLE'BLUE
            edcLog2Dt.ForeColor = BLUE
        End If
        'plcL2Date.Caption = slDate
        '4/16/11
        If tmVef.sType <> "G" Then
            edcLog2Dt.Text = slDate
        End If
        smLog2Date = slDate
        imLog2Day = gWeekDayStr(smLog2Date)
        mBuildTimeView 2
    ElseIf (imLog2Type = 0) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
        Screen.MousePointer = vbHourglass  'Wait
        If tmVef.sType <> "G" Then
            slDate = edcLog2Dt.Text
            slDate = gFormatDate(slDate)
            llDate = gDateValue(slDate)
            'llDate = (hbcL2Date.Value - 1) + lmCEarliestDate
            'slDate = Format(llDate, "m/d/yy")
            'slDate = gFormatDate(slDate)
            'plcL2Date.ForeColor = BLACK
            edcLog2Dt.ForeColor = BLACK
            If Not imProcVefChg Then
                'plcL2Date.Caption = slDate
                edcLog2Dt.Text = slDate
                smMissedDate = slDate
                If smAdMdMissedDate = "" Then
                    If imAdMdType = 0 Then
                        mHbcAdMdDateChange
                        Screen.MousePointer = vbHourglass
                    End If
                End If
            End If
        End If
        mBuildMissedView 0, True    'False
    End If
    pbcLog1_Paint
    pbcLog2_Paint
    Screen.MousePointer = vbDefault    'Default
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInit                           *
'*                                                     *
'*             Created:10/27/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize modular             *
'*                                                     *
'*******************************************************
Private Sub mInit()
'
'   mInit
'   Where:
'
    Dim ilRet As Integer    'Return Status
    Dim slDate As String
    Dim ilVehCode As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilLoop As Integer

    Screen.MousePointer = vbHourglass
    smOverbookMode = "N"
    imLBCtrls = 1
    imLBSpotInfoCtrls = 1
    imLBACtrls = 1
    imLBL1Ctrls = 1
    imLBL2Ctrls = 1
    imLBWACtrls = 1
    imLBAvCtrls = 1
    imLBCDCtrls = 1
    imLBSizeCtrls = 1
    imLBEvt = 1
    
    imLBSdfMdExt = 1
    igJobShowing(SPOTSJOB) = True
    imIgnoreDone = False
    imFirstActivate = True
    imcKey.Picture = IconTraf!imcKey.Picture
    imcTrash.Picture = IconTraf!imcTrashClosed.Picture
    imcPrt.Picture = IconTraf!imcPrinter.Picture    'IconTraf!imcCamera.Picture
    imcFont.Picture = IconTraf!imcMag.Picture
    slDate = Format$(gNow(), "m/d/yy")
    'mParseCmmdLine
    slDate = Format$(gNow(), "m/d/yy")
    'EName.Height = cmcReport.Top + 5 * cmcReport.Height / 3
    smDefFontName = pbcContract.FontName
    fmDefFontSize = pbcContract.FontSize
    smSpotFont = tgUrf(0).sSpotFont
    If (smSpotFont <> "S") And (smSpotFont <> "A") Then
        smSpotFont = "A"
    End If

    lmFeedSpotColor = DARKGRAY  'GRAY
    gCenterForm Spots
    Spots.Show
    mInitDim
    ReDim tmStationsClf(0 To 0) As INTKEY0
    ReDim tmStationsHL(0 To 0) As INTKEY0
    
    'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
    ReDim tmWAMdExt(0 To 1) As SDFMDEXT
    ReDim tmSdfExtSort(0 To 0) As SDFEXTSORT
    Screen.MousePointer = vbHourglass
    pbcSelect(0).Move 90, 675   '60, 570   '465
    pbcSelect(1).Move 90, 675   '60, 570
    plcAdvertiser.Move 90, 1380 '1260    '570
    plcTime.Move 90, 1380   '1260   '1065  '555
    imDW = 1
    imMore = 0
    imHighlight = 0
    imViewSelect = 0
    imClearHighlight = True
    imFirstLog1 = True
    imFirstLog2 = True
    imFirstDate = True
    imFirstMissed = True
    imFirstAv = True
    imFirstNote = True
    imTFNExist = False
    imFirstFocus = True
    vbcHold.Min = 1
    vbcHold.Max = 1
    vbcAdWorkArea.Min = 1
    vbcAdWorkArea.Max = 1
    
    imAdMdLastSelection = -1
    imWALastSelection = -1
    imAdMdSelectionCount = 0
    imWASelectionCount = 0
    bmWorkPopulated = False
    bmClearLogAlert = False

    imTerminate = False
    imStartMode = True
    imSelectDelay = False
    imDelayType = -1
    imVehSelectedIndex = -1
    imChgMode = False
    imSeasonChgMode = False
    imCntChgMode = False
    imMdChgMode = False
    imProcVefChg = False 'Avoid double painting of missed area within log2
    imIgnoreRightMove = False
    imRowRightMouse = -1
    imColRightMouse = -1
    imSortIndex = -1
    imIgnoreGotFocus = False
    imL2TypeChgMode = False
    imMoreChgMode = False
    imDWChgMode = False
    imMCReasonChgMode = False
    imGameNoChgMode = False
    imAdvtChgMode = False
    imAdMdTypeChgMode = False
    imAdMdAdvtChgMode = False
    imAdvtBuild = False
    imBSMode = False
    imSettingValue = False
    imLbcArrowSetting = False
    lmSelectedChfCode = -1
    imSelectedLineNo = -1
    imSelectedAdvt = -1
    imAdMdSelectedAdvt = -1
    lmSdfRecPosHighlight = 0
    imWhereComp1 = -1
    imWhereComp2 = -1
    imShowWhere = False
    'lmL1SdfRecPosHighlight = 0
    'lmL2SdfRecPosHighlight = 0
    imLog2Show = 0
    imADMdShow = 0
    smLog1Date = ""
    smLog2Date = ""
    smMissedDate = ""
    smAdMdMissedDate = ""
    imHighlightAdvtCode = -1
    lmHighlightCntrCode = -1
    lmHighlightFeedCode = -1
    smHighlightSplitNetwork = ""
    imDragRowNoSrce = -1
    ReDim imTestDragIndex(0 To 0) As Integer
    imDragSrce = -1
    imDblClick = 0
    smInfoCaption = ""
    imDblClickMode = 0
    imToggleRot = 0
    imToggleDate = 1
    imNoSpotInfo = 0
    imMnfMissed = igDefaultMnfMissed    'igMnfMissed
    imCalType = 0   'Standard
    slDate = Format$(gNow(), "m/d/yy")
    slDate = gObtainPrevMonday(slDate)
    lmNowMoDate = gDateValue(slDate)
    imIgnoreChg = False
    imcTrash.Visible = False
    'imcTrash.Picture = IconTraf!imcBoxClosed.Picture
    imcPrt.Visible = False
    imcKey.Visible = True
    igBtrError = BTRV_ERR_NONE
    sgErrLoc = ""
    smDragSrcePrgName = ""
    smDragDestPrgName = ""
    gObtainMissedReasonCode
    smMissedCodeTag = ""
    mMissedPop
    ReDim tmCff0(0 To 0) As CFF
    ReDim tmCff1(0 To 0) As CFF
    If imTerminate Then
        Exit Sub
    End If
    mTeamPop
    '
    'Remove this code when vehicle lock removed- this code is how required so spot price can be obtained
    '
    ' Vehicle File
    If Not mOpenTwoHandles(True) Then
        imTerminate = True
        Exit Sub
    End If
    imVefRecLen = Len(tmVef)  'Get and save VEF record length
    hmVsf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmVsf, "", sgDBPath & "Vsf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Vsf.Btr)", Spots
    On Error GoTo 0

    '
    'End of removal
    '
    ' Spot Detail File
    imSdfRecLen = Len(tmSdf)  'Get and save SDF record length
    ' Spot schedule File
    imSsfRecLen = Len(tmSsf(0))  'Get and save ADF record length
    'Header
    hmCHF = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCHF, "", sgDBPath & "Chf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Chf.Btr)", Spots
    On Error GoTo 0
    imCHFRecLen = Len(tmChf)  'Get and save CHF record length
    'Line
    hmClf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmClf, "", sgDBPath & "Clf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Clf.Btr)", Spots
    On Error GoTo 0
    imClfRecLen = Len(tmClf)  'Get and save CLF record length
    'Comment
    hmCxf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCxf, "", sgDBPath & "Cxf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Cxf.Btr)", Spots
    On Error GoTo 0
    imCxfRecLen = Len(tmCxf)  'Get and save CLF record length
    'Advertiser
    hmAdf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmAdf, "", sgDBPath & "Adf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Adf.Btr)", Spots
    On Error GoTo 0
    imAdfRecLen = Len(tmAdf)  'Get and save ADF record length
    'MultiName
    hmMnf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmMnf, "", sgDBPath & "Mnf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Mnf.Btr)", Spots
    On Error GoTo 0
    imMnfRecLen = Len(tmMnf)  'Get and save MNF record length
    'Demo
    hmDrf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmDrf, "", sgDBPath & "Drf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Drf.Btr)", Spots
    On Error GoTo 0
    imDrfRecLen = Len(tmDrf)  'Get and save DRF record length
    'Plus Demo
    hmDpf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmDpf, "", sgDBPath & "Dpf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Dpf.Btr)", Spots
    On Error GoTo 0
    lgDpfNoRecs = btrRecords(hmDpf)
    'Research Estimate
    hmDef = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmDef, "", sgDBPath & "Def.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Def.Btr)", Spots
    On Error GoTo 0
    'Record Lock
    hmRlf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmRlf, "", sgDBPath & "Rlf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Rlf.Btr)", Spots
    On Error GoTo 0
    'Avail Name
    hmAnf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmAnf, "", sgDBPath & "Anf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Anf.Btr)", Spots
    On Error GoTo 0
    imAnfRecLen = Len(tmAnf)  'Get and save ANF record length
    'Salesperson
    hmSlf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmSlf, "", sgDBPath & "Slf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Slf.Btr)", Spots
    On Error GoTo 0
    imSlfRecLen = Len(tmSlf)  'Get and save CLF record length
    'Rotation
    hmCrf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCrf, "", sgDBPath & "Crf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Crf.Btr)", Spots
    On Error GoTo 0
    imCrfRecLen = Len(tmCrf)  'Get and save CLF record length
    'Short Title
    hmSif = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmSif, "", sgDBPath & "Sif.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Sif.Btr)", Spots
    On Error GoTo 0
    imSifRecLen = Len(tmSif)  'Get and save CLF record length
    'Daypart
    hmRdf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmRdf, "", sgDBPath & "Rdf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Rdf.Btr)", Spots
    On Error GoTo 0
    imRdfRecLen = Len(tmLnRdf)  'Get and save RPF record length
    'Line flights
    hmCff = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCff, "", sgDBPath & "Cff.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Cff.Btr)", Spots
    On Error GoTo 0
    imCffRecLen = Len(tmCff(0))  'Get and save CFF record length
    hmCgf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCgf, "", sgDBPath & "Cgf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Cgf.Btr)", Spots
    On Error GoTo 0
    imCgfRecLen = Len(tmCgf)  'Get and save CHF record length
    hmSwf = CBtrvTable(TEMPHANDLE)
    ilRet = btrOpen(hmSwf, "", sgDBPath & "Swf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Swf.Btr)", Spots
    On Error GoTo 0
    imSwfRecLen = Len(tmSwf)  'Get and save SWF record length
    ' Spot MG File
    imSmfRecLen = Len(tmSmfA)  'Get and save SMF record length
    tmSmfA.lChfCode = 0
    tmSmfB.lChfCode = 0
    'Spot tracking
    imStfRecLen = Len(tmStf)  'Get and save STF record length
    'Copy Inventory
    hmCif = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCif, "", sgDBPath & "Cif.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Cif.Btr)", Spots
    On Error GoTo 0
    imCifRecLen = Len(tmCif)  'Get and save CHF record length
    'Copy Product
    hmCpf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmCpf, "", sgDBPath & "Cpf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Cpf.Btr)", Spots
    On Error GoTo 0
    imCpfRecLen = Len(tmCpf)  'Get and save CHF record length
    'Zone
    hmTzf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmTzf, "", sgDBPath & "Tzf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Tzf.Btr)", Spots
    On Error GoTo 0
    imTzfRecLen = Len(tmTzf)  'Get and save CHF record length
    'Media
    hmMcf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmMcf, "", sgDBPath & "Mcf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Mcf.Btr)", Spots
    On Error GoTo 0
    imMcfRecLen = Len(tmMcf)  'Get and save CHF record length
    'Product
    hmPrf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmPrf, "", sgDBPath & "Prf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Prf.Btr)", Spots
    On Error GoTo 0
    'Feed
    hmFsf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmFsf, "", sgDBPath & "Fsf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Fsf.Btr)", Spots
    On Error GoTo 0
    imFsfRecLen = Len(tmFsf)  'Get and save CHF record length
    'Feed Name
    hmFnf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmFnf, "", sgDBPath & "Fnf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Fnf.Btr)", Spots
    On Error GoTo 0
    'Game Header
    hmGhf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmGhf, "", sgDBPath & "Ghf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Ghf.Btr)", Spots
    On Error GoTo 0
    imGhfRecLen = Len(tmGhf)  'Get and save CHF record length
    'Game Schedule
    hmGsf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmGsf, "", sgDBPath & "Gsf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Gsf.Btr)", Spots
    On Error GoTo 0
    If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS) Then
        hmRaf = CBtrvTable(ONEHANDLE) 'CBtrvObj()
        ilRet = btrOpen(hmRaf, "", sgDBPath & "Raf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
        On Error GoTo mInitErr
        gBtrvErrorMsg ilRet, "mInit (btrOpen: Raf.Btr)", Spots
        On Error GoTo 0
        imRafRecLen = Len(tmRaf)
        hmSef = CBtrvTable(ONEHANDLE) 'CBtrvObj()
        ilRet = btrOpen(hmSef, "", sgDBPath & "Sef.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
        On Error GoTo mInitErr
        gBtrvErrorMsg ilRet, "mInit (btrOpen: Sef.Btr)", Spots
        On Error GoTo 0
        ilRet = gObtainStations()
    End If

    hmSxf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hmSxf, "", sgDBPath & "Sxf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Sxf.Btr)", Spots
    On Error GoTo 0
    imSxfRecLen = Len(tmSxf)  'Get and save SXF record length

    hmPaf = CBtrvTable(ONEHANDLE)
    ilRet = btrOpen(hmPaf, "", sgDBPath & "Paf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mInitErr
    gBtrvErrorMsg ilRet, "mInit (btrOpen: Paf.Btr)", Spots
    On Error GoTo 0

    gObtainPostLogAvailCode
    mInitBox
    ReDim tmMoEvt(0 To imLBEvt) As EVTINFO
    ReDim tmTuEvt(0 To imLBEvt) As EVTINFO
    ReDim tmWeEvt(0 To imLBEvt) As EVTINFO
    ReDim tmThEvt(0 To imLBEvt) As EVTINFO
    ReDim tmFrEvt(0 To imLBEvt) As EVTINFO
    ReDim tmSaEvt(0 To imLBEvt) As EVTINFO
    ReDim tmSuEvt(0 To imLBEvt) As EVTINFO
    imL1View = 0    '0=Avail/Spot; 1= All events
    pbcL1View_Paint
    imAvailPd = 1       '0=Weekly; 1=Daily
    If ((Asc(tgUrf(0).sAvailSettings) And AVAILBYWD) <> AVAILBYWD) Then
        imAvailPd = 0       '0=Weekly; 1=Daily
    End If
    pbcAvailPd_Paint
    imAvailTm = 0       '0=Hourly; 1=Daypart
    If ((Asc(tgUrf(0).sAvailSettings) And AVAILBYHD) = AVAILBYHD) Then
        imAvailTm = 1       '0=Hourly; 1=Daypart
    End If
    pbcAvailTm_Paint
    imAvailSd = 0       '0=Sold; 1=avails; 2=inventory
    If ((Asc(tgUrf(0).sAvailSettings) And AVAILBYSAI) = &H4) Then
        imAvailSd = 1       '0=Sold; 1=avails; 2=inventory
    ElseIf ((Asc(tgUrf(0).sAvailSettings) And AVAILBYSAI) = &H8) Then
        imAvailSd = 2       '0=Sold; 1=avails; 2=inventory
    End If
    pbcAvailSd_Paint
    imAvailNo = 0       '0=#; 1=%
    If ((Asc(tgUrf(0).sAvailSettings) And AVAILBYNP) = AVAILBYNP) Then
        imAvailNo = 1       '0=#; 1=%
    End If
    pbcAvailNo_Paint
    imAvailUn = 0       '0=Units; 1=Seconds
    If ((Asc(tgUrf(0).sAvailSettings) And AVAILBYUS) = AVAILBYUS) Then
        imAvailUn = 1       '0=Units; 1=Seconds
    End If
    pbcAvailUn_Paint
    imL1View = 0        '0=avail/spot; 1=all events
    cbcVehicle.Clear 'Force population
    mVehPop
    If imTerminate Then ' this is set by mVehPop if error occurs
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ''lbcMissed.Clear 'Force list box to be populated
    'smMissedCodeTag = ""
    'mMissedPop
    'If imTerminate Then
    '    Exit Sub
    'End If
    ilRet = gObtainAvail()
    If Not ilRet Then ' this is set by mVehPop if error occurs
        imTerminate = True
        Exit Sub
    End If
    ilRet = gObtainAdvt()
    If Not ilRet Then ' this is set by mVehPop if error occurs
        imTerminate = True
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    ilRet = gObtainComp()
    If Not ilRet Then ' this is set by mVehPop if error occurs
        imTerminate = True
        Exit Sub
    End If
    lbcAdvt.Clear 'Force population
    mAdvtPop
    If imTerminate Then ' this is set by mVehPop if error occurs
        Exit Sub
    End If
    ilRet = gObtainVef()
    Screen.MousePointer = vbHourglass
    ilRet = gVffRead()
    lbcMore.AddItem "[None]", 0
    lbcMore.ItemData(lbcMore.NewIndex) = 0
    lbcMore.AddItem "Price"
    lbcMore.ItemData(lbcMore.NewIndex) = 1
    If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS) Then
        lbcMore.AddItem "Region"
        lbcMore.ItemData(lbcMore.NewIndex) = 2
    End If
    lbcMore.AddItem "Instruction #"
    lbcMore.ItemData(lbcMore.NewIndex) = 7
    lbcMore.AddItem "Cart #"
    lbcMore.ItemData(lbcMore.NewIndex) = 6
    lbcMore.AddItem "ISCI"
    lbcMore.ItemData(lbcMore.NewIndex) = 3
    lbcMore.AddItem "Creative Title"
    lbcMore.ItemData(lbcMore.NewIndex) = 4
    If ((Asc(tgSpf.sUsingFeatures) And LIVECOPY) = LIVECOPY) Then  'Using Live Copy
        lbcMore.AddItem "Live/Recorded"
        lbcMore.ItemData(lbcMore.NewIndex) = 5
    End If
    lbcMore.AddItem "Daypart"
    lbcMore.ItemData(lbcMore.NewIndex) = 9
    If (Trim$(tgUrf(0).sName) = sgCPName) Or (Trim$(tgUrf(0).sName) = sgSUName) Then
        lbcMore.AddItem "SdfCode"
        lbcMore.ItemData(lbcMore.NewIndex) = 8
    End If
    '4/16/11
    'mInitL2MissedDropdown
'    lbcLog2Type.AddItem "Missed Current Week"    '0
'    imLog2Map(lbcLog2Type.NewIndex) = 0
'    'lbcLog2Type.AddItem "Missed by Date-Contract"
'    lbcLog2Type.AddItem "Missed Current Month"    '1
'    imLog2Map(lbcLog2Type.NewIndex) = 1
'    lbcLog2Type.AddItem "Missed Past Months"    '2
'    imLog2Map(lbcLog2Type.NewIndex) = 2
'    lbcLog2Type.AddItem "Missed by Advertiser"    '3
'    imLog2Map(lbcLog2Type.NewIndex) = 3
'    lbcLog2Type.AddItem "Log 2"    '4
'    imLog2Map(lbcLog2Type.NewIndex) = 4
'    If tgSpf.sSchdRemnant <> "Y" Then
'        lbcLog2Type.AddItem "Remnant"    '5
'        imLog2Map(lbcLog2Type.NewIndex) = 5
'    End If
'    lbcLog2Type.AddItem "Direct Response"    '6
'    imLog2Map(lbcLog2Type.NewIndex) = 6
'    lbcLog2Type.AddItem "Per Inquiry"    '7
'    imLog2Map(lbcLog2Type.NewIndex) = 7
'    If tgSpf.sSchdPSA <> "Y" Then
'        lbcLog2Type.AddItem "PSA"    '8
'        imLog2Map(lbcLog2Type.NewIndex) = 8
'    End If
'    If tgSpf.sSchdPromo <> "Y" Then
'        lbcLog2Type.AddItem "Promo"    '9
'        imLog2Map(lbcLog2Type.NewIndex) = 9
'    End If
'    lbcLog2Type.AddItem "Cancelled by Date"    '10
'    imLog2Map(lbcLog2Type.NewIndex) = 10
'    lbcLog2Type.AddItem "Hidden by Date"    '11
'    imLog2Map(lbcLog2Type.NewIndex) = 11
'    lbcLog2Type.Height = gListBoxHeight(lbcLog2Type.ListCount, 12)
'Moved to mInitMissedDropdown
'    lbcAdMdType.AddItem "Current Week"  '"Missed Current Week"    '0
'    imAdMdMap(lbcAdMdType.NewIndex) = 0
'    'lbcAdMdType.AddItem "Missed by Date-Contract"
'    lbcAdMdType.AddItem "Current Month" '"Missed Current Month"    '1
'    imAdMdMap(lbcAdMdType.NewIndex) = 1
'    lbcAdMdType.AddItem "Past Month"    '"Missed Past Months"    '2
'    imAdMdMap(lbcAdMdType.NewIndex) = 2
'    lbcAdMdType.AddItem "Advertiser"    '"Missed by Advertiser"    '3
'    imAdMdMap(lbcAdMdType.NewIndex) = 3
'    If tgSpf.sSchdRemnant <> "Y" Then
'        lbcAdMdType.AddItem "Remnant"    '4
'        imAdMdMap(lbcAdMdType.NewIndex) = 4
'    End If
'    lbcAdMdType.AddItem "Direct Response"    '5
'    imAdMdMap(lbcAdMdType.NewIndex) = 5
'    lbcAdMdType.AddItem "Per Inquiry"    '6
'    imAdMdMap(lbcAdMdType.NewIndex) = 6
'    If tgSpf.sSchdPSA <> "Y" Then
'        lbcAdMdType.AddItem "PSA"    '7
'        imAdMdMap(lbcAdMdType.NewIndex) = 7
'    End If
'    If tgSpf.sSchdPromo <> "Y" Then
'        lbcAdMdType.AddItem "Promo"    '8
'        imAdMdMap(lbcAdMdType.NewIndex) = 8
'    End If
'    lbcAdMdType.AddItem "Cancelled by Date"    '9
'    imAdMdMap(lbcAdMdType.NewIndex) = 9
'    lbcAdMdType.AddItem "Hidden by Date"    '10
'    imAdMdMap(lbcAdMdType.NewIndex) = 10
'    'lbcAdMdType.AddItem "Extra Bonus"  'Replaced by Fill- all code left in,
'                                        'incase need to reinstall just remove comment symbol
'    lbcAdMdType.Height = gListBoxHeight(lbcAdMdType.ListCount, 11)
'    Spots.Height = cmcReport.Top + 5 * cmcReport.Height / 3
    'gCenterForm Spots
    'This code replace for test if vehicle in use below--
    'gFindMatch sgUserDefVehicleName, 0, cbcVehicle
    'If gLastFound(cbcVehicle) >= 0 Then
    '    cbcVehicle.ListIndex = gLastFound(cbcVehicle)
    'Else
    '    If cbcVehicle.ListCount > 0 Then
    '       cbcVehicle.ListIndex = 0
    '    End If
    'End if
    '
    'Don't select a default vehicle if in use
    '
    'Remove this code when vehicle lock removed
    '
    'when this code is removed reinstate code above
    '
    If igAlertSpotStatus = 1 Then
        gFindMatch sgAlertSpotVehicle, 0, cbcVehicle
        If gLastFound(cbcVehicle) >= 0 Then
            slNameCode = tmUserVehicle(gLastFound(cbcVehicle)).sKey  'Traffic!lbcUserVehicle.List(gLastFound(cbcVehicle))
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilVehCode = Val(slCode)
            tmVefSrchKey.iCode = ilVehCode
            ''ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
            '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'Else
            '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_MULT_NOWAIT, SETFORREADONLY)   'Get first record as starting point of extend operation
            'End If
            ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                'If tmVef.sSpotLock <> "Y" Then
                    cbcVehicle.ListIndex = gLastFound(cbcVehicle)
                'End If
            End If
            edcDate.Text = sgAlertSpotMoDate
        End If
    Else
        gFindMatch sgUserDefVehicleName, 0, cbcVehicle
        If gLastFound(cbcVehicle) >= 0 Then
            slNameCode = tmUserVehicle(gLastFound(cbcVehicle)).sKey  'Traffic!lbcUserVehicle.List(gLastFound(cbcVehicle))
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilVehCode = Val(slCode)
            tmVefSrchKey.iCode = ilVehCode
            ''ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
            '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'Else
            '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_MULT_NOWAIT, SETFORREADONLY)   'Get first record as starting point of extend operation
            'End If
            ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                'If tmVef.sSpotLock <> "Y" Then
                    cbcVehicle.ListIndex = gLastFound(cbcVehicle)
                'End If
            End If
        End If
    End If
    If cbcVehicle.ListIndex < 0 Then
        For ilLoop = 0 To cbcVehicle.ListCount - 1 Step 1
            slNameCode = tmUserVehicle(ilLoop).sKey    'Traffic!lbcUserVehicle.List(ilLoop)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilVehCode = Val(slCode)
            tmVefSrchKey.iCode = ilVehCode
            ''ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
            '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'Else
            '    ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_MULT_NOWAIT, SETFORREADONLY)   'Get first record as starting point of extend operation
            'End If
            ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                'If tmVef.sSpotLock <> "Y" Then
                    cbcVehicle.ListIndex = ilLoop
                    Exit For
                'End If
            End If
        Next ilLoop
    End If
    '
    'End of removal
    '
    'Traffic!plcHelp.Caption = ""
    For ilLoop = imLBCtrls To UBound(tmCtrls) Step 1
        mSetShow ilLoop
    Next ilLoop
    If tmVef.sType <> "G" Then
        plcCalendar.Visible = True
        lbcGameNo(0).Visible = False
        lbcGameNo(1).Visible = False
        lbcGameNo(2).Visible = False
        lbcGameNo(3).Visible = False
    Else
        plcCalendar.Visible = False
        If imDW = 1 Then
            imGameNoIndex = 0
            lbcGameNo(0).Visible = True
        Else
            imGameNoIndex = 1
            lbcGameNo(1).Visible = True
        End If
    End If
    pbcSelect_Paint imDW
    pbcReschd.Move (Spots.Width - pbcReschd.Width) / 2, (Spots.height - pbcReschd.height) / 2
    Screen.MousePointer = vbDefault
    Exit Sub
mInitErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInitBox                        *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set mouse and control locations*
'*                                                     *
'*******************************************************
Private Sub mInitBox()
'
'   mInitBox
'   Where:
'
    Dim flTextHeight As Single  'Standard text height
    Dim ilLoop As Integer
    Dim llMax As Long
    Dim llAdjTop As Long
    flTextHeight = pbcContract.TextHeight("1") - 35

    'Calendar set in Form_Activate
    'plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.Height + 15
    lbcGameNo(0).Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
    'plcAdvertiser.Move 135, 570
    'plcTime.Move 105, 555
    'Spot information
'    If (Trim$(tgUrf(0).sName) = sgCPName) Then
'        pbcDW.Visible = True
'        pbcDW.Enabled = True
'        cbcVehicle.Move pbcDW.Left + pbcDW.Width + 30, cbcVehicle.Top, cbcVehicle.Width - pbcDW.Width - 60
'    End If
    'Selections
    'Price
    gSetCtrl tmCtrls(SHOWPRICEINDEX), 405 + 30, 255, 375, fgBoxStH
    tmCtrls(SHOWPRICEINDEX).iReq = False
    'View
    gSetCtrl tmCtrls(VIEWINDEX), 825 + 30, tmCtrls(SHOWPRICEINDEX).fBoxY, 660, fgBoxStH
    tmCtrls(VIEWINDEX).iReq = False
    'Highlight
    gSetCtrl tmCtrls(HIGHLIGHTINDEX), 1530 + 30, tmCtrls(SHOWPRICEINDEX).fBoxY, 1080, fgBoxStH
    tmCtrls(HIGHLIGHTINDEX).iReq = False
    'Work Area
    gSetCtrl tmCtrls(WORKAREAINDEX), 2655 + 30, tmCtrls(SHOWPRICEINDEX).fBoxY, 2250, fgBoxStH
    tmCtrls(WORKAREAINDEX).iReq = False
    'Missed Area
    gSetCtrl tmCtrls(MISSEDAREAINDEX), 4950 + 30, tmCtrls(SHOWPRICEINDEX).fBoxY, 2790, fgBoxStH
    tmCtrls(MISSEDAREAINDEX).iReq = False
    'Missed Reason
    gSetCtrl tmCtrls(MISSEDREASONINDEX), 7785 + 30, tmCtrls(SHOWPRICEINDEX).fBoxY, 1395, fgBoxStH
    tmCtrls(MISSEDREASONINDEX).iReq = False
    'Cancel Reason
    gSetCtrl tmCtrls(CANCELREASONINDEX), 9215 + 30, tmCtrls(SHOWPRICEINDEX).fBoxY, 1395, fgBoxStH
    tmCtrls(CANCELREASONINDEX).iReq = False
    'Right mouse spot information
    'Contract number
    gSetCtrl tmSpotInfoCtrls(1), 60, 120, 825, fgBoxStH - 90
    'Line number
    gSetCtrl tmSpotInfoCtrls(2), 930, tmSpotInfoCtrls(1).fBoxY, 480, fgBoxStH - 90
    'Advertiser, Product
    gSetCtrl tmSpotInfoCtrls(3), 1425, tmSpotInfoCtrls(1).fBoxY, 2490, fgBoxStH - 90
    'Salesperson
    gSetCtrl tmSpotInfoCtrls(4), 30, 375, 1770, fgBoxStH - 90
    'Competitive
    gSetCtrl tmSpotInfoCtrls(5), 1815, tmSpotInfoCtrls(4).fBoxY, 2700, fgBoxStH - 90
    'Date
    gSetCtrl tmSpotInfoCtrls(6), 30, 630, 1140, fgBoxStH - 90
    'Time
    gSetCtrl tmSpotInfoCtrls(7), 1185, tmSpotInfoCtrls(6).fBoxY, 1440, fgBoxStH - 90
    'SpotInformation
    gSetCtrl tmSpotInfoCtrls(8), 2640, tmSpotInfoCtrls(6).fBoxY, 255, fgBoxStH - 90
    For ilLoop = 9 To 15 Step 1
        gSetCtrl tmSpotInfoCtrls(ilLoop), tmSpotInfoCtrls(ilLoop - 1).fBoxX + tmSpotInfoCtrls(ilLoop - 1).fBoxW + 15, tmSpotInfoCtrls(6).fBoxY, 210, fgBoxStH - 90
    Next ilLoop
    'Package
    gSetCtrl tmSpotInfoCtrls(16), 30, 885, 900, fgBoxStH - 90
    'Demo
    gSetCtrl tmSpotInfoCtrls(17), 945, tmSpotInfoCtrls(16).fBoxY, 2430, fgBoxStH - 90
    'Price
    gSetCtrl tmSpotInfoCtrls(18), 3390, tmSpotInfoCtrls(16).fBoxY, 1125, fgBoxStH - 90
    'Advertiser
    'gSetCtrl tmACtrls(1), 30, 30, 1245, fgBoxGridH
    gSetCtrl tmACtrls(1), 15, 15, fmAdjFactorW * 1245, fgBoxGridH
    Do While (tmACtrls(1).fBoxW Mod 15) <> 0
        tmACtrls(1).fBoxW = tmACtrls(1).fBoxW + 1
    Loop
    For ilLoop = 2 To 7 Step 1
        gSetCtrl tmACtrls(ilLoop), tmACtrls(ilLoop - 1).fBoxX + tmACtrls(ilLoop - 1).fBoxW + 15, tmACtrls(1).fBoxY, tmACtrls(1).fBoxW, tmACtrls(1).fBoxH
    Next ilLoop
    'Time screen
    pbcLog1.Width = fmAdjFactorW * pbcLog1.Width
    Do While (pbcLog1.Width Mod 15) <> 0
        pbcLog1.Width = pbcLog1.Width + 1
    Loop
    gSetCtrl tmL1Ctrls(1), 15, 15, pbcLog1.Width - 30, fgBoxGridH
    pbcLog2.Width = pbcLog1.Width
    gSetCtrl tmL2Ctrls(1), 15, 15, pbcLog2.Width - 30, fgBoxGridH
    pbcMissed.Width = pbcLog1.Width
    pbcMissed.Picture = LoadPicture("")
    pbcAdWorkArea.Width = pbcLog1.Width
    gSetCtrl tmWACtrls(1), 15, 15, pbcAdWorkArea.Width - 30, fgBoxGridH
    pbcAdWorkArea.Picture = LoadPicture("")

    gSetCtrl tmAvCtrls(1), 15, 15, fmAdjFactorW * 570, fgBoxGridH
    Do While (tmAvCtrls(1).fBoxW Mod 15) <> 0
        tmAvCtrls(1).fBoxW = tmAvCtrls(1).fBoxW - 1
    Loop
    gSetCtrl tmAvCtrls(2), 600, 30, fmAdjFactorW * 495, fgBoxGridH
    Do While (tmAvCtrls(2).fBoxW Mod 15) <> 0
        tmAvCtrls(2).fBoxW = tmAvCtrls(2).fBoxW + 1
    Loop
    For ilLoop = 3 To 8 Step 1
        gSetCtrl tmAvCtrls(ilLoop), tmAvCtrls(ilLoop - 1).fBoxX + tmAvCtrls(ilLoop - 1).fBoxW + 15, tmAvCtrls(2).fBoxY, tmAvCtrls(2).fBoxW, tmAvCtrls(2).fBoxH
    Next ilLoop
    'Align dropdowns
    lbcLog2Type.Move pbcSelect(0).Left + edcLog2Type.Left, pbcSelect(0).Top + edcLog2Type.Top + edcLog2Type.height
    'lbcAdvt.Move plcTime.Left + edcLog2Dt.Left, plcTime.Top + edcLog2Dt.Top + edcLog2Dt.Height
    lbcAdvt.Move pbcSelect(0).Left + cmcMissedLog2.Left + cmcMissedLog2.Width - lbcAdvt.Width, pbcSelect(0).Top + edcMissedLog2.Top + edcMissedLog2.height

    'Calendar
    For ilLoop = 1 To 7 Step 1
        gSetCtrl tmCDCtrls(ilLoop), 30 + 255 * (ilLoop - 1), 225, 240, fgBoxGridH
    Next ilLoop

    pbcMode.Move cmcDone.Left, cmcDone.Top + cmcDone.height + 30
    If (tgSpf.sHideGhostSptScr = "Y") Then
        ckcShowGhost.Visible = False
        ckcShowGhost.Value = vbUnchecked
    Else
        ckcShowGhost.Move pbcMode.Left + pbcMode.Width + cmcDone.Width / 2, pbcMode.Top
        ckcShowGhost.Visible = False
        ckcShowGhost.Value = vbChecked
    End If

    'plcAdvertiser.Width = fmAdjFactorW * plcTime.Width
    'Do While (plcAdvertiser.Width Mod 15) <> 0
    '    plcAdvertiser.Width = plcAdvertiser.Width + 1
    'Loop
    'pbcContract.Move fgBevelX, fgBevelY, plcAdvertiser.Width - 2 * fgBevelX - vbcContract.Width - 15

    llMax = tmACtrls(7).fBoxX + tmACtrls(7).fBoxW + 15
    ''plcAdvertiser.Move 90, 1260, llMax + fgPanelAdj + vbcContract.Width, pbcContract.Height + fgPanelAdj
    'plcAdvertiser.Move 90, 1380, llMax + fgPanelAdj + vbcContract.Width, pbcContract.Height + fgPanelAdj
    plcAdvertiser.Move (Me.Width - (llMax + 2 * fgPanelAdj + vbcContract.Width)) / 2, 1380, llMax + fgPanelAdj + vbcContract.Width, pbcContract.height + fgPanelAdj
    pbcContract.Move fgBevelX, fgBevelY, llMax
    pbcSelect(0).Left = plcAdvertiser.Left
    pbcSelect(1).Left = plcAdvertiser.Left
    lbcGameNo(0).Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
    'Align dropdowns
    lbcLog2Type.Move pbcSelect(0).Left + edcLog2Type.Left, pbcSelect(0).Top + edcLog2Type.Top + edcLog2Type.height
    'lbcAdvt.Move plcTime.Left + edcLog2Dt.Left, plcTime.Top + edcLog2Dt.Top + edcLog2Dt.Height
    lbcAdvt.Move pbcSelect(0).Left + cmcMissedLog2.Left + cmcMissedLog2.Width - lbcAdvt.Width, pbcSelect(0).Top + edcMissedLog2.Top + edcMissedLog2.height

    vbcContract.Left = pbcContract.Left + pbcContract.Width
    vbcContract.Top = fgBevelY
    llAdjTop = Spots.height - (Spots.height / fmAdjFactorH)
    If llAdjTop < 0 Then
        llAdjTop = 0
    End If
    Do While (llAdjTop Mod 15) <> 0
        llAdjTop = llAdjTop + 1
    Loop
    Do While ((llAdjTop Mod (CInt(fgBoxGridH) + 15))) <> 0
        llAdjTop = llAdjTop - 1
    Loop
    pbcContract.height = pbcContract.height + llAdjTop
    plcAdvertiser.height = pbcContract.height + pbcAdWorkArea.height + fgPanelAdj + 120
    vbcContract.height = pbcContract.height
    imIgnoreChg = True
    vbcContract.LargeChange = (pbcContract.height / (fgBoxGridH + 15)) - 2
    ReDim tmMoRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for monday index
    ReDim tmTuRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for Tuesday
    ReDim tmWeRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for Wednesday
    ReDim tmThRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for Thursday
    ReDim tmFrRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for Friday
    ReDim tmSaRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for Saturday
    ReDim tmSuRowIndex(0 To vbcContract.LargeChange + 1) As Integer 'Event information for Sunday
    ReDim tgMoRowIndex(0 To UBound(tmMoRowIndex)) As Integer 'Event information for monday index
    ReDim tgTuRowIndex(0 To UBound(tmMoRowIndex)) As Integer  'Event information for Tuesday
    ReDim tgWeRowIndex(0 To UBound(tmMoRowIndex)) As Integer  'Event information for Wednesday
    ReDim tgThRowIndex(0 To UBound(tmMoRowIndex)) As Integer  'Event information for Thursday
    ReDim tgFrRowIndex(0 To UBound(tmMoRowIndex)) As Integer  'Event information for Friday
    ReDim tgSaRowIndex(0 To UBound(tmMoRowIndex)) As Integer  'Event information for Saturday
    ReDim tgSuRowIndex(0 To UBound(tmMoRowIndex)) As Integer  'Event information for Sunday
    pbcAdWorkArea.Move pbcContract.Left, plcAdvertiser.height - pbcAdWorkArea.height - fgBevelY - 60
    vbcAdWorkArea.Move pbcAdWorkArea.Left + pbcAdWorkArea.Width, pbcAdWorkArea.Top, vbcAdWorkArea.Width, pbcAdWorkArea.height
    vbcMissed.Move vbcContract.Left, pbcAdWorkArea.Top, vbcMissed.Width, pbcMissed.height
    pbcMissed.Move vbcMissed.Left - pbcMissed.Width, pbcAdWorkArea.Top
    pbcSC.Move pbcMissed.Left - pbcSC.Width, pbcAdWorkArea.Top
    cmcSort.Move pbcAdWorkArea.Left + pbcAdWorkArea.Width + (pbcMissed.Left - (pbcAdWorkArea.Left + pbcAdWorkArea.Width)) / 2 - cmcSort.Width / 2, pbcAdWorkArea.Top, cmcSort.Width, pbcSC.height
    lbcSort.Move cmcSort.Left + cmcSort.Width, cmcSort.Top
    cbcVehicle.Width = fmAdjFactorW * cbcVehicle.Width
    cmcDone.Move cbcVehicle.Left + cbcVehicle.Width + 30, cmcDone.Top, fmAdjFactorW * cmcDone.Width
    '11/16/09: Active Action and change order of buttons
    'cmcLock.Move cmcDone.Left + cmcDone.Width + 15, cmcDone.Top, fmAdjFactorW * cmcLock.Width
    'cmcReSchd.Move cmcLock.Left + cmcLock.Width + 15, cmcDone.Top, fmAdjFactorW * cmcReSchd.Width
    'cmcFill.Move cmcReSchd.Left + cmcReSchd.Width + 15, cmcDone.Top, fmAdjFactorW * cmcFill.Width
    'cmcRectify.Move cmcFill.Left + cmcFill.Width + 15, cmcDone.Top, fmAdjFactorW * cmcRectify.Width
    'cmcWeeks.Move cmcRectify.Left + cmcRectify.Width + 15, cmcDone.Top, fmAdjFactorW * cmcWeeks.Width
    'cmcMGs.Move cmcWeeks.Left + cmcWeeks.Width + 15, cmcDone.Top, fmAdjFactorW * cmcMGs.Width
    'If ((Len(Trim$(sgSpecialPassword)) = 4) And (Val(sgSpecialPassword) >= 1) And (Val(sgSpecialPassword) < 10000)) Then
    '    cmcSpotAction.Move cmcMGs.Left, cmcDone.Top + cmcDone.Height, fmAdjFactorW * cmcSpotAction.Width
    '    cmcSpotAction.Visible = True
    'End If
    
    cmcReSchd.Move cmcDone.Left + cmcDone.Width + 15, cmcDone.Top, fmAdjFactorW * cmcReSchd.Width
    cmcFill.Move cmcReSchd.Left + cmcReSchd.Width + 15, cmcDone.Top, fmAdjFactorW * cmcFill.Width
    cmcSpotAction.Move cmcFill.Left + cmcFill.Width + 15, cmcDone.Top, fmAdjFactorW * cmcSpotAction.Width
    cmcMGs.Move cmcSpotAction.Left + cmcSpotAction.Width + 15, cmcDone.Top, fmAdjFactorW * cmcMGs.Width
    cmcWeeks.Move cmcMGs.Left + cmcMGs.Width + 15, cmcDone.Top, fmAdjFactorW * cmcWeeks.Width
    cmcRectify.Move cmcWeeks.Left + cmcWeeks.Width + 15, cmcDone.Top, fmAdjFactorW * cmcRectify.Width

    imcPrt.Left = Spots.Width - ((Spots.Width - cmcRectify.Left - cmcRectify.Width) / 2) - imcPrt.Width / 2
    imcTrash.Left = imcPrt.Left
    'pbcMode.Left = Spots.Width / 2 - pbcMode.Width / 2
    pbcMode.Move cbcSeason.Left + cbcSeason.Width + 120, cbcSeason.Top + 30
    
    '7/5/14: Add check box for showing/not showing ghost spots
    'If (tgSpf.sHideGhostSptScr <> "Y") Then
        ckcShowGhost.Move pbcMode.Left + pbcMode.Width + cmcDone.Width / 2, pbcMode.Top
    'End If
    
    If Screen.Width / 15 > 800 Then
        grdNote.Move pbcSelect(1).Left + pbcSelect(1).Width + 60, pbcMode.Top, cmcRectify.Left + cmcRectify.Width - (pbcSelect(1).Left + pbcSelect(1).Width), plcAdvertiser.Top - (cmcDone.Top + cmcDone.height) - 60
    Else
        grdNote.Visible = False
    End If
    mGridNoteLayout
    mGridNoteColumnWidths
    mGridNoteColumns
    imInitNoRows = (grdNote.height) \ fgFlexGridRowH - 1
    
    pbcDailyRot.Move pbcAdWorkArea.Left, pbcAdWorkArea.Top
    pbcDailyRotLabel.Move pbcDailyRot.Left, pbcDailyRot.Top + pbcDailyRot.height - 15
    pbcHourRot.Move pbcDailyRot.Left + pbcDailyRot.Width + 30, pbcDailyRot.Top
    pbcHourRotLabel.Move pbcHourRot.Left, pbcHourRot.Top + pbcHourRot.height - 15

    plcTime.Move plcAdvertiser.Left, plcAdvertiser.Top, plcAdvertiser.Width, plcAdvertiser.height
    pbcLog1.Move fgBevelX, fgBevelY, pbcLog1.Width, pbcContract.height
    vbcLog1.Move pbcLog1.Left + pbcLog1.Width, pbcLog1.Top, vbcLog1.Width, pbcLog1.height
    vbcLog1.LargeChange = vbcContract.LargeChange + 1
    pbcL1View.Move pbcLog1.Left, pbcLog1.Top + pbcLog1.height + 30
    pbcHold.Move pbcLog1.Left, plcTime.height - pbcHold.height - fgBevelY - 15, pbcAdWorkArea.Width
    vbcHold.Move pbcHold.Left + pbcHold.Width, pbcHold.Top, vbcHold.Width, pbcHold.height
    vbcLog2.Left = plcTime.Width - vbcLog2.Width - fgBevelX
    vbcLog2.Top = fgBevelY
    pbcLog2.Move vbcMissed.Left - pbcLog2.Width, pbcLog1.Top
    cmcWhere.Top = plcTime.height - cmcWhere.height - fgBevelY - 15
    edcAvDate.Top = cmcWhere.Top
    cmcAvDate.Top = cmcWhere.Top
    pbcAvail.Top = cmcWhere.Top - pbcAvail.height - 15
    vbcAvail.Top = pbcAvail.Top
    vbcAvail.Left = vbcLog2.Left
    pbcAvail.Left = pbcLog2.Left
    pbcAvail.Width = pbcLog2.Width
    pbcAvail.Picture = LoadPicture("")
    cmcWhere.Left = pbcAvail.Left
    edcAvDate.Left = cmcWhere.Left + cmcWhere.Width + 60
    cmcAvDate.Left = edcAvDate.Left + edcAvDate.Width
    pbcAvailUn.Move plcTime.Width - vbcLog2.Width - fgBevelX - pbcAvailUn.Width, pbcAvail.Top - pbcAvailUn.height
    pbcAvailNo.Move pbcAvailUn.Left - pbcAvailNo.Width - 60, pbcAvailUn.Top
    pbcAvailSd.Move pbcAvailNo.Left - pbcAvailSd.Width - 60, pbcAvailUn.Top
    pbcAvailTm.Move pbcAvailSd.Left - pbcAvailTm.Width - 60, pbcAvailUn.Top
    pbcAvailPd.Move pbcAvailTm.Left - pbcAvailPd.Width - 60, pbcAvailUn.Top
    pbcLog2.height = pbcAvailPd.Top - fgBevelY - 60
    Do While ((pbcLog2.height Mod (CInt(fgBoxGridH) + 15))) <> 0
        pbcLog2.height = pbcLog2.height - 1
    Loop
    pbcLog2.height = pbcLog2.height + 15
    vbcLog2.height = pbcLog2.height
    vbcLog2.LargeChange = (pbcLog2.height / (fgBoxGridH + 15)) - 1
    pbcLog2.Picture = LoadPicture("")
    pbcHold.Picture = LoadPicture("")



    ReDim tmL1RowIndex(0 To vbcLog1.LargeChange + 1) As Integer
    ReDim tgL1RowIndex(0 To UBound(tmL1RowIndex)) As Integer  'Event information for Sunday
    ReDim tmL2RowIndex(0 To vbcLog2.LargeChange + 1) As Integer
    ReDim tgL2RowIndex(0 To UBound(tmL2RowIndex)) As Integer  'Event information for Sunday

    'gSetPictureBoxFontSize Spots
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInit                           *
'*                                                     *
'*             Created:10/27/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Initialize dim variables       *
'*                                                     *
'*******************************************************
Private Sub mInitDim()
    imAMax = 0
    ReDim tmL1Evt(0 To imLBEvt) As EVTINFO
    ReDim tmL2Evt(0 To imLBEvt) As EVTINFO
    'ReDim tmSdfMdExt(1 To 1) As SDFMDEXT
    ReDim tmSdfMdExt(0 To 1) As SDFMDEXT
    'ReDim tmSvSdfMdExt(1 To 1) As SDFMDEXT
    ReDim tmSvSdfMdExt(0 To 1) As SDFMDEXT
    'ReDim tmSpotMove(1 To 1) As SPOTMOVE
    ReDim tmSpotMove(0 To 0) As SPOTMOVE
    'ReDim tmAdMdSdfMdExt(1 To 1) As SDFMDEXT
    ReDim tmAdMdSdfMdExt(0 To 1) As SDFMDEXT
    'ReDim tmSvAdMdSdfMdExt(1 To 1) As SDFMDEXT
    ReDim tmSvAdMdSdfMdExt(0 To 1) As SDFMDEXT
    'ReDim tmSdfExt(1 To 1) As SDFEXT    'Spot scheduled for a contract
    ReDim tmSdfExt(0 To 0) As SDFEXT    'Spot scheduled for a contract
    ReDim tmL1Vcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmL1Vcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmL1Vcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmL2Vcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmL2Vcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmL2Vcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmMoVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmMoVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmMoVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmTuVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmTuVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmTuVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmWeVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmWeVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmWeVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmThVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmThVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmThVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmFrVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmFrVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmFrVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmSaVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmSaVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmSaVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmSuVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmSuVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmSuVcf7(0 To 0) As VCF      'Su Vcf records
    ReDim tmCTVcf0(0 To 0) As VCF      'M-F Vcf records
    ReDim tmCTVcf6(0 To 0) As VCF      'Sa Vcf records
    ReDim tmCTVcf7(0 To 0) As VCF      'Su Vcf records
    imL1Max = 0
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mInsertEvt                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Add event as required          *
'*                                                     *
'*******************************************************
Private Sub mInsertEvt(ilIndex As Integer, llDayTime As Long, tlEvtTemp() As EVTINFO, tlEvt() As EVTINFO)
    Dim ilUpper As Integer
    Dim ilLoop As Integer
    ilUpper = UBound(tlEvt)
    If ilIndex < UBound(tlEvtTemp) Then
        If (tlEvtTemp(ilIndex).iType = 99) Or (tlEvtTemp(ilIndex).iType = 100) Or (tlEvtTemp(ilIndex).iType = 101) Then
            'Back up to avail, then check value
            tlEvt(ilUpper).iType = -1
            'For ilLoop = ilIndex - 1 To 1 Step -1
            For ilLoop = ilIndex - 1 To imLBEvt Step -1
                If (tlEvtTemp(ilLoop).iType >= 2) And (tlEvtTemp(ilLoop).iType <= 9) Then
                    If tlEvtTemp(ilLoop).lTime = llDayTime Then
                        tlEvt(ilUpper) = tlEvtTemp(ilIndex)
                        ilIndex = ilIndex + 1
                    End If
                    Exit For
                End If
            Next ilLoop
        Else
            If tlEvtTemp(ilIndex).lTime = llDayTime Then
                tlEvt(ilUpper) = tlEvtTemp(ilIndex)
                ilIndex = ilIndex + 1
            Else
                'Create a place holder record
                tlEvt(ilUpper).iType = -1
            End If
        End If
    Else
        'Create a place holder record type
        tlEvt(ilUpper).iType = -1
    End If
    ilUpper = ilUpper + 1
    'ReDim Preserve tlEvt(1 To ilUpper) As EVTINFO
    ReDim Preserve tlEvt(0 To ilUpper) As EVTINFO
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mLogLogMoveSpot                 *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move spot from Log to log day  *
'*                                                     *
'*******************************************************
Private Sub mLogLogMoveSpot(slLogDateFrom As String, ilGameNoFrom As Integer, slLogDateTo As String, ilGameNoTo As Integer, tlEvtFrom() As EVTINFO, tlEvtTo() As EVTINFO, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF, slSchStatus As String)
'
'   mLogLogMoveSpot slLogDateFrom, slLogDateTo, tlEvtFrom(), tlEvtTo(), tlVcf0To(), tlVcf6To(), tlVcf7To()
'   Where:
'       slLogDateFrom(I)- Source Date of spot
'       slLogDateTo(I)- Destination Date of spot
'       tlEvtFrom()(I/O)- source of spot
'       tlEvtTo()(I/O)- destination of spot
'       tlVcf0To()(I)- Vehicle conflict table (Monday-Friday) for to date
'       tlVcf6To()(I)- Vehicle conflict table (Saturday) for to date
'       tlVcf7To()(I)- Vehicle conflict table (Sunday) for to date
'
'       imDragIndexSrce(I)- index within tlEvtFrom of spot
'       imDragIndexDest(I)- index within tlEvtTo where the spot is to be moved
'

    Dim ilRet As Integer
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim llSsfAvailRecPosDest As Long
    Dim ilSsfAvailIndexDest As Integer
    Dim ilPositionDest As Integer
    Dim slTimeDest As String
    'Dim slSchStatus As String
    Dim ilBkQH As Integer
    Dim ilMdIndex As Integer
    Dim ilPriceLevel As Integer
    'ReDim tmSpotMove(1 To 2) As SPOTMOVE
    ReDim tmSpotMove(0 To 1) As SPOTMOVE
    If ilGameNoFrom <= 0 Then
        If gDateValue(slLogDateFrom) <> gDateValue(slLogDateTo) Then
            If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDateFrom), 65536 * imVehCode + gDateValue(slLogDateTo)) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        Else
            If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDateFrom), 0) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        End If
    Else
        If ilGameNoFrom <> ilGameNoTo Then
            If Not mBlockDay(65536 * imVehCode + ilGameNoFrom, 65536 * imVehCode + ilGameNoTo) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        Else
            If Not mBlockDay(65536 * imVehCode + ilGameNoFrom, 0) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        End If
    End If
    'tmSpotMove(1).iSpotIndex = tlEvtFrom(imDragIndexSrce).iSsfIndex
    'tmSpotMove(1).lSpotSsfRecPos = tlEvtFrom(imDragIndexSrce).lSsfRecPos
    'tmSpotMove(1).lSdfCode = tlEvtFrom(imDragIndexSrce).lSdfCode
    'tmSpotMove(1).iAvailIndex = -1
    tmSpotMove(0).iSpotIndex = tlEvtFrom(imDragIndexSrce).iSsfIndex
    tmSpotMove(0).lSpotSsfRecPos = tlEvtFrom(imDragIndexSrce).lSsfRecPos
    tmSpotMove(0).lSdfCode = tlEvtFrom(imDragIndexSrce).lSdfCode
    tmSpotMove(0).iAvailIndex = -1
    'lLen contains lChfCode
    llSdfRecPosSrce = tlEvtFrom(imDragIndexSrce).lTime
    If slSchStatus = "" Then
        slSchStatus = mMoveTest(llSdfRecPosSrce, slLogDateTo, ilGameNoTo, tlEvtTo(), imDragIndexDest, tlVcf0(), tlVcf6(), tlVcf7(), tlEvtFrom(imDragIndexSrce).sShow, ilBkQH, 0)
        If slSchStatus = "" Then
            mClearDrag True
            Exit Sub
        End If
        ilPriceLevel = imPriceLevel
    Else
        ilPriceLevel = imPriceLevel
    End If
    ilRet = mBeginTrans(True, True)   'btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
        'mClearDrag True
        Exit Sub
    End If
    'Swap spots by first removing spot, then booking spot
    'Get avail index and spot position
    mGetAvailIndex tlEvtFrom(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
    mGetAvailIndex tlEvtTo(), imDragIndexDest, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, slTimeDest
    ilRet = mUnschSpot("TM", -1, slLogDateFrom, ilGameNoFrom, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)    'Spot added to tmWAMdExt as last event
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    If (llSsfAvailRecPosSrce = llSsfAvailRecPosDest) And (ilSsfAvailIndexSrce < ilSsfAvailIndexDest) Then
        ilSsfAvailIndexDest = ilSsfAvailIndexDest - 1
    End If
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPosSrce
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogLogMoveSpot-GetDirect Sdf(1)"
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDateTo, slTimeDest, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQH = 1000
    'End If
    ilRet = mSchSpot(slSchStatus, -1, slLogDateTo, ilGameNoTo, llSdfRecPosSrce, ilBkQH, tmAddEvt, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, tmSmfA, ilPriceLevel)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilMdIndex = UBound(tmWAMdExt) - 1
    'gBookSpot now handles retaining copy
    'If (tmWAMdExt(ilMdIndex).sPtType = "1") Or (tmWAMdExt(ilMdIndex).sPtType = "2") Or (tmWAMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tmWAMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tmWAMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tmWAMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
    ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 1) As SDFMDEXT
    ilRet = btrEndTrans(hmSdf)
    mUnblockDay
    mVbcL1MinMax False
    mVbcL2MinMax False
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mLogSwapSpot                    *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Swap spot within Log day       *
'*                                                     *
'*******************************************************
Private Sub mLogLogSwapSpot(slLogDateA As String, ilGameNoA As Integer, slLogDateB As String, ilGameNoB As Integer, tlEvtA() As EVTINFO, tlVcf0A() As VCF, tlVcf6A() As VCF, tlVcf7A() As VCF, tlEvtB() As EVTINFO, tlVcf0B() As VCF, tlVcf6B() As VCF, tlVcf7B() As VCF)
'
'   mLogLogSwapSpot slLogDateA, slLogDateB, tlEvtA(), tlVcf0A(), tlVcf6A(), tlVcf7A(), tlEvtB(), tlVcf0B(), tlVcf6B(), tlVcf7B()
'   Where:
'       slLogDateA(I)- Source Date from first spot (destination of second spot)
'       slLogDateB(I)- Destination Date for the first spot (source date of the second spot)
'       tlEvtA()(I/O)- source for first spot, destination of second spot
'       tlVcf0A()(I)- Vehicle conflict table (Monday-Friday) for first spot from date
'       tlVcf6A()(I)- Vehicle conflict table (Saturday) for first spot from date
'       tlVcf7A()(I)- Vehicle conflict table (Sunday) for first spot from date
'       tlEvtB()(I/O)- source for second spot, destination of first spot
'       tlVcf0B()(I)- Vehicle conflict table (Monday-Friday) for second spot from date
'       tlVcf6B()(I)- Vehicle conflict table (Saturday) for second spot from date
'       tlVcf7B()(I)- Vehicle conflict table (Sunday) for second spot from date
'
'       imDragIndexSrce(I)- index within tlEvtA of spot
'       imDragIndexDest(I)- index within tlEvtB of spot
'
'   A= Source-spot start the swap
'   B=Destination-spot to be swapped with the one that started the swap

    Dim ilRet As Integer
    Dim llSdfRecPosSrce As Long
    Dim llSdfRecPosDest As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim llSsfAvailRecPosDest As Long
    Dim ilSsfAvailIndexDest As Integer
    Dim ilPositionDest As Integer
    Dim slTimeDest As String
    Dim slSchStatusA As String
    Dim slSchStatusB As String
    Dim ilBkQHA As Integer
    Dim ilBkQHB As Integer
    Dim ilMdIndex As Integer
    Dim ilPriceLevelA As Integer
    Dim ilPriceLevelB As Integer

    If (smSplitNetworkType = "P") Or (smSplitNetworkType = "S") Then
        mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tlEvtA(), tlEvtB(), tlVcf0B(), tlVcf6B(), tlVcf7B(), ""
        Exit Sub
    End If
    'Swap spots
    
    On Error GoTo mLogLogSwapSpotErr1
    
    'ReDim tmSpotMove(1 To 3) As SPOTMOVE
    ReDim tmSpotMove(0 To 2) As SPOTMOVE
    If ilGameNoA <= 0 Then
        If gDateValue(slLogDateA) <> gDateValue(slLogDateB) Then
            If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDateA), 65536 * imVehCode + gDateValue(slLogDateB)) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        Else
            If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDateA), 0) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        End If
    Else
        If ilGameNoA <> ilGameNoB Then
            If Not mBlockDay(65536 * imVehCode + ilGameNoA, 65536 * imVehCode + ilGameNoB) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        Else
            If Not mBlockDay(65536 * imVehCode + ilGameNoA, 0) Then
                mClearDrag True
                mForceRepaintWeekly False
                Exit Sub
            End If
        End If
    End If
    On Error GoTo mLogLogSwapSpotErr2
    'tmSpotMove(1).iSpotIndex = tlEvtA(imDragIndexSrce).iSsfIndex
    'tmSpotMove(1).lSpotSsfRecPos = tlEvtA(imDragIndexSrce).lSsfRecPos
    'tmSpotMove(1).lSdfCode = tlEvtA(imDragIndexSrce).lSdfCode
    'tmSpotMove(1).iAvailIndex = -1
    'tmSpotMove(2).iSpotIndex = tlEvtB(imDragIndexDest).iSsfIndex
    'tmSpotMove(2).lSpotSsfRecPos = tlEvtB(imDragIndexDest).lSsfRecPos
    'tmSpotMove(2).lSdfCode = tlEvtB(imDragIndexDest).lSdfCode
    'tmSpotMove(2).iAvailIndex = -1
    
    tmSpotMove(0).iSpotIndex = tlEvtA(imDragIndexSrce).iSsfIndex
    tmSpotMove(0).lSpotSsfRecPos = tlEvtA(imDragIndexSrce).lSsfRecPos
    tmSpotMove(0).lSdfCode = tlEvtA(imDragIndexSrce).lSdfCode
    tmSpotMove(0).iAvailIndex = -1
    tmSpotMove(1).iSpotIndex = tlEvtB(imDragIndexDest).iSsfIndex
    tmSpotMove(1).lSpotSsfRecPos = tlEvtB(imDragIndexDest).lSsfRecPos
    tmSpotMove(1).lSdfCode = tlEvtB(imDragIndexDest).lSdfCode
    tmSpotMove(1).iAvailIndex = -1
    'lLen contains lChfCode
    llSdfRecPosSrce = tlEvtA(imDragIndexSrce).lTime
    slSchStatusA = mMoveTest(llSdfRecPosSrce, slLogDateB, ilGameNoB, tlEvtB(), imDragIndexDest, tlVcf0B(), tlVcf6B(), tlVcf7B(), tlEvtA(imDragIndexSrce).sShow, ilBkQHA, 0)
    If slSchStatusA = "" Then
        mClearDrag True
        Exit Sub
    End If
    ilPriceLevelA = imPriceLevel
    'lLen contains lChfCode
    llSdfRecPosDest = tlEvtB(imDragIndexDest).lTime
    slSchStatusB = mMoveTest(llSdfRecPosDest, slLogDateA, ilGameNoA, tlEvtA(), imDragIndexSrce, tlVcf0A(), tlVcf6A(), tlVcf7A(), tlEvtB(imDragIndexDest).sShow, ilBkQHB, 0)
    If slSchStatusB = "" Then
        mClearDrag True
        Exit Sub
    End If
    ilPriceLevelB = imPriceLevel
    ilRet = mBeginTrans(True, True)   'btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
        'mClearDrag True
        mUnblockDay
        Exit Sub
    End If
    On Error GoTo mLogLogSwapSpotErr3
    mGetAvailIndex tlEvtA(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
    mGetAvailIndex tlEvtB(), imDragIndexDest, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, slTimeDest
    ilRet = mUnschSpot("TM", -1, slLogDateA, ilGameNoA, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)   'Spot added to tmWAMdExt as next to last event
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilRet = mUnschSpot("TM", -1, slLogDateB, ilGameNoB, llSsfAvailRecPosDest, llSdfRecPosDest, tmWAMdExt(), tmSmfB)   'Spot added to tmWAMdExt as last event
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    'If Srce prior to destination, then destination index does not require a decrement, then increment after scheduling into srce
    'the dest end up at the same place
    If (llSsfAvailRecPosSrce = llSsfAvailRecPosDest) And (ilSsfAvailIndexSrce > ilSsfAvailIndexDest) Then
        ilSsfAvailIndexSrce = ilSsfAvailIndexSrce - 1
    End If
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPosDest
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosDest, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogLogSwapSpot-GetDirect Sdf(1)"
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDateA, slTimeDest, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQHB = 1000
    'End If
    ilRet = mSchSpot(slSchStatusB, -1, slLogDateA, ilGameNoA, llSdfRecPosDest, ilBkQHB, tmAddEvt, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, tmSmfB, ilPriceLevelB)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilMdIndex = UBound(tmWAMdExt) - 1
    'gBookSpot now handles retaining copy
    'If (tmWAMdExt(ilMdIndex).sPtType = "1") Or (tmWAMdExt(ilMdIndex).sPtType = "2") Or (tmWAMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosDest, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tmWAMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tmWAMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tmWAMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPosSrce
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogLogSwapSpot-GetDirect Sdf(2)"
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDateB, slTimeDest, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQHA = 1000
    'End If
    ilRet = mSchSpot(slSchStatusA, -1, slLogDateB, ilGameNoB, llSdfRecPosSrce, ilBkQHA, tmAddEvt, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, tmSmfA, ilPriceLevelA)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilMdIndex = UBound(tmWAMdExt) - 2
    'gBookSpot now handles retaining copy
    'If (tmWAMdExt(ilMdIndex).sPtType = "1") Or (tmWAMdExt(ilMdIndex).sPtType = "2") Or (tmWAMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tmWAMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tmWAMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tmWAMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    'Remove the two spot that were temporary placed into work area
    'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
    ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 2) As SDFMDEXT
    ilRet = btrEndTrans(hmSdf)
    mUnblockDay
    mVbcL1MinMax False
    mVbcL2MinMax False
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
    Exit Sub
mLogLogSwapSpotErr1:
    mClearDrag True
    mForceRepaintWeekly False
    Exit Sub
mLogLogSwapSpotErr2:
    mClearDrag True
    Exit Sub
mLogLogSwapSpotErr3:
    mAbortTrans True, True, True
    Exit Sub

End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mLogMdSwap                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Swap spots between Log and Work*
'*                      area or missed area            *
'*                                                     *
'*******************************************************
Private Sub mLogMdSwap(ilSpotFrom As Integer, ilLogIndex As Integer, ilMdIndex As Integer, slLogDate As String, ilGameNo As Integer, tlEvt() As EVTINFO, tlMdExt() As SDFMDEXT, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF)
'
'   mLogMdSpot ilLogIndex, ilMdIndex, slLogDate, tlEvt(), tlMdExt(), tlVcf0(), tlVcf6(), tlVcf7()
'   Where:
'       ilSpotFrom(I)- 0=Spot from tmAdMdSdfMdExt; 1=Spot from tmSdfMdExt
'       ilLogIndex(I)- Index into tlEvt of spot to be moved to missed or work area
'       ilMdIndex(I)- Index into tlMdExt of spot to be moved to log date
'       slLogDate(I)- Date of spots within log
'       tlEvt()(I/O)- source of scheduled spot
'       tlMdExt()(I/O)- source of missed spots (or work area)
'       tlVcf0()(I)- Vehicle conflict table (Monday-Friday) for scheduled date
'       tlVcf6()(I)- Vehicle conflict table (Saturday) for scheduled date
'       tlVcf7()(I)- Vehicle conflict table (Sunday) for scheduled date
'
    Dim ilRet As Integer
    Dim llSdfRecPos As Long
    Dim llSsfAvailRecPos As Long
    Dim ilSsfAvailIndex As Integer
    Dim ilPosition As Integer
    Dim slTime As String
    Dim slSchStatus As String
    Dim ilBkQH As Integer
    Dim ilLoop As Integer
    Dim ilPass As Integer
    Dim ilTest As Integer
    Dim llMoDate As Long
    Dim llSuDate As Long
    Dim llTstDate As Long
    Dim llPrice As Long
    Dim ilSchd As Integer
    Dim ilSvDragIndex As Integer
    Dim ilLineInfo As Integer
    Dim slCntrType As String
    Dim ilPriceLevel As Integer
    'ReDim tmSpotMove(1 To 2) As SPOTMOVE
    ReDim tmSpotMove(0 To 1) As SPOTMOVE


    If ((smSplitNetworkType = "P") Or (smSplitNetworkType = "S")) And ((imDragSrce = DRAGADMD) Or (imDragSrce = DRAGWORKAREA)) Then
        mMdMoveSpot ilSpotFrom, tlMdExt(), slLogDate, ilGameNo, tlEvt(), tlVcf0(), tlVcf6(), tlVcf7(), ""
        Exit Sub
    End If
    If ilGameNo <= 0 Then
        If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDate), 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    Else
        If Not mBlockDay(65536 * imVehCode + ilGameNo, 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    End If
    'tmSpotMove(1).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
    'tmSpotMove(1).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
    'tmSpotMove(1).lSdfCode = tlEvt(ilLogIndex).lSdfCode
    'tmSpotMove(1).iAvailIndex = -1
    
    tmSpotMove(0).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
    tmSpotMove(0).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
    tmSpotMove(0).lSdfCode = tlEvt(ilLogIndex).lSdfCode
    tmSpotMove(0).iAvailIndex = -1
    llSdfRecPos = tlMdExt(ilMdIndex).lRecPos
    If UBound(imTestDragIndex) <= 0 Then
        slSchStatus = mMoveTest(llSdfRecPos, slLogDate, ilGameNo, tlEvt(), ilLogIndex, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(ilMdIndex).sShow, ilBkQH, 0)
        If slSchStatus = "" Then
            mMissedSummary imDW
            mVbcMissedMinMax False
            mClearDrag True
            Exit Sub
        End If
        ilPriceLevel = imPriceLevel
    Else
        'Do While UBound(imTestDragIndex) > 0
        '    ilMdIndex = imTestDragIndex(UBound(imTestDragIndex) - 1)
        '    ReDim Preserve imTestDragIndex(0 To UBound(imTestDragIndex) - 1) As Integer
        '    ReDim tmSpotMove(1 To 2) As SPOTMOVE
        '    tmSpotMove(1).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
        '    tmSpotMove(1).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
        '    tmSpotMove(1).lSdfCode = tlEvt(ilLogIndex).lSdfCode
        '    tmSpotMove(1).iAvailIndex = -1
        '    llSdfRecPos = tlMdExt(ilMdIndex).lRecPos
        '    slSchStatus = mMoveTest(llSdfRecPos, slLogDate, tlEvt(), ilLogIndex, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(ilMdIndex).sShow, ilBkQH, 1)
        '    If slSchStatus = "" Then
        '        mMissedSummary 1
        '        mClearDrag True
        '        Exit Sub
        '    End If
        '    If (slSchStatus <> "N") And (slSchStatus <> "Y") Then
        '        Exit Do
        '    End If
        '    If (slSchStatus = "N") And (ilSvDragIndex = -1) Then
        '        ilSvDragIndex = ilMdIndex
        '    End If
        'Loop
        'If (slSchStatus = "N") Or (slSchStatus = "Y") Then
        '    If ilSvDragIndex <> -1 Then
        '        ilMdIndex = ilSvDragIndex
        '    End If
        '    ReDim tmSpotMove(1 To 2) As SPOTMOVE
        '    tmSpotMove(1).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
        '    tmSpotMove(1).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
        '    tmSpotMove(1).lSdfCode = tlEvt(ilLogIndex).lSdfCode
        '    tmSpotMove(1).iAvailIndex = -1
        '    llSdfRecPos = tlMdExt(ilMdIndex).lRecPos
        '    slSchStatus = mMoveTest(llSdfRecPos, slLogDate, tlEvt(), ilLogIndex, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(ilMdIndex).sShow, ilBkQH, 0)
        'End If


        ilSvDragIndex = -1
        llMoDate = gDateValue(slLogDate)
        Do While gWeekDayLong(llMoDate) <> 0
            llMoDate = llMoDate - 1
        Loop
        llSuDate = llMoDate + 6
        ilSchd = False
        For ilPass = 0 To 15 Step 1
            For ilLoop = UBound(imTestDragIndex) - 1 To LBound(imTestDragIndex) Step -1
                ilMdIndex = imTestDragIndex(ilLoop)
                ilTest = False
                gUnpackDateLong tlMdExt(ilMdIndex).iDate(0), tlMdExt(ilMdIndex).iDate(1), llTstDate
                llPrice = gStrDecToLong(tlMdExt(ilMdIndex).sPrice, 2)
                Select Case ilPass
                    Case 0  'In current week, no violations and Price > 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 1  'In Current week, no violations and Price = 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 2  'In current week, Match Avail Name and Price > 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 3  'In Current week, Match Avail Name and Price = 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 4  'In current week, Match Daypart and Price > 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 5  'In Current week, Match Daypart and Price = 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 6  'In current week, Any Violation and Price > 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 7 'In current week, Any Violation and Price = 0
                        If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 8  'In past week, no violations and Price > 0
                        If (llTstDate < llMoDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 9  'In past week, no violations and Price = 0
                        If (llTstDate < llMoDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 10  'In past week, Match Avail Name and Price > 0
                        If (llTstDate < llMoDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 11  'In past week, Match Avail Name and Price = 0
                        If (llTstDate < llMoDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 12  'In past week, Match Daypart and Price > 0
                        If (llTstDate < llMoDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 13  'In Past week, Match Daypart and Price = 0
                        If (llTstDate < llMoDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                    Case 14  'In past week, Any Violation and Price > 0
                        If (llTstDate < llMoDate) And (llPrice > 0) Then
                            ilTest = True
                        End If
                    Case 15 'In past week, Any Violation and Price = 0
                        If (llTstDate < llMoDate) And (llPrice <= 0) Then
                            ilTest = True
                        End If
                End Select
                If ilTest Then
                    'ReDim tmSpotMove(1 To 2) As SPOTMOVE
                    'tmSpotMove(1).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
                    'tmSpotMove(1).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
                    'tmSpotMove(1).lSdfCode = tlEvt(ilLogIndex).lSdfCode
                    'tmSpotMove(1).iAvailIndex = -1
                    
                    ReDim tmSpotMove(0 To 1) As SPOTMOVE
                    tmSpotMove(0).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
                    tmSpotMove(0).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
                    tmSpotMove(0).lSdfCode = tlEvt(ilLogIndex).lSdfCode
                    tmSpotMove(0).iAvailIndex = -1
                    llSdfRecPos = tlMdExt(ilMdIndex).lRecPos
                    slSchStatus = mMoveTest(llSdfRecPos, slLogDate, ilGameNo, tlEvt(), ilLogIndex, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(ilMdIndex).sShow, ilBkQH, 1)
                    ilPriceLevel = imPriceLevel
                    If slSchStatus = "" Then
                        mMissedSummary imDW
                        mVbcMissedMinMax False
                        mClearDrag True
                        Exit Sub
                    End If
                    If (slSchStatus <> "A") And (slSchStatus <> "T") And (slSchStatus <> "C") Then
                        ilSchd = True
                        Exit For
                    End If
                    If ((ilPass = 2) Or (ilPass = 3) Or (ilPass = 10) Or (ilPass = 11)) And (slSchStatus = "A") Then
                        ilSvDragIndex = imDragIndexSrce
                        ilSchd = True
                        Exit For
                    End If
                    If ((ilPass = 4) Or (ilPass = 5) Or (ilPass = 12) Or (ilPass = 13)) And (slSchStatus = "T") Then
                        ilSvDragIndex = imDragIndexSrce
                        ilSchd = True
                        Exit For
                    End If
                    If ((ilPass = 6) Or (ilPass = 7) Or (ilPass = 14) Or (ilPass = 15)) Then
                        ilSvDragIndex = imDragIndexSrce
                        ilSchd = True
                        Exit For
                    End If
                    If (slSchStatus = "A") And (ilSvDragIndex = -1) Then
                        ilSvDragIndex = imDragIndexSrce
                    End If
                End If
            Next ilLoop
            If ilSchd Then
                Exit For
            End If
        Next ilPass
        If (slSchStatus = "A") Or (slSchStatus = "T") Or (slSchStatus = "C") Then
            If ilSvDragIndex <> -1 Then
                ilMdIndex = ilSvDragIndex
            End If
            'ReDim tmSpotMove(1 To 2) As SPOTMOVE
            'tmSpotMove(1).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
            'tmSpotMove(1).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
            'tmSpotMove(1).lSdfCode = tlEvt(ilLogIndex).lSdfCode
            'tmSpotMove(1).iAvailIndex = -1
            
            ReDim tmSpotMove(0 To 1) As SPOTMOVE
            tmSpotMove(0).iSpotIndex = tlEvt(ilLogIndex).iSsfIndex
            tmSpotMove(0).lSpotSsfRecPos = tlEvt(ilLogIndex).lSsfRecPos
            tmSpotMove(0).lSdfCode = tlEvt(ilLogIndex).lSdfCode
            tmSpotMove(0).iAvailIndex = -1
            llSdfRecPos = tlMdExt(ilMdIndex).lRecPos
            slSchStatus = mMoveTest(llSdfRecPos, slLogDate, ilGameNo, tlEvt(), ilLogIndex, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(ilMdIndex).sShow, ilBkQH, 0)
            If slSchStatus = "" Then
                mMissedSummary imDW
                mVbcMissedMinMax False
                mClearDrag True
                Exit Sub
            End If
            ilPriceLevel = imPriceLevel
        End If
    End If
    ReDim imTestDragIndex(0 To 0) As Integer
    'Swap spots by first removing spot, then booking spot
    'Get avail index and spot position
    ilRet = mBeginTrans(True, True)   'btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
        'mClearDrag True
        mMissedSummary imDW
        mVbcMissedMinMax False
        mUnblockDay
        Exit Sub
    End If
    llSdfRecPos = tlEvt(ilLogIndex).lTime
    ilLineInfo = tlEvt(ilLogIndex).iLineInfo
    slCntrType = tlEvt(ilLogIndex).sCntrType
    mGetAvailIndex tlEvt(), ilLogIndex, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, slTime
    If (((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q")) Or (((ilLineInfo And &H10) = &H10) And ((ilLineInfo And &H200) <> &H200)) Then
        If ilSpotFrom = -1 Then
            ilRet = mUnschSpot("D", -2, slLogDate, ilGameNo, llSsfAvailRecPos, llSdfRecPos, tlMdExt(), tmSmfA)   'Spot added to tlMdExt as last event
        Else
            ilRet = mUnschSpot("D", ilSpotFrom, slLogDate, ilGameNo, llSsfAvailRecPos, llSdfRecPos, tlMdExt(), tmSmfA)   'Spot added to tlMdExt as last event
        End If
    Else
        If ilSpotFrom = -1 Then
            ilRet = mUnschSpot("M", -2, slLogDate, ilGameNo, llSsfAvailRecPos, llSdfRecPos, tlMdExt(), tmSmfA)   'Spot added to tlMdExt as last event
        Else
            ilRet = mUnschSpot("M", ilSpotFrom, slLogDate, ilGameNo, llSsfAvailRecPos, llSdfRecPos, tlMdExt(), tmSmfA)   'Spot added to tlMdExt as last event
        End If
    End If
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        mMissedSummary imDW
        mVbcMissedMinMax False
        Exit Sub
    End If
    llSdfRecPos = tlMdExt(ilMdIndex).lRecPos
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPos
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogMdSwap-GetDirect Sdf(1)"
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        mMissedSummary imDW
        mVbcMissedMinMax False
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDate, slTime, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQH = 1000
    'End If
    bmClearLogAlert = True
    ilRet = mSchSpot(slSchStatus, ilSpotFrom, slLogDate, ilGameNo, llSdfRecPos, ilBkQH, tmAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmSmfA, ilPriceLevel)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        mMissedSummary imDW
        mVbcMissedMinMax False
        Exit Sub
    End If
    'gBookSpot now handles retaining copy
    'If (tlMdExt(ilMdIndex).sPtType = "1") Or (tlMdExt(ilMdIndex).sPtType = "2") Or (tlMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tlMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tlMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tlMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    If (((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q")) Or (((ilLineInfo And &H10) = &H10) And ((ilLineInfo And &H200) <> &H200)) Then
        'Remove missed from array
        For ilLoop = ilMdIndex To UBound(tlMdExt) - 1 Step 1
            tlMdExt(ilLoop) = tlMdExt(ilLoop + 1)
        Next ilLoop
        If UBound(tlMdExt) > 1 Then
            'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
            ReDim Preserve tlMdExt(0 To UBound(tlMdExt) - 1) As SDFMDEXT
        End If
    Else
        'Move the missed spot into old missed spot area
        tlMdExt(ilMdIndex) = tlMdExt(UBound(tlMdExt) - 1)
        'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
        ReDim Preserve tlMdExt(0 To UBound(tlMdExt) - 1) As SDFMDEXT
    End If
    ilRet = btrEndTrans(hmSdf)
    mUnblockDay
    pbcHold.Cls
    pbcHold_Paint
    pbcAdWorkArea.Cls
    pbcAdWorkArea_Paint
    mVbcL1MinMax False
    mVbcL2MinMax False
    mMissedSummary imDW
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mLogMoveSpot                    *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move spot within Log day to 99 *
'*                                                     *
'*******************************************************
Private Sub mLogMoveSpot(slLogDate As String, ilGameNo As Integer, tlEvt() As EVTINFO, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF, slSchStatus As String)
'
'   mLogMoveSpot slLogDateTo, tlEvtTo(), tlVcf0To(), tlVcf6To(), tlVcf7To()
'   Where:
'       slLogDateTo(I)- Destination Date of spot
'       tlEvtTo()(I/O)- destination of spot
'       tlVcf0To()(I)- Vehicle conflict table (Monday-Friday) for to date
'       tlVcf6To()(I)- Vehicle conflict table (Saturday) for to date
'       tlVcf7To()(I)- Vehicle conflict table (Sunday) for to date
'
'       imDragIndexSrce(I)- index within tlEvtTo of spot
'       imDragIndexDest(I)- index within tlEvtTo where the spot is to be moved
'
    Dim ilRet As Integer
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim llSsfAvailRecPosDest As Long
    Dim ilSsfAvailIndexDest As Integer
    Dim ilPositionDest As Integer
    Dim slTimeDest As String
    'Dim slSchStatus As String
    Dim ilBkQH As Integer
    Dim ilMdIndex As Integer
    Dim ilPriceLevel As Integer
    'ReDim tmSpotMove(1 To 2) As SPOTMOVE
    ReDim tmSpotMove(0 To 1) As SPOTMOVE

    If ilGameNo <= 0 Then
        If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDate), 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    Else
        If Not mBlockDay(65536 * imVehCode + ilGameNo, 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    End If

    'tmSpotMove(1).iSpotIndex = tlEvt(imDragIndexSrce).iSsfIndex
    'tmSpotMove(1).lSpotSsfRecPos = tlEvt(imDragIndexSrce).lSsfRecPos
    'tmSpotMove(1).lSdfCode = tlEvt(imDragIndexSrce).lSdfCode
    'tmSpotMove(1).iAvailIndex = -1
    
    tmSpotMove(0).iSpotIndex = tlEvt(imDragIndexSrce).iSsfIndex
    tmSpotMove(0).lSpotSsfRecPos = tlEvt(imDragIndexSrce).lSsfRecPos
    tmSpotMove(0).lSdfCode = tlEvt(imDragIndexSrce).lSdfCode
    tmSpotMove(0).iAvailIndex = -1
    'lLen contains lChfCode
    llSdfRecPosSrce = tlEvt(imDragIndexSrce).lTime
    If slSchStatus = "" Then
        slSchStatus = mMoveTest(llSdfRecPosSrce, slLogDate, ilGameNo, tlEvt(), imDragIndexDest, tlVcf0(), tlVcf6(), tlVcf7(), tlEvt(imDragIndexSrce).sShow, ilBkQH, 0)
        If slSchStatus = "" Then
            mClearDrag True
            Exit Sub
        End If
        ilPriceLevel = imPriceLevel
    Else
        ilPriceLevel = imPriceLevel
    End If
    'Swap spots by first removing spot, then booking spot
    'Get avail index and spot position
    ilRet = mBeginTrans(True, True)   'btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
        'mClearDrag True
        mUnblockDay
        Exit Sub
    End If
    mGetAvailIndex tlEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
    mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, slTimeDest
    ilRet = mUnschSpot("TM", -1, slLogDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)   'Spot added to tmWAMdExt as last event
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    If (llSsfAvailRecPosSrce = llSsfAvailRecPosDest) And (ilSsfAvailIndexSrce < ilSsfAvailIndexDest) Then
        ilSsfAvailIndexDest = ilSsfAvailIndexDest - 1
    End If
    'mFdAvailIndexGivenTime was written as a replacement for the If above
    'Im retaining it as it is Ok (1/1/96)
    'mFdAvailIndexGivenTime tlEvt(), slTimeDest, llSsfAvailRecPosDest, ilSsfAvailIndexDest
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPosSrce
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogMoveSpot-GetDirect Sdf(1)"
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDate, slTimeDest, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQH = 1000
    'End If
    ilRet = mSchSpot(slSchStatus, -1, slLogDate, ilGameNo, llSdfRecPosSrce, ilBkQH, tmAddEvt, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, tmSmfA, ilPriceLevel)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilMdIndex = UBound(tmWAMdExt) - 1
    'gBookSpot now handles retaining copy
    'If (tmWAMdExt(ilMdIndex).sPtType = "1") Or (tmWAMdExt(ilMdIndex).sPtType = "2") Or (tmWAMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tmWAMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tmWAMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tmWAMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
    ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 1) As SDFMDEXT
    ilRet = btrEndTrans(hmSdf)
    mUnblockDay
    mVbcL1MinMax False
    mVbcL2MinMax False
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mLogSwapSpot                    *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Swap spot within Log day       *
'*                                                     *
'*******************************************************
Private Sub mLogSwapSpot(slLogDate As String, ilGameNo As Integer, tlEvt() As EVTINFO, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF)
'
'   mLogSwapSpot slLogDate, tlEvt(), tlVcf0(), tlVcf6(), tlVcf7()
'   Where:
'       slLogDate(I)- Date of spots
'       tlEvt()(I/O)- source/destination of spot
'       tlVcf0()(I)- Vehicle conflict table (Monday-Friday) for date
'       tlVcf6()(I)- Vehicle conflict table (Saturday) for date
'       tlVcf7()(I)- Vehicle conflict table (Sunday) for date
'
'       imDragIndexSrce(I)- index within tlEvt of source spot
'       imDragIndexDest(I)- index within tlEvt of destination spot
'
    Dim ilRet As Integer
    Dim llSdfRecPosSrce As Long
    Dim llSdfRecPosDest As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim llSsfAvailRecPosDest As Long
    Dim ilSsfAvailIndexDest As Integer
    Dim ilPositionDest As Integer
    Dim slTimeDest As String
    Dim slSchStatusA As String
    Dim slSchStatusB As String
    Dim ilBkQHA As Integer
    Dim ilBkQHB As Integer
    Dim ilMdIndex As Integer
    Dim ilPriceLevelA As Integer
    Dim ilPriceLevelB As Integer
    'Swap spots
    'ReDim tmSpotMove(1 To 3) As SPOTMOVE
    ReDim tmSpotMove(0 To 2) As SPOTMOVE


    If (smSplitNetworkType = "P") Or (smSplitNetworkType = "S") Then
        mLogMoveSpot slLogDate, ilGameNo, tlEvt(), tlVcf0(), tlVcf6(), tlVcf7(), ""
        Exit Sub
    End If
    If ilGameNo <= 0 Then
        If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDate), 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    Else
        If Not mBlockDay(65536 * imVehCode + ilGameNo, 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    End If

    'tmSpotMove(1).iSpotIndex = tlEvt(imDragIndexSrce).iSsfIndex
    'tmSpotMove(1).lSpotSsfRecPos = tlEvt(imDragIndexSrce).lSsfRecPos
    'tmSpotMove(1).lSdfCode = tlEvt(imDragIndexSrce).lSdfCode
    'tmSpotMove(1).iAvailIndex = -1
    'tmSpotMove(2).iSpotIndex = tlEvt(imDragIndexDest).iSsfIndex
    'tmSpotMove(2).lSpotSsfRecPos = tlEvt(imDragIndexDest).lSsfRecPos
    'tmSpotMove(2).lSdfCode = tlEvt(imDragIndexDest).lSdfCode
    'tmSpotMove(2).iAvailIndex = -1
    
    tmSpotMove(0).iSpotIndex = tlEvt(imDragIndexSrce).iSsfIndex
    tmSpotMove(0).lSpotSsfRecPos = tlEvt(imDragIndexSrce).lSsfRecPos
    tmSpotMove(0).lSdfCode = tlEvt(imDragIndexSrce).lSdfCode
    tmSpotMove(0).iAvailIndex = -1
    tmSpotMove(1).iSpotIndex = tlEvt(imDragIndexDest).iSsfIndex
    tmSpotMove(1).lSpotSsfRecPos = tlEvt(imDragIndexDest).lSsfRecPos
    tmSpotMove(1).lSdfCode = tlEvt(imDragIndexDest).lSdfCode
    tmSpotMove(1).iAvailIndex = -1
    'lLen contains lChfCode
    llSdfRecPosSrce = tlEvt(imDragIndexSrce).lTime
    slSchStatusA = mMoveTest(llSdfRecPosSrce, slLogDate, ilGameNo, tlEvt(), imDragIndexDest, tlVcf0(), tlVcf6(), tlVcf7(), tlEvt(imDragIndexSrce).sShow, ilBkQHA, 0)
    If slSchStatusA = "" Then
        mClearDrag True
        Exit Sub
    End If
    ilPriceLevelA = imPriceLevel
    'lLen contains lChfCode
    llSdfRecPosDest = tlEvt(imDragIndexDest).lTime
    slSchStatusB = mMoveTest(llSdfRecPosDest, slLogDate, ilGameNo, tlEvt(), imDragIndexSrce, tlVcf0(), tlVcf6(), tlVcf7(), tlEvt(imDragIndexDest).sShow, ilBkQHB, 0)
    If slSchStatusB = "" Then
        mClearDrag True
        Exit Sub
    End If
    ilPriceLevelB = imPriceLevel
    ilRet = mBeginTrans(True, True)   'btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
        'mClearDrag True
        mUnblockDay
        Exit Sub
    End If
    mGetAvailIndex tlEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
    mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, slTimeDest
    ilRet = mUnschSpot("TM", -1, slLogDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)   'Spot added to tmWAMdExt as next to last event
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilRet = mUnschSpot("TM", -1, slLogDate, ilGameNo, llSsfAvailRecPosDest, llSdfRecPosDest, tmWAMdExt(), tmSmfB)   'Spot added to tmWAMdExt as last event
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    'If Srce prior to destination, then destination index does not require a decrement, then increment after scheduling into srce
    'the dest end up at the same place
    If (llSsfAvailRecPosSrce = llSsfAvailRecPosDest) And (ilSsfAvailIndexSrce > ilSsfAvailIndexDest) Then
        ilSsfAvailIndexSrce = ilSsfAvailIndexSrce - 1
    End If
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPosDest
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosDest, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogSwapSpot-GetDirect Sdf(1)"
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDate, slTimeDest, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQHB = 1000
    'End If
    ilRet = mSchSpot(slSchStatusB, -1, slLogDate, ilGameNo, llSdfRecPosDest, ilBkQHB, tmAddEvt, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, tmSmfB, ilPriceLevelB)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilMdIndex = UBound(tmWAMdExt) - 1
    'gBookSpot now handles retaining copy
    'If (tmWAMdExt(ilMdIndex).sPtType = "1") Or (tmWAMdExt(ilMdIndex).sPtType = "2") Or (tmWAMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosDest, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tmWAMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tmWAMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tmWAMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPosSrce
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mLogSwapSpot-GetDirect Sdf(2)"
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDate, slTimeDest, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQHA = 1000
    'End If
    ilRet = mSchSpot(slSchStatusA, -1, slLogDate, ilGameNo, llSdfRecPosSrce, ilBkQHA, tmAddEvt, llSsfAvailRecPosDest, ilSsfAvailIndexDest, ilPositionDest, tmSmfA, ilPriceLevelA)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
        'mClearDrag True
        'mForceRepaintWeekly True
        Exit Sub
    End If
    ilMdIndex = UBound(tmWAMdExt) - 2
    'gBookSpot now handles retaining copy
    'If (tmWAMdExt(ilMdIndex).sPtType = "1") Or (tmWAMdExt(ilMdIndex).sPtType = "2") Or (tmWAMdExt(ilMdIndex).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPosSrce, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tmWAMdExt(ilMdIndex).iRotNo
    '        tmSdf.sPtType = tmWAMdExt(ilMdIndex).sPtType
    '        tmSdf.lCopyCode = tmWAMdExt(ilMdIndex).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    'Remove the two spot that were temporary placed into work area
    'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 2) As SDFMDEXT
    ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 2) As SDFMDEXT
    ilRet = btrEndTrans(hmSdf)
    mUnblockDay
    mVbcL1MinMax False
    mVbcL2MinMax False
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMakeAvailShow                  *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format avail string            *
'*                                                     *
'*******************************************************
Private Function mMakeAvailShow(ilUnitSold As Integer, llSecSold As Long, ilUnitInv As Integer, llSecInv As Long) As String
    Dim slStr As String
    Dim slSec As String
    If (Not pbcDW.Visible) And (ilUnitSold = 0) And (llSecSold = 0) And (ilUnitInv = 0) And (llSecInv = 0) Then
        mMakeAvailShow = ""
        Exit Function
    End If
    If imAvailSd = 0 Then   'Show sold
        If imAvailUn = 0 Then   'Sold by units
            If imAvailNo = 0 Then   'show number
                slStr = Trim$(str$(ilUnitSold))
            Else
                If ilUnitInv > 0 Then
                    slStr = Trim$(str$(CInt((100 * ilUnitSold) / ilUnitInv)))
                Else
                    slStr = "+"
                End If
            End If
        Else
            If imAvailNo = 0 Then   'show number
                slStr = gCurrencyToLength(CCur(llSecSold))
                slStr = gFormatLength(slStr, "3", True)
            Else
                If llSecInv > 0 Then
                    slStr = Trim$(str$(CLng((100 * llSecSold) / llSecInv)))
                Else
                    slStr = "+"
                End If
            End If
        End If
    ElseIf imAvailSd = 1 Then    'Unsold
        If imAvailUn = 0 Then   'UnSold by units
            If imAvailNo = 0 Then   'show numbers
                If ilUnitInv >= ilUnitSold Then
                    slStr = Trim$(str$(ilUnitInv - ilUnitSold))
                Else
                    slStr = "-" & Trim$(str$(ilUnitSold - ilUnitInv))
                End If
            Else
                If ilUnitInv > 0 Then
                    If ilUnitInv >= ilUnitSold Then
                        slStr = Trim$(str$(CInt((100 * (ilUnitInv - ilUnitSold)) / ilUnitInv)))
                    Else
                        slStr = Trim$(str$(CInt((100 * (ilUnitSold - ilUnitInv)) / ilUnitInv + 100)))
                    End If
                Else
                    slStr = "+"
                End If
            End If
        Else
            If imAvailNo = 0 Then   'show numbers
                If llSecInv >= llSecSold Then
                    slStr = gCurrencyToLength((llSecInv - llSecSold))
                    slStr = gFormatLength(slStr, "3", True)
                Else
                    slStr = gCurrencyToLength((llSecSold - llSecInv))
                    slStr = "-" & gFormatLength(slStr, "3", True)
                End If
            Else
                If llSecInv > 0 Then
                    If llSecInv >= llSecSold Then
                        slStr = Trim$(str$(CLng((100 * (llSecInv - llSecSold)) / llSecInv)))
                    Else
                        slStr = Trim$(str$(CLng((100 * (llSecSold - llSecInv)) / llSecInv + 100)))
                    End If
                Else
                    slStr = "+"
                End If
            End If
        End If
    ElseIf imAvailSd = 2 Then   'Inventory only
        If imAvailUn = 0 Then   'show units
            slStr = Trim$(str$(ilUnitInv))
        Else
            slSec = gCurrencyToLength(CCur(llSecInv))
            slStr = gFormatLength(slSec, "3", True)
        End If
    End If
    mMakeAvailShow = slStr
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mMakeManSchView                 *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Add spot event to array and     *
'*                     adjust remainder record         *
'*                                                     *
'*******************************************************
Private Sub mMakeManSchView(ilSource As Integer)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilListIndex                                                                           *
'******************************************************************************************

'
'   mMakeManSchView ilSource
'   where:
'       ilSource (I)- 0=Times spot screen; 1=Advertiser spot screen
'
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slNoSpots As String
    'Dim llMonDate As Long
    'Dim llSunDate As Long
    'Dim slMonDate As String
    'Dim slSunDate As String
    Dim slStr As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilCheck As Integer
    Dim ilUpper As Integer
    Dim ilFound As Integer
    Dim ilShow As Integer
    Dim slShow As String
    Dim slNameCode As String
    Dim ilGsf As Integer
    Dim ilGameNo As Integer
    Dim slRate As String

    If ilSource = 0 Then
        If (imLog2Type < 5) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
            Exit Sub
        End If
        'llMonDate = gDateValue(gObtainPrevMonday(smLog1Date))
        'llSunDate = llMonDate + 6
        'slMonDate = Format$(llMonDate, "m/d/yy")
        'slSunDate = Format$(llSunDate, "m/d/yy")
        'For ilLoop = 1 To UBound(lmL2ManSchCode, 2) - 1 Step 1
        For ilLoop = 0 To UBound(lmL2ManSchCode, 2) - 1 Step 1
            '5/5/11: Active Manual Game mode
            If tmVef.sType <> "G" Then
                ilGameNo = 0
            Else
                ilGameNo = mGetL1GameNo()
            End If
            ilRet = mReadChfClfRdfCffRec(lmL2ManSchCode(1, ilLoop), imL2ManSchInfo(1, ilLoop), lmL2ManSchCode(2, ilLoop), ilGameNo, smLog1Date, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
            '5/5/11
            If ilRet Then
                If tmCff(0).sDelete <> "Y" Then
                    'If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then 'Weekly
                    If (tmCff(0).sDyWk <> "D") Then  'Weekly
                        imL2ManSchInfo(4, ilLoop) = Val(slNoSpots)
                        'ilRet = gObtainCntrSpot(imVehCode, lmL2ManSchCode(ilLoop), imL2ManSchInfo(1, ilLoop), slMonDate, slSunDate, lbcManSchSpotSort, tmManSchSdfExt())
                    Else
                        imL2ManSchInfo(4, ilLoop) = tmCff(0).iDay(imLog1Day)
                        'ilRet = gObtainCntrSpot(imVehCode, lmL2ManSchCode(ilLoop), imL2ManSchInfo(1, ilLoop), smLog1Date, smLog1Date, lbcManSchSpotSort, tmManSchSdfExt())
                    End If
                    'imL2ManSchInfo(3, ilLoop) = UBound(tmManSchSdfExt) - 1
                    lmL2ManSchInfo(3, ilLoop) = tmCff(0).lActPrice
                    smL2ManSchInfo(3, ilLoop) = tmCff(0).sPriceType
                    smL2ManSchInfo(4, ilLoop) = mGetLineDaypartInfo(True, False) & " " & mGetFlightDays()
                Else
                    imL2ManSchInfo(4, ilLoop) = -1
                    'ilRet = gObtainCntrSpot(imVehCode, lmL2ManSchCode(ilLoop), imL2ManSchInfo(1, ilLoop), slMonDate, slSunDate, lbcManSchSpotSort, tmManSchSdfExt())
                    'imL2ManSchInfo(3, ilLoop) = UBound(tmManSchSdfExt) - 1
                    lmL2ManSchInfo(3, ilLoop) = -1
                    smL2ManSchInfo(3, ilLoop) = ""
                    smL2ManSchInfo(4, ilLoop) = ""
                End If
            End If
        Next ilLoop
        'Make array to be displayed
        lbcL2ManSch.Clear
        ilLoop = 0  '1
        Do While ilLoop < UBound(lmL2ManSchCode, 2)
            If ((imL2ManSchInfo(4, ilLoop) >= 0) Or (imL2ManSchInfo(3, ilLoop) > 0)) And (lmL2ManSchCode(1, ilLoop) > 0) Then
                ilUpper = 0 '1
                '5/5/11: Acive manual contract for games
                'ReDim ilInfo(1 To 4, 1 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                ReDim ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                ilInfo(1, ilUpper) = imL2ManSchInfo(2, ilLoop)
                ilInfo(2, ilUpper) = imL2ManSchInfo(3, ilLoop)
                ilInfo(3, ilUpper) = imL2ManSchInfo(4, ilLoop)
                'Active manual contract for games
                ilInfo(4, ilUpper) = imL2ManSchInfo(7, ilLoop)
                ilIndex = ilLoop + 1
                Do While ilIndex < UBound(lmL2ManSchCode, 2)
                    If lmL2ManSchCode(1, ilLoop) = lmL2ManSchCode(1, ilIndex) Then
                        If (imL2ManSchInfo(4, ilIndex) >= 0) Or (imL2ManSchInfo(3, ilIndex) > 0) Then
                            ilFound = False
                            'For ilCheck = 1 To UBound(ilInfo, 2) - 1 Step 1
                            For ilCheck = 0 To UBound(ilInfo, 2) - 1 Step 1
                                If ilInfo(1, ilCheck) = imL2ManSchInfo(2, ilIndex) Then
                                    ilFound = True
                                    ilInfo(2, ilCheck) = ilInfo(2, ilCheck) + imL2ManSchInfo(3, ilIndex)
                                    ilInfo(3, ilCheck) = ilInfo(3, ilCheck) + imL2ManSchInfo(4, ilIndex)
                                    Exit For
                                End If
                            Next ilCheck
                            If Not ilFound Then
                                ilUpper = UBound(ilInfo, 2)
                                'ReDim Preserve ilInfo(1 To 4, 1 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                ReDim Preserve ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                ilInfo(1, ilUpper) = imL2ManSchInfo(2, ilIndex)
                                ilInfo(2, ilUpper) = imL2ManSchInfo(3, ilIndex)
                                ilInfo(3, ilUpper) = imL2ManSchInfo(4, ilIndex)
                                '5/5/11: Active manual contract for games
                                ilInfo(4, ilUpper) = imL2ManSchInfo(7, ilLoop)
                            End If
                            ilIndex = ilIndex + 1
                        Else
                            ilIndex = ilIndex + 1
                        End If
                    Else
                        Exit Do
                    End If
                Loop
                'Move results to list box
                slNameCode = tmL2ManSchCode(imL2ManSchInfo(5, ilLoop)).sKey    'lbcL2ManSchCode.List(imL2ManSchInfo(5, ilLoop))
                ilRet = gParseItem(slNameCode, 1, "\", slShow)
                'For ilShow = 1 To UBound(ilInfo, 2) - 1 Step 1
                For ilShow = 0 To UBound(ilInfo, 2) - 1 Step 1
                    '5/5/11: Active manual contract for games
                    If tmVef.sType <> "G" Then
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s"
                    Else
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s" & " E# " & Trim$(str$(ilInfo(4, ilShow)))
                    End If
                    '5/5/11
                Next ilShow
                lbcL2ManSch.AddItem slShow
                For ilShow = ilLoop To ilIndex - 1 Step 1
                    imL2ManSchInfo(6, ilShow) = lbcL2ManSch.ListCount - 1
                Next ilShow
                ilLoop = ilIndex
            Else
                ilLoop = ilLoop + 1
            End If
        Loop
        ilLoop = 0  '1
        Do While ilLoop < UBound(lmL2ManSchCode, 2)
            If ((imL2ManSchInfo(4, ilLoop) >= 0) Or (imL2ManSchInfo(3, ilLoop) > 0)) And (lmL2ManSchCode(2, ilLoop) > 0) Then
                ilUpper = 0 '1
                '5/5/11: Active manual contract for games
                'ReDim ilInfo(1 To 4, 1 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                ReDim ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                ilInfo(1, ilUpper) = imL2ManSchInfo(2, ilLoop)
                ilInfo(2, ilUpper) = imL2ManSchInfo(3, ilLoop)
                ilInfo(3, ilUpper) = imL2ManSchInfo(4, ilLoop)
                'Active manual contract for games
                ilInfo(4, ilUpper) = imL2ManSchInfo(7, ilLoop)
                ilIndex = ilLoop + 1
                Do While ilIndex < UBound(lmL2ManSchCode, 2)
                    If (lmL2ManSchCode(2, ilLoop) = lmL2ManSchCode(2, ilIndex)) Then
                        If (imL2ManSchInfo(4, ilIndex) >= 0) Or (imL2ManSchInfo(3, ilIndex) > 0) Then
                            ilFound = False
                            'For ilCheck = 1 To UBound(ilInfo, 2) - 1 Step 1
                            For ilCheck = 0 To UBound(ilInfo, 2) - 1 Step 1
                                If ilInfo(1, ilCheck) = imL2ManSchInfo(2, ilIndex) Then
                                    ilFound = True
                                    ilInfo(2, ilCheck) = ilInfo(2, ilCheck) + imL2ManSchInfo(3, ilIndex)
                                    ilInfo(3, ilCheck) = ilInfo(3, ilCheck) + imL2ManSchInfo(4, ilIndex)
                                    Exit For
                                End If
                            Next ilCheck
                            If Not ilFound Then
                                ilUpper = UBound(ilInfo, 2)
                                'ReDim Preserve ilInfo(1 To 4, 1 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                ReDim Preserve ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                ilInfo(1, ilUpper) = imL2ManSchInfo(2, ilIndex)
                                ilInfo(2, ilUpper) = imL2ManSchInfo(3, ilIndex)
                                ilInfo(3, ilUpper) = imL2ManSchInfo(4, ilIndex)
                                'Active manual contract for games
                                ilInfo(4, ilUpper) = imL2ManSchInfo(7, ilIndex)
                            End If
                            ilIndex = ilIndex + 1
                        Else
                            ilIndex = ilIndex + 1
                        End If
                    Else
                        Exit Do
                    End If
                Loop
                'Move results to list box
                slNameCode = tmL2ManSchCode(imL2ManSchInfo(5, ilLoop)).sKey    'lbcL2ManSchCode.List(imL2ManSchInfo(5, ilLoop))
                ilRet = gParseItem(slNameCode, 1, "\", slShow)
                'For ilShow = 1 To UBound(ilInfo, 2) - 1 Step 1
                For ilShow = 0 To UBound(ilInfo, 2) - 1 Step 1
                    'Active manual contracts for games
                    If tmVef.sType <> "G" Then
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s"
                    Else
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s" & " E# " & " " & Trim$(str$(ilInfo(4, ilShow)))
                    End If
                Next ilShow
                lbcL2ManSch.AddItem slShow
                For ilShow = ilLoop To ilIndex - 1 Step 1
                    imL2ManSchInfo(6, ilShow) = lbcL2ManSch.ListCount - 1
                Next ilShow
                ilLoop = ilIndex
            Else
                ilLoop = ilLoop + 1
            End If
        Loop
        mVbcL2MinMax True
    Else
        If (imAdMdType < 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then    'Missed; Hidden; Cancelled
            Exit Sub
        End If
        If imAdMdType = 11 Then
            mVbcMissedMinMax True
            Exit Sub
        End If

        If tmVef.sType <> "G" Then
            slStr = edcDate.Text    'plcDate.Caption
            ilGameNo = 0
        End If
        'llMonDate = gDateValue(gObtainPrevMonday(slStr)) 'Log1
        'llSunDate = llMonDate + 6
        'slMonDate = Format$(llMonDate, "m/d/yy")
        'slSunDate = Format$(llSunDate, "m/d/yy")
        'For ilLoop = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
        For ilLoop = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
            If tmVef.sType = "G" Then
                ilRet = False
                '5/5/11: Active manual contract mode for games
                If imDW = 0 Then
                    ilGameNo = mGetL1GameNo()
                    ilRet = mReadChfClfRdfCffRec(lmAdMdManSchCode(1, ilLoop), imAdMdManSchInfo(1, ilLoop), lmAdMdManSchCode(2, ilLoop), ilGameNo, slStr, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
                Else
                    For ilGsf = 0 To 6 Step 1
                        '5/5/11: Active manual mode
                        If ilGsf < UBound(tmGsfInfo) Then
                        '5/5/11
                            If (imAdMdManSchInfo(7, ilLoop) = tmGsfInfo(ilGsf).iGameNo) And (imAdMdManSchInfo(7, ilLoop) > 0) Then
                                ilGameNo = tmGsfInfo(ilGsf).iGameNo
                                slStr = Format$(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
                                ilRet = mReadChfClfRdfCffRec(lmAdMdManSchCode(1, ilLoop), imAdMdManSchInfo(1, ilLoop), lmAdMdManSchCode(2, ilLoop), ilGameNo, slStr, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
                                If ilRet Then
                                    Exit For
                                End If
                            End If
                        '5/5/11: Active manual contract mode
                        Else
                            Exit For
                        End If
                        '5/5/11
                    Next ilGsf
                End If
                '5/5/11: Active manual contracts for games
            Else
                ilRet = mReadChfClfRdfCffRec(lmAdMdManSchCode(1, ilLoop), imAdMdManSchInfo(1, ilLoop), lmAdMdManSchCode(2, ilLoop), 0, slStr, slStartDate, slEndDate, slNoSpots, -1, 0)
            End If
            '5/5/11: Active manual contracts for games, moved up
            'ilRet = mReadChfClfRdfCffRec(lmAdMdManSchCode(1, ilLoop), imAdMdManSchInfo(1, ilLoop), lmAdMdManSchCode(2, ilLoop), ilGameNo, slStr, slStartDate, slEndDate, slNoSpots, -1)
            
            If ilRet Then
                If tmCff(0).sDelete <> "Y" Then
                    imAdMdManSchInfo(4, ilLoop) = Val(slNoSpots)
                    'ilRet = gObtainCntrSpot(imVehCode, lmAdMdManSchCode(ilLoop), imAdMdManSchInfo(1, ilLoop), slMonDate, slSunDate, lbcManSchSpotSort, tmManSchSdfExt())
                    'imAdMdManSchInfo(3, ilLoop) = UBound(tmManSchSdfExt) - 1
                    lmAdMdManSchInfo(3, ilLoop) = tmCff(0).lActPrice
                    smAdMdManSchInfo(3, ilLoop) = tmCff(0).sPriceType
                    smAdMdManSchInfo(4, ilLoop) = mGetLineDaypartInfo(True, False) & " " & mGetFlightDays()
                Else
                    imAdMdManSchInfo(4, ilLoop) = -1
                    'ilRet = gObtainCntrSpot(imVehCode, lmAdMdManSchCode(ilLoop), imAdMdManSchInfo(1, ilLoop), slMonDate, slSunDate, lbcManSchSpotSort, tmManSchSdfExt())
                    'imAdMdManSchInfo(3, ilLoop) = UBound(tmManSchSdfExt) - 1
                    lmAdMdManSchInfo(3, ilLoop) = -1
                    smAdMdManSchInfo(3, ilLoop) = ""
                    smAdMdManSchInfo(4, ilLoop) = ""
                End If
            End If
        Next ilLoop
        'Make array to be displayed
        lbcAdMdManSch.Clear
        ilLoop = 0  '1
        Do While ilLoop < UBound(lmAdMdManSchCode, 2)
            If ((imAdMdManSchInfo(4, ilLoop) >= 0) Or (imAdMdManSchInfo(3, ilLoop) > 0)) And (lmAdMdManSchCode(1, ilLoop) > 0) Then
                ilUpper = 0 '1
                '5/5/11: Active manual contract for game
                ReDim ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                ilInfo(1, ilUpper) = imAdMdManSchInfo(2, ilLoop)
                ilInfo(2, ilUpper) = imAdMdManSchInfo(3, ilLoop)
                ilInfo(3, ilUpper) = imAdMdManSchInfo(4, ilLoop)
                '5/5/11: Active manual contract for game
                ilInfo(4, ilUpper) = imAdMdManSchInfo(7, ilLoop)
                ilIndex = ilLoop + 1
                If imADMdShow = 1 Then
                    Do While ilIndex < UBound(lmAdMdManSchCode, 2)
                        If (lmAdMdManSchCode(1, ilLoop) = lmAdMdManSchCode(1, ilIndex)) Then
                            If (imAdMdManSchInfo(4, ilIndex) >= 0) Or (imAdMdManSchInfo(3, ilIndex) > 0) Then
                                ilFound = False
                                'For ilCheck = 1 To UBound(ilInfo, 2) - 1 Step 1
                                For ilCheck = 0 To UBound(ilInfo, 2) - 1 Step 1
                                    If ilInfo(1, ilCheck) = imAdMdManSchInfo(2, ilIndex) Then
                                        ilFound = True
                                        ilInfo(2, ilCheck) = ilInfo(2, ilCheck) + imAdMdManSchInfo(3, ilIndex)
                                        ilInfo(3, ilCheck) = ilInfo(3, ilCheck) + imAdMdManSchInfo(4, ilIndex)
                                        Exit For
                                    End If
                                Next ilCheck
                                If Not ilFound Then
                                    ilUpper = UBound(ilInfo, 2)
                                    ReDim Preserve ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                    ilInfo(1, ilUpper) = imAdMdManSchInfo(2, ilIndex)
                                    ilInfo(2, ilUpper) = imAdMdManSchInfo(3, ilIndex)
                                    ilInfo(3, ilUpper) = imAdMdManSchInfo(4, ilIndex)
                                    '5/5/11: Active manual contract for games
                                    ilInfo(4, ilUpper) = imAdMdManSchInfo(7, ilIndex)
                                End If
                                ilIndex = ilIndex + 1
                            Else
                                ilIndex = ilIndex + 1
                            End If
                        Else
                            Exit Do
                        End If
                    Loop
                End If
                'Move results to list box
                slNameCode = tmAdMdManSchCode(imAdMdManSchInfo(5, ilLoop)).sKey  'lbcAdMdManSchCode.List(imAdMdManSchInfo(5, ilLoop))
                ilRet = gParseItem(slNameCode, 1, "\", slShow)
                'For ilShow = 1 To UBound(ilInfo, 2) - 1 Step 1
                For ilShow = 0 To UBound(ilInfo, 2) - 1 Step 1
                    '5/5/11: Active manual contract for games
                    If tmVef.sType <> "G" Then
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s"
                    Else
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s" & " E# " & " " & Trim$(str$(ilInfo(4, ilShow)))
                    End If
                Next ilShow
                If (imADMdShow = 0) And (tmVef.sType <> "G") Then
                    slShow = slShow & " " & smAdMdManSchInfo(4, ilLoop)
                End If
                If (imADMdShow = 0) And (imMore = 1) And (tmVef.sType <> "G") Then
                    Select Case smAdMdManSchInfo(3, ilLoop)
                        Case "T"    'True
                            slRate = gLongToStrDec(lmAdMdManSchInfo(3, ilLoop), 2)
                        Case "N"    'No Charge
                            slRate = "N/C"
                        Case "M"    'MG Line
                            slRate = "MG"
                        Case "B"    'Bonus
                            slRate = "Bonus"
                        Case "S"    'Spinoff
                            slRate = "Spinoff"
                        Case "P"    'Package
                            slRate = gLongToStrDec(lmAdMdManSchInfo(3, ilLoop), 2)
                        Case "R"    'Recapturable
                            slRate = "Recapturable"
                        Case "A"    'ADU
                            slRate = "ADU"
                    End Select
                    slShow = slShow & " " & slRate
                End If
                lbcAdMdManSch.AddItem slShow
                For ilShow = ilLoop To ilIndex - 1 Step 1
                    imAdMdManSchInfo(6, ilShow) = lbcAdMdManSch.ListCount - 1
                Next ilShow
                ilLoop = ilIndex
            Else
                ilLoop = ilLoop + 1
            End If
        Loop
        ilLoop = 0  '1
        Do While ilLoop < UBound(lmAdMdManSchCode, 2)
            If ((imAdMdManSchInfo(4, ilLoop) >= 0) Or (imAdMdManSchInfo(3, ilLoop) > 0)) And (lmAdMdManSchCode(2, ilLoop) > 0) Then
                ilUpper = 0 '1
                '5/5/11: Active manual contract for games
                ReDim ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                ilInfo(1, ilUpper) = imAdMdManSchInfo(2, ilLoop)
                ilInfo(2, ilUpper) = imAdMdManSchInfo(3, ilLoop)
                ilInfo(3, ilUpper) = imAdMdManSchInfo(4, ilLoop)
                '5/5/11: Active manual contract for games
                ilInfo(4, ilUpper) = imAdMdManSchInfo(7, ilLoop)
                ilIndex = ilLoop + 1
                Do While ilIndex < UBound(lmAdMdManSchCode, 2)
                    If lmAdMdManSchCode(2, ilLoop) = lmAdMdManSchCode(2, ilIndex) Then
                        If (imAdMdManSchInfo(4, ilIndex) >= 0) Or (imAdMdManSchInfo(3, ilIndex) > 0) Then
                            ilFound = False
                            'For ilCheck = 1 To UBound(ilInfo, 2) - 1 Step 1
                            For ilCheck = 0 To UBound(ilInfo, 2) - 1 Step 1
                                If ilInfo(1, ilCheck) = imAdMdManSchInfo(2, ilIndex) Then
                                    ilFound = True
                                    ilInfo(2, ilCheck) = ilInfo(2, ilCheck) + imAdMdManSchInfo(3, ilIndex)
                                    ilInfo(3, ilCheck) = ilInfo(3, ilCheck) + imAdMdManSchInfo(4, ilIndex)
                                    Exit For
                                End If
                            Next ilCheck
                            If Not ilFound Then
                                ilUpper = UBound(ilInfo, 2)
                                'ReDim Preserve ilInfo(1 To 4, 1 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                ReDim Preserve ilInfo(0 To 4, 0 To ilUpper + 1) As Integer 'Index 1= Len; Index 2=# spots; Index 3=Max # spots
                                ilInfo(1, ilUpper) = imAdMdManSchInfo(2, ilIndex)
                                ilInfo(2, ilUpper) = imAdMdManSchInfo(3, ilIndex)
                                ilInfo(3, ilUpper) = imAdMdManSchInfo(4, ilIndex)
                                '5/5/11: Active manual contract for games
                                ilInfo(4, ilUpper) = imAdMdManSchInfo(7, ilLoop)
                            End If
                            ilIndex = ilIndex + 1
                        Else
                            ilIndex = ilIndex + 1
                        End If
                    Else
                        Exit Do
                    End If
                Loop
                'Move results to list box
                slNameCode = tmAdMdManSchCode(imAdMdManSchInfo(5, ilLoop)).sKey  'lbcAdMdManSchCode.List(imAdMdManSchInfo(5, ilLoop))
                ilRet = gParseItem(slNameCode, 1, "\", slShow)
                'For ilShow = 1 To UBound(ilInfo, 2) - 1 Step 1
                For ilShow = 0 To UBound(ilInfo, 2) - 1 Step 1
                    '5/5/11: Active manual contract for games
                    If tmVef.sType <> "G" Then
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s"
                    Else
                        slShow = slShow & "; " & Trim$(str$(ilInfo(2, ilShow))) & " of " & Trim$(str$(ilInfo(3, ilShow))) & " " & Trim$(str$(ilInfo(1, ilShow))) & "s" & " E# " & " " & Trim$(str$(ilInfo(4, ilShow)))
                    End If
                Next ilShow
                lbcAdMdManSch.AddItem slShow
                For ilShow = ilLoop To ilIndex - 1 Step 1
                    imAdMdManSchInfo(6, ilShow) = lbcAdMdManSch.ListCount - 1
                Next ilShow
                ilLoop = ilIndex
            Else
                ilLoop = ilLoop + 1
            End If
        Loop
        mVbcMissedMinMax True
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMakeMdSpot                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Create a Work Area missed spot *
'*                                                     *
'*******************************************************
Private Function mMakeMdSpot(llSdfRecPos As Long, tlMdExt() As SDFMDEXT) As Integer
    Dim ilRet As Integer
    Dim ilUpper As Integer
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slDate As String
    Dim slBonusOnInv As String
    Dim tlSmf As SMF
    ilUpper = UBound(tlMdExt)
    'bypass record zero
    If ilUpper = 0 Then
        ReDim Preserve tlMdExt(0 To ilUpper + 1) As SDFMDEXT
        ilUpper = 1
    End If
    
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mMakeMdSpot-GetDirect Sdf(1)"
        mMakeMdSpot = False
        Exit Function
    End If
    tlMdExt(ilUpper).lRecPos = llSdfRecPos
    tlMdExt(ilUpper).lSdfCode = tmSdf.lCode
    tlMdExt(ilUpper).iDate(0) = tmSdf.iDate(0)
    tlMdExt(ilUpper).iDate(1) = tmSdf.iDate(1)
    tlMdExt(ilUpper).iTime(0) = tmSdf.iTime(0)
    tlMdExt(ilUpper).iTime(1) = tmSdf.iTime(1)
    tlMdExt(ilUpper).lChfCode = tmSdf.lChfCode
    tlMdExt(ilUpper).lFsfCode = tmSdf.lFsfCode
    tlMdExt(ilUpper).iLineNo = tmSdf.iLineNo
    tlMdExt(ilUpper).iAdfCode = tmSdf.iAdfCode
    tlMdExt(ilUpper).iMnfMissed = igMnfMissed
    tlMdExt(ilUpper).iLen = tmSdf.iLen
    'gBookSpot now handles retaining copy
    tlMdExt(ilUpper).iRotNo = tmSdf.iRotNo
    tlMdExt(ilUpper).sPtType = tmSdf.sPtType
    tlMdExt(ilUpper).lCopyCode = tmSdf.lCopyCode
    tlMdExt(ilUpper).lchfcxfCode = -1
    tlMdExt(ilUpper).lClfCxfCode = -1
    tlMdExt(ilUpper).lchfcxfInt = -1
    If tlMdExt(ilUpper).lChfCode > 0 Then
        If tmChf.lCode <> tlMdExt(ilUpper).lChfCode Then
            tmChfSrchKey.lCode = tlMdExt(ilUpper).lChfCode
            ilRet = btrGetEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet <> BTRV_ERR_NONE Then
                igBtrError = ilRet
                sgErrLoc = "mMakeMdSpot-GetEqual Chf(2)"
                mMakeMdSpot = False
                Exit Function
            End If
        End If
    Else
        ilRet = mReadChfClfRdfRec(tmSdf.lChfCode, tmSdf.iLineNo, tmSdf.lFsfCode)
    End If
    tlMdExt(ilUpper).lCntrNo = tmChf.lCntrNo
    tlMdExt(ilUpper).sCntrType = tmChf.sType
    tlMdExt(ilUpper).sAdvtAbbr = ""
    slBonusOnInv = "Y"
    'For ilLoop = LBound(tgCommAdf) To UBound(tgCommAdf) - 1 Step 1
    '    If tmChf.iAdfCode = tgCommAdf(ilLoop).iCode Then
        ilLoop = gBinarySearchAdf(tmChf.iAdfCode)
        If ilLoop <> -1 Then
            tlMdExt(ilUpper).sAdvtAbbr = tgCommAdf(ilLoop).sAbbr
            slBonusOnInv = tgCommAdf(ilLoop).sBonusOnInv
    '        Exit For
        End If
    'Next ilLoop
    tlMdExt(ilUpper).sAdvtProd = tlMdExt(ilUpper).sAdvtAbbr & " " & Trim$(tmChf.sProduct)
    slStr = Trim$(str$(tlMdExt(ilUpper).lCntrNo))
    'slStr = slStr & "  " & RTrim$(tlMdExt(ilUpper).sAdvtAbbr) & " "
    'slStr = RTrim$(tlMdExt(ilUpper).sAdvtAbbr) & " "
    gUnpackDate tlMdExt(ilUpper).iDate(0), tlMdExt(ilUpper).iDate(1), slDate
    'slStr = slStr & "  " & slDate
    'mMakeMissedInfo moved to mUnschSpot
    'slInfo = mMakeMissedInfo(tlMdExt(ilUpper).lChfCode, tlMdExt(ilUpper).iLineNo, slDate, tlMdExt(ilUpper).sAdvtAbbr)
    'If slInfo <> "" Then
    '    slStr = slStr & " " & slInfo
    'Else
    '    slStr = slStr & "  Line Read Error"
    'End If
    tlMdExt(ilUpper).iMissedMG = False
    tlMdExt(ilUpper).iGameNo = tmSdf.iGameNo
    tlMdExt(ilUpper).sSplitNetwork = "N"
    If tmClf.lRafCode > 0 Then
        tlMdExt(ilUpper).sSplitNetwork = "Y"
    End If
    If (tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O") Then
        If tmSdf.sTracer = "*" Then
            If tmSdf.sSpotType = "X" Then
                'If tmSdf.sPriceType <> "N" Then
                If tmSdf.sPriceType = "+" Then
                    slStr = "+" & slStr '">" & slStr
                ElseIf tmSdf.sPriceType = "-" Then
                    slStr = "-" & slStr '"<" & slStr
                Else
                    If slBonusOnInv <> "N" Then
                        slStr = "+" & slStr
                    Else
                        slStr = "-" & slStr
                    End If
                End If
            Else
                tlMdExt(ilUpper).iMissedMG = True
            End If
        Else
            tmSmfSrchKey2.lCode = tmSdf.lCode
            ilRet = btrGetEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                tlMdExt(ilUpper).iGameNo = tlSmf.iGameNo
                If (tlSmf.lMtfCode > 0) And (lgMtfNoRecs > 0) Then
                    If tmSdf.sSpotType = "X" Then
                        'If tmSdf.sPriceType <> "N" Then
                        If tmSdf.sPriceType = "+" Then
                            slStr = "+" & slStr '">" & slStr
                        ElseIf tmSdf.sPriceType = "-" Then
                            slStr = "-" & slStr '"<" & slStr
                        Else
                            If slBonusOnInv <> "N" Then
                                slStr = "+" & slStr
                            Else
                                slStr = "-" & slStr
                            End If
                        End If
                    Else
                        tlMdExt(ilUpper).iMissedMG = True
                    End If
                End If
            End If
        End If
    End If
    tlMdExt(ilUpper).sShow = slStr
    mMakeMdSpot = True
    'ReDim Preserve tlMdExt(1 To ilUpper + 1) As SDFMDEXT
    ReDim Preserve tlMdExt(0 To ilUpper + 1) As SDFMDEXT
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mMakeMissedInfo                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build images for time view     *
'*                                                     *
'*******************************************************
Private Function mMakeMissedInfo(llChfCode As Long, ilLineNo As Integer, llFsfCode As Long, ilGameNo As Integer, slDate As String, slAdvtAbbr As String, slAdvtProd As String, slPrice As String, llChfCxfCode As Long, llChfCxfInt As Long, llClfCxfCode As Long, ilNoOrdered As Integer, ilLineInfo As Integer, slCntrType As String, llSxfCode As Long) As String
    Dim ilRet As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slStart As String
    Dim slEnd As String
    Dim slNoSpots As String
    Dim slStr As String
    Dim ilDay As Integer
    Dim ilDayIndex As Integer
    Dim slMultiTimes As String
    Dim slStrTime As String
    Dim slDay As String
    Dim slStartTime As String
    Dim slEndTime As String
    Dim ilLoop As Integer
    Dim slProduct As String
    Dim slBonusOnInv As String
    Dim ilPos As Integer
    Dim ilVef As Integer

    ilDay = gWeekDayStr(slDate)
    ilRet = mReadChfClfRdfCffRec(llChfCode, ilLineNo, llFsfCode, ilGameNo, slDate, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
    If slNoSpots <> "" Then
        ilNoOrdered = Val(slNoSpots)
    Else
        ilNoOrdered = 0
    End If
    slStr = ""
    If ilRet Then
        slProduct = Trim$(Left$(tmChf.sProduct, 7)) 'Mary request 12/23/98 was 15))
        'Test tgSpf to see if advt/prod or just prod-- code later
        'tlEvtSpot.sShow = "  " & Trim$(Str$(tmClf.iLen)) & "/" & slAdvt & "/" & slProduct
        If (tgSpf.sUseProdSptScr = "A") Or (tmChf.lSifCode <= 0) Then
            'slStr = Left$(Trim$(slAdvtAbbr), 7) & "," & slProduct
            If slProduct <> "" Then
                slAdvtProd = Trim$(slAdvtAbbr) & "," & slProduct
            Else
                slAdvtProd = Trim$(slAdvtAbbr)
            End If
            slStr = slAdvtProd
        Else
            'slStr = slProduct
            tmAdf.sAbbr = slAdvtAbbr
            slAdvtProd = gGetShortTitle(hmVsf, hmClf, hmSif, tmChf, tmAdf, tmSdf)
            'tmCrfSrchKey.sRotType = "A"
            'tmCrfSrchKey.iEtfCode = 0
            'tmCrfSrchKey.iEnfCode = 0
            'tmCrfSrchKey.iAdfCode = tmSdf.iAdfCode
            'tmCrfSrchKey.lChfCode = tmSdf.lChfCode
            'ilCrfVefCode = gGetCrfVefCode(hmClf, tmSdf)
            'tmCrfSrchKey.iVefCode = ilCrfVefCode
            'tmCrfSrchKey.iRotNo = tmSdf.iRotNo
            'ilRet = btrGetEqual(hmCrf, tmCrf, imCrfRecLen, tmCrfSrchKey, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)    'Get first record as starting point of extend operation
            'If ilRet = BTRV_ERR_NONE Then
            '    tmSifSrchKey.lCode = tmCrf.lSifCode
            '    ilRet = btrGetEqual(hmSif, tmSif, imSifRecLen, tmSifSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'Else
            '    tmSifSrchKey.lCode = tmChf.lSifCode
            '    ilRet = btrGetEqual(hmSif, tmSif, imSifRecLen, tmSifSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            'End If
            'If ilRet = BTRV_ERR_NONE Then
            '    slAdvtProd = Trim$(tmSif.sName)
            'Else
            '    If slProduct <> "" Then
            '        slAdvtProd = Trim$(slAdvtAbbr) & "," & slProduct
            '    Else
            '        slAdvtProd = Trim$(slAdvtAbbr)
            '    End If
            'End If
            slStr = slAdvtProd
        End If
        If tmSdf.sTracer = "*" Then
            If tmSdf.sSpotType = "X" Then
                slBonusOnInv = "Y"
                'For ilLoop = LBound(tgCommAdf) To UBound(tgCommAdf) Step 1
                '    If tmSdf.iAdfCode = tgCommAdf(ilLoop).iCode Then
                    ilLoop = gBinarySearchAdf(tmSdf.iAdfCode)
                    If ilLoop <> -1 Then
                        slBonusOnInv = tgCommAdf(ilLoop).sBonusOnInv
                '        Exit For
                    End If
                'Next ilLoop
                'If tmSdf.sPriceType <> "N" Then
                If tmSdf.sPriceType = "+" Then
                    slStr = "+" & slStr '">" & slStr
                ElseIf tmSdf.sPriceType = "-" Then
                    slStr = "-" & slStr '"<" & slStr
                Else
                    If slBonusOnInv <> "N" Then
                        slStr = "+" & slStr
                    Else
                        slStr = "-" & slStr
                    End If
                End If
            Else
                slStr = "~" & slStr
            End If
            tmMtfSrchKey.lCode = tmSdf.lSmfCode
            ilRet = btrGetEqual(hmMtf, tmMtf, imMtfRecLen, tmMtfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                slStr = slStr & " "
                For ilDayIndex = 0 To 6 Step 1
                    If (tmMtf.iDays(ilDayIndex) <> 0) Then
                        slStr = slStr & "y"
                    Else
                        slStr = slStr & "n"
                    End If
                Next ilDayIndex
                gUnpackTime tmMtf.iToStartTime(0), tmMtf.iToStartTime(1), "A", "1", slStartTime
                gUnpackTime tmMtf.iToEndTime(0), tmMtf.iToEndTime(1), "A", "1", slEndTime
                slStr = slStr & " " & slStartTime & "-" & slEndTime
                slStr = slStr & str$(tmSdf.iLen) & "s"
                If tmClf.iPosition = 1 Then
                    slStr = slStr & "@"
                End If
                If tmClf.sSoloAvail = "Y" Then
                    slStr = slStr & "#"
                End If
                mMakeMissedInfo = slStr
                Exit Function
            End If
        End If
        'Comments
        If llChfCxfCode = -1 Then
            llChfCxfCode = 0
            If tmChf.lCxfCode > 0 Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = tmChf.lCxfCode
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    If tmCxf.sShSpot = "Y" Then
                        llChfCxfCode = tmChf.lCxfCode
                    End If
                End If
            End If
        End If
        If llChfCxfInt = -1 Then
            llChfCxfInt = 0
            If tmChf.lCxfInt > 0 Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = tmChf.lCxfInt
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    If tmCxf.sShSpot = "Y" Then
                        llChfCxfInt = tmChf.lCxfCode
                    End If
                End If
            End If
        End If
        If llClfCxfCode = -1 Then
            llClfCxfCode = 0
            If (tmClf.lCxfCode > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = tmClf.lCxfCode
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    If tmCxf.sShSpot = "Y" Then
                        llClfCxfCode = tmClf.lCxfCode
                    End If
                End If
            End If
        End If
        slCntrType = tmChf.sType
        ilLineInfo = 0

        If tmSdf.lChfCode > 0 Then
            If (tmClf.sType = "H") Then
                ilLineInfo = ilLineInfo Or 8
            ElseIf (tmClf.sType = "O") Or (tmClf.sType = "A") Or (tmClf.sType = "E") Then
                ilLineInfo = ilLineInfo Or 8
            End If
            If (tmChf.sType = "M") Or (tmChf.sType = "S") Then
                ilLineInfo = ilLineInfo Or &H20
            End If
            If (tmChf.sStatus = "H") Then
                ilLineInfo = ilLineInfo Or &H80
            End If
            If tgSaf(0).sHideDemoOnBR = "Y" And tmChf.sHideDemo = "Y" Then  'Impressions
                ilLineInfo = ilLineInfo Or &H4000
            End If
            ilRet = gGetSpotPrice(tmSdf, tmClf, hmCff, hmSmf, hmVef, hmVsf, slPrice)
        Else
            slPrice = "Feed"
        End If
        If (slStartDate <> "") And (tmCff(0).sDelete <> "Y") Then
            slStr = slStr & " " & RTrim$(slNoSpots)
            If tmCff(0).sDyWk <> "D" Then
                slStr = slStr & "/w "
            Else
                slStr = slStr & "/d "
            End If
            If tmLnRdf.sInOut = "I" Then
                If tmAnf.iCode <> tmLnRdf.ianfCode Then
                    tmAnfSrchKey.iCode = tmLnRdf.ianfCode
                    ilRet = btrGetEqual(hmAnf, tmAnf, imAnfRecLen, tmAnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    If ilRet <> BTRV_ERR_NONE Then
                        tmAnf.iCode = 0
                        tmAnf.sName = ""
                    End If
                End If
                If Trim$(Left$(tmAnf.sName, 5)) <> "" Then
                    slStr = slStr & Trim$(Left$(tmAnf.sName, 5)) & " "
                End If
            ElseIf tmLnRdf.sInOut = "O" Then
                If tmAnf.iCode <> tmLnRdf.ianfCode Then
                    tmAnfSrchKey.iCode = tmLnRdf.ianfCode
                    ilRet = btrGetEqual(hmAnf, tmAnf, imAnfRecLen, tmAnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    If ilRet <> BTRV_ERR_NONE Then
                        tmAnf.iCode = 0
                        tmAnf.sName = ""
                    End If
                End If
                If Trim$(Left$(tmAnf.sName, 3)) <> "" Then
                    slStr = slStr & "X-" & Trim$(Left$(tmAnf.sName, 3)) & " "
                End If
            End If
            'If (tmCff(0).iSpotsWk <> 0) Or (tmCff(0).iXSpotsWk <> 0) Then 'Weekly
            If ilGameNo <= 0 Then
                If (tmCff(0).sDyWk <> "D") Then  'Weekly
                    For ilDayIndex = 0 To 6 Step 1
                        If (tmCff(0).iDay(ilDayIndex) <> 0) Or (tmCff(0).sXDay(ilDayIndex) = "1") Then
                            If ilDayIndex = ilDay Then
                                slStr = slStr & "Y"
                            Else
                                slStr = slStr & "y"
                            End If
                        Else
                            If ilDayIndex = ilDay Then
                                slStr = slStr & "N"
                            Else
                                slStr = slStr & "n"
                            End If
                        End If
                    Next ilDayIndex
                Else
                    For ilDayIndex = 0 To 6 Step 1
                        If tmCff(0).iDay(ilDayIndex) > 0 Then
                            Select Case ilDayIndex
                                Case 0
                                    slDay = "m"
                                Case 1
                                    slDay = "t"
                                Case 2
                                    slDay = "w"
                                Case 3
                                    slDay = "t"
                                Case 4
                                    slDay = "f"
                                Case 5
                                    slDay = "s"
                                Case 6
                                    slDay = "s"
                            End Select
                            If ilDay = ilDayIndex Then
                                slDay = UCase(slDay)
                            End If
                            slStr = slStr & slDay
                        Else
                            slStr = slStr & "-"
                        End If
                    Next ilDayIndex
                End If
            Else
                slStr = slStr & "E#" & Trim$(str$(ilGameNo))
            End If
            slStr = slStr & str$(tmClf.iLen) & "s"
            If tmClf.iPosition = 1 Then
                slStr = slStr & "@"
            End If
            If tmClf.sSoloAvail = "Y" Then
                slStr = slStr & "#"
            End If
            If ilGameNo <= 0 Then
                If ((tmClf.iStartTime(0) <> 1) Or (tmClf.iStartTime(1) <> 0)) And (tgVpf(imVpfIndex).sGMedium <> "S") Then
                    gUnpackTime tmClf.iStartTime(0), tmClf.iStartTime(1), "A", "1", slStartTime
                    gUnpackTime tmClf.iEndTime(0), tmClf.iEndTime(1), "A", "1", slEndTime
                    ilPos = InStr(1, slStartTime, "A", vbTextCompare)
                    If ilPos > 0 Then
                        slStartTime = Left$(slStartTime, ilPos)
                    End If
                    ilPos = InStr(1, slStartTime, "P", vbTextCompare)
                    If ilPos > 0 Then
                        slStartTime = Left$(slStartTime, ilPos)
                    End If
                    ilPos = InStr(1, slEndTime, "A", vbTextCompare)
                    If ilPos > 0 Then
                        slEndTime = Left$(slEndTime, ilPos)
                    End If
                    ilPos = InStr(1, slEndTime, "P", vbTextCompare)
                    If ilPos > 0 Then
                        slEndTime = Left$(slEndTime, ilPos)
                    End If
                    slStr = slStr & " " & slStartTime & "-" & slEndTime
                Else
                    slStrTime = ""
                    slMultiTimes = ""
                    For ilLoop = LBound(tmLnRdf.iStartTime, 2) To UBound(tmLnRdf.iStartTime, 2) Step 1 'Row
                        If (tmLnRdf.iStartTime(0, ilLoop) <> 1) Or (tmLnRdf.iStartTime(1, ilLoop) <> 0) Then
                            gUnpackTime tmLnRdf.iStartTime(0, ilLoop), tmLnRdf.iStartTime(1, ilLoop), "A", "1", slStart
                            gUnpackTime tmLnRdf.iEndTime(0, ilLoop), tmLnRdf.iEndTime(1, ilLoop), "A", "1", slEnd
                            If slStart <> "" Then
                                ilPos = InStr(1, slStart, "A", vbTextCompare)
                                If ilPos > 0 Then
                                    slStart = Left$(slStart, ilPos)
                                End If
                                ilPos = InStr(1, slStart, "P", vbTextCompare)
                                If ilPos > 0 Then
                                    slStart = Left$(slStart, ilPos)
                                End If
                                ilPos = InStr(1, slEnd, "A", vbTextCompare)
                                If ilPos > 0 Then
                                    slEnd = Left$(slEnd, ilPos)
                                End If
                                ilPos = InStr(1, slEnd, "P", vbTextCompare)
                                If ilPos > 0 Then
                                    slEnd = Left$(slEnd, ilPos)
                                End If
                                slStrTime = slStart & "-" & slEnd
                                If ilLoop < UBound(tmLnRdf.iStartTime, 2) Then
                                    If (tmLnRdf.iStartTime(0, ilLoop + 1) <> 1) Or (tmLnRdf.iStartTime(1, ilLoop + 1) <> 0) Then
                                        slMultiTimes = "+"
                                    End If
                                End If
                                Exit For
                            End If
                        End If
                    Next ilLoop
                    If slMultiTimes = "" Then
                        slStr = slStr & " " & slStrTime
                    Else
                        slStr = slStr & " " & RTrim$(tmLnRdf.sName)
                    End If
                End If
            End If
            'mMakeMissedInfo = slStr & " Missed " & slDate
            'If tmSdf.iVefCode <> imVehCode Then
                ilVef = gBinarySearchVef(tmSdf.iVefCode)
                If ilVef <> -1 Then
                    slStr = slStr & " " & slDate & " " & Trim$(tgMVef(ilVef).sName)
                Else
                    slStr = slStr & " " & slDate
                End If
            'Else
            '    slStr = slStr & " " & slDate
            'End If
        Else
            slStr = slStr & " Invalid Date- " & slDate
        End If
        'Add MG Info
        If llSxfCode > 0 Then
            tmSxfSrchKey0.lCode = llSxfCode
            ilRet = btrGetEqual(hmSxf, tmSxf, imSxfRecLen, tmSxfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                If tmSxf.sType = "G" Then
                    ilVef = gBinarySearchVef(tmSxf.iMissedVefCode)
                    If ilVef <> -1 Then
                        slStr = slStr & " PMG: " & Trim$(tgMVef(ilVef).sName)
                        If tmSxf.iMissedGameNo <= 0 Then
                            gUnpackDate tmSxf.iMissedDate(0), tmSxf.iMissedDate(1), slDate
                            slStr = slStr & " " & slDate
                        Else
                            slStr = slStr & " E# " & tmSxf.iMissedGameNo
                        End If
                    End If
                End If
            End If
        End If
        mMakeMissedInfo = slStr
    Else
        mMakeMissedInfo = ""
        Exit Function
    End If
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mMakeUnschSpot                  *
'*                                                     *
'*             Created:4/21/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Create a Sdf records            *
'*                                                     *
'*                     Similar to code within          *
'*                     CntSchd.Bas                     *
'*                                                     *
'*******************************************************
Private Function mMakeUnschSpot(llChfCode As Long, ilLineNo As Integer, llFsfCode As Long, ilGameNo As Integer, slMissedDate As String, ilVefCode As Integer, ilExtraSpot As Integer, ilTestDef As Integer, llSdfRecPos As Long) As Integer
'
'   ilRet = mMakeUnschSpot(llChfCode, ilLineNo, lMisseddate, slPriceType, llSdfRecPos)
'   Where:
'       llChfCode(I)- Chf Code
'       ilLineNo(I)- Line number
'       slMissedDate(I)- Date to create spot for
'       ilExtraSpot(I)- True=Extra Bonus Spot
'       llSdfRecPos(O)- Sdf Record position
'
    Dim llDate As Long
    Dim ilDay As Integer
    Dim ilRet As Integer

    ilRet = mReadChfClfRdfRec(llChfCode, ilLineNo, llFsfCode)
    If Not ilRet Then
        sgErrLoc = "mMakeUnschSpot-mReadChfClfRdfRec(1)"
        mMakeUnschSpot = False
        Exit Function
    End If
    tmSdf.lCode = 0
    tmSdf.iVefCode = ilVefCode      'Vehicle Code (combos not allowed)
    tmSdf.lChfCode = tmChf.lCode    'Contract code
    tmSdf.iLineNo = tmClf.iLine    'Line number
    tmSdf.lFsfCode = llFsfCode
    tmSdf.iAdfCode = tmChf.iAdfCode 'Advertiser code number
    gPackDate slMissedDate, tmSdf.iDate(0), tmSdf.iDate(1)
    llDate = gDateValue(slMissedDate)
    ilDay = gWeekDayLong(llDate)
    If (tmLnRdf.iLtfCode(0) <> 0) Or (tmLnRdf.iLtfCode(1) <> 0) Or (tmLnRdf.iLtfCode(2) <> 0) Then
        tmSdf.iTime(0) = 0
        tmSdf.iTime(1) = 0
    Else    'Time buy- check if override times defined (if so, use them as bump times)
        If ((tmClf.iStartTime(0) = 1) And (tmClf.iStartTime(1) = 0)) Or (tgVpf(imVpfIndex).sGMedium = "S") Then
            tmSdf.iTime(0) = 0
            tmSdf.iTime(1) = 0
        Else
            tmSdf.iTime(0) = tmClf.iStartTime(0)
            tmSdf.iTime(1) = tmClf.iStartTime(1)
        End If
    End If
    tmSdf.sSchStatus = "M"    'S=Scheduled, M=Missed,
                                'G=Makegood, A=on alternate log but not MG, B=on alternate Log and MG,
                                'C=Cancelled
    tmSdf.iMnfMissed = igDefaultMnfMissed   'Missed reason
    tmSdf.sTracer = " "   'M=Mouse move, N=On demand & mouse moved, C=Created in post log,
                            'N=N/A, D=on Demand & created in post log
    tmSdf.sAffChg = " "   'T=Time change, C=Copy change, B=Time and copy changed, blank=no change
    If (llFsfCode <= 0) Or (tmFsf.lCifCode <= 0) Then
        tmSdf.sPtType = "0"
        tmSdf.lCopyCode = 0        'Copy inventory code
        tmSdf.iRotNo = 0
    Else
        tmSdf.sPtType = "1"
        tmSdf.lCopyCode = tmFsf.lCifCode
    End If
    tmSdf.iRotNo = 0
    tmSdf.iLen = tmClf.iLen         'Spot length
    If ilExtraSpot Then
        If ilTestDef Then
            'If tgSpf.sDefFillInv = "Y" Then
            If tmChf.iAdfCode <> tmAdf.iCode Then
                tmAdfSrchKey.iCode = tmChf.iAdfCode
                ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            End If
            If tmAdf.sBonusOnInv <> "N" Then
                tmSdf.sPriceType = "B"  'tmClf.sPriceType 'T=True; N=No Charge; M=MG Line; B=Bonus; S=Spinoff; R=Recapturable; A=Audience Deficiency Unit (adu)
                tmSdf.sSpotType = "X"   '"T"=Remnant; Q=per Inquire; S=PSA; M=Promo; X=Extra Spot
            Else
                tmSdf.sPriceType = "N"  'tmClf.sPriceType 'T=True; N=No Charge; M=MG Line; B=Bonus; S=Spinoff; R=Recapturable; A=Audience Deficiency Unit (adu)
                tmSdf.sSpotType = "X"   '"T"=Remnant; Q=per Inquire; S=PSA; M=Promo; X=Extra Spot
            End If
        Else
            tmSdf.sPriceType = "B"  'tmClf.sPriceType 'T=True; N=No Charge; M=MG Line; B=Bonus; S=Spinoff; R=Recapturable; A=Audience Deficiency Unit (adu)
            tmSdf.sSpotType = "X"   '"T"=Remnant; Q=per Inquire; S=PSA; M=Promo; X=Extra Spot
        End If
    Else
        tmSdf.sPriceType = "L"  'tmClf.sPriceType 'T=True; N=No Charge; M=MG Line; B=Bonus; S=Spinoff; R=Recapturable; A=Audience Deficiency Unit (adu)
        tmSdf.sSpotType = tmChf.sType   '"T"=Remnant; Q=per Inquire; S=PSA; M=Promo
    End If
    tmSdf.sBill = "N"
    tmSdf.lSmfCode = 0
    tmSdf.iGameNo = ilGameNo
    tmSdf.iUrfCode = tgUrf(0).iCode      'Last user who modified spot
    tmSdf.sXCrossMidnight = "N"
    tmSdf.sWasMG = "N"
    tmSdf.sFromWorkArea = "N"
    tmSdf.sUnused = ""
    ilRet = btrInsert(hmSdf, tmSdf, imSdfRecLen, INDEXKEY0)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mMakeUnschSpot-Insert Sdf(2)"
        mMakeUnschSpot = False
        Exit Function
    End If
    ilRet = btrGetPosition(hmSdf, llSdfRecPos)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mMakeUnschSpot-GetPosition Sdf(3)"
        mMakeUnschSpot = False
    Else
        mMakeUnschSpot = True
    End If
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mManSchCheckRoom                *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if room for spot     *
'*                                                     *
'*******************************************************
Private Function mManSchCheckRoom(ilDragDest As Integer, ilDragDestColNo As Integer, ilLen As Integer, ilEvtIndex As Integer, tlEvt() As EVTINFO) As Integer
    'Check dates- Source is checked in tmDrag
    Dim slDate As String
    Dim ilLoop As Integer
    If ilDragDest = DRAGLOG1 Then
        If gDateValue(smLog1Date) < lmEarliestAllowedDate Then
            mManSchCheckRoom = False
            Exit Function
        End If
    ElseIf ilDragDest = DRAGLOG2 And imLog2Type = 4 Then
        If gDateValue(smLog2Date) < lmEarliestAllowedDate Then
            mManSchCheckRoom = False
            Exit Function
        End If
    ElseIf ilDragDest = DRAGCONTRACT Then
        'slDate = edcDate.Text   'plcDate.Caption    'Start date of the week
        'If gDateValue(slDate) + ilDragDestColNo - 1 < lmEarliestAllowedDate Then
        mGetEdcDate ilDragDestColNo - 1
        slDate = smEdcDate
        If lmEdcDate < lmEarliestAllowedDate Then
            mManSchCheckRoom = False
            Exit Function
        End If
    End If
    ilLoop = ilEvtIndex
    Do
        ilLoop = ilLoop - 1
        'If ilLoop < LBound(tlEvt) Then
        If ilLoop < imLBEvt Then
            'Exit Do
            mManSchCheckRoom = False
            Exit Function
        End If
        If (tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9) Then
            'If ((tlEvt(ilLoop).iLineInfo And SSLOCK) = SSLOCK) Then
            '    mManSchCheckRoom = False
            '    Exit Function
            'End If
            'If tlEvt(ilEvtIndex).iType = 100 Then
            '    If ((tlEvt(ilLoop).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT) Then
            '        mManSchCheckRoom = False
            '        Exit Function
            '    End If
            'End If
            If tlEvt(ilLoop).iType = 2 Then   'Contract avail
                Exit Do
            End If
            If tlEvt(ilLoop).iType = 8 Then   'PSA Avail- only allow PSAs
                If smDragCntrType <> "S" Then
                    mManSchCheckRoom = False
                    Exit Function
                Else
                    Exit Do
                End If
            End If
            If tlEvt(ilLoop).iType = 9 Then   'Promo Avail- only allow promos
                If smDragCntrType <> "M" Then
                    mManSchCheckRoom = False
                    Exit Function
                Else
                    Exit Do
                End If
            End If
            mManSchCheckRoom = False
            Exit Function
        End If
    'Loop While ilLoop > LBound(tlEvt)
    Loop While ilLoop > imLBEvt
    '8/5/16: Look for the open unit/second record type to test against
    Do
        ilLoop = ilLoop + 1
        If ilLoop >= UBound(tlEvt) Then
            mManSchCheckRoom = False
            Exit Function
        End If
        If (tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9) Then
            mManSchCheckRoom = False
            Exit Function
        ElseIf tlEvt(ilLoop).iType = 99 Then
            Exit Do
        End If
    Loop While ilLoop < UBound(tlEvt)
    If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
        'If (ilLen <= tlEvt(ilEvtIndex).lLen) Then
        If (ilLen <= tlEvt(ilLoop).lLen) Then
            mManSchCheckRoom = True
            Exit Function
        Else
            mManSchCheckRoom = False
            Exit Function
        End If
    ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
        'If (ilLen = tlEvt(ilEvtIndex).lLen) Then
        If (ilLen = tlEvt(ilLoop).lLen) Then
            mManSchCheckRoom = True
            Exit Function
        Else
            mManSchCheckRoom = False
            Exit Function
        End If
    ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
    End If
    mManSchCheckRoom = False
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mManSchPop                      *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection combo   *
'*                      box                            *
'*                                                     *
'*******************************************************
Private Sub mManSchPop(ilSource As Integer, ilManSch As Integer, llManSchCode() As Long, ilManSchInfo() As Integer, llManSchInfo() As Long, slManSchInfo() As String, lbcManSch As control, tlManSchCode() As SORTCODE)
'
'   mManSchPop ilManSch, llManSchCode(), ilManSchInfo(), llManSchInfo(), lbcManSch
'   Where:
'       ilManSch(I)- 3=Remnant; 4=Direct Response; 5=per Inquire; 6=PSA; 7= Promo
'       lbcManSch(O)- Advertiser/Contract #: Start Date- End Date
'       tlManSchCode(O)- Advertiser/Contract #: Start Date- End Date\Cntr Code
'
    Dim ilRet As Integer 'btrieve status
    Dim slNameCode As String  'Name and code
    Dim slCode As String    'Code number
    Dim slType As String
    Dim ilCurrent As Integer
    Dim slName As String
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slAdvt As String
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim ilLineNo As Integer
    Dim ilUpper As Integer
    Dim ilSwitch As Integer
    Dim ilPlace As Integer
    Dim ilAAS As Integer
    Dim slCntrType As String
    Dim slCntrStatus As String
    Dim ilShow As Integer
    Dim ilState As Integer
    Dim ilGameNo As Integer
    '5/5/11: Active manual contract for games
    Dim ilDay As Integer
    Dim slNoSpots As String
    Dim slGameDate As String
    Dim blInclude As Boolean
    Dim ilGsf As Integer

    If imVehCode < 0 Then
        Exit Sub
    End If
    slCntrType = ""
    Select Case ilManSch
        Case 5 '4  'Remnant
            slCntrType = "T"
        Case 6 '5  'Direct Response
            slCntrType = "R"
        Case 7 '6  'per Inquire
            slCntrType = "Q"
        Case 8 '7  'PSA
            slCntrType = "S"
        Case 9 '8  'Promo
            slCntrType = "M"
        Case Else
            Exit Sub
    End Select
    ilCurrent = 0   'Current (1=All)
    ilAAS = 3
    slCntrStatus = "HO"
    ilShow = 3
    ilState = 1
    'ilRet = gPopCntrBox(Spots, 1, ilFilter, ilCurrent, 0, imVehCode, lbcManSch, lbcManSchCode, True, True, False, False)
    'ilRet = gPopCntrForAASBox(Spots, ilAAS, imVehCode, slCntrStatus, slCntrType, ilCurrent, ilState, ilShow, lbcManSch, lbcManSchCode)
    ilRet = gPopCntrForAASBox(Spots, ilAAS, imVehCode, slCntrStatus, slCntrType, ilCurrent, ilState, ilShow, lbcManSch, tlManSchCode(), smManSchCodeTag)
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mManSchPopErr
        gCPErrorMsg ilRet, "mManSchPop (gPopCntrForAASBox)", Spots
        On Error GoTo 0
    End If
    'Remake sorted list
    lbcManSch.Clear
    For ilIndex = 0 To UBound(tlManSchCode) - 1 Step 1  'lbcManSchCode.ListCount - 1 Step 1
        lbcManSch.AddItem Trim$(tlManSchCode(ilIndex).sKey) 'lbcManSchCode.List(ilIndex)
    Next ilIndex
    ReDim tlManSchCode(0 To 0) As SORTCODE  'lbcManSchCode.Clear
    For ilIndex = 0 To lbcManSch.ListCount - 1 Step 1
        slNameCode = lbcManSch.List(ilIndex)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        If ilRet = CP_MSG_NONE Then
            tmChfSrchKey.lCode = Val(slCode)
            ilRet = btrGetEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                gUnpackDate tmChf.iStartDate(0), tmChf.iStartDate(1), slStartDate
                gUnpackDate tmChf.iEndDate(0), tmChf.iEndDate(1), slEndDate
                If gDateValue(slEndDate) >= lmEarliestAllowedDate Then
                    slAdvt = "Missing"
                    'For ilLoop = LBound(tgCommAdf) To UBound(tgCommAdf) Step 1
                    '    If tmChf.iAdfCode = tgCommAdf(ilLoop).iCode Then
                        ilLoop = gBinarySearchAdf(tmChf.iAdfCode)
                        If ilLoop <> -1 Then
                            slAdvt = Trim$(tgCommAdf(ilLoop).sAbbr)
                    '        Exit For
                        End If
                    'Next ilLoop
                    slName = slAdvt & "/" & Trim$(str$(tmChf.lCntrNo))
                    slName = slName & ": " & slStartDate & "-" & slEndDate
                    'lbcManSchCode.AddItem slName & "\" & slCode
                    tlManSchCode(UBound(tlManSchCode)).sKey = slName & "\" & slCode & "\C"
                    ReDim Preserve tlManSchCode(0 To UBound(tlManSchCode) + 1) As SORTCODE
                End If
            End If
        End If
    Next ilIndex
    'Sort then output new headers and lines
    If UBound(tlManSchCode) - 1 > 0 Then
        ArraySortTyp fnAV(tlManSchCode(), 0), UBound(tlManSchCode), 0, LenB(tlManSchCode(0)), 0, LenB(tlManSchCode(0).sKey), 0
    End If
    ilUpper = 0 '1
    ReDim llManSchCode(0 To 2, 0 To ilUpper) As Long
    ReDim ilManSchInfo(0 To 7, 0 To ilUpper) As Integer
    ReDim llManSchInfo(0 To 3, 0 To ilUpper) As Long
    ReDim slManSchInfo(0 To 4, 0 To ilUpper) As String
    For ilIndex = 0 To UBound(tlManSchCode) - 1 Step 1  'lbcManSchCode.ListCount - 1 Step 1
        slNameCode = tlManSchCode(ilIndex).sKey    'lbcManSchCode.List(ilIndex)
        ilRet = gParseItem(slNameCode, 3, "\", slType)
        ilRet = gParseItem(slNameCode, 2, "\", slCode)
        If (ilRet = CP_MSG_NONE) And (slType <> "F") Then
            tmChfSrchKey.lCode = Val(slCode)
            ilRet = btrGetEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                ilLineNo = 1
                Do
                    tmClfSrchKey.lChfCode = tmChf.lCode
                    tmClfSrchKey.iLine = ilLineNo
                    tmClfSrchKey.iCntRevNo = 32000 ' Plug with very high number
                    tmClfSrchKey.iPropVer = 32000 ' Plug with very high number
                    ilRet = btrGetGreaterOrEqual(hmClf, tmClf, imClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)
                    Do While (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = tmChf.lCode) And (tmClf.iLine = ilLineNo) And ((tmClf.sSchStatus <> "M") And (tmClf.sSchStatus <> "F"))  'And (tmClf.sSchStatus = "A")
                        ilRet = btrGetNext(hmClf, tmClf, imClfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                    Loop
                    'If (ilRet <> BTRV_ERR_NONE) Or (tmClf.lChfCode <> tmChf.lCode) Or (tmClf.iLine <> ilLineNo) Then
                    If (ilRet <> BTRV_ERR_NONE) Or (tmClf.lChfCode <> tmChf.lCode) Then
                        Exit Do
                    End If
                    If (tmClf.iLine <> ilLineNo) Then
                        ilLineNo = tmClf.iLine + 1
                    Else
                        ilLineNo = ilLineNo + 1
                    End If
                    If imVehCode = tmClf.iVefCode Then
                        slManSchInfo(1, ilUpper) = tmChf.sType
                        slManSchInfo(2, ilUpper) = "N"
                        If tmClf.lRafCode > 0 Then
                            slManSchInfo(2, ilUpper) = "Y"
                        End If
                        slManSchInfo(3, ilUpper) = ""
                        slManSchInfo(4, ilUpper) = ""
                        llManSchCode(1, ilUpper) = tmChf.lCode
                        llManSchCode(2, ilUpper) = 0
                        ilManSchInfo(1, ilUpper) = tmClf.iLine
                        ilManSchInfo(2, ilUpper) = tmClf.iLen
                        ilManSchInfo(3, ilUpper) = 0
                        ilManSchInfo(4, ilUpper) = 0
                        ilManSchInfo(5, ilUpper) = ilIndex
                        ilManSchInfo(6, ilUpper) = -1
                        ilManSchInfo(7, ilUpper) = 0
                        llManSchInfo(1, ilUpper) = 0
                        llManSchInfo(2, ilUpper) = 0
                        llManSchInfo(3, ilUpper) = 0
                        If tmChf.lCxfCode > 0 Then
                            imCxfRecLen = Len(tmCxf)
                            tmCxfSrchKey.lCode = tmChf.lCxfCode
                            ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                            If ilRet = BTRV_ERR_NONE Then
                                If tmCxf.sShSpot = "Y" Then
                                    llManSchInfo(1, ilUpper) = tmChf.lCxfCode
                                End If
                            End If
                        End If
                        If (tmClf.lCxfCode > 0) Then
                            imCxfRecLen = Len(tmCxf)
                            tmCxfSrchKey.lCode = tmClf.lCxfCode
                            ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                            If ilRet = BTRV_ERR_NONE Then
                                If tmCxf.sShSpot = "Y" Then
                                    llManSchInfo(2, ilUpper) = tmClf.lCxfCode
                                End If
                            End If
                        End If
                        ReDim llTempSchCode(0 To 2) As Long
                        ReDim ilTempSchInfo(0 To 7) As Integer
                        ReDim llTempSchInfo(0 To 3) As Long
                        ReDim slTempSchInfo(0 To 4) As String
                        For ilSwitch = 1 To 4 Step 1
                            slTempSchInfo(ilSwitch) = slManSchInfo(ilSwitch, ilUpper)
                        Next ilSwitch
                        For ilSwitch = 1 To 2 Step 1
                            llTempSchCode(ilSwitch) = llManSchCode(ilSwitch, ilUpper)
                        Next ilSwitch
                        For ilSwitch = 1 To 7 Step 1
                            ilTempSchInfo(ilSwitch) = ilManSchInfo(ilSwitch, ilUpper)
                        Next ilSwitch
                        For ilSwitch = 1 To 3 Step 1
                            llTempSchInfo(ilSwitch) = llManSchInfo(ilSwitch, ilUpper)
                        Next ilSwitch
                        '5/5/11: Active manual contract for games
                        For ilDay = 0 To 6 Step 1
                            If tmVef.sType <> "G" Then
                                ilGameNo = 0
                                blInclude = True
                            Else
                                If imDW = 0 Then
                                    ilGameNo = mGetL1GameNo()
                                    ilRet = mReadChfClfRdfCffRec(tmChf.lCode, tmClf.iLine, 0, ilGameNo, smLog1Date, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
                                    If (Not ilRet) Or (tmCff(0).sDelete = "Y") Then
                                        blInclude = False
                                    Else
                                        blInclude = True
                                    End If
                                Else
                                    If imSelectedGameNo + ilDay <= lbcGameNo(0).ListCount - 1 Then
                                        ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilDay)
                                        ilGameNo = tmGsfInfo(ilGsf).iGameNo
                                        slGameDate = Format(tmGsfInfo(ilGsf).lGameDate, "m/d/yy")
                                        ilRet = mReadChfClfRdfCffRec(tmChf.lCode, tmClf.iLine, 0, ilGameNo, slGameDate, slStartDate, slEndDate, slNoSpots, -1, ilGameNo)
                                        If (Not ilRet) Or (tmCff(0).sDelete = "Y") Then
                                            blInclude = False
                                        Else
                                            blInclude = True
                                        End If
                                    Else
                                        blInclude = False
                                    End If
                                End If
                            End If
                            If blInclude Then
                            '5/5/11
                                ilUpper = UBound(llManSchCode, 2)
                                For ilSwitch = 1 To 4 Step 1
                                    slManSchInfo(ilSwitch, ilUpper) = slTempSchInfo(ilSwitch)
                                Next ilSwitch
                                For ilSwitch = 1 To 2 Step 1
                                    llManSchCode(ilSwitch, ilUpper) = llTempSchCode(ilSwitch)
                                Next ilSwitch
                                For ilSwitch = 1 To 7 Step 1
                                    ilManSchInfo(ilSwitch, ilUpper) = ilTempSchInfo(ilSwitch)
                                Next ilSwitch
                                For ilSwitch = 1 To 3 Step 1
                                    llManSchInfo(ilSwitch, ilUpper) = llTempSchInfo(ilSwitch)
                                Next ilSwitch
                                ilManSchInfo(7, ilUpper) = ilGameNo
                                ilPlace = ilUpper
                                ilUpper = ilUpper + 1
                                ReDim Preserve llManSchCode(0 To 2, 0 To ilUpper) As Long
                                ReDim Preserve ilManSchInfo(0 To 7, 0 To ilUpper) As Integer
                                ReDim Preserve llManSchInfo(0 To 3, 0 To ilUpper) As Long
                                ReDim Preserve slManSchInfo(0 To 4, 0 To ilUpper) As String
                                'Place in length order
                                Do While ilPlace > LBound(llManSchCode, 2)
                                    If llManSchCode(1, ilPlace - 1) = llManSchCode(1, ilPlace) Then
                                        If ilManSchInfo(2, ilPlace - 1) > ilManSchInfo(2, ilPlace) Then
                                            slManSchInfo(1, ilUpper) = slManSchInfo(1, ilPlace - 1)
                                            slManSchInfo(2, ilUpper) = slManSchInfo(2, ilPlace - 1)
                                            slManSchInfo(3, ilUpper) = slManSchInfo(3, ilPlace - 1)
                                            slManSchInfo(4, ilUpper) = slManSchInfo(4, ilPlace - 1)
                                            slManSchInfo(1, ilPlace - 1) = slManSchInfo(1, ilPlace)
                                            slManSchInfo(2, ilPlace - 1) = slManSchInfo(2, ilPlace)
                                            slManSchInfo(3, ilPlace - 1) = slManSchInfo(3, ilPlace)
                                            slManSchInfo(4, ilPlace - 1) = slManSchInfo(4, ilPlace)
                                            slManSchInfo(1, ilPlace) = slManSchInfo(1, ilUpper)
                                            slManSchInfo(2, ilPlace) = slManSchInfo(2, ilUpper)
                                            slManSchInfo(3, ilPlace) = slManSchInfo(3, ilUpper)
                                            slManSchInfo(4, ilPlace) = slManSchInfo(4, ilUpper)
    
                                            llManSchCode(1, ilUpper) = llManSchCode(1, ilPlace - 1)
                                            llManSchCode(2, ilUpper) = llManSchCode(2, ilPlace - 1)
                                            llManSchCode(1, ilPlace - 1) = llManSchCode(1, ilPlace)
                                            llManSchCode(2, ilPlace - 1) = llManSchCode(2, ilPlace)
                                            llManSchCode(1, ilPlace) = llManSchCode(1, ilUpper)
                                            llManSchCode(2, ilPlace) = llManSchCode(2, ilUpper)
    
                                            For ilSwitch = LBound(ilManSchInfo, 1) To UBound(ilManSchInfo, 1) Step 1
                                                ilManSchInfo(ilSwitch, ilUpper) = ilManSchInfo(ilSwitch, ilPlace - 1)
                                                ilManSchInfo(ilSwitch, ilPlace - 1) = ilManSchInfo(ilSwitch, ilPlace)
                                                ilManSchInfo(ilSwitch, ilPlace) = ilManSchInfo(ilSwitch, ilUpper)
                                            Next ilSwitch
                                            For ilSwitch = LBound(llManSchInfo, 1) To UBound(llManSchInfo, 1) Step 1
                                                llManSchInfo(ilSwitch, ilUpper) = llManSchInfo(ilSwitch, ilPlace - 1)
                                                llManSchInfo(ilSwitch, ilPlace - 1) = llManSchInfo(ilSwitch, ilPlace)
                                                llManSchInfo(ilSwitch, ilPlace) = llManSchInfo(ilSwitch, ilUpper)
                                            Next ilSwitch
                                        Else
                                            Exit Do
                                        End If
                                    Else
                                        Exit Do
                                    End If
                                    ilPlace = ilPlace - 1
                                Loop
                            End If
                            If tmVef.sType <> "G" Then
                                Exit For
                            End If
                        '5/5/11: Active manual contract for games
                        Next ilDay
                        '5/5/11
                    End If
                Loop
            End If
        End If
    Next ilIndex

    For ilLoop = LBound(ilManSchInfo, 2) To UBound(ilManSchInfo, 2) - 1 Step 1
        ilManSchInfo(3, ilLoop) = 0
    Next ilLoop
    If ilSource = 0 Then
        mBuildManSpotCount slCntrType, tmL1Evt(), llManSchCode(), ilManSchInfo()
    Else
        mBuildManSpotCount slCntrType, tmMoEvt(), llManSchCode(), ilManSchInfo()
        mBuildManSpotCount slCntrType, tmTuEvt(), llManSchCode(), ilManSchInfo()
        mBuildManSpotCount slCntrType, tmWeEvt(), llManSchCode(), ilManSchInfo()
        mBuildManSpotCount slCntrType, tmThEvt(), llManSchCode(), ilManSchInfo()
        mBuildManSpotCount slCntrType, tmFrEvt(), llManSchCode(), ilManSchInfo()
        mBuildManSpotCount slCntrType, tmSaEvt(), llManSchCode(), ilManSchInfo()
        mBuildManSpotCount slCntrType, tmSuEvt(), llManSchCode(), ilManSchInfo()
    End If
    Screen.MousePointer = vbDefault
    Exit Sub
mManSchPopErr:
    On Error GoTo 0
    imTerminate = True
    Screen.MousePointer = vbDefault
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMdComment                      *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Show comments for missed spots *
'*                                                     *
'*******************************************************
Private Sub mMdComment(ilSrce As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim ilFound As Integer
    Dim ilPos As Integer
    Dim ilRet As Integer
    Dim llClfCxfCode As Long
    Dim llChfCxfCode As Long
    Dim llChfCxfInt As Long
    Dim ilLoop As Integer
    Dim slStr As String
    Dim slStr1 As String
    llClfCxfCode = 0
    llChfCxfCode = 0
    llChfCxfInt = 0
    ilFound = False
    If imDragButton = 2 Then  'Right Mouse
        If ilSrce = 1 Then
            ilCompRow = vbcMissed.LargeChange + 1
            If imAdMdMax > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = imAdMdMax
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    If (imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by advertiser
                        If ilRow + vbcMissed.Value - 1 = UBound(tmAdMdSdfMdExt) Then
                            Exit For
                        End If
                        ilIndex = ilRow + vbcMissed.Value - 1
                        ilFound = True
                        llClfCxfCode = tmAdMdSdfMdExt(ilIndex).lClfCxfCode
                        llChfCxfCode = tmAdMdSdfMdExt(ilIndex).lchfcxfCode
                        llChfCxfInt = tmAdMdSdfMdExt(ilIndex).lchfcxfInt
                        slStr = Trim$(tmAdMdSdfMdExt(ilIndex).sShow)
                        ilPos = InStr(1, tmAdMdSdfMdExt(ilIndex).sPrice, ".")
                        If ilPos > 1 Then
                            slStr = slStr & " $" & Left$(tmAdMdSdfMdExt(ilIndex).sPrice, ilPos - 1)
                        ElseIf ilPos = 1 Then
                            slStr = slStr & " $0 "
                        Else
                            slStr = slStr & " " & Trim$(Left$(tmAdMdSdfMdExt(ilIndex).sPrice, 5))
                        End If
                        Exit For
                    ElseIf (imAdMdType > 3) And (imAdMdType < 9) Or (imAdMdType = 11) Then
                        ilIndex = ilRow + vbcMissed.Value - 1
                        ilFound = True
                        slStr = lbcAdMdManSch.List(ilIndex - 1)
                        'For ilLoop = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
                        For ilLoop = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
                            If imAdMdManSchInfo(6, ilLoop) = ilIndex - 1 Then
                                If (lmAdMdManSchInfo(1, ilLoop) > 0) Then
                                    llChfCxfCode = lmAdMdManSchInfo(1, ilLoop)
                                End If
                                If (lmAdMdManSchInfo(2, ilLoop) > 0) Then
                                    llClfCxfCode = lmAdMdManSchInfo(2, ilLoop)
                                End If
                                Exit For
                            End If
                        Next ilLoop
                        Exit For
                    End If
                End If
            Next ilRow
        End If
        If ilSrce = 2 Then
            ilCompRow = vbcAdWorkArea.LargeChange + 1
            If UBound(tmWAMdExt) - 1 > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = UBound(tmWAMdExt) - 1
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                    If ilRow + vbcAdWorkArea.Value - 1 = UBound(tmWAMdExt) Then
                        Exit For
                    End If
                    ilIndex = ilRow + vbcAdWorkArea.Value - 1
                    ilFound = True
                    llClfCxfCode = tmWAMdExt(ilIndex).lClfCxfCode
                    llChfCxfCode = tmWAMdExt(ilIndex).lchfcxfCode
                    llChfCxfInt = tmWAMdExt(ilIndex).lchfcxfInt
                    slStr = Trim$(tmWAMdExt(ilIndex).sShow)
                    ilPos = InStr(1, tmWAMdExt(ilIndex).sPrice, ".")
                    If ilPos > 1 Then
                        slStr = slStr & " $" & Left$(tmWAMdExt(ilIndex).sPrice, ilPos - 1)
                    ElseIf ilPos = 1 Then
                        slStr = slStr & " $0 "
                    Else
                        slStr = slStr & " " & Trim$(Left$(tmWAMdExt(ilIndex).sPrice, 5))
                    End If
                    Exit For
                End If
            Next ilRow
        End If
        If ilSrce = 3 Then
            ilCompRow = vbcLog2.LargeChange + 1
            If imL2Max > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = imL2Max
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    If (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed by advertiser
                        If ilRow + vbcLog2.Value - 1 = UBound(tmSdfMdExt) Then
                            Exit For
                        End If
                        ilIndex = ilRow + vbcLog2.Value - 1
                        ilFound = True
                        llClfCxfCode = tmSdfMdExt(ilIndex).lClfCxfCode
                        llChfCxfCode = tmSdfMdExt(ilIndex).lchfcxfCode
                        llChfCxfInt = tmSdfMdExt(ilIndex).lchfcxfInt
                        slStr = Trim$(tmSdfMdExt(ilIndex).sShow)
                        ilPos = InStr(1, tmSdfMdExt(ilIndex).sPrice, ".")
                        If ilPos > 1 Then
                            slStr = slStr & " $" & Left$(tmSdfMdExt(ilIndex).sPrice, ilPos - 1)
                        ElseIf ilPos = 1 Then
                            slStr = slStr & " $0 "
                        Else
                            slStr = slStr & " " & Trim$(Left$(tmSdfMdExt(ilIndex).sPrice, 5))
                        End If
                        Exit For
                    ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then
                        ilIndex = ilRow + vbcLog2.Value - 1
                        ilFound = True
                        slStr = lbcL2ManSch.List(ilIndex - 1)
                        'For ilLoop = 1 To UBound(lmL2ManSchCode, 2) - 1 Step 1
                        For ilLoop = 0 To UBound(lmL2ManSchCode, 2) - 1 Step 1
                            If imL2ManSchInfo(6, ilLoop) = ilIndex - 1 Then
                                If (lmL2ManSchInfo(1, ilLoop) > 0) Then
                                    llChfCxfCode = lmL2ManSchInfo(1, ilLoop)
                                End If
                                If (lmL2ManSchInfo(2, ilLoop) > 0) Then
                                    llClfCxfCode = lmL2ManSchInfo(2, ilLoop)
                                End If
                                Exit For
                            End If
                        Next ilLoop
                        Exit For
                    End If
                End If
            Next ilRow
        End If
        If ilSrce = 4 Then
            ilCompRow = vbcHold.LargeChange + 1
            If UBound(tmWAMdExt) - 1 > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = UBound(tmWAMdExt) - 1
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                    If ilRow + vbcHold.Value - 1 = UBound(tmWAMdExt) Then
                        Exit For
                    End If
                    ilIndex = ilRow + vbcHold.Value - 1
                    ilFound = True
                    llClfCxfCode = tmWAMdExt(ilIndex).lClfCxfCode
                    llChfCxfCode = tmWAMdExt(ilIndex).lchfcxfCode
                    llChfCxfInt = tmWAMdExt(ilIndex).lchfcxfInt
                    slStr = Trim$(tmWAMdExt(ilIndex).sShow)
                    ilPos = InStr(1, tmWAMdExt(ilIndex).sPrice, ".")
                    If ilPos > 1 Then
                        slStr = slStr & " $" & Left$(tmWAMdExt(ilIndex).sPrice, ilPos - 1)
                    ElseIf ilPos = 1 Then
                        slStr = slStr & " $0 "
                    Else
                        slStr = slStr & " " & Trim$(Left$(tmWAMdExt(ilIndex).sPrice, 5))
                    End If
                    Exit For
                End If
            Next ilRow
        End If
        If ilSrce = 5 Then
            ilCompRow = vbcLog2.LargeChange + 1
            If imL2Max > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = imL2Max
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    If (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 10) Or (imLog2Type = 11) Then  'Missed by advertiser
                        If ilRow + vbcLog2.Value - 1 = UBound(tmSdfMdExt) Then
                            Exit For
                        End If
                        ilIndex = ilRow + vbcLog2.Value - 1
                        ilFound = True
                        llClfCxfCode = tmSdfMdExt(ilIndex).lClfCxfCode
                        llChfCxfCode = tmSdfMdExt(ilIndex).lchfcxfCode
                        llChfCxfInt = tmSdfMdExt(ilIndex).lchfcxfInt
                        slStr = Trim$(tmSdfMdExt(ilIndex).sShow)
                        ilPos = InStr(1, tmSdfMdExt(ilIndex).sPrice, ".")
                        If ilPos > 1 Then
                            slStr = slStr & " $" & Left$(tmSdfMdExt(ilIndex).sPrice, ilPos - 1)
                        ElseIf ilPos = 1 Then
                            slStr = slStr & " $0 "
                        Else
                            slStr = slStr & " " & Trim$(Left$(tmSdfMdExt(ilIndex).sPrice, 5))
                        End If
                        Exit For
                    ElseIf (imLog2Type > 4) And (imLog2Type < 10) Or (imAdMdType = 11) Then
                        ilIndex = ilRow + vbcLog2.Value - 1
                        ilFound = True
                        slStr = lbcL2ManSch.List(ilIndex - 1)
                        'For ilLoop = 1 To UBound(lmL2ManSchCode, 2) - 1 Step 1
                        For ilLoop = 0 To UBound(lmL2ManSchCode, 2) - 1 Step 1
                            If imL2ManSchInfo(6, ilLoop) = ilIndex - 1 Then
                                If (lmL2ManSchInfo(1, ilLoop) > 0) Then
                                    llChfCxfCode = lmL2ManSchInfo(1, ilLoop)
                                End If
                                If (lmL2ManSchInfo(2, ilLoop) > 0) Then
                                    llClfCxfCode = lmL2ManSchInfo(2, ilLoop)
                                End If
                                Exit For
                            End If
                        Next ilLoop
                        Exit For
                    End If
                End If
            Next ilRow
        End If
    End If
    If ilFound Then
        smInfoCaption = slStr
        If (llClfCxfCode > 0) Or (llChfCxfCode > 0) Or (llChfCxfInt > 0) Then
            plcConflictInfo.height = 1230
            slStr = ""
            If (llClfCxfCode > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = llClfCxfCode
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    'If tmCxf.iStrLen > 0 Then
                    '    slStr = Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                    'End If
                    slStr = gStripChr0(tmCxf.sComment)
                End If
            End If
            If (llChfCxfCode > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = llChfCxfCode
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    slStr1 = gStripChr0(tmCxf.sComment)
                    'If tmCxf.iStrLen > 0 Then
                    If slStr1 <> "" Then
                        If slStr <> "" Then
                            slStr = slStr & sgLF & sgCR & slStr1    'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        Else
                            slStr = slStr1  'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        End If
                    End If
                End If
            End If
            If (llChfCxfInt > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = llChfCxfInt
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    slStr1 = gStripChr0(tmCxf.sComment)
                    'If tmCxf.iStrLen > 0 Then
                    If slStr1 <> "" Then
                        If slStr <> "" Then
                            slStr = slStr & sgLF & sgCR & slStr1    'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        Else
                            slStr = slStr1  'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        End If
                    End If
                End If
            End If
            If slStr <> "" Then
                lacComment.Caption = slStr
            Else
                plcConflictInfo.height = 225
            End If
        Else
            lacComment.Caption = slStr
            plcConflictInfo.height = 225
        End If
        plcConflictInfo.Left = plcTime.Left + fgBevelX
        If (ilSrce = 1) And (imDragButton = 2) Then
            plcConflictInfo.Top = plcAdvertiser.Top + pbcMissed.Top - plcConflictInfo.height 'plcTime.top + pbcLog2.top - plcConflictInfo.Height
        Else
            plcConflictInfo.Top = plcAdvertiser.Top 'plcTime.top + pbcLog2.top - plcConflictInfo.Height
        End If
        If plcConflictInfo.Visible = True Then
            plcConflictInfo_Paint
        Else
            plcConflictInfo.Visible = True
        End If
    Else
        'If imDblClickMode <= 0 Then
        '    plcConflictInfo.Visible = False
        'End If
    End If
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMdMoveSpot                     *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move spot within Log day to 99 *
'*                                                     *
'*******************************************************
Private Sub mMdMoveSpot(ilSpotFrom As Integer, tlMdExt() As SDFMDEXT, slLogDate As String, ilGameNo As Integer, tlEvt() As EVTINFO, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF, slSchStatus As String)
'
'   mMdMoveSpot ilSpotFrom, tlMdExt(), slLogDate, tlEvt(), tlVcf0(), tlVcf6(), tlVcf7()
'   Where:
'       ilSpotFrom(I)- 0=Spot from tmAdMdSdfMdExt; 1=Spot from tmSdfMdExt; -1= All other
'       tlMdExt()(I/O)- source of missed spots (or work area)
'       slLogDate(I)- Date of log
'       tlEvt()(I/O)- destination of spot
'       tlVcf0()(I)- Vehicle conflict table (Monday-Friday) for log date
'       tlVcf6()(I)- Vehicle conflict table (Saturday) for log date
'       tlVcf7()(I)- Vehicle conflict table (Sunday) for log date
'
'       imDragIndexSrce(I)- index within tlMdExt of source spot
'       imDragIndexDest(I)- index within tlEvt of destination
'
    Dim ilRet As Integer
    Dim llSdfRecPos As Long
    Dim llSsfAvailRecPos As Long
    Dim ilSsfAvailIndex As Integer
    Dim ilPosition As Integer
    Dim slTime As String
    Dim ilLoop As Integer
    'Dim slSchStatus As String
    Dim ilBkQH As Integer
    Dim ilSvDragIndex As Integer
    Dim ilPass As Integer
    Dim ilTest As Integer
    Dim llMoDate As Long
    Dim llSuDate As Long
    Dim llTstDate As Long
    Dim llPrice As Long
    Dim ilSchd As Integer
    Dim ilPriceLevel As Integer
    'ReDim tmSpotMove(1 To 1) As SPOTMOVE
    ReDim tmSpotMove(0 To 0) As SPOTMOVE

    If ilGameNo <= 0 Then
        If Not mBlockDay(65536 * imVehCode + gDateValue(slLogDate), 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    Else
        If Not mBlockDay(65536 * imVehCode + ilGameNo, 0) Then
            mClearDrag True
            mForceRepaintWeekly False
            Exit Sub
        End If
    End If

    llSdfRecPos = tlMdExt(imDragIndexSrce).lRecPos
    If slSchStatus = "" Then
        If UBound(imTestDragIndex) <= 0 Then
            slSchStatus = mMoveTest(llSdfRecPos, slLogDate, ilGameNo, tlEvt(), imDragIndexDest, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(imDragIndexSrce).sShow, ilBkQH, 0)
            If slSchStatus = "" Then
                If ilSpotFrom <> -1 Then
                    mMissedSummary imDW
                End If
                mVbcMissedMinMax False
                mClearDrag True
                Exit Sub
            End If
            ilPriceLevel = imPriceLevel
        Else
            ilSvDragIndex = -1
            llMoDate = gDateValue(slLogDate)
            Do While gWeekDayLong(llMoDate) <> 0
                llMoDate = llMoDate - 1
            Loop
            llSuDate = llMoDate + 6
            ilSchd = False
            For ilPass = 0 To 15 Step 1
                For ilLoop = UBound(imTestDragIndex) - 1 To LBound(imTestDragIndex) Step -1
                    imDragIndexSrce = imTestDragIndex(ilLoop)
                    ilTest = False
                    gUnpackDateLong tlMdExt(imDragIndexSrce).iDate(0), tlMdExt(imDragIndexSrce).iDate(1), llTstDate
                    llPrice = gStrDecToLong(tlMdExt(imDragIndexSrce).sPrice, 2)
                    Select Case ilPass
                        Case 0  'In current week, no violations and Price > 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 1  'In Current week, no violations and Price = 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 2  'In current week, Match Avail Name and Price > 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 3  'In Current week, Match Avail Name and Price = 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 4  'In current week, Match Daypart and Price > 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 5  'In Current week, Match Daypart and Price = 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 6  'In current week, Any Violation and Price > 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 7 'In current week, Any Violation and Price = 0
                            If (llTstDate >= llMoDate) And (llTstDate <= llSuDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 8  'In past week, no violations and Price > 0
                            If (llTstDate < llMoDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 9  'In past week, no violations and Price = 0
                            If (llTstDate < llMoDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 10  'In past week, Match Avail Name and Price > 0
                            If (llTstDate < llMoDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 11  'In past week, Match Avail Name and Price = 0
                            If (llTstDate < llMoDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 12  'In past week, Match Daypart and Price > 0
                            If (llTstDate < llMoDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 13  'In Past week, Match Daypart and Price = 0
                            If (llTstDate < llMoDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                        Case 14  'In past week, Any Violation and Price > 0
                            If (llTstDate < llMoDate) And (llPrice > 0) Then
                                ilTest = True
                            End If
                        Case 15 'In past week, Any Violation and Price = 0
                            If (llTstDate < llMoDate) And (llPrice <= 0) Then
                                ilTest = True
                            End If
                    End Select
                    If ilTest Then
                        'ReDim tmSpotMove(1 To 1) As SPOTMOVE
                        ReDim tmSpotMove(0 To 0) As SPOTMOVE
                        llSdfRecPos = tlMdExt(imDragIndexSrce).lRecPos
                        slSchStatus = mMoveTest(llSdfRecPos, slLogDate, ilGameNo, tlEvt(), imDragIndexDest, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(imDragIndexSrce).sShow, ilBkQH, 1)
                        If slSchStatus = "" Then
                            If ilSpotFrom <> -1 Then
                                mMissedSummary imDW
                            End If
                            mVbcMissedMinMax False
                            mClearDrag True
                            Exit Sub
                        End If
                        ilPriceLevel = imPriceLevel
                        If (slSchStatus <> "A") And (slSchStatus <> "T") And (slSchStatus <> "C") Then
                            ilSchd = True
                            Exit For
                        End If
                        If ((ilPass = 2) Or (ilPass = 3) Or (ilPass = 10) Or (ilPass = 11)) And (slSchStatus = "A") Then
                            ilSvDragIndex = imDragIndexSrce
                            ilSchd = True
                            Exit For
                        End If
                        If ((ilPass = 4) Or (ilPass = 5) Or (ilPass = 12) Or (ilPass = 13)) And (slSchStatus = "T") Then
                            ilSvDragIndex = imDragIndexSrce
                            ilSchd = True
                            Exit For
                        End If
                        If ((ilPass = 6) Or (ilPass = 7) Or (ilPass = 14) Or (ilPass = 15)) Then
                            ilSvDragIndex = imDragIndexSrce
                            ilSchd = True
                            Exit For
                        End If
                        If (slSchStatus = "A") And (ilSvDragIndex = -1) Then
                            ilSvDragIndex = imDragIndexSrce
                        End If
                    End If
                Next ilLoop
                If ilSchd Then
                    Exit For
                End If
            Next ilPass
            If (slSchStatus = "A") Or (slSchStatus = "T") Or (slSchStatus = "C") Then
                If ilSvDragIndex <> -1 Then
                    imDragIndexSrce = ilSvDragIndex
                End If
                'ReDim tmSpotMove(1 To 1) As SPOTMOVE
                ReDim tmSpotMove(0 To 0) As SPOTMOVE
                llSdfRecPos = tlMdExt(imDragIndexSrce).lRecPos
                slSchStatus = mMoveTest(llSdfRecPos, slLogDate, ilGameNo, tlEvt(), imDragIndexDest, tlVcf0(), tlVcf6(), tlVcf7(), tlMdExt(imDragIndexSrce).sShow, ilBkQH, 0)
                If slSchStatus = "" Then
                    If ilSpotFrom <> -1 Then
                        mMissedSummary imDW
                    End If
                    mVbcMissedMinMax False
                    mClearDrag True
                    Exit Sub
                End If
                ilPriceLevel = imPriceLevel
            End If
        End If
    Else
        ilPriceLevel = imPriceLevel
    End If
    ReDim imTestDragIndex(0 To 0) As Integer
    ilRet = mBeginTrans(True, True)   'btrBeginTrans(hmSdf, 1000)
    If ilRet <> BTRV_ERR_NONE Then
        If ilSpotFrom <> -1 Then
            mMissedSummary imDW
        End If
        mVbcMissedMinMax False
        'Screen.MousePointer = vbDefault
        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
        'mClearDrag True
        mUnblockDay
        Exit Sub
    End If
    mGetAvailIndex tlEvt(), imDragIndexDest, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, slTime
    tmAddEvt.iType = 100
    tmAddEvt.lTime = llSdfRecPos
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mMdMoveSpot-GetDirect Sdf(1)"
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        If ilSpotFrom <> -1 Then
            mMissedSummary imDW
        End If
        mVbcMissedMinMax False
        Exit Sub
    End If
    gBuildSpotInfo tmSdf, hmCHF, hmClf, hmRdf, hmSmf, hmSif, hmCxf, hmRaf, slLogDate, slTime, 0, 0, tmAddEvt, True, hmCff, hmVef, hmVsf, False, hmFsf, hmFnf, hmPrf, smSplitNetworkType
    tmSmfA.lChfCode = 0
    'If (tmSdf.sSpotType = "T") Or (tmSdf.sSpotType = "Q") Or (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
    '    ilBkQH = 1000
    'End If
    bmClearLogAlert = True
    ilRet = mSchSpot(slSchStatus, ilSpotFrom, slLogDate, ilGameNo, llSdfRecPos, ilBkQH, tmAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmSmfA, ilPriceLevel)
    If Not ilRet Then
        mAbortTrans True, True, True  'ilRet = btrAbortTrans(hmSdf)
        'mClearDrag True
        'mForceRepaintWeekly True
        If ilSpotFrom <> -1 Then
            mMissedSummary imDW
        End If
        mVbcMissedMinMax False
        Exit Sub
    End If
    'gBookSpot now handles retaining copy
    'If (tlMdExt(imDragIndexSrce).sPtType = "1") Or (tlMdExt(imDragIndexSrce).sPtType = "2") Or (tlMdExt(imDragIndexSrce).sPtType = "3") Then
    '    Do
    '        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    '        tmSdf.iRotNo = tlMdExt(imDragIndexSrce).iRotNo
    '        tmSdf.sPtType = tlMdExt(imDragIndexSrce).sPtType
    '        tmSdf.lCopyCode = tlMdExt(imDragIndexSrce).lCopyCode
    '        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
    '    Loop While ilRet = BTRV_ERR_CONFLICT
    'End If
    For ilLoop = imDragIndexSrce To UBound(tlMdExt) - 2 Step 1
        tlMdExt(ilLoop) = tlMdExt(ilLoop + 1)
    Next ilLoop
    If UBound(tlMdExt) > 1 Then
        'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
        ReDim Preserve tlMdExt(0 To UBound(tlMdExt) - 1) As SDFMDEXT
    End If
    ilRet = btrEndTrans(hmSdf)
    mUnblockDay
    pbcHold.Cls
    pbcHold_Paint
    pbcAdWorkArea.Cls
    pbcAdWorkArea_Paint
    mVbcL1MinMax False
    mVbcL2MinMax False
    If ilSpotFrom <> -1 Then
        mMissedSummary imDW
    End If
    mVbcMissedMinMax False
    mVbcAvailMinMax False
    mVbcContractMinMax False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMissedPop                      *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Missed list box if    *
'*                      required                       *
'*                                                     *
'*******************************************************
Private Sub mMissedPop()
'
'   mMissedPop
'   Where:
'
    ReDim ilfilter(0 To 1) As Integer
    ReDim slFilter(0 To 1) As String
    ReDim ilOffSet(0 To 1) As Integer
    Dim ilRet As Integer
    Dim slName As String
    Dim slNameCode As String
    Dim ilLoop As Integer
    Dim slDefaultName As String
    Dim slStr As String

    'Missed Reason
    slDefaultName = "Missed"
    slStr = ""
    'ReDim tgMRMnf(1 To 1) As MNF
    ReDim tgMRMnf(0 To 0) As MNF
    ilRet = gObtainMnfForType("M", slStr, tgMRMnf())
    For ilLoop = LBound(tgMRMnf) To UBound(tgMRMnf) - 1 Step 1
        If Trim$(tgMRMnf(ilLoop).sUnitType) = "Y" Then
            slDefaultName = Trim$(tgMRMnf(ilLoop).sName)
            Exit For
        End If
    Next ilLoop
    'Repopulate if required- if sales source changed by another user while in this screen
    ilfilter(0) = CHARFILTER
    slFilter(0) = "M"
    ilOffSet(0) = gFieldOffset("Mnf", "MnfType") '2
    ilfilter(1) = CHARFILTERNOT
    slFilter(1) = "A"
    ilOffSet(1) = gFieldOffset("Mnf", "MnfCodeStn")
    ''ilRet = gIMoveListBox(PostLog, lbcMissed, lbcMissedCode, "Mnf.Btr", gFieldOffset("Mnf", "MnfName"), 20, ilFilter(), slFilter(), ilOffset())
    'ilRet = gIPopListBox(PostLog, tmMissedCode(), smMissedCodeTag, "Mnf.Btr", gFieldOffset("Mnf", "MnfName"), 20, ilfilter(), slFilter(), ilOffset())
    ilRet = gIMoveListBox(Spots, lbcMCReason, tmMissedCode(), smMissedCodeTag, "Mnf.Btr", gFieldOffset("Mnf", "MnfName"), 20, ilfilter(), slFilter(), ilOffSet())
    imMissedReason = 0
    imCancelReason = 0
    For ilLoop = LBound(tmMissedCode) To UBound(tmMissedCode) - 1 Step 1
        slNameCode = tmMissedCode(ilLoop).sKey
        ilRet = gParseItem(slNameCode, 1, "\", slName)
        If StrComp(slName, slDefaultName, 1) = 0 Then
            imMissedReason = ilLoop
            imCancelReason = ilLoop
            Exit For
        End If
    Next ilLoop
    lbcMCReason.ListIndex = imMissedReason
    slNameCode = tmMissedCode(imMissedReason).sKey
    ilRet = gParseItem(slNameCode, 1, "\", slName)
    gSetShow pbcSelect(imDW), slName, tmCtrls(MISSEDREASONINDEX)
    gSetShow pbcSelect(imDW), slName, tmCtrls(CANCELREASONINDEX)
    Exit Sub

    On Error GoTo 0
    imTerminate = True
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMissedSummary                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build summary view of missed   *
'*                                                     *
'*******************************************************
Private Sub mMissedSummary(ilSource As Integer)
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim ilIndex As Integer
    Dim ilUpper As Integer
    Dim slCnt As String
    Dim ilLn As Integer
    Dim ilLnFound As Integer
    If ilSource = 0 Then
        'If (imLog2Type = 0) And (imLog2Show = 1) Then
        If ((imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2)) And (imLog2Show = 1) Then
            'ReDim tmSvSdfMdExt(LBound(tmSdfMdExt) To UBound(tmSdfMdExt)) As SDFMDEXT
            ReDim tmSvSdfMdExt(LBound(tmSdfMdExt) To UBound(tmSdfMdExt) - 1) As SDFMDEXT
            'For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmSdfMdExt) Step 1
                'tmSvSdfMdExt(ilLoop) = tmSdfMdExt(ilLoop)
                tmSvSdfMdExt(ilLoop - 1) = tmSdfMdExt(ilLoop)
            Next ilLoop
            'Combine missed for contract into one line
            ilUpper = 0 'LBound(tmSdfMdExt)
            ReDim tmSdfMdExt(0 To ilUpper) As SDFMDEXT
            'For ilLoop = LBound(tmSvSdfMdExt) To UBound(tmSvSdfMdExt) - 1 Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmSvSdfMdExt) - 1 Step 1
                ilFound = False
                'For ilIndex = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) - 1 Step 1
                For ilIndex = imLBSdfMdExt To UBound(tmSdfMdExt) - 1 Step 1
                    If (tmSdfMdExt(ilIndex).lChfCode = tmSvSdfMdExt(ilLoop).lChfCode) And (tmSdfMdExt(ilIndex).iLen = tmSvSdfMdExt(ilLoop).iLen) Then
                        If (tmSdfMdExt(ilIndex).iLineNo <> tmSvSdfMdExt(ilLoop).iLineNo) Then
                            tmSdfMdExt(ilIndex).lClfCxfCode = 0
                            ilLnFound = False
                            'For ilLn = LBound(tmSvSdfMdExt) To ilLoop - 1 Step 1
                            For ilLn = imLBSdfMdExt To ilLoop - 1 Step 1
                                If (tmSvSdfMdExt(ilLoop).lChfCode = tmSvSdfMdExt(ilLn).lChfCode) And (tmSvSdfMdExt(ilLoop).iLineNo = tmSvSdfMdExt(ilLn).iLineNo) Then
                                    ilLnFound = True
                                    Exit For
                                End If
                            Next ilLn
                            If Not ilLnFound Then
                                tmSdfMdExt(ilIndex).iNoOrdered = tmSdfMdExt(ilIndex).iNoOrdered + tmSvSdfMdExt(ilLoop).iNoOrdered
                            End If
                        End If
                        tmSdfMdExt(ilIndex).iNoMissed = tmSdfMdExt(ilIndex).iNoMissed + 1
                        ilFound = True
                        Exit For
                    End If
                Next ilIndex
                If Not ilFound Then
                    tmSdfMdExt(ilUpper) = tmSvSdfMdExt(ilLoop)
                    ilUpper = ilUpper + 1
                    ReDim Preserve tmSdfMdExt(LBound(tmSdfMdExt) To ilUpper) As SDFMDEXT
                End If
            Next ilLoop
            For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
                slCnt = Trim$(str$(tmSdfMdExt(ilLoop).lCntrNo))
                Do While Len(slCnt) < 7
                    slCnt = "0" & slCnt
                Loop
                tmSdfMdExt(ilLoop).sKey = tmSdfMdExt(ilLoop).sAdvtAbbr & "|" & slCnt
            Next ilLoop
            'If UBound(tmSdfMdExt) - 1 > 1 Then
            If UBound(tmSdfMdExt) > 0 Then
                'ArraySortTyp fnAV(tmSdfMdExt(), 1), UBound(tmSdfMdExt) - 1, 0, LenB(tmSdfMdExt(1)), 0, LenB(tmSdfMdExt(1).sKey), 0
                ArraySortTyp fnAV(tmSdfMdExt(), 0), UBound(tmSdfMdExt), 0, LenB(tmSdfMdExt(0)), 0, LenB(tmSdfMdExt(0).sKey), 0
            End If
            ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
            For ilLoop = UBound(tmSdfMdExt) - 1 To 0 Step -1
                tmSdfMdExt(ilLoop + 1) = tmSdfMdExt(ilLoop)
            Next ilLoop
        End If
    Else
        If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1) Then
            ReDim tmSvAdMdSdfMdExt(LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt)) As SDFMDEXT
            'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) Step 1
                tmSvAdMdSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop)
            Next ilLoop
            'Combine missed for contract into one line
            ilUpper = imLBSdfMdExt 'LBound(tmAdMdSdfMdExt)
            'ReDim tmAdMdSdfMdExt(ilUpper To ilUpper) As SDFMDEXT
            ReDim tmAdMdSdfMdExt(0 To imLBSdfMdExt) As SDFMDEXT
            ''For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
            'For ilLoop = imLBSdfMdExt To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
                ilFound = False
                ''For ilIndex = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                'For ilIndex = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                For ilIndex = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    If (tmAdMdSdfMdExt(ilIndex).lChfCode = tmSvAdMdSdfMdExt(ilLoop).lChfCode) And (tmAdMdSdfMdExt(ilIndex).iLen = tmSvAdMdSdfMdExt(ilLoop).iLen) Then
                        If (tmAdMdSdfMdExt(ilIndex).iLineNo <> tmSvAdMdSdfMdExt(ilLoop).iLineNo) Then
                            tmAdMdSdfMdExt(ilIndex).lClfCxfCode = 0
                            ilLnFound = False
                            ''For ilLn = LBound(tmSvAdMdSdfMdExt) To ilLoop - 1 Step 1
                            'For ilLn = imLBSdfMdExt To ilLoop - 1 Step 1
                            For ilLn = imLBSdfMdExt To ilLoop - 1 Step 1
                                If (tmSvAdMdSdfMdExt(ilLoop).lChfCode = tmSvAdMdSdfMdExt(ilLn).lChfCode) And (tmSvAdMdSdfMdExt(ilLoop).iLineNo = tmSvAdMdSdfMdExt(ilLn).iLineNo) Then
                                    ilLnFound = True
                                    Exit For
                                End If
                            Next ilLn
                            If Not ilLnFound Then
                                tmAdMdSdfMdExt(ilIndex).iNoOrdered = tmAdMdSdfMdExt(ilIndex).iNoOrdered + tmSvAdMdSdfMdExt(ilLoop).iNoOrdered
                            End If
                        End If
                        tmAdMdSdfMdExt(ilIndex).iNoMissed = tmAdMdSdfMdExt(ilIndex).iNoMissed + 1
                        ilFound = True
                        Exit For
                    End If
                Next ilIndex
                If Not ilFound Then
                    tmAdMdSdfMdExt(ilUpper) = tmSvAdMdSdfMdExt(ilLoop)
                    tmAdMdSdfMdExt(ilUpper).iNoMissed = 1
                    ilUpper = ilUpper + 1
                    ReDim Preserve tmAdMdSdfMdExt(LBound(tmAdMdSdfMdExt) To ilUpper) As SDFMDEXT
                End If
            Next ilLoop
            For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) Step 1
                slCnt = Trim$(str$(tmAdMdSdfMdExt(ilLoop).lCntrNo))
                Do While Len(slCnt) < 7
                    slCnt = "0" & slCnt
                Loop
                tmAdMdSdfMdExt(ilLoop).sKey = tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & "|" & slCnt
            Next ilLoop
            For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                tmAdMdSdfMdExt(ilLoop - 1) = tmAdMdSdfMdExt(ilLoop)
            Next ilLoop
            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) - 1) As SDFMDEXT
            'If UBound(tmAdMdSdfMdExt) - 1 > 1 Then
            If UBound(tmAdMdSdfMdExt) > 0 Then
                'ArraySortTyp fnAV(tmAdMdSdfMdExt(), 1), UBound(tmAdMdSdfMdExt) - 1, 0, LenB(tmAdMdSdfMdExt(1)), 0, LenB(tmAdMdSdfMdExt(1).sKey), 0
                ArraySortTyp fnAV(tmAdMdSdfMdExt(), 0), UBound(tmAdMdSdfMdExt), 0, LenB(tmAdMdSdfMdExt(0)), 0, LenB(tmAdMdSdfMdExt(0).sKey), 0
            End If
            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
            For ilLoop = UBound(tmAdMdSdfMdExt) - 1 To 0 Step -1
                tmAdMdSdfMdExt(ilLoop + 1) = tmAdMdSdfMdExt(ilLoop)
            Next ilLoop
        End If
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mMoveTest                       *
'*                                                     *
'*             Created:7/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine if spot can be moved *
'*                      into specified location        *
'*                                                     *
'*******************************************************
Private Function mMoveTest(llSdfRecPos As Long, slLogDate As String, ilSchGameNo As Integer, tlEvt() As EVTINFO, ilMoveIndex As Integer, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF, slSpotShow As String, ilBkQH As Integer, ilShowMsg As Integer) As String
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilListIndex                   ilGsf                                                   *
'******************************************************************************************

'
'   slRet = mMoveTest(llSdfRecPos, slLogDate, tlEvt(), ilMoveIndex, tlVcf0(), tlVcf6(), tlVcf7()
'       Where:
'
'           slRet(O)-   "" = Abort move
'                       "S"=Move. Set if or if not Showing Message
'                       "G"=Move as MG.  Only set if Showing Message
'                       "O"=Move and set as moved outside contract limits.  Only set if Showing Message
'                       "N"=Date/Day or Time Conflict, No Avail Conflict.  Only set if Not showing Message
'                       "Y"=Date or Day or Time or Avail Conflict.  Only set if Not showing Message
'
    Dim ilLogDay As Integer
    Dim ilBookDay As Integer
    Dim llDate As Long
    Dim ilRet As Integer
    Dim ilMGMove As Integer
    Dim ilAvailIndex As Integer
    Dim ilSsfAvailIndex As Integer
    Dim ilLoop As Integer
    Dim ilFound As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slNoSpots As String
    Dim slMsg As String
    Dim ilWeekMoveOk As Integer
    Dim ilDayMoveOk As Integer
    Dim ilTimeMoveOk As Integer
    Dim ilNoAdvtConflict As Integer
    Dim ilNoCompConflict As Integer
    Dim ilNoAvailConflict As Integer
    Dim ilNoExclConflict As Integer
    Dim il1stPositionOk As Integer
    Dim ilSoloAvailOk As Integer
    Dim ilVehicleOk As Integer
    Dim ilAvailTypeOk As Integer
    Dim llChfCode As Long
    Dim ilLineNo As Integer
    Dim llFsfCode As Long
    Dim slDate As String
    Dim slType As String
    Dim ilAvInfo As Integer
    Dim ilAnfCode As Integer
    Dim slWkDate As String
    Dim llMoDate As Long
    Dim llSuDate As Long
    Dim ilEvt As Integer
    Dim llExclEndTime As Long
    Dim ilCount As Integer
    Dim ilSpotIndex As Integer
    Dim ilAvailTime0 As Integer
    Dim ilAvailTime1 As Integer
    Dim ilQH As Integer
    Dim ilHour As Integer
    Dim ilOrderedGameNo As Integer
    Dim slMissedDate As String
    Dim llOrderedDate As Long
    Dim llSchDate As Long
    Dim ilGsf As Integer
    Dim tlSmf As SMF
    '10/24/13: Reset
    Dim slSplitNetworkType
    Dim slSvOverBookMode As String
    
    slSvOverBookMode = smOverbookMode
    ilWeekMoveOk = True
    ilDayMoveOk = True
    ilTimeMoveOk = True
    ilNoAdvtConflict = True
    ilNoCompConflict = True
    ilNoAvailConflict = True
    ilNoExclConflict = True
    il1stPositionOk = True
    ilSoloAvailOk = True
    ilVehicleOk = True
    slSplitNetworkType = smSplitNetworkType
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Read error for " & Trim$(slSpotShow) & "- Drag ignored", vbOKOnly + vbQuestion, "Conflict")
        DoEvents
        mRepaint
        mMoveTest = ""  'Abort
        Exit Function
    End If
    ilOrderedGameNo = tmSdf.iGameNo
    slMissedDate = ""
    If (tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O") Then
        llMoDate = 0
        'tmSmfSrchKey.lChfCode = tmSdf.lChfCode
        'tmSmfSrchKey.iLineNo = tmSdf.iLineNo
        'tmSmfSrchKey.iMissedDate(0) = 0 'sch date =tlSdf.iDate(0)
        'tmSmfSrchKey.iMissedDate(1) = 0 'sch date =tlSdf.iDate(1)
        imSmfRecLen = Len(tlSmf)
        'ilRet  = btrGetGreaterOrEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get current record
        'Do While (ilRet = BTRV_ERR_NONE) And (tlSmf.lChfCode = tmSdf.lChfCode) And (tlSmf.iLineNo = tmSdf.iLineNo)
            'If (tlSmf.sSchStatus = tmSdf.sSchStatus) And (tlSmf.iActualDate(0) = tmSdf.iDate(0)) And (tlSmf.iActualDate(1) = tmSdf.iDate(1)) And (tlSmf.iActualTime(0) = tmSdf.iTime(0)) And (tlSmf.iActualTime(1) = tmSdf.iTime(1)) Then
        tmSmfSrchKey2.lCode = tmSdf.lCode
        ilRet = btrGetEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            If tlSmf.lSdfCode = tmSdf.lCode Then
                If (tlSmf.lMtfCode = 0) Or (lgMtfNoRecs <= 0) Then
                    gUnpackDate tlSmf.iMissedDate(0), tlSmf.iMissedDate(1), slWkDate
                    slMissedDate = slWkDate
                    llMoDate = gDateValue(gObtainPrevMonday(slWkDate))
                    llSuDate = gDateValue(gObtainNextSunday(slWkDate))
                Else
                    'Move within same week allowed
                    gUnpackDate tmSdf.iDate(0), tmSdf.iDate(1), slWkDate
                    llMoDate = gDateValue(gObtainPrevMonday(slWkDate))
                    llSuDate = gDateValue(gObtainNextSunday(slWkDate))
                End If
                'Exit Do
            End If
        '    ilRet = btrGetNext(hmSmf, tlSmf, imSmfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        'Loop
        End If
        If llMoDate = 0 Then
            Screen.MousePointer = vbDefault
            ilRet = MsgBox("Read error(Smf) for " & Trim$(slSpotShow) & "- Drag ignored", vbOKOnly + vbQuestion, "Conflict")
            DoEvents
            mRepaint
            mMoveTest = ""  'Abort
            Exit Function
        End If
        If (tlSmf.iOrigSchVef <> tmSdf.iVefCode) And ((tlSmf.lMtfCode = 0) Or (lgMtfNoRecs <= 0)) Then
            ilVehicleOk = False
        End If
        ilOrderedGameNo = tlSmf.iGameNo
    Else
        gUnpackDate tmSdf.iDate(0), tmSdf.iDate(1), slWkDate
        llMoDate = gDateValue(gObtainPrevMonday(slWkDate))
        llSuDate = gDateValue(gObtainNextSunday(slWkDate))
    End If
    llChfCode = tmSdf.lChfCode
    ilLineNo = tmSdf.iLineNo
    llFsfCode = tmSdf.lFsfCode
    slType = tmSdf.sSpotType
    If tmVef.sType <> "G" Then
        ilLogDay = gWeekDayStr(slLogDate)
        imSsfRecLen = Len(tmSsf(ilLogDay))
        ilBookDay = ilLogDay
    Else
        If imDW = 0 Then
            ilBookDay = gWeekDayStr(slLogDate)
            ilLogDay = 0
        Else
            ilBookDay = gWeekDayStr(slLogDate)
            ilLogDay = mGetGameColumnNo(ilSchGameNo)
            If ilLogDay = -1 Then
                Screen.MousePointer = vbDefault
                DoEvents
                mRepaint
                mMoveTest = ""  'Abort
                Exit Function
            End If
        End If
    End If
    If lmSsfRecPos(ilLogDay) <> tlEvt(ilMoveIndex).lSsfRecPos Then
        ilRet = gSSFGetDirect(hmSsf, tmSsf(ilLogDay), imSsfRecLen, tlEvt(ilMoveIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
        lmSsfRecPos(ilLogDay) = tlEvt(ilMoveIndex).lSsfRecPos
        If ilSchGameNo <= 0 Then
            lmSsfDate(ilLogDay) = gDateValue(slLogDate)
        Else
            lmSsfDate(ilLogDay) = ilSchGameNo
        End If
    End If
    llDate = gDateValue(slLogDate)
    ilRet = mReadChfClfRdfCffRec(llChfCode, ilLineNo, llFsfCode, ilOrderedGameNo, slLogDate, slStartDate, slEndDate, slNoSpots, -1, ilSchGameNo)
    If Not ilRet Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Read error for " & Trim$(slSpotShow) & "- Drag ignored", vbOKOnly + vbQuestion, "Conflict")
        DoEvents
        mRepaint
        mMoveTest = ""  'Abort
        Exit Function
    End If
    If tmClf.lRafCode > 0 Then
        gBuildStationsFromRAF hmRaf, hmSef, tmClf.lRafCode, smClfInclExcl, tmStationsClf(), True
    Else
        smClfInclExcl = ""
        'ReDim tmStationsClf(1 To 1) As INTKEY0
        ReDim tmStationsClf(0 To 0) As INTKEY0
    End If
    'If cff not found, then spot is outside date definition
    ilMGMove = 0
    If tmCff(0).sDelete = "Y" Then
        If (tgSpf.sAllowMGs = "N") Then
            'Test if within same week , ignore day test
            If (llDate < llMoDate) Or (llDate > llSuDate) Then
                ilWeekMoveOk = False
            End If
        Else
            ilWeekMoveOk = False
        End If
    Else
        'Test if within same week
        If (llDate < llMoDate) Or (llDate > llSuDate) Then
            ilWeekMoveOk = False
        End If
        'Test days
        'If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then 'Weekly
        If (tmCff(0).sDyWk <> "D") Then  'Weekly
            If (tmCff(0).iDay(ilBookDay) <= 0) And (tmCff(0).sXDay(ilBookDay) <> "Y") Then
                ilDayMoveOk = False
            End If
        Else
            If tmCff(0).iDay(ilBookDay) <= 0 Then
                ilDayMoveOk = False
            End If
            If ((tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O")) And (slMissedDate <> "") Then
                slDate = slMissedDate
            Else
                gUnpackDate tmSdf.iDate(0), tmSdf.iDate(1), slDate
            End If
            If tmClf.sSportsByWeek <> "W" Then
                If gDateValue(slDate) <> gDateValue(slLogDate) Then
                    ilDayMoveOk = False
                End If
            Else
                If gDateValue(gObtainPrevMonday(slDate)) <> gDateValue(gObtainPrevMonday(slLogDate)) Then
                    ilDayMoveOk = False
                End If
            End If
        End If
    End If
    If ilOrderedGameNo <> ilSchGameNo Then
        If tmClf.sSportsByWeek <> "W" Then
            ilDayMoveOk = False
        Else
            llOrderedDate = -1
            llSchDate = -1
            For ilGsf = LBound(tmGsfInfo) To UBound(tmGsfInfo) - 1 Step 1
                If tmGsfInfo(ilGsf).iGameNo = ilOrderedGameNo Then
                    llOrderedDate = tmGsfInfo(ilGsf).lGameDate
                ElseIf tmGsfInfo(ilGsf).iGameNo = ilSchGameNo Then
                    llSchDate = tmGsfInfo(ilGsf).lGameDate
                End If
                If (llOrderedDate <> -1) And (llSchDate <> -1) Then
                    Exit For
                End If
            Next ilGsf
            If (llOrderedDate <> -1) And (llSchDate <> -1) Then
                Do Until gWeekDayLong(llOrderedDate) = 0
                    llOrderedDate = llOrderedDate - 1
                Loop
                If (llSchDate < llOrderedDate) Or (llSchDate > llOrderedDate + 6) Then
                    ilDayMoveOk = False
                End If
            Else
                ilDayMoveOk = False
            End If
        End If
    End If
    'Check for advt/competitive conflicts for swapping
    ilAvailIndex = ilMoveIndex
    ilAvInfo = 0
    ilAvailTypeOk = True
    Do
        ilAvailIndex = ilAvailIndex - 1
        'If ilAvailIndex < LBound(tlEvt) Then
        If ilAvailIndex < imLBEvt Then
            mRepaint
            mMoveTest = ""
            Exit Function
        End If
        If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
            If (tlEvt(ilAvailIndex).iLineInfo And SSLOCK) = SSLOCK Then
                Screen.MousePointer = vbDefault
                ilRet = MsgBox("Spot being moved into Locked Avail, Move Anyway", vbYesNo + vbQuestion + vbDefaultButton2, "Lock Warning")
                DoEvents
                If ilRet = vbNo Then
                    mRepaint
                    If ilShowMsg = 3 Then
                        mMoveTest = "D"
                    Else
                        mMoveTest = ""
                    End If
                    Exit Function
                End If
                Screen.MousePointer = vbHourglass
            End If
            ilSsfAvailIndex = tlEvt(ilAvailIndex).iSsfIndex
            ilAvInfo = tlEvt(ilAvailIndex).iLineInfo    'Avail info
            ilAnfCode = tlEvt(ilAvailIndex).lInfo   'iAnfCode
            If (tlEvt(ilAvailIndex).iType = 2) And (tmChf.sType = "M") And (tgSpf.sSchdPromo = "Y") Then
                If ((Asc(tgSpf.sUsingFeatures3) And PROMOINTOCONTRACTAVAILS) <> PROMOINTOCONTRACTAVAILS) Then
                    ilAvailTypeOk = False
                End If
            End If
            If (tlEvt(ilAvailIndex).iType = 9) And (tmChf.sType <> "M") Then
                ilAvailTypeOk = False
            End If
            If (tlEvt(ilAvailIndex).iType = 2) And (tmChf.sType = "S") And (tgSpf.sSchdPSA = "Y") Then
                If ((Asc(tgSpf.sUsingFeatures3) And PSAINTOCONTRACTAVAILS) <> PSAINTOCONTRACTAVAILS) Then
                    ilAvailTypeOk = False
                End If
            End If
            If (tlEvt(ilAvailIndex).iType = 8) And (tmChf.sType <> "S") Then
                ilAvailTypeOk = False
            End If
            '1st Position
            If tmClf.iPosition = 1 Then
                If ilAvailIndex <> ilMoveIndex - 1 Then
                    il1stPositionOk = False
                End If
            End If
            If tmClf.sSoloAvail = "Y" Then
                If tmSdf.iLen <> tlEvt(ilAvailIndex).lLen Then
                    ilSoloAvailOk = False
                End If
                ilCount = 0
                ilSpotIndex = ilAvailIndex + 1
                Do
                    If tlEvt(ilSpotIndex).iType = 100 Then
                        'If UBound(tmSpotMove) > 2 Then
                        If UBound(tmSpotMove) > 1 Then
                            'If (tmSpotMove(1).lSdfCode <> tlEvt(ilSpotIndex).lSdfCode) And (tmSpotMove(2).lSdfCode <> tlEvt(ilSpotIndex).lSdfCode) Then
                            If (tmSpotMove(0).lSdfCode <> tlEvt(ilSpotIndex).lSdfCode) And (tmSpotMove(1).lSdfCode <> tlEvt(ilSpotIndex).lSdfCode) Then
                                ilCount = ilCount + 1
                            End If
                        Else
                            ilCount = ilCount + 1
                        End If
                    Else
                        Exit Do
                    End If
                    ilSpotIndex = ilSpotIndex + 1
                Loop
                'If UBound(tmSpotMove) > 2 Then
                If UBound(tmSpotMove) > 1 Then
                    If ilCount > 0 Then
                        ilSoloAvailOk = False
                    End If
                Else
                    If ilCount > 1 Then
                        ilSoloAvailOk = False
                    End If
                End If
            End If
            Exit Do
        End If
    Loop
    imSsfRecLen = Len(tmSsf(ilLogDay))
    If lmSsfRecPos(ilLogDay) <> tlEvt(ilAvailIndex).lSsfRecPos Then
        ilRet = gSSFGetDirect(hmSsf, tmSsf(ilLogDay), imSsfRecLen, tlEvt(ilAvailIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
        lmSsfRecPos(ilLogDay) = tlEvt(ilAvailIndex).lSsfRecPos
        If ilSchGameNo <= 0 Then
            lmSsfDate(ilLogDay) = gDateValue(slLogDate)
        Else
            lmSsfDate(ilLogDay) = ilSchGameNo
        End If
    End If
    ilRet = False
    'If (ilMoveIndex >= UBound(tlEvt)) Or (ilMoveIndex < LBound(tlEvt)) Then
    If (ilMoveIndex >= UBound(tlEvt)) Or (ilMoveIndex < imLBEvt) Then
        Screen.MousePointer = vbDefault
        DoEvents
        mRepaint
        mMoveTest = ""  'Abort
        Exit Function
    End If
    If tlEvt(ilMoveIndex).iType = 100 Then
        ilRet = mTestNetworkSplitConflicts(tmSsf(ilLogDay), ilSsfAvailIndex, ilMoveIndex, tlEvt())
    End If
    '10/24/13: Restore Split Network
    smSplitNetworkType = slSplitNetworkType
    If ilRet Then
        Screen.MousePointer = vbDefault
        ilRet = MsgBox("Split Network Station Conflicts- spot not moved", vbOKOnly + vbExclamation, "Move Status")
        DoEvents
        mRepaint
        If ilShowMsg = 3 Then
            mMoveTest = "D"
        Else
            mMoveTest = ""
        End If
        Exit Function
    End If
    'Test for exclusion conflicts
    If (tmChf.iMnfExcl(0) <> 0) Or (tmChf.iMnfExcl(1) <> 0) Then
        ilEvt = 1
        Do While ilEvt <= tmSsf(ilLogDay).iCount
           LSet tmProg = tmSsf(ilLogDay).tPas(ADJSSFPASBZ + ilEvt)
            If tmProg.iRecType = 1 Then
                If (tmChf.iMnfExcl(0) <> 0) And ((tmChf.iMnfExcl(0) = tmProg.iMnfExcl(0)) Or (tmChf.iMnfExcl(0) = tmProg.iMnfExcl(1))) Then
                    gUnpackTimeLong tmProg.iEndTime(0), tmProg.iEndTime(1), True, llExclEndTime
                    If llExclEndTime > tlEvt(ilAvailIndex).lTime Then
                        ilNoExclConflict = False
                        Exit Do
                    End If
                ElseIf (tmChf.iMnfExcl(1) <> 0) And ((tmChf.iMnfExcl(1) = tmProg.iMnfExcl(0)) Or (tmChf.iMnfExcl(1) = tmProg.iMnfExcl(1))) Then
                    gUnpackTimeLong tmProg.iEndTime(0), tmProg.iEndTime(1), True, llExclEndTime
                    If llExclEndTime > tlEvt(ilAvailIndex).lTime Then
                        ilNoExclConflict = False
                        Exit Do
                    End If
                End If
            End If
            ilEvt = ilEvt + 1
            If ilEvt > ilAvailIndex Then
                Exit Do
            End If
        Loop
    End If
    'Determine advertiser separation
    lmChfCode = 0   'Force to recompute value so ilBkQH gets commputed
    If (tmClf.sSportsByWeek <> "W") Or (Not mGamesInSameWeek(ilOrderedGameNo, ilSchGameNo)) Then
        gGetLineSchParameters hmSsf, tmSsf(), lmSsfDate(), lmSsfRecPos(), llDate, imVehCode, tmChf.iAdfCode, ilOrderedGameNo, tmCff(), tmClf, tmLnRdf, lmSepLength, lmStartDateLen, lmEndDateLen, lmChfCode, imLineNo, imAdfCode, imVehComp, imHour(), imDay(), imQH(), imAHour(), imADay(), imAQH(), lmTBStartTime(), lmTBEndTime(), lmEarliestAllowedDate, imSkip(), tmChf.sType, tmChf.iPctTrade, ilBkQH, False, imPriceLevel
    Else
        gGetLineSchParameters hmSsf, tmSsf(), lmSsfDate(), lmSsfRecPos(), llDate, imVehCode, tmChf.iAdfCode, ilSchGameNo, tmCff(), tmClf, tmLnRdf, lmSepLength, lmStartDateLen, lmEndDateLen, lmChfCode, imLineNo, imAdfCode, imVehComp, imHour(), imDay(), imQH(), imAHour(), imADay(), imAQH(), lmTBStartTime(), lmTBEndTime(), lmEarliestAllowedDate, imSkip(), tmChf.sType, tmChf.iPctTrade, ilBkQH, False, imPriceLevel
    End If
    'Re-Read SSf incase GetLineSchParameters has altered it
    imSsfRecLen = Len(tmSsf(ilLogDay))
    If lmSsfRecPos(ilLogDay) <> tlEvt(ilAvailIndex).lSsfRecPos Then
        ilRet = gSSFGetDirect(hmSsf, tmSsf(ilLogDay), imSsfRecLen, tlEvt(ilAvailIndex).lSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
        lmSsfRecPos(ilLogDay) = tlEvt(ilAvailIndex).lSsfRecPos
        If ilSchGameNo <= 0 Then
            lmSsfDate(ilLogDay) = gDateValue(slLogDate)
        Else
            lmSsfDate(ilLogDay) = ilSchGameNo
        End If
    End If
    If tmSsf(ilLogDay).iVefCode <> tmSdf.iVefCode Then
        ilVehicleOk = False
    End If
    'Check Times
    ilFound = False
    For ilLoop = LBound(lmTBStartTime) To UBound(lmTBEndTime) Step 1
        If lmTBStartTime(ilLoop) <> -1 Then
            If (tlEvt(ilAvailIndex).lTime >= lmTBStartTime(ilLoop)) And (tlEvt(ilAvailIndex).lTime < lmTBEndTime(ilLoop)) Then
                ilFound = True
                Exit For
            End If
        End If
    Next ilLoop
    If Not ilFound Then
        ilTimeMoveOk = False
    End If
    If tmVef.sType <> "G" Then
        gPackTimeLong tlEvt(ilAvailIndex).lTime, ilAvailTime0, ilAvailTime1
        'ilQH = (ilAvailTime1 And &HFF) \ 15 + 1 'Obtain quarter hour (1 to 4)
        ilQH = (ilAvailTime1 And &HFF) \ 15 'Obtain quarter hour (0 to 3)
        'ilHour = ilAvailTime1 \ 256 + 1  'Obtain hour index 1-24
        ilHour = ilAvailTime1 \ 256  'Obtain hour index 0-23
        ilRet = imSkip(ilHour, ilQH, ilLogDay)
        If ilRet = -1 Then
            ilTimeMoveOk = False
            ilDayMoveOk = False
        End If
    End If

    If (tlEvt(ilMoveIndex).iType = 100) And ((smSplitNetworkType = "P") Or (smSplitNetworkType = "S")) Then
        ilNoAdvtConflict = gAdvtTest(hmSsf, tmSsf(ilLogDay), lmSsfRecPos(ilLogDay), tmSpotMove(), imVpfIndex, lmSepLength, ilSsfAvailIndex, tmChf.iAdfCode, tmChf.iMnfComp(0), tmChf.iMnfComp(1), 0, 0, "I", "N", imPriceLevel, False)
        ilNoCompConflict = gCompetitiveTest(lmCompTime, hmSsf, tmSsf(ilLogDay), lmSsfRecPos(ilLogDay), tmSpotMove(), imVpfIndex, tmClf.iLen, tmChf.iMnfComp(0), tmChf.iMnfComp(1), ilSsfAvailIndex, tlVcf0(), tlVcf6(), tlVcf7(), 0, 0, "I", "N", imPriceLevel, False)
    Else
        ilNoAdvtConflict = gAdvtTest(hmSsf, tmSsf(ilLogDay), lmSsfRecPos(ilLogDay), tmSpotMove(), imVpfIndex, lmSepLength, ilSsfAvailIndex, tmChf.iAdfCode, tmChf.iMnfComp(0), tmChf.iMnfComp(1), 0, 0, "I", "N", imPriceLevel, True)
        ilNoCompConflict = gCompetitiveTest(lmCompTime, hmSsf, tmSsf(ilLogDay), lmSsfRecPos(ilLogDay), tmSpotMove(), imVpfIndex, tmClf.iLen, tmChf.iMnfComp(0), tmChf.iMnfComp(1), ilSsfAvailIndex, tlVcf0(), tlVcf6(), tlVcf7(), 0, 0, "I", "N", imPriceLevel, True)
    End If
    'If avail buy and not matching the avail type- ask if Ok
    'If not an avail buy and sustaining not allowed- ask if Ok
    If tmLnRdf.sInOut = "I" Then
        If (ilAnfCode <> tmLnRdf.ianfCode) Then
            ilNoAvailConflict = False
        End If
    ElseIf tmLnRdf.sInOut = "O" Then
        If (ilAnfCode = tmLnRdf.ianfCode) Then
            ilNoAvailConflict = False
        End If
    Else    'Book into any avail which allows sustaining spots
        If (ilAvInfo And SSSUSTAINING) <> SSSUSTAINING Then
            ilNoAvailConflict = False
        End If
    End If
    slMsg = ""
    If tmSdf.sSchStatus <> "G" Then
        If Not ilVehicleOk Then
            slMsg = Trim$(slSpotShow) & "=> Violates Vehicle"
        End If
        If Not ilWeekMoveOk Then
            If slMsg = "" Then
                slMsg = Trim$(slSpotShow) & "=> Violates Weeks"
            Else
                slMsg = slMsg & ", Weeks"
            End If
        End If
        If Not ilTimeMoveOk Then
            If slMsg = "" Then
                slMsg = Trim$(slSpotShow) & "=> Violates Times"
            Else
                slMsg = slMsg & ", Times"
            End If
        End If
        If Not ilDayMoveOk Then
            If ilOrderedGameNo <= 0 Then
                If slMsg = "" Then
                    slMsg = Trim$(slSpotShow) & "=> Violates Days"
                Else
                    slMsg = slMsg & ", Days"
                End If
            Else
                If slMsg = "" Then
                    slMsg = Trim$(slSpotShow) & "=> Violates Event #"
                Else
                    slMsg = slMsg & ", Event #"
                End If
            End If
        End If
        If Not ilNoAvailConflict Then
            If slMsg = "" Then
                slMsg = Trim$(slSpotShow) & "=> Violates Avail Buy"
            Else
                slMsg = slMsg & ", Avail Buy"
            End If
        End If
        If Not ilNoExclConflict Then
            If slMsg = "" Then
                slMsg = Trim$(slSpotShow) & "=> Violates Program Exclusion"
            Else
                slMsg = slMsg & ", Program Exclusion"
            End If
        End If
    Else
        If Not ilVehicleOk Then
            ilMGMove = vbYes
        End If
        If Not ilWeekMoveOk Then
            ilMGMove = vbYes
        End If
        If Not ilTimeMoveOk Then
            ilMGMove = vbYes
        End If
        If Not ilDayMoveOk Then
            ilMGMove = vbYes
        End If
        If Not ilNoAvailConflict Then
            ilMGMove = vbYes
        End If
        If Not ilNoExclConflict Then
            ilMGMove = vbYes
        End If
    End If
    If slMsg <> "" Then
        If ilShowMsg = 1 Then
            If ilNoAvailConflict Then
                mMoveTest = "A"
            ElseIf (ilTimeMoveOk) And (ilDayMoveOk) Then
                mMoveTest = "T"
            Else
                mMoveTest = "C"
            End If
            Exit Function
        End If
        If ilShowMsg = 2 Then
            mMoveTest = "C"
            Exit Function
        End If
        If ilShowMsg = 3 Then
            If Not ilNoAvailConflict Then
                mMoveTest = "C"
                Exit Function
            End If
            If Not ilNoExclConflict Then
                mMoveTest = "C"
                Exit Function
            End If
            If Not ilNoAdvtConflict Then
                mMoveTest = "C"
                Exit Function
            End If
            If Not ilNoCompConflict Then
                mMoveTest = "C"
                Exit Function
            End If
        End If
        If (tgSpf.sAllowMGs = "N") And ((Not ilVehicleOk) Or (Not ilWeekMoveOk)) Then
            Screen.MousePointer = vbDefault
            ilRet = MsgBox("Move outside of contract limits- spot not moved", vbOKOnly + vbExclamation, "Move Status")
            DoEvents
            mRepaint
            If ilShowMsg = 3 Then
                mMoveTest = "D"
            Else
                mMoveTest = ""
            End If
            Exit Function
        End If
        'If (slType <> "S") And (slType <> "M") And (slType <> "T") And (slType <> "Q") Then
        If (slType <> "S") And (slType <> "M") And (slType <> "T") And (slType <> "Q") Or ((slType = "M") And (tgSpf.sSchdPromo = "Y")) Or ((slType = "S") And (tgSpf.sSchdPSA = "Y")) Or ((slType = "T") And (tgSpf.sSchdRemnant = "Y")) Then
            If slType <> "X" Then
                If Not ilNoAdvtConflict Then
                    slMsg = slMsg & ", Advertiser Times"
                End If
                If Not ilNoCompConflict Then
                    slMsg = slMsg & ", Competitive Times"
                End If
                If Not il1stPositionOk Then
                    slMsg = slMsg & ", 1st Position"
                End If
                If Not ilSoloAvailOk Then
                    slMsg = slMsg & ", Island"
                End If
                If tgVpf(imVpfIndex).sSForceMG <> "W" Then  'Always or ask
                    Screen.MousePointer = vbDefault
                    'ilMGMove = MsgBox(slMsg & ": Move as MG", vbYesNoCancel + vbQuestion + MB_DEFBUTTON3, "Limits")
                    'DoEvents
                    If (ilVehicleOk) And (ilWeekMoveOk) And (ilTimeMoveOk) And (ilDayMoveOk) Then
                        sgGenMsg = Trim$(slMsg) & ": Move as MG, Outside, Scheduled or Cancel"
                        sgCMCTitle(0) = "MG"
                        sgCMCTitle(1) = "Outside"
                        sgCMCTitle(2) = "Scheduled"
                        sgCMCTitle(3) = "Cancel"
                        igDefCMC = 0
                        igEditBox = 0
                        GenMsg.Show vbModal
                        DoEvents
                        If igAnsCMC = 0 Then
                            ilMGMove = vbYes
                        ElseIf igAnsCMC = 1 Then
                            ilMGMove = vbNo
                        ElseIf igAnsCMC = 2 Then
                            ilMGMove = 0
                        Else
                            ilMGMove = vbCancel
                        End If
                    Else
                        sgGenMsg = Trim$(slMsg) & ": Move as MG, Outside or Cancel"
                        sgCMCTitle(0) = "MG"
                        sgCMCTitle(1) = "Outside"
                        sgCMCTitle(2) = "Cancel"
                        sgCMCTitle(3) = ""
                        igDefCMC = 0
                        igEditBox = 0
                        GenMsg.Show vbModal
                        DoEvents
                        If igAnsCMC = 0 Then
                            ilMGMove = vbYes
                        ElseIf igAnsCMC = 1 Then
                            ilMGMove = vbNo
                        Else
                            ilMGMove = vbCancel
                        End If
                    End If
                    If ilMGMove = vbCancel Then
                        mRepaint
                        If ilShowMsg = 3 Then
                            mMoveTest = "D"
                        Else
                            mMoveTest = ""
                        End If
                        'If pbcContract.Visible Then
                        '    pbcContract.Visible = False
                        '    DoEvents
                        '    pbcContract.Visible = True
                        'End If
                        Exit Function
                    End If
                Else
                    Screen.MousePointer = vbDefault
                    'ilMGMove = MsgBox(slMsg & ": Move as MG", vbOkCancel + vbQuestion + vbDefaultButton2, "Limits")
                    'DoEvents
                    sgGenMsg = Trim$(slMsg) & ": Move as MG or Cancel"
                    sgCMCTitle(0) = "MG"
                    sgCMCTitle(1) = "Cancel"
                    sgCMCTitle(2) = ""
                    sgCMCTitle(3) = ""
                    igDefCMC = 0
                    igEditBox = 0
                    GenMsg.Show vbModal
                    DoEvents
                    If igAnsCMC = 0 Then
                        ilMGMove = vbYes
                    Else
                        ilMGMove = vbCancel
                    End If
                    If ilMGMove = vbCancel Then
                        mRepaint
                        If ilShowMsg = 3 Then
                            mMoveTest = "D"
                        Else
                            mMoveTest = ""
                        End If
                        'If pbcContract.Visible Then
                        '    pbcContract.Visible = False
                        '    DoEvents
                        '    pbcContract.Visible = True
                        'End If
                        Exit Function
                    End If
                End If
                DoEvents
            Else
                ilMGMove = vbNo    'Create as Outside
            End If
        Else
            Screen.MousePointer = vbDefault
            ilRet = MsgBox("Move outside of contract limits- spot not moved", vbOKOnly + vbExclamation, "Move Status")
            DoEvents
            mRepaint
            If ilShowMsg = 3 Then
                mMoveTest = "D"
            Else
                mMoveTest = ""
            End If
            Exit Function
        End If
    Else
        If ilShowMsg = 2 Then
            If Not ilNoAdvtConflict Then
                mMoveTest = "C"
                Exit Function
            End If
            If Not ilNoCompConflict Then
                mMoveTest = "C"
                Exit Function
            End If
            If (ilMGMove = vbYes) Then
                mMoveTest = "G"
            Else
                mMoveTest = "S"
            End If
            Exit Function
        End If
        If ilShowMsg = 3 Then
            If Not ilNoAdvtConflict Then
                mMoveTest = "C"
                Exit Function
            End If
            If Not ilNoCompConflict Then
                mMoveTest = "C"
                Exit Function
            End If
        End If
        'If (slType <> "S") And (slType <> "M") And (slType <> "T") And (slType <> "Q") Then
        If (slType <> "S") And (slType <> "M") And (slType <> "T") And (slType <> "Q") Or ((slType = "M") And (tgSpf.sSchdPromo = "Y")) Or ((slType = "S") And (tgSpf.sSchdPSA = "Y")) Or ((slType = "T") And (tgSpf.sSchdRemnant = "Y")) Then
            If Not ilNoAdvtConflict Then
                slMsg = Trim$(slSpotShow) & "- Violates Advertiser Times"
            End If
            If Not ilNoCompConflict Then
                If slMsg = "" Then
                    slMsg = Trim$(slSpotShow) & "- Violates Competitive Times"
                Else
                    slMsg = slMsg & ", Competitive Times"
                End If
            End If
            If Not il1stPositionOk Then
                If slMsg = "" Then
                    slMsg = Trim$(slSpotShow) & "- Violates 1st Position"
                Else
                    slMsg = slMsg & ", 1st Position"
                End If
            End If
            If Not ilSoloAvailOk Then
                If slMsg = "" Then
                    slMsg = Trim$(slSpotShow) & "- Violates Island"
                Else
                    slMsg = slMsg & ", Island"
                End If
            End If
            'If Not ilNoAvailConflict Then
            '    If slMsg = "" Then
            '        slMsg = slSpotShow & "- Violates Avail Buy"
            '    Else
            '        slMsg = slMsg & ", Avail buy"
            '    End If
            'End If
            'If Not ilNoExclConflict Then
            '    If slMsg = "" Then
            '        slMsg = slSpotShow & "- Violates Program Exclusion"
            '    Else
            '        slMsg = slMsg & ", Program Exclusion"
            '    End If
            'End If
            If slMsg <> "" Then
                Screen.MousePointer = vbDefault
                ilRet = MsgBox(slMsg & ": Move Anyway", vbOKCancel + vbQuestion + vbDefaultButton2, "Conflict")
                DoEvents
                If ilRet = vbCancel Then
                    mRepaint
                    If ilShowMsg = 3 Then
                        mMoveTest = "D"
                    Else
                        mMoveTest = ""
                    End If
                    Exit Function
                End If
            End If
        End If
    End If
    If (ilMGMove = vbYes) Or (ilMGMove = vbOK) Then
        mMoveTest = "G"
    ElseIf ilMGMove = vbNo Then
        mMoveTest = "O"
    Else
        mMoveTest = "S"
    End If
    smOverbookMode = slSvOverBookMode
    Screen.MousePointer = vbHourglass
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mMoveToEvtTemp                  *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move tm--Evt to tm--EvtTemp    *
'*                                                     *
'*******************************************************
Private Sub mMoveToEvtTemp(tlEvt() As EVTINFO, tlEvtTemp() As EVTINFO)
    Dim ilLoop As Integer
    Dim ilCount As Integer
    ReDim tlEvtTemp(LBound(tlEvt) To UBound(tlEvt)) As EVTINFO

    ilCount = LBound(tlEvt)
    For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
        If tlEvt(ilLoop).iType <> -1 Then   'ignore space filler records
            tlEvtTemp(ilCount) = tlEvt(ilLoop)
            ilCount = ilCount + 1
        End If
    Next ilLoop
    ReDim tlEvt(0 To imLBEvt) As EVTINFO
    ReDim Preserve tlEvtTemp(0 To ilCount) As EVTINFO
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mCopyEvt                        *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Move tm--Evt to tm--EvtTemp    *
'*                                                     *
'*******************************************************
Private Sub mCopyEvt(tlFromEvt() As EVTINFO, tlToEvt() As EVTINFO)
    Dim ilLoop As Integer
    ReDim tlToEvt(LBound(tlFromEvt) To UBound(tlFromEvt)) As EVTINFO

    For ilLoop = LBound(tlFromEvt) To UBound(tlFromEvt) - 1 Step 1
        tlToEvt(ilLoop) = tlFromEvt(ilLoop)
    Next ilLoop
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mObtainDayparts                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine the current dayparts *
'*                      for the vehicle from the       *
'*                      current rate card for the      *
'*                      vehicle or from the most       *
'*                      current rate card that         *
'*                      references this vehicle        *
'*                                                     *
'*******************************************************
Private Sub mObtainDayparts()
    Dim ilRet As Integer 'btrieve status
    Dim slDate As String
    Dim llDate As Long
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim slVehName As String
    Dim ilFound As Integer
    Dim ilRcfCode As Integer
    Dim llIndex As Long
    Dim ilDP As Integer
    Dim slTime As String
    Dim llStTime As Long
    Dim llEdTime As Long
    Dim ilRdfIndex As Integer
    Dim ilAdd As Integer
    Dim ilDay As Integer
    Dim slDay As String
    Dim ilRdf As Integer
    Dim ilTest As Integer
    Dim llTstDate As Long
    Dim llRCDate As Long
    Dim ilRCIndex As Integer
    'ReDim tmRCDP(1 To 1) As RCDP
    ReDim tmRCDP(0 To 0) As RCDP
    lbcDPSort.Clear
    If imVehSelectedIndex < LBound(tmUserVehicle) Then
        Exit Sub
    End If
    ''1/2/99- Remove this code as disallowing Daily/Weekly Toggle- later if requiring this code
    ''speed it update by only looking at Rdf or only build once vehicle selected
    'Exit Sub
    slNameCode = tmUserVehicle(imVehSelectedIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
    ilRet = gParseItem(slNameCode, 1, "\", slCode)
    ilRet = gParseItem(slCode, 3, "|", slCode)
    slVehName = Trim$(slCode)
    'slDate = Format$(gNow(), "m/d/yy")
    'llDate = gDateValue(slDate)
    If imDW = 0 Then
        slDate = edcLog1Dt.Text
    Else
        'slDate = edcDate.Text
        If (tmVef.sType <> "G") Or (imDW = 1) Then
            mGetEdcDate 0
            slDate = smEdcDate
        Else
            slDate = mGetAvGameDate()
        End If
    End If
    If Trim$(slDate) = "" Then
        Exit Sub
    End If
    ilRet = gObtainRcfRifRdf()
    llRCDate = -1
    llDate = gDateValue(slDate)
    For ilLoop = LBound(tgMRcf) To UBound(tgMRcf) - 1 Step 1
        gUnpackDateLong tgMRcf(ilLoop).iStartDate(0), tgMRcf(ilLoop).iStartDate(1), llTstDate
        If (llTstDate <= llDate) And (tgMRcf(ilLoop).iVefCode = imVehCode) Then
            If (llRCDate = -1) Or (llTstDate > llRCDate) Then
                ilRCIndex = ilLoop
                llRCDate = llTstDate
            End If
        End If
    Next ilLoop
    If llRCDate = -1 Then
        For ilLoop = LBound(tgMRcf) To UBound(tgMRcf) - 1 Step 1
            gUnpackDateLong tgMRcf(ilLoop).iStartDate(0), tgMRcf(ilLoop).iStartDate(1), llTstDate
            If (llTstDate <= llDate) And (tgMRcf(ilLoop).iVefCode = 0) Then
                If (llRCDate = -1) Or (llTstDate > llRCDate) Then
                    ilRCIndex = ilLoop
                    llRCDate = llTstDate
                End If
            End If
        Next ilLoop
    End If
    If llRCDate = -1 Then
        Exit Sub
    End If
    ''slDate = gObtainEndStd(slDate)
    ''gObtainMonthYear 0, slDate, ilMonth, ilYear
    ''ilRet = gPopRateCardBox(Spots, llDate, lbcRateCard, lbcRateCardCode, -1)
    ''ilRet = gPopRateCardBox(Spots, llDate, lbcRateCard, tmRateCardCode(), smRateCardCodeTag, -1)
    ''Get all rate cards as spot could be from a old rate card
    'ilRet = gPopRateCardBox(Spots, 0, lbcRateCard, tmRateCardCode(), smRateCardCodeTag, -1)
    'For ilPass = 0 To 1 Step 1
    '    For ilLoop = 0 To UBound(tmRateCardCode) - 1 Step 1 'lbcRateCardCode.ListCount - 1 Step 1  'To 0 Step -1
    '        slNameCode = tmRateCardCode(ilLoop).sKey   'lbcRateCardCode.List(ilLoop)   'Date\RateCard Name/Vehicle Name\Rate card code
    '        ilRet = gParseItem(slNameCode, 2, "\", slCode)
    '        ilRet = gParseItem(slCode, 2, "/", slTestName)
    '        'Check if any rate card defined for the vehicle (pass 0)- if so, use it
    '        'If no rate card defined for vehicle, use the first rate card that contains the vehicle and has a daypart defined
    '        If (ilPass = 1) Or ((ilPass = 0) And (StrComp(Trim$(slTestName), slVehName, 1) = 0)) Then
    '            slNameCode = tmRateCardCode(ilLoop).sKey   'lbcRateCardCode.List(ilLoop)
    '            ilRet = gParseItem(slNameCode, 3, "\", slCode)
    '            slCode = Trim$(slCode)
    '            ilRcfCode = CInt(slCode)
                 ilRcfCode = tgMRcf(ilRCIndex).iCode
                'gRCRead Spots, ilRcfCode, tmRcf, tgMRif(), tgMRdf()
                For llIndex = LBound(tgMRif) To UBound(tgMRif) - 1 Step 1
                    If (tgMRif(llIndex).iVefCode = imVehCode) And (tgMRif(llIndex).iRcfCode = ilRcfCode) Then
                        'For ilRdf = LBound(tgMRdf) To UBound(tgMRdf) - 1 Step 1
                        '    If (tgMRif(llIndex).iRdfcode = tgMRdf(ilRdf).iCode) And (tgMRdf(ilRdf).sBase = "Y") Then
                            ilRdf = gBinarySearchRdf(tgMRif(llIndex).iRdfCode)
                            If ilRdf <> -1 Then
                                If tgMRdf(ilRdf).sBase = "Y" Then
                                    'Add to table
                                    ilFound = False
                                    For ilTest = LBound(tgMRdf) To ilRdf - 1 Step 1
                                        If (tgMRif(llIndex).iRdfCode = tgMRdf(ilTest).iCode) And (tgMRdf(ilTest).sBase = "Y") Then
                                            ilFound = True
                                            Exit For
                                        End If
                                    Next ilTest
                                    If Not ilFound Then
                                        For ilRdfIndex = LBound(tgMRdf(ilRdf).iStartTime, 2) To UBound(tgMRdf(ilRdf).iStartTime, 2) Step 1
                                            If (tgMRdf(ilRdf).iStartTime(0, ilRdfIndex) <> 1) Or (tgMRdf(ilRdf).iStartTime(1, ilRdfIndex) <> 0) Then
                                                gUnpackTime tgMRdf(ilRdf).iStartTime(0, ilRdfIndex), tgMRdf(ilRdf).iStartTime(1, ilRdfIndex), "A", "1", slTime
                                                llStTime = CLng(gTimeToCurrency(slTime, False))
                                                gUnpackTime tgMRdf(ilRdf).iEndTime(0, ilRdfIndex), tgMRdf(ilRdf).iEndTime(1, ilRdfIndex), "A", "1", slTime
                                                llEdTime = CLng(gTimeToCurrency(slTime, True))
                                                ilAdd = True
                                                For ilDP = LBound(tmRCDP) To UBound(tmRCDP) - 1 Step 1
                                                    If (llStTime = tmRCDP(ilDP).lStartTime) And (llEdTime = tmRCDP(ilDP).lEndTime) Then
                                                        ilAdd = False
                                                        For ilDay = 1 To 7 Step 1
                                                            If tgMRdf(ilRdf).sWkDays(ilRdfIndex, ilDay - 1) = "Y" Then
                                                                tmRCDP(ilDP).iDay(ilDay - 1) = True
                                                            End If
                                                        Next ilDay
                                                        Exit For
                                                    End If
                                                Next ilDP
                                                If ilAdd Then
                                                    ilFound = True
                                                    ilDP = UBound(tmRCDP)
                                                    tmRCDP(ilDP).lStartTime = llStTime
                                                    tmRCDP(ilDP).lEndTime = llEdTime
                                                    For ilDay = 1 To 7 Step 1
                                                        If tgMRdf(ilRdf).sWkDays(ilRdfIndex, ilDay - 1) = "Y" Then
                                                            tmRCDP(ilDP).iDay(ilDay - 1) = True
                                                        Else
                                                            tmRCDP(ilDP).iDay(ilDay - 1) = False
                                                        End If
                                                    Next ilDay
                                                    ilDP = ilDP + 1
                                                    'ReDim Preserve tmRCDP(1 To ilDP) As RCDP
                                                    ReDim Preserve tmRCDP(0 To ilDP) As RCDP
                                                End If
                                            End If
                                        Next ilRdfIndex
                                    End If
                                End If
                            End If
                        'Next ilRdf
                    End If
                Next llIndex
                'If ilFound Then
                    'Resort (time, day)
                    For ilDP = LBound(tmRCDP) To UBound(tmRCDP) - 1 Step 1
                        slTime = Trim$(str$(tmRCDP(ilDP).lStartTime))
                        Do While Len(slTime) < 6
                            slTime = "0" & slTime
                        Loop
                        slDay = ""
                        'For ilDay = 1 To 7 Step 1
                        For ilDay = 0 To 6 Step 1
                            If tmRCDP(ilDP).iDay(ilDay) Then
                                If ilDay <= 5 Then
                                    slDay = "0"
                                ElseIf ilDay = 6 Then
                                    slDay = "6"
                                Else
                                    slDay = "7"
                                End If
                                Exit For
                            End If
                        Next ilDay
                        lbcDPSort.AddItem slTime & slDay & "\" & Trim$(str$(ilDP))
                    Next ilDP
                    Exit Sub
                'End If
    '        End If
    '    Next ilLoop
    'Next ilPass
    'If imAvailTm = 1 Then
    '    imAvailTm = 0
    '    pbcAvailTm_Paint
    'End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mObtainSpotInfo                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Obtain spot infomation to be   *
'*                      shown in the information box   *
'*                                                     *
'*******************************************************
Private Sub mObtainSpotInfo(llChfCode As Long, ilLineNo As Integer, llFsfCode As Long, slSpotDate As String, tlInfoCtrls() As FIELDAREA)
'
'    tmSdf(I)- test sPriceType
'
    Dim ilRet As Integer
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slStartTime As String
    Dim slEndTime As String
    Dim slNoSpots As String
    Dim slStr As String
    Dim ilDay As Integer
    Dim ilLoop As Integer
    Dim ilSpotsPerWk As Integer
    Dim slStart As String
    Dim slEnd As String
    Dim slMultiTimes As String
    Dim slStrTime As String
    Dim ilVef1 As Integer
    Dim ilVef2 As Integer
    Dim slPkVehicle As String
    Dim ilLine As Integer
    Dim ilDnfCode As Integer
    Dim ilMnfDemo As Integer
    Dim ilMnfSocEco As Integer
    Dim llOvStartTime As Long
    Dim llOvEndTime As Long
    Dim llFSDate As Long
    Dim llFEDate As Long
    Dim ilVef As Integer
    Dim llAvgAud As Long
    ReDim ilInputDay(0 To 6) As Integer
    Dim llSpotDate As Long
    Dim llPopEst As Long
    Dim ilGameNo As Integer
    Dim ilAudFromSource As Integer
    Dim llAudFromCode As Long

    Screen.MousePointer = vbHourglass
    imIgnoreDone = True
    If imNoSpotInfo = 0 Then
        imNoSpotInfo = 1
        lmMGCntrCode = llChfCode
        lmMGFeedCode = llFsfCode
        lmClfCode0 = 0
        lmCntrNoSpotInfo(0) = 0
    ElseIf imNoSpotInfo = 1 Then
        imNoSpotInfo = 2
        lmClfCode1 = 0
        lmCntrNoSpotInfo(1) = 0
    Else
        imNoSpotInfo = 2
        lmClfCode1 = 0
    End If
    lbcPackageInfo(1).Visible = False
    lbcPackageInfo(0).Visible = False
    plcCalendar.Visible = False
    lbcGameList.Visible = False
    DoEvents
    If (llChfCode > 0) And (ilLineNo > 0) Or (llFsfCode > 0) Then
        ilGameNo = tmSdf.iGameNo
        If (tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O") Then
            tmSmfSrchKey2.lCode = tmSdf.lCode
            ilRet = btrGetEqual(hmSmf, tmSmfA, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                gUnpackDate tmSmfA.iMissedDate(0), tmSmfA.iMissedDate(1), slStr
                llSpotDate = gDateValue(slStr)
                ilGameNo = tmSmfA.iGameNo
                ilRet = mReadChfClfRdfCffRec(llChfCode, ilLineNo, llFsfCode, tmSmfA.iGameNo, slStr, slStartDate, slEndDate, slNoSpots, imNoSpotInfo - 1, tmSmfA.iGameNo)
            Else
                llSpotDate = gDateValue(slSpotDate)
                ilRet = mReadChfClfRdfCffRec(llChfCode, ilLineNo, llFsfCode, tmSdf.iGameNo, slSpotDate, slStartDate, slEndDate, slNoSpots, imNoSpotInfo - 1, tmSdf.iGameNo)
            End If
        Else
            llSpotDate = gDateValue(slSpotDate)
            ilRet = mReadChfClfRdfCffRec(llChfCode, ilLineNo, llFsfCode, tmSdf.iGameNo, slSpotDate, slStartDate, slEndDate, slNoSpots, imNoSpotInfo - 1, tmSdf.iGameNo)
        End If
        If ilRet Then
            imMGSpotLen = tmClf.iLen
            If llFsfCode <= 0 Then
                'Contract number
                lmCntrNoSpotInfo(imNoSpotInfo - 1) = tmChf.lCntrNo
                slStr = Trim$(str$(tmChf.lCntrNo))
                'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(1)
                smSpotInfo(imNoSpotInfo - 1, 1) = slStr
                'Line number
                slStr = Trim$(str$(tmClf.iLine))
                'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(2)
                smSpotInfo(imNoSpotInfo - 1, 2) = slStr
                If imNoSpotInfo = 1 Then
                    lmClfCode0 = tmClf.lCode
                Else
                    lmClfCode1 = tmClf.lCode
                End If
            Else
                'Contract number
                slStr = Trim$(tmFsf.sRefID)
                'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(1)
                smSpotInfo(imNoSpotInfo - 1, 1) = slStr
                'Line number
                slStr = ""
                'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(2)
                smSpotInfo(imNoSpotInfo - 1, 2) = slStr
            End If
            'Advertiser, product
            tmAdfSrchKey.iCode = tmChf.iAdfCode
            ilRet = btrGetEqual(hmAdf, tmAdf, imAdfRecLen, tmAdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If (tmAdf.sBillAgyDir = "D") And (Trim$(tmAdf.sAddrID) <> "") Then
                slStr = Trim$(tmAdf.sName) & ", " & Trim$(tmAdf.sAddrID)
            Else
                slStr = Trim$(tmAdf.sName)
            End If
            If Trim$(tmChf.sProduct) <> "" Then
                slStr = slStr & "/" & Trim$(tmChf.sProduct)
            End If
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(3)
            smSpotInfo(imNoSpotInfo - 1, 3) = slStr
            If llFsfCode <= 0 Then
                'Salesperson
                tmSlfSrchKey.iCode = tmChf.iSlfCode(0)
                ilRet = btrGetEqual(hmSlf, tmSlf, imSlfRecLen, tmSlfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                slStr = Trim$(tmSlf.sLastName) & ", " & Trim$(tmSlf.sFirstName)
                If igSlfFirstNameFirst Then
                    slStr = Trim$(tmSlf.sFirstName) & " " & Trim$(tmSlf.sLastName)
                Else
                    slStr = Trim$(tmSlf.sLastName) & ", " & Trim$(tmSlf.sFirstName)
                End If
            Else
                slStr = ""
            End If
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(4)
            smSpotInfo(imNoSpotInfo - 1, 4) = slStr
            'Competitive
            If tmChf.iMnfComp(0) > 0 Then
                tmMnfSrchKey.iCode = tmChf.iMnfComp(0)
                ilRet = btrGetEqual(hmMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                slStr = Trim$(tmMnf.sName)
            Else
                slStr = ""
            End If
            'Competitive
            If tmChf.iMnfComp(1) > 0 Then
                tmMnfSrchKey.iCode = tmChf.iMnfComp(1)
                ilRet = btrGetEqual(hmMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                If slStr <> "" Then
                    slStr = slStr & ", " & Trim$(tmMnf.sName)
                Else
                    slStr = Trim$(tmMnf.sName)
                End If
            End If
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(5)
            smSpotInfo(imNoSpotInfo - 1, 5) = slStr
            'Dates
            If slStartDate <> "" Then
                slStr = Left$(slStartDate, Len(slStartDate) - 3) & "-" & Left$(slEndDate, Len(slEndDate) - 3)
            Else
                slStr = "Not Air Week"
            End If
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(6)
            smSpotInfo(imNoSpotInfo - 1, 6) = slStr
            ''Rate card program name or override times
            'If ((tmClf.iStartTime(0) <> 1) Or (tmClf.iStartTime(1) <> 0)) And (tgVpf(imVpfIndex).sGMedium <> "S") Then
            '    gUnpackTime tmClf.iStartTime(0), tmClf.iStartTime(1), "A", "1", slStartTime
            '    gUnpackTime tmClf.iEndTime(0), tmClf.iEndTime(1), "A", "1", slEndTime
            '    slStr = slStartTime & "-" & slEndTime
            'Else
            '    slStr = Trim$(tmLnRdf.sName)
            '    'Add times
            '    slStrTime = ""
            '    slMultiTimes = ""
            '    For ilLoop = LBound(tmLnRdf.iStartTime, 2) To UBound(tmLnRdf.iStartTime, 2) Step 1 'Row
            '        If (tmLnRdf.iStartTime(0, ilLoop) <> 1) Or (tmLnRdf.iStartTime(1, ilLoop) <> 0) Then
            '            gUnpackTime tmLnRdf.iStartTime(0, ilLoop), tmLnRdf.iStartTime(1, ilLoop), "A", "1", slStart
            '            gUnpackTime tmLnRdf.iEndTime(0, ilLoop), tmLnRdf.iEndTime(1, ilLoop), "A", "1", slEnd
            '            If slStart <> "" Then
            '                slStrTime = slStart & "-" & slEnd
            '                If ilLoop < UBound(tmLnRdf.iStartTime, 2) Then
            '                    If (tmLnRdf.iStartTime(0, ilLoop + 1) <> 1) Or (tmLnRdf.iStartTime(1, ilLoop + 1) <> 0) Then
            '                        slMultiTimes = "+"
            '                    End If
            '                End If
            '            End If
            '            Exit For
            '        End If
            '    Next ilLoop
            '    slStr = slStr & " " & slStrTime & slMultiTimes
            'End If
            slStr = mGetLineDaypartInfo(True, False)
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(7)
            smSpotInfo(imNoSpotInfo - 1, 7) = slStr
            If tmCff(0).sDelete <> "Y" Then
                For ilDay = 0 To 6 Step 1
                    slStr = ""
                    'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(11 + ilDay)
                    smSpotInfo(imNoSpotInfo - 1, 11 + ilDay) = slStr
                Next ilDay
                'If (tmCff(0).iSpotsWk > 0) Or (tmCff(0).iXSpotsWk > 0) Then
                If (tmCff(0).sDyWk <> "D") Then
                    slStr = Trim$(str$(tmCff(0).iSpotsWk))
                    'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(8)
                    smSpotInfo(imNoSpotInfo - 1, 8) = slStr
                    For ilDay = 0 To 6 Step 1
                        If (tmCff(0).iDay(ilDay) > 0) Or (tmCff(0).sXDay(ilDay) = "1") Then
                            slStr = "Y"
                        Else
                            slStr = "N"
                        End If
                        'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(9 + ilDay)
                        smSpotInfo(imNoSpotInfo - 1, 9 + ilDay) = slStr
                    Next ilDay
                Else
                    ilSpotsPerWk = 0
                    If ilGameNo <= 0 Then
                        For ilDay = 0 To 6 Step 1
                            ilSpotsPerWk = ilSpotsPerWk + tmCff(0).iDay(ilDay)
                            slStr = Trim$(str$(tmCff(0).iDay(ilDay)))
                            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(9 + ilDay)
                            smSpotInfo(imNoSpotInfo - 1, 9 + ilDay) = slStr
                        Next ilDay
                    Else
                        For ilDay = 0 To 6 Step 1
                            ilSpotsPerWk = ilSpotsPerWk + tmCff(0).iDay(ilDay)
                        Next ilDay
                        If tmClf.sSportsByWeek = "W" Then
                            slStr = " #" & str$(ilGameNo) & " by Week"
                        Else
                            slStr = " #" & str$(ilGameNo) & " by Event"
                        End If
                        ilDay = 1
                        ''gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(9 + ilDay)
                        'tlInfoCtrls(9 + ilDay).sShow = slStr
                        smSpotInfo(imNoSpotInfo - 1, 9 + ilDay) = slStr
                    End If
                    slStr = Trim$(str$(ilSpotsPerWk))
                    'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(8)
                    smSpotInfo(imNoSpotInfo - 1, 8) = slStr
                End If
            Else
                For ilLoop = 0 To 7 Step 1
                    slStr = ""
                    'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(8 + ilLoop)
                    smSpotInfo(imNoSpotInfo - 1, 8 + ilLoop) = slStr
                Next ilLoop
            End If
            'Package
            ReDim tmPkClf(0 To 0) As CLFLIST
            lbcPackageInfo(imNoSpotInfo - 1).Clear
            If (tmClf.sType = "H") Then
                ilRet = gObtainChfClf(hmCHF, hmClf, llChfCode, False, tmChf, tmPkClf())
                'Find package vehicle, then hidden line vehicles
                For ilLoop = 0 To UBound(tmPkClf) - 1 Step 1
                    If tmPkClf(ilLoop).ClfRec.iLine = tmClf.iPkLineNo Then
                        'For ilVef1 = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                        '    If tmPkClf(ilLoop).ClfRec.iVefCode = tgMVef(ilVef1).iCode Then
                            ilVef1 = gBinarySearchVef(tmPkClf(ilLoop).ClfRec.iVefCode)
                            If ilVef1 <> -1 Then
                                slPkVehicle = Trim$(tgMVef(ilVef1).sName)
                                'Build other package lines
                                For ilLine = 0 To UBound(tmPkClf) - 1 Step 1
                                    If (tmPkClf(ilLine).ClfRec.iPkLineNo = tmClf.iPkLineNo) And (tmPkClf(ilLine).ClfRec.iLine <> tmClf.iLine) Then
                                        'For ilVef2 = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                        '    If tmPkClf(ilLine).ClfRec.iVefCode = tgMVef(ilVef2).iCode Then
                                            ilVef2 = gBinarySearchVef(tmPkClf(ilLine).ClfRec.iVefCode)
                                            If ilVef2 <> -1 Then
                                                gFindMatch Trim$(tgMVef(ilVef2).sName), 0, lbcPackageInfo(imNoSpotInfo - 1)
                                                If (gLastFound(lbcPackageInfo(imNoSpotInfo - 1)) < 0) And (slPkVehicle <> Trim$(tgMVef(ilVef2).sName)) Then
                                                    lbcPackageInfo(imNoSpotInfo - 1).AddItem Trim$(tgMVef(ilVef2).sName)
                                                End If
                                        '        Exit For
                                            End If
                                        'Next ilVef2
                                    End If
                                Next ilLine
                                lbcPackageInfo(imNoSpotInfo - 1).AddItem slPkVehicle, 0
                                lbcPackageInfo(imNoSpotInfo - 1).height = gListBoxHeight(lbcPackageInfo(imNoSpotInfo - 1).ListCount, 6)
                        '        Exit For
                            End If
                        'Next ilVef1
                        Exit For
                    End If
                Next ilLoop
                slStr = "Hidden"
            ElseIf (tmClf.sType = "O") Or (tmClf.sType = "A") Or (tmClf.sType = "E") Then
                slStr = "Package"
                ilRet = gObtainChfClf(hmCHF, hmClf, llChfCode, False, tmChf, tmPkClf())
                'Find package vehicle, then hidden line vehicles
                For ilLoop = 0 To UBound(tmPkClf) - 1 Step 1
                    If tmPkClf(ilLoop).ClfRec.iLine = tmClf.iLine Then
                        'For ilVef1 = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                        '    If tmPkClf(ilLoop).ClfRec.iVefCode = tgMVef(ilVef1).iCode Then
                            ilVef1 = gBinarySearchVef(tmPkClf(ilLoop).ClfRec.iVefCode)
                            If ilVef1 <> -1 Then
                                slPkVehicle = Trim$(tgMVef(ilVef1).sName)
                                'Build other package lines
                                For ilLine = 0 To UBound(tmPkClf) - 1 Step 1
                                    If (tmPkClf(ilLine).ClfRec.iPkLineNo = tmClf.iLine) And (tmPkClf(ilLine).ClfRec.iLine <> tmClf.iLine) Then
                                        'For ilVef2 = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                        '    If tmPkClf(ilLine).ClfRec.iVefCode = tgMVef(ilVef2).iCode Then
                                            ilVef2 = gBinarySearchVef(tmPkClf(ilLine).ClfRec.iVefCode)
                                            If ilVef2 <> -1 Then
                                                gFindMatch Trim$(tgMVef(ilVef2).sName), 0, lbcPackageInfo(imNoSpotInfo - 1)
                                                If (gLastFound(lbcPackageInfo(imNoSpotInfo - 1)) < 0) And (slPkVehicle <> Trim$(tgMVef(ilVef2).sName)) Then
                                                    lbcPackageInfo(imNoSpotInfo - 1).AddItem Trim$(tgMVef(ilVef2).sName)
                                                End If
                                        '        Exit For
                                            End If
                                        'Next ilVef2
                                    End If
                                Next ilLine
                                lbcPackageInfo(imNoSpotInfo - 1).AddItem slPkVehicle, 0
                                lbcPackageInfo(imNoSpotInfo - 1).height = gListBoxHeight(lbcPackageInfo(imNoSpotInfo - 1).ListCount, 6)
                        '        Exit For
                            End If
                        'Next ilVef1
                        Exit For
                    End If
                Next ilLoop
            Else
                slStr = ""
            End If
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(16)
            smSpotInfo(imNoSpotInfo - 1, 16) = slStr
            'Demo
            slStr = ""
            If (tgSpf.sGUsePropSys = "Y") And (llFsfCode <= 0) Then
                For ilLoop = 0 To 3 Step 1
                    If tmChf.iMnfDemo(ilLoop) > 0 Then
                        ilMnfSocEco = 0
                        ilMnfDemo = tmChf.iMnfDemo(ilLoop)
                        tmMnfSrchKey.iCode = tmChf.iMnfDemo(ilLoop)
                        ilRet = btrGetEqual(hmMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                        If slStr <> "" Then
                            slStr = slStr & " " & Trim$(tmMnf.sName)
                        Else
                            slStr = Trim$(tmMnf.sName)
                        End If
                        If tmCff(0).sDelete <> "Y" Then
                            ilDnfCode = tmClf.iDnfCode
                            If ilDnfCode <= 0 Then  'Get from vehicle
                                'For ilVef = LBound(tgMVef) To UBound(tgMVef) - 1 Step 1
                                '    If tgMVef(ilVef).iCode = tmClf.iVefCode Then
                                    ilVef = gBinarySearchVef(tmClf.iVefCode)
                                    If ilVef <> -1 Then
                                        ilDnfCode = tgMVef(ilVef).iDnfCode
                                '        Exit For
                                    End If
                                'Next ilVef
                                'tmVefSrchKey.iCode = tmSdfExt(ilIndex).iVefCode
                                'ilRet = btrGetEqual(hmVef, tmVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                'ilDnfCode = tmVef.iDnfCode
                            End If
                            If ((tmClf.iStartTime(0) <> 1) Or (tmClf.iStartTime(1) <> 0)) And ((tmClf.iEndTime(0) <> 1) Or (tmClf.iEndTime(1) <> 0)) And (tgVpf(imVpfIndex).sGMedium <> "S") Then
                                gUnpackTimeLong tmClf.iStartTime(0), tmClf.iStartTime(1), False, llOvStartTime
                                gUnpackTimeLong tmClf.iEndTime(0), tmClf.iEndTime(1), True, llOvEndTime
                            Else
                                llOvStartTime = 0
                                llOvEndTime = 0
                            End If
                            gUnpackDateLong tmCff(0).iStartDate(0), tmCff(0).iStartDate(1), llFSDate
                            gUnpackDateLong tmCff(0).iEndDate(0), tmCff(0).iEndDate(1), llFEDate
                            For ilDay = 0 To 6 Step 1
                                If tmCff(0).iDay(ilDay) > 0 Then
                                    ilInputDay(ilDay) = True
                                Else
                                    ilInputDay(ilDay) = False
                                End If
                            Next ilDay
                            ilRet = gGetDemoAvgAud(hmDrf, hmMnf, hmDpf, hmDef, hmRaf, ilDnfCode, tmClf.iVefCode, ilMnfSocEco, ilMnfDemo, llSpotDate, llSpotDate, tmClf.iRdfCode, llOvStartTime, llOvEndTime, ilInputDay(), tmClf.sType, tmClf.lRafCode, llAvgAud, llPopEst, ilAudFromSource, llAudFromCode)
                        Else
                            llAvgAud = 0
                        End If
                        slStr = slStr & str$(llAvgAud)
                    End If
                Next ilLoop
            End If
            'Select Case tmChf.sCppCpm
            '    Case "M"
            '        slStr = "" '"CPM: "
            '        For ilLoop = 0 To 3 Step 1
            '            If tmChf.iMnfDemo(ilLoop) > 0 Then
            '                'slStr = slStr & Trim$(tmChf.sDemo(ilLoop))
            '                tmMnfSrchKey.iCode = tmChf.iMnfDemo(ilLoop)
            '                ilRet = btrGetEqual(hmMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            '                slStr = slStr & Trim$(tmMnf.sName)
            '                'gPDNToStr tmChf.sTarget(ilLoop), 2, slPrice
            '                'slPrice = Trim$(Str$(tmChf.lTarget(ilLoop)))
            '                slPrice = gLongToStrDec(tmChf.lTarget(ilLoop), 2)
            '                slStr = slStr & " " & slPrice
            '            End If
            '        Next ilLoop
            '    Case "P"
            '        slStr = "" '"CPP: "
            '        For ilLoop = 0 To 3 Step 1
            '            If tmChf.iMnfDemo(ilLoop) > 0 Then
            '                'slStr = slStr & Trim$(tmChf.sDemo(ilLoop))
            '                tmMnfSrchKey.iCode = tmChf.iMnfDemo(ilLoop)
            '                ilRet = btrGetEqual(hmMnf, tmMnf, imMnfRecLen, tmMnfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            '                slStr = slStr & Trim$(tmMnf.sName)
            '                'gPDNToStr tmChf.sTarget(ilLoop), 2, slPrice
            '                slPrice = gLongToStrDec(tmChf.lTarget(ilLoop), 2)
            '                slStr = slStr & " " & slPrice
            '            End If
            '        Next ilLoop
            'End Select
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(17)
            smSpotInfo(imNoSpotInfo - 1, 17) = slStr
            'Price
            slStr = ""
            If (tmCff(0).sDelete <> "Y") And (llFsfCode <= 0) Then
                If (tmSdf.sSpotType = "O") Or (tmSdf.sSpotType = "C") Or (tmSdf.sSpotType = "E") Then
                    If (tmSdf.sSpotType = "O") Then
                        slStr = "Open BB"
                    ElseIf (tmSdf.sSpotType = "C") Then
                        slStr = "Close BB"
                    Else
                        slStr = "Any BB"
                    End If
                ElseIf tmSdf.sSpotType = "X" Then
                    'If tmSdf.sPriceType <> "N" Then
                    If tmSdf.sPriceType = "+" Then
                        slStr = "+ Fill"   '"> Fill"
                    ElseIf tmSdf.sPriceType = "-" Then
                        slStr = "- Fill"   '"< Fill"
                    Else
                        If tmAdf.sBonusOnInv <> "N" Then
                            slStr = "+ Fill"
                        Else
                            slStr = "- Fill"
                        End If
                    End If
                Else
                    Select Case tmCff(0).sPriceType
                        Case "T"    'True
                            If (tmSdf.sPriceType = "N") Or (tmSdf.sPriceType = "P") Then
                                slStr = "N/C"
                            Else
                                'gPDNToStr tmCff(0).sActPrice, 2, slStr
                                slStr = gLongToStrDec(tmCff(0).lActPrice, 2)
                                gFormatStr slStr, FMTDOLLARSIGN + FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                            End If
                        Case "N"    'No Charge
                            slStr = "N/C"
                        Case "M"    'MG Line
                            slStr = "MG"
                        Case "B"    'Bonus
                            slStr = "Bonus"
                        Case "S"    'Spinoff
                            slStr = "Spinoff"
                        Case "P"    'Package
                            'gPDNToStr tmClf.sActPrice, 2, slStr
                            slStr = ""
                            gFormatStr slStr, FMTDOLLARSIGN + FMTLEAVEBLANK + FMTCOMMA, 2, slStr
                        Case "R"    'Recapturable
                            slStr = "Recapturable"
                        Case "A"    'ADU
                            slStr = "ADU"
                    End Select
                End If
            Else
                If tmCff(0).sDelete = "Y" Then
                    If (tmSdf.sSpotType = "O") Or (tmSdf.sSpotType = "C") Or (tmSdf.sSpotType = "E") Then
                        If (tmSdf.sSpotType = "O") Then
                            slStr = "Open BB"
                        ElseIf (tmSdf.sSpotType = "C") Then
                            slStr = "Close BB"
                        Else
                            slStr = "Any BB"
                        End If
                    ElseIf tmSdf.sSpotType = "X" Then
                        'If tmSdf.sPriceType <> "N" Then
                        If tmSdf.sPriceType = "+" Then
                            slStr = "+ Fill"   '"> Fill"
                        ElseIf tmSdf.sPriceType = "-" Then
                            slStr = "- Fill"   '"< Fill"
                        Else
                            If tmAdf.sBonusOnInv <> "N" Then
                                slStr = "+ Fill"
                            Else
                                slStr = "- Fill"
                            End If
                        End If
                    Else
                        slStr = ""
                    End If
                Else
                    slStr = "Feed"
                End If
            End If
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(18)
            smSpotInfo(imNoSpotInfo - 1, 18) = slStr
            If (imHighlight = 3) And (tmClf.lRafCode > 0) Then
                gBuildStationsFromRAF hmRaf, hmSef, tmClf.lRafCode, smHLInclExcl, tmStationsHL(), True
            Else
                smHLInclExcl = ""
                'ReDim tmStationsHL(1 To 1) As INTKEY0
                ReDim tmStationsHL(0 To 0) As INTKEY0
            End If
        Else
            For ilLoop = imLBSizeCtrls To UBound(tlInfoCtrls) Step 1
                slStr = ""
                'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(ilLoop)
                smSpotInfo(imNoSpotInfo - 1, ilLoop) = slStr
            Next ilLoop
        End If
    Else
        smHLInclExcl = ""
        'ReDim tmStationsHL(1 To 1) As INTKEY0
        ReDim tmStationsHL(0 To 0) As INTKEY0
        For ilLoop = imLBSizeCtrls To UBound(tlInfoCtrls) Step 1
            slStr = ""
            'gSetShow pbcSpotInfo(imNoSpotInfo - 1), slStr, tlInfoCtrls(ilLoop)
            smSpotInfo(imNoSpotInfo - 1, ilLoop) = slStr
        Next ilLoop
    End If
    pbcSpotInfo(imNoSpotInfo - 1).Cls
    If (llChfCode > 0) And (ilLineNo > 0) Or (llFsfCode > 0) Then
        'For ilLoop = 1 To 18 Step 1
        '    smSpotInfo(imNoSpotInfo - 1, ilLoop) = tlInfoCtrls(ilLoop).sShow
        'Next ilLoop
        If imNoSpotInfo = 1 Then
            pbcSpotInfo(0).Left = 30
            pbcSpotInfo(0).Top = -15 '0  '30
            lbcPackageInfo(0).Move pbcSpotInfo(0).Left, pbcSpotInfo(0).Top + pbcSpotInfo(0).height
        Else
            pbcSpotInfo(1).Left = 4590
            pbcSpotInfo(1).Top = -15  '30
            lbcPackageInfo(1).Move pbcSpotInfo(1).Left, pbcSpotInfo(1).Top + pbcSpotInfo(1).height
        End If
        lbcPackageInfo(1).Visible = False
        lbcPackageInfo(0).Visible = False
        pbcSpotInfo(imNoSpotInfo - 1).Visible = True
        pbcSpotInfo_Paint imNoSpotInfo - 1
    Else
        pbcSpotInfo(1).Visible = False
        pbcSpotInfo(0).Visible = False
        lbcPackageInfo(1).Visible = False
        lbcPackageInfo(0).Visible = False
        plcCalendar.Visible = False
        lbcGameList.Visible = False
        imNoSpotInfo = 0
    End If
    mSetCommands
    imIgnoreDone = False
    Screen.MousePointer = vbDefault
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mOpenTwoHandles                 *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Open files that require updates*
'*                                                     *
'*******************************************************
Private Function mOpenTwoHandles(ilFirstOpen As Integer) As Integer
    Dim ilRet As Integer
    Dim ilNoHandles As Integer
    If Not ilFirstOpen Then
        If (Len(sgMDBPath) <> 0) Or (Len(sgSDBPath) <> 0) Then
            btrDestroy hmVef
            btrDestroy hmSdf
            btrDestroy hmSsf
            btrDestroy hmSmf
            btrDestroy hmStf
            btrDestroy hmLcf
        Else
            mOpenTwoHandles = True
            Exit Function
        End If
    End If
    ilRet = csiHandleValue(0, 6)    'Obtain DuoSystemDown status (0=No; 1=Yes)
    If ilRet = 1 Then
        imOpenOk = False
        ilNoHandles = ONEHANDLE
    Else
        imOpenOk = True
        ilNoHandles = TWOHANDLES
    End If
    hmVef = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmVef, "", sgDBPath & "Vef.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    imVefRecLen = Len(tmVef)  'Get and save VEF record length
    hmSdf = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmSdf, "", sgDBPath & "Sdf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    imSdfRecLen = Len(tmSdf)  'Get and save SDF record length
    hmSsf = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmSsf, "", sgDBPath & "Ssf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    ' Spot MG File
    hmSmf = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmSmf, "", sgDBPath & "Smf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    imSmfRecLen = Len(tmSmfA)  'Get and save SMF record length
    'Spot tracking
    hmStf = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmStf, "", sgDBPath & "Stf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    imStfRecLen = Len(tmStf)  'Get and save STF record length
    'Spot tracking
    hmMtf = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmMtf, "", sgDBPath & "Mtf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    imMtfRecLen = Len(tmMtf)  'Get and save MTF record length
    lgMtfNoRecs = btrRecords(hmMtf)
    'Log calendar file
    hmLcf = CBtrvTable(ilNoHandles)
    ilRet = btrOpen(hmLcf, "", sgDBPath & "Lcf.Btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mOpenTwoHandlesErr
    gBtrvErrorMsg ilRet, "Open error", Spots
    On Error GoTo 0
    imLcfRecLen = Len(tmLcf)  'Get and save ADF record length
    mOpenTwoHandles = True
    ilRet = csiHandleValue(0, 6)    'Obtain DuoSystemDown status (0=No; 1=Yes)
    If ilRet = 1 Then
        imOpenOk = False
    End If
    DoEvents
    Exit Function
mOpenTwoHandlesErr:
    imOpenOk = False
    If ilRet = 30000 Then
        ilNoHandles = ONEHANDLE
        Resume Next
    Else
        imTerminate = True
        On Error GoTo 0
        mOpenTwoHandles = False
        Exit Function
    End If
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintAdWorkArea                *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint advertiser spot screen   *
'*                                                     *
'*******************************************************
Private Sub mPaintAdWorkArea(tlSdfMd() As SDFMDEXT, tlCtrls As FIELDAREA)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilPos                                                                                 *
'******************************************************************************************

    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim ilPaintRow As Integer
    Dim llTop As Long
    Dim slMore As String
    Dim ilRet As Integer

    pbcAdWorkArea.BackColor = vbWhite
    llTop = tmWACtrls(1).fBoxY
    For ilLoop = 1 To vbcAdWorkArea.LargeChange + 1 Step 1
        pbcAdWorkArea.Line (tmWACtrls(1).fBoxX - 15, llTop - 15)-Step(tmWACtrls(1).fBoxW + 15, tmWACtrls(1).fBoxH + 15), BLUE, B
        llTop = llTop + tmWACtrls(1).fBoxH + 15
    Next ilLoop

    ilStartRow = vbcAdWorkArea.Value '(vbcAdWorkArea.LargeChange) * (vbcAdWorkArea.Value - 1) + 1
    If ilStartRow = 0 Then
        Exit Sub
    End If
    ilLoop = LBound(tlSdfMd)
    ilPaintRow = 1
    ilEndRow = vbcAdWorkArea.LargeChange + ilPaintRow
    Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlSdfMd))
        If ilLoop >= ilStartRow Then
            
            pbcAdWorkArea.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
            pbcAdWorkArea.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            If (ilLoop <> imDragRowNoSrce) Or (imDragSrce <> DRAGWORKAREA) Then
                If tlSdfMd(ilLoop).iSelected = 1 Then
                    pbcAdWorkArea.Line (pbcAdWorkArea.CurrentX, pbcAdWorkArea.CurrentY + 30)-Step(tlCtrls.fBoxW - 45, tlCtrls.fBoxH - 30), GRAY, BF
                End If
            End If
            
            pbcAdWorkArea.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
            pbcAdWorkArea.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            If lmSdfRecPosHighlight = tlSdfMd(ilLoop).lRecPos Then
                pbcAdWorkArea.FontUnderline = True
            End If
            slStr = RTrim$(tlSdfMd(ilLoop).sShow)
            'ilPos = InStr(1, tlSdfMd(ilLoop).sPrice, ".")
            'If ilPos > 1 Then
            '    slStr = " $" & Left$(tlSdfMd(ilLoop).sPrice, ilPos - 1) & " " & slStr
            'ElseIf ilPos = 1 Then
            '    slStr = " $0 " & slStr
            'Else
            '    slStr = " " & Trim$(Left$(tlSdfMd(ilLoop).sPrice, 5)) & " " & slStr
            'End If
            ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet <> BTRV_ERR_NONE Then
                slMore = mMoreInfo(0, tlSdfMd(ilLoop).sPrice, tlSdfMd(ilLoop).sNetRegionAbbr, tlSdfMd(ilLoop).sCITFlag, tlSdfMd(ilLoop).sCopyCIT, tlSdfMd(ilLoop).sPtType, tlSdfMd(ilLoop).lCopyCode, tlSdfMd(ilLoop).iRotNo, tlSdfMd(ilLoop).sLiveCopy)
            Else
                slMore = mMoreInfo(tmSdf.lCode, tlSdfMd(ilLoop).sPrice, tlSdfMd(ilLoop).sNetRegionAbbr, tlSdfMd(ilLoop).sCITFlag, tlSdfMd(ilLoop).sCopyCIT, tlSdfMd(ilLoop).sPtType, tlSdfMd(ilLoop).lCopyCode, tlSdfMd(ilLoop).iRotNo, tlSdfMd(ilLoop).sLiveCopy)
            End If
            If slMore <> "" Then
                slStr = " " & slMore & " " & slStr
            End If
            If (tlSdfMd(ilLoop).lchfcxfCode > 0) Or (tlSdfMd(ilLoop).lchfcxfInt > 0) Or (tlSdfMd(ilLoop).lClfCxfCode > 0) Then
                slStr = "*" & Trim$(slStr)
            End If
            gSetShow pbcAdWorkArea, slStr, tlCtrls
            pbcAdWorkArea.Print tlCtrls.sShow
            pbcAdWorkArea.FontUnderline = False
            If (ilLoop = imDragRowNoSrce) And (imDragSrce = DRAGWORKAREA) Then
                gInvertArea pbcAdWorkArea, CInt(tlCtrls.fBoxX) \ 15, CInt(tlCtrls.fBoxY + (imDragRowNoSrce - vbcAdWorkArea.Value) * (fgBoxGridH + 15)) \ 15, CInt(tlCtrls.fBoxW) \ 15, CInt(tlCtrls.fBoxH) \ 15
            End If
            ilPaintRow = ilPaintRow + 1
        End If
        ilLoop = ilLoop + 1
    Loop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintAvail                     *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint avail area on the time   *
'*                      screen                         *
'*                                                     *
'*******************************************************
Private Sub mPaintAvail(tlEvt() As EVTINFO, tlCtrls As FIELDAREA)
    Dim ilHour As Integer   'Hour index
    Dim llHourStart As Long
    Dim llHourEnd As Long
    Dim ilUnitInv As Integer
    Dim llSecInv As Long
    Dim ilUnitSold As Integer
    Dim llSecSold As Long
    Dim ilEvt As Integer
    Dim slStr As String
    Dim ilStHour As Integer
    Dim ilEdHour As Integer
    Dim ilCompConflict As Integer
    Dim llColor As Long
    llHourStart = 0
    llHourEnd = 3599
    ilUnitInv = 0
    llSecInv = 0
    ilUnitSold = 0
    llSecSold = 0
    llColor = pbcAvail.ForeColor
    'ilEvt = LBound(tlEvt)
    ilEvt = imLBEvt
    If imAvailTm = 1 Then   '0=Hourly; 1=Daypart
        'Daypart processed in pbcAvail_Paint
    Else
        ilStHour = vbcAvail.Value - 1
        ilEdHour = vbcAvail.Value + vbcAvail.LargeChange - 1
        llHourStart = 3600 * CLng(ilStHour)
        llHourEnd = llHourStart + 3599
        For ilHour = ilStHour To ilEdHour Step 1
            slStr = mGetAvailStat(tlEvt(), llHourStart, llHourEnd, ilCompConflict)
            If imShowWhere Then
                If ilCompConflict Then
                    pbcAvail.ForeColor = RED
                Else
                    pbcAvail.ForeColor = DARKGREEN
                End If
            Else
                pbcAvail.ForeColor = llColor
            End If
            pbcAvail.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
            pbcAvail.CurrentY = tlCtrls.fBoxY + (ilHour - ilStHour + 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            gSetShow pbcAvail, slStr, tlCtrls
            pbcAvail.Print tlCtrls.sShow
            llHourStart = llHourStart + 3600
            llHourEnd = llHourStart + 3599
            ilUnitInv = 0
            llSecInv = 0
            ilUnitSold = 0
            llSecSold = 0
        Next ilHour
    End If
    pbcAvail.ForeColor = llColor
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintCalendar                  *
'*                                                     *
'*             Created:8/28/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Paint standard or regular       *
'*                     calendar                        *
'*                     Taken from gPaintCalendar       *
'*                                                     *
'*******************************************************
Private Sub mPaintCalendar(ilMonth As Integer, ilYear As Integer, ilType As Integer, pbcCtrl As PictureBox, tlCtrls() As FIELDAREA, llStartDate As Long, llEndDate As Long)
'
'   mPaintCalendar ilMonth, ilYear, ilType, pbcCtrl, tmCtrl, llStart, llEnd
'   Where:
'       ilMonth (I) - Calendar month to be painted (1 thru 12)
'       ilYear (I) - Calendar year to be painted (101 thru 9998) (100 & 9999 not                        '       allowed because of standard)
'       ilType (I)- 0=Paint standard month; 1= Paint regular month; 2=Julian +;
'                   3=Julian -; 4=Paint corporate
'       pbcCtrl (I)- Picture area control to be painted
'       tlCtrl() (I)- Array of control information about paint area
'       llStart (O)- Calendar start date
'       llEnd (O)- Calendar end date
'
    Dim llDate As Long
    Dim llStdDate As Long
    Dim slDate As String
    Dim ilWkDay As Integer
    Dim slDay As String
    Dim slJulian As String
    Dim ilRowNo As Integer
    Dim llLastDate As Long
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim flBoxInsetX As Single
    Dim flBoxInsetY As Single
    Dim ilAdjYear As Integer
    Dim ilValidDay As Integer
    Dim ilValidDate As Integer
    Dim ilCff As Integer
    Dim llCffStartDate As Long
    Dim llCffEndDate As Long
    Dim ilDate0 As Integer
    Dim ilDate1 As Integer
    Dim ilRet As Integer
    If (ilYear < 101) Or (ilYear > 9998) Then
        pbcCtrl.Cls
        Exit Sub
    End If
    If (ilMonth < 1) Or (ilMonth > 12) Then
        pbcCtrl.Cls
        Exit Sub
    End If
    If ilType = 0 Then  'Standard month
        slDate = Trim$(str$(ilMonth)) & "/1/" & Trim$(str$(ilYear))
        If ilYear < 100 Then
            slDate = gAdjYear(slDate)
            ilAdjYear = Year(slDate)
            llDate = gDateValue(slDate)
            llStdDate = llDate
        Else
            ilAdjYear = Year(slDate)
            llDate = DateValue(slDate)
            llStdDate = llDate
        End If
        Do While gWeekDayLong(llDate) <> 0   '0=monday
            llDate = llDate - 1
        Loop
        Do
            If gWeekDayLong(llStdDate) = 6 Then  'Save last sunday
                llLastDate = llStdDate
            End If
            llStdDate = llStdDate + 1
        Loop Until Month(llStdDate) <> ilMonth
'    ElseIf ilType = 4 Then  'Corporate
'        slDate = "1/1/" & Trim$(Str$(ilYear))
'        If ilYear < 100 Then
'            slDate = gAdjYear(slDate)
'            ilAdjYear = Year(slDate)
'            llDate = gDateValue(slDate)
'        Else
'            ilAdjYear = Year(slDate)
'            llDate = DateValue(slDate)
'        End If
'        If tgSpf.sRYEnd = "L" Then
'            Do While gWeekDayLong(llDate) <> 0   '0=monday
'                llDate = llDate - 1
'            Loop
'        Else
'            'Count the number of weeks from the first monday
'            llTempDate = llDate
'            Do While gWeekDayLong(llTempDate) <> 0   '0=monday
''                llTempDate = llTempDate - 1
'                llTempDate = llTempDate + 1
'            Loop
'        End If
'        ilIndex = 0
'        For ilLoop = 2 To ilMonth Step 1
'            If (ilLoop = 2) And (tgSpf.sRYEnd <> "L") Then
'                llDate = llTempDate + 7 * tgSpf.iRCorp(ilIndex)
'            Else
'                llDate = llDate + 7 * tgSpf.iRCorp(ilIndex)
'            End If
'            ilIndex = ilIndex + 1
'            If ilIndex > 2 Then
'                ilIndex = 0
'            End If
'        Next ilLoop
'        If ilMonth <> 12 Then
'            If (ilMonth = 1) And (tgSpf.sRYEnd <> "L") Then
'                llLastDate = llTempDate + 7 * tgSpf.iRCorp(ilIndex) - 1
'            Else
'                llLastDate = llDate + 7 * tgSpf.iRCorp(ilIndex) - 1
'            End If
'        Else
'            slLastDate = "1/1/" & Trim$(Str$(ilYear + 1))
'            If ilYear < 100 Then
'                slLastDate = gAdjYear(slLastDate)
'                llLastDate = gDateValue(slLastDate)
'            Else
'                llLastDate = DateValue(slLastDate)
'            End If
'            If tgSpf.sRYEnd = "L" Then
'                Do While gWeekDayLong(llLastDate) <> 0   '0=monday
'                    llLastDate = llLastDate - 1
'                Loop
'            End If
'            llLastDate = llLastDate - 1
'        End If
    Else
        slDate = Trim$(str$(ilMonth)) & "/1/" & Trim$(str$(ilYear))
        If ilYear < 100 Then
            slDate = gAdjYear(slDate)
            ilAdjYear = Year(slDate)
            llDate = gDateValue(slDate)
        Else
            ilAdjYear = Year(slDate)
            llDate = DateValue(slDate)
        End If
    End If
'    If gValidDate(slDate) = No Then
'        pbcCtrl.Cls
'        Exit Sub
'    End If
    If (ilMonth <> imCurCalMonth) Or (ilAdjYear <> imCurCalYear) Then
        pbcCtrl.Cls
        imCurCalMonth = ilMonth
        imCurCalYear = ilAdjYear
    End If
    ilRowNo = 0
    llStartDate = 0
    llEndDate = 0
    slFontName = pbcCtrl.FontName
    flFontSize = pbcCtrl.FontSize
    If (ilType <= 1) Or (ilType = 4) Then
        pbcCtrl.FontBold = True
        flBoxInsetX = fgBoxInsetX
        flBoxInsetY = -15
    Else
        pbcCtrl.FontBold = False
        pbcCtrl.FontSize = 7
        pbcCtrl.FontName = "Arial"
        pbcCtrl.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
        flBoxInsetX = 5
        flBoxInsetY = 5
    End If
    llColor = pbcCtrl.ForeColor
    Do
        ilWkDay = gWeekDayLong(llDate)
        If llStartDate = 0 Then
            llStartDate = llDate
        End If
        If imEnableSource = 0 Then
            ilValidDay = False
            'ilValidDate = True
            ilValidDate = False
            If (imL1OrL2 = 1) Or (imL1OrL2 = 2) Or (imL1OrL2 = 3) Or (imL1OrL2 = 4) Or (imL1OrL2 = 5) Then
                tmLcfSrchKey.iType = 0
                tmLcfSrchKey.sStatus = "C"  ' Current
                tmLcfSrchKey.iVefCode = imVehCode
                slDate = Format$(llDate, "m/d/yy")
                gPackDate slDate, ilDate0, ilDate1
                tmLcfSrchKey.iLogDate(0) = ilDate0
                tmLcfSrchKey.iLogDate(1) = ilDate1
                tmLcfSrchKey.iSeqNo = 1
                ' Get a record from LCF
                ilRet = btrGetEqual(hmLcf, tmLcf, imLcfRecLen, tmLcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                If (ilRet = BTRV_ERR_NONE) Then
                    ilValidDay = True
                End If
            Else
                If plcCalendar.Left = pbcSpotInfo(0).Left Then
                    If (llDate >= lmDateChf0(0)) And (llDate <= lmDateChf0(1)) Then
                        ilValidDate = True
                    End If
                    For ilCff = 0 To UBound(tmCff0) - 1 Step 1
                        gUnpackDateLong tmCff0(ilCff).iStartDate(0), tmCff0(ilCff).iStartDate(1), llCffStartDate
                        gUnpackDateLong tmCff0(ilCff).iEndDate(0), tmCff0(ilCff).iEndDate(1), llCffEndDate
                        If (llDate >= llCffStartDate) And (llDate <= llCffEndDate) Then
                            'ilValidDate = False
                            If (tmCff0(ilCff).sDyWk <> "D") Then  'Weekly
                                If (tmCff0(ilCff).iDay(ilWkDay) > 0) Or (tmCff0(ilCff).sXDay(ilWkDay) = "Y") Then
                                    ilValidDay = True
                                End If
                            Else    'Daily
                                If tmCff0(ilCff).iDay(ilWkDay) > 0 Then
                                    ilValidDay = True
                                End If
                            End If
                            Exit For
                        End If
                    Next ilCff
                    'If ((llDate < lmDateChf0(0)) Or (llDate > lmDateChf0(1))) And ilValidDate Then
                    '    ilValidDate = False
                    'End If
                Else
                    If (llDate >= lmDateChf1(0)) And (llDate <= lmDateChf1(1)) Then
                        ilValidDate = True
                    End If
                    For ilCff = 0 To UBound(tmCff1) - 1 Step 1
                        gUnpackDateLong tmCff1(ilCff).iStartDate(0), tmCff1(ilCff).iStartDate(1), llCffStartDate
                        gUnpackDateLong tmCff1(ilCff).iEndDate(0), tmCff1(ilCff).iEndDate(1), llCffEndDate
                        If (llDate >= llCffStartDate) And (llDate <= llCffEndDate) Then
                            'ilValidDate = False
                            If (tmCff1(ilCff).sDyWk <> "D") Then  'Weekly
                                If (tmCff1(ilCff).iDay(ilWkDay) > 0) Or (tmCff1(ilCff).sXDay(ilWkDay) = "Y") Then
                                    ilValidDay = True
                                End If
                            Else    'Daily
                                If tmCff1(ilCff).iDay(ilWkDay) > 0 Then
                                    ilValidDay = True
                                End If
                            End If
                            Exit For
                        End If
                    Next ilCff
                    'If ((llDate < lmDateChf1(0)) Or (llDate > lmDateChf1(1))) And ilValidDate Then
                    '    ilValidDate = False
                    'End If
                End If
            End If
        ElseIf imEnableSource = 1 Then
            ilValidDay = True
            ilValidDate = True
        End If
        If (ilType <= 1) Or (ilType = 4) Then
            slDay = Trim$(str$(Day(llDate)))
            If Len(slDay) <= 1 Then
                slDay = " " & slDay
            End If
        ElseIf ilType = 2 Then  'Julian +
            slDay = Format$(llDate, "y")
            If Len(slDay) <= 1 Then
                slDay = "   " & slDay
            ElseIf Len(slDay) = 2 Then
                If Val(slDay) < 20 Then
                    slDay = "  " & slDay
                Else
                    slDay = " " & slDay
                End If
            End If
        ElseIf ilType = 3 Then  'Julian -
            slJulian = "12/31/" & Format$(llDate, "yyyy")
            slDay = Trim$(str$(Val(Format$(slJulian, "y")) - Val(Format$(llDate, "y"))))
            If Len(slDay) <= 1 Then
                slDay = "   " & slDay
            ElseIf Len(slDay) = 2 Then
                If Val(slDay) < 20 Then
                    slDay = "  " & slDay
                Else
                    slDay = " " & slDay
                End If
            End If
        End If
        If imEnableSource = 0 Then
            If (imL1OrL2 = 1) Or (imL1OrL2 = 2) Or (imL1OrL2 = 3) Or (imL1OrL2 = 4) Or (imL1OrL2 = 5) Then
                If ilValidDay Then
                    If llDate < lmEarliestAllowedDate Then
                        pbcCtrl.ForeColor = RED
                    ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
                        pbcCtrl.ForeColor = MAGENTA
                    Else
                        pbcCtrl.ForeColor = BLUE 'DARKPURPLE'BLUE
                    End If
                Else
                    pbcCtrl.ForeColor = BLACK   'RED
                End If
            Else
                If ilValidDay Then
                    pbcCtrl.ForeColor = DARKGREEN   'BLACK    'Green
                Else
                    If ilValidDate Then
                        pbcCtrl.ForeColor = BLUE
                    Else
                        pbcCtrl.ForeColor = RED 'CYAN    'Red
                    End If
                End If
            End If
        Else
            If llDate < lmEarliestAllowedDate Then
                pbcCtrl.ForeColor = RED
            Else
                pbcCtrl.ForeColor = BLUE 'DARKPURPLE'BLUE
            End If
        End If
        pbcCtrl.CurrentX = tlCtrls(ilWkDay + 1).fBoxX + flBoxInsetX
        pbcCtrl.CurrentY = tlCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tlCtrls(ilWkDay + 1).fBoxH + 15) + flBoxInsetY '(fgBoxGridH + 15) -  30'+ fgBoxInsetY
        pbcCtrl.Print slDay 'tlCtrls(ilWkDay + 1).sShow
        If ilWkDay = 6 Then
            ilRowNo = ilRowNo + 1
        End If
        llDate = llDate + 1
    Loop Until (((ilType <> 0) And (ilType <> 4)) And (Month(llDate) <> ilMonth)) Or (((ilType = 0) Or (ilType = 4)) And (llDate > llLastDate))
    pbcCtrl.ForeColor = llColor
    llEndDate = llDate - 1
    pbcCtrl.FontSize = flFontSize
    pbcCtrl.FontName = slFontName
    pbcCtrl.FontSize = flFontSize
    pbcCtrl.FontBold = True
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintContract                  *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint advertiser spot screen   *
'*                                                     *
'*******************************************************
Private Sub mPaintContract(ilCol As Integer, tlEvt() As EVTINFO, tlVcf0() As VCF, tlVcf6() As VCF, tlVcf7() As VCF, tlCtrls As FIELDAREA, tlRowNo() As Integer, slInDate As String)
    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim slStrFront As String
    Dim ilPaintRow As Integer
    Dim ilLastLinePaint As Integer
    Dim ilYellow As Integer
    Dim ilRowCount As Integer
    Dim llShowTime As Long
    Dim slTime As String
    Dim llFgColor As Long
    Dim ilAdj As Integer
    Dim slDate As String
    Dim llDate As Long
    Dim ilPos As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim ilPos3 As Integer
    Dim ilPos4 As Integer
    Dim ilPos5 As Integer
    Dim ilPos6 As Integer
    Dim ilMnfComp1 As Integer
    Dim ilMnfComp2 As Integer
    Dim ilNoCompConflict As Integer
    Dim llHighlightColor As Long
    Dim ilShowForm As Integer
    Dim ilAdj1 As Integer
    Dim flX As Single
    Dim flY As Single
    Dim slFont As String
    Dim llCurrentY As Long
    Dim ilStationCount As Integer
    Dim ilGsf As Integer
    Dim slGameStatus As String
    Dim slMore As String
    'Dim ilAvail As Integer
    'Dim ilSpot As Integer
    'Dim ilFound As Integer
    Dim llSvCurrentX As Long
    Dim llSvCurrentY As Long

    ilStartRow = vbcContract.Value '(vbcContract.LargeChange) * (vbcContract.Value - 1) + 1
    If ilStartRow = 0 Then
        Exit Sub
    End If
    If tmVef.sType = "G" Then
        If imSelectedGameNo + ilCol - 1 >= lbcGameNo(0).ListCount Then
            Exit Sub
        End If
    End If
'    ilShowForm = 0
'    slStr = Trim$(lacShowForm.Caption)
'    ilPos = InStr(1, slStr, "Length", 1)
'    If ilPos > 0 Then
'        ilShowForm = 0
'    End If
'    ilPos = InStr(1, slStr, "Name", 1)
'    If ilPos > 0 Then
'        ilShowForm = 1
'    End If
'    ilPos = InStr(1, slStr, "Block", 1)
'    If ilPos > 0 Then
'        ilShowForm = 2
'    End If
'    ilPos = InStr(1, slStr, "Invert", 1)
'    If ilPos > 0 Then
        ilShowForm = 3
'    End If
    llShowTime = -1
    'Erase tlRowNo   'initialize to zero
    For ilLoop = LBound(tlRowNo) To UBound(tlRowNo) Step 1
        tlRowNo(ilLoop) = 0
    Next ilLoop
    ilMnfComp1 = 0
    ilMnfComp2 = 0
    'ilFound = False
    If (lmSdfRecPosHighlight > 0) And (imHighlight = 1) Then
'        For ilSpot = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
'            If lmSdfRecPosHighlight = tlEvt(ilSpot).lTime Then
'                ilMnfComp1 = tlEvt(ilSpot).iMnfComp1
'                ilMnfComp2 = tlEvt(ilSpot).iMnfComp2
'                ilFound = True
'                Exit For
'            End If
'        Next ilSpot
'        If Not ilFound Then
'            For ilSpot = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
'                If lmSdfRecPosHighlight = tmAdMdSdfMdExt(ilSpot).lRecPos Then
'                    tmChfSrchKey.lCode = tmAdMdSdfMdExt(ilSpot).lChfCode
'                    If tmChfSrchKey.lCode <> tmChf.lCode Then
'                        ilRet = btrGetEqual(hmChf, tmChf, imChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
'                        If ilRet = BTRV_ERR_NONE Then
'                            ilMnfComp1 = tmChf.iMnfComp(0)
'                            ilMnfComp2 = tmChf.iMnfComp(1)
'                        End If
'                    Else
'                        ilMnfComp1 = tmChf.iMnfComp(0)
'                        ilMnfComp2 = tmChf.iMnfComp(1)
'                    End If
'                    ilFound = True
'                    Exit For
'                End If
'            Next ilSpot
'        End If
'        If Not ilFound Then
'            For ilSpot = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
'                If lmSdfRecPosHighlight = tmWAMdExt(ilSpot).lRecPos Then
'                    tmChfSrchKey.lCode = tmWAMdExt(ilSpot).lChfCode
'                    If tmChfSrchKey.lCode <> tmChf.lCode Then
'                        ilRet = btrGetEqual(hmChf, tmChf, imChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
'                        If ilRet = BTRV_ERR_NONE Then
'                            ilMnfComp1 = tmChf.iMnfComp(0)
'                            ilMnfComp2 = tmChf.iMnfComp(1)
'                        End If
'                    Else
'                        ilMnfComp1 = tmChf.iMnfComp(0)
'                        ilMnfComp2 = tmChf.iMnfComp(1)
'                    End If
'                    ilFound = True
'                    Exit For
'                End If
'            Next ilSpot
'        End If
        If imWhereComp1 > 0 Then
            ilMnfComp1 = imWhereComp1
        End If
        If imWhereComp2 > 0 Then
            ilMnfComp2 = imWhereComp2
        End If
    End If
    If lmSelectedChfCode <= 0 Then
        'slDate = edcDate.Text   'plcDate.Caption
        'llDate = gDateValue(slDate) + ilCol - 1
        '12/29/12: This code will draw a yellow background in the column or show an X in the column.
        If tmVef.sType = "G" Then
            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilCol - 1)
            If tmGsfInfo(ilGsf).sGameStatus = "C" Then
                'Yellow Column
                pbcContract.Line (tlCtrls.fBoxX, fgBoxGridH + 30)-(tlCtrls.fBoxX + tlCtrls.fBoxW - 30, pbcContract.height - 30), LIGHTYELLOW, BF
                'X in column
                pbcContract.Line (tlCtrls.fBoxX, fgBoxGridH + 30)-(tlCtrls.fBoxX + tlCtrls.fBoxW - 15, pbcContract.height - 15), RED
                pbcContract.Line (tlCtrls.fBoxX + tlCtrls.fBoxW - 15, fgBoxGridH + 30)-(tlCtrls.fBoxX, pbcContract.height - 15), RED
            End If
        End If
        mGetEdcDate ilCol - 1
        slDate = lmEdcDate
        llFgColor = pbcContract.ForeColor
        'ilLoop = LBound(tlEvt)
        ilLoop = imLBEvt
        ilPaintRow = 1
        ilRowCount = 0
        ilLastLinePaint = 1 'Avoid painting line above first row
        ilYellow = True
        ilEndRow = vbcContract.LargeChange + ilPaintRow
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlEvt))
            ''7/5/14: Add check box for showing/not showing ghost spots
            ''If ((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101)) Or ((tlEvt(ilLoop).iType = -1)) Then
            '6/18/18: Retain avails lining-up when conflict hidden
            'If ((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Or ((tlEvt(ilLoop).iType = -1)) Then
            If ((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101)) Or ((tlEvt(ilLoop).iType = -1)) Then
                ilRowCount = ilRowCount + 1
                If tmVef.sType <> "G" Then
                    If tlEvt(ilLoop).iType < 99 Then
                        llShowTime = tlEvt(ilLoop).lTime
                    End If
                    If (ilRowCount = ilStartRow) Then
                        If llShowTime <> -1 Then
                            If plcAdvtTm.Caption <> "" Then
                                slStr = Trim$(plcAdvtTm.Caption)
                                If llShowTime > CLng(gTimeToCurrency(slStr, False)) Then
                                    slStr = gCurrencyToTime(CCur(llShowTime))
                                    slTime = gFormatTime(slStr, "A", "1")
                                    plcAdvtTm.Caption = " " & slTime
                                End If
                            Else
                                slStr = gCurrencyToTime(CCur(llShowTime))
                                slTime = gFormatTime(slStr, "A", "1")
                                plcAdvtTm.Caption = " " & slTime
                            End If
                        End If
                    End If
                End If
                If ilRowCount >= ilStartRow Then
                    pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                    If smSpotFont = "S" Then
                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                    Else
                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    If smSpotFont = "S" Then
                        pbcContract.FontBold = False
                    Else
                        pbcContract.FontBold = True
                    End If
                    If tlEvt(ilLoop).iType = 100 Then   'Spot
                        llCurrentY = pbcContract.CurrentY
                        slStr = RTrim$(tlEvt(ilLoop).sShow)
                        'If imMore = 1 Then
                        '    ilPos = InStr(1, tlEvt(ilLoop).sPrice, ".")
                        '    If ilPos > 1 Then
                        '        slStr = " $" & Left$(tlEvt(ilLoop).sPrice, ilPos - 1) & slStr
                        '    ElseIf ilPos = 1 Then
                        '        slStr = " $0" & slStr
                        '    Else
                        '        slStr = " " & Trim$(Left$(tlEvt(ilLoop).sPrice, 5)) & slStr
                        '    End If
                        'End If
                        slMore = mMoreInfo(tlEvt(ilLoop).lSdfCode, tlEvt(ilLoop).sPrice, tlEvt(ilLoop).sNetRegionAbbr, tlEvt(ilLoop).sCITFlag, tlEvt(ilLoop).sCopyCIT, tlEvt(ilLoop).sPtType, tlEvt(ilLoop).lCopyCode, tlEvt(ilLoop).iRotNo, tlEvt(ilLoop).sLiveCopy)
                        If slMore <> "" Then
                            slStr = " " & slMore & slStr
                        End If
                        tmSizeCtrls = tmACtrls(1)
                        If ((tlEvt(ilLoop).iLineInfo And &H100) <> 0) Then 'Comment defined
                            'slStr = "*" & Trim$(slStr)
                            pbcContract.ForeColor = RED
                            'pbcContract.Print "*";
                            slFont = pbcContract.FontName
                            pbcContract.FontName = "Monotype Sorts"
                            pbcContract.FontBold = False
                            pbcContract.Print "w";  '"l";
                            tmSizeCtrls.fBoxW = tmSizeCtrls.fBoxW - (pbcContract.TextWidth("w"))
                            pbcContract.FontName = slFont
                            If smSpotFont <> "S" Then
                                pbcContract.FontBold = True
                            End If
                            pbcContract.ForeColor = llFgColor
                        End If
                        gSetShow pbcContract, slStr, tmSizeCtrls    'tmACtrls(1)
                        'tmACtrls(1).sShow = tmSizeCtrls.sShow
'                        If ilShowForm = 0 Then
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            If imHighlight = 0 Then
'                                If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                    pbcContract.ForeColor = MAGENTA
'
'                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                    pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            ElseIf imHighlight = 1 Then  'Product protection
'                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
''                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
''                                    If ilNoCompConflict Then
''                                        pbcContract.ForeColor = MAGENTA
''                                    Else
''                                        pbcContract.ForeColor = RED
''                                    End If
'                                    If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                        pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            ElseIf imHighlight = 2 Then  'Conflict
'                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
'                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
'                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = llFgColor 'MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            End If
'                            ilPos1 = InStr(1, tmACtrls(1).sShow, "+", 1)
''                            If ilPos1 <= 0 Then
''                                ilPos1 = InStr(1, tmACtrls(1).sShow, ">", 1)
''                            End If
'                            ilPos2 = InStr(1, tmACtrls(1).sShow, "-", 1)
''                            If ilPos2 <= 0 Then
''                                ilPos2 = InStr(1, tmACtrls(1).sShow, "<", 1)
''                            End If
'                            ilPos3 = InStr(1, tmACtrls(1).sShow, " ", 1)
'                            ilPos = ilPos1
'                            If ((ilPos2 <> 0) And (ilPos2 < ilPos)) Or (ilPos = 0) Then
'                                ilPos = ilPos2
'                            End If
'                            If ((ilPos3 <> 0) And (ilPos3 < ilPos)) Or (ilPos = 0) Then
'                                ilPos = ilPos3
'                            End If
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            If ilPos > 0 Then
'                                slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
'                                tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
'                                pbcContract.Print slStrFront;
'                            End If
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                            If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
'                                pbcContract.ForeColor = BLUE
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot
'                                pbcContract.ForeColor = DARKYELLOW
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
'                                pbcContract.ForeColor = DARKGREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
'                                pbcContract.ForeColor = RED 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
'                                pbcContract.ForeColor = GRAY 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
'                                pbcContract.FontBold = False
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
'                                pbcContract.FontItalic = True
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
'                                pbcContract.FontStrikethru = True
'                            End If
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            pbcContract.Print tmACtrls(1).sShow
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                            If smSpotFont = "S" Then
'                                pbcContract.FontBold = False
'                            Else
'                                pbcContract.FontBold = True
'                            End If
'                        ElseIf ilShowForm = 1 Then
'                            pbcContract.ForeColor = llFgColor
'                            If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
'                                pbcContract.ForeColor = BLUE
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot
'                                pbcContract.ForeColor = DARKYELLOW
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
'                                pbcContract.ForeColor = DARKGREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
'                                pbcContract.ForeColor = RED 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
'                                pbcContract.ForeColor = GRAY 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
'                                pbcContract.FontBold = False
'                            End If
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            ilPos1 = InStr(1, tmACtrls(1).sShow, "+", 1)
''                            If ilPos1 <= 0 Then
''                                ilPos1 = InStr(1, tmACtrls(1).sShow, ">", 1)
''                            End If
'                            ilPos2 = InStr(1, tmACtrls(1).sShow, "-", 1)
''                            If ilPos2 <= 0 Then
''                                ilPos2 = InStr(1, tmACtrls(1).sShow, "<", 1)
''                            End If
'                            ilPos3 = InStr(1, tmACtrls(1).sShow, " ", 1)
'                            ilPos = ilPos1
'                            If ((ilPos2 <> 0) And (ilPos2 < ilPos)) Or (ilPos = 0) Then
'                                ilPos = ilPos2
'                            End If
'                            If ((ilPos3 <> 0) And (ilPos3 < ilPos)) Or (ilPos = 0) Then
'                                ilPos = ilPos3
'                            End If
'                            If ilPos > 0 Then
'                                slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
'                                tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
'                                pbcContract.Print slStrFront;
'                            End If
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                            If imHighlight = 0 Then
'                                If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                    pbcContract.ForeColor = MAGENTA
'
'                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                    pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            ElseIf imHighlight = 1 Then  'Product protection
'                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
''                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
''                                    If ilNoCompConflict Then
''                                        pbcContract.ForeColor = MAGENTA
''                                    Else
''                                        pbcContract.ForeColor = RED
''                                    End If
'                                    If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                        pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            ElseIf imHighlight = 2 Then  'Conflict
'                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
'                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
'                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = llFgColor 'MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
'                                pbcContract.FontItalic = True
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
'                                pbcContract.FontStrikethru = True
'                            End If
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            pbcContract.Print tmACtrls(1).sShow
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                            If smSpotFont = "S" Then
'                                pbcContract.FontBold = False
'                            Else
'                                pbcContract.FontBold = True
'                            End If
'                        ElseIf ilShowForm = 2 Then
'                            If imHighlight = 0 Then
'                                If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                    pbcContract.ForeColor = MAGENTA
'
'                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                    pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            ElseIf imHighlight = 1 Then  'Product protection
'                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
''                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
''                                    If ilNoCompConflict Then
''                                        pbcContract.ForeColor = MAGENTA
''                                    Else
''                                        pbcContract.ForeColor = RED
''                                    End If
'                                    If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                        pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            ElseIf imHighlight = 2 Then  'Conflict
'                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
'                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
'                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = llFgColor 'MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = llFgColor
'                                End If
'                            End If
'                            ilPos1 = InStr(1, tmACtrls(1).sShow, "+", 1)
''                            If ilPos1 <= 0 Then
''                                ilPos1 = InStr(1, tmACtrls(1).sShow, ">", 1)
''                            End If
'                            ilPos2 = InStr(1, tmACtrls(1).sShow, "-", 1)
''                            If ilPos2 <= 0 Then
''                                ilPos2 = InStr(1, tmACtrls(1).sShow, "<", 1)
''                            End If
'                            ilPos3 = InStr(1, tmACtrls(1).sShow, " ", 1)
'                            ilPos = ilPos1
'                            If ((ilPos2 <> 0) And (ilPos2 < ilPos)) Or (ilPos = 0) Then
'                                ilPos = ilPos2
'                            End If
'                            If ((ilPos3 <> 0) And (ilPos3 < ilPos)) Or (ilPos = 0) Then
'                                ilPos = ilPos3
'                            End If
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            If ilPos > 0 Then
'                                slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
'                                tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
'                                If pbcContract.ForeColor <> llFgColor Then
'                                    ilAdj = pbcContract.TextWidth(slStrFront)
'                                    pbcContract.Line Step(0, 30)-Step(ilAdj, fgBoxGridH), pbcContract.ForeColor, BF
'                                    pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
'                                    If smSpotFont = "S" Then
'                                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
'                                    Else
'                                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
'                                    End If
'                                    pbcContract.ForeColor = WHITE
'                                End If
'                                pbcContract.Print slStrFront;
'                            End If
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                            If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
'                                pbcContract.ForeColor = BLUE
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot
'                                pbcContract.ForeColor = DARKYELLOW
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
'                                pbcContract.ForeColor = DARKGREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
'                                pbcContract.ForeColor = RED 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
'                                pbcContract.ForeColor = GRAY 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
'                                pbcContract.FontBold = False
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
'                                pbcContract.FontItalic = True
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
'                                pbcContract.FontStrikethru = True
'                            End If
'                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                                pbcContract.FontUnderline = True
'                            End If
'                            pbcContract.Print tmACtrls(1).sShow
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                            If smSpotFont = "S" Then
'                                pbcContract.FontBold = False
'                            Else
'                                pbcContract.FontBold = True
'                            End If
'                        ElseIf ilShowForm = 3 Then
                            pbcContract.ForeColor = llFgColor
                            If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                                pbcContract.ForeColor = BLUE
                            End If
                            If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                                pbcContract.ForeColor = DARKYELLOW
                            End If
                            If (tlEvt(ilLoop).sCntrType = "T") Then 'Remnant
                                pbcContract.ForeColor = ORANGE
                            End If
                            If (tlEvt(ilLoop).lChfCode = 0) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                pbcContract.ForeColor = lmFeedSpotColor
                            End If
                            'If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
                            '    pbcContract.ForeColor = RED 'GREEN
                            'End If
                            'If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
                            '    pbcContract.ForeColor = GRAY 'GREEN
                            'End If
                            'If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                            '    pbcContract.ForeColor = DARKGREEN
                            'End If
                            If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
                                pbcContract.FontItalic = True
                            End If
                            If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
                                pbcContract.FontStrikethru = True
                            End If
                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                                pbcContract.FontUnderline = True
                            End If
                            ilPos4 = InStr(1, tmSizeCtrls.sShow, "@", 1)
                            ilPos5 = InStr(1, tmSizeCtrls.sShow, "#", 1)
                            ilPos6 = InStr(1, tmSizeCtrls.sShow, "!", 1)
                            'ilPos1 = InStr(1, tmACtrls(1).sShow, "+", 1)
                            ilPos1 = InStr(1, tmSizeCtrls.sShow, "+", 1)
'                            If ilPos1 <= 0 Then
'                                ilPos1 = InStr(1, tmACtrls(1).sShow, ">", 1)
'                            End If
                            'ilPos2 = InStr(1, tmACtrls(1).sShow, "-", 1)
                            ilPos2 = InStr(1, tmSizeCtrls.sShow, "-", 1)
'                            If ilPos2 <= 0 Then
'                                ilPos2 = InStr(1, tmACtrls(1).sShow, "<", 1)
'                            End If
                            'ilPos3 = InStr(1, tmACtrls(1).sShow, " ", 1)
                            ilPos3 = InStr(1, tmSizeCtrls.sShow, " ", 1)
                            If imMore = 9 Then
                                ilPos1 = InStr(ilPos3, tmSizeCtrls.sShow, "+", 1)
                                ilPos2 = InStr(ilPos3, tmSizeCtrls.sShow, "-", 1)
                            End If
                            ilPos = ilPos1
                            If ((ilPos4 <> 0) And (ilPos4 < ilPos)) Or (ilPos = 0) Then
                                ilPos = ilPos4
                            End If
                            If ((ilPos5 <> 0) And (ilPos5 < ilPos)) Or (ilPos = 0) Then
                                ilPos = ilPos5
                            End If
                            If ((ilPos6 <> 0) And (ilPos6 < ilPos)) Or (ilPos = 0) Then
                                ilPos = ilPos6
                            End If
                            If ((ilPos2 <> 0) And (ilPos2 < ilPos)) Or (ilPos = 0) Then
                                ilPos = ilPos2
                            End If
                            If ((ilPos3 <> 0) And (ilPos3 < ilPos)) Or (ilPos = 0) Then
                                ilPos = ilPos3
                            End If
                            If ilPos > 0 Then
                                'slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
                                slStrFront = Left$(tmSizeCtrls.sShow, ilPos - 1)
                                'tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
                                tmSizeCtrls.sShow = Mid$(tmSizeCtrls.sShow, ilPos)
                                If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                    ilAdj = pbcContract.TextWidth(slStrFront)
                                    If smSpotFont = "S" Then
                                        If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then   'Hold
                                            pbcContract.Line Step(0, 0)-Step(ilAdj, fgBoxGridH), RED, BF
                                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then  'Reservation
                                            pbcContract.Line Step(0, 0)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then 'Impressions
                                            pbcContract.Line Step(0, 0)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                                        End If
                                    Else
                                        If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                            pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), RED, BF
                                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                                            pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                            pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                                        End If
                                    End If
                                    pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                                    If smSpotFont = "S" Then
                                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                                    Else
                                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                    End If
                                    If (pbcContract.ForeColor = llFgColor) Or (pbcContract.ForeColor = DARKYELLOW) Or (pbcContract.ForeColor = lmFeedSpotColor) Or (pbcContract.ForeColor = ORANGE) Then
                                        If ((tlEvt(ilLoop).iLineInfo And &H4000) = 0) Then
                                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                                pbcContract.ForeColor = WHITE
                                            Else
                                                pbcContract.ForeColor = BLACK
                                            End If
                                        End If
                                    End If
                                End If
                                pbcContract.Print slStrFront;
                            End If
                            pbcContract.FontItalic = False
                            pbcContract.FontStrikethru = False
                            pbcContract.ForeColor = llFgColor
                            pbcContract.FontUnderline = False
                            If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                                pbcContract.ForeColor = BLUE
                            End If
                            If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                                pbcContract.ForeColor = DARKYELLOW
                            End If
                            If (tlEvt(ilLoop).sCntrType = "T") Then 'Remnant
                                pbcContract.ForeColor = ORANGE
                            End If
                            If (tlEvt(ilLoop).lChfCode = 0) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                pbcContract.ForeColor = lmFeedSpotColor
                            End If
'        If ((tlEvt(ilLoop).iLineInfo And &H800) <> 0) Then 'Manual moved spot (PSA or Promo)
'            pbcContract.ForeColor = DARKGRAY
'        End If
'        If ((tlEvt(ilLoop).iLineInfo And &H1000) <> 0) Then 'Manual moved spot (PSA or Promo)
'            pbcContract.ForeColor = GRAY
'        End If


'                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
'                                pbcContract.ForeColor = RED 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
'                                pbcContract.ForeColor = GRAY 'GREEN
'                            End If
                            If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                                pbcContract.ForeColor = DARKGREEN
                            End If
                            If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
                                pbcContract.FontBold = False
                            End If
                            If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
                                pbcContract.FontItalic = True
                            End If
                            If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
                                pbcContract.FontStrikethru = True
                            End If
                            If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                                pbcContract.FontUnderline = True
                            End If
                            llHighlightColor = 0
                            If imHighlight = 0 Then
                                If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                    llHighlightColor = MAGENTA
                                ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                    llHighlightColor = MAGENTA

                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                                    llHighlightColor = DARKPURPLE 'BLUE
                                End If
                            ElseIf imHighlight = 1 Then  'Product protection
                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
                                    If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                        llHighlightColor = MAGENTA
                                    ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                        llHighlightColor = MAGENTA
                                    'ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                                    Else
                                        llHighlightColor = DARKPURPLE 'BLUE
                                    End If
                                End If
                            ElseIf imHighlight = 2 Then  'Conflict
                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2, slInDate)
                                    If ilNoCompConflict <> True Then
                                        llHighlightColor = RED
                                    End If
                                End If
                            ElseIf (imHighlight = 3) And (smHighlightSplitNetwork = "Y") Then 'Split Networks
                                If ((tlEvt(ilLoop).iLineInfo And &H800) = &H800) Or ((tlEvt(ilLoop).iLineInfo And &H1000) = &H1000) Then
                                    If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tlEvt(ilLoop).lSdfCode, tmStationsHL(), smHLInclExcl, ilStationCount) Then
                                        llHighlightColor = RED
                                    Else
                                        llHighlightColor = GREEN
                                    End If
                                End If
                            End If
                            If llHighlightColor = 0 Then
                                If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
                                    llHighlightColor = YELLOW
                                End If
                                If ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then 'Impression Contract
                                    llHighlightColor = YELLOWORANGE
                                End If
                            End If
                            If llHighlightColor <> 0 Then
                                'ilAdj1 = tmACtrls(1).fBoxW - pbcContract.TextWidth(slStrFront) - 45 'pbcContract.TextWidth(tmACtrls(1).sShow)
                                ilAdj1 = tmSizeCtrls.fBoxW - pbcContract.TextWidth(slStrFront) - 45 'pbcContract.TextWidth(tmACtrls(1).sShow)
                                flX = pbcContract.CurrentX
                                If smSpotFont = "S" Then
                                    pbcContract.Line Step(0, 0)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                                Else
                                    pbcContract.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                                End If
                                pbcContract.CurrentX = flX 'tlCtrls.fBoxX + fgBoxInsetX
                                If smSpotFont = "S" Then
                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                                Else
                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                End If
                                If llHighlightColor <> YELLOW And llHighlightColor <> LIGHTERYELLOW Then
                                    If (pbcContract.ForeColor = llFgColor) Or (pbcContract.ForeColor = BLUE) Then
                                        If ((tlEvt(ilLoop).iLineInfo And &H4000) = 0) Then
                                            pbcContract.ForeColor = WHITE
                                        End If
                                    End If
                                End If
                            Else
                                If ((tlEvt(ilLoop).iLineInfo And &H800) = &H800) Then 'Manual moved spot (PSA or Promo)
                                    slStrFront = tmSizeCtrls.sShow
                                    ilAdj = pbcContract.TextWidth(slStrFront)
                                    flX = pbcContract.CurrentX
                                    flY = pbcContract.CurrentY
                                    'pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), DARKGRAY, BF
                                    pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), CYAN, BF
                                    pbcContract.CurrentX = flX
                                    pbcContract.CurrentY = flY
                                    'pbcContract.Print slStrFront
                                    'flX = pbcContract.CurrentX
                                End If
                                If ((tlEvt(ilLoop).iLineInfo And &H1000) = &H1000) Then  'Manual moved spot (PSA or Promo)
                                    slStrFront = tmSizeCtrls.sShow
                                    ilAdj = pbcContract.TextWidth(slStrFront)
                                    flX = pbcContract.CurrentX
                                    flY = pbcContract.CurrentY
                                    'pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), GRAY, BF
                                    pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), SPLITBLUE, BF
                                    pbcContract.CurrentX = flX
                                    pbcContract.CurrentY = flY
                                    'pbcContract.Print slStrFront
                                    'flX = pbcContract.CurrentX
                                End If
                            End If
                            'pbcContract.Print tmACtrls(1).sShow
                            pbcContract.Print tmSizeCtrls.sShow
                            pbcContract.FontItalic = False
                            pbcContract.FontStrikethru = False
                            pbcContract.ForeColor = llFgColor
                            pbcContract.FontUnderline = False
                            If smSpotFont = "S" Then
                                pbcContract.FontBold = False
                            Else
                                pbcContract.FontBold = True
                            End If
'                        End If
                    '6/18/18: Retain avails lining-up when conflict hidden
                    'ElseIf (tlEvt(ilLoop).iType = 101) Then
                    ElseIf (tlEvt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked) Then   'Conflicting Spot
                        slStr = RTrim$(tlEvt(ilLoop).sSpot)
                        gSetShow pbcContract, slStr, tmACtrls(1)
'                        If ilShowForm = 0 Then
'                            If imHighlight = 0 Then
'                                If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                    pbcContract.ForeColor = MAGENTA
'                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                    pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                End If
'                            ElseIf imHighlight = 1 Then  'Product protection
'                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED 'DARKPURPLE
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = CYAN    'llFgColor
'                                End If
'                            ElseIf imHighlight = 2 Then  'Conflict
'                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
'                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
'                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = CYAN    'llFgColor 'MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = CYAN    'llFgColor
'                                End If
'                            End If
'                            ilPos = InStr(1, tmACtrls(1).sShow, ",", 1)
'                            slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
'                            tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
'                            pbcContract.Print slStrFront;
'                            pbcContract.ForeColor = CYAN
'                            pbcContract.Print tmACtrls(1).sShow
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                        ElseIf ilShowForm = 1 Then
'                            ilPos = InStr(1, tmACtrls(1).sShow, ",", 1)
'                            slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
'                            tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
'                            pbcContract.ForeColor = CYAN
'                            pbcContract.Print slStrFront;
'                            If imHighlight = 0 Then
'                                If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                    pbcContract.ForeColor = MAGENTA
'                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                    pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                End If
'                            ElseIf imHighlight = 1 Then  'Product protection
'                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED 'DARKPURPLE
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = CYAN    'llFgColor
'                                End If
'                            ElseIf imHighlight = 2 Then  'Conflict
'                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
'                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
'                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = CYAN    'llFgColor 'MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = CYAN    'llFgColor
'                                End If
'                            End If
'                            pbcContract.Print tmACtrls(1).sShow
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                        ElseIf ilShowForm = 2 Then
'                            pbcContract.ForeColor = CYAN
'                            If imHighlight = 0 Then
'                                If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                                    pbcContract.ForeColor = MAGENTA
'                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                                    pbcContract.ForeColor = DARKPURPLE 'BLUE
'                                End If
'                            ElseIf imHighlight = 1 Then  'Product protection
'                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED 'DARKPURPLE
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = CYAN    'llFgColor
'                                End If
'                            ElseIf imHighlight = 2 Then  'Conflict
'                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
'                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
'                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = CYAN    'llFgColor 'MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED
'                                    End If
'                                Else
'                                    pbcContract.ForeColor = CYAN    'llFgColor
'                                End If
'                            End If
'                            ilPos = InStr(1, tmACtrls(1).sShow, ",", 1)
'                            slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
'                            tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
'                            If pbcContract.ForeColor <> CYAN Then
'                                ilAdj = pbcContract.TextWidth(slStrFront)
'                                pbcContract.Line Step(0, 30)-Step(ilAdj, fgBoxGridH), pbcContract.ForeColor, BF
'                                pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
'                                If smSpotFont = "S" Then
'                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
'                                Else
'                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
'                                End If
'                                pbcContract.ForeColor = WHITE
'                            End If
'                            pbcContract.Print slStrFront;
'                            pbcContract.ForeColor = CYAN
'                            pbcContract.Print tmACtrls(1).sShow
'                            pbcContract.FontItalic = False
'                            pbcContract.FontStrikethru = False
'                            pbcContract.ForeColor = llFgColor
'                            pbcContract.FontUnderline = False
'                        ElseIf ilShowForm = 3 Then
                            ilPos = InStr(1, tmACtrls(1).sShow, ",", 1)
                            slStrFront = Left$(tmACtrls(1).sShow, ilPos - 1)
                            tmACtrls(1).sShow = Mid$(tmACtrls(1).sShow, ilPos)
                            pbcContract.ForeColor = CYAN
                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                ilAdj = pbcContract.TextWidth(slStrFront)
                                If smSpotFont = "S" Then
                                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                        pbcContract.Line Step(0, 0)-Step(ilAdj, fgBoxGridH), RED, BF
                                    ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                                        pbcContract.Line Step(0, 0)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                                    ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                        pbcContract.Line Step(0, 0)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                                    End If
                                Else
                                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                        pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), RED, BF
                                    ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                                        pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                                    ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                        pbcContract.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                                    End If
                                End If
                                pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                                If smSpotFont = "S" Then
                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                                Else
                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                End If
                            End If
                            pbcContract.Print slStrFront;
                            pbcContract.ForeColor = CYAN
                            llHighlightColor = 0
                            If imHighlight = 0 Then
                                If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                    llHighlightColor = MAGENTA
                                ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                    llHighlightColor = MAGENTA
                                ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                                    llHighlightColor = DARKPURPLE 'BLUE
                                End If
                            ElseIf imHighlight = 1 Then  'Product protection
                                If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcContract.ForeColor = MAGENTA
'                                    Else
'                                        pbcContract.ForeColor = RED 'DARKPURPLE
'                                    End If
                                    If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                        llHighlightColor = MAGENTA
                                    ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                        llHighlightColor = MAGENTA
                                    ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                                        llHighlightColor = DARKPURPLE 'BLUE
                                    End If
                                End If
                            ElseIf imHighlight = 2 Then  'Conflict
                                ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
                                ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
                                If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2, slInDate)
                                    If ilNoCompConflict <> True Then
                                        llHighlightColor = RED
                                    End If
                                End If
                            End If
                            If llHighlightColor <> 0 Then
                                ilAdj1 = tmACtrls(1).fBoxW - pbcContract.TextWidth(slStrFront) - 45 'pbcContract.TextWidth(tmACtrls(1).sShow)
                                flX = pbcContract.CurrentX
                                If smSpotFont = "S" Then
                                    pbcContract.Line Step(0, 0)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                                Else
                                    pbcContract.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                                End If
                                'pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                                pbcContract.CurrentX = flX 'tlCtrls.fBoxX + fgBoxInsetX
                                If smSpotFont = "S" Then
                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                                Else
                                    pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                                End If
                            End If
                            pbcContract.Print tmACtrls(1).sShow
                            pbcContract.FontItalic = False
                            pbcContract.FontStrikethru = False
                            pbcContract.ForeColor = llFgColor
                            pbcContract.FontUnderline = False
'                        End If
                    ElseIf tlEvt(ilLoop).iType = 99 Then    'Avail units remaining
                        pbcContract.ForeColor = DARKGREEN
                        slStr = RTrim$(tlEvt(ilLoop).sShow)
                        gSetShow pbcContract, slStr, tmACtrls(1)
                        
                        '7/3/12: Change how Bar is showned
                        ''pbcContract.Print tmACtrls(1).sShow
                        ''4/24/12: Add Green bar after avails
                        'pbcContract.Print tmACtrls(1).sShow;
                        'ilAdj1 = tmACtrls(1).fBoxW - pbcContract.TextWidth(slStr) ' - 45 'pbcContract.TextWidth(tmACtrls(1).sShow)
                        'flX = pbcContract.CurrentX
                        'If smSpotFont = "S" Then
                        '    pbcContract.Line Step(0, 0)-Step(ilAdj1, fgBoxGridH), DARKGREEN, BF
                        'Else
                        '    pbcContract.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), DARKGREEN, BF
                        'End If
                        If imOpenAvailPercent <= 49 Then
                            pbcContract.Print tmACtrls(1).sShow
                        Else
                            pbcContract.Print tmACtrls(1).sShow;
                            ilAdj1 = tmACtrls(1).fBoxW - pbcContract.TextWidth(slStr) ' - 45 'pbcContract.TextWidth(tmACtrls(1).sShow)
                            flX = pbcContract.CurrentX
                            If imOpenAvailPercent <= 84 Then
                                'alternate bar (1/4 the size)
                                If smSpotFont = "S" Then
                                    pbcContract.Line Step(30, fgBoxGridH / 2)-Step(ilAdj1, fgBoxGridH / 4), DARKGREEN, BF   'LIGHTGREEN, BF
                                Else
                                    pbcContract.Line Step(30, fgBoxGridH / 2)-Step(ilAdj1, fgBoxGridH / 4), DARKGREEN, BF   'LIGHTGREEN, BF
                                End If
                            Else
                                If smSpotFont = "S" Then
                                    pbcContract.Line Step(0, 0)-Step(ilAdj1, fgBoxGridH), DARKGREEN, BF
                                Else
                                    pbcContract.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), DARKGREEN, BF
                                End If
                            End If
                        End If
                        pbcContract.ForeColor = llFgColor
                    '6/18/18: Retain avails lining-up when conflict hidden
                    'ElseIf (tlEvt(ilLoop).iType = -1) Then
                    ElseIf (tlEvt(ilLoop).iType = -1) Or ((tlEvt(ilLoop).iType = 101) And (ckcShowGhost.Value <> vbChecked)) Then   'place holder
                        If (Not ilYellow) And (ilPaintRow <> 1) Then
                            If tlCtrls.fBoxX <= 15 Then
                                pbcContract.CurrentX = 0    '30
                                ilAdj = 0   '30
                            Else
                                pbcContract.CurrentX = tlCtrls.fBoxX '+ 15
                                ilAdj = 0   '30
                            End If
                            pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                            pbcContract.Line Step(0, 0)-Step(tlCtrls.fBoxW - ilAdj, 0), BLUE, BF
                            ilYellow = True
                            'gPaintArea pbcContract, tlCtrls.fBoxX, tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15), tlCtrls.fBoxW - 30, fgBoxGridH - 30, LIGHTYELLOW
                        End If
                        pbcContract.CurrentX = tlCtrls.fBoxX
                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) '+ fgBoxInsetY
                        pbcContract.Line Step(0, 0)-Step(tlCtrls.fBoxW - 30, fgBoxGridH - 30), LIGHTYELLOW, BF
                    Else    'Avail
                        'Test if line should be drawn
                        If ilPaintRow <> ilLastLinePaint Then
                            pbcContract.CurrentX = 0    '45   '30
                            pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                            If tmVef.sType <> "G" Then
                                pbcContract.Line Step(0, 0)-Step(pbcContract.Width, 0), BLUE, BF
                            Else
                                pbcContract.Line Step(tlCtrls.fBoxX, 0)-Step(tlCtrls.fBoxW, 0), BLUE, BF
                            End If
                            ilLastLinePaint = ilPaintRow
                            pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                            If smSpotFont = "S" Then
                                pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                            Else
                                pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            End If
                        End If
                        If ((tlEvt(ilLoop).iLineInfo And sSOverBook) = sSOverBook) Then
                            llSvCurrentX = pbcContract.CurrentX
                            llSvCurrentY = pbcContract.CurrentY
                            pbcContract.Line Step(0, 15)-Step(tlCtrls.fBoxW - 45, fgBoxGridH - 15), LIGHTMAGENTA, BF
                            pbcContract.CurrentX = llSvCurrentX
                            pbcContract.CurrentY = llSvCurrentY
                        End If
                        llFgColor = pbcContract.ForeColor
                        slGameStatus = ""
                        If tmVef.sType = "G" Then
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilCol - 1)
                            slGameStatus = tmGsfInfo(ilGsf).sGameStatus
                        End If
                        If ((tlEvt(ilLoop).iLineInfo And SSLOCK) = SSLOCK) Or (slGameStatus = "C") Then
                            pbcContract.ForeColor = RED
                        ElseIf (tlEvt(ilLoop).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT Then
                            pbcContract.ForeColor = DARKYELLOW
                        End If
                        If tlEvt(ilLoop).lInfo = igPLAnfCode Then
                            pbcContract.ForeColor = MAGENTA
                        End If
                        slStr = Trim$(tlEvt(ilLoop).sShow)
                        'Remove Units/seconds
                        ilPos = InStr(1, slStr, " ", 1)
                        If ilPos > 0 Then
                            ilPos2 = InStr(ilPos + 1, slStr, " ", 1)
                            If ilPos2 > 0 Then
                                slStr = Left$(slStr, ilPos) & Mid$(slStr, ilPos2 + 1)
                            End If
                        End If
                        gSetShow pbcContract, slStr, tmACtrls(1)
                        pbcContract.Print tmACtrls(1).sShow
                        pbcContract.ForeColor = llFgColor
                        ilYellow = False
                    End If
                    tlRowNo(ilPaintRow) = ilLoop
                    If (ilLoop = imDragRowNoSrce) And (ilCol = imDragColNoSrce) And (imDragSrce = DRAGCONTRACT) Then
                        gInvertArea pbcContract, CInt(tmACtrls(ilCol).fBoxX) \ 15, CInt(tmACtrls(ilCol).fBoxY + (imDragRowNoSrce - vbcContract.Value + 1) * (fgBoxGridH + 15)) \ 15, CInt(tmACtrls(ilCol).fBoxW) \ 15, CInt(tmACtrls(ilCol).fBoxH) \ 15
                    End If
                    ilPaintRow = ilPaintRow + 1
                End If
            End If
            ilLoop = ilLoop + 1
        Loop
    Else
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate)
            mGetEdcDate 0
            llDate = lmEdcDate
        Else
            llDate = 0
        End If
        For ilLoop = 1 To 7 Step 1
            pbcContract.CurrentX = tlCtrls.fBoxX
            pbcContract.CurrentY = tlCtrls.fBoxY + (fgBoxGridH + 15) '+ fgBoxInsetY
            pbcContract.Line Step(0, 0)-Step(tlCtrls.fBoxW - 30, pbcContract.height - tlCtrls.fBoxY - fgBoxGridH - 45), LIGHTYELLOW, BF
        Next ilLoop
        llFgColor = pbcContract.ForeColor
        'Only first row painted- change to Black or fix other rows
        'pbcContract.ForeColor = MAGENTA
        'ilLoop = LBound(tlEvt)
        ilLoop = imLBEvt
        ilPaintRow = 1
        ilRowCount = 0
        ilEndRow = vbcContract.LargeChange + ilPaintRow
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlEvt))
            If (tlEvt(ilLoop).iType = 100) And (tlEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilRowCount = ilRowCount + 1
                If ilRowCount >= ilStartRow Then
                    pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                    If smSpotFont = "S" Then
                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                    Else
                        pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
                        pbcContract.FontItalic = True
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot
                        pbcContract.FontStrikethru = True
                    End If
                    'If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle spot
                    '    pbcContract.ForeColor = BLUE
                    'End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot
                    '    pbcContract.ForeColor = DARKYELLOW
                    'End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                    '    pbcContract.ForeColor = DARKGREEN
                    'End If
                    If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                        pbcContract.FontUnderline = True
                    End If
                    slStr = RTrim$(tlEvt(ilLoop).sSpot)
                    gSetShow pbcContract, slStr, tmACtrls(1)
                    pbcContract.Print tmACtrls(1).sShow
                    pbcContract.ForeColor = llFgColor
                    pbcContract.FontItalic = False
                    pbcContract.FontStrikethru = False
                    pbcContract.FontUnderline = False
                    tlRowNo(ilPaintRow) = ilLoop
                    ilPaintRow = ilPaintRow + 1
                End If
            End If
            ilLoop = ilLoop + 1
        Loop
        ilLoop = LBound(tmSdfExt)
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tmSdfExt))
            For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
                If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                    gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                    If llDate + ilCol - 1 = gDateValue(slDate) Then
                        ilRowCount = ilRowCount + 1
                        If ilRowCount >= ilStartRow Then
                            pbcContract.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                            If smSpotFont = "S" Then
                                pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                            Else
                                pbcContract.CurrentY = tlCtrls.fBoxY + (ilPaintRow) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            End If
                            slStr = tmSdfExt(ilLoop).sSchStatus & "   L" & Trim$(str$(tmSdfExt(ilLoop).iLineNo))
                            gSetShow pbcContract, slStr, tmACtrls(1)
                            pbcContract.Print tmACtrls(1).sShow
                            'tlRowNo(ilPaintRow) = ilLoop
                            ilPaintRow = ilPaintRow + 1
                        End If
                    End If
                End If
            Next ilLoop
        Loop
        pbcContract.ForeColor = llFgColor
   End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintHold                      *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint advertiser spot screen   *
'*                                                     *
'*******************************************************
Private Sub mPaintHold(tlSdfMd() As SDFMDEXT, tlCtrls As FIELDAREA)
    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim ilPaintRow As Integer
    Dim llFgColor As Long
    Dim ilRet As Integer
    Dim ilStationCount As Integer
    Dim slMore As String
    Dim llTop As Long


    llTop = tmWACtrls(1).fBoxY
    For ilLoop = 1 To vbcHold.LargeChange + 1 Step 1
        pbcHold.Line (tmWACtrls(1).fBoxX - 15, llTop - 15)-Step(tmWACtrls(1).fBoxW + 15, tmWACtrls(1).fBoxH + 15), BLUE, B
        llTop = llTop + tmWACtrls(1).fBoxH + 15
    Next ilLoop

    ilStartRow = vbcHold.Value '(vbcHold.LargeChange) * (vbcHold.Value - 1) + 1
    If ilStartRow = 0 Then
        Exit Sub
    End If
    llFgColor = pbcHold.ForeColor
    ilLoop = LBound(tlSdfMd)
    ilPaintRow = 1
    ilEndRow = vbcHold.LargeChange + ilPaintRow
    Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlSdfMd))
        If ilLoop >= ilStartRow Then
            pbcHold.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
            pbcHold.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
            If (imHighlight = 3) And (smHighlightSplitNetwork = "Y") Then
                If tlSdfMd(ilLoop).sSplitNetwork = "Y" Then
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet = BTRV_ERR_NONE Then
                        If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tmSdf.lCode, tmStationsHL(), smHLInclExcl, ilStationCount) Then
                            pbcHold.ForeColor = RED
                        Else
                            pbcHold.ForeColor = GREEN
                        End If
                    End If
                End If
            End If
            If lmSdfRecPosHighlight = tlSdfMd(ilLoop).lRecPos Then
                lacL2Info.Caption = "Work Area"
                pbcHold.FontUnderline = True
            End If
            slStr = RTrim$(tlSdfMd(ilLoop).sShow)
            ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            If ilRet <> BTRV_ERR_NONE Then
                slMore = mMoreInfo(0, tlSdfMd(ilLoop).sPrice, tlSdfMd(ilLoop).sNetRegionAbbr, tlSdfMd(ilLoop).sCITFlag, tlSdfMd(ilLoop).sCopyCIT, tlSdfMd(ilLoop).sPtType, tlSdfMd(ilLoop).lCopyCode, tlSdfMd(ilLoop).iRotNo, tlSdfMd(ilLoop).sLiveCopy)
            Else
                slMore = mMoreInfo(tmSdf.lCode, tlSdfMd(ilLoop).sPrice, tlSdfMd(ilLoop).sNetRegionAbbr, tlSdfMd(ilLoop).sCITFlag, tlSdfMd(ilLoop).sCopyCIT, tlSdfMd(ilLoop).sPtType, tlSdfMd(ilLoop).lCopyCode, tlSdfMd(ilLoop).iRotNo, tlSdfMd(ilLoop).sLiveCopy)
            End If
            If slMore <> "" Then
                slStr = " " & slMore & " " & slStr
            End If
            gSetShow pbcHold, slStr, tlCtrls
            pbcHold.Print tlCtrls.sShow
            pbcHold.FontUnderline = False
            pbcHold.ForeColor = llFgColor
            If (ilLoop = imDragRowNoSrce) And (imDragSrce = DRAGHOLD) Then
                gInvertArea pbcHold, CInt(tlCtrls.fBoxX) \ 15, CInt(tlCtrls.fBoxY + (imDragRowNoSrce - vbcHold.Value) * (fgBoxGridH + 15)) \ 15, CInt(tlCtrls.fBoxW) \ 15, CInt(tlCtrls.fBoxH) \ 15
            End If
            ilPaintRow = ilPaintRow + 1
        End If
        ilLoop = ilLoop + 1
    Loop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintLog1                      *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint advertiser spot screen   *
'*                                                     *
'*******************************************************
Private Sub mPaintLog1(tlEvt() As EVTINFO, tmL1Ctrls As FIELDAREA, tlRowNo() As Integer)
    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim slStrFront As String
    Dim ilPaintRow As Integer
    Dim ilLastLinePaint As Integer
    Dim ilRowCount As Integer
    Dim llShowTime As Long
    Dim slTime As String
    Dim llFgColor As Long
    Dim ilIndex As Integer
    Dim ilCntAsUnsold As Integer
    Dim ilShow As Integer
    Dim ilPos As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim ilPos3 As Integer
    Dim ilPos4 As Integer
    Dim ilPos5 As Integer
    Dim ilPos6 As Integer
    Dim ilNoCompConflict As Integer
    Dim ilMnfComp1 As Integer
    Dim ilMnfComp2 As Integer
    Dim llHighlightColor As Long
    Dim ilAdj As Integer
    Dim ilAdj1 As Integer
    Dim flX As Single
    Dim slFont As String
    Dim ilStationCount As Integer
    Dim slMore As String
    Dim llSvCurrentX As Long
    Dim llSvCurrentY As Long

    ilStartRow = vbcLog1.Value '(vbcLog1.LargeChange) * (vbcLog1.Value - 1) + 1
    If ilStartRow = 0 Then
        Exit Sub
    End If
    ilMnfComp1 = 0
    ilMnfComp2 = 0
    If (lmSdfRecPosHighlight > 0) And (imHighlight = 1) Then
        If imWhereComp1 > 0 Then
            ilMnfComp1 = imWhereComp1
        End If
        If imWhereComp2 > 0 Then
            ilMnfComp2 = imWhereComp2
        End If
    End If
    'Erase tlRowNo   'Initialize to zero
    For ilLoop = LBound(tlRowNo) To UBound(tlRowNo) Step 1
        tlRowNo(ilLoop) = 0
    Next ilLoop
    'ilLoop = LBound(tlEvt)
    ilLoop = imLBEvt
    ilPaintRow = 1
    ilRowCount = 0
    ilLastLinePaint = 1 'Avoid painting line above first row
    llShowTime = -1
    ilShow = False
    ilCntAsUnsold = False
    ilEndRow = vbcLog1.LargeChange + ilPaintRow
    llFgColor = pbcLog1.ForeColor
    Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlEvt))
        If (imL1View = 1) Then
            ilShow = True
        ElseIf (imL1View = 0) Then
            '7/5/14: Add check box for showing/not showing ghost spots
            'If ((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101)) Then
            If ((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then
                ilShow = True
            Else
                ilShow = False
            End If
        Else
            If (tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9) Then
                'Scan formwar to test if unsold defined
                For ilIndex = ilLoop + 1 To UBound(tmL1Evt) - 1 Step 1
                    If (tlEvt(ilIndex).iType = 99) Then    'Unsold
                        ilCntAsUnsold = True
                        ilShow = True
                        Exit For
                    ElseIf (tlEvt(ilIndex).iType <> 100) And (tlEvt(ilIndex).iType <> 101) Then
                        ilCntAsUnsold = False
                        ilShow = False
                        Exit For
                    End If
                Next ilIndex
            Else
                If ilCntAsUnsold Then
                    '7/5/14: Add check box for showing/not showing ghost spots
                    'If (tlEvt(ilLoop).iType = 99) Or (tlEvt(ilLoop).iType = 100) Or (tlEvt(ilLoop).iType = 101) Then     'Unsold or spot or conflicts spots
                    If (tlEvt(ilLoop).iType = 99) Or (tlEvt(ilLoop).iType = 100) Or ((tlEvt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then     'Unsold or spot or conflicts spots
                        ilShow = True
                    Else
                        ilShow = False
                        ilCntAsUnsold = False
                    End If
                End If
            End If
        End If
        If ilShow Then
            ilRowCount = ilRowCount + 1
            If tlEvt(ilLoop).iType < 99 Then
                llShowTime = tlEvt(ilLoop).lTime
            End If
            If ilRowCount = ilStartRow Then
                If llShowTime <> -1 Then
                    slStr = gCurrencyToTime(CCur(llShowTime))
                    slTime = gFormatTime(slStr, "A", "1")
                    plcLog1Tm.Caption = " " & slTime
                Else
                    plcLog1Tm.Caption = ""
                End If
            End If
            If ilRowCount >= ilStartRow Then
                pbcLog1.CurrentX = tmL1Ctrls.fBoxX + fgBoxInsetX
                pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                If tlEvt(ilLoop).iType = 100 Then   'Spots
                    slStr = RTrim$(tlEvt(ilLoop).sShow)
                    'If imMore = 1 Then
                    '    ilPos = InStr(1, tlEvt(ilLoop).sPrice, ".")
                    '    If ilPos > 1 Then
                    '        slStr = " $" & Left$(tlEvt(ilLoop).sPrice, ilPos - 1) & slStr
                    '    ElseIf ilPos = 1 Then
                    '        slStr = " $0" & slStr
                    '    Else
                    '        slStr = " " & Trim$(Left$(tlEvt(ilLoop).sPrice, 5)) & slStr
                    '    End If
                    'End If
                    slMore = mMoreInfo(tlEvt(ilLoop).lSdfCode, tlEvt(ilLoop).sPrice, tlEvt(ilLoop).sNetRegionAbbr, tlEvt(ilLoop).sCITFlag, tlEvt(ilLoop).sCopyCIT, tlEvt(ilLoop).sPtType, tlEvt(ilLoop).lCopyCode, tlEvt(ilLoop).iRotNo, tlEvt(ilLoop).sLiveCopy)
                    If slMore <> "" Then
                        slStr = " " & slMore & slStr
                    End If
                    tmSizeCtrls = tmL1Ctrls
                    If ((tlEvt(ilLoop).iLineInfo And &H100) <> 0) Then 'Comment defined
                        'slStr = "*" & Trim$(slStr)
                        pbcLog1.ForeColor = RED
                        'pbcLog1.Print "*";
                        slFont = pbcLog1.FontName
                        pbcLog1.FontName = "Monotype Sorts"
                        pbcLog1.FontBold = False
                        pbcLog1.Print "w";  '"l";
                        tmSizeCtrls.fBoxW = tmSizeCtrls.fBoxW - (pbcLog2.TextWidth("w"))
                        pbcLog1.FontName = slFont
                        pbcLog1.FontBold = True
                        pbcLog1.ForeColor = llFgColor
                    End If
                    'gSetShow pbcLog1, slStr, tmL1Ctrls
                    gSetShow pbcLog1, slStr, tmSizeCtrls
                    pbcLog1.ForeColor = llFgColor
                    If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                        pbcLog1.ForeColor = BLUE
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                        pbcLog1.ForeColor = DARKYELLOW
                    End If
                    If (tlEvt(ilLoop).sCntrType = "T") Then 'Remnant
                        pbcLog1.ForeColor = ORANGE
                    End If
                    If (tlEvt(ilLoop).lChfCode = 0) And (tlEvt(ilLoop).lFsfCode > 0) Then
                        pbcLog1.ForeColor = lmFeedSpotColor
                    End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
                    '    pbcLog1.ForeColor = RED 'GREEN
                    'End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
                    '    pbcLog1.ForeColor = GRAY 'GREEN
                    'End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                    '    pbcLog1.ForeColor = DARKGREEN
                    'End If
                    If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
                        pbcLog1.FontStrikethru = True
                    End If
                    If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                        pbcLog1.FontUnderline = True
                    End If
                    ilPos4 = InStr(1, tmSizeCtrls.sShow, "@", 1)
                    ilPos5 = InStr(1, tmSizeCtrls.sShow, "#", 1)
                    ilPos6 = InStr(1, tmSizeCtrls.sShow, "!", 1)
                    'ilPos1 = InStr(1, tmL1Ctrls.sShow, "+", 1)
                    ilPos1 = InStr(1, tmSizeCtrls.sShow, "+", 1)
'                    If ilPos1 <= 0 Then
'                        ilPos1 = InStr(1, tmL1Ctrls.sShow, ">", 1)
'                    End If
                    'ilPos2 = InStr(1, tmL1Ctrls.sShow, "-", 1)
                    ilPos2 = InStr(1, tmSizeCtrls.sShow, "-", 1)
'                    If ilPos2 <= 0 Then
'                        ilPos2 = InStr(1, tmL1Ctrls.sShow, "<", 1)
'                    End If
                    'ilPos3 = InStr(1, tmL1Ctrls.sShow, " ", 1)
                    ilPos3 = InStr(1, tmSizeCtrls.sShow, " ", 1)
                    If imMore = 9 Then
                        ilPos1 = InStr(ilPos3, tmSizeCtrls.sShow, "+", 1)
                        ilPos2 = InStr(ilPos3, tmSizeCtrls.sShow, "-", 1)
                    End If
                    ilPos = ilPos1
                    If ((ilPos4 <> 0) And (ilPos4 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos4
                    End If
                    If ((ilPos5 <> 0) And (ilPos5 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos5
                    End If
                    If ((ilPos6 <> 0) And (ilPos6 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos6
                    End If
                    If ((ilPos2 <> 0) And (ilPos2 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos2
                    End If
                    If ((ilPos3 <> 0) And (ilPos3 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos3
                    End If
                    If ilPos > 0 Then
                        'slStrFront = Left$(tmSizeCtrls.sShow, ilPos - 1)
'                        slStrFront = Left$(tmL1Ctrls.sShow, ilPos - 1)
                        slStrFront = Left$(tmSizeCtrls.sShow, ilPos - 1)
                        'tmL1Ctrls.sShow = Mid$(tmL1Ctrls.sShow, ilPos)
                        tmSizeCtrls.sShow = Mid$(tmSizeCtrls.sShow, ilPos)
                        If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                            ilAdj = pbcLog1.TextWidth(slStrFront)
                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                pbcLog1.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), RED, BF
                            ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                                pbcLog1.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                            ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                pbcLog1.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                            End If
                            'pbcLog1.CurrentX = tmL1Ctrls.fBoxX + fgBoxInsetX
                            pbcLog1.CurrentX = tmSizeCtrls.fBoxX + fgBoxInsetX
                            'pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            pbcLog1.CurrentY = tmSizeCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            If (pbcLog1.ForeColor = llFgColor) Or (pbcLog1.ForeColor = DARKYELLOW) Or (pbcLog1.ForeColor = lmFeedSpotColor) Or (pbcLog1.ForeColor = ORANGE) Then
                                If ((tlEvt(ilLoop).iLineInfo And &H4000) = 0) Then
                                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                        pbcLog1.ForeColor = WHITE
                                    Else
                                        pbcLog1.ForeColor = BLACK
                                    End If
                                End If
                            End If
                        End If
                        pbcLog1.Print slStrFront;
                    End If
                    pbcLog1.FontItalic = False
                    pbcLog1.FontStrikethru = False
                    pbcLog1.ForeColor = llFgColor
                    pbcLog1.FontUnderline = False
                    If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                        pbcLog1.ForeColor = BLUE
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                        pbcLog1.ForeColor = DARKYELLOW
                    End If
                    If (tlEvt(ilLoop).sCntrType = "T") Then
                        pbcLog1.ForeColor = ORANGE
                    End If
                    If (tlEvt(ilLoop).lChfCode = 0) And (tlEvt(ilLoop).lFsfCode > 0) Then
                        pbcLog1.ForeColor = lmFeedSpotColor
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                        pbcLog1.ForeColor = DARKGREEN
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
                        pbcLog1.FontBold = False
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
                        pbcLog1.FontItalic = True
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
                        pbcLog1.FontStrikethru = True
                    End If
                    If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                        pbcLog1.FontUnderline = True
                    End If
                    llHighlightColor = 0
                    If imHighlight = 0 Then
                        If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                            llHighlightColor = DARKPURPLE 'BLUE
                        End If
                    ElseIf imHighlight = 1 Then  'Product protection
                        If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcLog1.ForeColor = MAGENTA
'                                    Else
'                                        pbcLog1.ForeColor = RED
'                                    End If
                            If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                llHighlightColor = MAGENTA
                            ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                llHighlightColor = MAGENTA
                            'ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                            Else
                                llHighlightColor = DARKPURPLE 'BLUE
                            End If
                        End If
                    ElseIf imHighlight = 2 Then  'Conflict
                        ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
                        ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
                        If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
                            ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2, smLog1Date)
                            If ilNoCompConflict <> True Then
                                llHighlightColor = RED
                            End If
                        End If
                    ElseIf (imHighlight = 3) And (smHighlightSplitNetwork = "Y") Then 'Split Networks
                        If ((tlEvt(ilLoop).iLineInfo And &H800) = &H800) Or ((tlEvt(ilLoop).iLineInfo And &H1000) = &H1000) Then
                            If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tlEvt(ilLoop).lSdfCode, tmStationsHL(), smHLInclExcl, ilStationCount) Then
                                llHighlightColor = RED
                            Else
                                llHighlightColor = GREEN
                            End If
                        End If
                    End If
                    If llHighlightColor = 0 Then
                        If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
                            llHighlightColor = YELLOW
                        End If
                        If ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then 'Impression Contract
                            llHighlightColor = YELLOWORANGE
                        End If
                    End If
                    If llHighlightColor <> 0 Then
                        'ilAdj1 = tmL1Ctrls.fBoxW - pbcLog1.TextWidth(slStrFront) - 45 'pbcLog1.TextWidth(tmL1Ctrls.sShow)
                        ilAdj1 = tmSizeCtrls.fBoxW - pbcLog1.TextWidth(slStrFront) - 45 'pbcLog1.TextWidth(tmL1Ctrls.sShow)
                        flX = pbcLog1.CurrentX
                        pbcLog1.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                        pbcLog1.CurrentX = flX 'tmL1Ctrls.fBoxX + fgBoxInsetX
                        'pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLog1.CurrentY = tmSizeCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        If llHighlightColor <> YELLOW And llHighlightColor <> LIGHTERYELLOW Then
                            If (pbcLog1.ForeColor = llFgColor) Or (pbcLog1.ForeColor = BLUE) Then
                                If ((tlEvt(ilLoop).iLineInfo And &H4000) = 0) Then
                                    pbcLog1.ForeColor = WHITE
                                End If
                            End If
                        End If
                    End If
                    'pbcLog1.Print tmL1Ctrls.sShow
                    pbcLog1.Print tmSizeCtrls.sShow
                    pbcLog1.FontItalic = False
                    pbcLog1.FontStrikethru = False
                    pbcLog1.ForeColor = llFgColor
                    pbcLog1.FontUnderline = False
                    pbcLog1.FontBold = True
                ElseIf tlEvt(ilLoop).iType = 101 Then   'Spots
                    slStr = RTrim$(tlEvt(ilLoop).sShow)
                    gSetShow pbcLog1, slStr, tmL1Ctrls
                    ilPos = InStr(1, tmL1Ctrls.sShow, ",", 1)
                    slStrFront = Left$(tmL1Ctrls.sShow, ilPos - 1)
                    tmL1Ctrls.sShow = Mid$(tmL1Ctrls.sShow, ilPos)
                    pbcLog1.ForeColor = CYAN
                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                        ilAdj = pbcLog1.TextWidth(slStrFront)
                        If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                            pbcLog1.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), RED, BF
                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                            pbcLog1.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                            pbcLog1.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                        End If
                        pbcLog1.CurrentX = tmL1Ctrls.fBoxX + fgBoxInsetX
                        pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    pbcLog1.Print slStrFront;
                    pbcLog1.ForeColor = CYAN
                    llHighlightColor = 0
                    If imHighlight = 0 Then
                        If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                            llHighlightColor = DARKPURPLE 'BLUE
                        End If
                    ElseIf imHighlight = 1 Then  'Product protection
                        If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcLog1.ForeColor = MAGENTA
'                                    Else
'                                        pbcLog1.ForeColor = RED 'DARKPURPLE
'                                    End If
                            If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                llHighlightColor = MAGENTA
                            ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                llHighlightColor = MAGENTA
                            ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                                llHighlightColor = DARKPURPLE 'BLUE
                            End If
                        End If
                    ElseIf imHighlight = 2 Then  'Conflict
                        ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
                        ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
                        If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
                            ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2, smLog1Date)
                            If ilNoCompConflict <> True Then
                                llHighlightColor = RED
                            End If
                        End If
                    End If
                    If llHighlightColor <> 0 Then
                        ilAdj1 = tmL1Ctrls.fBoxW - pbcLog1.TextWidth(slStrFront) - 45 '.TextWidth(tmL1Ctrls.sShow)
                        flX = pbcLog1.CurrentX
                        pbcLog1.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                        'pbcLog1.CurrentX = tmL1Ctrls.fBoxX + fgBoxInsetX
                        pbcLog1.CurrentX = flX 'tmL1Ctrls.fBoxX + fgBoxInsetX
                        pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    pbcLog1.Print tmL1Ctrls.sShow
                    pbcLog1.FontItalic = False
                    pbcLog1.FontStrikethru = False
                    pbcLog1.ForeColor = llFgColor
                    pbcLog1.FontUnderline = False
                ElseIf tlEvt(ilLoop).iType = 99 Then    'Avail units remaining
                    'llFgColor = pbcLog1.ForeColor
                    pbcLog1.ForeColor = DARKGREEN
                    slStr = RTrim$(tlEvt(ilLoop).sShow)
                    gSetShow pbcLog1, slStr, tmL1Ctrls
                    pbcLog1.Print tmL1Ctrls.sShow
                    pbcLog1.ForeColor = llFgColor
                ElseIf tlEvt(ilLoop).iType = 1 Then 'Program
                    If imL1View = 1 Then
                        If ilPaintRow <> ilLastLinePaint Then
                            pbcLog1.CurrentX = 15
                            pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                            pbcLog1.Line Step(0, 0)-Step(pbcLog1.Width - 30, 0), BLUE, BF
                            ilLastLinePaint = ilPaintRow
                            pbcLog1.CurrentX = tmL1Ctrls.fBoxX + fgBoxInsetX
                            pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        End If
                        slStr = Trim$(tlEvt(ilLoop).sShow)
                        gSetShow pbcLog1, slStr, tmL1Ctrls
                        pbcLog1.Print tmL1Ctrls.sShow
                    End If
                Else    'Avail
                    If ilPaintRow <> ilLastLinePaint Then
                        pbcLog1.CurrentX = 15
                        pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                        pbcLog1.Line Step(0, 0)-Step(pbcLog1.Width - 30, 0), BLUE, BF
                        ilLastLinePaint = ilPaintRow
                        pbcLog1.CurrentX = tmL1Ctrls.fBoxX + fgBoxInsetX
                        pbcLog1.CurrentY = tmL1Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And sSOverBook) = sSOverBook) Then
                        llSvCurrentX = pbcLog1.CurrentX
                        llSvCurrentY = pbcLog1.CurrentY
                        pbcLog1.Line Step(0, 30)-Step(tmL1Ctrls.fBoxW - 45, fgBoxGridH - 15), LIGHTMAGENTA, BF
                        pbcLog1.CurrentX = llSvCurrentX
                        pbcLog1.CurrentY = llSvCurrentY
                    End If
                    'llFgColor = pbcLog1.ForeColor
                    If (tlEvt(ilLoop).iLineInfo And SSLOCK) = SSLOCK Then
                        pbcLog1.ForeColor = RED
                    ElseIf (tlEvt(ilLoop).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT Then
                        pbcLog1.ForeColor = DARKYELLOW
                    End If
                    If tlEvt(ilLoop).lInfo = igPLAnfCode Then
                        pbcLog1.ForeColor = MAGENTA
                    End If
                    slStr = Trim$(tlEvt(ilLoop).sShow)
                    gSetShow pbcLog1, slStr, tmL1Ctrls
                    pbcLog1.Print tmL1Ctrls.sShow
                    pbcLog1.ForeColor = llFgColor
                End If
                tlRowNo(ilPaintRow) = ilLoop
                'If (ilLoop = imDragRowNoSrce) And (imDragSrce = DRAGLOG1) Then
                If (ilPaintRow = imDragRowNoSrce) And (imDragSrce = DRAGLOG1) Then
                    gInvertArea pbcLog1, CInt(tmL1Ctrls.fBoxX) \ 15, CInt(tmL1Ctrls.fBoxY + (imDragRowNoSrce - vbcLog1.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL1Ctrls.fBoxW) \ 15, CInt(tmL1Ctrls.fBoxH) \ 15
                End If
                ilPaintRow = ilPaintRow + 1
            End If
        End If
        ilLoop = ilLoop + 1
    Loop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintLog2                      *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint advertiser spot screen   *
'*                                                     *
'*******************************************************
Private Sub mPaintLog2(tlEvt() As EVTINFO, tmL2Ctrls As FIELDAREA, tlRowNo() As Integer)
    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim slStrFront As String
    Dim ilPaintRow As Integer
    Dim ilLastLinePaint As Integer
    Dim ilRowCount As Integer
    Dim llShowTime As Long
    Dim slTime As String
    Dim llFgColor As Long
    Dim ilPos As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim ilPos3 As Integer
    Dim ilPos4 As Integer
    Dim ilPos5 As Integer
    Dim ilPos6 As Integer
    Dim ilNoCompConflict As Integer
    Dim ilMnfComp1 As Integer
    Dim ilMnfComp2 As Integer
    Dim llHighlightColor As Long
    Dim ilAdj As Integer
    Dim ilAdj1 As Integer
    Dim flX As Single
    Dim slFont As String
    Dim ilStationCount As Integer
    Dim slMore As String
    Dim llSvCurrentX As Long
    Dim llSvCurrentY As Long

    ilStartRow = vbcLog2.Value '(vbcLog2.LargeChange) * (vbcLog2.Value - 1) + 1
    If ilStartRow = 0 Then
        Exit Sub
    End If
    ilMnfComp1 = 0
    ilMnfComp2 = 0
    If (lmSdfRecPosHighlight > 0) And (imHighlight = 1) Then
        If imWhereComp1 > 0 Then
            ilMnfComp1 = imWhereComp1
        End If
        If imWhereComp2 > 0 Then
            ilMnfComp2 = imWhereComp2
        End If
    End If
    'Erase tlRowNo   'initialize to zero
    For ilLoop = LBound(tlRowNo) To UBound(tlRowNo) Step 1
        tlRowNo(ilLoop) = 0
    Next ilLoop
    'ilLoop = LBound(tlEvt)
    ilLoop = imLBEvt
    ilPaintRow = 1
    ilLastLinePaint = 1 'Avoid painting line above first row
    ilRowCount = 0
    llShowTime = -1
    ilEndRow = vbcLog2.LargeChange + ilPaintRow
    llFgColor = pbcLog2.ForeColor
    Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlEvt))
        '7/5/14: Add check box for showing/not showing ghost spots
        'If (imL2View = 1) Or (((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101))) Then
        If (imL2View = 1) Or (((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked))) Then
            ilRowCount = ilRowCount + 1
            If tlEvt(ilLoop).iType < 99 Then
                llShowTime = tlEvt(ilLoop).lTime
            End If
            If ilRowCount = ilStartRow Then
                If llShowTime <> -1 Then
                    slStr = gCurrencyToTime(CCur(llShowTime))
                    slTime = gFormatTime(slStr, "A", "1")
                    plcLog2Tm.Caption = " " & slTime
                Else
                    plcLog2Tm.Caption = " " & slTime
                End If
            End If
            If ilRowCount >= ilStartRow Then
                pbcLog2.CurrentX = tmL2Ctrls.fBoxX + fgBoxInsetX
                pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                If tlEvt(ilLoop).iType = 100 Then   'Spots
'                    llFgColor = pbcLog2.ForeColor
'                    If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
'                        pbcLog2.ForeColor = BLUE
'                    End If
'                    If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot
'                        pbcLog2.ForeColor = DARKYELLOW
'                    End If
'                    If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
'                        pbcLog2.ForeColor = DARKGREEN
'                    End If
'                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Reservation Contract
'                        pbcLog2.ForeColor = RED 'GREEN
'                    End If
'                    If lmHighlightCntrCode = tlEvt(ilLoop).lLen Then
'                        pbcLog2.ForeColor = MAGENTA
'                    ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
'                        pbcLog2.ForeColor = DARKPURPLE 'BLUE
'                    End If
'                    If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
'                        pbcLog2.FontBold = False
'                    End If
'                    If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
'                        pbcLog2.FontItalic = True
'                    End If
'                    If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then  'Outside spot and not Extra
'                        pbcLog2.FontStrikethru = True
'                    End If
'                    If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
'                        lacL2Info.Caption = "Log 2"
'                        pbcLog2.FontUnderline = True
'                    End If
                    slStr = RTrim$(tlEvt(ilLoop).sShow)
                    'If imMore = 1 Then
                    '    ilPos = InStr(1, tlEvt(ilLoop).sPrice, ".")
                    '    If ilPos > 1 Then
                    '        slStr = " $" & Left$(tlEvt(ilLoop).sPrice, ilPos - 1) & slStr
                    '    ElseIf ilPos = 1 Then
                    '        slStr = " $0" & slStr
                    '    Else
                    '        slStr = " " & Trim$(Left$(tlEvt(ilLoop).sPrice, 5)) & slStr
                    '    End If
                    'End If
                    slMore = mMoreInfo(tlEvt(ilLoop).lSdfCode, tlEvt(ilLoop).sPrice, tlEvt(ilLoop).sNetRegionAbbr, tlEvt(ilLoop).sCITFlag, tlEvt(ilLoop).sCopyCIT, tlEvt(ilLoop).sPtType, tlEvt(ilLoop).lCopyCode, tlEvt(ilLoop).iRotNo, tlEvt(ilLoop).sLiveCopy)
                    If slMore <> "" Then
                        slStr = " " & slMore & slStr
                    End If
                    tmSizeCtrls = tmL2Ctrls
                    If ((tlEvt(ilLoop).iLineInfo And &H100) <> 0) Then 'Comment defined
                        'slStr = "*" & Trim$(slStr)
                        pbcLog2.ForeColor = RED
                        'pbcLog2.Print "*";
                        slFont = pbcLog2.FontName
                        pbcLog2.FontName = "Monotype Sorts"
                        pbcLog2.FontBold = False
                        pbcLog2.Print "w";  '"l";
                        tmSizeCtrls.fBoxW = tmSizeCtrls.fBoxW - (pbcLog2.TextWidth("w") + 15)
                        pbcLog2.FontName = slFont
                        pbcLog2.FontBold = True
                        pbcLog2.ForeColor = llFgColor
                    End If
                    'gSetShow pbcLog2, slStr, tmL2Ctrls
                    gSetShow pbcLog2, slStr, tmSizeCtrls
                    pbcLog2.ForeColor = llFgColor
                    If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                        pbcLog2.ForeColor = BLUE
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                        pbcLog2.ForeColor = DARKYELLOW
                    End If
                    If (tlEvt(ilLoop).sCntrType = "T") Then
                        pbcLog2.ForeColor = ORANGE
                    End If
                    If (tlEvt(ilLoop).lChfCode = 0) And (tlEvt(ilLoop).lFsfCode > 0) Then
                        pbcLog2.ForeColor = lmFeedSpotColor
                    End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
                    '    pbcLog2.ForeColor = RED 'GREEN
                    'End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
                    '    pbcLog2.ForeColor = GRAY 'GREEN
                    'End If
                    'If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                    '    pbcLog2.ForeColor = DARKGREEN
                    'End If
                    If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
                        pbcLog2.FontStrikethru = True
                    End If
                    If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                        pbcLog2.FontUnderline = True
                    End If
                    ilPos4 = InStr(1, tmSizeCtrls.sShow, "@", 1)
                    ilPos5 = InStr(1, tmSizeCtrls.sShow, "#", 1)
                    ilPos6 = InStr(1, tmSizeCtrls.sShow, "!", 1)
                    'ilPos1 = InStr(1, tmL2Ctrls.sShow, "+", 1)
                    ilPos1 = InStr(1, tmSizeCtrls.sShow, "+", 1)
'                    If ilPos1 <= 0 Then
'                        ilPos1 = InStr(1, tmL2Ctrls.sShow, ">", 1)
'                    End If
                    'ilPos2 = InStr(1, tmL2Ctrls.sShow, "-", 1)
                    ilPos2 = InStr(1, tmSizeCtrls.sShow, "-", 1)
'                    If ilPos2 <= 0 Then
'                        ilPos2 = InStr(1, tmL2Ctrls.sShow, "<", 1)
'                    End If
                    'ilPos3 = InStr(1, tmL2Ctrls.sShow, " ", 1)
                    ilPos3 = InStr(1, tmSizeCtrls.sShow, " ", 1)
                    If imMore = 9 Then
                        ilPos1 = InStr(ilPos3, tmSizeCtrls.sShow, "+", 1)
                        ilPos2 = InStr(ilPos3, tmSizeCtrls.sShow, "-", 1)
                    End If
                    ilPos = ilPos1
                    If ((ilPos4 <> 0) And (ilPos4 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos4
                    End If
                    If ((ilPos5 <> 0) And (ilPos5 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos5
                    End If
                    If ((ilPos6 <> 0) And (ilPos6 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos6
                    End If
                    If ((ilPos2 <> 0) And (ilPos2 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos2
                    End If
                    If ((ilPos3 <> 0) And (ilPos3 < ilPos)) Or (ilPos = 0) Then
                        ilPos = ilPos3
                    End If
                    If ilPos > 0 Then
                        'slStrFront = Left$(tmL2Ctrls.sShow, ilPos - 1)
                        slStrFront = Left$(tmSizeCtrls.sShow, ilPos - 1)
                        'tmL2Ctrls.sShow = Mid$(tmL2Ctrls.sShow, ilPos)
                        tmSizeCtrls.sShow = Mid$(tmSizeCtrls.sShow, ilPos)
                        If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                            ilAdj = pbcLog2.TextWidth(slStrFront)
                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                pbcLog2.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), RED, BF
                            ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                                pbcLog2.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                            ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                                pbcLog2.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                            End If
                            'pbcLog2.CurrentX = tmL2Ctrls.fBoxX + fgBoxInsetX
                            pbcLog2.CurrentX = tmSizeCtrls.fBoxX + fgBoxInsetX
                            'pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            pbcLog2.CurrentY = tmSizeCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                            If (pbcLog2.ForeColor = llFgColor) Or (pbcLog2.ForeColor = DARKYELLOW) Or (pbcLog2.ForeColor = lmFeedSpotColor) Or (pbcLog2.ForeColor = ORANGE) Then
                                If ((tlEvt(ilLoop).iLineInfo And &H4000) = 0) Then
                                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                                        pbcLog2.ForeColor = WHITE
                                    Else
                                        pbcLog2.ForeColor = BLACK
                                    End If
                                End If
                            End If
                        End If
                        pbcLog2.Print slStrFront;
                    End If
                    pbcLog2.FontItalic = False
                    pbcLog2.FontStrikethru = False
                    pbcLog2.ForeColor = llFgColor
                    pbcLog2.FontUnderline = False
                    If ((tlEvt(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                        pbcLog2.ForeColor = BLUE
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                        pbcLog2.ForeColor = DARKYELLOW
                    End If
                    If (tlEvt(ilLoop).sCntrType = "T") Then 'Remnant
                        pbcLog2.ForeColor = ORANGE
                    End If
                    If (tlEvt(ilLoop).lChfCode = 0) And (tlEvt(ilLoop).lFsfCode > 0) Then
                        pbcLog1.ForeColor = lmFeedSpotColor
                    End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then 'Hold Contract
'                                pbcLog2.ForeColor = RED 'GREEN
'                            End If
'                            If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
'                                pbcLog2.ForeColor = GRAY 'GREEN
'                            End If
                    If ((tlEvt(ilLoop).iLineInfo And &H40) <> 0) Then 'Any Vehicle spot
                        pbcLog2.ForeColor = DARKGREEN
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 1) <> 0) Then 'Pending line
                        pbcLog2.FontBold = False
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 2) <> 0) Then 'MG spot
                        pbcLog2.FontItalic = True
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And 4) <> 0) And ((tlEvt(ilLoop).iLineInfo And &H10) = 0) Then 'Outside spot and not Extra
                        pbcLog2.FontStrikethru = True
                    End If
                    If lmSdfRecPosHighlight = tlEvt(ilLoop).lTime Then
                        pbcLog2.FontUnderline = True
                    End If
                    llHighlightColor = 0
                    If imHighlight = 0 Then
                        If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                            llHighlightColor = MAGENTA

                        ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                            llHighlightColor = DARKPURPLE 'BLUE
                        End If
                    ElseIf imHighlight = 1 Then  'Product protection
                        If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcLog2.ForeColor = MAGENTA
'                                    Else
'                                        pbcLog2.ForeColor = RED
'                                    End If
                            If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                llHighlightColor = MAGENTA
                            ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                llHighlightColor = MAGENTA
                            'ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                            Else
                                llHighlightColor = DARKPURPLE 'BLUE
                            End If
                        End If
                    ElseIf imHighlight = 2 Then  'Conflict
                        ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
                        ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
                        If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
                            ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2, smLog2Date)
                            If ilNoCompConflict <> True Then
                                llHighlightColor = RED
                            End If
                        End If
                    ElseIf (imHighlight = 3) And (smHighlightSplitNetwork = "Y") Then 'Split Networks
                        If ((tlEvt(ilLoop).iLineInfo And &H800) = &H800) Or ((tlEvt(ilLoop).iLineInfo And &H1000) = &H1000) Then
                            If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tlEvt(ilLoop).lSdfCode, tmStationsHL(), smHLInclExcl, ilStationCount) Then
                                llHighlightColor = RED
                            Else
                                llHighlightColor = GREEN
                            End If
                        End If
                    End If
                    If llHighlightColor = 0 Then
                        If ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then 'Reservation Contract
                            llHighlightColor = YELLOW
                        End If
                        If ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then 'Impression Contract
                            llHighlightColor = YELLOWORANGE
                        End If
                    End If
                    If llHighlightColor <> 0 Then
                        'ilAdj1 = tmL2Ctrls.fBoxW - pbcLog2.TextWidth(slStrFront) - 45
                        ilAdj1 = tmSizeCtrls.fBoxW - pbcLog2.TextWidth(slStrFront) - 45
                        flX = pbcLog2.CurrentX
                        pbcLog2.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                        pbcLog2.CurrentX = flX 'tmL2Ctrls.fBoxX + fgBoxInsetX
                        'pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        pbcLog2.CurrentY = tmSizeCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        If llHighlightColor <> YELLOW And llHighlightColor <> LIGHTERYELLOW Then
                            If (pbcLog2.ForeColor = llFgColor) Or (pbcLog2.ForeColor = BLUE) Then
                                If ((tlEvt(ilLoop).iLineInfo And &H4000) = 0) Then
                                    pbcLog2.ForeColor = WHITE
                                End If
                            End If
                        End If
                    End If
                    'pbcLog2.Print tmL2Ctrls.sShow
                    pbcLog2.Print tmSizeCtrls.sShow
                    pbcLog2.FontItalic = False
                    pbcLog2.FontStrikethru = False
                    pbcLog2.ForeColor = llFgColor
                    pbcLog2.FontUnderline = False
                    pbcLog2.FontBold = True
                ElseIf tlEvt(ilLoop).iType = 101 Then   'Spots
                    slStr = RTrim$(tlEvt(ilLoop).sShow)
                    gSetShow pbcLog2, slStr, tmL2Ctrls
                    ilPos = InStr(1, tmL2Ctrls.sShow, ",", 1)
                    slStrFront = Left$(tmL2Ctrls.sShow, ilPos - 1)
                    tmL2Ctrls.sShow = Mid$(tmL2Ctrls.sShow, ilPos)
                    pbcLog2.ForeColor = CYAN
                    If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Or ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                        ilAdj = pbcLog2.TextWidth(slStrFront)
                        If ((tlEvt(ilLoop).iLineInfo And &H80) <> 0) Then
                            pbcLog2.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), RED, BF
                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H400) <> 0) Then
                            pbcLog2.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOW, BF
                        ElseIf ((tlEvt(ilLoop).iLineInfo And &H4000) <> 0) Then
                            pbcLog2.Line Step(0, 15)-Step(ilAdj, fgBoxGridH), YELLOWORANGE, BF
                        End If
                        pbcLog2.CurrentX = tmL2Ctrls.fBoxX + fgBoxInsetX
                        pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    pbcLog2.Print slStrFront;
                    pbcLog2.ForeColor = CYAN
                    llHighlightColor = 0
                    If imHighlight = 0 Then
                        If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                            llHighlightColor = MAGENTA
                        ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                            llHighlightColor = DARKPURPLE 'BLUE
                        End If
                    ElseIf imHighlight = 1 Then  'Product protection
                        If ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp1 <> 0) And (ilMnfComp1 = tlEvt(ilLoop).iMnfComp2)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp1)) Or ((ilMnfComp2 <> 0) And (ilMnfComp2 = tlEvt(ilLoop).iMnfComp2)) Then
'                                    ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2)
'                                    If ilNoCompConflict Then
'                                        pbcLog2.ForeColor = MAGENTA
'                                    Else
'                                        pbcLog2.ForeColor = RED 'DARKPURPLE
'                                    End If
                            If (lmHighlightCntrCode = tlEvt(ilLoop).lLen) And (tlEvt(ilLoop).lLen > 0) Then
                                llHighlightColor = MAGENTA
                            ElseIf (lmHighlightFeedCode = tlEvt(ilLoop).lFsfCode) And (tlEvt(ilLoop).lFsfCode > 0) Then
                                llHighlightColor = MAGENTA
                            ElseIf imHighlightAdvtCode = (tlEvt(ilLoop).lInfo And &H7FFF) Then
                                llHighlightColor = DARKPURPLE 'BLUE
                            End If
                        End If
                    ElseIf imHighlight = 2 Then  'Conflict
                        ilMnfComp1 = tlEvt(ilLoop).iMnfComp1
                        ilMnfComp2 = tlEvt(ilLoop).iMnfComp2
                        If (ilMnfComp1 <> 0) Or (ilMnfComp2 <> 0) Then
                            ilNoCompConflict = mProductCheck(ilLoop, tlEvt(), tlEvt(ilLoop).lSdfCode, ilMnfComp1, ilMnfComp2, smLog2Date)
                            If ilNoCompConflict <> True Then
                                llHighlightColor = RED
                            End If
                        End If
                    End If
                    If llHighlightColor <> 0 Then
                        ilAdj1 = tmL2Ctrls.fBoxW - pbcLog2.TextWidth(slStrFront) - 45   'pbcLog2.TextWidth(tmL2Ctrls.sShow)
                        flX = pbcLog2.CurrentX
                        pbcLog2.Line Step(0, 15)-Step(ilAdj1, fgBoxGridH), llHighlightColor, BF
                        'pbcLog2.CurrentX = tmL2Ctrls.fBoxX + fgBoxInsetX
                        pbcLog2.CurrentX = flX 'tmL2Ctrls.fBoxX + fgBoxInsetX
                        pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    pbcLog2.Print tmL2Ctrls.sShow
                    pbcLog2.FontItalic = False
                    pbcLog2.FontStrikethru = False
                    pbcLog2.ForeColor = llFgColor
                    pbcLog2.FontUnderline = False
                ElseIf tlEvt(ilLoop).iType = 99 Then    'Avail units remaining
                    'llFgColor = pbcLog2.ForeColor
                    pbcLog2.ForeColor = DARKGREEN
                    slStr = RTrim$(tlEvt(ilLoop).sShow)
                    gSetShow pbcLog2, slStr, tmL2Ctrls
                    pbcLog2.Print tmL2Ctrls.sShow
                    pbcLog2.ForeColor = llFgColor
                ElseIf tlEvt(ilLoop).iType = 1 Then 'Program
                    If imL2View = 1 Then
                        If ilPaintRow <> ilLastLinePaint Then
                            pbcLog2.CurrentX = 15
                            pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                            pbcLog2.Line Step(0, 0)-Step(pbcLog2.Width - 30, 0), BLUE, BF
                            ilLastLinePaint = ilPaintRow
                            pbcLog2.CurrentX = tmL2Ctrls.fBoxX + fgBoxInsetX
                            pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                        End If
                        slStr = Trim$(tlEvt(ilLoop).sShow)
                        gSetShow pbcLog2, slStr, tmL2Ctrls
                        pbcLog2.Print tmL2Ctrls.sShow
                    End If
                Else    'Avail
                    If ilPaintRow <> ilLastLinePaint Then
                        pbcLog2.CurrentX = 15
                        pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
                        pbcLog2.Line Step(0, 0)-Step(pbcLog2.Width - 30, 0), BLUE, BF
                        ilLastLinePaint = ilPaintRow
                        pbcLog2.CurrentX = tmL2Ctrls.fBoxX + fgBoxInsetX
                        pbcLog2.CurrentY = tmL2Ctrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    End If
                    If ((tlEvt(ilLoop).iLineInfo And sSOverBook) = sSOverBook) Then
                        llSvCurrentX = pbcLog2.CurrentX
                        llSvCurrentY = pbcLog2.CurrentY
                        pbcLog2.Line Step(0, 30)-Step(tmL2Ctrls.fBoxW - 45, fgBoxGridH - 15), LIGHTMAGENTA, BF
                        pbcLog2.CurrentX = llSvCurrentX
                        pbcLog2.CurrentY = llSvCurrentY
                    End If
                    'llFgColor = pbcLog2.ForeColor
                    If (tlEvt(ilLoop).iLineInfo And SSLOCK) = SSLOCK Then
                        pbcLog2.ForeColor = RED
                    ElseIf (tlEvt(ilLoop).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT Then
                        pbcLog2.ForeColor = DARKYELLOW
                    End If
                    If tlEvt(ilLoop).lInfo = igPLAnfCode Then
                        pbcLog2.ForeColor = MAGENTA
                    End If
                    slStr = Trim$(tlEvt(ilLoop).sShow)
                    gSetShow pbcLog2, slStr, tmL2Ctrls
                    pbcLog2.Print tmL2Ctrls.sShow
                    pbcLog2.ForeColor = llFgColor
                End If
                tlRowNo(ilPaintRow) = ilLoop
                If (ilPaintRow = imDragRowNoSrce) And (imDragSrce = DRAGLOG2) Then
                    gInvertArea pbcLog2, CInt(tmL2Ctrls.fBoxX) \ 15, CInt(tmL2Ctrls.fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls.fBoxW) \ 15, CInt(tmL2Ctrls.fBoxH) \ 15
                End If
                ilPaintRow = ilPaintRow + 1
            End If
        End If
        ilLoop = ilLoop + 1
    Loop
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintManSch                *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint Manual scheduled contract*
'*                                                     *
'*******************************************************
Private Sub mPaintManSch(ilSource As Integer, tlCtrls As FIELDAREA)
    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim ilPaintRow As Integer
    Dim ilRow As Integer
    If ilSource = 0 Then    'Log2 area
        ilStartRow = vbcLog2.Value '(vbcLog2.LargeChange) * (vbcLog2.Value - 1) + 1
        If ilStartRow = 0 Then
            Exit Sub
        End If
        ilLoop = 0
        ilPaintRow = 1
        ilEndRow = vbcLog2.LargeChange + ilPaintRow
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < lbcL2ManSch.ListCount)
            If ilLoop >= ilStartRow - 1 Then
                pbcLog2.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                pbcLog2.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                slStr = lbcL2ManSch.List(ilLoop)
                'For ilRow = 1 To UBound(imL2ManSchInfo, 2) - 1 Step 1
                For ilRow = 0 To UBound(imL2ManSchInfo, 2) - 1 Step 1
                    If imL2ManSchInfo(6, ilRow) = ilLoop Then
                        If (lmL2ManSchInfo(1, ilRow) > 0) Or (lmL2ManSchInfo(2, ilRow) > 0) Then
                            slStr = "*" & Trim$(slStr)
                        End If
                        Exit For
                    End If
                Next ilRow
                gSetShow pbcLog2, slStr, tlCtrls
                pbcLog2.Print tlCtrls.sShow
                If (ilLoop + 1 = imDragRowNoSrce) And (imDragSrce = DRAGLOG2) Then
                    gInvertArea pbcLog2, CInt(tlCtrls.fBoxX) \ 15, CInt(tlCtrls.fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tlCtrls.fBoxW) \ 15, CInt(tlCtrls.fBoxH) \ 15
                End If
                ilPaintRow = ilPaintRow + 1
            End If
            ilLoop = ilLoop + 1
        Loop
    Else
        ilStartRow = vbcMissed.Value '(vbcLog2.LargeChange) * (vbcLog2.Value - 1) + 1
        If ilStartRow = 0 Then
            Exit Sub
        End If
        'slStr = edcDate.Text    'plcDate.Caption
        mGetEdcDate 0
        slStr = smEdcDate
        ilLoop = 0
        ilPaintRow = 1
        ilEndRow = vbcMissed.LargeChange + ilPaintRow
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < lbcAdMdManSch.ListCount)
            If ilLoop >= ilStartRow - 1 Then
                pbcMissed.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                pbcMissed.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                slStr = lbcAdMdManSch.List(ilLoop)
                'For ilRow = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
                For ilRow = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
                    If imAdMdManSchInfo(6, ilRow) = ilLoop Then
                        If (lmAdMdManSchInfo(1, ilRow) > 0) Or (lmAdMdManSchInfo(2, ilRow) > 0) Then
                            slStr = "*" & Trim$(slStr)
                        End If
                        Exit For
                    End If
                Next ilRow
                gSetShow pbcMissed, slStr, tlCtrls
                pbcMissed.Print tlCtrls.sShow
                If (ilLoop + 1 = imDragRowNoSrce) And (imDragSrce = DRAGADMD) Then
                    gInvertArea pbcMissed, CInt(tlCtrls.fBoxX) \ 15, CInt(tlCtrls.fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tlCtrls.fBoxW) \ 15, CInt(tlCtrls.fBoxH) \ 15
                End If
                ilPaintRow = ilPaintRow + 1
            End If
            ilLoop = ilLoop + 1
        Loop
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mPaintMissed                    *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Paint advertiser spot screen   *
'*                                                     *
'*******************************************************
Private Sub mPaintMissed(ilSource As Integer, tlSdfMd() As SDFMDEXT, tlCtrls As FIELDAREA)
'
'
'       ilSource(I)- 0=Log2; 1=Weekly
'
    Dim ilLoop As Integer
    Dim ilStartRow As Integer
    Dim ilEndRow As Integer
    Dim slStr As String
    Dim ilPaintRow As Integer
    Dim ilIndex As Integer
    Dim llFgColor As Long
    Dim ilPos As Integer
    Dim slChar As String
    Dim ilRet As Integer
    Dim ilStationCount As Integer
    Dim slMore As String

    'Dim llTop As Long


    'llTop = tmL2Ctrls(1).fBoxY
    'If ilSource = 0 Then
    '    pbcLog2.BackColor = vbWhite
    '    For ilLoop = 1 To vbcLog2.LargeChange + 1 Step 1
    '        pbcLog2.Line (tmL2Ctrls(1).fBoxX - 15, llTop - 15)-Step(tmL2Ctrls(1).fBoxW + 15, tmL2Ctrls(1).fBoxH + 15), BLUE, B
    '        llTop = llTop + tmL2Ctrls(1).fBoxH + 15
    '    Next ilLoop
    'Else
    '    pbcMissed.BackColor = vbWhite
    '    For ilLoop = 1 To vbcMissed.LargeChange + 1 Step 1
    '        pbcMissed.Line (tmL2Ctrls(1).fBoxX - 15, llTop - 15)-Step(tmL2Ctrls(1).fBoxW + 15, tmL2Ctrls(1).fBoxH + 15), BLUE, B
    '        llTop = llTop + tmL2Ctrls(1).fBoxH + 15
    '    Next ilLoop
    'End If

    llFgColor = pbcContract.ForeColor
    If ilSource = 0 Then
        ilStartRow = vbcLog2.Value '(vbcLog2.LargeChange) * (vbcLog2.Value - 1) + 1
        If ilStartRow = 0 Then
            Exit Sub
        End If
        ilLoop = imLBSdfMdExt   'LBound(tlSdfMd)
        ilPaintRow = 1
        ilEndRow = vbcLog2.LargeChange + ilPaintRow
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlSdfMd))
            If ilLoop >= ilStartRow Then
                'slNameCode = lbcMissedSort.List(ilLoop - 1)
                'ilRet = gParseItem(slNameCode, 2, "\", slCode)
                'ilIndex = lbcMissedSort.ItemData(ilLoop - 1)
                ilIndex = ilLoop
                pbcLog2.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                pbcLog2.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                If ((tlSdfMd(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                    pbcLog2.ForeColor = BLUE
                End If
                If ((tlSdfMd(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                    pbcLog2.ForeColor = DARKYELLOW
                End If
                If (tlSdfMd(ilLoop).sCntrType = "T") Then 'Remnant
                    pbcLog2.ForeColor = ORANGE
                End If
                If tlSdfMd(ilLoop).lChfCode <= 0 Then
                    pbcLog2.ForeColor = DARKGRAY
                End If
                If (imHighlight = 3) And (smHighlightSplitNetwork = "Y") Then
                    If tlSdfMd(ilLoop).sSplitNetwork = "Y" Then
                        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet = BTRV_ERR_NONE Then
                            If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tmSdf.lCode, tmStationsHL(), smHLInclExcl, ilStationCount) Then
                                pbcLog2.ForeColor = RED
                            Else
                                pbcLog2.ForeColor = GREEN
                            End If
                        End If
                    End If
                End If
                If lmSdfRecPosHighlight = tlSdfMd(ilIndex).lRecPos Then
                    lacL2Info.Caption = "Missed"
                    pbcLog2.FontUnderline = True
                End If
                If (imLog2Type = 0) And (imLog2Show = 1) Then
                    If tlSdfMd(ilIndex).iMissedMG Then
                        pbcMissed.FontItalic = True
                    Else
                        pbcMissed.FontItalic = False
                    End If
                    slStr = Trim$(str$(tlSdfMd(ilIndex).lCntrNo))
                    ilPos = 1
                    ilPos = InStr(1, tlSdfMd(ilIndex).sShow, " ")
                    If ilPos > 0 Then
                        slChar = Mid$(tlSdfMd(ilIndex).sShow, ilPos + 1)
                        Do While (slChar < "0") Or (slChar > "9")
                            ilPos = InStr(ilPos + 1, tlSdfMd(ilIndex).sShow, " ")
                            If ilPos > 0 Then
                                slChar = Mid$(tlSdfMd(ilIndex).sShow, ilPos + 1)
                            Else
                                ilPos = InStr(1, tlSdfMd(ilIndex).sShow, " ")
                                Exit Do
                            End If
                        Loop
                    Else
                        ilPos = Len(Trim$(tlSdfMd(ilIndex).sShow)) + 1
                    End If
                    slStr = slStr & " " & Left$(tlSdfMd(ilIndex).sShow, ilPos - 1)
                    'slStr = slStr & Str$(tlSdfMd(ilIndex).iNoOrdered) & Str$(tlSdfMd(ilIndex).iNoMissed)
                    'No Ordered removed as the value is only valid for weekly buy and looking at one week only of missed spots
                    slStr = slStr & str$(tlSdfMd(ilIndex).iNoMissed)
                Else
                    slStr = RTrim$(tlSdfMd(ilIndex).sShow)
                    'If imMore = 1 Then
                    '    ilPos = InStr(1, tlSdfMd(ilIndex).sPrice, ".")
                    '    If ilPos > 1 Then
                    '        slStr = " $" & Left$(tlSdfMd(ilIndex).sPrice, ilPos - 1) & " " & slStr
                    '    ElseIf ilPos = 1 Then
                    '        slStr = " $0 " & slStr
                    '    Else
                    '        slStr = " " & Trim$(Left$(tlSdfMd(ilIndex).sPrice, 5)) & " " & slStr
                    '    End If
                    'End If
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilIndex).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet <> BTRV_ERR_NONE Then
                        slMore = mMoreInfo(0, tlSdfMd(ilIndex).sPrice, tlSdfMd(ilIndex).sNetRegionAbbr, tlSdfMd(ilIndex).sCITFlag, tlSdfMd(ilIndex).sCopyCIT, tlSdfMd(ilIndex).sPtType, tlSdfMd(ilIndex).lCopyCode, tlSdfMd(ilIndex).iRotNo, tlSdfMd(ilIndex).sLiveCopy)
                    Else
                        slMore = mMoreInfo(tmSdf.lCode, tlSdfMd(ilIndex).sPrice, tlSdfMd(ilIndex).sNetRegionAbbr, tlSdfMd(ilIndex).sCITFlag, tlSdfMd(ilIndex).sCopyCIT, tlSdfMd(ilIndex).sPtType, tlSdfMd(ilIndex).lCopyCode, tlSdfMd(ilIndex).iRotNo, tlSdfMd(ilIndex).sLiveCopy)
                    End If
                    If slMore <> "" Then
                        slStr = " " & slMore & " " & slStr
                    End If
                End If
                gSetShow pbcLog2, slStr, tlCtrls
                pbcLog2.Print tlCtrls.sShow
                pbcLog2.FontUnderline = False
                pbcLog2.ForeColor = llFgColor
                If (ilLoop = imDragRowNoSrce) And (imDragSrce = DRAGLOG2) Then
                    gInvertArea pbcLog2, CInt(tlCtrls.fBoxX) \ 15, CInt(tlCtrls.fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tlCtrls.fBoxW) \ 15, CInt(tlCtrls.fBoxH) \ 15
                End If
                ilPaintRow = ilPaintRow + 1
            End If
            ilLoop = ilLoop + 1
        Loop
    Else
        ilStartRow = vbcMissed.Value '(vbcLog2.LargeChange) * (vbcLog2.Value - 1) + 1
        If ilStartRow = 0 Then
            Exit Sub
        End If
        ilLoop = imLBSdfMdExt   'LBound(tlSdfMd)
        ilPaintRow = 1
        ilEndRow = vbcMissed.LargeChange + ilPaintRow
        Do While (ilPaintRow <= ilEndRow) And (ilLoop < UBound(tlSdfMd))
            If ilLoop >= ilStartRow Then
                'slNameCode = lbcAdMdMissedSort.List(ilLoop - 1)
                'ilRet = gParseItem(slNameCode, 2, "\", slCode)
                'ilIndex = lbcAdMdMissedSort.ItemData(ilLoop - 1)'Val(slCode)
                ilIndex = ilLoop
                pbcMissed.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                pbcMissed.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                If (ilLoop <> imDragRowNoSrce) Or (imDragSrce <> DRAGADMD) Then
                    If tlSdfMd(ilLoop).iSelected = 1 Then
                        pbcMissed.Line (pbcMissed.CurrentX, pbcMissed.CurrentY + 30)-Step(tlCtrls.fBoxW - 45, tlCtrls.fBoxH - 30), GRAY, BF
                    End If
                End If
                pbcMissed.CurrentX = tlCtrls.fBoxX + fgBoxInsetX
                pbcMissed.CurrentY = tlCtrls.fBoxY + (ilPaintRow - 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                If ((tlSdfMd(ilLoop).iLineInfo And 8) <> 0) Then 'Virtual Vehicle or Hidden Line spot
                    pbcMissed.ForeColor = BLUE
                End If
                If ((tlSdfMd(ilLoop).iLineInfo And &H20) <> 0) Then 'Manual moved spot (PSA or Promo)
                    pbcMissed.ForeColor = DARKYELLOW
                End If
                If (tlSdfMd(ilLoop).sCntrType = "T") Then 'Remnant
                    pbcMissed.ForeColor = ORANGE
                End If
                If tlSdfMd(ilLoop).lChfCode <= 0 Then
                    pbcMissed.ForeColor = DARKGRAY
                End If
                If imHighlight = 0 Then
                    If (lmHighlightCntrCode = tlSdfMd(ilLoop).lChfCode) And (tlSdfMd(ilLoop).lChfCode > 0) Then
                        pbcMissed.ForeColor = MAGENTA
                    ElseIf (lmHighlightFeedCode = tlSdfMd(ilLoop).lFsfCode) And (tlSdfMd(ilLoop).lFsfCode > 0) Then
                        pbcMissed.ForeColor = MAGENTA
                    ElseIf imHighlightAdvtCode = tlSdfMd(ilLoop).iAdfCode Then
                        pbcMissed.ForeColor = DARKPURPLE 'BLUE
                    End If
                ElseIf (imHighlight = 3) And (smHighlightSplitNetwork = "Y") Then
                    If tlSdfMd(ilLoop).sSplitNetwork = "Y" Then
                        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        If ilRet = BTRV_ERR_NONE Then
                            If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tmSdf.lCode, tmStationsHL(), smHLInclExcl, ilStationCount) Then
                                pbcMissed.ForeColor = RED
                            Else
                                pbcMissed.ForeColor = GREEN
                            End If
                        End If
                    End If
                End If
                If lmSdfRecPosHighlight = tlSdfMd(ilIndex).lRecPos Then
                    pbcMissed.FontUnderline = True
                End If
                If tlSdfMd(ilIndex).iMissedMG Then
                    pbcMissed.FontItalic = True
                Else
                    pbcMissed.FontItalic = False
                End If
                If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1) Then
                    slStr = Trim$(str$(tlSdfMd(ilIndex).lCntrNo))
                    ilPos = 1
                    ilPos = InStr(1, tlSdfMd(ilIndex).sShow, " ")
                    If ilPos > 0 Then
                        slChar = Mid$(tlSdfMd(ilIndex).sShow, ilPos + 1)
                        Do While (slChar < "0") Or (slChar > "9")
                            ilPos = InStr(ilPos + 1, tlSdfMd(ilIndex).sShow, " ")
                            If ilPos > 0 Then
                                slChar = Mid$(tlSdfMd(ilIndex).sShow, ilPos + 1)
                            Else
                                ilPos = InStr(1, tlSdfMd(ilIndex).sShow, " ")
                                Exit Do
                            End If
                        Loop
                    Else
                        ilPos = Len(Trim$(tlSdfMd(ilIndex).sShow)) + 1
                    End If
                    slStr = slStr & " " & Left$(tlSdfMd(ilIndex).sShow, ilPos - 1)
                    'slStr = slStr & Str$(tlSdfMd(ilIndex).iLen) & "s" & Str$(tlSdfMd(ilIndex).iNoOrdered) & Str$(tlSdfMd(ilIndex).iNoMissed)
                    'No Ordered removed as the value is only valid for weekly buy and looking at one week only of missed spots
                    slStr = slStr & str$(tlSdfMd(ilIndex).iLen) & "s" & str$(tlSdfMd(ilIndex).iNoMissed)
                Else
                    slStr = RTrim$(tlSdfMd(ilIndex).sShow)
                    'If imMore = 1 Then
                    '    ilPos = InStr(1, tlSdfMd(ilIndex).sPrice, ".")
                    '    If ilPos > 1 Then
                    '        slStr = " $" & Left$(tlSdfMd(ilIndex).sPrice, ilPos - 1) & " " & slStr
                    '    ElseIf ilPos = 1 Then
                    '        slStr = " $0 " & slStr
                    '    Else
                    '        slStr = " " & Trim$(Left$(tlSdfMd(ilIndex).sPrice, 5)) & " " & slStr
                    '    End If
                    'End If
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tlSdfMd(ilIndex).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet <> BTRV_ERR_NONE Then
                        slMore = mMoreInfo(0, tlSdfMd(ilIndex).sPrice, tlSdfMd(ilIndex).sNetRegionAbbr, tlSdfMd(ilIndex).sCITFlag, tlSdfMd(ilIndex).sCopyCIT, tlSdfMd(ilIndex).sPtType, tlSdfMd(ilIndex).lCopyCode, tlSdfMd(ilIndex).iRotNo, tlSdfMd(ilIndex).sLiveCopy)
                    Else
                        slMore = mMoreInfo(tmSdf.lCode, tlSdfMd(ilIndex).sPrice, tlSdfMd(ilIndex).sNetRegionAbbr, tlSdfMd(ilIndex).sCITFlag, tlSdfMd(ilIndex).sCopyCIT, tlSdfMd(ilIndex).sPtType, tlSdfMd(ilIndex).lCopyCode, tlSdfMd(ilIndex).iRotNo, tlSdfMd(ilIndex).sLiveCopy)
                    End If
                    If slMore <> "" Then
                        slStr = " " & slMore & " " & slStr
                    End If
                End If
                If (tlSdfMd(ilLoop).lchfcxfCode > 0) Or (tlSdfMd(ilLoop).lchfcxfInt > 0) Or (tlSdfMd(ilLoop).lClfCxfCode > 0) Then
                    slStr = "*" & Trim$(slStr)
                End If
                gSetShow pbcMissed, slStr, tlCtrls
                pbcMissed.Print tlCtrls.sShow
                pbcMissed.FontUnderline = False
                If (ilLoop = imDragRowNoSrce) And (imDragSrce = DRAGADMD) Then
                    gInvertArea pbcMissed, CInt(tlCtrls.fBoxX) \ 15, CInt(tlCtrls.fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tlCtrls.fBoxW) \ 15, CInt(tlCtrls.fBoxH) \ 15
                End If
                pbcMissed.ForeColor = llFgColor
                ilPaintRow = ilPaintRow + 1
            End If
            ilLoop = ilLoop + 1
        Loop
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mReadChfClfRdfCffRec            *
'*                                                     *
'*             Created:8/02/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read records                   *
'*                                                     *
'*******************************************************
Private Function mReadChfClfRdfCffRec(llChfCode As Long, ilLineNo As Integer, llFsfCode As Long, ilOrderedGameNo As Integer, slSpotDate As String, slLnStartDate As String, slLnEndDate As String, slNoSpots As String, ilSaveIndex As Integer, ilSchGameNo As Integer) As Integer
'
'   iRet = mReadChfClfRdfCffRec(llChfCode, ilLineNo, llFsfCode, ilOrderedGameNo, slMissedDate, slStartDate, slEndDate, slNoSpots)
'   Where:
'       llChfCode (I) - Contract code
'       ilLineNo(I)- Line number
'       slMissedDate(I)- Missed date or date to find bracketing week
'       slLnStartdate(O)- line start date
'       slLnEndDate(O)- line end date
'       slNoSpots(O)- if "" then invalid week
'       tmCff(0)(O)- contains valid flight week (if sDelete = "Y", then week is invalid)
'       iRet (O)- True if all records read,
'                 False if error in read
'
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim slStartDate As String
    Dim llStartDate As Long
    Dim slEndDate As String
    Dim llEndDate As Long
    Dim llSpotDate As Long
    Dim ilNoSpots As Integer
    Dim ilVef As Integer
    Dim slGameDate As String
    Dim slMoGameDate As String
    Dim slSuGameDate As String
    Dim ilDay As Integer
    Dim tlGameCff As CFF
    Dim ilGameNo As Integer
    Dim ilGsf As Integer
    Dim ilCffFound As Integer

    slLnStartDate = ""
    slLnEndDate = ""
    slNoSpots = ""
    ilCffFound = -1
    If ilSaveIndex = 0 Then
        ReDim tmCff0(0 To 0) As CFF
    ElseIf ilSaveIndex = 1 Then
        ReDim tmCff1(0 To 0) As CFF
    End If
    tmCff(0).sDelete = "Y"  'Set as flag that illegal week
    If mReadChfClfRdfRec(llChfCode, ilLineNo, llFsfCode) Then
        If ilSaveIndex = 0 Then
            gUnpackDateLong tmChf.iStartDate(0), tmChf.iStartDate(1), lmDateChf0(0)
            gUnpackDateLong tmChf.iEndDate(0), tmChf.iEndDate(1), lmDateChf0(1)
        ElseIf ilSaveIndex = 1 Then
            gUnpackDateLong tmChf.iStartDate(0), tmChf.iStartDate(1), lmDateChf1(0)
            gUnpackDateLong tmChf.iEndDate(0), tmChf.iEndDate(1), lmDateChf1(1)
        End If
        ilGameNo = ilOrderedGameNo
        If tmClf.sSportsByWeek = "W" Then
            If mGamesInSameWeek(ilOrderedGameNo, ilSchGameNo) Then
                ilGameNo = ilSchGameNo
            End If
        End If
        llStartDate = 0
        llEndDate = 0
        llSpotDate = gDateValue(slSpotDate)
        If llChfCode > 0 Then
            ilVef = gBinarySearchVef(tmClf.iVefCode)
            If ilVef <> -1 Then
                If tgMVef(ilVef).sType <> "G" Then
                    tmCffSrchKey.lChfCode = llChfCode
                    tmCffSrchKey.iClfLine = ilLineNo
                    tmCffSrchKey.iCntRevNo = tmClf.iCntRevNo
                    tmCffSrchKey.iPropVer = tmClf.iPropVer
                    tmCffSrchKey.iStartDate(0) = 0
                    tmCffSrchKey.iStartDate(1) = 0
                    ilRet = btrGetGreaterOrEqual(hmCff, tmCff(1), imCffRecLen, tmCffSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                Else
                    tmCgfSrchKey1.lClfCode = tmClf.lCode
                    ilRet = btrGetEqual(hmCgf, tmCgf, imCgfRecLen, tmCgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    If tmClf.lCode = tmCgf.lClfCode Then
                        gCgfToCff tmClf, tmCgf, tmCgfCff()
                        tmCff(1) = tmCgfCff(0)
                        If tmCgf.iGameNo <> ilGameNo Then
                            tmCff(1).iCntRevNo = -1 'Force to read next
                        Else
                            ilCffFound = 1
                            If tmClf.sSportsByWeek = "W" Then
                                gUnpackDate tmCff(1).iStartDate(0), tmCff(1).iStartDate(1), slGameDate
                                slMoGameDate = gObtainPrevMonday(slGameDate)
                                gPackDate slMoGameDate, tmCff(1).iStartDate(0), tmCff(1).iStartDate(1)
                                gUnpackDate tmCff(1).iEndDate(0), tmCff(1).iEndDate(1), slGameDate
                                slSuGameDate = gObtainNextSunday(slGameDate)
                                gPackDate slSuGameDate, tmCff(1).iEndDate(0), tmCff(1).iEndDate(1)
                                If ilOrderedGameNo <> ilSchGameNo Then
                                    For ilDay = 0 To 6 Step 1
                                        tmCff(1).iDay(ilDay) = tmCff(1).iDay(ilDay) + 1
                                    Next ilDay
                                End If
                            End If
                            gUnpackDate tmCgf.iAirDate(0), tmCgf.iAirDate(1), slGameDate
                            slMoGameDate = gObtainPrevMonday(slGameDate)
                            tmCffSrchKey.lChfCode = llChfCode
                            tmCffSrchKey.iClfLine = ilLineNo
                            tmCffSrchKey.iCntRevNo = tmClf.iCntRevNo
                            tmCffSrchKey.iPropVer = tmClf.iPropVer
                            gPackDate slMoGameDate, tmCffSrchKey.iStartDate(0), tmCffSrchKey.iStartDate(1)
                            ilRet = btrGetGreaterOrEqual(hmCff, tlGameCff, imCffRecLen, tmCffSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                            If ilRet = BTRV_ERR_NONE Then
                                tmCff(1).sPriceType = tlGameCff.sPriceType
                                tmCff(1).lActPrice = tlGameCff.lActPrice
                            End If
                        End If
                    Else
                        tmCff(1).lChfCode = -1
                    End If
                End If
            Else
                mReadChfClfRdfCffRec = False
                Exit Function
            End If
        Else
            tmCff(1) = tmFCff(0)
            tmCff(1).lChfCode = llChfCode
            tmCff(1).iClfLine = ilLineNo
            ilRet = BTRV_ERR_NONE
        End If
        Do While (ilRet = BTRV_ERR_NONE) And (tmCff(1).lChfCode = llChfCode) And (tmCff(1).iClfLine = ilLineNo)
            If (tmCff(1).iCntRevNo = tmClf.iCntRevNo) And (tmCff(1).iPropVer = tmClf.iPropVer) Then 'And (tmCff(1).sDelete <> "Y") Then
                If ilSaveIndex = 0 Then
                    tmCff0(UBound(tmCff0)) = tmCff(1)
                    ReDim Preserve tmCff0(0 To UBound(tmCff0) + 1) As CFF
                ElseIf ilSaveIndex = 1 Then
                    tmCff1(UBound(tmCff1)) = tmCff(1)
                    ReDim Preserve tmCff1(0 To UBound(tmCff1) + 1) As CFF
                End If
                tmCff(1).sDelete = "N"  'Set flight as if not deleted (delete is set if line replaced)
                                        'Only if line is altered (not scheduled will this happen)
                gUnpackDate tmCff(1).iStartDate(0), tmCff(1).iStartDate(1), slStartDate    'Week Start date
                gUnpackDate tmCff(1).iEndDate(0), tmCff(1).iEndDate(1), slEndDate    'Week Start date
                If llStartDate = 0 Then
                    llStartDate = gDateValue(slStartDate)
                    llEndDate = gDateValue(slEndDate)
                Else
                    If gDateValue(slStartDate) < llStartDate Then
                        llStartDate = gDateValue(slStartDate)
                    End If
                    If gDateValue(slEndDate) > llEndDate Then
                        llEndDate = gDateValue(slEndDate)
                    End If
                End If
                If (llSpotDate >= gDateValue(slStartDate)) And (llSpotDate <= gDateValue(slEndDate)) Then
                    tmCff(0) = tmCff(1)
                    ilNoSpots = 0
                    'If (tmCff(0).iSpotsWk <> 0) Or (tmCff(0).iXSpotsWk <> 0) Then 'Weekly
                    If (tmCff(0).sDyWk <> "D") Then  'Weekly
                        ilNoSpots = tmCff(0).iSpotsWk + tmCff(0).iXSpotsWk
                    Else    'Daily
                        For ilLoop = 0 To 6 Step 1
                            ilNoSpots = ilNoSpots + tmCff(0).iDay(ilLoop)
                        Next ilLoop
                    End If
                    slNoSpots = Trim$(str$(ilNoSpots))
                    'Don't exit as end date of all flights must be determined
                End If
            End If
            If llChfCode > 0 Then
                If tgMVef(ilVef).sType <> "G" Then
                    ilRet = btrGetNext(hmCff, tmCff(1), imCffRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                Else
                    ilRet = btrGetNext(hmCgf, tmCgf, imCgfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                    If (tmClf.lCode <> tmCgf.lClfCode) Or (ilRet <> BTRV_ERR_NONE) Then
                        If (tgMVef(ilVef).sType = "G") And (ilCffFound = -1) And (tmClf.sSportsByWeek = "W") Then
                            If mGamesInSameWeek(ilOrderedGameNo, ilSchGameNo) Then
                                'Not a purchased game, create it
                                For ilGsf = LBound(tmGsfInfo) To UBound(tmGsfInfo) - 1 Step 1
                                    If tmGsfInfo(ilGsf).iGameNo = ilGameNo Then
                                        gPackDateLong tmGsfInfo(ilGsf).lGameDate, tmCgf.iAirDate(0), tmCgf.iAirDate(1)
                                        tmCgf.iNoSpots = 0  'set to one later in the code
                                        tmCgf.iGameNo = ilGameNo
                                        ilCffFound = 1
                                        ilRet = BTRV_ERR_NONE
                                        Exit For
                                    End If
                                Next ilGsf
                            Else
                                Exit Do
                            End If
                            If ilCffFound = -1 Then
                                Exit Do
                            End If
                        Else
                            Exit Do
                        End If
                    End If
                    If ilRet <> BTRV_ERR_NONE Then
                        Exit Do
                    End If
                    gCgfToCff tmClf, tmCgf, tmCgfCff()
                    tmCff(1) = tmCgfCff(0)
                    If tmCgf.iGameNo <> ilGameNo Then
                        tmCff(1).iCntRevNo = -1 'Force to read next
                    Else
                        ilCffFound = 1
                        If tmClf.sSportsByWeek = "W" Then
                            gUnpackDate tmCff(1).iStartDate(0), tmCff(1).iStartDate(1), slGameDate
                            slMoGameDate = gObtainPrevMonday(slGameDate)
                            gPackDate slMoGameDate, tmCff(1).iStartDate(0), tmCff(1).iStartDate(1)
                            gUnpackDate tmCff(1).iEndDate(0), tmCff(1).iEndDate(1), slGameDate
                            slSuGameDate = gObtainNextSunday(slGameDate)
                            gPackDate slSuGameDate, tmCff(1).iEndDate(0), tmCff(1).iEndDate(1)
                            If ilOrderedGameNo <> ilSchGameNo Then
                                For ilDay = 0 To 6 Step 1
                                    tmCff(1).iDay(ilDay) = tmCff(1).iDay(ilDay) + 1
                                Next ilDay
                            End If
                        End If
                        gUnpackDate tmCgf.iAirDate(0), tmCgf.iAirDate(1), slGameDate
                        slMoGameDate = gObtainPrevMonday(slGameDate)
                        tmCffSrchKey.lChfCode = llChfCode
                        tmCffSrchKey.iClfLine = ilLineNo
                        tmCffSrchKey.iCntRevNo = tmClf.iCntRevNo
                        tmCffSrchKey.iPropVer = tmClf.iPropVer
                        gPackDate slMoGameDate, tmCffSrchKey.iStartDate(0), tmCffSrchKey.iStartDate(1)
                        ilRet = btrGetGreaterOrEqual(hmCff, tlGameCff, imCffRecLen, tmCffSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
                        If ilRet = BTRV_ERR_NONE Then
                            tmCff(1).sPriceType = tlGameCff.sPriceType
                            tmCff(1).lActPrice = tlGameCff.lActPrice
                        End If
                    End If
                End If
            Else
                Exit Do
            End If
        Loop
        If llStartDate > 0 Then
            slLnStartDate = Format$(llStartDate, "m/d/yy")
            slLnEndDate = Format$(llEndDate, "m/d/yy")
        End If
        mReadChfClfRdfCffRec = True
    Else
        mReadChfClfRdfCffRec = False
    End If
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mReadChfClfRdfRec               *
'*                                                     *
'*             Created:8/02/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Read records                   *
'*                                                     *
'*******************************************************
Private Function mReadChfClfRdfRec(llChfCode As Long, ilLineNo As Integer, llFsfCode As Long) As Integer
'
'   iRet = mReadChfClfRdfRec(llChfCode, ilLineNo)
'   Where:
'       llChfCode (I) - Contract code
'       ilLineNo(I)- Line number
'       iRet (O)- True if all records read,
'                 False if error in read
'
    Dim ilRet As Integer
    If llChfCode > 0 Then
        'If llChfCode <> tmChf.lCode Then
            tmChfSrchKey.lCode = llChfCode
            ilRet = btrGetEqual(hmCHF, tmChf, imCHFRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet <> BTRV_ERR_NONE Then
                mReadChfClfRdfRec = False
                Exit Function
            End If
        'End If
        'If (tmClf.lChfCode <> llChfCode) Or (tmClf.iLine <> ilLineNo) Then
            tmClfSrchKey.lChfCode = llChfCode
            tmClfSrchKey.iLine = ilLineNo
            tmClfSrchKey.iCntRevNo = 32000 ' Plug with very high number
            tmClfSrchKey.iPropVer = 32000 ' Plug with very high number
            ilRet = btrGetGreaterOrEqual(hmClf, tmClf, imClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)
            Do While (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = llChfCode) And (tmClf.iLine = ilLineNo) And ((tmClf.sSchStatus <> "M") And (tmClf.sSchStatus <> "F"))    'And (tmClf.sSchStatus = "A")
                ilRet = btrGetNext(hmClf, tmClf, imClfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
            Loop
        'Else
        '    ilRet = BTRV_ERR_NONE
        'End If
        If (ilRet = BTRV_ERR_NONE) And (tmClf.lChfCode = llChfCode) And (tmClf.iLine = ilLineNo) Then
            If tmLnRdf.iCode <> tmClf.iRdfCode Then
                tmRdfSrchKey.iCode = tmClf.iRdfCode  ' Rate card program/time File Code
                ilRet = btrGetEqual(hmRdf, tmLnRdf, imRdfRecLen, tmRdfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet <> BTRV_ERR_NONE Then
                    igBtrError = ilRet
                    mReadChfClfRdfRec = False
                    Exit Function
                End If
            End If
            mReadChfClfRdfRec = True
        Else
            igBtrError = ilRet
            mReadChfClfRdfRec = False
        End If
    Else
        tmFSFSrchKey.lCode = llFsfCode
        ilRet = btrGetEqual(hmFsf, tmFsf, imFsfRecLen, tmFSFSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        gMoveFeedToCntr tmFsf, tmLnRdf, tmChf, tmClf, tmFCff(), hmFnf, hmPrf
        mReadChfClfRdfRec = True
    End If
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:gRemoveEvt                      *
'*                                                     *
'*             Created:5/18/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Remove spot event from array    *
'*                     and adjust remainder record     *
'*                                                     *
'*******************************************************
Private Function mRemoveEvt(llSdfRecPos As Long, ilCorrectSsfIndies As Integer, tlEvt() As EVTINFO, tlVcf() As VCF) As Integer
'
'   ilRet = mRemoveEvt(llSdfRecPos, ilCorrectSsfIndies, tlEvt(), tlVcf())
'   Where:
'       llSdfRecPos(I)- Sdf record position for record to be removed
'       ilCorrectSsfIndies(I)- True=Decrement tlEvt().iSpotIndex if same Ssf record
'                              False= leave indices alone
'       tlEvt()(I/O)- Event array
'
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilFind99 As Integer
    Dim ilSec As Integer
    Dim ilUnits As Integer
    Dim slUnits As String
    Dim slStr As String
    Dim ilSsfIndex As Integer
    Dim llSsfRecPos As Long
    Dim ilRemoveRec As Integer
    Dim ilSpot As Integer
    Dim ilAvail As Integer
    Dim ilAvailIndex As Integer
    ilRemoveRec = True
    ilFind99 = True
    'For ilIndex = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilIndex = imLBEvt To UBound(tlEvt) - 1 Step 1
        If (tlEvt(ilIndex).iType = 100) And (llSdfRecPos = tlEvt(ilIndex).lTime) Then
            'If removing secondary, ignore adjusting type = 99
            If (tlEvt(ilIndex).iLineInfo And &H1000) = &H1000 Then
                ilFind99 = False
            End If
            If ilIndex + 1 <= UBound(tlEvt) - 1 Then
                If (tlEvt(ilIndex).iLineInfo And &H800) = &H800 Then
                    'Change secondary to be primary
                    If (tlEvt(ilIndex + 1).iLineInfo And &H1000) = &H1000 Then
                        tlEvt(ilIndex + 1).iLineInfo = (tlEvt(ilIndex + 1).iLineInfo And (Not &H1000)) Or &H800
                        ilFind99 = False
                    End If
                End If
            End If
            ilSsfIndex = tlEvt(ilIndex).iSsfIndex
            llSsfRecPos = tlEvt(ilIndex).lSsfRecPos
            ilSec = tlEvt(ilIndex).iUnits   'Spot type length is stored within units
            ilLoop = ilIndex
            For ilLoop = ilIndex To UBound(tlEvt) - 2 Step 1
                If ilFind99 Then
                    If tlEvt(ilLoop + 1).iType = 99 Then
                        'Adjust values then move
                        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                            tlEvt(ilLoop + 1).iType = 99
                            tlEvt(ilLoop + 1).lLen = tlEvt(ilLoop + 1).lLen + ilSec
                            tlEvt(ilLoop + 1).iUnits = tlEvt(ilLoop + 1).iUnits + 1
                            slStr = "  " & Trim$(str$(tlEvt(ilLoop + 1).iUnits)) & "/" & Trim$(str$(tlEvt(ilLoop + 1).lLen))   'Time/Units/Seconds
                            tlEvt(ilLoop + 1).sShow = slStr   'Time/Units/Seconds
                        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                            tlEvt(ilLoop + 1).iType = 99
                            tlEvt(ilLoop + 1).lLen = tlEvt(ilLoop + 1).lLen + ilSec
                            tlEvt(ilLoop + 1).iUnits = tlEvt(ilLoop + 1).iUnits + 1
                            slStr = "  " & Trim$(str$(tlEvt(ilLoop + 1).iUnits)) & "/" & Trim$(str$(tlEvt(ilLoop + 1).lLen))   'Time/Units/Seconds
                            tlEvt(ilLoop + 1).sShow = slStr   'Time/Units/Seconds
                        ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
                            tlEvt(ilLoop + 1).iType = 99
                            tlEvt(ilLoop + 1).lLen = 0
                            tlEvt(ilLoop + 1).iUnits = 0
                            slStr = "  " & slUnits     'Time/Units/Seconds
                            tlEvt(ilLoop + 1).sShow = slStr   'Time/Units/Seconds
                        End If
                        ilRemoveRec = True
                        ilFind99 = False
                    ElseIf tlEvt(ilLoop + 1).iType <> 100 Then  'Create remainder record in whole
                        'Obtain original units/secs
                        'For ilAvailIndex = ilIndex - 1 To LBound(tlEvt) Step -1
                        For ilAvailIndex = ilIndex - 1 To imLBEvt Step -1
                            If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
                                ilSec = tlEvt(ilAvailIndex).lLen
                                ilUnits = tlEvt(ilAvailIndex).iUnits
                                ilAvail = ilAvailIndex
                                Exit For
                            End If
                        Next ilAvailIndex
                        For ilSpot = ilAvail + 1 To UBound(tlEvt) - 1 Step 1
                            If tlEvt(ilSpot).iType <> 100 Then
                                Exit For
                            End If
                            If (llSdfRecPos <> tlEvt(ilSpot).lTime) And (tlEvt(ilSpot).iUnits >= 0) Then
                                If (tlEvt(ilSpot).iLineInfo And &H1000) <> &H1000 Then
                                    If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                                        ilSec = ilSec - tlEvt(ilSpot).iUnits
                                        ilUnits = ilUnits - 1
                                    ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                                        ilSec = ilSec - tlEvt(ilSpot).iUnits
                                        ilUnits = ilUnits - 1
                                    ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
                                        ilSec = ilSec - tlEvt(ilSpot).iUnits
                                        ilUnits = ilUnits - 1
                                    End If
                                End If
                            End If
                        Next ilSpot
                        'Create remaining record as replacement, stop the move
                        tlEvt(ilLoop).iSsfIndex = 0
                        tlEvt(ilLoop).lSsfRecPos = 0
                        tlEvt(ilLoop).lTime = 0
                        tlEvt(ilLoop).lInfo = 0
                        tlEvt(ilLoop).iMnfComp1 = 0
                        tlEvt(ilLoop).iMnfComp2 = 0
                        If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                            tlEvt(ilLoop).iType = 99
                            tlEvt(ilLoop).lLen = ilSec
                            tlEvt(ilLoop).iUnits = ilUnits
                            slStr = "  " & Trim$(str$(tlEvt(ilLoop).iUnits)) & "/" & Trim$(str$(tlEvt(ilLoop).lLen))     'Time/Units/Seconds
                            tlEvt(ilLoop).sShow = slStr     'Time/Units/Seconds
                        ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                            tlEvt(ilLoop).iType = 99
                            tlEvt(ilLoop).lLen = ilSec
                            tlEvt(ilLoop).iUnits = ilUnits
                            slStr = "  " & Trim$(str$(tlEvt(ilLoop).iUnits)) & "/" & Trim$(str$(tlEvt(ilLoop).lLen))     'Time/Units/Seconds
                            tlEvt(ilLoop).sShow = slStr     'Time/Units/Seconds
                        ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
                            tlEvt(ilLoop).iType = 99
                            tlEvt(ilLoop).lLen = 0
                            tlEvt(ilLoop).iUnits = 0
                            slStr = "  " & slUnits     'Time/Units/Seconds
                            tlEvt(ilLoop).sShow = slStr     'Time/Units/Seconds
                        End If
                        ilRemoveRec = False
                        ilFind99 = False
                    End If
                End If
                If ilCorrectSsfIndies Then
                    If llSsfRecPos = tlEvt(ilLoop + 1).lSsfRecPos Then
                        tlEvt(ilLoop + 1).iSsfIndex = tlEvt(ilLoop + 1).iSsfIndex - 1
                    End If
                End If
                If ilRemoveRec Then
                    tlEvt(ilLoop) = tlEvt(ilLoop + 1)
                    If ilFind99 Then
                        tlEvt(ilLoop + 1).iUnits = -1   'Avoid count spot that was moved up when computing remainder
                    End If
                End If
            Next ilLoop
            If ilFind99 Then    'Last spot within record removed
                'Obtain original units/secs
                'For ilAvailIndex = ilIndex - 1 To LBound(tlEvt) Step -1
                For ilAvailIndex = ilIndex - 1 To imLBEvt Step -1
                    If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
                        ilSec = tlEvt(ilAvailIndex).lLen
                        ilUnits = tlEvt(ilAvailIndex).iUnits
                        ilAvail = ilAvailIndex
                        Exit For
                    End If
                Next ilAvailIndex
                For ilSpot = ilAvail + 1 To UBound(tlEvt) - 1 Step 1
                    If tlEvt(ilSpot).iType <> 100 Then
                        Exit For
                    End If
                    If (llSdfRecPos <> tlEvt(ilSpot).lTime) And (tlEvt(ilSpot).iUnits >= 0) Then
                        If (tlEvt(ilSpot).iLineInfo And &H1000) <> &H1000 Then
                            If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                                ilSec = ilSec - tlEvt(ilSpot).iUnits
                                ilUnits = ilUnits - 1
                            ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                                ilSec = ilSec - tlEvt(ilSpot).iUnits
                                ilUnits = ilUnits - 1
                            ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
                                ilSec = ilSec - tlEvt(ilSpot).iUnits
                                ilUnits = ilUnits - 1
                            End If
                        End If
                    End If
                Next ilSpot
                'Create remaining record
                ilLoop = UBound(tlEvt) - 1
                tlEvt(ilLoop).iSsfIndex = 0
                tlEvt(ilLoop).lSsfRecPos = 0
                tlEvt(ilLoop).lTime = 0
                tlEvt(ilLoop).lInfo = 0
                tlEvt(ilLoop).iMnfComp1 = 0
                tlEvt(ilLoop).iMnfComp2 = 0
                If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
                    tlEvt(ilLoop).iType = 99
                    tlEvt(ilLoop).lLen = ilSec
                    tlEvt(ilLoop).iUnits = ilUnits
                    slStr = "  " & Trim$(str$(tlEvt(ilLoop).iUnits)) & "/" & Trim$(str$(ilSec))     'Time/Units/Seconds
                    tlEvt(ilLoop).sShow = slStr     'Time/Units/Seconds
                ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
                    tlEvt(ilLoop).iType = 99
                    tlEvt(ilLoop).lLen = ilSec
                    tlEvt(ilLoop).iUnits = ilUnits
                    slStr = "  " & Trim$(str$(tlEvt(ilLoop).iUnits)) & "/" & Trim$(str$(ilSec))     'Time/Units/Seconds
                    tlEvt(ilLoop).sShow = slStr     'Time/Units/Seconds
                ElseIf tgVpf(imVpfIndex).sSSellOut = "T" Then
                    tlEvt(ilLoop).iType = 99
                    tlEvt(ilLoop).lLen = 0
                    tlEvt(ilLoop).iUnits = 0
                    slStr = "  " & slUnits     'Time/Units/Seconds
                    tlEvt(ilLoop).sShow = slStr     'Time/Units/Seconds
                End If
                ilRemoveRec = False
                ilFind99 = False
            End If
            If ilRemoveRec Then
                'If UBound(tlEvt) > 1 Then
                If UBound(tlEvt) > imLBEvt Then
                    ReDim Preserve tlEvt(0 To UBound(tlEvt) - 1) As EVTINFO
                End If
            End If
            mRemoveEvt = True
            'If UBound(tlVcf) > 1 Then
            If UBound(tlVcf) > 0 Then
                ilSpot = UBound(tlEvt) - 1
                Do While ilSpot >= LBound(tlEvt)
                    If (tlEvt(ilSpot).iType = 101) And (llSdfRecPos = tlEvt(ilSpot).lTime) Then
                        For ilLoop = ilSpot To UBound(tlEvt) - 2 Step 1
                            tlEvt(ilLoop) = tlEvt(ilLoop + 1)
                        Next ilLoop
                        'If UBound(tlEvt) > 1 Then
                        If UBound(tlEvt) > imLBEvt Then
                            ReDim Preserve tlEvt(0 To UBound(tlEvt) - 1) As EVTINFO
                        End If
                        'Exit For
                    End If
                    ilSpot = ilSpot - 1
                Loop
            End If
            Exit Function
        End If
    Next ilIndex
    mRemoveEvt = False
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSchdUnschd                     *
'*                                                     *
'*             Created:5/17/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Schedule spots missed          *
'*                                                     *
'*******************************************************
Private Function mSchdUnschd() As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim llDate As Long
    Dim llSDate As Long
    Dim llEDate As Long
    Dim slDate As String
    Dim ilStartCount As Integer
    Dim ilLogDay As Integer

    If Trim$(edcDate.Text) = "" Then
        mSchdUnschd = True
        Exit Function
    End If
    lgNoBonusRemoved = 0
    'Remove Move; Compact; Preempt passes
    sgMovePass = "N"
    sgCompPass = "N"
    Screen.MousePointer = vbHourglass
    pbcReschd.Visible = True
    pbcReschd.ZOrder vbBringToFront
    DoEvents
    'ReDim lgReschSdfCode(1 To 1) As Long
    ReDim lgReschSdfCode(0 To 0) As Long
    If imDW = 1 Then
        If imAdMdType <= 3 Then
            ilStartCount = UBound(tmAdMdSdfMdExt)
            'slDate = edcDate.Text   'plcDate.Caption    'Format$(gNow(), "m/d/yy")
            If tmVef.sType <> "G" Then
                mGetEdcDate 0
                slDate = smEdcDate
                llSDate = gDateValue(gObtainPrevMonday(slDate))
                llEDate = llSDate + 6
                'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmAdMdSdfMdExt(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet = BTRV_ERR_NONE Then
                        gUnpackDateLong tmSdf.iDate(0), tmSdf.iDate(1), llDate
                        If (tmSdf.sSchStatus = "M") And (llDate >= llSDate) And (llDate <= llEDate) Then
                            lgReschSdfCode(UBound(lgReschSdfCode)) = tmSdf.lCode
                            'ReDim Preserve lgReschSdfCode(1 To UBound(lgReschSdfCode) + 1) As Long
                            ReDim Preserve lgReschSdfCode(LBound(lgReschSdfCode) To UBound(lgReschSdfCode) + 1) As Long
                        End If
                    End If
                Next ilLoop
            Else
                'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmAdMdSdfMdExt(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If ilRet = BTRV_ERR_NONE Then
                        ilLogDay = mGetGameColumnNo(tmSdf.iGameNo)
                        If ilLogDay <> -1 Then
                            If (tmSdf.sSchStatus = "M") And (tmSdf.iGameNo > 0) Then
                                lgReschSdfCode(UBound(lgReschSdfCode)) = tmSdf.lCode
                                'ReDim Preserve lgReschSdfCode(1 To UBound(lgReschSdfCode) + 1) As Long
                                ReDim Preserve lgReschSdfCode(LBound(lgReschSdfCode) To UBound(lgReschSdfCode) + 1) As Long
                            End If
                        End If
                    End If
                Next ilLoop
            End If
        End If
    Else
        If imLog2Type <= 3 Then
            ilStartCount = UBound(tmSdfMdExt)
            slDate = edcLog1Dt.Text
            llSDate = gDateValue(gObtainPrevMonday(slDate))
            llEDate = llSDate + 6
            'For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) - 1 Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmSdfMdExt) - 1 Step 1
                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmSdfMdExt(ilLoop).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                If ilRet = BTRV_ERR_NONE Then
                    If tmSdf.sSchStatus = "M" Then
                        lgReschSdfCode(UBound(lgReschSdfCode)) = tmSdf.lCode
                        'ReDim Preserve lgReschSdfCode(1 To UBound(lgReschSdfCode) + 1) As Long
                        ReDim Preserve lgReschSdfCode(LBound(lgReschSdfCode) To UBound(lgReschSdfCode) + 1) As Long
                    End If
                End If
            Next ilLoop
        End If
    End If
    'If UBound(lgReschSdfCode) > 1 Then
    If UBound(lgReschSdfCode) > LBound(lgReschSdfCode) Then
        gGetSchParameters
        'gObtainMissedReasonCode
        Randomize   'Remove this if same results are to be obtained
        If gOpenSchFiles() Then
            igReschNoPasses = 2
            If tgVpf(imVpfIndex).sMoveLLD <> "Y" Then
                igSetEarliestDateAsToday = 1
            Else
                igSetEarliestDateAsToday = 2
            End If
            ilRet = gReSchSpots(True, 0, "YYYYYYY", 0, 86400)
            igSetEarliestDateAsToday = 1
            igReschNoPasses = 1
            gCloseSchFiles
            mForceRepaintWeekly False
            If imDW = 1 Then
                ilStartCount = ilStartCount - UBound(tmAdMdSdfMdExt)
            Else
                ilStartCount = ilStartCount - UBound(tmSdfMdExt)
            End If
            pbcReschd.Visible = False
            Screen.MousePointer = vbDefault
            ilRet = MsgBox(Trim$(str$(ilStartCount)) & " spots scheduled from missed, " & Trim$(str$(lgNoBonusRemoved)) & " bonus spots deleted", vbOKOnly + vbExclamation, "ReSchd")
        End If
    End If
    pbcReschd.Visible = False
    Screen.MousePointer = vbDefault
    mSchdUnschd = True
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSchSpot                        *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Add spot to Ssf and event array*
'*                                                     *
'*******************************************************
Private Function mSchSpot(slInSchStatus As String, ilSpotFrom As Integer, slLogDate As String, ilGameNo As Integer, llSdfRecPos As Long, ilBkQH As Integer, tlAddEvt As EVTINFO, llSsfAvailRecPos As Long, ilSsfAvailIndex As Integer, ilInPosition As Integer, tlSmf As SMF, ilInPriceLevel As Integer) As Integer
'
'   ilRet = mSchSpot(slSchStatus, ilSpotFrom, slLogDate, llSdfRecPos, tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition)
'   Where:
'       slSchStatus(I)- "S" scheduled as spot; "G" schedule as Makegood; "O" schedule as Outside contract limits
'       ilSpotFrom(I)- 0=Spot from tmAdMdSdfMdExt; 1=Spot from tmSdfMdExt
'       slLogDate(I)- Log date that spot is being added within
'       llSdfRecPos(I)- Sdf record position of spot to ne added
'       ilBkQH(I)- Number of booking quarter hours (or 1000 if manual)
'       tlAddEvt(I)- Event structure of spot
'       llSsfAvailRecPos(I)- Original avail Ssf record position
'       ilSsfAvailIndex(I)- Original avail Ssf index within Ssf
'       ilPosition(I)- Position number to add spot within avail
'
'       ilRet = True (booked ok); =False(i/o error)
'
    Dim slDate As String
    Dim llDate As Long
    Dim ilLogDay As Integer
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilFreedom As Integer
    Dim slSchStatus As String
    Dim ilPriceLevel As Integer
    Dim ilTypeSplitNetwork As Integer
    Dim ilPosition As Integer
    Dim ilOrderedGameNo As Integer
    '3/8/13: Add date test
    Dim llFromDate As Long
    Dim llFromMoDate As Long
    Dim llToDate As Long
    Dim llToMoDate As Long
    Dim slSdfSchStatus As String

    ilPriceLevel = ilInPriceLevel
    slSchStatus = slInSchStatus
    ilPosition = ilInPosition
    tlAddEvt.iLineInfo = tlAddEvt.iLineInfo And &H7FF9   'Retain pending  and virtual vehicle flag
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mSchSpot-GetDirect Sdf(1)"
        mSchSpot = False
        Exit Function
    End If
    slSdfSchStatus = tmSdf.sSchStatus
    ilOrderedGameNo = tmSdf.iGameNo
    '3/8/13: Add date test
    gUnpackDateLong tmSdf.iDate(0), tmSdf.iDate(1), llFromDate
    llFromMoDate = llFromDate - gWeekDayLong(llFromDate)
    'End 3/8/13
    If (tmSdf.sSchStatus = "G") Or (tmSdf.sSchStatus = "O") Then
        imSmfRecLen = Len(tlSmf)
        tmSmfSrchKey2.lCode = tmSdf.lCode
        ilRet = btrGetEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            ilOrderedGameNo = tlSmf.iGameNo
            '3/8/13: Add date test
            gUnpackDateLong tlSmf.iMissedDate(0), tlSmf.iMissedDate(1), llFromDate
            llFromMoDate = llFromDate - gWeekDayLong(llFromDate)
            'End 3/8/13
        End If
    End If
    If slSchStatus = "S" Then
        If tmSdf.sTracer = "*" Then
            If tmSdf.sSpotType = "X" Then
                slSchStatus = "O"
            Else
                slSchStatus = "G"
            End If
            tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H200   'Set M for G Spot flag
        End If
    End If
    If (slSchStatus = "G") Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or 2   'Set G flag
    ElseIf (slSchStatus = "O") Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or 4   'Set G flag
    End If
    'Clear up internal files
    If tmVef.sType <> "G" Then
        ilLogDay = gWeekDayStr(slLogDate)
    Else
        If imDW = 0 Then
            'Using 0 as just trying to get game date
            slDate = mFindGameNoDate(ilGameNo, 0)
            If slDate = "" Then
                mSchSpot = False
                Exit Function
            End If
            ilLogDay = gWeekDayStr(slDate)
            llDate = gDateValue(slDate)
        Else
            ilLogDay = mGetGameColumnNo(ilGameNo)
        End If
    End If
    'gBookSpot read in Ssf and Sdf
    ilRet = mReadChfClfRdfRec(tmSdf.lChfCode, tmSdf.iLineNo, tmSdf.lFsfCode)
    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
    If ilRet <> BTRV_ERR_NONE Then
        igBtrError = ilRet
        sgErrLoc = "mSchSpot-GetDirect Sdf(2)"
        mSchSpot = False
        Exit Function
    End If
    If ilBkQH <= 1000 Then  'Above 1000 is DR; Remnant; PI; Trade; PSA; Promo
        If (slSchStatus = "G") Or (slSchStatus = "O") Then
            ilFreedom = 0
        Else
            ilFreedom = ilBkQH
        End If
    Else    'D.R.; Remnant; PI, Trade; Promo; PSA
        ilFreedom = ilBkQH
    End If
    If tmSdf.sSpotType = "X" Then
        If tmChf.sType = "S" Then
            ilFreedom = 1060
        ElseIf tmChf.sType = "M" Then
            ilFreedom = 1050
        ElseIf tmChf.sType = "Q" Then
            ilFreedom = 1030
        Else
            ilFreedom = 1045
        End If
        ilPriceLevel = 0
    End If
    'BookSpot Re-Read Ssf so handle is correct
    ilTypeSplitNetwork = False
    If (tmClf.lRafCode > 0) Then
        If smSplitNetworkType = "" Then
            smSplitNetworkType = "P"
            smSplitNetworkMixLen = "N"
        End If
        If smSplitNetworkType = "P" Then
            If ilPosition > 0 Then
                ilTypeSplitNetwork = True
                'ilPosition = 1
            End If
        Else
            ilPosition = ilPosition + 1
        End If
    End If
    ilRet = gBookSpot(slSchStatus, hmSdf, tmSdf, llSdfRecPos, ilFreedom, hmSsf, tmSsf(ilLogDay), llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, tmChf, tmClf, tmLnRdf, imVpfIndex, hmSmf, tlSmf, hmClf, hmCrf, ilPriceLevel, ilTypeSplitNetwork, hmSxf, hmGsf, smOverbookMode)
    If Not ilRet Then
        mSchSpot = False
        Exit Function
    End If
    If (bmClearLogAlert) Then
        ilRet = gAlertClear("A", "L", "M", 0, tmSdf.iVefCode, slLogDate)
    End If
    bmClearLogAlert = False
    If ilOrderedGameNo <> ilGameNo Then
        If slSchStatus = "S" Then
            '3/8/13: Add date test
            gUnpackDateLong tmSdf.iDate(0), tmSdf.iDate(1), llToDate
            llToMoDate = llToDate - gWeekDayLong(llToDate)
            mAdjustCgf ilOrderedGameNo, llFromMoDate, ilGameNo, llToMoDate
        End If
    End If
    'mMakeTracer llSdfRecPos, "S"
    ilRet = gMakeTracer(hmSdf, tmSdf, llSdfRecPos, hmStf, lmLastLogDate, "S", "M", tmSdf.iRotNo, hmGsf)
    If Not ilRet Then
        mSchSpot = False
        Exit Function
    End If
    'Reset Avail Unit/Second if Overbook
    mResetAvailUnitSec tlAddEvt.iUnits
    For ilLoop = LBound(igVirtVefCode) To UBound(igVirtVefCode) - 1 Step 1
        If tmClf.iVefCode = igVirtVefCode(ilLoop) Then
            tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or 8
            Exit For
        End If
    Next ilLoop
    If tmClf.sType = "H" Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or 8
    End If
    If tmSdf.sSpotType = "X" Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H10
    End If
    'If (tlSdf.sSpotType = "T") Or (tlSdf.sSpotType = "Q") Or (tlSdf.sSpotType = "S") Or (tlSdf.sSpotType = "M") Then
    If (tmSdf.sSpotType = "S") Or (tmSdf.sSpotType = "M") Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H20
    End If
    If (tmSdf.sSchStatus = "O") Or (tmSdf.sSchStatus = "G") Then
        'Determine if spot original from another vehicle- check smf
        'tmSmfSrchKey.lChfCode = tmSdf.lChfCode
        'tmSmfSrchKey.iLineNo = tmSdf.iLineNo
        'tmSmfSrchKey.iMissedDate(0) = 0 'sch date =tlSdf.iDate(0)
        'tmSmfSrchKey.iMissedDate(1) = 0 'sch date =tlSdf.iDate(1)
        imSmfRecLen = Len(tlSmf)
        'ilRet = btrGetGreaterOrEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)   'Get current record
        'Do While (ilRet = BTRV_ERR_NONE) And (tlSmf.lChfCode = tmSdf.lChfCode) And (tlSmf.iLineNo = tmSdf.iLineNo)
        tmSmfSrchKey2.lCode = tmSdf.lCode
        ilRet = btrGetEqual(hmSmf, tlSmf, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            'If this is a fill spot, set orig vehicle to line
            If (tmSdf.sSpotType = "X") And (tlSmf.iOrigSchVef <> tmClf.iVefCode) Then
                tlSmf.iOrigSchVef = tmClf.iVefCode
                ilRet = btrUpdate(hmSmf, tlSmf, imSmfRecLen)
            End If
            If tlSmf.lSdfCode = tmSdf.lCode Then
                If tmSdf.iVefCode <> tlSmf.iOrigSchVef Then
                    tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H40
                End If
                'Exit Do
            End If
            If tlSmf.lChfCode <> tmSdf.lChfCode Then
                mSchSpot = False
                Exit Function
            End If
            'ilRet = btrGetNext(hmSmf, tlSmf, imSmfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        'Loop
        End If
        If ilRet <> BTRV_ERR_NONE Then
            igBtrError = ilRet
            sgErrLoc = "mSchSpot-GetEqual/GetNext Smf(3)"
            mSchSpot = False
            Exit Function
        End If
    End If
    If (tmChf.sType = "V") Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H400
    End If
    If (tmChf.sStatus = "H") Then
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H80
    End If
    If tgSaf(0).sHideDemoOnBR = "Y" And tmChf.sHideDemo = "Y" Then  'Impressions
        tlAddEvt.iLineInfo = tlAddEvt.iLineInfo Or &H4000
    End If
    '1/29/14: added setting Live Copy flag
    tlAddEvt.sLiveCopy = tmClf.sLiveCopy
    tlSmf.lCode = 0
    tlSmf.lChfCode = 0
    '4/16/11
    'If (gDateValue(slLogDate) = gDateValue(smLog1Date)) And (tmVef.sType <> "G") Then
    If ((gDateValue(slLogDate) = gDateValue(smLog1Date)) And (tmVef.sType <> "G")) Or ((tmVef.sType = "G") And (ilLogDay >= 0) And (ilLogDay <= 6)) Then
        If (smSplitNetworkType = "P") Then
            ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12M", "12M", ilGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmL1Evt())
        Else
            If imLog1Day < 5 Then
                ilRet = mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmL1Evt(), tmL1Vcf0(), "0")
            ElseIf imLog1Day = 5 Then
                ilRet = mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmL1Evt(), tmL1Vcf6(), "6")
            Else
                ilRet = mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmL1Evt(), tmL1Vcf7(), "7")
            End If
        End If
    End If
    '4/16/11
    'If (imLog2Type = 4) And (tmVef.sType <> "G") Then  'Test date of Log 2- if same remove spot
    If (imLog2Type = 4) Then  'Test date of Log 2- if same remove spot
        '4/16/11
        'If gDateValue(slLogDate) = gDateValue(smLog2Date) Then
        If ((gDateValue(slLogDate) = gDateValue(smLog2Date)) And (tmVef.sType <> "G")) Or ((tmVef.sType = "G") And (ilLogDay >= 0) And (ilLogDay <= 6)) Then
            If (smSplitNetworkType = "P") Then
                ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12M", "12M", ilGameNo, tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), imEvtType(), tmL2Evt())
            Else
                If imLog2Day < 5 Then
                    ilRet = mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmL2Evt(), tmL2Vcf0(), "0")
                ElseIf imLog2Day = 5 Then
                    ilRet = mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmL2Evt(), tmL2Vcf6(), "6")
                Else
                    ilRet = mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmL2Evt(), tmL2Vcf7(), "7")
                End If
            End If
        End If
    End If
    'Check if hour/day count should be altered
    If (tmSdf.lChfCode = lmCountChfCode) And (tmSdf.lFsfCode = lmCountFsfCode) Then
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If tmSdfExt(ilLoop).lRecPos = llSdfRecPos Then
                tmSdfExt(ilLoop).sSchStatus = tmSdf.sSchStatus
                tmSdfExt(ilLoop).iDate(0) = tmSdf.iDate(0)
                tmSdfExt(ilLoop).iDate(1) = tmSdf.iDate(1)
                tmSdfExt(ilLoop).iTime(0) = tmSdf.iTime(0)
                tmSdfExt(ilLoop).iTime(1) = tmSdf.iTime(1)
'                If (tmSdf.sSchStatus = "O") Or (tmSdf.sSchStatus = "G") Then
'                    tmSdfExt(ilLoop).iStatus = tlSmf.iOrigSchVef
'                End If
'                If (imToggleRot = 1) Or (imToggleRot = 2) Or ((imToggleRot = 3) And (imCountLineNo = tmSdfExt(ilLoop).iLineNo)) Then
                    mAdjCounts 1, tmSdfExt(ilLoop)
'                End If
                Exit For
            End If
        Next ilLoop
    End If
    If ilSpotFrom = 0 Then  'Missed from tmAdMdSdfMdExt
        'For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
        For ilLoop = imLBSdfMdExt To UBound(tmSdfMdExt) Step 1
            If tmSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
                mCompressMd ilLoop, tmSdfMdExt()
                Exit For
            End If
        Next ilLoop
    ElseIf ilSpotFrom = 1 Then  'Missed from tmSdfMdExt
        'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) Step 1
        For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) Step 1
            If tmAdMdSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
                mCompressMd ilLoop, tmAdMdSdfMdExt()
                Exit For
            End If
        Next ilLoop
    End If
    'slDate = edcDate.Text   'plcDate.Caption
    'llDate = gDateValue(slDate)

    If (imDW = 1) Or (tmVef.sType <> "G") Then
        mGetEdcDate ilGameNo
        slDate = smEdcDate
        llDate = lmEdcDate
    End If
    If ((gDateValue(slLogDate) >= llDate) And (gDateValue(slLogDate) <= llDate + 6) And (tmVef.sType <> "G")) Or ((tmVef.sType = "G") And (ilLogDay >= 0) And (ilLogDay <= 6)) Then
        Select Case ilLogDay
            Case 0  'Monday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), imEvtType(), tmMoEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmMoEvt(), tmMoVcf0(), "0") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
            Case 1  'Tuesday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), imEvtType(), tmTuEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmTuEvt(), tmTuVcf0(), "0") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
            Case 2  'Wednesday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), imEvtType(), tmWeEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmWeEvt(), tmWeVcf0(), "0") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
            Case 3  'Thursday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmThVcf0(), tmThVcf6(), tmThVcf7(), imEvtType(), tmThEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmThEvt(), tmThVcf0(), "0") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
            Case 4  'Friday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), imEvtType(), tmFrEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmFrEvt(), tmFrVcf0(), "0") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
            Case 5  'Saturday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), imEvtType(), tmSaEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmSaEvt(), tmSaVcf6(), "6") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
            Case 6  'Sunday
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), imEvtType(), tmSuEvt())
                    mSyncDays
                Else
                    If mAddEvt(tlAddEvt, llSsfAvailRecPos, ilSsfAvailIndex, ilPosition, True, tmSuEvt(), tmSuVcf7(), "7") Then
                        mSyncDays
    '                    mVbcAvailMinMax False
    '                    mVbcContractMinMax False
                    End If
                End If
        End Select
    End If
    mSchSpot = True
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mSetCommands                    *
'*                                                     *
'*             Created:6/30/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set command buttons (enable or *
'*                      disabled)                      *
'*                                                     *
'*******************************************************
Private Sub mSetCommands()
'
'   mSetCommands
'   Where:
'
    Dim slDate As String
    Dim llDate As Long
    Dim ilRet As Integer
    Dim llUpper As Long
    Dim ilVff As Integer

    'Update button set if all mandatory fields have data and any field altered
    On Error GoTo mSetCommandsErr
    If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
        imUpdateAllowed = False
    Else
        imUpdateAllowed = True
    End If
    ilRet = 0
    llUpper = UBound(tmWAMdExt)
    If ilRet = 0 Then
        If UBound(tmWAMdExt) <= LBound(tmWAMdExt) Then
            'cbcVehicle.Enabled = True
            cmcDone.Enabled = True
        Else
            'Ask in Done what is to happen to the work area
            ''cbcVehicle.Enabled = False
            'cmcDone.Enabled = False
            cmcDone.Enabled = True
        End If
    Else
        cmcDone.Enabled = True
    End If
    On Error GoTo 0
    ''If (imVehSelectedIndex >= 0) And (plcDate.Caption <> "") And (rbcAdvt.Value) And (imUpdateAllowed) Then
    'If (imVehSelectedIndex >= 0) And (plcDate.Caption <> "") And (imDW = 1) And (imUpdateAllowed) Then
    If (imVehSelectedIndex >= 0) And (Trim$(edcDate.Text) <> "") And (imDW = 1) And (imUpdateAllowed) Then
        'slDate = edcDate.Text   'plcDate.Caption
        'llDate = gDateValue(slDate)
        mGetEdcDate 0
        slDate = smEdcDate
        llDate = lmEdcDate
        If llDate + 6 < lmEarliestAllowedDate Then
            cmcFill.Enabled = False
            cmcReSchd.Enabled = False
        Else
            cmcFill.Enabled = True
            If (igWinStatus(SPOTSJOB) = 1) And (Trim$(tgUrf(0).sName) <> sgCPName) And (Trim$(tgUrf(0).sName) <> sgSUName) Then
                cmcReSchd.Enabled = False
            Else
                cmcReSchd.Enabled = True
            End If
        End If
    ElseIf (imVehSelectedIndex >= 0) And (Trim$(edcLog1Dt.Text) <> "") And (imDW = 0) And (imUpdateAllowed) Then
        If gDateValue(smLog1Date) < lmEarliestAllowedDate Then
            cmcFill.Enabled = False
            cmcReSchd.Enabled = False
        Else
            cmcFill.Enabled = True
            cmcReSchd.Enabled = False
        End If
    Else
        cmcFill.Enabled = False
        cmcReSchd.Enabled = False
    End If
    If (imVehSelectedIndex >= 0) And (imDW = 1) And (imUpdateAllowed) And (imTFNExist) Then
        cmcWeeks.Enabled = True
    Else
        cmcWeeks.Enabled = False
    End If
    'slDate = edcDate.Text   'plcDate.Caption
    If (tmVef.sType <> "G") Or (imDW = 1) Then
        mGetEdcDate 0
        slDate = smEdcDate
    End If
    'If slDate <> "" Then
    '    llDate = gDateValue(slDate)
    '    'If (imNoSpotInfo = 1) And (lmHighlightCntrCode > 0) And (llDate + 6 >= lmEarliestAllowedDate) And (imUpdateAllowed) Then
    '    '    If tgSpf.sGUsePropSys = "Y" Then
    '    '        cmcMGs.Enabled = True
    '    '    Else
    '    '        cmcMGs.Enabled = False
    '    '    End If
    '    'Else
    '    '    cmcMGs.Enabled = False
    '    'End If
    '    If (llDate + 6 >= lmEarliestAllowedDate) And (imUpdateAllowed) Then
            cmcMGs.Enabled = True
    '    Else
    '        cmcMGs.Enabled = False
    '    End If
    'Else
    '    cmcMGs.Enabled = False
    'End If
    If tmVef.sType <> "G" Then
        cmcMGs.Enabled = True
        cmcLock.Enabled = True
    Else
        cmcMGs.Enabled = False
        cmcLock.Enabled = False
    End If
    If (imDW = 0) Then
        If (lmSdfRecPosHighlight <> 0) Then
            cmcWhere.Enabled = True
        Else
            cmcWhere.Enabled = False
        End If
    End If
    If (imVehSelectedIndex >= 0) Then
        If gIsImportInvoicedSpots(imVehCode) Then
            cmcMGs.Enabled = False
            cmcSpotAction.Enabled = False
            cmcFill.Enabled = False
            cmcReSchd.Enabled = False
            imUpdateAllowed = False
        Else
            cmcSpotAction.Enabled = True
        End If
    End If
    Exit Sub
mSetCommandsErr:
    ilRet = 1
    Resume Next
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSetTrashFire                   *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Set trash for spots that will  *
'*                      be set to cancel, fire for     *
'*                      spots that will be deleted     *
'*                                                     *
'*******************************************************
Private Sub mSetTrashFire(slCntrType As String)
    pbcSpotInfo(1).Visible = False
    pbcSpotInfo(0).Visible = False
    lbcPackageInfo(1).Visible = False
    lbcPackageInfo(0).Visible = False
    plcCalendar.Visible = False
    lbcGameList.Visible = False
    imNoSpotInfo = 0
    If (tgSpf.sSchdRemnant = "Y") And (slCntrType = "T") Then
        imcTrash.Picture = IconTraf!imcBoxClosed.Picture
        imTrashFire = 0
    ElseIf (tgSpf.sSchdPromo = "Y") And (slCntrType = "M") Then
        imcTrash.Picture = IconTraf!imcBoxClosed.Picture
        imTrashFire = 0
    ElseIf (tgSpf.sSchdPSA = "Y") And (slCntrType = "S") Then
        imcTrash.Picture = IconTraf!imcBoxClosed.Picture
        imTrashFire = 0
    Else
    'If tgSpf.sSchdRemnant <> "Y" Then
        Select Case slCntrType
            Case "T", "Q", "S", "M", "X"
                imcTrash.Picture = IconTraf!imcFireOut.Picture
                imTrashFire = 1
            Case "V"
                imcTrash.Picture = IconTraf!imcHideUp.Picture
                imTrashFire = 2
            Case Else
                imcTrash.Picture = IconTraf!imcBoxClosed.Picture
                imTrashFire = 0
        End Select
    'Else
    '    Select Case slCntrType
    '        Case "Q", "S", "M", "X"
    '            imcTrash.Picture = IconTraf!imcFireOut.Picture
    '            imTrashFire = 1
    '        Case "V"
    '            imcTrash.Picture = IconTraf!imcHideUp.Picture
    '            imTrashFire = 2
    '        Case Else
    '            imcTrash.Picture = IconTraf!imcBoxClosed.Picture
    '            imTrashFire = 0
    '    End Select
    End If
    imcPrt.Visible = False
    '7/7/09:  Replaced Cancel with list next to missed reason
    If imTrashFire = 0 Then
        imcTrash.Visible = False
        imcTrash.Enabled = False
    Else
        imcTrash.Visible = True
        imcTrash.Enabled = True
    End If
    mSetCommands
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mShowRightInfo                  *
'*                                                     *
'*             Created:10/27/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Show information with right    *
'*                      mouse                          *
'*                                                     *
'*******************************************************
Private Sub mShowRightInfo(tlEvt() As EVTINFO, ilIndex As Integer, ilRow As Integer, ilCol As Integer)
    Dim slStr As String
    Dim ilPos As Integer
    Dim ilRet As Integer
    Dim slMissedDate As String
    Dim slMissedTime As String
    Dim slPrice As String
    Dim slStr1 As String
    If imDW = 0 Then
        plcConflictInfo.Left = plcTime.Left + fgBevelX
    Else
        plcConflictInfo.Left = plcAdvertiser.Left + fgBevelX
    End If
    On Error GoTo mShowRightInfoErr
    If (tlEvt(ilIndex).iType = 101) Then    'Conflict spot
        On Error GoTo 0
        slStr = RTrim$(tlEvt(ilIndex).sShow)
        ilPos = InStr(slStr, "&")
        If ilPos > 0 Then
            slStr = Left$(slStr, ilPos - 1) & "&&" & Mid$(slStr, ilPos + 1)
        End If
        smInfoCaption = slStr 'RTrim$(tlEvt(ilIndex).sShow)
        If plcConflictInfo.Visible = True Then
            plcConflictInfo_Paint
        Else
            plcConflictInfo.Visible = True
        End If
        imRowRightMouse = ilRow
        imColRightMouse = ilCol
        imDragType = -1
        imDragSrce = -1
        Exit Sub
    End If
    On Error GoTo 0
    If (tlEvt(ilIndex).iType = 100) Then    'Spot
        If (tlEvt(ilIndex).iLineInfo And &H6) <> 0 Then '2=MG; 4=Outside
            tmSmfSrchKey2.lCode = tlEvt(ilIndex).lSdfCode
            ilRet = btrGetEqual(hmSmf, tmSmfA, imSmfRecLen, tmSmfSrchKey2, INDEXKEY2, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                If (tmSmfA.lMtfCode <> 0) And (lgMtfNoRecs <> 0) Then
                    slPrice = ""
                    tmVefSrchKey.iCode = 0
                    tmMtfSrchKey.lCode = tmSmfA.lMtfCode
                    ilRet = btrGetEqual(hmMtf, tmMtf, imMtfRecLen, tmMtfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    Do While (ilRet = BTRV_ERR_NONE)
                        tmVefSrchKey.iCode = tmMtf.iSdfVefCode
                        slPrice = gLongToStrDec(tmMtf.lToPrice, 2)
                        tmMtfSrchKey1.lCode = tmMtf.lRefTrackID
                        If tmMtf.lRefTrackID = tmMtf.lTrackID Then
                            ilRet = btrGetNext(hmMtf, tmMtf, imMtfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
                            If tmMtf.lTrackID <> tmMtfSrchKey1.lCode Then
                                Exit Do
                            End If
                        Else
                            ilRet = btrGetEqual(hmMtf, tmMtf, imMtfRecLen, tmMtfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        End If
                    Loop
                    ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    If ilRet <> BTRV_ERR_NONE Then
                        tmOrigVef.sName = ""
                    End If
                    If (tlEvt(ilIndex).iLineInfo And &H10) <> 0 Then
                        If (Trim$(tlEvt(ilIndex).sAirDate) = "") And Trim$(tlEvt(ilIndex).sAirTime) = "" Then
                            smInfoCaption = Trim$(tmOrigVef.sName) & ", Bonus"
                        Else
                            smInfoCaption = "Aired " & Trim$(tlEvt(ilIndex).sAirDate) & " @" & Trim$(tlEvt(ilIndex).sAirTime) & " " & Trim$(tmOrigVef.sName) & ", Bonus"
                        End If
                        plcConflictInfo.Cls
                        plcConflictInfo_Paint
                    Else
                        If (Trim$(tlEvt(ilIndex).sAirDate) = "") And Trim$(tlEvt(ilIndex).sAirTime) = "" Then
                            smInfoCaption = Trim$(tmOrigVef.sName) & ", M for N MG " & " $" & slPrice
                        Else
                            smInfoCaption = "Aired " & Trim$(tlEvt(ilIndex).sAirDate) & " @" & Trim$(tlEvt(ilIndex).sAirTime) & " " & Trim$(tmOrigVef.sName) & ", M for N MG " & " $" & slPrice
                        End If
                        plcConflictInfo.Cls
                        plcConflictInfo_Paint
                    End If
                    If plcConflictInfo.Visible = True Then
                        plcConflictInfo_Paint
                    Else
                        plcConflictInfo.Visible = True
                    End If
                    imRowRightMouse = ilRow
                    imColRightMouse = ilCol
                Else
                    gUnpackDate tmSmfA.iMissedDate(0), tmSmfA.iMissedDate(1), slMissedDate
                    gUnpackTime tmSmfA.iMissedTime(0), tmSmfA.iMissedTime(1), "A", "1", slMissedTime
                    tmVefSrchKey.iCode = tmSmfA.iOrigSchVef
                    ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    If ilRet = BTRV_ERR_NONE Then
                        If (Trim$(tlEvt(ilIndex).sAirDate) = "") And Trim$(tlEvt(ilIndex).sAirTime) = "" Then
                            smInfoCaption = Trim$(tmOrigVef.sName) & ", Missed " & slMissedDate & " @" & slMissedTime & " $" & Trim$(tlEvt(ilIndex).sPrice)
                        Else
                            smInfoCaption = "Aired " & Trim$(tlEvt(ilIndex).sAirDate) & " @" & Trim$(tlEvt(ilIndex).sAirTime) & " " & Trim$(tmOrigVef.sName) & ", Missed " & slMissedDate & " @" & slMissedTime & " $" & Trim$(tlEvt(ilIndex).sPrice)
                        End If
                        If plcConflictInfo.Visible = True Then
                            plcConflictInfo_Paint
                        Else
                            plcConflictInfo.Visible = True
                        End If
                        imRowRightMouse = ilRow
                        imColRightMouse = ilCol
                    Else
                        plcConflictInfo.Visible = False
                        imRowRightMouse = -1
                        imColRightMouse = -1
                    End If
                End If
            Else
                plcConflictInfo.Visible = False
                imRowRightMouse = -1
                imColRightMouse = -1
            End If
        Else
            slStr = RTrim$(tlEvt(ilIndex).sShow)
            ilPos = InStr(slStr, "&")
            If ilPos > 0 Then
                slStr = Left$(slStr, ilPos - 1) & "&&" & Mid$(slStr, ilPos + 1)
            End If
            If (Trim$(tlEvt(ilIndex).sAirDate) = "") And (Trim$(tlEvt(ilIndex).sAirTime) = "") Then
                smInfoCaption = slStr & " $" & Trim$(tlEvt(ilIndex).sPrice) 'RTrim$(tlEvt(ilIndex).sShow)
            Else
                smInfoCaption = "Aired " & Trim$(tlEvt(ilIndex).sAirDate) & " @" & Trim$(tlEvt(ilIndex).sAirTime) & " " & slStr & " $" & Trim$(tlEvt(ilIndex).sPrice) 'RTrim$(tlEvt(ilIndex).sShow)
            End If
            If plcConflictInfo.Visible = True Then
                plcConflictInfo_Paint
            Else
                plcConflictInfo.Visible = True
            End If
            imRowRightMouse = ilRow
            imColRightMouse = ilCol
        End If
        Select Case tlEvt(ilIndex).sCntrType
            Case "V"
                smInfoCaption = "Resv " & Trim$(smInfoCaption)
            Case "T"
                smInfoCaption = "Remnant " & Trim$(smInfoCaption)
            Case "R"
                smInfoCaption = "D.R. " & Trim$(smInfoCaption)
            Case "Q"
                smInfoCaption = "P.I. " & Trim$(smInfoCaption)
            Case "S"
                smInfoCaption = "PSA " & Trim$(smInfoCaption)
            Case "M"
                smInfoCaption = "Promo " & Trim$(smInfoCaption)
        End Select
        If ((tlEvt(ilIndex).iLineInfo And &H4000) = &H4000) Then
            smInfoCaption = "Imp " & Trim$(smInfoCaption)
        End If
        If ((tlEvt(ilIndex).iLineInfo And &H80) = &H80) Then
            smInfoCaption = "Hold " & Trim$(smInfoCaption)
        End If
        If ((tlEvt(ilIndex).iLineInfo And &H2000) = &H2000) Then
            smInfoCaption = Trim$(smInfoCaption) & " BB"
        End If
        If ((Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS) Then
            If ((tlEvt(ilIndex).iLineInfo And &H800) = &H800) Or ((tlEvt(ilIndex).iLineInfo And &H1000) = &H1000) Then
                tmRafSrchKey.lCode = tlEvt(ilIndex).lRafCode
                ilRet = btrGetEqual(hmRaf, tmRaf, imRafRecLen, tmRafSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    If tmRaf.sInclExcl = "E" Then
                        smInfoCaption = Trim$(smInfoCaption) & " Excl:" & Trim$(tmRaf.sName)
                    ElseIf tmRaf.sInclExcl = "I" Then
                        smInfoCaption = Trim$(smInfoCaption) & " Incl:" & Trim$(tmRaf.sName)
                    Else
                        smInfoCaption = Trim$(smInfoCaption) & " Region:" & Trim$(tmRaf.sName)
                    End If
                End If
            End If
        End If
        smInfoCaption = Trim$(smInfoCaption) & " " & mGetCopy(tlEvt(ilIndex).lSdfCode)
        plcConflictInfo.Cls
        plcConflictInfo_Paint
        If (tlEvt(ilIndex).iLineInfo And &H100) = &H100 Then
            plcConflictInfo.height = 1230
            slStr = ""
            If (tlEvt(ilIndex).lClfCxfCode > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = tlEvt(ilIndex).lClfCxfCode
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    'If tmCxf.iStrLen > 0 Then
                    '    slStr = Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                    'End If
                    slStr = gStripChr0(tmCxf.sComment)
                End If
            End If
            If (tlEvt(ilIndex).lchfcxfCode > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = tlEvt(ilIndex).lchfcxfCode
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    slStr1 = gStripChr0(tmCxf.sComment)
                    'If tmCxf.iStrLen > 0 Then
                    If slStr1 <> "" Then
                        If slStr <> "" Then
                            slStr = slStr & sgLF & sgCR & slStr1    'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        Else
                            slStr = slStr1  'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        End If
                    End If
                End If
            End If
            If (tlEvt(ilIndex).lchfcxfInt > 0) Then
                imCxfRecLen = Len(tmCxf)
                tmCxfSrchKey.lCode = tlEvt(ilIndex).lchfcxfInt
                ilRet = btrGetEqual(hmCxf, tmCxf, imCxfRecLen, tmCxfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get last current record to obtain date
                If ilRet = BTRV_ERR_NONE Then
                    slStr1 = gStripChr0(tmCxf.sComment)
                    'If tmCxf.iStrLen > 0 Then
                    If slStr1 <> "" Then
                        If slStr <> "" Then
                            slStr = slStr & sgLF & sgCR & slStr1    'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        Else
                            slStr = slStr1  'Trim$(Left$(tmCxf.sComment, tmCxf.iStrLen))
                        End If
                    End If
                End If
            End If
            If slStr <> "" Then
                plcConflictInfo.Top = plcConflictInfo.Top - lacComment.height
                lacComment.Caption = slStr
            Else
                plcConflictInfo.height = 225
            End If
        Else
            plcConflictInfo.height = 225
        End If
        imDragType = -1
        imDragSrce = -1
        Exit Sub
    End If
    plcConflictInfo.Visible = False
    imRowRightMouse = -1
    imColRightMouse = -1
    imDragType = -1
    imDragSrce = -1
    Exit Sub
mShowRightInfoErr:
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSnapSpotMissed                 *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Sort missed into SWF           *
'*          dh 12-9-99 Convert snapshot to Crystal
'*                                                     *
'*******************************************************
Private Sub mSnapSpotMissed()
    Dim ilLoop As Integer
    Dim ilDay As Integer
    Dim ilPos As Integer
    Dim slStr As String
    Dim slPrice As String
    Dim ilAdMdType As Integer

    tmSwf.iType = 2         'missed header records
    If (imAdMdType < 0) Or (imAdMdType > 11) Then
        Exit Sub
    End If
    If imAdMdType = 3 Then '3=Advt; 0=Time
        If imAdMdSelectedAdvt < 0 Then
            Exit Sub
        End If
    End If
    'ilAdMdType = imAdMdType
    'If tgSpf.sSchdRemnant = "Y" Then
    '    If ilAdMdType >= 4 Then
    '        ilAdMdType = ilAdMdType - 1
    '    End If
    'End If
    For ilLoop = 0 To UBound(imAdMdMap) Step 1
        If imAdMdType = imAdMdMap(ilLoop) Then
            ilAdMdType = ilLoop
            Exit For
        End If
    Next ilLoop
    If (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
        'If UBound(tmAdMdSdfMdExt) > LBound(tmAdMdSdfMdExt) Then
        If UBound(tmAdMdSdfMdExt) > imLBSdfMdExt Then
            'dont need missed spot caption, sent in formula to rptselss
            'tmSwf.sDay1 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.sDay2 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.sDay3 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.sDay4 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.sDay5 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.sDay6 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.sDay7 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.iSeqNo = tmSwf.iSeqNo + 1
            'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
            'llNoRecs = llNoRecs + 1
            ilDay = 1
            tmSwf.sDay1 = ""
            tmSwf.sDay2 = ""
            tmSwf.sDay3 = ""
            tmSwf.sDay4 = ""
            tmSwf.sDay5 = ""
            tmSwf.sDay6 = ""
            tmSwf.sDay7 = ""
            'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                If ((tmAdMdSdfMdExt(ilLoop).lChfCode = lmSelectedChfCode) And (lmSelectedChfCode > 0)) Or (lmSelectedChfCode <= 0) Then
                    'Remove advt and # spots/week
                    slStr = tmAdMdSdfMdExt(ilLoop).sShow
                    ilPos = InStr(slStr, " ")
                    If ilPos > 0 Then
                        slStr = Mid$(slStr, ilPos + 1)
                        ilPos = InStr(slStr, " ")
                        If ilPos > 0 Then
                            slStr = Mid$(slStr, ilPos + 1)
                        End If
                    End If
                    'slPrice = ""
                    'If imMore = 1 Then
                    '    ilPos = InStr(1, tmAdMdSdfMdExt(ilLoop).sPrice, ".")
                    '    If ilPos > 1 Then
                    '        slPrice = "$" & Left$(tmAdMdSdfMdExt(ilLoop).sPrice, ilPos - 1) & " "
                    '    ElseIf ilPos = 1 Then
                    '        slPrice = "$0 "
                    '    Else
                    '        slPrice = Trim$(Left$(tmAdMdSdfMdExt(ilLoop).sPrice, 5)) & " "
                    '    End If
                    'End If
                    slPrice = mMoreInfo(0, tmAdMdSdfMdExt(ilLoop).sPrice, tmAdMdSdfMdExt(ilLoop).sNetRegionAbbr, tmAdMdSdfMdExt(ilLoop).sCITFlag, tmAdMdSdfMdExt(ilLoop).sCopyCIT, tmAdMdSdfMdExt(ilLoop).sPtType, tmAdMdSdfMdExt(ilLoop).lCopyCode, tmAdMdSdfMdExt(ilLoop).iRotNo, tmAdMdSdfMdExt(ilLoop).sLiveCopy)
                    If slPrice <> "" Then
                        slPrice = slPrice & " "
                    End If
                    Select Case ilDay
                        Case 1
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay1 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay1 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                        Case 2
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay2 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay2 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                        Case 3
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay3 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay3 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                        Case 4
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay4 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay4 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                        Case 5
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay5 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay5 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                        Case 6
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay6 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay6 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                        Case 7
                            If Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) = "" Then
                                tmSwf.sDay7 = slPrice & tmAdMdSdfMdExt(ilLoop).sAdvtAbbr & " " & slStr
                            Else
                                tmSwf.sDay7 = slPrice & Trim$(tmAdMdSdfMdExt(ilLoop).sAdvtProd) & Chr$(10) & slStr
                            End If
                    End Select
                    ilDay = ilDay + 1
                    If ilDay > 7 Then
                        'tmSwf.iSeqNo = tmSwf.iSeqNo + 1
                        'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
                        'llNoRecs = llNoRecs + 1
                        tmSwf.iType = 3         'missed type records
                        mWriteSWFSnap
                        ilDay = 1
                        tmSwf.sDay1 = ""
                        tmSwf.sDay2 = ""
                        tmSwf.sDay3 = ""
                        tmSwf.sDay4 = ""
                        tmSwf.sDay5 = ""
                        tmSwf.sDay6 = ""
                        tmSwf.sDay7 = ""
                    End If
                End If
            Next ilLoop
            If ilDay > 1 Then
                tmSwf.lSeqNo = tmSwf.lSeqNo + 1     '2-2-05 chg to long
                tmSwf.iType = 3         'missed type records
                mWriteSWFSnap
                'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
                'llNoRecs = llNoRecs + 1
            End If
        End If
    Else
        If (lbcAdMdManSch.ListCount > 0) And (lmSelectedChfCode <= 0) Then
            tmSwf.sDay1 = lbcAdMdType.List(ilAdMdType)
            tmSwf.sDay2 = lbcAdMdType.List(ilAdMdType)
            tmSwf.sDay3 = lbcAdMdType.List(ilAdMdType)
            tmSwf.sDay4 = lbcAdMdType.List(ilAdMdType)
            tmSwf.sDay5 = lbcAdMdType.List(ilAdMdType)
            tmSwf.sDay6 = lbcAdMdType.List(ilAdMdType)
            tmSwf.sDay7 = lbcAdMdType.List(ilAdMdType)
            'tmSwf.iSeqNo = tmSwf.iSeqNo + 1
            'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
            'llNoRecs = llNoRecs + 1
            mWriteSWFSnap
            ilDay = 1
            tmSwf.sDay1 = ""
            tmSwf.sDay2 = ""
            tmSwf.sDay3 = ""
            tmSwf.sDay4 = ""
            tmSwf.sDay5 = ""
            tmSwf.sDay6 = ""
            tmSwf.sDay7 = ""
            For ilLoop = 0 To lbcAdMdManSch.ListCount - 1 Step 1
                Select Case ilDay
                    Case 1
                        tmSwf.sDay1 = lbcAdMdManSch.List(ilLoop)
                    Case 2
                        tmSwf.sDay2 = lbcAdMdManSch.List(ilLoop)
                    Case 3
                        tmSwf.sDay3 = lbcAdMdManSch.List(ilLoop)
                    Case 4
                        tmSwf.sDay4 = lbcAdMdManSch.List(ilLoop)
                    Case 5
                        tmSwf.sDay5 = lbcAdMdManSch.List(ilLoop)
                    Case 6
                        tmSwf.sDay6 = lbcAdMdManSch.List(ilLoop)
                    Case 7
                        tmSwf.sDay7 = lbcAdMdManSch.List(ilLoop)
                End Select
                ilDay = ilDay + 1
                If ilDay > 7 Then
                    tmSwf.lSeqNo = tmSwf.lSeqNo + 1     '2-2-05 chg to long
                    tmSwf.iType = 3         'missed type records
                    mWriteSWFSnap
                    'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
                    'llNoRecs = llNoRecs + 1
                    ilDay = 1
                    tmSwf.sDay1 = ""
                    tmSwf.sDay2 = ""
                    tmSwf.sDay3 = ""
                    tmSwf.sDay4 = ""
                    tmSwf.sDay5 = ""
                    tmSwf.sDay6 = ""
                    tmSwf.sDay7 = ""
                End If
            Next ilLoop
            If ilDay > 1 Then
                tmSwf.lSeqNo = tmSwf.lSeqNo + 1     '2-2-05 chg to long
                tmSwf.iType = 3         'missed type records
                mWriteSWFSnap
                'ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY0)
                'llNoRecs = llNoRecs + 1
            End If
        End If
    End If
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mStartCntrDrag                  *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Check that drag is OK and set  *
'*                      parameters                     *
'*                                                     *
'*******************************************************
Private Sub mStartCntrDrag(ilRow As Integer, ilCol As Integer, tlEvt() As EVTINFO, tlRowIndex() As Integer)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slDate                                                                                *
'******************************************************************************************

    Dim ilIndex As Integer
    Dim ilAvailIndex As Integer
    Dim slStr As String
    
    smDragSrcePrgName = ""
    mShowPrgNames
    ilIndex = tlRowIndex(ilRow)
    If imDragButton = 2 Then
        mShowRightInfo tlEvt(), ilIndex, ilRow, ilCol
        Exit Sub
    End If
    'slDate = edcDate.Text   'plcDate.Caption    'Start date of the week
    'If gDateValue(slDate) + ilCol - 1 < lmEarliestAllowedDate Then
    mGetEdcDate ilCol - 1
    If lmEdcDate < lmEarliestAllowedDate Then
        imDragType = -1
        imDragSrce = -1
        Beep
        Exit Sub
    End If
    If tlEvt(ilIndex).iType <> 100 Then
        imDragType = -1
        imDragSrce = -1
        Beep
        Exit Sub
    End If
    'Disallow fills for Split Network buys
    If imDblClick = 2 Then
        If ((tlEvt(ilIndex).iLineInfo And &H800) = &H800) Or ((tlEvt(ilIndex).iLineInfo And &H1000) = &H1000) Then
            imDragType = -1
            imDragSrce = -1
            Beep
            Exit Sub
        End If
    End If
    ilAvailIndex = ilIndex - 1
    Do
        If (tlEvt(ilAvailIndex).iType >= 2) And (tlEvt(ilAvailIndex).iType <= 9) Then
            'If ((tlEvt(ilAvailIndex).iLineInfo And SSLOCK) = SSLOCK) Or ((tlEvt(ilAvailIndex).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT) Then
            '    Beep
            '    Exit Sub
            'End If
            Exit Do
        End If
        ilAvailIndex = ilAvailIndex - 1
    'Loop While ilAvailIndex >= LBound(tlEvt)
    Loop While ilAvailIndex >= imLBEvt
    imDragRowNoSrce = ilRow + vbcContract.Value - 1
    imDragIndexSrce = ilIndex
    imDragColNoSrce = ilCol
    imDragSpotLen = tlEvt(ilIndex).iUnits 'Units contains spot length
    smDragCntrType = tlEvt(ilIndex).sCntrType
    smDragSrcePrgName = Trim$(tlEvt(ilIndex).sPrgName)
    mShowPrgNames
    If (tlEvt(ilIndex).iLineInfo And &H10) = &H10 Then
        If (tlEvt(ilIndex).iLineInfo And &H200) <> &H200 Then
            smDragCntrType = "X"
        End If
    End If
'    gInvertArea pbcContract, CInt(tmACtrls(ilCol).fBoxX) \ 15, CInt(tmACtrls(ilCol).fBoxY + (imDragRowNoSrce - vbcContract.Value + 1) * (fgBoxGridH + 15)) \ 15, CInt(tmACtrls(ilCol).fBoxW) \ 15, CInt(tmACtrls(ilCol).fBoxH) \ 15
    If imDblClick > 0 Then
        imDblClickMode = imDblClick
        If (imDblClick = 1) And (rbcMode(0).Value) Then
            slStr = "Move or Swap: " & RTrim$(tlEvt(ilIndex).sShow)
        Else
            slStr = "Fill: " & RTrim$(tlEvt(ilIndex).sShow)
        End If
        smInfoCaption = slStr
        plcConflictInfo.Top = plcAdvertiser.Top
        plcConflictInfo.height = 225
        If plcConflictInfo.Visible = True Then
            plcConflictInfo_Paint
        Else
            plcConflictInfo.Visible = True
        End If
        Exit Sub
    End If
    gInvertArea pbcContract, CInt(tmACtrls(ilCol).fBoxX) \ 15, CInt(tmACtrls(ilCol).fBoxY + (imDragRowNoSrce - vbcContract.Value + 1) * (fgBoxGridH + 15)) \ 15, CInt(tmACtrls(ilCol).fBoxW) \ 15, CInt(tmACtrls(ilCol).fBoxH) \ 15
    lacAFrame.Move tmACtrls(ilCol).fBoxX - 30, tmACtrls(ilCol).fBoxY + (imDragRowNoSrce - vbcContract.Value + 1) * (fgBoxGridH + 15) - 30
    'If made visible, then invertarea does not work
    'lacAFrame.Visible = True
    mSetTrashFire smDragCntrType
    'imcTrash.Visible = True
    'imcTrash.Enabled = True
    lacAFrame.DragIcon = IconTraf!imcIconStd.DragIcon
    lacAFrame.Drag vbBeginDrag
    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mSyncDays                       *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Sync images for advertiser     *
'*                      view                           *
'*                                                     *
'*******************************************************
Private Sub mSyncDays()
'
'   tm--Evt(I)- Avail and spots records only
'
    Dim ilLoop As Integer
    ReDim ilIndex(0 To 6) As Integer
    Dim ilDayIndex As Integer
    Dim llDayTime As Long
    Dim ilFirst As Integer
    If tmVef.sType = "G" Then
        Exit Sub
    End If
    mMoveToEvtTemp tmMoEvt(), tmMoEvtTemp()
    mMoveToEvtTemp tmTuEvt(), tmTuEvtTemp()
    mMoveToEvtTemp tmWeEvt(), tmWeEvtTemp()
    mMoveToEvtTemp tmThEvt(), tmThEvtTemp()
    mMoveToEvtTemp tmFrEvt(), tmFrEvtTemp()
    mMoveToEvtTemp tmSaEvt(), tmSaEvtTemp()
    mMoveToEvtTemp tmSuEvt(), tmSuEvtTemp()
    For ilLoop = 0 To 6 Step 1
        'ilIndex(ilLoop) = LBound(tmMoEvt)
        ilIndex(ilLoop) = imLBEvt
    Next ilLoop
    ilFirst = True
    Do
        ilDayIndex = -1
        For ilLoop = 0 To 6 Step 1
            Select Case ilLoop
                Case 0  'Monday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmMoEvtTemp()
                Case 1  'Tuesday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmTuEvtTemp()
                Case 2  'Wednesday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmWeEvtTemp()
                Case 3  'Thursday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmThEvtTemp()
                Case 4  'Friday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmFrEvtTemp()
                Case 5  'Saturday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmSaEvtTemp()
                Case 6  'Sunday
                    mTestEvtTime ilIndex(ilLoop), ilLoop, ilDayIndex, llDayTime, tmSuEvtTemp()
            End Select
        Next ilLoop
        If ilDayIndex <> -1 Then
            For ilLoop = 0 To 6 Step 1
                Select Case ilLoop
                    Case 0  'Monday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmMoEvtTemp(), tmMoEvt()
                    Case 1  'Tuesday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmTuEvtTemp(), tmTuEvt()
                    Case 2  'Wednesday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmWeEvtTemp(), tmWeEvt()
                    Case 3  'Thursday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmThEvtTemp(), tmThEvt()
                    Case 4  'Friday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmFrEvtTemp(), tmFrEvt()
                    Case 5  'Saturday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmSaEvtTemp(), tmSaEvt()
                    Case 6  'Sunday
                        mInsertEvt ilIndex(ilLoop), llDayTime, tmSuEvtTemp(), tmSuEvt()
                End Select
            Next ilLoop
        End If
    Loop While ilDayIndex <> -1
    ReDim tmMoEvtTemp(0 To imLBEvt) As EVTINFO
    ReDim tmTuEvtTemp(0 To imLBEvt) As EVTINFO
    ReDim tmWeEvtTemp(0 To imLBEvt) As EVTINFO
    ReDim tmThEvtTemp(0 To imLBEvt) As EVTINFO
    ReDim tmFrEvtTemp(0 To imLBEvt) As EVTINFO
    ReDim tmSaEvtTemp(0 To imLBEvt) As EVTINFO
    ReDim tmSuEvtTemp(0 To imLBEvt) As EVTINFO
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mTerminate                      *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: terminate form                 *
'*                                                     *
'*******************************************************
Private Sub mTerminate()
'
'   mTerminate
'   Where:
'
    Dim ilRet As Integer
    '
    'Remove this code when vehicle lock removed- retain as required for spot price
    '
    On Error Resume Next
    If (imVehCode > 0) And (imUpdateAllowed) Then
        mUnblockDay
    End If

    mUrfUpdate Spots, tgUrf()


    smUserVehicleTag = ""

    Screen.MousePointer = vbDefault
    'Unload IconTraf
    igManUnload = YES
    Unload Spots
    igManUnload = NO
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mTestEvtTime                    *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Test event time                *
'*                                                     *
'*******************************************************
Private Sub mTestEvtTime(ilIndex As Integer, ilDay As Integer, ilDayIndex As Integer, llDayTime As Long, tlEvtTemp() As EVTINFO)
    Dim ilLoop As Integer
    If ilIndex < UBound(tlEvtTemp) Then
        If ilDayIndex = -1 Then
            ilDayIndex = ilDay
            If (tlEvtTemp(ilIndex).iType = 99) Or (tlEvtTemp(ilIndex).iType = 100) Or (tlEvtTemp(ilIndex).iType = 101) Then
                'Back up to avail, then check value
                'For ilLoop = ilIndex - 1 To 1 Step -1
                For ilLoop = ilIndex - 1 To imLBEvt Step -1
                    If (tlEvtTemp(ilLoop).iType >= 2) And (tlEvtTemp(ilLoop).iType <= 9) Then
                        llDayTime = tlEvtTemp(ilLoop).lTime
                        Exit For
                    End If
                Next ilLoop
            Else
                llDayTime = tlEvtTemp(ilIndex).lTime
            End If
        Else
            If (tlEvtTemp(ilIndex).iType = 99) Or (tlEvtTemp(ilIndex).iType = 100) Or (tlEvtTemp(ilIndex).iType = 101) Then
                'Back up to avail, then check value
                'For ilLoop = ilIndex - 1 To 1 Step -1
                For ilLoop = ilIndex - 1 To imLBEvt Step -1
                    If (tlEvtTemp(ilLoop).iType >= 2) And (tlEvtTemp(ilLoop).iType <= 9) Then
                        If tlEvtTemp(ilLoop).lTime < llDayTime Then
                            ilDayIndex = ilDay
                            llDayTime = tlEvtTemp(ilLoop).lTime
                        End If
                        Exit Sub
                    End If
                Next ilLoop
            Else
                If tlEvtTemp(ilIndex).lTime < llDayTime Then
                    ilDayIndex = ilDay
                    llDayTime = tlEvtTemp(ilIndex).lTime
                End If
            End If
        End If
    End If
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mUnschSpot                      *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Remove spot from Ssf and       *
'*                      and event arrays               *
'*                                                     *
'*******************************************************
Private Function mUnschSpot(slInStatus As String, ilSpotTo As Integer, slLogDate As String, ilSchGameNo As Integer, llSsfRecPos As Long, llSdfRecPos As Long, tlMdExt() As SDFMDEXT, tlSmf As SMF) As Integer
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilListIndex                                                                           *
'******************************************************************************************

'
'   mUnschSpot ilSpotTo, slLogDate, llSsfRecPos, llSdfRecPos, tmSdfMdExt()
'       slStatus(I)- "M" for missed, "C" for cancelled, D for delete(remove from system)
'       ilSpotTo(I)- 0=Spot from tmAdMdSdfMdExt; 1=Spot from tmSdfMdExt; -1=To Work area temporary; -2 to Work area add vehicle
'       slLogDate(I)- Date of log
'
    Dim ilLogDay As Integer
    Dim ilRet As Integer
    Dim slDate As String
    Dim llDate As Long
    Dim slNameCode As String
    Dim slCode As String
    Dim ilLoop As Integer
    Dim ilMdIndex As Integer
    Dim slMdDate As String
    Dim slInfo As String
    Dim slStatus As String
    Dim ilGsf As Integer
    Dim ilGameNo As Integer
    Dim slSdfStatus As String

    slStatus = slInStatus
    If tmVef.sType <> "G" Then
        ilLogDay = gWeekDayStr(slLogDate)
        If slInStatus = "D" Then
            If (tgVpf(imVpfIndex).sMoveLLD = "Y") Then
                slDate = edcDate.Text   'plcDate.Caption
                llDate = gDateValue(slDate)
                If (gDateValue(slLogDate) >= llDate) And (gDateValue(slLogDate) <= llDate + 6) Then
                    If (llDate + ilLogDay <= lmLastLogDate) Then
                        slStatus = "H"
                    End If
                End If
            End If
        End If
    Else
        If imDW = 0 Then
            'Using 0 as just trying to get game date
            slDate = mFindGameNoDate(ilSchGameNo, 0)
            If slDate = "" Then
                mUnschSpot = False
                Exit Function
            End If
            ilLogDay = gWeekDayStr(slDate)
            llDate = gDateValue(slDate)
        Else
            ilLogDay = mGetGameColumnNo(ilSchGameNo)
            If ilLogDay = -1 Then
                mUnschSpot = False
                Exit Function
            End If
            If imSelectedGameNo + ilLogDay >= lbcGameNo(imGameNoIndex).ListCount Then
                mUnschSpot = False
                Exit Function
            End If
            ilGsf = lbcGameNo(imGameNoIndex).ItemData(imSelectedGameNo + ilLogDay)
            llDate = tmGsfInfo(ilGsf).lGameDate
        End If
        If slInStatus = "D" Then
            If (tgVpf(imVpfIndex).sMoveLLD = "Y") Then
               If (llDate <= lmLastLogDate) Then
                    slStatus = "H"
                End If
            End If
        End If
    End If
    If mMakeMdSpot(llSdfRecPos, tlMdExt()) Then 'tmSdf read in
        slSdfStatus = tmSdf.sSchStatus
        ilMdIndex = UBound(tlMdExt) - 1
        imSsfRecLen = Len(tmSsf(ilLogDay))
        If lmSsfRecPos(ilLogDay) <> llSsfRecPos Then
            ilRet = gSSFGetDirect(hmSsf, tmSsf(ilLogDay), imSsfRecLen, llSsfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
            lmSsfRecPos(ilLogDay) = llSsfRecPos
            If tmVef.sType <> "G" Then
                lmSsfDate(ilLogDay) = gDateValue(slLogDate)
            Else
                lmSsfDate(ilLogDay) = ilSchGameNo
            End If
        End If
'        If lbcMissed.ListIndex < 0 Then
'            igMnfMissed = imMnfMissed
'        Else
'            slNameCode = tmMissedCode(lbcMissed.ListIndex).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
'            'Set missed reason
'            ilRet = gParseItem(slNameCode, 2, "\", slCode)
'            If ilRet = CP_MSG_NONE Then
'                igMnfMissed = Val(slCode)
'            Else
'                igMnfMissed = imMnfMissed
'            End If
'        End If
        If slStatus = "C" Then
            If imCancelReason < 0 Then
                igMnfMissed = imMnfMissed
            Else
                slNameCode = tmMissedCode(imCancelReason).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
                'Set missed reason
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                If ilRet = CP_MSG_NONE Then
                    igMnfMissed = Val(slCode)
                Else
                    igMnfMissed = imMnfMissed
                End If
            End If
        Else
            If imMissedReason < 0 Then
                igMnfMissed = imMnfMissed
            Else
                slNameCode = tmMissedCode(imMissedReason).sKey    'lbcMissedCode.List(lbcMissed.ListIndex)
                'Set missed reason
                ilRet = gParseItem(slNameCode, 2, "\", slCode)
                If ilRet = CP_MSG_NONE Then
                    igMnfMissed = Val(slCode)
                Else
                    igMnfMissed = imMnfMissed
                End If
            End If
        End If

        'Sdf was read in by mMakeMdSpot
        If slStatus <> "D" Then
            If slStatus = "TM" Then 'Temporary into Missed
                ilRet = gMakeTracer(hmSdf, tmSdf, llSdfRecPos, hmStf, lmLastLogDate, "M", "M", tmSdf.iRotNo, hmGsf)
            Else
                ilRet = gMakeTracer(hmSdf, tmSdf, llSdfRecPos, hmStf, lmLastLogDate, slStatus, "M", tmSdf.iRotNo, hmGsf)
            End If
            If Not ilRet Then
                mUnschSpot = False
                Exit Function
            End If
        End If
        'ChgSchSpot resets handle to Ssf
        ilRet = gChgSchSpot(slStatus, hmSdf, tmSdf, hmSmf, ilSchGameNo, tlSmf, hmSsf, tmSsf(ilLogDay), lmSsfDate(ilLogDay), lmSsfRecPos(ilLogDay), hmSxf, hmGsf, hmGhf)
        If Not ilRet Then
            mUnschSpot = False
            Exit Function
        End If
        gUnpackDate tmSdf.iDate(0), tmSdf.iDate(1), slMdDate
        tlMdExt(ilMdIndex).iDate(0) = tmSdf.iDate(0)    'True missed date and time
        tlMdExt(ilMdIndex).iDate(1) = tmSdf.iDate(1)
        tlMdExt(ilMdIndex).iTime(0) = tmSdf.iTime(0)
        tlMdExt(ilMdIndex).iTime(1) = tmSdf.iTime(1)
        tlMdExt(ilMdIndex).lchfcxfCode = -1
        tlMdExt(ilMdIndex).lchfcxfInt = -1
        tlMdExt(ilMdIndex).lClfCxfCode = -1
        tlMdExt(ilMdIndex).iSelected = 0
        tlMdExt(ilMdIndex).lSxfCode = 0
        If (slStatus = "M") And ((slSdfStatus = "G") Or (slSdfStatus = "O")) Then
            tmSxfSrchKey1.sType = "G"
            tmSxfSrchKey1.lSdfCode = tmSdf.lCode
            ilRet = btrGetEqual(hmSxf, tmSxf, imSxfRecLen, tmSxfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                tlMdExt(ilMdIndex).lSxfCode = tmSxf.lCode
            End If
        End If
        ilGameNo = tmSdf.iGameNo
        slInfo = mMakeMissedInfo(tlMdExt(ilMdIndex).lChfCode, tlMdExt(ilMdIndex).iLineNo, tlMdExt(ilMdIndex).lFsfCode, ilGameNo, slMdDate, tlMdExt(ilMdIndex).sAdvtAbbr, tlMdExt(ilMdIndex).sAdvtProd, tlMdExt(ilMdIndex).sPrice, tlMdExt(ilMdIndex).lchfcxfCode, tlMdExt(ilMdIndex).lchfcxfInt, tlMdExt(ilMdIndex).lClfCxfCode, tlMdExt(ilMdIndex).iNoOrdered, tlMdExt(ilMdIndex).iLineInfo, tlMdExt(ilMdIndex).sCntrType, tlMdExt(ilMdIndex).lSxfCode)
        tlMdExt(ilMdIndex).iMissedMG = False
        If Left$(slInfo, 1) = "~" Then
            slInfo = Mid$(slInfo, 2)
            tlMdExt(ilMdIndex).iMissedMG = True
        End If
        If slInfo <> "" Then
            'tlMdExt(ilMdIndex).sShow = Trim$(tlMdExt(ilMdIndex).sShow) & " " & slInfo
            tlMdExt(ilMdIndex).sShow = slInfo
        End If
        tlMdExt(ilMdIndex).sSplitNetwork = "N"
        If tmClf.lRafCode > 0 Then
            tlMdExt(ilMdIndex).sSplitNetwork = "Y"
        End If
        '1/29/14
        tlMdExt(ilMdIndex).sLiveCopy = tmClf.sLiveCopy

        'Clear up internal files
        '4/16/11
        'If (gDateValue(slLogDate) = gDateValue(smLog1Date)) And (tmVef.sType <> "G") Then
        If ((gDateValue(slLogDate) = gDateValue(smLog1Date)) And (tmVef.sType <> "G")) Or ((tmVef.sType = "G") And (ilLogDay >= 0) And (ilLogDay <= 6)) Then
            If (smSplitNetworkType = "P") Then
                ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12M", "12M", ilSchGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmL1Evt())
            Else
                If imLog1Day < 5 Then
                    ilRet = mRemoveEvt(llSdfRecPos, True, tmL1Evt(), tmL1Vcf0())
                ElseIf imLog1Day = 5 Then
                    ilRet = mRemoveEvt(llSdfRecPos, True, tmL1Evt(), tmL1Vcf6())
                Else
                    ilRet = mRemoveEvt(llSdfRecPos, True, tmL1Evt(), tmL1Vcf7())
                End If
            End If
        End If
        '4/16/11
        'If (imLog2Type = 4) And (tmVef.sType <> "G") Then  'Test date of Log 2- if same remove spot
        If (imLog2Type = 4) Then   'Test date of Log 2- if same remove spot
            '4/16/11
            'If gDateValue(slLogDate) = gDateValue(smLog2Date) Then
            If ((gDateValue(slLogDate) = gDateValue(smLog2Date)) And (tmVef.sType <> "G")) Or ((tmVef.sType = "G") And (ilLogDay >= 0) And (ilLogDay <= 6)) Then
                If (smSplitNetworkType = "P") Then
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12M", "12M", ilSchGameNo, tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), imEvtType(), tmL2Evt())
                Else
                    If imLog2Day < 5 Then
                        ilRet = mRemoveEvt(llSdfRecPos, True, tmL2Evt(), tmL2Vcf0())
                    ElseIf imLog2Day = 5 Then
                        ilRet = mRemoveEvt(llSdfRecPos, True, tmL2Evt(), tmL2Vcf6())
                    Else
                        ilRet = mRemoveEvt(llSdfRecPos, True, tmL2Evt(), tmL2Vcf7())
                    End If
                End If
            End If
        End If
        If slInStatus <> "D" Then
            If ilSpotTo = 0 Then    'To tmAdMdSdfMdExt
                If (imLog2Type = 0) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "M") Then
                    'Test date
                    If (gDateValue(smMissedDate) >= gDateValue(gObtainPrevMonday(smAdMdMissedDate))) And (gDateValue(smMissedDate) <= gDateValue(gObtainNextSunday(smAdMdMissedDate))) Then
                        If tmCff(0).sDelete = "N" Then
                            'If (tmCff(0).iSpotsWk <> 0) Or (tmCff(0).iXSpotsWk <> 0) Then
                            If (tmCff(0).sDyWk <> "D") Then
                                tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                                'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                            Else
                                If tmCff(0).iDay(gWeekDayStr(smMissedDate)) > 0 Then
                                    tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                                    'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                    ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                End If
                            End If
                        End If
                    End If
                End If
                If ((imLog2Type = 1) Or (imLog2Type = 2)) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "M") Then
                    If tmCff(0).sDelete = "N" Then
                        'If (tmCff(0).iSpotsWk <> 0) Or (tmCff(0).iXSpotsWk <> 0) Then
                        If (tmCff(0).sDyWk <> "D") Then
                            tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                            'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                            ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                        Else
                            If tmCff(0).iDay(gWeekDayStr(smMissedDate)) > 0 Then
                                tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                                'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                            End If
                        End If
                    End If
                End If
                If (imLog2Type = 3) And (imSelectedAdvt > 0) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "M") Then
                    'Test advertiser
                    slNameCode = tgSpotAdvertiser(imSelectedAdvt).sKey 'Traffic!lbcAdvertiser.List(imSelectedAdvt)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    If Val(slCode) = tmSdf.iAdfCode Then
                        tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                        'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                    End If
                End If
                If (imLog2Type = 10) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "C") Then
                    'Test date
                    If (gDateValue(smMissedDate) >= gDateValue(gObtainPrevMonday(smAdMdMissedDate))) And (gDateValue(smMissedDate) <= gDateValue(gObtainNextSunday(smAdMdMissedDate))) Then
                        If tmCff(0).sDelete = "N" Then
                            'If (tmCff(0).iSpotsWk <> 0) Or (tmCff(0).iXSpotsWk <> 0) Then
                            If (tmCff(0).sDyWk <> "D") Then
                                tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                                'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                            Else
                                If tmCff(0).iDay(gWeekDayStr(smMissedDate)) > 0 Then
                                    tmSdfMdExt(UBound(tmSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                                    'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                    ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                End If
                            End If
                        End If
                    End If
                End If
                If ((imAdMdType = 9) And (slInStatus = "M")) Or ((imAdMdType <> 9) And (slInStatus = "C")) Then
                    'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
                    ReDim Preserve tlMdExt(0 To UBound(tlMdExt) - 1) As SDFMDEXT
                End If
            ElseIf ilSpotTo = 1 Then    'To tmSdfMdExt
                If (imAdMdType = 0) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "M") Then
                    'Test date
                    If (gDateValue(smAdMdMissedDate) >= gDateValue(gObtainPrevMonday(smMissedDate))) And (gDateValue(smAdMdMissedDate) <= gDateValue(gObtainNextSunday(smMissedDate))) Then
                        If tmCff(0).sDelete = "N" Then
                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                            'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                        End If
                    End If
                End If
                If (imAdMdType = 1) Or (imAdMdType = 2) And (slInStatus = "M") Then
                    If tmCff(0).sDelete = "N" Then
                        tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                        'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                    End If
                End If
                If (imAdMdType = 3) And (imAdMdSelectedAdvt > 0) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "M") Then
                    'Test advertiser
                    slNameCode = tgSpotAdvertiser(imAdMdSelectedAdvt).sKey 'Traffic!lbcAdvertiser.List(imAdMdSelectedAdvt)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    If Val(slCode) = tmSdf.iAdfCode Then
                        tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                        'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                    End If
                End If
                If (imAdMdType = 9) And (tmSdf.iVefCode = imVehCode) And (slInStatus = "C") Then
                    'Test date
                    If (gDateValue(smAdMdMissedDate) >= gDateValue(gObtainPrevMonday(smMissedDate))) And (gDateValue(smAdMdMissedDate) <= gDateValue(gObtainNextSunday(smMissedDate))) Then
                        If tmCff(0).sDelete = "N" Then
                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tlMdExt(UBound(tlMdExt) - 1)
                            'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                        End If
                    End If
                End If
                If ((imLog2Type = 10) And (slInStatus = "M")) Or ((imLog2Type <> 10) And (slInStatus = "C")) Then
                    'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
                    ReDim Preserve tlMdExt(0 To UBound(tlMdExt) - 1) As SDFMDEXT
                End If
            ElseIf ilSpotTo = -2 Then   'Work area, add vehicle
                If (slInStatus <> "C") And (slInStatus <> "D") Then 'Cancel or Delete
                    '9/23/15: not required as fixed error of vehicle not showing after length in sShow
                    'tmVefSrchKey.iCode = tmSdf.iVefCode
                    'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    'tlMdExt(ilMdIndex).sShow = Trim$(tlMdExt(ilMdIndex).sShow) & " " & Trim$(tmOrigVef.sName)
                End If
            End If
        Else
            'ReDim Preserve tlMdExt(1 To UBound(tlMdExt) - 1) As SDFMDEXT
            ReDim Preserve tlMdExt(0 To UBound(tlMdExt) - 1) As SDFMDEXT
        End If
        If (tmSdf.lChfCode = lmCountChfCode) And (tmSdf.lFsfCode = lmCountFsfCode) Then
            'For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
                If tmSdfExt(ilLoop).lRecPos = llSdfRecPos Then
'                    If (imToggleRot = 1) Or (imToggleRot = 2) Or ((imToggleRot = 3) And (imCountLineNo = tmSdfExt(ilLoop).iLineNo)) Then
                        mAdjCounts -1, tmSdfExt(ilLoop)
'                    End If
                    tmSdfExt(ilLoop).sSchStatus = tmSdf.sSchStatus
                    Exit For
                End If
            Next ilLoop
        End If
        If tmVef.sType <> "G" Then
            slDate = edcDate.Text   'plcDate.Caption
            llDate = gDateValue(slDate)
        End If
        If ((gDateValue(slLogDate) >= llDate) And (gDateValue(slLogDate) <= llDate + 6) And (tmVef.sType <> "G")) Or ((tmVef.sType = "G") And (ilLogDay >= 0) And (ilLogDay <= 6)) Then
            Select Case ilLogDay
                Case 0  'Monday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), imEvtType(), tmMoEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmMoEvt(), tmMoVcf0()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
                Case 1  'Tuesday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), imEvtType(), tmTuEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmTuEvt(), tmTuVcf0()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
                Case 2  'Wednesday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), imEvtType(), tmWeEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmWeEvt(), tmWeVcf0()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
                Case 3  'Thursday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmThVcf0(), tmThVcf6(), tmThVcf7(), imEvtType(), tmThEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmThEvt(), tmThVcf0()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
                Case 4  'Friday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), imEvtType(), tmFrEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmFrEvt(), tmFrVcf0()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
                Case 5  'Saturday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), imEvtType(), tmSaEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmSaEvt(), tmSaVcf6()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
                Case 6  'Sunday
                    If (smSplitNetworkType = "P") Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slLogDate, "12m", "12m", ilGameNo, tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), imEvtType(), tmSuEvt())
                        mSyncDays
                    Else
                        If mRemoveEvt(llSdfRecPos, True, tmSuEvt(), tmSuVcf7()) Then
                            mSyncDays
    '                        mVbcAvailMinMax False
    '                        mVbcContractMinMax False
                        End If
                    End If
            End Select
        End If
        mUnschSpot = True
    Else
        mUnschSpot = False
    End If
    Exit Function
End Function
'*******************************************************
'*                                                     *
'*      Procedure Name:mUrfUpdate                  *
'*                                                     *
'*             Created:5/19/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments:Update User calendar/calculator *
'*                     related fields in the records   *
'*                                                     *
'*******************************************************
Private Sub mUrfUpdate(frm As Form, tlUrf() As URF)
'
'   mUrfUpdateCal MainForm, tlUrf()
'   Where:
'       MainForm (I)- Name of Form to unload if error exists
'       tlUrf (O)- the updated user records
'                   Note: tlUrf must be defined as Dim tlUrf() as URF
'
    Dim ilRecLen As Integer     'URF record length
    Dim hlUrf As Integer        'User Option file handle
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim tlUrfSet As URF    'Position to record so it can be updated
    Dim tlSrchKey As INTKEY0    'URF key record image
    Dim ilValue As Integer
    Dim ilCount As Integer

    hlUrf = CBtrvTable(TWOHANDLES)
    ilRet = btrOpen(hlUrf, "", sgDBPath & "Urf.btr", BTRV_OPEN_NORMAL, BTRV_OPEN_NONSHARE, BTRV_LOCK_NONE)
    On Error GoTo mUrfUpdateCalErr
    gBtrvErrorMsg ilRet, "mUrfUpdate (btrOpen):" & "Urf.Btr", frm
    On Error GoTo 0
    On Error GoTo gUrfNoDefinedErr
    ilRecLen = Len(tgUrf(0))  'btrRecordLength(hlUrf)  'Get and save record length
    If tgUrf(0).iCode <= 0 Then
        On Error GoTo 0
        Exit Sub
    End If
    On Error GoTo 0
    For ilLoop = LBound(tgUrf) To UBound(tgUrf) Step 1
        ilCount = 0
        Do
            tlSrchKey.iCode = tgUrf(ilLoop).iCode
            ilRet = btrGetEqual(hlUrf, tlUrfSet, ilRecLen, tlSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORWRITE)
            gUrfDecrypt tlUrfSet
            On Error GoTo mUrfUpdateCalErr
            gBtrvErrorMsg ilRet, "mUrfUpdate (btrGetEqual)", frm
            On Error GoTo 0
            tlUrfSet.sSpotFont = smSpotFont
            tgUrf(ilLoop).sSpotFont = smSpotFont
            ilValue = 0
            If imAvailPd Then
                ilValue = ilValue Or AVAILBYWD
            End If
            If imAvailTm Then
                ilValue = ilValue Or AVAILBYHD
            End If
            If imAvailSd = 1 Then
                ilValue = ilValue Or &H4
            End If
            If imAvailSd = 2 Then
                ilValue = ilValue Or &H8
            End If
            If imAvailNo Then
                ilValue = ilValue Or AVAILBYNP
            End If
            If imAvailUn Then
                ilValue = ilValue Or AVAILBYUS
            End If
            tlUrfSet.sAvailSettings = Chr$(ilValue)
            tgUrf(ilLoop).sAvailSettings = tlUrfSet.sAvailSettings
            gUrfEncrypt tlUrfSet
            ilRet = btrUpdate(hlUrf, tlUrfSet, ilRecLen)
            If ilRet <> BTRV_ERR_NONE Then
                If (ilRet = 30000) Or (ilRet = 30001) Or (ilRet = 30002) Or (ilRet = 30003) Then
                    ilRet = csiHandleValue(0, 7)
                End If
            End If
            If (ilRet = BTRV_ERR_CONFLICT) Or (ilRet = BTRV_ERR_DEADLOCK_DETECT) Then
                Sleep 100
            End If
            ilCount = ilCount + 1
            If ilCount >= 4 Then
                Exit Do
            End If
        Loop While (ilRet = BTRV_ERR_CONFLICT) Or (ilRet = BTRV_ERR_DEADLOCK_DETECT)
        On Error GoTo mUrfUpdateCalErr
        gBtrvErrorMsg ilRet, "mUrfUpdate (btrUpdate)", frm
        On Error GoTo 0
'        ilRet = csiSetRec("URF", ilLoop, VarPtr(tgUrf(ilLoop)), LenB(tgUrf(ilLoop)))
    Next ilLoop
    ilRet = btrClose(hlUrf)
    btrDestroy hlUrf
    Exit Sub
mUrfUpdateCalErr:
    ilRet = btrClose(hlUrf)
    btrDestroy hlUrf
    'Error ERRORCODEBASE
    Exit Sub
gUrfNoDefinedErr:
    ilRet = btrClose(hlUrf)
    btrDestroy hlUrf
    Exit Sub
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVbcAvailMinMax                 *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine max number of rows   *
'*                                                     *
'*******************************************************
Private Sub mVbcAvailMinMax(ilSetToMin As Integer)
    Dim ilMax As Integer
    Dim ilCurrentValue As Integer
    ilCurrentValue = vbcAvail.Value
    imIgnoreChg = True
    vbcAvail.Min = 1
    ilMax = 1
    If imAvailTm = 1 Then   '0=Hourly; 1=Daypart
        imIgnoreChg = True
        ilMax = UBound(tmRCDP) - 1
        If ilMax <= vbcAvail.LargeChange + 1 Then
            vbcAvail.Max = 1
        Else
            vbcAvail.Max = ilMax - vbcAvail.LargeChange '(ilMax - vbcContract.Min) \ (vbcContract.LargeChange + 1) + 1
        End If
        imIgnoreChg = False
        If vbcAvail.Value <> vbcAvail.Min Then
            vbcAvail.Value = vbcAvail.Min
        Else
            vbcAvail_Change
        End If
    Else
        ilMax = 24
        imIgnoreChg = True
        If ilMax <= vbcAvail.LargeChange + 1 Then
            vbcAvail.Max = 1
        Else
            vbcAvail.Max = ilMax - vbcAvail.LargeChange '(ilMax - vbcContract.Min) \ (vbcContract.LargeChange + 1) + 1
        End If
        imIgnoreChg = False
        If ilSetToMin Then
            If vbcAvail.Value <> 7 Then '12a=1; 1a=2; 2a=3,..
                vbcAvail.Value = 7
            Else
                vbcAvail_Change
            End If
        Else
            If ilCurrentValue > vbcAvail.Max Then
                If vbcAvail.Value <> vbcAvail.Max Then
                    vbcAvail.Value = vbcAvail.Max
                Else
                    vbcAvail_Change
                End If
            Else
                vbcAvail_Change
            End If
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVbcContractMinMax              *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine max number of rows   *
'*                                                     *
'*******************************************************
Private Sub mVbcContractMinMax(ilSetToMin As Integer)
    Dim ilMax As Integer
    Dim ilLoop As Integer
    Dim ilCount As Integer
    Dim ilCurrentValue As Integer
    Dim slDate As String
    Dim llDate As Long
    ilCurrentValue = vbcContract.Value
    imIgnoreChg = True
    vbcContract.Min = imLBEvt   '1
    ilMax = imLBEvt '1
    If lmSelectedChfCode = -1 Then
        ilMax = UBound(tmMoEvt) - 1 'All days have same count
        If tmVef.sType = "G" Then
            If UBound(tmTuEvt) - 1 > ilMax Then
                ilMax = UBound(tmTuEvt) - 1
            End If
            If UBound(tmWeEvt) - 1 > ilMax Then
                ilMax = UBound(tmWeEvt) - 1
            End If
            If UBound(tmThEvt) - 1 > ilMax Then
                ilMax = UBound(tmThEvt) - 1
            End If
            If UBound(tmFrEvt) - 1 > ilMax Then
                ilMax = UBound(tmFrEvt) - 1
            End If
            If UBound(tmSaEvt) - 1 > ilMax Then
                ilMax = UBound(tmSaEvt) - 1
            End If
            If UBound(tmSuEvt) - 1 > ilMax Then
                ilMax = UBound(tmSuEvt) - 1
            End If
        End If
    Else
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate)
            mGetEdcDate 0
            slDate = smEdcDate
            llDate = lmEdcDate
        Else
            llDate = 0
        End If
        ilCount = 0
        'For ilLoop = LBound(tmMoEvt) To UBound(tmMoEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmMoEvt) - 1 Step 1
            If (tmMoEvt(ilLoop).iType = 100) And (tmMoEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmMoEvt(ilLoop).lLen
                lmHighlightFeedCode = tmMoEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmMoEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
        ilCount = 0
        'For ilLoop = LBound(tmTuEvt) To UBound(tmTuEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmTuEvt) - 1 Step 1
            If (tmTuEvt(ilLoop).iType = 100) And (tmTuEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmTuEvt(ilLoop).lLen
                lmHighlightFeedCode = tmTuEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmTuEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate + 1 = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
        ilCount = 0
        'For ilLoop = LBound(tmWeEvt) To UBound(tmWeEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmWeEvt) - 1 Step 1
            If (tmWeEvt(ilLoop).iType = 100) And (tmWeEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmWeEvt(ilLoop).lLen
                lmHighlightFeedCode = tmWeEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmWeEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate + 2 = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
        ilCount = 0
        'For ilLoop = LBound(tmThEvt) To UBound(tmThEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmThEvt) - 1 Step 1
            If (tmThEvt(ilLoop).iType = 100) And (tmThEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmThEvt(ilLoop).lLen
                lmHighlightFeedCode = tmThEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmThEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate + 3 = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
        ilCount = 0
        'For ilLoop = LBound(tmFrEvt) To UBound(tmFrEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmFrEvt) - 1 Step 1
            If (tmFrEvt(ilLoop).iType = 100) And (tmFrEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmFrEvt(ilLoop).lLen
                lmHighlightFeedCode = tmFrEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmFrEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate + 4 = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
        ilCount = 0
        'For ilLoop = LBound(tmSaEvt) To UBound(tmSaEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmSaEvt) - 1 Step 1
            If (tmSaEvt(ilLoop).iType = 100) And (tmSaEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmSaEvt(ilLoop).lLen
                lmHighlightFeedCode = tmSaEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmSaEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate + 5 = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
        ilCount = 0
        'For ilLoop = LBound(tmSuEvt) To UBound(tmSuEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmSuEvt) - 1 Step 1
            If (tmSuEvt(ilLoop).iType = 100) And (tmSuEvt(ilLoop).lLen = lmSelectedChfCode) Then
                ilCount = ilCount + 1
                lmHighlightCntrCode = tmSuEvt(ilLoop).lLen
                lmHighlightFeedCode = tmSuEvt(ilLoop).lFsfCode
                imHighlightAdvtCode = tmSuEvt(ilLoop).lInfo And &H7FFF
            End If
        Next ilLoop
        For ilLoop = LBound(tmSdfExt) To UBound(tmSdfExt) - 1 Step 1
            If ((tmSdfExt(ilLoop).sSchStatus <> "S") And (tmSdfExt(ilLoop).sSchStatus <> "G") And (tmSdfExt(ilLoop).sSchStatus <> "O")) Then
                gUnpackDate tmSdfExt(ilLoop).iDate(0), tmSdfExt(ilLoop).iDate(1), slDate
                If llDate + 6 = gDateValue(slDate) Then
                    ilCount = ilCount + 1
                End If
            End If
        Next ilLoop
        If ilCount > ilMax Then
            ilMax = ilCount
        End If
    End If
    imAMax = ilMax
    imIgnoreChg = True
    If ilMax <= vbcContract.LargeChange + 1 Then
        vbcContract.Max = 1
    Else
        vbcContract.Max = ilMax - vbcContract.LargeChange '(ilMax - vbcContract.Min) \ (vbcContract.LargeChange + 1) + 1
    End If
    imIgnoreChg = False
    '1/30/12: Eliminate white screen
    '2/1/12: Eliminated the setting of enable because of a date change (2/20 cause change from 2/20/12). scan for 2/1/12 to see test change
    'tmcClick.Enabled = False
    If ilSetToMin Then
        If vbcContract.Value <> vbcContract.Min Then
            vbcContract.Value = vbcContract.Min
        Else
            vbcContract_Change
        End If
    Else
        If ilCurrentValue > vbcContract.Max Then
            If vbcContract.Value <> vbcContract.Max Then
                vbcContract.Value = vbcContract.Max
            Else
                vbcContract_Change
            End If
        Else
            vbcContract_Change
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVbcHoldMinMax                  *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine max number of rows   *
'*                                                     *
'*******************************************************
Private Sub mVbcHoldMinMax(ilSetToMin As Integer)
    Dim ilMax As Integer
    Dim ilCurrentValue As Integer
    ilCurrentValue = vbcHold.Value
    imIgnoreChg = True
    vbcHold.Min = 1
    ilMax = UBound(tmWAMdExt) - 1
    imHoldMax = ilMax
    imIgnoreChg = True
    If ilMax + 1 <= vbcHold.LargeChange + 1 Then
        vbcHold.Max = 1
    Else
        vbcHold.Max = ilMax - vbcHold.LargeChange + 1 '(ilMax - vbcLog2.Min) \ (vbcLog2.LargeChange + 1) + 1
    End If
    imIgnoreChg = False
    If ilSetToMin Then
        If vbcHold.Value <> vbcHold.Min Then
            vbcHold.Value = vbcHold.Min
        Else
            vbcHold_Change
        End If
    Else
        If ilCurrentValue > vbcHold.Max Then
            If vbcHold.Value <> vbcHold.Max Then
                vbcHold.Value = vbcHold.Max
            Else
                vbcHold_Change
            End If
        Else
            vbcHold_Change
        End If
    End If
    imIgnoreChg = False
    ilCurrentValue = vbcAdWorkArea.Value
    imIgnoreChg = True
    vbcAdWorkArea.Min = 1
    'ilMax = UBound(tmWAMdExt) - 1
    'imHoldMax = ilMax
    imIgnoreChg = True
    If ilMax + 1 <= vbcAdWorkArea.LargeChange + 1 Then
        vbcAdWorkArea.Max = 1
    Else
        vbcAdWorkArea.Max = ilMax - vbcAdWorkArea.LargeChange + 1 '(ilMax - vbcLog2.Min) \ (vbcLog2.LargeChange + 1) + 1
    End If
    imIgnoreChg = False
    If ilSetToMin Then
        If vbcAdWorkArea.Value <> vbcAdWorkArea.Min Then
            vbcAdWorkArea.Value = vbcAdWorkArea.Min
        Else
            vbcAdWorkArea_Change
        End If
    Else
        If ilCurrentValue > vbcAdWorkArea.Max Then
            If vbcAdWorkArea.Value <> vbcAdWorkArea.Max Then
                vbcAdWorkArea.Value = vbcAdWorkArea.Max
            Else
                vbcAdWorkArea_Change
            End If
        Else
            vbcAdWorkArea_Change
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVbcL1MinMax                    *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine max number of rows   *
'*                                                     *
'*******************************************************
Private Sub mVbcL1MinMax(ilSetToMin As Integer)
    Dim ilMax As Integer
    Dim ilLoop As Integer
    Dim ilCurrentValue As Integer
    Dim ilIndex As Integer
    Dim ilCntAsUnsold As Integer
    ilCurrentValue = vbcLog1.Value
    imIgnoreChg = True
    vbcLog1.Min = 1
    If imL1View = 1 Then    'All events
        ilMax = UBound(tmL1Evt) - 1
    ElseIf imL1View = 0 Then 'Avails/Spots
        ilMax = 0
        'For ilLoop = LBound(tmL1Evt) To UBound(tmL1Evt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmL1Evt) - 1 Step 1
            '7/5/14: Add check box for showing/not showing ghost spots
            'If ((tmL1Evt(ilLoop).iType >= 2) And (tmL1Evt(ilLoop).iType <= 9)) Or ((tmL1Evt(ilLoop).iType = 99)) Or ((tmL1Evt(ilLoop).iType = 100)) Or ((tmL1Evt(ilLoop).iType = 101)) Then
            If ((tmL1Evt(ilLoop).iType >= 2) And (tmL1Evt(ilLoop).iType <= 9)) Or ((tmL1Evt(ilLoop).iType = 99)) Or ((tmL1Evt(ilLoop).iType = 100)) Or ((tmL1Evt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then
                ilMax = ilMax + 1
            End If
        Next ilLoop
    Else    'Unsold only
        'For ilLoop = LBound(tmL1Evt) To UBound(tmL1Evt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmL1Evt) - 1 Step 1
            If (tmL1Evt(ilLoop).iType >= 2) And (tmL1Evt(ilLoop).iType <= 9) Then
                'Scan formwar to test if unsold defined
                For ilIndex = ilLoop + 1 To UBound(tmL1Evt) - 1 Step 1
                    If (tmL1Evt(ilIndex).iType = 99) Then    'Unsold
                        ilCntAsUnsold = True
                        Exit For
                    ElseIf (tmL1Evt(ilIndex).iType <> 100) And (tmL1Evt(ilIndex).iType <> 101) Then
                        ilCntAsUnsold = False
                        Exit For
                    End If
                Next ilIndex
                If ilCntAsUnsold Then
                    ilMax = ilMax + 1
                End If
            Else
                If ilCntAsUnsold Then
                    '7/5/14: Add check box for showing/not showing ghost spots
                    'If (tmL1Evt(ilLoop).iType = 99) Or (tmL1Evt(ilLoop).iType = 100) Or (tmL1Evt(ilLoop).iType = 101) Then     'Unsold or spot or conflicts
                    If (tmL1Evt(ilLoop).iType = 99) Or (tmL1Evt(ilLoop).iType = 100) Or ((tmL1Evt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then     'Unsold or spot or conflicts
                        ilMax = ilMax + 1
                    Else
                        ilCntAsUnsold = False
                    End If
                End If
            End If
        Next ilLoop
    End If
    imL1Max = ilMax
    imIgnoreChg = True
    If ilMax <= vbcLog1.LargeChange + 1 Then
        vbcLog1.Max = 1
    Else
        vbcLog1.Max = ilMax - vbcLog1.LargeChange '(ilMax - vbcLog1.Min) \ (vbcLog1.LargeChange + 1) + 1
    End If
    imIgnoreChg = False
    If ilSetToMin Then
        If vbcLog1.Value <> vbcLog1.Min Then
            vbcLog1.Value = vbcLog1.Min
        Else
            vbcLog1_Change
        End If
    Else
        If ilCurrentValue > vbcLog1.Max Then
            If vbcLog1.Value <> vbcLog1.Max Then
                vbcLog1.Value = vbcLog1.Max
            Else
                vbcLog1_Change
            End If
        Else
            vbcLog1_Change
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVbcL2MinMax                    *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine max number of rows   *
'*                                                     *
'*******************************************************
Private Sub mVbcL2MinMax(ilSetToMin As Integer)
    Dim ilMax As Integer
    Dim ilLoop As Integer
    Dim ilCurrentValue As Integer
    Dim ilSpace As Integer
    ilCurrentValue = vbcLog2.Value
    imIgnoreChg = True
    vbcLog2.Min = 1
    If imLog2Type = 4 Then  'Log2
        ilSpace = 0
        If imL2View = 1 Then    'All events
            ilMax = UBound(tmL2Evt) - 1
        Else
            ilMax = 0
            'For ilLoop = LBound(tmL2Evt) To UBound(tmL2Evt) - 1 Step 1
            For ilLoop = imLBEvt To UBound(tmL2Evt) - 1 Step 1
                '7/5/14: Add check box for showing/not showing ghost spots
                'If ((tmL2Evt(ilLoop).iType >= 2) And (tmL2Evt(ilLoop).iType <= 9)) Or ((tmL2Evt(ilLoop).iType = 99)) Or ((tmL2Evt(ilLoop).iType = 100)) Or ((tmL2Evt(ilLoop).iType = 101)) Then
                If ((tmL2Evt(ilLoop).iType >= 2) And (tmL2Evt(ilLoop).iType <= 9)) Or ((tmL2Evt(ilLoop).iType = 99)) Or ((tmL2Evt(ilLoop).iType = 100)) Or ((tmL2Evt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then
                    ilMax = ilMax + 1
                End If
            Next ilLoop
        End If
    ElseIf (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 10) Or (imLog2Type = 11) Then   'Missed by Advertiser or date or Cancelled or Hidden
        ilMax = UBound(tmSdfMdExt) - 1
        ilSpace = 1
    ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then  'Non-scheduled contracts
        ilSpace = 0
        ilMax = lbcL2ManSch.ListCount
    End If
    imL2Max = ilMax
    imIgnoreChg = True
    If ilMax + ilSpace <= vbcLog2.LargeChange + 1 Then
        vbcLog2.Max = 1
    Else
        vbcLog2.Max = ilMax - vbcLog2.LargeChange + ilSpace '(ilMax - vbcLog2.Min) \ (vbcLog2.LargeChange + 1) + 1
    End If
    imIgnoreChg = False
    If ilSetToMin Then
        If vbcLog2.Value <> vbcLog2.Min Then
            vbcLog2.Value = vbcLog2.Min
        Else
            vbcLog2_Change
        End If
    Else
        If ilCurrentValue > vbcLog2.Max Then
            If vbcLog2.Value <> vbcLog2.Max Then
                vbcLog2.Value = vbcLog2.Max
            Else
                vbcLog2_Change
            End If
        Else
            vbcLog2_Change
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVbcMissedMinMax                *
'*                                                     *
'*             Created:2/28/94       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Determine max number of rows   *
'*                                                     *
'*******************************************************
Private Sub mVbcMissedMinMax(ilSetToMin As Integer)
    Dim ilMax As Integer
    Dim ilCurrentValue As Integer
    ilCurrentValue = vbcMissed.Value
    imIgnoreChg = True
    vbcMissed.Min = 1
    If (imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 9) Or (imAdMdType = 10) Then  'Missed by Advertiser or date
        ilMax = UBound(tmAdMdSdfMdExt) - 1
    ElseIf imAdMdType > 3 Then
        'Count only contracts that are active within Log1 date (Monday-Sunday)
        ilMax = lbcAdMdManSch.ListCount
    End If
    imAdMdMax = ilMax
    imIgnoreChg = True
    'Add + 1 so extra space at bottom for missed spot to be dragged
    If ilMax + 1 <= vbcMissed.LargeChange + 1 Then
        vbcMissed.Max = 1
    Else
        vbcMissed.Max = ilMax - vbcMissed.LargeChange + 1 '(ilMax - vbcMissed.Min) \ (vbcMissed.LargeChange + 1) + 1
    End If
    imIgnoreChg = False
    If ilSetToMin Then
        If vbcMissed.Value <> vbcMissed.Min Then
            vbcMissed.Value = vbcMissed.Min
        Else
            vbcMissed_Change
        End If
    Else
        If ilCurrentValue > vbcMissed.Max Then
            If vbcMissed.Value <> vbcMissed.Max Then
                vbcMissed.Value = vbcMissed.Max
            Else
                vbcMissed_Change
            End If
        Else
            vbcMissed_Change
        End If
    End If
    imIgnoreChg = False
End Sub
'*******************************************************
'*                                                     *
'*      Procedure Name:mVehPop                         *
'*                                                     *
'*             Created:5/13/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate the selection combo   *
'*                      box                            *
'*                                                     *
'*******************************************************
Private Sub mVehPop()
    Dim ilRet As Integer
    Dim llFilter As Long

    ''ilRet = gPopUserVehicleBox(Spots, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + ACTIVEVEH, cbcVehicle, Traffic!lbcUserVehicle)
    'ilRet = gPopUserVehicleBox(Spots, VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + ACTIVEVEH, cbcVehicle, tmUserVehicle(), smUserVehicleTag)
    If tgSpf.sMktBase = "Y" Then
        llFilter = VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + ACTIVEVEH + VEHBYMKT + VEHEXCLUDEPODNOPRGM  ' Airing and all conventional vehicles (except with Log) and Log, 1/25/21 exclude CPM vehicles, 2/8/21 - exclude podcast w/o program based on ad server.
        ilRet = gPopUserVehicleByMkt(Spots, llFilter, igSpotMktCode(), cbcVehicle, tmUserVehicle(), smUserVehicleTag)
    Else
        llFilter = VEHCONV_WO_FEED + VEHCONV_W_FEED + VEHSELLING + VEHVIRTUAL + ACTIVEVEH + VEHEXCLUDEPODNOPRGM  ' Airing and all conventional vehicles (except with Log) and Log, 1/25/21 exclude CPM vehicles, 2/8/21 - exclude podcast w/o program based on ad server.
        ilRet = gPopUserVehicleBox(Spots, llFilter, cbcVehicle, tmUserVehicle(), smUserVehicleTag)
    End If
    If ilRet <> CP_MSG_NOPOPREQ Then
        On Error GoTo mVehPopErr
        gCPErrorMsg ilRet, "mVehPop (gPopUserVehicleBox: Vehicle)", Spots
        On Error GoTo 0
    End If
    Exit Sub
mVehPopErr:
    On Error GoTo 0
    imTerminate = True
    Exit Sub
End Sub
'
'
'               mWriteSWFSnap - all data for Snapshot has been
'               created in memory.  Write SWF records for Crystal
'               to print.  Determine how many carriage returns exist
'               for each avail, and create a SWF record for each one.
'
'               DH 12-9-99
'
'
Private Sub mWriteSWFSnap()
    Dim ilCount As Integer
    ReDim slDayStr(0 To 6) As String
    ReDim ilSpotIndex(0 To 6) As Integer
    ReDim ilSpotLength(0 To 6) As Integer
    Dim ilCR As Integer
    Dim ilTemp As Integer
    Dim slStr As String
    Dim ilDay As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer

    slDayStr(0) = tmSwf.sDay1
    slDayStr(1) = tmSwf.sDay2
    slDayStr(2) = tmSwf.sDay3
    slDayStr(3) = tmSwf.sDay4
    slDayStr(4) = tmSwf.sDay5
    slDayStr(5) = tmSwf.sDay6
    slDayStr(6) = tmSwf.sDay7
    ilCount = 0
    For ilDay = 0 To 6
        'return the max # of carriage returns out of mon-sun
        slDayStr(ilDay) = slDayStr(ilDay) & Chr$(10)    'append cr on last line in avail
        ilCount = mGetEventLength(slDayStr(ilDay), ilCount)
        ilSpotIndex(ilDay) = 1
    Next ilDay
    ilCR = ilCount
    'ilCR contains the max number of carriage returns for the number of SWf records to create
    'All 7 days built for the one avail
    'If Trim$(tmSwf.sDay1) <> "" Then
    If Trim$(slDayStr(0)) <> "" Then
        tmSwf.sDay1 = ""
        tmSwf.sDay2 = ""
        tmSwf.sDay3 = ""
        tmSwf.sDay4 = ""
        tmSwf.sDay5 = ""
        tmSwf.sDay6 = ""
        tmSwf.sDay7 = ""
        For ilLoop = 1 To ilCR + 1
            For ilDay = 0 To 6
                slStr = ""
                ilTemp = InStr(ilSpotIndex(ilDay), slDayStr(ilDay), Chr$(10))
                If ilTemp > 0 Then
                    ilSpotLength(ilDay) = ilTemp
                    If ilSpotLength(ilDay) - ilSpotIndex(ilDay) > 0 Then  '(start loc of c/r - previous start loc) = position of current c/r.
                                                                            'Test for c/r back to back, no data
                        slStr = Mid$(slDayStr(ilDay), ilSpotIndex(ilDay), ilSpotLength(ilDay) - ilSpotIndex(ilDay))   'look for c/r
                    End If
                    'set day with string
                    'tmswf..... = slStr
                    ilSpotIndex(ilDay) = ilSpotLength(ilDay) + 1
                Else
                    'determine if last line of avail (there isnt a c/r at the end)
                    If ilSpotLength(ilDay) - ilSpotIndex(ilDay) > 0 Then
                        slStr = Mid$(slDayStr(ilDay), ilSpotIndex(ilDay), ilSpotLength(ilDay) - ilSpotIndex(ilDay))   'look for c/r
                    End If  'blank or none
                End If
                If ilDay = 0 Then
                    tmSwf.sDay1 = slStr
                ElseIf ilDay = 1 Then
                    tmSwf.sDay2 = slStr
                ElseIf ilDay = 2 Then
                    tmSwf.sDay3 = slStr
                ElseIf ilDay = 3 Then
                    tmSwf.sDay4 = slStr
                ElseIf ilDay = 4 Then
                    tmSwf.sDay5 = slStr
                ElseIf ilDay = 5 Then
                    tmSwf.sDay6 = slStr
                ElseIf ilDay = 6 Then
                    tmSwf.sDay7 = slStr
                End If
            Next ilDay
            tmSwf.lSeqNo = tmSwf.lSeqNo + 1     '2-2-05 chg to long
            tmSwf.lCode = 0
            ilRet = btrInsert(hmSwf, tmSwf, imSwfRecLen, INDEXKEY1)
        Next ilLoop
    End If
    tmSwf.lSeqNo = (tmSwf.lSeqNo \ 100) * 100 + 100 '2-2-05 chg to long
End Sub
Private Sub pbcAdWorkArea_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcAdWorkArea_DragDrop(Source As control, X As Single, Y As Single)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  llDate                                                                                *
'******************************************************************************************

    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim slDate As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim llSdfRecPos As Long
    Dim ilGameNo As Integer
    Dim ilMove As Integer

    imShowWhere = False
    'If imDragDest = -1 Then
    If (imDragDest = -1) Or (imDblClickMode = 2) Or (Not imUpdateAllowed) Then
        mClearDrag True
        Exit Sub
    End If
    mClearSpotInfo False
    Screen.MousePointer = vbHourglass
    If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1) And (imDragSrce = DRAGADMD) Then
        'Find index
        'For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
        For ilLoop = imLBSdfMdExt To UBound(tmSvAdMdSdfMdExt) Step 1
            If (tmAdMdSdfMdExt(imDragIndexSrce).lCntrNo = tmSvAdMdSdfMdExt(ilLoop).lCntrNo) And (tmAdMdSdfMdExt(imDragIndexSrce).iLen = tmSvAdMdSdfMdExt(ilLoop).iLen) Then
                imDragIndexSrce = ilLoop
                imDragRowNoSrce = ilLoop
                Exit For
            End If
        Next ilLoop
        ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
        For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
            tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
        Next ilLoop
    End If
    Select Case imDragSrce
        Case DRAGCONTRACT   'Move spot to bump and show within work
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate)
            'slDate = Format$(llDate + imDragColNoSrce - 1, "m/d/yy")
            mGetEdcDate imDragColNoSrce - 1
            slDate = smEdcDate
            ilGameNo = imEdcGameNo
            'Determine if move or swap
            If imDragRowNoDest >= UBound(tmWAMdExt) Then  'Move
                'If Not mBlockDay(65536 * imVehCode + gDateValue(slDate), 0) Then
                If Not mBlockDay(65536 * imVehCode + lmLockDate, 0) Then
                    mClearDrag False
                    mForceRepaintWeekly False
                    Exit Sub
                End If
                ilRet = mBeginTrans(True, False)    'btrBeginTrans(hmSdf, 1000)
                If ilRet <> BTRV_ERR_NONE Then
                    'Screen.MousePointer = vbDefault
                    'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                    'mClearDrag False
                    mUnblockDay
                    Exit Sub
                End If
                Select Case imDragColNoSrce
                    Case 1  'Monday
                        llSdfRecPosSrce = tmMoEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmMoEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    Case 2  'Tuesday
                        llSdfRecPosSrce = tmTuEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmTuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    Case 3  'Wednesday
                        llSdfRecPosSrce = tmWeEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmWeEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    Case 4  'Thursday
                        llSdfRecPosSrce = tmThEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmThEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    Case 5  'Friday
                        llSdfRecPosSrce = tmFrEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmFrEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    Case 6  'Saturday
                        llSdfRecPosSrce = tmSaEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmSaEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    Case 7  'Sunday
                        llSdfRecPosSrce = tmSuEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmSuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                End Select
                ilRet = mUnschSpot("M", -2, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)
                If Not ilRet Then
                    mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                    'mClearDrag False
                    'mForceRepaintWeekly True
                    Exit Sub
                End If
                'Add vehicle name to spot
                tmSmfA.lChfCode = 0
                ilRet = btrEndTrans(hmSdf)
                mUnblockDay
                mVbcHoldMinMax False
                mVbcL1MinMax False
                mVbcL2MinMax False
                mVbcMissedMinMax False
                mVbcAvailMinMax False
                mVbcContractMinMax False
                'Show one open row
                If vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt) - 2 Then
                    Do While vbcHold.Value < vbcHold.Max
                        vbcHold.Value = vbcHold.Value + 1
                    Loop
                End If
                If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt) - 2 Then
                    Do While vbcAdWorkArea.Value < vbcAdWorkArea.Max
                        vbcAdWorkArea.Value = vbcAdWorkArea.Value + 1
                    Loop
                End If
            Else    'Swap
                Select Case imDragColNoSrce
                    Case 1  'Monday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmMoEvt(), tmWAMdExt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                    Case 2  'Tuesday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmTuEvt(), tmWAMdExt(), tmTuVcf0(), tmMoVcf6(), tmTuVcf7()
                    Case 3  'Wednesday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmWeEvt(), tmWAMdExt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                    Case 4  'Thursday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmThEvt(), tmWAMdExt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                    Case 5  'Friday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmFrEvt(), tmWAMdExt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                    Case 6  'Saturday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmSaEvt(), tmWAMdExt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                    Case 7  'Sunday
                        mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmSuEvt(), tmWAMdExt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                End Select
            End If
        Case DRAGADMD
            If imDragRowNoDest >= UBound(tmWAMdExt) Then  'Move
                'llSdfRecPos = tmAdMdSdfMdExt(imDragIndexSrce).lRecPos
                'ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                'tmWAMdExt(UBound(tmWAMdExt)) = tmAdMdSdfMdExt(imDragIndexSrce)
                'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) + 1) As SDFMDEXT
                'tmVefSrchKey.iCode = tmSdf.iVefCode
                'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                'tmWAMdExt(UBound(tmWAMdExt) - 1).sShow = Trim$(tmWAMdExt(UBound(tmWAMdExt) - 1).sShow) & " " & Trim$(tmOrigVef.sName)

                ''Remove from work
                'For ilLoop = imDragIndexSrce To UBound(tmAdMdSdfMdExt) - 2 Step 1
                '    tmAdMdSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop + 1)
                'Next ilLoop
                'If UBound(tmAdMdSdfMdExt) > 1 Then
                '    ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) - 1) As SDFMDEXT
                'End If
                'For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
                '    If tmSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
                '        mCompressMd ilLoop, tmSdfMdExt()
                '        Exit For
                '    End If
                'Next ilLoop
                'For ilMove = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                For ilMove = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                    If tmAdMdSdfMdExt(ilMove).iSelected = 1 Then
                        llSdfRecPos = tmAdMdSdfMdExt(ilMove).lRecPos
                        ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmWAMdExt(UBound(tmWAMdExt)) = tmAdMdSdfMdExt(ilMove)
                        tmWAMdExt(UBound(tmWAMdExt)).iSelected = 0
                        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) + 1) As SDFMDEXT
                        'tmVefSrchKey.iCode = tmSdf.iVefCode
                        'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        'tmWAMdExt(UBound(tmWAMdExt) - 1).sShow = Trim$(tmWAMdExt(UBound(tmWAMdExt) - 1).sShow) & " " & Trim$(tmOrigVef.sName)
                    End If
                Next ilMove
                
                'For ilMove = UBound(tmAdMdSdfMdExt) - 1 To LBound(tmAdMdSdfMdExt) Step -1
                For ilMove = UBound(tmAdMdSdfMdExt) - 1 To imLBSdfMdExt Step -1
                    If tmAdMdSdfMdExt(ilMove).iSelected = 1 Then
                        llSdfRecPos = tmAdMdSdfMdExt(ilMove).lRecPos
                        'Remove from work
                        For ilLoop = ilMove To UBound(tmAdMdSdfMdExt) - 2 Step 1
                            tmAdMdSdfMdExt(ilLoop) = tmAdMdSdfMdExt(ilLoop + 1)
                        Next ilLoop
                        If UBound(tmAdMdSdfMdExt) > 1 Then
                            'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) - 1) As SDFMDEXT
                            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) - 1) As SDFMDEXT
                        End If
                        'For ilLoop = LBound(tmSdfMdExt) To UBound(tmSdfMdExt) Step 1
                        For ilLoop = imLBSdfMdExt To UBound(tmSdfMdExt) Step 1
                            If tmSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
                                mCompressMd ilLoop, tmSdfMdExt()
                                Exit For
                            End If
                        Next ilLoop
                    End If
                Next ilMove
                imAdMdSelectionCount = 0
                imAdMdLastSelection = -1
                mMissedSummary 1
                mVbcMissedMinMax True
                mVbcHoldMinMax False
                mVbcL2MinMax False
                'Show one open row
                If vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt) - 2 Then
                    Do While vbcHold.Value < vbcHold.Max
                        vbcHold.Value = vbcHold.Value + 1
                    Loop
                End If
                If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt) - 2 Then
                    Do While vbcAdWorkArea.Value < vbcAdWorkArea.Max
                        vbcAdWorkArea.Value = vbcAdWorkArea.Value + 1
                    Loop
                End If
            End If
    End Select
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcAdWorkArea_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim ilRet As Integer
    Dim slCntrType As String

    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If imDblClickMode = 2 Then
        Exit Sub
    End If
    If imDragSrce = DRAGCONTRACT Then
        If State = vbLeave Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        'Select Case imDragColNoSrce
        '    Case 1  'Monday
        '        If (tmMoEvt(imDragIndexSrce).sCntrType = "S") Or (tmMoEvt(imDragIndexSrce).sCntrType = "M") Or (tmMoEvt(imDragIndexSrce).sCntrType = "R") Or (tmMoEvt(imDragIndexSrce).sCntrType = "T") Or (tmMoEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 2  'Tuesday
        '        If (tmTuEvt(imDragIndexSrce).sCntrType = "S") Or (tmTuEvt(imDragIndexSrce).sCntrType = "M") Or (tmTuEvt(imDragIndexSrce).sCntrType = "R") Or (tmTuEvt(imDragIndexSrce).sCntrType = "T") Or (tmTuEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 3  'Wednesday
        '        If (tmWeEvt(imDragIndexSrce).sCntrType = "S") Or (tmWeEvt(imDragIndexSrce).sCntrType = "M") Or (tmWeEvt(imDragIndexSrce).sCntrType = "R") Or (tmWeEvt(imDragIndexSrce).sCntrType = "T") Or (tmWeEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 4  'Thursday
        '        If (tmThEvt(imDragIndexSrce).sCntrType = "S") Or (tmThEvt(imDragIndexSrce).sCntrType = "M") Or (tmThEvt(imDragIndexSrce).sCntrType = "R") Or (tmThEvt(imDragIndexSrce).sCntrType = "T") Or (tmThEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 5  'Friday
        '        If (tmFrEvt(imDragIndexSrce).sCntrType = "S") Or (tmFrEvt(imDragIndexSrce).sCntrType = "M") Or (tmFrEvt(imDragIndexSrce).sCntrType = "R") Or (tmFrEvt(imDragIndexSrce).sCntrType = "T") Or (tmFrEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 6  'Saturday
        '        If (tmSaEvt(imDragIndexSrce).sCntrType = "S") Or (tmSaEvt(imDragIndexSrce).sCntrType = "M") Or (tmSaEvt(imDragIndexSrce).sCntrType = "R") Or (tmSaEvt(imDragIndexSrce).sCntrType = "T") Or (tmSaEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 7  'Sunday
        '        If (tmSuEvt(imDragIndexSrce).sCntrType = "S") Or (tmSuEvt(imDragIndexSrce).sCntrType = "M") Or (tmSuEvt(imDragIndexSrce).sCntrType = "R") Or (tmSuEvt(imDragIndexSrce).sCntrType = "T") Or (tmSuEvt(imDragIndexSrce).sCntrType = "Q") Then  ' Or ((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        'End Select
        ilCompRow = vbcAdWorkArea.LargeChange + 1
        If UBound(tmWAMdExt) - 1 > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = UBound(tmWAMdExt) - 1
        End If
        If (vbcAdWorkArea.Value <= UBound(tmWAMdExt)) And (vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt)) Then
            ilRow = UBound(tmWAMdExt) - vbcAdWorkArea.Value + 1
            If ilRow <= vbcAdWorkArea.LargeChange + 1 Then
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                    Select Case imDragColNoSrce
                        Case 1  'Monday
                            slCntrType = tmMoEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmMoEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        Case 2  'Tuesday
                            slCntrType = tmTuEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmTuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        Case 3  'Wednesday
                            slCntrType = tmWeEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmWeEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        Case 4  'Thursday
                            slCntrType = tmThEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmThEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        Case 5  'Friday
                            slCntrType = tmFrEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmFrEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        Case 6  'Saturday
                            slCntrType = tmSaEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSaEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                        Case 7  'Sunday
                            slCntrType = tmSuEvt(imDragIndexSrce).sCntrType
                            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                    End Select
                    lacAFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                    imDragRowNoDest = ilRow + vbcAdWorkArea.Value - 1
                    imDragIndexDest = ilRow + vbcAdWorkArea.Value - 1
                    imDragColNoDest = 0
                    imDragDest = DRAGWORKAREA
                    Exit Sub
                End If
            End If
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                ilIndex = ilRow + vbcAdWorkArea.Value - 1
                If ilIndex < UBound(tmWAMdExt) Then
                    Select Case imDragColNoSrce
                        Case 1  'Monday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmMoEvt(), ilIndex, tmWAMdExt())
                        Case 2  'Tuesday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmTuEvt(), ilIndex, tmWAMdExt())
                        Case 3  'Wednesday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmWeEvt(), ilIndex, tmWAMdExt())
                        Case 4  'Thursday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmThEvt(), ilIndex, tmWAMdExt())
                        Case 5  'Friday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmFrEvt(), ilIndex, tmWAMdExt())
                        Case 6  'Saturday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmSaEvt(), ilIndex, tmWAMdExt())
                        Case 7  'Sunday
                            ilRet = mAvailRoomMdSwap(DRAGWORKAREA, 0, imDragIndexSrce, tmSuEvt(), ilIndex, tmWAMdExt())
                    End Select
                    If ilRet Then
                        Select Case imDragColNoSrce
                            Case 1  'Monday
                                slCntrType = tmMoEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmMoEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                            Case 2  'Tuesday
                                slCntrType = tmTuEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmTuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                            Case 3  'Wednesday
                                slCntrType = tmWeEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmWeEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                            Case 4  'Thursday
                                slCntrType = tmThEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmThEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                            Case 5  'Friday
                                slCntrType = tmFrEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmFrEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                            Case 6  'Saturday
                                slCntrType = tmSaEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSaEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                            Case 7  'Sunday
                                slCntrType = tmSuEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                Else
                                    lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                End If
                        End Select
                        imDragRowNoDest = ilRow + vbcAdWorkArea.Value - 1
                        imDragIndexDest = ilRow + vbcAdWorkArea.Value - 1
                        imDragColNoDest = 0
                        imDragDest = DRAGWORKAREA
                    Else
                        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                    Exit Sub
                End If
            End If
        Next ilRow
        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGADMD Then
        If State = vbLeave Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If (imAdMdType >= 4) Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If (vbcAdWorkArea.Value <= UBound(tmWAMdExt)) And (vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt)) Then
            ilRow = UBound(tmWAMdExt) - vbcAdWorkArea.Value + 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                imDragRowNoDest = ilRow + vbcAdWorkArea.Value - 1
                imDragIndexDest = 0
                imDragColNoDest = 0
                imDragDest = DRAGWORKAREA
                Exit Sub
            End If
        End If
        lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    ElseIf imDragSrce = DRAGWORKAREA Then
        lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
    End If
End Sub
Private Sub pbcAdWorkArea_GotFocus()
    lbcSort.Visible = False
    mSetShow imBoxNo
    imBoxNo = -1
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
End Sub
Private Sub pbcAdWorkArea_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then
        If imDblClickMode > 0 Then
            imDragButton = Button
            imDragDest = DRAGWORKAREA
        End If
        Exit Sub
    End If
    fmDragX = X
    fmDragY = Y
    imDragButton = Button
    imDragType = 0
    imDragShift = Shift
    imDragSrce = DRAGWORKAREA
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub
Private Sub pbcAdWorkArea_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If Button = 2 Then  'Right Mouse
        If imIgnoreRightMove Then
            Exit Sub
        End If
        imIgnoreRightMove = True
        fmDragX = X
        fmDragY = Y
        imDragButton = Button
        mMdComment 2
        imIgnoreRightMove = False
    End If
End Sub
Private Sub pbcAdWorkArea_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)

    plcConflictInfo.Visible = False
    If tmcDrag.Enabled Then
        'imDragType = -1
        'imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
    If (imDragSrce < 0) Then
        imDragSrce = DRAGWORKAREA
    End If
End Sub
Private Sub pbcAdWorkArea_Paint()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilLoop                                                                                *
'******************************************************************************************

    mPaintAdWorkArea tmWAMdExt(), tmWACtrls(1)
End Sub
Private Sub pbcAvail_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcAvail_DragDrop(Source As control, X As Single, Y As Single)
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llStartTime As Long
    Dim llEndTime As Long
    Dim ilSv1 As Integer
    Dim ilSv2 As Integer
    Dim ilRet As Integer
    Dim ilGameNo As Integer
    'imIgnoreChg = False
    'mClearDrag False
    'imSelectDelay = False
    If (imDragDest = -1) Or (imDblClickMode = 2) Then
        mClearDrag True
        Exit Sub
    End If
    ilSv1 = imDblClick
    ilSv2 = imDblClickMode
    mClearSpotInfo False
    imDblClick = ilSv1
    imDblClickMode = ilSv2
    Screen.MousePointer = vbHourglass
    If Not mAvailGridLoc(fmMouseUpX, fmMouseUpY, llStartDate, llEndDate, llStartTime, llEndTime, ilGameNo) Then
        Screen.MousePointer = vbDefault
        Exit Sub
    End If

    Select Case imDragSrce
        Case DRAGLOG1   'Move spot to bump and show within work
            imDragSpotLen = tmL1Evt(imDragIndexSrce).iUnits 'Units contains spot length
            smDragCntrType = tmL1Evt(imDragIndexSrce).sCntrType
            If (tmL1Evt(imDragIndexSrce).iLineInfo And &H10) = &H10 Then
                If (tmL1Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200 Then
                    smDragCntrType = "X"
                End If
            End If
        Case DRAGLOG2   'Test source
            If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Then
                imDragSpotLen = tmSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                smDragCntrType = tmSdfMdExt(imDragIndexSrce).sCntrType
            ElseIf imLog2Type = 4 Then  'Moving from missed to work is ignored
                imDragSpotLen = tmL2Evt(imDragIndexSrce).iUnits 'Units contains spot length
                smDragCntrType = tmL2Evt(imDragIndexSrce).sCntrType
                If (tmL2Evt(imDragIndexSrce).iLineInfo And &H10) = &H10 Then
                    If (tmL2Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200 Then
                        smDragCntrType = "X"
                    End If
                End If
            End If
        Case DRAGHOLD
            imDragSpotLen = tmWAMdExt(imDragIndexSrce).iLen 'Spot length
            smDragCntrType = tmWAMdExt(imDragIndexSrce).sCntrType
    End Select
    If mAvailMix(llStartDate, llEndDate, llStartTime, llEndTime, ilGameNo) Then
        ilRet = mAvailMixSch(ilGameNo)
    End If
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcAvail_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim llStartDate As Long
    Dim llEndDate As Long
    Dim llStartTime As Long
    Dim llEndTime As Long
    Dim ilGameNo As Integer
    
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If imDblClickMode = 2 Then
        Exit Sub
    End If
    If imDragSrce = DRAGLOG1 Then
        If State = vbLeave Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If mAvailGridLoc(X, Y, llStartDate, llEndDate, llStartTime, llEndTime, ilGameNo) Then
            lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
            imDragDest = DRAGAVAIL
            fmMouseUpX = X
            fmMouseUpY = Y
        Else
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
    ElseIf imDragSrce = DRAGLOG2 Then
        If State = vbLeave Then
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If mAvailGridLoc(X, Y, llStartDate, llEndDate, llStartTime, llEndTime, ilGameNo) Then
            lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
            imDragDest = DRAGAVAIL
            fmMouseUpX = X
            fmMouseUpY = Y
        Else
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
    ElseIf imDragSrce = DRAGHOLD Then
        If State = vbLeave Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If mAvailGridLoc(X, Y, llStartDate, llEndDate, llStartTime, llEndTime, ilGameNo) Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconMove.DragIcon
            imDragDest = DRAGAVAIL
            fmMouseUpX = X
            fmMouseUpY = Y
        Else
            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
    End If
End Sub
Private Sub pbcAvail_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcAvail_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then  'After Drop but before finished with drop
        If imDblClickMode > 0 Then
            imDragButton = Button
            imDragDest = DRAGAVAIL
        End If
        Exit Sub
    End If
    'fmDragX = X
    'fmDragY = Y
    'imDragButton = Button
    'imDragType = 0
    'imDragShift = Shift
    'imDragSrce = DRAGAVAIL
    'imDragRowNoDest = 0
    'imDragIndexDest = 0
    'imDragColNoDest = 0
    'imDragDest = -1     'Not defined
    'tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub
Private Sub pbcAvail_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    If tmcDrag.Enabled Then
        'imDragType = -1
        'imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
End Sub
Private Sub pbcAvail_Paint()
    Dim ilDay As Integer
    Dim llDate As Long
    Dim slDate As String
    Dim slHour As String
    Dim ilHour As Integer
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilPaintRow As Integer
    Dim ilStHour As Integer
    Dim ilEdHour As Integer
    Dim ilStart As Integer
    Dim ilEnd As Integer
    Dim ilLoop As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilIndex As Integer
    Dim ilRet As Integer
    Dim slStr As String
    Dim slTime As String
    Dim ilCompConflict As Integer
    Dim llTop As Long
    '4/16/11
    Dim ilGameNo As Integer
    Dim ilGameIndex As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slGameDate As String
    Dim ilBuildGameNo As Integer

    llTop = tmAvCtrls(1).fBoxY
    pbcAvail.BackColor = vbWhite
    For ilLoop = 1 To vbcAvail.LargeChange + 2 Step 1
        pbcAvail.Line (tmAvCtrls(1).fBoxX - 15, llTop - 15)-Step(pbcAvail.Width - 15, tmAvCtrls(1).fBoxH + 15), BLUE, B
        llTop = llTop + tmAvCtrls(1).fBoxH + 15
    Next ilLoop
    'If Trim$(plcAvDate.Caption) = "" Then
    '4/16/11
    If tmVef.sType <> "G" Then
        If Trim$(edcAvDate.Text) = "" Then
            Exit Sub
        End If
    Else
        ilGameNo = mGetAvGameNo()
        If ilGameNo <= 0 Then
            Exit Sub
        End If
        ilGameIndex = mFindGameNoIndex(ilGameNo)
    End If
    llColor = pbcAvail.ForeColor
    slFontName = pbcAvail.FontName
    flFontSize = pbcAvail.FontSize
    pbcAvail.ForeColor = BLUE
    pbcAvail.FontBold = False
    pbcAvail.FontSize = 7
    pbcAvail.FontName = "Arial"
    pbcAvail.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    slDate = edcAvDate.Text 'plcAvDate.Caption
    llDate = gDateValue(slDate)
    For ilDay = 0 To 6 Step 1
        '4/16/11
        If tmVef.sType <> "G" Then
            If llDate + ilDay < lmEarliestAllowedDate Then
                pbcAvail.ForeColor = RED
            ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate + ilDay <= lmLastLogDate) Then
                pbcAvail.ForeColor = MAGENTA
            Else
                pbcAvail.ForeColor = BLUE   'DARKPURPLE'BLUE
            End If
            slDate = Format$(llDate + ilDay, "m/d")
            gSetShow pbcAvail, slDate, tmAvCtrls(2)
            slDate = tmAvCtrls(2).sShow
        Else
            If ilGameIndex + ilDay + 1 <= lbcGameNo(3).ListCount Then
                slStr = lbcGameNo(3).List(ilGameIndex + ilDay)
                ilPos1 = InStr(1, slStr, " ", vbTextCompare)
                If ilPos1 > 0 Then
                    slDate = Trim$(Left(slStr, ilPos1))
                Else
                    slDate = ""
                End If
            Else
                slDate = ""
            End If
        End If
        Select Case ilDay
            Case 0
                pbcAvail.CurrentX = tmAvCtrls(2).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(2).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
            Case 1
                pbcAvail.CurrentX = tmAvCtrls(3).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(3).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
            Case 2
                pbcAvail.CurrentX = tmAvCtrls(4).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(4).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
            Case 3
                pbcAvail.CurrentX = tmAvCtrls(5).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(5).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
            Case 4
                pbcAvail.CurrentX = tmAvCtrls(6).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(6).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
            Case 5
                pbcAvail.CurrentX = tmAvCtrls(7).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(7).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
            Case 6
                pbcAvail.CurrentX = tmAvCtrls(8).fBoxX + fgBoxInsetX
                pbcAvail.CurrentY = tmAvCtrls(8).fBoxY '- 15 '+ fgBoxInsetY
                pbcAvail.Print slDate
        End Select
    Next ilDay
    pbcAvail.FontSize = flFontSize
    pbcAvail.FontName = slFontName
    pbcAvail.FontSize = flFontSize
    pbcAvail.ForeColor = llColor
    pbcAvail.FontBold = True

    If imAvailTm = 1 Then   '0=Hourly; 1=Daypart
        pbcAvail.ForeColor = BLUE
        pbcAvail.FontBold = False
        pbcAvail.FontSize = 7
        pbcAvail.FontName = "Arial"
        pbcAvail.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
        ilStart = vbcAvail.Value
        ilEnd = vbcAvail.Value + vbcAvail.LargeChange - 1
        If ilEnd > lbcDPSort.ListCount Then
            ilEnd = lbcDPSort.ListCount
        End If
        ilPaintRow = 1
        For ilLoop = ilStart To ilEnd Step 1
            slNameCode = lbcDPSort.List(ilLoop - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilIndex = Val(slCode)
            slStr = gCurrencyToTime(CCur(tmRCDP(ilIndex).lStartTime))
            slStr = gFormatTime(slStr, "A", "1")
            If (InStr(slStr, "A") > 0) Or (InStr(slStr, "P") > 0) Then
                slTime = Left$(slStr, Len(slStr) - 1)
            Else
                slTime = slStr
            End If
            slStr = gCurrencyToTime(CCur(tmRCDP(ilIndex).lEndTime))
            slStr = gFormatTime(slStr, "A", "1")
            If (InStr(slStr, "A") > 0) Or (InStr(slStr, "P") > 0) Then
                slStr = Left$(slStr, Len(slStr) - 1)
            End If
            slTime = slTime & "-" & slStr
            pbcAvail.CurrentX = tmAvCtrls(1).fBoxX + fgBoxInsetX
            pbcAvail.CurrentY = tmAvCtrls(1).fBoxY + (ilPaintRow) * (fgBoxGridH + 15) '- 30'+ fgBoxInsetY
            gSetShow pbcAvail, slTime, tmAvCtrls(1)
            pbcAvail.Print tmAvCtrls(1).sShow
            ilPaintRow = ilPaintRow + 1
        Next ilLoop
        pbcAvail.FontSize = flFontSize
        pbcAvail.FontName = slFontName
        pbcAvail.FontSize = flFontSize
        pbcAvail.ForeColor = llColor
        pbcAvail.FontBold = True
        For ilLoop = ilStart To ilEnd Step 1
            slNameCode = lbcDPSort.List(ilLoop - 1)
            ilRet = gParseItem(slNameCode, 2, "\", slCode)
            ilIndex = Val(slCode)
            For ilDay = 1 To 7 Step 1
                If tmRCDP(ilIndex).iDay(ilDay - 1) Then
                    If tmVef.sType <> "G" Then
                        ilBuildGameNo = 0
                        Select Case ilDay
                            Case 1
                                slStr = mGetAvailStat(tmMoEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            Case 2
                                slStr = mGetAvailStat(tmTuEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            Case 3
                                slStr = mGetAvailStat(tmWeEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            Case 4
                                slStr = mGetAvailStat(tmThEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            Case 5
                                slStr = mGetAvailStat(tmFrEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            Case 6
                                slStr = mGetAvailStat(tmSaEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            Case 7
                                slStr = mGetAvailStat(tmSuEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                        End Select
                    Else
                        If ilGameIndex + ilDay <= lbcGameNo(3).ListCount Then
                            slStr = lbcGameNo(3).List(ilGameIndex + ilDay - 1)
                            ilPos1 = InStr(1, slStr, " ", vbTextCompare)
                            If ilPos1 > 0 Then
                                ilBuildGameNo = Val(Trim$(Left(slStr, ilPos1)))
                                ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
                                If ilPos2 > 0 Then
                                    slGameDate = Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1))
                                Else
                                    ilBuildGameNo = -1
                                End If
                            Else
                                ilBuildGameNo = -1
                            End If
                            If ilBuildGameNo <> -1 Then
                                ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slGameDate, "12:00AM", "12:00AM", ilBuildGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmGameEvt())
                                slStr = mGetAvailStat(tmGameEvt(), tmRCDP(ilIndex).lStartTime, tmRCDP(ilIndex).lEndTime - 1, ilCompConflict)
                            End If
                        End If
                    End If
                Else
                    ilBuildGameNo = -1
                End If
                If ilBuildGameNo <> -1 Then
                    If imShowWhere Then
                        If ilCompConflict Then
                            pbcAvail.ForeColor = RED
                        Else
                            pbcAvail.ForeColor = DARKGREEN
                        End If
                    Else
                        pbcAvail.ForeColor = llColor
                    End If
                    pbcAvail.CurrentX = tmAvCtrls(ilDay + 1).fBoxX + fgBoxInsetX
                    pbcAvail.CurrentY = tmAvCtrls(ilDay + 1).fBoxY + (ilLoop - ilStart + 1) * (fgBoxGridH + 15) - 30 '+ fgBoxInsetY
                    gSetShow pbcAvail, slStr, tmAvCtrls(ilDay + 1)
                    pbcAvail.Print tmAvCtrls(ilDay + 1).sShow
                End If
            Next ilDay
        Next ilLoop
        pbcAvail.ForeColor = llColor
   Else
        ilPaintRow = 1
        pbcAvail.ForeColor = BLUE
        pbcAvail.FontBold = False
        pbcAvail.FontSize = 7
        pbcAvail.FontName = "Arial"
        pbcAvail.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
        ilStHour = vbcAvail.Value - 1
        ilEdHour = vbcAvail.Value + vbcAvail.LargeChange - 1
        If ilEdHour > 23 Then
            ilEdHour = 23
        End If
        For ilHour = ilStHour To ilEdHour Step 1
            If ilHour = 0 Then
                slHour = "12A"
            Else
                If ilHour < 12 Then
                    slHour = Trim$(str$(ilHour)) & "A"
                Else
                    If ilHour = 12 Then
                        slHour = "12P"
                    Else
                        slHour = Trim$(str$(ilHour - 12)) & "P"
                    End If
                End If
            End If
            pbcAvail.CurrentX = tmAvCtrls(1).fBoxX + fgBoxInsetX
            pbcAvail.CurrentY = tmAvCtrls(1).fBoxY + (ilPaintRow) * (fgBoxGridH + 15) '- 30'+ fgBoxInsetY
            gSetShow pbcAvail, slHour, tmAvCtrls(1)
            pbcAvail.Print tmAvCtrls(1).sShow
            ilPaintRow = ilPaintRow + 1
        Next ilHour
        pbcAvail.FontSize = flFontSize
        pbcAvail.FontName = slFontName
        pbcAvail.FontSize = flFontSize
        pbcAvail.ForeColor = llColor
        pbcAvail.FontBold = True
        '4/16/11
        If tmVef.sType <> "G" Then
            For ilDay = 0 To 6 Step 1
                Select Case ilDay
                    Case 0
                        mPaintAvail tmMoEvt(), tmAvCtrls(2)
                    Case 1
                        mPaintAvail tmTuEvt(), tmAvCtrls(3)
                    Case 2
                        mPaintAvail tmWeEvt(), tmAvCtrls(4)
                    Case 3
                        mPaintAvail tmThEvt(), tmAvCtrls(5)
                    Case 4
                        mPaintAvail tmFrEvt(), tmAvCtrls(6)
                    Case 5
                        mPaintAvail tmSaEvt(), tmAvCtrls(7)
                    Case 6
                        mPaintAvail tmSuEvt(), tmAvCtrls(8)
                End Select
            Next ilDay
        Else
            For ilDay = 0 To 6 Step 1
                If ilGameIndex + ilDay + 1 <= lbcGameNo(3).ListCount Then
                    slStr = lbcGameNo(3).List(ilGameIndex + ilDay)
                    ilPos1 = InStr(1, slStr, " ", vbTextCompare)
                    If ilPos1 > 0 Then
                        ilBuildGameNo = Val(Trim$(Left(slStr, ilPos1)))
                        ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
                        If ilPos2 > 0 Then
                            slGameDate = Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1))
                        Else
                            ilBuildGameNo = -1
                        End If
                    Else
                        ilBuildGameNo = -1
                    End If
                Else
                    ilBuildGameNo = -1
                End If
                If ilBuildGameNo <> -1 Then
                    'If ilDay <> 0 Then
                        ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, slGameDate, "12:00AM", "12:00AM", ilBuildGameNo, tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), imEvtType(), tmGameEvt())
                    'End If
                    Select Case ilDay
                        Case 0
                            mPaintAvail tmGameEvt(), tmAvCtrls(2)
                        Case 1
                            mPaintAvail tmGameEvt(), tmAvCtrls(3)
                        Case 2
                            mPaintAvail tmGameEvt(), tmAvCtrls(4)
                        Case 3
                            mPaintAvail tmGameEvt(), tmAvCtrls(5)
                        Case 4
                            mPaintAvail tmGameEvt(), tmAvCtrls(6)
                        Case 5
                            mPaintAvail tmGameEvt(), tmAvCtrls(7)
                        Case 6
                            mPaintAvail tmGameEvt(), tmAvCtrls(8)
                    End Select
                End If
            Next ilDay
        End If
    End If
End Sub
Private Sub pbcAvailNo_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcAvailNo_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcAvailNo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then  'After Drop but before finished with drop
        Exit Sub
    End If
    If imAvailNo = 0 Then
        imAvailNo = 1
    Else
        imAvailNo = 0
    End If
    pbcAvailNo_Paint
    pbcAvail.Cls
    pbcAvail_Paint
End Sub
Private Sub pbcAvailNo_Paint()
    pbcAvailNo.Cls
    pbcAvailNo.CurrentX = fgBoxInsetX
    pbcAvailNo.CurrentY = 0 'fgBoxInsetY
    If imAvailNo = 0 Then
        pbcAvailNo.Print "#"
    Else
        pbcAvailNo.Print "%"
    End If
End Sub
Private Sub pbcAvailPd_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcAvailPd_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcAvailPd_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    Exit Sub    'Disallow weekly
    If imAvailPd = 0 Then
        imAvailPd = 1
    Else
        imAvailPd = 0
    End If
    pbcAvailPd_Paint
    pbcAvail.Cls
    pbcAvail_Paint
End Sub
Private Sub pbcAvailPd_Paint()
    pbcAvailPd.Cls
    pbcAvailPd.CurrentX = fgBoxInsetX
    pbcAvailPd.CurrentY = 0 'fgBoxInsetY
    If imAvailPd = 0 Then
        pbcAvailPd.Print "Wkly"
    Else
        pbcAvailPd.Print "Daily"
    End If
End Sub
Private Sub pbcAvailSd_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcAvailSd_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcAvailSd_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If (imDragSrce >= 0) Then   'After Drop but before finished with drop
        Exit Sub
    End If
    If imAvailSd = 0 Then
        imAvailSd = 1
    ElseIf imAvailSd = 1 Then
        imAvailSd = 2
    Else
        imAvailSd = 0
    End If
    pbcAvailSd_Paint
    pbcAvail.Cls
    pbcAvail_Paint
End Sub
Private Sub pbcAvailSd_Paint()
    pbcAvailSd.Cls
    pbcAvailSd.CurrentX = fgBoxInsetX
    pbcAvailSd.CurrentY = 0 'fgBoxInsetY
    If imAvailSd = 0 Then
        pbcAvailSd.Print "Sold"
    ElseIf imAvailSd = 1 Then
        pbcAvailSd.Print "Avails"
    Else
        pbcAvailSd.Print "Inventory"
    End If
End Sub
Private Sub pbcAvailTm_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcAvailTm_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcAvailTm_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    'If UBound(tmRCDP) <= 1 Then    'Disallow daypart
    '    Exit Sub
    'End If
    If imAvailTm = 0 Then
        imAvailTm = 1
    Else
        imAvailTm = 0
    End If
    If imAvailTm = 1 Then
        Screen.MousePointer = vbHourglass
        mObtainDayparts
        Screen.MousePointer = vbDefault
    End If
    pbcAvailTm_Paint
    mVbcAvailMinMax True
'    pbcAvail.Cls
'    pbcAvail_Paint
End Sub
Private Sub pbcAvailTm_Paint()
    pbcAvailTm.Cls
    pbcAvailTm.CurrentX = fgBoxInsetX
    pbcAvailTm.CurrentY = 0 'fgBoxInsetY
    If imAvailTm = 0 Then
        pbcAvailTm.Print "Hourly"
    Else
        pbcAvailTm.Print "Daypart"
    End If
End Sub
Private Sub pbcAvailUn_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcAvailUn_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcAvailUn_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If (tgVpf(imVpfIndex).sSSellOut = "B") Or (tgVpf(imVpfIndex).sSSellOut = "U") Then
        If imAvailUn = 0 Then
            imAvailUn = 1
        Else
            imAvailUn = 0
        End If
        pbcAvailUn_Paint
        pbcAvail.Cls
        pbcAvail_Paint
    ElseIf tgVpf(imVpfIndex).sSSellOut = "M" Then
        If imAvailUn = 0 Then
            imAvailUn = 1
        Else
            imAvailUn = 0
        End If
        pbcAvailUn_Paint
        pbcAvail.Cls
        pbcAvail_Paint
    End If
End Sub
Private Sub pbcAvailUn_Paint()
    pbcAvailUn.Cls
    pbcAvailUn.CurrentX = fgBoxInsetX
    pbcAvailUn.CurrentY = 0 'fgBoxInsetY
    If imAvailUn = 0 Then
        pbcAvailUn.Print "Units"
    Else
        pbcAvailUn.Print "Sec"
    End If
End Sub
Private Sub pbcCalendar_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim llDate As Long
    Dim ilWkDay As Integer
    Dim ilRowNo As Integer
    Dim slDay As String
    If imL1OrL2 = 0 Then
        Exit Sub
    End If
    ilRowNo = 0
    llDate = lmCalStartDate
    Do
        ilWkDay = gWeekDayLong(llDate)
        slDay = Trim$(str$(Day(llDate)))
        If (X >= tmCDCtrls(ilWkDay + 1).fBoxX) And (X <= (tmCDCtrls(ilWkDay + 1).fBoxX + tmCDCtrls(ilWkDay + 1).fBoxW)) Then
            If (Y >= tmCDCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15)) And (Y <= tmCDCtrls(ilWkDay + 1).fBoxY + ilRowNo * (tmCDCtrls(ilWkDay + 1).fBoxH + 15) + tmCDCtrls(ilWkDay + 1).fBoxH) Then
                If imEnableSource = 0 Then
                    If imL1OrL2 = 1 Then
                        edcLog1Dt.Text = Format$(llDate, "m/d/yy")
                        edcLog1Dt.SelStart = 0
                        edcLog1Dt.SelLength = Len(edcLog1Dt.Text)
                        imBypassFocus = True
                        edcLog1Dt.SetFocus
                    ElseIf imL1OrL2 = 2 Then
                        edcLog2Dt.Text = Format$(llDate, "m/d/yy")
                        edcLog2Dt.SelStart = 0
                        edcLog2Dt.SelLength = Len(edcLog2Dt.Text)
                        imBypassFocus = True
                        edcLog2Dt.SetFocus
                    ElseIf imL1OrL2 = 3 Then
                        edcAvDate.Text = Format$(llDate, "m/d/yy")
                        edcAvDate.SelStart = 0
                        edcAvDate.SelLength = Len(edcAvDate.Text)
                        imBypassFocus = True
                        edcAvDate.SetFocus
                    ElseIf imL1OrL2 = 4 Then
                        edcDate.Text = Format$(llDate, "m/d/yy")
                        edcDate.SelStart = 0
                        edcDate.SelLength = Len(edcDate.Text)
                        imBypassFocus = True
                        edcDate.SetFocus
                    ElseIf imL1OrL2 = 5 Then
                        edcMissedDt.Text = Format$(llDate, "m/d/yy")
                        edcMissedDt.SelStart = 0
                        edcMissedDt.SelLength = Len(edcMissedDt.Text)
                        imBypassFocus = True
                        edcMissedDt.SetFocus
                    Else
                    End If
                ElseIf imEnableSource = 1 Then
                    edcNote.Text = Format$(llDate, "m/d/yy")
                    edcNote.SelStart = 0
                    edcNote.SelLength = Len(edcNote.Text)
                    imBypassFocus = True
                    edcNote.SetFocus
                End If
                Exit Sub
            End If
        End If
        If ilWkDay = 6 Then
            ilRowNo = ilRowNo + 1
        End If
        llDate = llDate + 1
    Loop Until llDate > lmCalEndDate
    If imEnableSource = 0 Then
        If imL1OrL2 = 1 Then
            edcLog1Dt.SetFocus
        ElseIf imL1OrL2 = 2 Then
            edcLog2Dt.SetFocus
        ElseIf imL1OrL2 = 3 Then
            edcAvDate.SetFocus
        ElseIf imL1OrL2 = 4 Then
            edcDate.SetFocus
        ElseIf imL1OrL2 = 5 Then
            edcMissedDt.SetFocus
        Else
        End If
    ElseIf imEnableSource = 1 Then
        edcNote.SetFocus
    End If
End Sub
Private Sub pbcCalendar_Paint()
    Dim slStr As String
    slStr = Trim$(str$(imCalMonth)) & "/15/" & Trim$(str$(imCalYear))
    lacCalName.Caption = gMonthYearFormat(slStr)
    If imEnableSource = 0 Then
        If imL1OrL2 = 1 Then
            'gPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
            mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
            mBoxCalDate
        ElseIf imL1OrL2 = 2 Then
            mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
            mBoxCalDate
        ElseIf imL1OrL2 = 3 Then
            mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
            mBoxCalDate
        ElseIf imL1OrL2 = 4 Then
            mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
            mBoxCalDate
        ElseIf imL1OrL2 = 5 Then
            mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
            mBoxCalDate
        Else
            mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
        End If
    ElseIf imEnableSource = 1 Then
        mPaintCalendar imCalMonth, imCalYear, imCalType, pbcCalendar, tmCDCtrls(), lmCalStartDate, lmCalEndDate
        mBoxCalDate
    End If
End Sub
Private Sub pbcClickFocus_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcClickFocus_GotFocus()
    If imEnableSource = 0 Then
        mSetShow imBoxNo
        imBoxNo = -1
    ElseIf imEnableSource = 1 Then
        mSetShow imEnableCol
    End If
    lbcSort.Visible = False
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
    lbcAdMdType.Visible = False
    'If rbcAdvt.Value And (imHighlightAdvtCode > 0) Then
    If (imDW = 1) And (imHighlightAdvtCode > 0) Then
        If imClearHighlight Then
            lmHighlightCntrCode = -1
            lmHighlightFeedCode = -1
            imHighlightAdvtCode = -1
            smHighlightSplitNetwork = ""
        End If
        'pbcContract.Cls
        'pbcContract_Paint
        pbcSpotInfo_MouseDown 0, 0, 0, 3915, 30
    ElseIf (imDW = 0) And (imHighlightAdvtCode > 0) Then
        If imClearHighlight Then
            lmHighlightCntrCode = -1
            lmHighlightFeedCode = -1
            imHighlightAdvtCode = -1
            smHighlightSplitNetwork = ""
        End If
        'pbcLog1.Cls
        'pbcLog1_Paint
        'pbcLog2.Cls
        'pbcLog2_Paint
        pbcSpotInfo_MouseDown 0, 0, 0, 3915, 30
    End If
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
End Sub
Private Sub pbcClickFocus_KeyUp(KeyCode As Integer, Shift As Integer)
    If KeyCode = KEYF1 Then    'Functio key 1= Help
        'Traffic!cdcSetup.HelpFile = sgHelpPath & "traffic.hlp"
        'Traffic!cdcSetup.HelpCommand = cdlHelpIndex
        'Traffic!cdcSetup.Action = 6
    End If
End Sub
Private Sub pbcClickFocus_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub pbcContract_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcContract_DragDrop(Source As control, X As Single, Y As Single)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slDate                        llDate                                                  *
'******************************************************************************************

    Dim slLogDateA As String
    Dim slLogDateB As String
    Dim ilLoop As Integer
    Dim ilIndex As Integer
    Dim llChfCode As Long
    Dim ilLineNo As Integer
    Dim llFsfCode As Long
    Dim ilGameNoA As Integer
    Dim ilGameNoB As Integer
    Dim ilGsf As Integer
    Dim slGameStatus As String
    Dim ilSrceCol As Integer
    

    imShowWhere = False
    smOverbookMode = "N"
    If (imDragDest = -1) Or (Not imUpdateAllowed) Then
        mClearDrag True
        Exit Sub
    End If
    ilLoop = imDblClick
    ilIndex = imDblClickMode
    mClearSpotInfo False
    imDblClick = ilLoop
    imDblClickMode = ilIndex
    Screen.MousePointer = vbHourglass
    ReDim imTestDragIndex(0 To 0) As Integer
    slGameStatus = ""
    If tmVef.sType = "G" Then
        If imSelectedGameNo + imDragColNoDest - 1 >= lbcGameNo(0).ListCount Then
            mClearDrag True
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + imDragColNoDest - 1)
        slGameStatus = tmGsfInfo(ilGsf).sGameStatus
    End If
    If slGameStatus = "C" Then
        mClearDrag True
        Screen.MousePointer = vbDefault
        Exit Sub
    End If
    If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1) And (imDragSrce <> DRAGCONTRACT) Then
        'Find index
        If imDragSrce = DRAGADMD Then
            'For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
                If (tmAdMdSdfMdExt(imDragIndexSrce).lCntrNo = tmSvAdMdSdfMdExt(ilLoop).lCntrNo) And (tmAdMdSdfMdExt(imDragIndexSrce).iLen = tmSvAdMdSdfMdExt(ilLoop).iLen) Then
                    imTestDragIndex(UBound(imTestDragIndex)) = ilLoop
                    ReDim Preserve imTestDragIndex(0 To UBound(imTestDragIndex) + 1) As Integer
                End If
            Next ilLoop
            If UBound(imTestDragIndex) <= 0 Then
                Screen.MousePointer = vbDefault
                mClearDrag True
                Exit Sub
            End If
            imDragIndexSrce = imTestDragIndex(UBound(imTestDragIndex) - 1)
            If UBound(imTestDragIndex) <= 1 Then
                ReDim Preserve imTestDragIndex(0 To UBound(imTestDragIndex) - 1) As Integer
            End If
        End If
        ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
        For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
            tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
        Next ilLoop
    End If
    If (imDblClickMode <> 2) Then
        ilSrceCol = -1
        If imDragSrce = DRAGCONTRACT Then
            ilSrceCol = imDragColNoSrce
        End If
        Select Case imDragColNoDest
            Case 1
                If tmMoEvt(imDragIndexDest).iType >= 2 And tmMoEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmMoEvt(), ilSrceCol
                End If
            Case 2
                If tmTuEvt(imDragIndexDest).iType >= 2 And tmTuEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmTuEvt(), ilSrceCol
                End If
            Case 3
                If tmWeEvt(imDragIndexDest).iType >= 2 And tmWeEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmWeEvt(), ilSrceCol
                End If
            Case 4
                If tmThEvt(imDragIndexDest).iType >= 2 And tmThEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmThEvt(), ilSrceCol
                End If
            Case 5
                If tmFrEvt(imDragIndexDest).iType >= 2 And tmFrEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmFrEvt(), ilSrceCol
                End If
            Case 6
                If tmSaEvt(imDragIndexDest).iType >= 2 And tmSaEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmSaEvt(), ilSrceCol
                End If
            Case 7
                If tmSuEvt(imDragIndexDest).iType >= 2 And tmSuEvt(imDragIndexDest).iType <= 9 Then
                    mOverbookAvailSetup tmSuEvt(), ilSrceCol
                End If
        End Select
    End If
    Select Case imDragSrce
        Case DRAGCONTRACT
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate)
            'slLogDateA = Format$(llDate + imDragColNoSrce - 1, "m/d/yy")
            'slLogDateB = Format$(llDate + imDragColNoDest - 1, "m/d/yy")
            mGetEdcDate imDragColNoSrce - 1
            slLogDateA = smEdcDate
            ilGameNoA = imEdcGameNo
            mGetEdcDate imDragColNoDest - 1
            slLogDateB = smEdcDate
            ilGameNoB = imEdcGameNo
            Select Case imDragColNoSrce
                Case 1  'Monday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmMoEvt(imDragIndexSrce).lLen
                        ilLineNo = tmMoEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmMoEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmMoEvt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
                Case 2  'Tuesday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmTuEvt(imDragIndexSrce).lLen
                        ilLineNo = tmTuEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmTuEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmTuEvt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
                Case 3  'Wednesday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmWeEvt(imDragIndexSrce).lLen
                        ilLineNo = tmWeEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmWeEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmWeEvt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
                Case 4  'Thursday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmThEvt(imDragIndexSrce).lLen
                        ilLineNo = tmThEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmThEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmThEvt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
                Case 5  'Friday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmFrEvt(imDragIndexSrce).lLen
                        ilLineNo = tmFrEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmFrEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmFrEvt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
                Case 6  'Saturday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmSaEvt(imDragIndexSrce).lLen
                        ilLineNo = tmSaEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmSaEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSaEvt(), tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
                Case 7  'Sunday
                    If (imDblClickMode = 2) Then
                        llChfCode = tmSuEvt(imDragIndexSrce).lLen
                        ilLineNo = tmSuEvt(imDragIndexSrce).iLineNo
                        llFsfCode = tmSuEvt(imDragIndexSrce).lFsfCode
                        Select Case imDragColNoDest
                            Case 1
                                If tmMoEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                                End If
                            Case 2
                                If tmTuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                                End If
                            Case 3
                                If tmWeEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                                End If
                            Case 4
                                If tmThEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                                End If
                            Case 5
                                If tmFrEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                                End If
                            Case 6
                                If tmSaEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                                End If
                            Case 7
                                If tmSuEvt(imDragIndexDest).iType = 99 Then
                                    mBookRightFill slLogDateB, ilGameNoB, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                                End If
                        End Select
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    Select Case imDragColNoDest
                        Case 1  'Monday
                            If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                            ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                            End If
                        Case 2  'Tuesday
                            If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                            ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                            End If
                        Case 3  'Wednesday
                            If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                            ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                            End If
                        Case 4  'Thursday
                            If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                            ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                            End If
                        Case 5  'Friday
                            If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                            ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                            End If
                        Case 6  'Saturday
                            If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogLogSwapSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                            ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogLogMoveSpot slLogDateA, ilGameNoA, slLogDateB, ilGameNoB, tmSuEvt(), tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                            End If
                        Case 7  'Sunday
                            If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                                'Swap swaps within Log1
                                mLogSwapSpot slLogDateA, ilGameNoA, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                            ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                                'Move spot within Log1
                                mLogMoveSpot slLogDateA, ilGameNoA, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                            End If
                    End Select
            End Select
            pbcHourRot.Cls
            pbcHourRot_Paint
            pbcDailyRot.Cls
            pbcDailyRot_Paint
        Case DRAGADMD
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate)
            'slLogDateA = Format$(llDate + imDragColNoDest - 1, "m/d/yy")
            mGetEdcDate imDragColNoDest - 1
            slLogDateA = smEdcDate
            ilGameNoA = imEdcGameNo
            If imAdMdType <= 3 Then
                llChfCode = tmAdMdSdfMdExt(imDragIndexSrce).lChfCode
                ilLineNo = tmAdMdSdfMdExt(imDragIndexSrce).iLineNo
                llFsfCode = tmAdMdSdfMdExt(imDragIndexSrce).lFsfCode
                Select Case imDragColNoDest
                    Case 1  'Monday
                        If imDblClickMode = 2 Then
                            If tmMoEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmMoEvt(), tmAdMdSdfMdExt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                        ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                        End If
                    Case 2  'Tuesday
                        If imDblClickMode = 2 Then
                            If tmTuEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmTuEvt(), tmAdMdSdfMdExt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                        ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                        End If
                    Case 3  'Wednesday
                        If imDblClickMode = 2 Then
                            If tmWeEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmWeEvt(), tmAdMdSdfMdExt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                        ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                        End If
                    Case 4  'Thursday
                        If imDblClickMode = 2 Then
                            If tmThEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmThEvt(), tmAdMdSdfMdExt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                        ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                        End If
                    Case 5  'Friday
                        If imDblClickMode = 2 Then
                            If tmFrEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmFrEvt(), tmAdMdSdfMdExt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                        ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                        End If
                    Case 6  'Saturday
                        If imDblClickMode = 2 Then
                            If tmSaEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmSaEvt(), tmAdMdSdfMdExt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                        ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                        End If
                    Case 7  'Sunday
                        If imDblClickMode = 2 Then
                            If tmSuEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                            'Swap swaps within Log date
                            mLogMdSwap 0, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmSuEvt(), tmAdMdSdfMdExt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                        ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                        End If
                End Select
            ElseIf (imAdMdType = 9) Or (imAdMdType = 10) Then
                llChfCode = tmAdMdSdfMdExt(imDragIndexSrce).lChfCode
                ilLineNo = tmAdMdSdfMdExt(imDragIndexSrce).iLineNo
                llFsfCode = tmAdMdSdfMdExt(imDragIndexSrce).lFsfCode
                Select Case imDragColNoDest
                    Case 1  'Monday
                        If imDblClickMode = 2 Then
                            If tmMoEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                        End If
                    Case 2  'Tuesday
                        If imDblClickMode = 2 Then
                            If tmTuEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                        End If
                    Case 3  'Wednesday
                        If imDblClickMode = 2 Then
                            If tmWeEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                        End If
                    Case 4  'Thursday
                        If imDblClickMode = 2 Then
                            If tmThEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                        End If
                    Case 5  'Friday
                        If imDblClickMode = 2 Then
                            If tmFrEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                       If tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                        End If
                    Case 6  'Saturday
                        If imDblClickMode = 2 Then
                            If tmSaEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                        End If
                    Case 7  'Sunday
                        If imDblClickMode = 2 Then
                            If tmSuEvt(imDragIndexDest).iType = 99 Then
                                mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                            End If
                            mClearDrag True
                            Screen.MousePointer = vbDefault
                            Exit Sub
                        End If
                        If tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                            'Move spot within Log date
                            mMdMoveSpot 0, tmAdMdSdfMdExt(), slLogDateA, ilGameNoA, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                        End If
                End Select
            ElseIf (imAdMdType > 3) And (imAdMdType < 9) Then
                Select Case imDragColNoDest
                    Case 1  'Monday
                        mBookManSchSpot 1, tmMoEvt()
                    Case 2  'Tuesday
                        mBookManSchSpot 1, tmTuEvt()
                    Case 3  'Wednesday
                        mBookManSchSpot 1, tmWeEvt()
                    Case 4  'Thursday
                        mBookManSchSpot 1, tmThEvt()
                    Case 5  'Friday
                        mBookManSchSpot 1, tmFrEvt()
                    Case 6  'Saturday
                        mBookManSchSpot 1, tmSaEvt()
                    Case 7  'Sunday
                        mBookManSchSpot 1, tmSuEvt()
                End Select
            ElseIf (imAdMdType = 11) Then
                Select Case imDragColNoDest
                    Case 1  'Monday
                        mBookExtraSpot tmMoEvt()
                    Case 2  'Tuesday
                        mBookExtraSpot tmTuEvt()
                    Case 3  'Wednesday
                        mBookExtraSpot tmWeEvt()
                    Case 4  'Thursday
                        mBookExtraSpot tmThEvt()
                    Case 5  'Friday
                        mBookExtraSpot tmFrEvt()
                    Case 6  'Saturday
                        mBookExtraSpot tmSaEvt()
                    Case 7  'Sunday
                        mBookExtraSpot tmSuEvt()
                End Select
            End If
            pbcHourRot.Cls
            pbcHourRot_Paint
            pbcDailyRot.Cls
            pbcDailyRot_Paint
        Case DRAGWORKAREA
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate)
            'slLogDateA = Format$(llDate + imDragColNoDest - 1, "m/d/yy")
            mGetEdcDate imDragColNoDest - 1
            slLogDateA = smEdcDate
            ilGameNoA = imEdcGameNo
            llChfCode = tmWAMdExt(imDragIndexSrce).lChfCode
            ilLineNo = tmWAMdExt(imDragIndexSrce).iLineNo
            llFsfCode = tmWAMdExt(imDragIndexSrce).lFsfCode
            Select Case imDragColNoDest
                Case 1  'Monday
                    If imDblClickMode = 2 Then
                        If tmMoEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmMoEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmMoEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmMoEvt(), tmWAMdExt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                    ElseIf tmMoEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), ""
                    End If
                Case 2  'Tuesday
                    If imDblClickMode = 2 Then
                        If tmTuEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmTuEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmTuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmTuEvt(), tmWAMdExt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                    ElseIf tmTuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), ""
                    End If
                Case 3  'Wednesday
                    If imDblClickMode = 2 Then
                        If tmWeEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmWeEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmWeEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmWeEvt(), tmWAMdExt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                    ElseIf tmWeEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), ""
                    End If
                Case 4  'Thursday
                    If imDblClickMode = 2 Then
                        If tmThEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmThEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmThEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmThEvt(), tmWAMdExt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                    ElseIf tmThEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), ""
                    End If
                Case 5  'Friday
                    If imDblClickMode = 2 Then
                        If tmFrEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmFrEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmFrEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmFrEvt(), tmWAMdExt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                    ElseIf tmFrEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), ""
                    End If
                Case 6  'Saturday
                    If imDblClickMode = 2 Then
                        If tmSaEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmSaEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmSaEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmSaEvt(), tmWAMdExt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                    ElseIf tmSaEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), ""
                    End If
                Case 7  'Sunday
                    If imDblClickMode = 2 Then
                        If tmSuEvt(imDragIndexDest).iType = 99 Then
                            mBookRightFill slLogDateA, ilGameNoA, llChfCode, ilLineNo, llFsfCode, tmSuEvt()
                        End If
                        mClearDrag True
                        Screen.MousePointer = vbDefault
                        Exit Sub
                    End If
                    If tmSuEvt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                        'Swap swaps within Log date
                        mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, slLogDateA, ilGameNoA, tmSuEvt(), tmWAMdExt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                    ElseIf tmSuEvt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                        'Move spot within Log date
                        mMdMoveSpot -1, tmWAMdExt(), slLogDateA, ilGameNoA, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), ""
                    End If
            End Select
    End Select
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcContract_DragOver(Source As control, X As Single, Y As Single, State As Integer)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slCntrType                                                                            *
'******************************************************************************************

    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilCol As Integer
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilIndexSrce As Integer
    Dim ilGsf As Integer
    Dim slGameStatus As String

    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If lmSelectedChfCode > 0 Then
        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
    If (imAdMdSelectionCount > 1) Or (imWASelectionCount > 1) Then
        If (imDragSrce = DRAGADMD) Or (imDragSrce = DRAGWORKAREA) Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
    End If
    If imDragSrce = DRAGCONTRACT Then
        If State = vbLeave Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcContract.LargeChange + 1
        If imAMax > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imAMax
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY)) And (Y <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + tmACtrls(1).fBoxH)) Then
                For ilCol = 1 To 7 Step 1
                    If (X >= tmACtrls(ilCol).fBoxX - 15) And (X <= (tmACtrls(ilCol).fBoxX + tmACtrls(ilCol).fBoxW + 15)) Then
                        slGameStatus = ""
                        If tmVef.sType = "G" Then
                            If imSelectedGameNo + ilCol - 1 >= lbcGameNo(0).ListCount Then
                                lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilCol - 1)
                            slGameStatus = tmGsfInfo(ilGsf).sGameStatus
                        End If
                        If slGameStatus = "C" Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                        Select Case ilCol
                            Case 1  'Monday
                                ilIndex = tmMoRowIndex(ilRow)
                                'If (ilIndex < LBound(tmMoEvt)) Or (ilIndex > UBound(tmMoEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmMoEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmMoEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmMoEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmMoEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmMoEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmMoEvt()

                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmMoEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmMoEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmMoEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmMoEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmMoEvt()) Then
                                            '    mSetContractIcon tmMoEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmMoEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                            Case 2  'Tuesday
                                ilIndex = tmTuRowIndex(ilRow)
                                'If (ilIndex < LBound(tmTuEvt)) Or (ilIndex > UBound(tmTuEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmTuEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmTuEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmTuEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmTuEvt(ilIndex).iType = 99) Then     'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmTuEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmTuEvt()
                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmTuEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmTuEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmTuEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmTuEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmTuEvt()) Then
                                            '    mSetContractIcon tmTuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmTuEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                            Case 3  'Wednesday
                                ilIndex = tmWeRowIndex(ilRow)
                                'If (ilIndex < LBound(tmWeEvt)) Or (ilIndex > UBound(tmWeEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmWeEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmWeEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmWeEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmWeEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmWeEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmWeEvt()
                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmWeEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmWeEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmWeEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmWeEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmWeEvt()) Then
                                            '    mSetContractIcon tmWeEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmWeEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                            Case 4  'Thursday
                                ilIndex = tmThRowIndex(ilRow)
                                'If (ilIndex < LBound(tmThEvt)) Or (ilIndex > UBound(tmThEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmThEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmThEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmThEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmThEvt(ilIndex).iType = 99) Then     'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmThEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmThEvt()
                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmThEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmThEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmThEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmThEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmThEvt()) Then
                                            '    mSetContractIcon tmThEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmThEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                            Case 5  'Friday
                                ilIndex = tmFrRowIndex(ilRow)
                                'If (ilIndex < LBound(tmFrEvt)) Or (ilIndex > UBound(tmFrEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmFrEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmFrEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmFrEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmFrEvt(ilIndex).iType = 99) Then      'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmFrEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmFrEvt()
                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmFrEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmFrEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmFrEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmFrEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmFrEvt()) Then
                                            '    mSetContractIcon tmFrEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmFrEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                            Case 6  'Saturday
                                ilIndex = tmSaRowIndex(ilRow)
                                'If (ilIndex < LBound(tmSaEvt)) Or (ilIndex > UBound(tmSaEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmSaEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmSaEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmSaEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmSaEvt(ilIndex).iType = 99) Then     'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmSaEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmSaEvt()
                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmSaEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmSaEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmSaEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmSaEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmSaEvt()) Then
                                            '    mSetContractIcon tmSaEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmSaEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                            Case 7  'Sunday
                                ilIndex = tmSuRowIndex(ilRow)
                                'If (ilIndex < LBound(tmSuEvt)) Or (ilIndex > UBound(tmSuEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmSuEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmSuEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmSuEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmSuEvt(ilIndex).iType = 99) Then     'Exchange with other spot
                                    Select Case imDragColNoSrce
                                        Case 1
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmMoEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmMoEvt(), ilIndex, tmSuEvt()
                                        Case 2
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmTuEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmTuEvt(), ilIndex, tmSuEvt()
                                        Case 3
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmWeEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmWeEvt(), ilIndex, tmSuEvt()
                                        Case 4
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmThEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmThEvt(), ilIndex, tmSuEvt()
                                        Case 5
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmFrEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmFrEvt(), ilIndex, tmSuEvt()
                                        Case 6
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSaEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSaEvt(), ilIndex, tmSuEvt()
                                        Case 7
                                            'If mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tmSuEvt(), ilIndex, tmSuEvt()) Then
                                            '    mSetContractIcon tmSuEvt(ilIndex)
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverCheck ilRow, ilCol, tmSuEvt(), ilIndex, tmSuEvt()
                                    End Select
                                Else
                                    'lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame
                                    Select Case imDragColNoSrce
                                        Case 1
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmMoEvt(imDragRowNoSrce).iUnits
                                        Case 2
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmTuEvt(imDragRowNoSrce).iUnits
                                        Case 3
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmWeEvt(imDragRowNoSrce).iUnits
                                        Case 4
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmThEvt(imDragRowNoSrce).iUnits
                                        Case 5
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmFrEvt(imDragRowNoSrce).iUnits
                                        Case 6
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmSaEvt(imDragRowNoSrce).iUnits
                                        Case 7
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAFrame, tmSuEvt(imDragRowNoSrce).iUnits
                                    End Select
                                End If
                                Exit Sub
                        End Select
                    End If
                Next ilCol
            End If
        Next ilRow
        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGADMD Then
        If State = vbLeave Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcContract.LargeChange + 1
        If imAMax > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imAMax
        End If
        If (imAdMdType > 3) And (imAdMdType < 9) Or (imAdMdType = 11) Then
            If (imDblClickMode = 2) Then
                Exit Sub
            End If
            'ilIndexSrce = 1
            'llSchCode = lmAdMdManSchCode(1)
            'If ilIndexSrce <> imDragIndexSrce Then
            '    For ilLoop = 2 To UBound(lmAdMdManSchCode) - 1 Step 1
            '        If llSchCode <> lmAdMdManSchCode(ilLoop) Then
            '            ilIndexSrce = ilIndexSrce + 1
            '            llSchCode = lmAdMdManSchCode(ilLoop)
            '            If ilIndexSrce = imDragIndexSrce Then
            '                ilIndexSrce = ilLoop
            '                Exit For
            '            End If
            '        End If
            '    Next ilLoop
            'End If
            ilIndexSrce = -1
            'For ilLoop = 1 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
            For ilLoop = 0 To UBound(lmAdMdManSchCode, 2) - 1 Step 1
                If imAdMdManSchInfo(6, ilLoop) + 1 = imDragIndexSrce Then
                    ilIndexSrce = ilLoop
                    Exit For
                End If
            Next ilLoop
            If ilIndexSrce = -1 Then
                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Sub
            End If
            'ReDim tmManMdExt(1 To 2) As SDFMDEXT
            ReDim tmManMdExt(0 To 2) As SDFMDEXT
            tmManMdExt(1).sCntrType = smAdMdManSchInfo(1, ilIndexSrce)
            tmManMdExt(1).lChfCode = lmAdMdManSchCode(1, ilIndexSrce)
            tmManMdExt(1).iLen = imAdMdManSchInfo(2, ilIndexSrce)
            tmManMdExt(1).iLineNo = imAdMdManSchInfo(1, ilIndexSrce)
            tmManMdExt(1).sSplitNetwork = smAdMdManSchInfo(2, ilIndexSrce)
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY)) And (Y <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + tmACtrls(1).fBoxH)) Then
                For ilCol = 1 To 7 Step 1
                    If (X >= tmACtrls(ilCol).fBoxX - 15) And (X <= (tmACtrls(ilCol).fBoxX + tmACtrls(ilCol).fBoxW + 15)) Then
                        slGameStatus = ""
                        If tmVef.sType = "G" Then
                            If imSelectedGameNo + ilCol - 1 >= lbcGameNo(0).ListCount Then
                                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilCol - 1)
                            slGameStatus = tmGsfInfo(ilGsf).sGameStatus
                        End If
                        If slGameStatus = "C" Then
                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                        'Test if row number can be dragged
                        Select Case ilCol
                            Case 1  'Monday
                                ilIndex = tmMoRowIndex(ilRow)
                                'If (ilIndex < LBound(tmMoEvt)) Or (ilIndex > UBound(tmMoEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmMoEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmMoEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmMoEvt(ilIndex).iType = 100) And ((tmMoEvt(ilIndex).sCntrType = "S") Or (tmMoEvt(ilIndex).sCntrType = "M") Or (tmMoEvt(ilIndex).sCntrType = "R") Or (tmMoEvt(ilIndex).sCntrType = "T") Or (tmMoEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmMoEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmMoEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmMoEvt(ilIndex).iType = 99) Then     'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmMoEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmMoEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmMoEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                        If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                            mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                        End If
                                    'End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmMoEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmMoEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmMoEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmMoEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmMoEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmMoEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                        'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmMoEvt()) Then
                                                        '    If rbcMode(0).Value Then
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                        '    Else
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                        '        imDblClickMode = 2
                                                        '    End If
                                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                        '    imDragIndexDest = ilIndex
                                                        '    imDragColNoDest = ilCol
                                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                                        '    Exit Sub
                                                        'End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmMoEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmMoEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmMoEvt()) Then
                                                    Exit Sub
                                                End If
                                                
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/06: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                            Case 2  'Tuesday
                                ilIndex = tmTuRowIndex(ilRow)
                                'If (ilIndex < LBound(tmTuEvt)) Or (ilIndex > UBound(tmTuEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmTuEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmTuEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmTuEvt(ilIndex).iType = 100) And ((tmTuEvt(ilIndex).sCntrType = "S") Or (tmTuEvt(ilIndex).sCntrType = "M") Or (tmTuEvt(ilIndex).sCntrType = "R") Or (tmTuEvt(ilIndex).sCntrType = "T") Or (tmTuEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmTuEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmTuEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmTuEvt(ilIndex).iType = 99) Then     'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmTuEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmTuEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmTuEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    'End If
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                    End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmTuEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmTuEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmTuEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmTuEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmTuEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmTuEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    'If lmAdMdManSchCode(ilIndexSrce) = lmAdMdManSchCode(ilLoop) Then
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                    '    If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmTuEvt()) Then
                                                    '        If rbcMode(0).Value Then
                                                    '            lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                    '        Else
                                                    '            lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                    '            imDblClickMode = 2
                                                    '        End If
                                                    '        imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                    '        imDragIndexDest = ilIndex
                                                    '        imDragColNoDest = ilCol
                                                    '        imDragDest = DRAGCONTRACT     'Not defined
                                                    '        Exit Sub
                                                    '    End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmTuEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                    
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmTuEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmTuEvt()) Then
                                                    Exit Sub
                                                End If
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/06: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                            Case 3  'Wednesday
                                ilIndex = tmWeRowIndex(ilRow)
                                'If (ilIndex < LBound(tmWeEvt)) Or (ilIndex > UBound(tmWeEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmWeEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmWeEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmWeEvt(ilIndex).iType = 100) And ((tmWeEvt(ilIndex).sCntrType = "S") Or (tmWeEvt(ilIndex).sCntrType = "M") Or (tmWeEvt(ilIndex).sCntrType = "R") Or (tmWeEvt(ilIndex).sCntrType = "T") Or (tmWeEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmWeEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmWeEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmWeEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmWeEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmWeEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmWeEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    'End If
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                    End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmWeEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmWeEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmWeEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmWeEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmWeEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmWeEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    'If lmAdMdManSchCode(ilIndexSrce) = lmAdMdManSchCode(ilLoop) Then
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                        'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmWeEvt()) Then
                                                        '    If rbcMode(0).Value Then
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                        '    Else
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                        '        imDblClickMode = 2
                                                        '    End If
                                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                        '    imDragIndexDest = ilIndex
                                                        '    imDragColNoDest = ilCol
                                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                                        '    Exit Sub
                                                        'End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmWeEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmWeEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmWeEvt()) Then
                                                    Exit Sub
                                                End If
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/06: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                            Case 4  'Thursday
                                ilIndex = tmThRowIndex(ilRow)
                                'If (ilIndex < LBound(tmThEvt)) Or (ilIndex > UBound(tmThEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmThEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmThEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmThEvt(ilIndex).iType = 100) And ((tmThEvt(ilIndex).sCntrType = "S") Or (tmThEvt(ilIndex).sCntrType = "M") Or (tmThEvt(ilIndex).sCntrType = "R") Or (tmThEvt(ilIndex).sCntrType = "T") Or (tmThEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmThEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmThEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmThEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmThEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmThEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmThEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    'End If
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                    End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmThEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmThEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmThEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmThEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmThEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmThEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    'If lmAdMdManSchCode(ilIndexSrce) = lmAdMdManSchCode(ilLoop) Then
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                        'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmThEvt()) Then
                                                        '    If rbcMode(0).Value Then
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                        '    Else
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                        '        imDblClickMode = 2
                                                        '    End If
                                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                        '    imDragIndexDest = ilIndex
                                                        '    imDragColNoDest = ilCol
                                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                                        '    Exit Sub
                                                        'End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmThEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmThEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmThEvt()) Then
                                                    Exit Sub
                                                End If
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/08: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                            Case 5  'Friday
                                ilIndex = tmFrRowIndex(ilRow)
                                'If (ilIndex < LBound(tmFrEvt)) Or (ilIndex > UBound(tmFrEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmFrEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmFrEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmFrEvt(ilIndex).iType = 100) And ((tmFrEvt(ilIndex).sCntrType = "S") Or (tmFrEvt(ilIndex).sCntrType = "M") Or (tmFrEvt(ilIndex).sCntrType = "R") Or (tmFrEvt(ilIndex).sCntrType = "T") Or (tmFrEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmFrEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmFrEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmFrEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmFrEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmFrEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmFrEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    'End If
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                    End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmFrEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmFrEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmFrEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmFrEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmFrEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmFrEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    'If lmAdMdManSchCode(ilIndexSrce) = lmAdMdManSchCode(ilLoop) Then
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                        'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmFrEvt()) Then
                                                        '    If rbcMode(0).Value Then
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                        '    Else
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                        '        imDblClickMode = 2
                                                        '    End If
                                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                        '    imDragIndexDest = ilIndex
                                                        '    imDragColNoDest = ilCol
                                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                                        '    Exit Sub
                                                        'End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmFrEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmFrEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmFrEvt()) Then
                                                    Exit Sub
                                                End If
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/06: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                            Case 6  'Saturday
                                ilIndex = tmSaRowIndex(ilRow)
                                'If (ilIndex < LBound(tmSaEvt)) Or (ilIndex > UBound(tmSaEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmSaEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmSaEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmSaEvt(ilIndex).iType = 100) And ((tmSaEvt(ilIndex).sCntrType = "S") Or (tmSaEvt(ilIndex).sCntrType = "M") Or (tmSaEvt(ilIndex).sCntrType = "R") Or (tmSaEvt(ilIndex).sCntrType = "T") Or (tmSaEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmSaEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmSaEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmSaEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmSaEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmSaEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmSaEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    'End If
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                    End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmSaEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmSaEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmSaEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmSaEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmSaEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmSaEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    'If lmAdMdManSchCode(ilIndexSrce) = lmAdMdManSchCode(ilLoop) Then
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                        'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmSaEvt()) Then
                                                        '    If rbcMode(0).Value Then
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                        '    Else
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                        '        imDblClickMode = 2
                                                        '    End If
                                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                        '    imDragIndexDest = ilIndex
                                                        '    imDragColNoDest = ilCol
                                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                                        '    Exit Sub
                                                        'End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmSaEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmSaEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmSaEvt()) Then
                                                    Exit Sub
                                                End If
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/06: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                            Case 7  'Sunday
                                ilIndex = tmSuRowIndex(ilRow)
                                'If (ilIndex < LBound(tmSuEvt)) Or (ilIndex > UBound(tmSuEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmSuEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmSuEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If (imAdMdType <= 3) Or (imAdMdType = 9) Or (imAdMdType = 10) Then
                                    'If (tmSuEvt(ilIndex).iType = 100) And ((tmSuEvt(ilIndex).sCntrType = "S") Or (tmSuEvt(ilIndex).sCntrType = "M") Or (tmSuEvt(ilIndex).sCntrType = "R") Or (tmSuEvt(ilIndex).sCntrType = "T") Or (tmSuEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmSuEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        If ((tmSuEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmSuEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmSuEvt(), imDragIndexSrce, tmAdMdSdfMdExt()) Then
                                            '    mSetContractIconAdMd tmSuEvt(ilIndex), lacAdMdFrame
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 1, ilRow, ilCol, tmSuEvt(), ilIndex, tmAdMdSdfMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    'End If
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAdMdFrame, tmAdMdSdfMdExt(imDragRowNoSrce).iLen
                                    End If
                                Else
                                    '6/18/06: Man Schd Replace Fill
                                    If (tmSuEvt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                                        If (((tmSuEvt(ilIndex).iLineInfo And &H10) = &H10) And ((tmSuEvt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                                            'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmSuEvt(), 1, tmManMdExt()) Then
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                            '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                            '    imDragIndexDest = ilIndex
                                            '    imDragColNoDest = ilCol
                                            '    imDragDest = DRAGCONTRACT     'Not defined
                                            'Else
                                            '    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                            'End If
                                            mDragOverSwapCheck 2, ilRow, ilCol, tmSuEvt(), ilIndex, tmManMdExt()
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    Else
                                    '6/18/06: Man Schd Replace Fill
                                        If (tmSuEvt(ilIndex).iType = 99) Then    '99=Unsold avails
                                            If imAdMdType <> 11 Then
                                                'For ilLoop = 1 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                For ilLoop = 0 To UBound(imAdMdManSchInfo, 2) - 1 Step 1
                                                    'If lmAdMdManSchCode(ilIndexSrce) = lmAdMdManSchCode(ilLoop) Then
                                                    If ((lmAdMdManSchCode(1, ilIndexSrce) = lmAdMdManSchCode(1, ilLoop)) And (lmAdMdManSchCode(1, ilLoop) > 0)) Or ((lmAdMdManSchCode(2, ilIndexSrce) = lmAdMdManSchCode(2, ilLoop)) And (lmAdMdManSchCode(2, ilLoop) > 0)) Then
                                                        'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmSuEvt()) Then
                                                        '    If rbcMode(0).Value Then
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                        '    Else
                                                        '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                        '        imDblClickMode = 2
                                                        '    End If
                                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                        '    imDragIndexDest = ilIndex
                                                        '    imDragColNoDest = ilCol
                                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                                        '    Exit Sub
                                                        'End If
                                                        If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilLoop), ilIndex, tmSuEvt()) Then
                                                            Exit Sub
                                                        End If
                                                    End If
                                                Next ilLoop
                                            Else
                                                'If mManSchCheckRoom(DRAGCONTRACT, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmSuEvt()) Then
                                                '    If rbcMode(0).Value Then
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                                                '    Else
                                                '        lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
                                                '        imDblClickMode = 2
                                                '    End If
                                                '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                                '    imDragIndexDest = ilIndex
                                                '    imDragColNoDest = ilCol
                                                '    imDragDest = DRAGCONTRACT     'Not defined
                                                '    Exit Sub
                                                'End If
                                                If mDragOverManSchCheck(ilRow, ilCol, imAdMdManSchInfo(2, ilIndexSrce), ilIndex, tmSuEvt()) Then
                                                    Exit Sub
                                                End If
                                            End If
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        Else
                                            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                        End If
                                    '6/18/06: Man Schd Replace Fill
                                    End If
                                    '6/18/06: Man Schd Replace Fill
                                    If lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                                        mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacAdMdFrame, imAdMdManSchInfo(2, ilIndexSrce)
                                    End If
                                End If
                                Exit Sub
                        End Select
                    End If
                Next ilCol
            End If
        Next ilRow
        lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGWORKAREA Then
        If State = vbLeave Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcContract.LargeChange + 1
        If imAMax > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imAMax
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY)) And (Y <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + tmACtrls(1).fBoxH)) Then
                For ilCol = 1 To 7 Step 1
                    If (X >= tmACtrls(ilCol).fBoxX - 15) And (X <= (tmACtrls(ilCol).fBoxX + tmACtrls(ilCol).fBoxW + 15)) Then
                        slGameStatus = ""
                        If tmVef.sType = "G" Then
                            If imSelectedGameNo + ilCol - 1 >= lbcGameNo(0).ListCount Then
                                lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            End If
                            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilCol - 1)
                            slGameStatus = tmGsfInfo(ilGsf).sGameStatus
                        End If
                        If slGameStatus = "C" Then
                            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                        'Test if row number can be dragged
                        Select Case ilCol
                            Case 1  'Monday
                                ilIndex = tmMoRowIndex(ilRow)
                                'If (ilIndex < LBound(tmMoEvt)) Or (ilIndex > UBound(tmMoEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmMoEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmMoEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmMoEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmMoEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmMoEvt(ilIndex).iType = 100) And ((tmMoEvt(ilIndex).sCntrType = "S") Or (tmMoEvt(ilIndex).sCntrType = "M") Or (tmMoEvt(ilIndex).sCntrType = "R") Or (tmMoEvt(ilIndex).sCntrType = "T") Or (tmMoEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmMoEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmMoEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmMoEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmMoEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmMoEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                            Case 2  'Tuesday
                                ilIndex = tmTuRowIndex(ilRow)
                                'If (ilIndex < LBound(tmTuEvt)) Or (ilIndex > UBound(tmTuEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmTuEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmTuEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmTuEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmTuEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmTuEvt(ilIndex).iType = 100) And ((tmTuEvt(ilIndex).sCntrType = "S") Or (tmTuEvt(ilIndex).sCntrType = "M") Or (tmTuEvt(ilIndex).sCntrType = "R") Or (tmTuEvt(ilIndex).sCntrType = "T") Or (tmTuEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmTuEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmTuEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmTuEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmTuEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmTuEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                            Case 3  'Wednesday
                                ilIndex = tmWeRowIndex(ilRow)
                                'If (ilIndex < LBound(tmWeEvt)) Or (ilIndex > UBound(tmWeEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmWeEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmWeEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmWeEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmWeEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmWeEvt(ilIndex).iType = 100) And ((tmWeEvt(ilIndex).sCntrType = "S") Or (tmWeEvt(ilIndex).sCntrType = "M") Or (tmWeEvt(ilIndex).sCntrType = "R") Or (tmWeEvt(ilIndex).sCntrType = "T") Or (tmWeEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmWeEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmWeEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmWeEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmWeEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmWeEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                            Case 4  'Thursday
                                ilIndex = tmThRowIndex(ilRow)
                                'If (ilIndex < LBound(tmThEvt)) Or (ilIndex > UBound(tmThEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmThEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmThEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmThEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmThEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmThEvt(ilIndex).iType = 100) And ((tmThEvt(ilIndex).sCntrType = "S") Or (tmThEvt(ilIndex).sCntrType = "M") Or (tmThEvt(ilIndex).sCntrType = "R") Or (tmThEvt(ilIndex).sCntrType = "T") Or (tmThEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmThEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmThEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmThEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmThEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmThEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                            Case 5  'Friday
                                ilIndex = tmFrRowIndex(ilRow)
                                'If (ilIndex < LBound(tmFrEvt)) Or (ilIndex > UBound(tmFrEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmFrEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmFrEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmFrEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmFrEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmFrEvt(ilIndex).iType = 100) And ((tmFrEvt(ilIndex).sCntrType = "S") Or (tmFrEvt(ilIndex).sCntrType = "M") Or (tmFrEvt(ilIndex).sCntrType = "R") Or (tmFrEvt(ilIndex).sCntrType = "T") Or (tmFrEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmFrEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmFrEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmFrEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmFrEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmFrEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                            Case 6  'Saturday
                                ilIndex = tmSaRowIndex(ilRow)
                                'If (ilIndex < LBound(tmSaEvt)) Or (ilIndex > UBound(tmSaEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmSaEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmSaEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmSaEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmSaEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmSaEvt(ilIndex).iType = 100) And ((tmSaEvt(ilIndex).sCntrType = "S") Or (tmSaEvt(ilIndex).sCntrType = "M") Or (tmSaEvt(ilIndex).sCntrType = "R") Or (tmSaEvt(ilIndex).sCntrType = "T") Or (tmSaEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmSaEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmSaEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmSaEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmSaEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmSaEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                            Case 7  'Sunday
                                ilIndex = tmSuRowIndex(ilRow)
                                'If (ilIndex < LBound(tmSuEvt)) Or (ilIndex > UBound(tmSuEvt)) Then
                                If (ilIndex < imLBEvt) Or (ilIndex > UBound(tmSuEvt)) Then
                                    Exit Sub
                                End If
                                If (imDblClickMode = 2) And (tmSuEvt(ilIndex).iType = 100) Then
                                    Exit Sub
                                End If
                                If ((tmSuEvt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmSuEvt(ilIndex).iType = 99) Then    'Exchange with other spot
                                    'If (tmSuEvt(ilIndex).iType = 100) And ((tmSuEvt(ilIndex).sCntrType = "S") Or (tmSuEvt(ilIndex).sCntrType = "M") Or (tmSuEvt(ilIndex).sCntrType = "R") Or (tmSuEvt(ilIndex).sCntrType = "T") Or (tmSuEvt(ilIndex).sCntrType = "Q")) Then ' Or ((tmSuEvt(ilIndex).iLineInfo And &H10) = &H10)) Then
                                    '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    'Else
                                        'If mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tmSuEvt(), imDragIndexSrce, tmWAMdExt()) Then
                                        '    mSetContractIconAdMd tmSuEvt(ilIndex), lacWAFrame(1)
                                        '    imDragRowNoDest = ilRow + vbcContract.Value - 1
                                        '    imDragIndexDest = ilIndex
                                        '    imDragColNoDest = ilCol
                                        '    imDragDest = DRAGCONTRACT     'Not defined
                                        'Else
                                        '    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                        'End If
                                        mDragOverSwapCheck 3, ilRow, ilCol, tmSuEvt(), ilIndex, tmWAMdExt()
                                    'End If
                                Else
                                    'lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                                    mDragoverOverbook ilRow, ilCol, ilIndex, tmSuEvt(), lacWAFrame(1), tmWAMdExt(imDragRowNoSrce).iLen
                                End If
                                Exit Sub
                        End Select
                    End If
                Next ilCol
            End If
        Next ilRow
        lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
    End If
End Sub
Private Sub pbcContract_GotFocus()
    mSetShow imBoxNo
    imBoxNo = -1
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcSort.Visible = False
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
    If imAdMdSelectionCount > 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
    End If
    If imWASelectionCount > 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
    End If
End Sub
Private Sub pbcContract_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If lmSelectedChfCode = -1 Then
        If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then  'After Drop but before finished with drop
            If imDblClickMode > 0 Then
                imDragButton = Button
                imDragDest = DRAGCONTRACT
            End If
            Exit Sub
        End If
        fmDragX = X
        fmDragY = Y
        imDragButton = Button
        imDragType = 0
        imDragShift = Shift
        imDragSrce = DRAGCONTRACT
        imDragRowNoDest = 0
        imDragIndexDest = 0
        imDragColNoDest = 0
        imDragDest = -1     'Not defined
        tmcDrag.Enabled = True  'Start timer to see if drag or click
    End If
End Sub
Private Sub pbcContract_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRow As Integer
    Dim ilCol As Integer
    Dim ilMaxRow As Integer
    Dim ilCompRow As Integer
    If Button = 2 Then  'Right Mouse
        If imIgnoreRightMove Then
            Exit Sub
        End If
        imIgnoreRightMove = True
        fmDragX = X
        fmDragY = Y
        imDragButton = Button
        ilCompRow = vbcContract.LargeChange + 1
        If imAMax > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imAMax
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (fmDragY >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY)) And (fmDragY <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + tmACtrls(1).fBoxH)) Then
                For ilCol = 1 To 7 Step 1
                    If (fmDragX >= tmACtrls(ilCol).fBoxX - 15) And (fmDragX <= (tmACtrls(ilCol).fBoxX + tmACtrls(ilCol).fBoxW + 15)) Then
                        If (imRowRightMouse = ilRow) And (imColRightMouse = ilCol) Then
                            imIgnoreRightMove = False
                            Exit Sub
                        End If
                        plcConflictInfo.Top = (ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + 5 * tmACtrls(ilCol).fBoxH + pbcContract.Top
                        'Test if row number can be dragged
                        Select Case ilCol
                            Case 1  'Monday
                                'plcConflictInfo.Left = pbcContract.Left
                                mStartCntrDrag ilRow, ilCol, tmMoEvt(), tmMoRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                            Case 2  'Tuesday
                                'plcConflictInfo.Left = pbcContract.Left + tmACtrls(ilCol).fBoxW
                                mStartCntrDrag ilRow, ilCol, tmTuEvt(), tmTuRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                            Case 3  'Wednesday
                                'plcConflictInfo.Left = pbcContract.Left + tmACtrls(ilCol).fBoxW
                                mStartCntrDrag ilRow, ilCol, tmWeEvt(), tmWeRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                            Case 4  'Thursday
                                'plcConflictInfo.Left = pbcContract.Left + tmACtrls(ilCol).fBoxW
                                mStartCntrDrag ilRow, ilCol, tmThEvt(), tmThRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                            Case 5  'Friday
                                'plcConflictInfo.Left = pbcContract.Left + pbcContract.Width - plcConflictInfo.Width
                                mStartCntrDrag ilRow, ilCol, tmFrEvt(), tmFrRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                            Case 6  'Saturday
                                'plcConflictInfo.Left = pbcContract.Left + pbcContract.Width - plcConflictInfo.Width
                                mStartCntrDrag ilRow, ilCol, tmSaEvt(), tmSaRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                            Case 7  'Sunday
                                'plcConflictInfo.Left = pbcContract.Left + pbcContract.Width - plcConflictInfo.Width
                                mStartCntrDrag ilRow, ilCol, tmSuEvt(), tmSuRowIndex()
                                imIgnoreRightMove = False
                                Exit Sub
                        End Select
                    End If
                Next ilCol
            End If
        Next ilRow
        plcConflictInfo.Visible = False
        imRowRightMouse = -1
        imColRightMouse = -1
        imIgnoreRightMove = False
        Exit Sub
    End If
End Sub
Private Sub pbcContract_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False

    If tmcDrag.Enabled Then
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
    If (imDragSrce < 0) Then
        imDragSrce = DRAGCONTRACT
    End If
End Sub
Private Sub pbcContract_Paint()
    Dim ilDay As Integer
    Dim llDate As Long
    Dim slDate As String
    Dim llColor As Long
    Dim slFontName As String
    Dim flFontSize As Single
    Dim ilLoop As Integer
    Dim slStr As String
    Dim ilGsf As Integer
    Dim ilAvailUnits As Integer
    Dim ilOpenUnits As Integer

    If tmcClick.Enabled Then
        Exit Sub
    End If
    'If Trim$(plcDate.Caption) = "" Then
    If Trim$(edcDate.Text) = "" Then
        'pbcContract.CurrentX = 0   '30   'Top line
        'pbcContract.CurrentY = 0
        'pbcContract.Line Step(0, 0)-Step(pbcContract.Width, pbcContract.Height), WHITE, BF
        Exit Sub
    End If
    'Draw boundary
    'Left to right
    pbcContract.CurrentX = 0    '45   '30   'Top line
    pbcContract.CurrentY = 15
    pbcContract.Line Step(0, 0)-Step(pbcContract.Width, 0), BLUE, BF
    pbcContract.CurrentX = 0    '45   '30   'Line under dates
    pbcContract.CurrentY = tmACtrls(1).fBoxY + (fgBoxGridH + 15) - 15 '+ fgBoxInsetY
    pbcContract.Line Step(0, 0)-Step(pbcContract.Width, 0), BLUE, BF
    pbcContract.CurrentX = 0    '45   '30   'Bottom line
    pbcContract.CurrentY = pbcContract.height - 15
    pbcContract.Line Step(0, 0)-Step(pbcContract.Width, 0), BLUE, BF
    For ilLoop = 0 To 7 Step 1
        pbcContract.CurrentX = ilLoop * (tmACtrls(1).fBoxW + 15) '+ 15
        pbcContract.CurrentY = 0    '15
        pbcContract.Line Step(0, 0)-Step(0, pbcContract.height - 30), BLUE, BF
    Next ilLoop
    llColor = pbcContract.ForeColor
    slFontName = pbcContract.FontName
    flFontSize = pbcContract.FontSize
    pbcContract.ForeColor = BLUE
    pbcContract.FontBold = False
    pbcContract.FontSize = 7
    pbcContract.FontName = "Arial"
    pbcContract.FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
    If tmVef.sType <> "G" Then
        slDate = edcDate.Text   'plcDate.Caption
        llDate = gDateValue(slDate)
        For ilDay = 0 To 6 Step 1
            If llDate + ilDay < lmEarliestAllowedDate Then
                pbcContract.ForeColor = RED
            ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate + ilDay <= lmLastLogDate) Then
                pbcContract.ForeColor = MAGENTA
            Else
                pbcContract.ForeColor = BLUE
            End If
            slDate = Format$(llDate + ilDay, "m/d/yy")
            slDate = gAddDayToDate(slDate)
            Select Case ilDay
                Case 0
                    pbcContract.CurrentX = tmACtrls(1).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(1).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
                Case 1
                    pbcContract.CurrentX = tmACtrls(2).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(2).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
                Case 2
                    pbcContract.CurrentX = tmACtrls(3).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(3).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
                Case 3
                    pbcContract.CurrentX = tmACtrls(4).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(4).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
                Case 4
                    pbcContract.CurrentX = tmACtrls(5).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(5).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
                Case 5
                    pbcContract.CurrentX = tmACtrls(6).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(6).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
                Case 6
                    pbcContract.CurrentX = tmACtrls(7).fBoxX + fgBoxInsetX
                    pbcContract.CurrentY = tmACtrls(7).fBoxY '- 15 '+ fgBoxInsetY
                    pbcContract.Print slDate
            End Select
        Next ilDay
    Else
        For ilLoop = 0 To 6 Step 1
            If imSelectedGameNo + ilLoop < lbcGameNo(0).ListCount Then
                ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
                llDate = tmGsfInfo(ilGsf).lGameDate
                If llDate < lmEarliestAllowedDate Then
                    pbcContract.ForeColor = RED
                ElseIf (tgVpf(imVpfIndex).sMoveLLD = "Y") And (llDate <= lmLastLogDate) Then
                    pbcContract.ForeColor = MAGENTA
                Else
                    pbcContract.ForeColor = BLUE
                End If
                slStr = lbcGameNo(0).List(imSelectedGameNo + ilLoop)
                pbcContract.CurrentX = tmACtrls(ilLoop + 1).fBoxX + fgBoxInsetX
                pbcContract.CurrentY = tmACtrls(ilLoop + 1).fBoxY '- 15 '+ fgBoxInsetY
                gSetShow pbcContract, slStr, tmACtrls(ilLoop + 1)
                pbcContract.Print tmACtrls(ilLoop + 1).sShow
            End If
        Next ilLoop
    End If
    If smSpotFont = "S" Then
        pbcContract.FontSize = 7
        pbcContract.FontName = "Arial"
        pbcContract.FontSize = 7
        pbcContract.ForeColor = llColor
        pbcContract.FontBold = False
    Else
        pbcContract.FontSize = flFontSize
        pbcContract.FontName = slFontName
        pbcContract.FontSize = flFontSize
        pbcContract.ForeColor = llColor
        pbcContract.FontBold = True
    End If
    plcAdvtTm.Caption = ""
    DoEvents
    ilAvailUnits = 0
    ilOpenUnits = 0
    If tgSaf(0).sAvailGreenBar = "Y" Then
        For ilDay = 0 To 6 Step 1
            Select Case ilDay
                Case 0
                    mComputeOpenAvailPercent tmMoEvt(), ilAvailUnits, ilOpenUnits
                Case 1
                    mComputeOpenAvailPercent tmTuEvt(), ilAvailUnits, ilOpenUnits
                Case 2
                    mComputeOpenAvailPercent tmWeEvt(), ilAvailUnits, ilOpenUnits
                Case 3
                    mComputeOpenAvailPercent tmThEvt(), ilAvailUnits, ilOpenUnits
                Case 4
                    mComputeOpenAvailPercent tmFrEvt(), ilAvailUnits, ilOpenUnits
                Case 5
                    mComputeOpenAvailPercent tmSaEvt(), ilAvailUnits, ilOpenUnits
                Case 6
                    mComputeOpenAvailPercent tmSuEvt(), ilAvailUnits, ilOpenUnits
            End Select
        Next ilDay
    End If
    If ilAvailUnits > 0 Then
        imOpenAvailPercent = (100 * CLng(ilAvailUnits - ilOpenUnits)) \ ilAvailUnits
    Else
        imOpenAvailPercent = 0
    End If
    For ilDay = 0 To 6 Step 1
        If tmVef.sType <> "G" Then
            slDate = edcDate.Text   'plcDate.Caption
            llDate = gDateValue(slDate)
            slDate = Format$(llDate + ilDay, "m/d/yy")
        Else
            slDate = ""
        End If
        Select Case ilDay
            Case 0
                mPaintContract 1, tmMoEvt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7(), tmACtrls(1), tmMoRowIndex(), slDate
            Case 1
                mPaintContract 2, tmTuEvt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7(), tmACtrls(2), tmTuRowIndex(), slDate
            Case 2
                mPaintContract 3, tmWeEvt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7(), tmACtrls(3), tmWeRowIndex(), slDate
            Case 3
                mPaintContract 4, tmThEvt(), tmThVcf0(), tmThVcf6(), tmThVcf7(), tmACtrls(4), tmThRowIndex(), slDate
            Case 4
                mPaintContract 5, tmFrEvt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7(), tmACtrls(5), tmFrRowIndex(), slDate
            Case 5
                mPaintContract 6, tmSaEvt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7(), tmACtrls(6), tmSaRowIndex(), slDate
            Case 6
                mPaintContract 7, tmSuEvt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7(), tmACtrls(7), tmSuRowIndex(), slDate
        End Select
    Next ilDay
End Sub
Private Sub pbcDailyRot_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcDailyRot_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcDailyRot_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub pbcDailyRot_Paint()
    Dim ilMaxCount As Integer
    Dim ilLoop As Integer
    Dim flHeight As Single
    ilMaxCount = 0
    For ilLoop = 0 To 6 Step 1
        If imDayCount(ilLoop) > ilMaxCount Then
            ilMaxCount = imDayCount(ilLoop)
        End If
    Next ilLoop
    For ilLoop = 0 To 6 Step 1
        If imDayCount(ilLoop) > 0 Then
            flHeight = ((pbcDailyRot.height - 30) * imDayCount(ilLoop)) / ilMaxCount
            flHeight = (pbcDailyRot.height - 30) - flHeight
            pbcDailyRot.CurrentX = 30 + ilLoop * 135
            pbcDailyRot.CurrentY = flHeight + 30
            pbcDailyRot.Line Step(0, 0)-Step(105, pbcDailyRot.height - 30), MAGENTA, BF
        End If
    Next ilLoop
End Sub
Private Sub pbcDailyRotLabel_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcDailyRotLabel_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcDailyRotLabel_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub pbcDW_KeyPress(KeyAscii As Integer)
    Dim ilChg As Integer

    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    ilChg = False
    If (KeyAscii = Asc("D")) Or (KeyAscii = Asc("d")) Then
        '4/21/11: Open up daily view to all users
        'If (Trim$(tgUrf(0).sName) = sgCPName) Or (tgSpf.sSystemType = "R") Then
            If imDW <> 0 Then
                ilChg = True
                plcAdvertiser.Visible = False
                imcFont.Visible = False
                plcTime.Visible = True
                imcPrt.Visible = False
                If Trim$(edcLog1Dt.Text) = "" Then
                    plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
                    plcCalendar.Visible = True
                    imL1OrL2 = 1
                    imGameNoIndex = 1
                Else
                    plcCalendar.Visible = False
                End If
            End If
            imDW = 0
            If imAdMdSelectionCount > 0 Then
                mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
            End If
            If imWASelectionCount > 0 Then
                mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
            End If
            
        'End If
    ElseIf (KeyAscii = Asc("W")) Or (KeyAscii = Asc("w")) Then
        If (imDW <> 1) Or ((imDW = 1) And (imViewSelect <> 0)) Then
            ilChg = True
            imDW = 1
            imGameNoIndex = 0
            imViewSelect = 0
            plcTime.Visible = False
            plcAdvertiser.Visible = True
            imcFont.Visible = True
            'If Trim$(plcDate.Caption) <> "" Then
            If Trim$(edcDate.Text) <> "" Then
                imcPrt.Visible = True
            Else
                imcPrt.Visible = False
            End If
            If Trim$(edcDate.Text) = "" Then
                plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
                plcCalendar.Visible = True
                imL1OrL2 = 4
            Else
                plcCalendar.Visible = False
            End If
        End If
    ElseIf (KeyAscii = Asc("S")) Or (KeyAscii = Asc("s")) Then
        If (imDW <> 1) Or ((imDW = 1) And (imViewSelect <> 1)) Then
            ilChg = True
            If (lmHighlightCntrCode > 0) Or (lmHighlightFeedCode > 0) Then
                imViewSelect = 1
            Else
                imViewSelect = 0
            End If
            imDW = 1
            imGameNoIndex = 0
            plcTime.Visible = False
            plcAdvertiser.Visible = True
            imcFont.Visible = True
            'If Trim$(plcDate.Caption) <> "" Then
            If Trim$(edcDate.Text) <> "" Then
                imcPrt.Visible = True
            Else
                imcPrt.Visible = False
            End If
            If Trim$(edcDate.Text) = "" Then
                plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
                plcCalendar.Visible = True
                imL1OrL2 = 4
            Else
                plcCalendar.Visible = False
            End If
        End If
    End If
    If KeyAscii = Asc(" ") Then
        If imDW = 1 Then
            If ((lmHighlightCntrCode > 0) Or (lmHighlightFeedCode > 0)) And (imViewSelect = 0) Then
                imViewSelect = 1
                ilChg = True
            Else
                If imViewSelect <> 0 Then
                    ilChg = True
                End If
                imViewSelect = 0
                '4/21/11: Open up daily view to all users
                'If (Trim$(tgUrf(0).sName) = sgCPName) Or (tgSpf.sSystemType = "R") Then
                    ilChg = True
                    imDW = 0
                    If imAdMdSelectionCount > 0 Then
                        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                    End If
                    If imWASelectionCount > 0 Then
                        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                    End If
                    plcAdvertiser.Visible = False
                    imcFont.Visible = False
                    plcTime.Visible = True
                    imcPrt.Visible = False
                    If Trim$(edcLog1Dt.Text) = "" Then
                        plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
                        plcCalendar.Visible = True
                        imL1OrL2 = 1
                        imGameNoIndex = 1
                    Else
                        plcCalendar.Visible = False
                    End If
                'End If
            End If
        ElseIf imDW = 0 Then
            ilChg = True
            imDW = 1
            imGameNoIndex = 0
            imViewSelect = 0
            plcTime.Visible = False
            plcAdvertiser.Visible = True
            imcFont.Visible = True
            'If Trim$(plcDate.Caption) <> "" Then
            If Trim$(edcDate.Text) <> "" Then
                imcPrt.Visible = True
            Else
                imcPrt.Visible = False
            End If
            If Trim$(edcDate.Text) = "" Then
                plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
                plcCalendar.Visible = True
                imL1OrL2 = 4
            Else
                plcCalendar.Visible = False
            End If
        End If
    End If
    If ilChg Then
        DoEvents
        mSetShow MISSEDAREAINDEX
        mBuildMissedView imDW, True
        DoEvents
        If imDW = 0 Then
            mForceRepaintDaily  'Repop t_evt
            pbcSelect(0).Visible = True
            pbcSelect(1).Visible = False
        Else
            mForceRepaintWeekly False   'repop t_Evt
            pbcSelect(1).Visible = True
            pbcSelect(0).Visible = False
            If imViewSelect = 0 Then
                lmSelectedChfCode = -1
                pbcContract.Cls
                mVbcContractMinMax True
            Else
                lmSelectedChfCode = lmHighlightCntrCode
                lmSelectedFsfCode = lmHighlightFeedCode
                lmCountChfCode = lmSelectedChfCode
                lmCountFsfCode = lmSelectedFsfCode
                'imCountLineNo = -1
                mCntrCounts
                Screen.MousePointer = vbHourglass
                pbcDailyRot.Cls
                pbcHourRot.Cls
                pbcDailyRot_Paint
                pbcHourRot_Paint
                pbcContract.Cls
                mVbcContractMinMax True
            End If
        End If
        pbcDW.Cls
        pbcDW_Paint
    End If
    Screen.MousePointer = vbDefault    'Default
End Sub
Private Sub pbcDW_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilChg As Integer

    ilChg = False
    plcConflictInfo.Visible = False
    'mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If imDW = 1 Then
        If ((lmHighlightCntrCode > 0) Or (lmHighlightFeedCode > 0)) And (imViewSelect = 0) Then
            imViewSelect = 1
            ilChg = True
        Else
            If imViewSelect <> 0 Then
                ilChg = True
            End If
            imViewSelect = 0
            '4/21/11: Open up daily view to all users
            'If (Trim$(tgUrf(0).sName) = sgCPName) Or (tgSpf.sSystemType = "R") Then
                ilChg = True
                If imAdMdSelectionCount > 0 Then
                    mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                End If
                If imWASelectionCount > 0 Then
                    mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                End If
                imDW = 0
                plcAdvertiser.Visible = False
                imcFont.Visible = False
                plcTime.Visible = True
                imcPrt.Visible = False
                If Trim$(edcLog1Dt.Text) = "" Then
                    plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
                    plcCalendar.Visible = True
                    imL1OrL2 = 1
                    imGameNoIndex = 1
                Else
                    plcCalendar.Visible = False
                End If
            'End If
        End If
    ElseIf imDW = 0 Then
        ilChg = True
        imDW = 1
        imGameNoIndex = 0
        imViewSelect = 0
        plcTime.Visible = False
        plcAdvertiser.Visible = True
        imcFont.Visible = True
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            imcPrt.Visible = True
        Else
            imcPrt.Visible = False
        End If
        If Trim$(edcDate.Text) = "" Then
            plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
            plcCalendar.Visible = True
            imL1OrL2 = 4
        Else
            plcCalendar.Visible = False
        End If
    End If
    If ilChg Then
        DoEvents
        mSetShow MISSEDAREAINDEX
        mBuildMissedView imDW, True
        DoEvents
        If imDW = 0 Then
            mForceRepaintDaily  'Repop t_evt
            pbcSelect(0).Visible = True
            pbcSelect(1).Visible = False
        Else
            pbcSelect(1).Visible = True
            pbcSelect(0).Visible = False
            If imViewSelect = 0 Then
                lmSelectedChfCode = -1
                lmSelectedFsfCode = -1
                'pbcContract.Cls
                'mVbcContractMinMax True
            Else
                lmSelectedChfCode = lmHighlightCntrCode
                lmCountChfCode = lmSelectedChfCode
                lmSelectedFsfCode = lmHighlightFeedCode
                lmCountFsfCode = lmSelectedFsfCode
                'imCountLineNo = -1
                mCntrCounts
                Screen.MousePointer = vbHourglass
                pbcDailyRot.Cls
                pbcHourRot.Cls
                pbcDailyRot_Paint
                pbcHourRot_Paint
                'pbcContract.Cls
                'mVbcContractMinMax True
            End If
            mForceRepaintWeekly False   'repop t_Evt
        End If
        pbcDW.Cls
        pbcDW_Paint
    End If
    Screen.MousePointer = vbDefault    'Default
End Sub
Private Sub pbcDW_Paint()
    pbcDW.CurrentX = fgBoxInsetX \ 20
    pbcDW.CurrentY = 0
    If imDW = 0 Then
        pbcDW.Print "Daily"
    Else
        If imViewSelect = 1 Then
            pbcDW.Print "Single"
        Else
            pbcDW.Print "Weekly"
        End If
    End If
End Sub




Private Sub pbcHold_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcHold_DragDrop(Source As control, X As Single, Y As Single)
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim llSdfRecPos As Long
    Dim ilGameNo As Integer
    imShowWhere = False
    If (imDragDest = -1) Or (imDblClickMode = 2) Or (Not imUpdateAllowed) Then
        mClearDrag True
        Exit Sub
    End If
    mClearSpotInfo False
    Screen.MousePointer = vbHourglass
    Select Case imDragSrce
        Case DRAGLOG1   'Move spot to bump and show within work
            'Determine if move or swap
            If tmVef.sType <> "G" Then
                ilGameNo = 0
            Else
                ilGameNo = mGetL1GameNo()
                If ilGameNo = 0 Then
                    mClearDrag False
                    mForceRepaintWeekly False
                    Exit Sub
                End If
            End If
            If imDragRowNoDest >= UBound(tmWAMdExt) Then  'Move
                If Not mBlockDay(65536 * imVehCode + gDateValue(smLog1Date), 0) Then
                    mClearDrag False
                    mForceRepaintWeekly False
                    Exit Sub
                End If
                ilRet = mBeginTrans(True, False)    'btrBeginTrans(hmSdf, 1000)
                If ilRet <> BTRV_ERR_NONE Then
                    'Screen.MousePointer = vbDefault
                    'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                    'mClearDrag False
                    mUnblockDay
                    Screen.MousePointer = vbDefault    'Default
                    Exit Sub
                End If
                llSdfRecPosSrce = tmL1Evt(imDragIndexSrce).lTime
                mGetAvailIndex tmL1Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                ilRet = mUnschSpot("M", -2, smLog1Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)
                If Not ilRet Then
                    mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                    'mClearDrag False
                    'mForceRepaintWeekly True
                    Exit Sub
                End If
                ilRet = btrEndTrans(hmSdf)
                mUnblockDay
                tmSmfA.lChfCode = 0
                mVbcHoldMinMax False
                mVbcL1MinMax False
                mVbcL2MinMax False
                mVbcMissedMinMax False
                mVbcAvailMinMax False
                mVbcContractMinMax False
            Else    'Swap
                mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, smLog1Date, ilGameNo, tmL1Evt(), tmWAMdExt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7()
            End If
        Case DRAGLOG2   'Test source
            If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Then
                If imDragRowNoDest >= UBound(tmWAMdExt) Then  'Move
                    llSdfRecPos = tmSdfMdExt(imDragIndexSrce).lRecPos
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, llSdfRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    tmWAMdExt(UBound(tmWAMdExt)) = tmSdfMdExt(imDragIndexSrce)
                    'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) + 1) As SDFMDEXT
                    ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) + 1) As SDFMDEXT
                    'tmVefSrchKey.iCode = tmSdf.iVefCode
                    'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                    'tmWAMdExt(UBound(tmWAMdExt) - 1).sShow = Trim$(tmWAMdExt(UBound(tmWAMdExt) - 1).sShow) & " " & Trim$(tmOrigVef.sName)

                    'Remove from work
                    For ilLoop = imDragIndexSrce To UBound(tmSdfMdExt) - 2 Step 1
                        tmSdfMdExt(ilLoop) = tmSdfMdExt(ilLoop + 1)
                    Next ilLoop
                    If UBound(tmSdfMdExt) > 1 Then
                        'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) - 1) As SDFMDEXT
                        ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) - 1) As SDFMDEXT
                    End If
                    'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) Step 1
                    For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) Step 1
                        If tmAdMdSdfMdExt(ilLoop).lRecPos = llSdfRecPos Then
                            mCompressMd ilLoop, tmAdMdSdfMdExt()
                            Exit For
                        End If
                    Next ilLoop
                    mVbcMissedMinMax True
                    mVbcHoldMinMax False
                    mVbcL2MinMax False
                End If
            ElseIf imLog2Type = 4 Then  'Moving from missed to work is ignored
                If tmVef.sType <> "G" Then
                    ilGameNo = 0
                Else
                    ilGameNo = mGetL2GameNo()
                    If ilGameNo = 0 Then
                        mClearDrag False
                        mForceRepaintWeekly False
                        Exit Sub
                    End If
                End If
                If imDragRowNoDest >= UBound(tmWAMdExt) Then  'Move
                    If Not mBlockDay(65536 * imVehCode + gDateValue(smLog2Date), 0) Then
                        mClearDrag False
                        mForceRepaintWeekly False
                        Exit Sub
                    End If
                    ilRet = mBeginTrans(True, False)    'btrBeginTrans(hmSdf, 1000)
                    If ilRet <> BTRV_ERR_NONE Then
                        'Screen.MousePointer = vbDefault
                        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                        'mClearDrag False
                        mUnblockDay
                        Screen.MousePointer = vbDefault    'Default
                        Exit Sub
                    End If
                    llSdfRecPosSrce = tmL2Evt(imDragIndexSrce).lTime
                    mGetAvailIndex tmL2Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    ilRet = mUnschSpot("M", -2, smLog2Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmWAMdExt(), tmSmfA)
                    If Not ilRet Then
                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                        'mClearDrag False
                        'mForceRepaintWeekly True
                        Exit Sub
                    End If
                    ilRet = btrEndTrans(hmSdf)
                    mUnblockDay
                    tmSmfA.lChfCode = 0
                    mVbcHoldMinMax False
                    mVbcL1MinMax False
                    mVbcL2MinMax False
                    mVbcMissedMinMax False
                    mVbcAvailMinMax False
                    mVbcContractMinMax False
                Else    'Swap
                    mLogMdSwap -1, imDragIndexSrce, imDragIndexDest, smLog2Date, ilGameNo, tmL2Evt(), tmWAMdExt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7()
                End If
            End If
    End Select
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcHold_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim slCntrType As String

    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If imDblClickMode = 2 Then
        Exit Sub
    End If
    If imDragSrce = DRAGLOG1 Then
        If State = vbLeave Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        slCntrType = tmL1Evt(imDragIndexSrce).sCntrType
        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmL1Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL1Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcHold.LargeChange + 1
        If UBound(tmWAMdExt) - 1 > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = UBound(tmWAMdExt) - 1
        End If
        If (vbcHold.Value <= UBound(tmWAMdExt)) And (vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt)) Then
            ilRow = UBound(tmWAMdExt) - vbcHold.Value + 1
            If ilRow <= vbcHold.LargeChange + 1 Then
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                    lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                    imDragRowNoDest = ilRow + vbcHold.Value - 1
                    imDragIndexDest = ilRow + vbcHold.Value - 1
                    imDragColNoDest = 0
                    imDragDest = DRAGHOLD
                    Exit Sub
                End If
            End If
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                ilIndex = ilRow + vbcHold.Value - 1
                If ilIndex < UBound(tmWAMdExt) Then
                    If mAvailRoomMdSwap(DRAGHOLD, 0, imDragIndexSrce, tmL1Evt(), ilIndex, tmWAMdExt()) Then
                        lacL1Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                        imDragRowNoDest = ilRow + vbcHold.Value - 1
                        imDragIndexDest = ilRow + vbcHold.Value - 1
                        imDragColNoDest = 0
                        imDragDest = DRAGHOLD
                    Else
                        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                    Exit Sub
                End If
            End If
        Next ilRow
        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGLOG2 Then
        If State = vbLeave Then
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If imLog2Type > 4 Then
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Then
            If (vbcHold.Value <= UBound(tmWAMdExt)) And (vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt)) Then
                ilRow = UBound(tmWAMdExt) - vbcHold.Value + 1
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                    lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                    imDragRowNoDest = ilRow + vbcHold.Value - 1
                    imDragIndexDest = ilRow + vbcHold.Value - 1
                    imDragColNoDest = 0
                    imDragDest = DRAGHOLD
                    Exit Sub
                End If
            End If
        Else
            slCntrType = tmL2Evt(imDragIndexSrce).sCntrType
            If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmL2Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL2Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Sub
            End If
            ilCompRow = vbcHold.LargeChange + 1
            If UBound(tmWAMdExt) - 1 > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = UBound(tmWAMdExt) - 1
            End If
            If (vbcHold.Value <= UBound(tmWAMdExt)) And (vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt)) Then
                ilRow = UBound(tmWAMdExt) - vbcHold.Value + 1
                If ilRow <= vbcHold.LargeChange + 1 Then
                    If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                        lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                        imDragRowNoDest = ilRow + vbcHold.Value - 1
                        imDragIndexDest = ilRow + vbcHold.Value - 1
                        imDragColNoDest = 0
                        imDragDest = DRAGHOLD
                        Exit Sub
                    End If
                End If
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    'Test if row number can be dragged
                    ilIndex = ilRow + vbcHold.Value - 1
                    If ilIndex < UBound(tmWAMdExt) Then
                        If mAvailRoomMdSwap(DRAGHOLD, 0, imDragIndexSrce, tmL2Evt(), ilIndex, tmWAMdExt()) Then
                            lacL2Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                            imDragRowNoDest = ilRow + vbcHold.Value - 1
                            imDragIndexDest = ilRow + vbcHold.Value - 1
                            imDragColNoDest = 0
                            imDragDest = DRAGHOLD
                        Else
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                        Exit Sub
                    End If
                End If
            Next ilRow
        End If
        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGHOLD Then
        lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
End Sub
Private Sub pbcHold_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcHold_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then  'After Drop but before finished with drop
        If imDblClickMode > 0 Then
            imDragButton = Button
            imDragDest = DRAGHOLD
        End If
        Exit Sub
    End If
    fmDragX = X
    fmDragY = Y
    imDragButton = Button
    imDragType = 0
    imDragShift = Shift
    imDragSrce = DRAGHOLD
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub
Private Sub pbcHold_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If Button = 2 Then  'Right Mouse
        If imIgnoreRightMove Then
            Exit Sub
        End If
        imIgnoreRightMove = True
        fmDragX = X
        fmDragY = Y
        imDragButton = Button
        mMdComment 4
        imIgnoreRightMove = False
    End If
End Sub
Private Sub pbcHold_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    If tmcDrag.Enabled Then
        'imDragType = -1
        'imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
    If (imDragSrce < 0) Then
        imDragSrce = DRAGHOLD
    End If
End Sub
Private Sub pbcHold_Paint()
    mPaintHold tmWAMdExt(), tmWACtrls(1)
End Sub
Private Sub pbcHourRot_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcHourRot_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcHourRot_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub pbcHourRot_Paint()
    Dim ilMaxCount As Integer
    Dim ilLoop As Integer
    Dim flHeight As Single
    ilMaxCount = 0
    For ilLoop = 0 To 23 Step 1
        If imHourCount(ilLoop) > ilMaxCount Then
            ilMaxCount = imHourCount(ilLoop)
        End If
    Next ilLoop
    For ilLoop = 0 To 23 Step 1
        If imHourCount(ilLoop) > 0 Then
            flHeight = ((pbcHourRot.height - 30) * imHourCount(ilLoop)) / ilMaxCount
            flHeight = (pbcHourRot.height - 30) - flHeight
            pbcHourRot.CurrentX = 30 + ilLoop * 135
            pbcHourRot.CurrentY = flHeight + 30
            pbcHourRot.Line Step(0, 0)-Step(105, pbcHourRot.height - 30), MAGENTA, BF
        End If
    Next ilLoop
End Sub
Private Sub pbcHourRotLabel_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcHourRotLabel_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcHourRotLabel_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub pbcKey_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcL1View_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcL1View_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 1
End Sub
Private Sub pbcL1View_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcL1View_KeyPress(KeyAscii As Integer)
    If (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
        imL1View = 0
        pbcL1View_Paint
        mVbcL1MinMax True
    ElseIf (KeyAscii = Asc("E")) Or (KeyAscii = Asc("e")) Then
        imL1View = 1
        pbcL1View_Paint
        mVbcL1MinMax True
    ElseIf (KeyAscii = Asc("U")) Or (KeyAscii = Asc("u")) Then
        imL1View = 2
        pbcL1View_Paint
        mVbcL1MinMax True
    ElseIf (KeyAscii = Asc(" ")) Then
        If imL1View = 0 Then
            imL1View = 1
        ElseIf imL1View = 1 Then
            imL1View = 2
        Else
            imL1View = 0
        End If
        pbcL1View_Paint
        mVbcL1MinMax True
    End If
End Sub
Private Sub pbcL1View_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If imL1View = 0 Then
        imL1View = 1
    ElseIf imL1View = 1 Then
        imL1View = 2
    Else
        imL1View = 0
    End If
    pbcL1View_Paint
    mVbcL1MinMax True
End Sub
Private Sub pbcL1View_Paint()
    pbcL1View.Cls
    pbcL1View.CurrentX = fgBoxInsetX
    pbcL1View.CurrentY = 0 'fgBoxInsetY
    If imL1View = 0 Then
        pbcL1View.Print "Avails/Spots"
    ElseIf imL1View = 1 Then
        pbcL1View.Print "Events- All"
    Else
        pbcL1View.Print "Unsold Only"
    End If
End Sub
Private Sub pbcLog1_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcLog1_DragDrop(Source As control, X As Single, Y As Single)
    Dim ilSv1 As Integer
    Dim ilSv2 As Integer
    Dim llChfCode As Long
    Dim ilLineNo As Integer
    Dim llFsfCode As Long
    '4/16/11
    Dim ilGameNo As Integer
    Dim ilGameNo2 As Integer

    imShowWhere = False
    smOverbookMode = "N"
    If (imDragDest = -1) Or (Not imUpdateAllowed) Then
        mClearDrag True
        Exit Sub
    End If
    ilSv1 = imDblClick
    ilSv2 = imDblClickMode
    mClearSpotInfo False
    imDblClick = ilSv1
    imDblClickMode = ilSv2
    Screen.MousePointer = vbHourglass
    '4/16/11
    If tmVef.sType <> "G" Then
        ilGameNo = 0
        ilGameNo2 = 0
    Else
        ilGameNo = mGetL1GameNo()
        If ilGameNo = 0 Then
            mClearDrag True
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        If (imDragSrce = DRAGLOG2) And (imLog2Type = 4) Then
            ilGameNo2 = mGetL2GameNo()
            If ilGameNo2 = 0 Then
                mClearDrag True
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
        End If
    End If
    If tmL1Evt(imDragIndexDest).iType >= 2 And tmL1Evt(imDragIndexDest).iType <= 9 Then
        mOverbookAvailSetup tmL1Evt(), 0
    End If
    Select Case imDragSrce
        Case DRAGLOG1
            If (imDblClickMode = 2) Then
                If tmL1Evt(imDragIndexDest).iType = 99 Then
                    llChfCode = tmL1Evt(imDragIndexSrce).lLen
                    ilLineNo = tmL1Evt(imDragIndexSrce).iLineNo
                    llFsfCode = tmL1Evt(imDragIndexSrce).lFsfCode
                    mBookRightFill smLog1Date, ilGameNo, llChfCode, ilLineNo, llFsfCode, tmL1Evt()
                End If
                mClearDrag True
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
            If tmL1Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                'Swap swaps within Log1
                mLogSwapSpot smLog1Date, ilGameNo, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7()
            ElseIf tmL1Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                'Move spot within Log1
                mLogMoveSpot smLog1Date, ilGameNo, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), ""
            End If
        Case DRAGLOG2
            If imLog2Type = 4 Then  'Log2
                If (imDblClickMode = 2) Then
                    If tmL1Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmL2Evt(imDragIndexSrce).lLen
                        ilLineNo = tmL2Evt(imDragIndexSrce).iLineNo
                        llFsfCode = tmL2Evt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog1Date, ilGameNo, llChfCode, ilLineNo, llFsfCode, tmL1Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL1Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                    'Swap swaps within Log1
                    mLogLogSwapSpot smLog2Date, ilGameNo2, smLog1Date, ilGameNo, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7()
                ElseIf tmL1Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot within Log1
                    mLogLogMoveSpot smLog2Date, ilGameNo2, smLog1Date, ilGameNo, tmL2Evt(), tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), ""
                End If
            ElseIf (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Then
                If imDblClickMode = 2 Then
                    If tmL1Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmSdfMdExt(imDragIndexSrce).lChfCode
                        ilLineNo = tmSdfMdExt(imDragIndexSrce).iLineNo
                        llFsfCode = tmSdfMdExt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog1Date, ilGameNo, llChfCode, ilLineNo, llFsfCode, tmL1Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL1Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                    'Swap from work area with spot in log1
                    mLogMdSwap 1, imDragIndexDest, imDragIndexSrce, smLog1Date, ilGameNo, tmL1Evt(), tmSdfMdExt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7()
                ElseIf tmL1Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot from work area to Log1
                    mMdMoveSpot 1, tmSdfMdExt(), smLog1Date, ilGameNo, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), ""
                End If
            ElseIf (imLog2Type = 10) Then
                If imDblClickMode = 2 Then
                    If tmL1Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmSdfMdExt(imDragIndexSrce).lChfCode
                        ilLineNo = tmSdfMdExt(imDragIndexSrce).iLineNo
                        llFsfCode = tmSdfMdExt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog1Date, ilGameNo, llChfCode, ilLineNo, llFsfCode, tmL1Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL1Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot from work area to Log1
                    mMdMoveSpot 1, tmSdfMdExt(), smLog1Date, ilGameNo, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), ""
                End If
            ElseIf (imLog2Type = 11) Then
                If imDblClickMode = 2 Then
                    If tmL1Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmSdfMdExt(imDragIndexSrce).lChfCode
                        ilLineNo = tmSdfMdExt(imDragIndexSrce).iLineNo
                        llFsfCode = tmSdfMdExt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog1Date, ilGameNo, llChfCode, ilLineNo, llFsfCode, tmL1Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL1Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot from work area to Log1
                    mMdMoveSpot 1, tmSdfMdExt(), smLog1Date, ilGameNo, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), ""
                End If
            ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then
                mBookManSchSpot 0, tmL1Evt()
            End If
        Case DRAGHOLD
            If imDblClickMode = 2 Then
                If tmL1Evt(imDragIndexDest).iType = 99 Then
                    llChfCode = tmWAMdExt(imDragIndexSrce).lChfCode
                    ilLineNo = tmWAMdExt(imDragIndexSrce).iLineNo
                    llFsfCode = tmWAMdExt(imDragIndexSrce).lFsfCode
                    mBookRightFill smLog1Date, ilGameNo, llChfCode, ilLineNo, llFsfCode, tmL1Evt()
                End If
                mClearDrag True
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
            If tmL1Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                'Swap from work area with spot in log1
                mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, smLog1Date, ilGameNo, tmL1Evt(), tmWAMdExt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7()
            ElseIf tmL1Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                'Move spot from work area to Log1
                mMdMoveSpot -1, tmWAMdExt(), smLog1Date, ilGameNo, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), ""
            End If
    End Select
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcLog1_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim ilLoop As Integer
    Dim ilIndexSrce As Integer
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If imDragSrce = DRAGLOG1 Then
        If State = vbLeave Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcLog1.LargeChange + 1
        If imL1Max > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imL1Max
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + tmL1Ctrls(1).fBoxH)) Then
                'Test if row number can be dragged
                ilIndex = tmL1RowIndex(ilRow)
                If (imDblClickMode = 2) And (tmL1Evt(ilIndex).iType = 100) Then
                    Exit Sub
                End If
                If ((tmL1Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL1Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                    If mAvailRoom(DRAGLOG1, 0, imDragIndexSrce, tmL1Evt(), ilIndex, tmL1Evt()) Then
                        If tmL1Evt(ilIndex).iType = 100 Then
                            lacL1Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                        Else
                            If rbcMode(0).Value Then
                                lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                            Else
                                lacL1Frame.DragIcon = IconTraf!imcIconFill.DragIcon
                                imDblClickMode = 2
                            End If
                        End If
                        imDragRowNoDest = ilRow + vbcLog1.Value - 1
                        imDragIndexDest = ilIndex
                        imDragColNoDest = 0
                        imDragDest = DRAGLOG1     'Not defined
                    Else
                        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                Else
                    'lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    mDragoverOverbook ilRow, 0, ilIndex, tmL1Evt(), lacL1Frame, tmL1Evt(imDragRowNoSrce).iUnits, DRAGLOG1
                End If
                Exit Sub
            End If
        Next ilRow
        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGLOG2 Then
        If State = vbLeave Then
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcLog1.LargeChange + 1
        If imL1Max > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imL1Max
        End If
        If (imLog2Type > 4) And (imLog2Type < 10) Then
            If (imDblClickMode = 2) Then
                Exit Sub
            End If
            'ilIndexSrce = 1
            'llSchCode = lmL2ManSchCode(1)
            'If ilIndexSrce <> imDragIndexSrce Then
            '    For ilLoop = 2 To UBound(lmL2ManSchCode) - 1 Step 1
            '        If llSchCode <> lmL2ManSchCode(ilLoop) Then
            '            ilIndexSrce = ilIndexSrce + 1
            '            llSchCode = lmL2ManSchCode(ilLoop)
            '            If ilIndexSrce = imDragIndexSrce Then
            '                ilIndexSrce = ilLoop
            '                Exit For
            '            End If
            '        End If
            '    Next ilLoop
            'End If
            ilIndexSrce = -1
            'For ilLoop = 1 To UBound(lmL2ManSchCode, 2) - 1 Step 1
            For ilLoop = 0 To UBound(lmL2ManSchCode, 2) - 1 Step 1
                If imL2ManSchInfo(6, ilLoop) + 1 = imDragIndexSrce Then
                    ilIndexSrce = ilLoop
                    Exit For
                End If
            Next ilLoop
            If ilIndexSrce = -1 Then
                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Sub
            End If
            'ReDim tmManMdExt(1 To 2) As SDFMDEXT
            ReDim tmManMdExt(0 To 2) As SDFMDEXT
            tmManMdExt(1).sCntrType = smL2ManSchInfo(1, ilIndexSrce)
            tmManMdExt(1).lChfCode = lmL2ManSchCode(1, ilIndexSrce)
            tmManMdExt(1).iLen = imL2ManSchInfo(2, ilIndexSrce)
            tmManMdExt(1).iLineNo = imL2ManSchInfo(1, ilIndexSrce)
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + tmL1Ctrls(1).fBoxH)) Then
                'Test if row number can be dragged
                ilIndex = tmL1RowIndex(ilRow)
                If (imDblClickMode = 2) And (tmL1Evt(ilIndex).iType = 100) Then
                    Exit Sub
                End If
                If imLog2Type = 4 Then
                    If ((tmL1Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL1Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                        If mAvailRoom(DRAGLOG1, 0, imDragIndexSrce, tmL2Evt(), ilIndex, tmL1Evt()) Then
                            If tmL1Evt(ilIndex).iType = 100 Then
                                lacL2Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                            Else
                                If rbcMode(0).Value Then
                                    lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                                Else
                                    lacL2Frame.DragIcon = IconTraf!imcIconFill.DragIcon
                                    imDblClickMode = 2
                                End If
                            End If
                            imDragRowNoDest = ilRow + vbcLog1.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGLOG1     'Not defined
                        Else
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    Else
                        'lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        mDragoverOverbook ilRow, 0, ilIndex, tmL1Evt(), lacL2Frame, tmL2Evt(imDragRowNoSrce).iUnits, DRAGLOG1
                    End If
                ElseIf (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
                    If ((tmL1Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL1Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                        If mAvailRoomMdSwap(DRAGLOG1, 0, ilIndex, tmL1Evt(), imDragIndexSrce, tmSdfMdExt()) Then
                            If tmL1Evt(ilIndex).iType = 100 Then
                                lacL2Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                            Else
                                If rbcMode(0).Value Then
                                    lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                                Else
                                    lacL2Frame.DragIcon = IconTraf!imcIconFill.DragIcon
                                    imDblClickMode = 2
                                End If
                            End If
                            imDragRowNoDest = ilRow + vbcLog1.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGLOG1     'Not defined
                        Else
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    Else
                        'lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        mDragoverOverbook ilRow, 0, ilIndex, tmL1Evt(), lacL1Frame, tmSdfMdExt(imDragRowNoSrce).iLen, DRAGLOG1
                    End If
                ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then
                    '6/18/06: Man Schd Replace Fill
                    If (tmL1Evt(ilIndex).iType = 100) And (rbcMode(0).Value) Then
                        If (((tmL1Evt(ilIndex).iLineInfo And &H10) = &H10) And ((tmL1Evt(ilIndex).iLineInfo And &H200) <> &H200)) Then
                            If mAvailRoomMdSwap(DRAGLOG1, 0, ilIndex, tmL1Evt(), 1, tmManMdExt()) Then
                                lacL2Frame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                imDragRowNoDest = ilRow + vbcLog1.Value - 1
                                imDragIndexDest = ilIndex
                                imDragColNoDest = 0
                                imDragDest = DRAGLOG1    'Not defined
                            Else
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            End If
                        Else
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    Else
                    '6/18/06: Man Schd Replace Fill
                        If (tmL1Evt(ilIndex).iType = 99) Then    'Move
                            'For ilLoop = 1 To UBound(imL2ManSchInfo, 2) - 1 Step 1
                            For ilLoop = 0 To UBound(imL2ManSchInfo, 2) - 1 Step 1
                                If ((lmL2ManSchCode(1, ilIndexSrce) = lmL2ManSchCode(1, ilLoop)) And (lmL2ManSchCode(1, ilLoop) > 0)) Or ((lmL2ManSchCode(2, ilIndexSrce) = lmL2ManSchCode(2, ilLoop)) And (lmL2ManSchCode(2, ilLoop) > 0)) Then
                                    If mManSchCheckRoom(DRAGLOG1, 0, imL2ManSchInfo(2, ilLoop), ilIndex, tmL1Evt()) Then
                                        If rbcMode(0).Value Then
                                            lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                                        Else
                                            lacL2Frame.DragIcon = IconTraf!imcIconFill.DragIcon
                                            imDblClickMode = 2
                                        End If
                                        imDragRowNoDest = ilRow + vbcLog1.Value - 1
                                        imDragIndexDest = ilIndex
                                        imDragColNoDest = 0
                                        imDragDest = DRAGLOG1     'Not defined
                                        Exit Sub
                                    End If
                                End If
                            Next ilLoop
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        Else
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    '6/18/06- Man Schd Replace Fill
                    End If
                    If lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon Then
                        mDragoverOverbook ilRow, 0, ilIndex, tmL1Evt(), lacAdMdFrame, tmManMdExt(imDragRowNoSrce).iLen
                    End If
                End If
                Exit Sub
            End If
        Next ilRow
        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGHOLD Then
        If State = vbLeave Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcLog1.LargeChange + 1
        If imL1Max > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imL1Max
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + tmL1Ctrls(1).fBoxH)) Then
                'Test if row number can be dragged
                ilIndex = tmL1RowIndex(ilRow)
                If (imDblClickMode = 2) And (tmL1Evt(ilIndex).iType = 100) Then
                    Exit Sub
                End If
                If ((tmL1Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL1Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                    If mAvailRoomMdSwap(DRAGLOG1, 0, ilIndex, tmL1Evt(), imDragIndexSrce, tmWAMdExt()) Then
                        If tmL1Evt(ilIndex).iType = 100 Then
                            lacWAFrame(0).DragIcon = IconTraf!imcIconSwap.DragIcon
                        Else
                            If rbcMode(0).Value Then
                                lacWAFrame(0).DragIcon = IconTraf!imcIconMove.DragIcon
                            Else
                                lacWAFrame(0).DragIcon = IconTraf!imcIconFill.DragIcon
                                imDblClickMode = 2
                            End If
                        End If
                        imDragRowNoDest = ilRow + vbcLog1.Value - 1
                        imDragIndexDest = ilIndex
                        imDragColNoDest = 0
                        imDragDest = DRAGLOG1     'Not defined
                    Else
                        lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                Else
                    'lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    mDragoverOverbook ilRow, 0, ilIndex, tmL1Evt(), lacWAFrame(0), tmWAMdExt(imDragRowNoSrce).iLen
                End If
                Exit Sub
            End If
        Next ilRow
        lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
    End If
End Sub
Private Sub pbcLog1_GotFocus()
    mSetShow imBoxNo
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcLog1_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then  'After Drop but before finished with drop
        If imDblClickMode > 0 Then
            imDragButton = Button
            imDragDest = DRAGLOG1
        End If
        Exit Sub
    End If
    fmDragX = X
    fmDragY = Y
    imDragButton = Button
    imDragType = 0
    imDragShift = Shift
    imDragSrce = DRAGLOG1
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub
Private Sub pbcLog1_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRow As Integer
    Dim ilMaxRow As Integer
    Dim ilCompRow As Integer
    Dim ilIndex As Integer
    If Button = 2 Then  'Right Mouse
        If imIgnoreRightMove Then
            Exit Sub
        End If
        If (X >= tmL1Ctrls(1).fBoxX - 15) And (X <= (tmL1Ctrls(1).fBoxX + tmL1Ctrls(1).fBoxW + 15)) Then
            imIgnoreRightMove = True
            fmDragX = X
            fmDragY = Y
            imDragButton = Button
            ilCompRow = vbcLog1.LargeChange + 1
            If imL1Max > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = imL1Max
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + tmL1Ctrls(1).fBoxH)) Then
                    ilIndex = tmL1RowIndex(ilRow)
                    If (imRowRightMouse = ilRow) Then
                        imIgnoreRightMove = False
                        Exit Sub
                    End If
                    plcConflictInfo.Top = (ilRow) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + 5 * tmL1Ctrls(1).fBoxH + pbcLog1.Top
                    'plcConflictInfo.Left = pbcContract.Left
                    mShowRightInfo tmL1Evt(), ilIndex, ilRow, 1
                    imIgnoreRightMove = False
                    Exit Sub
                End If
            Next ilRow
        End If
        plcConflictInfo.Visible = False
        imRowRightMouse = -1
        imColRightMouse = -1
        imIgnoreRightMove = False
        Exit Sub
    End If
End Sub
Private Sub pbcLog1_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    If tmcDrag.Enabled Then
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
    If (imDragSrce < 0) Then
        imDragSrce = DRAGLOG1
    End If
End Sub
Private Sub pbcLog1_Paint()
    Dim slDate As String
    'Draw boundary
    pbcLog1.CurrentX = 15   'Top line
    pbcLog1.CurrentY = 15
    pbcLog1.Line Step(0, 0)-Step(pbcLog1.Width - 30, 0), BLUE, BF
    pbcLog1.CurrentX = 15   'Bottom line
    pbcLog1.CurrentY = pbcLog1.height - 15
    pbcLog1.Line Step(0, 0)-Step(pbcLog1.Width - 30, 0), BLUE, BF
    pbcLog1.CurrentX = 15   'Left side line
    pbcLog1.CurrentY = 15
    pbcLog1.Line Step(0, 0)-Step(0, pbcLog1.height - 30), BLUE, BF
    pbcLog1.CurrentX = pbcLog1.Width - 15   'Right side line
    pbcLog1.CurrentY = 15
    pbcLog1.Line Step(0, 0)-Step(0, pbcLog1.height - 30), BLUE, BF
    slDate = smLog1Date
    If Trim$(slDate) = "" Then
        Exit Sub
    End If
    If Not gValidDate(slDate) Then
        Exit Sub
    End If
    mPaintLog1 tmL1Evt(), tmL1Ctrls(1), tmL1RowIndex()
End Sub
Private Sub pbcLog2_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcLog2_DragDrop(Source As control, X As Single, Y As Single)
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim ilPos As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilSv1 As Integer
    Dim ilSv2 As Integer
    Dim llChfCode As Long
    Dim ilLineNo As Integer
    Dim llFsfCode As Long
    '4/16/11
    Dim ilGameNo As Integer
    Dim ilGameNo2 As Integer

    imShowWhere = False
    smOverbookMode = "N"
    If (imDragDest = -1) Or ((imDblClickMode = 2) And (imLog2Type <> 4)) Or (Not imUpdateAllowed) Then
        mClearDrag True
        Exit Sub
    End If
    ilSv1 = imDblClick
    ilSv2 = imDblClickMode
    mClearSpotInfo False
    imDblClick = ilSv1
    imDblClickMode = ilSv2
    Screen.MousePointer = vbHourglass
    '4/16/11
    If tmVef.sType <> "G" Then
        ilGameNo = 0
    Else
        ilGameNo = mGetL1GameNo()
        If ilGameNo = 0 Then
            mClearDrag True
            Screen.MousePointer = vbDefault
            Exit Sub
        End If
        If (imLog2Type = 4) Then
            ilGameNo2 = mGetL2GameNo()
            If ilGameNo2 = 0 Then
                mClearDrag True
                Screen.MousePointer = vbDefault
                Exit Sub
            End If
        End If
    End If
    If imLog2Type = 4 Then  'Log2
        If tmL2Evt(imDragIndexDest).iType >= 2 And tmL2Evt(imDragIndexDest).iType <= 9 Then
            mOverbookAvailSetup tmL2Evt(), 0
        End If
    End If
    Select Case imDragSrce
        Case DRAGLOG1
            If imLog2Type = 4 Then  'Log2
                If (imDblClickMode = 2) Then
                    If tmL2Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmL1Evt(imDragIndexSrce).lLen
                        ilLineNo = tmL1Evt(imDragIndexSrce).iLineNo
                        llFsfCode = tmL1Evt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog2Date, ilGameNo2, llChfCode, ilLineNo, llFsfCode, tmL2Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL2Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                    'Swap swaps within Log1
                    mLogLogSwapSpot smLog1Date, ilGameNo, smLog2Date, ilGameNo2, tmL1Evt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7(), tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7()
                ElseIf tmL2Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot within Log1
                    mLogLogMoveSpot smLog1Date, ilGameNo, smLog2Date, ilGameNo2, tmL1Evt(), tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), ""
                End If
            ElseIf (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Then
                If imDragRowNoDest >= UBound(tmSdfMdExt) Then  'Move
                    If Not mBlockDay(65536 * imVehCode + gDateValue(smLog1Date), 0) Then
                        mClearDrag False
                        mForceRepaintWeekly False
                        Exit Sub
                    End If
                    ilRet = mBeginTrans(True, False)    'btrBeginTrans(hmSdf, 1000)
                    If ilRet <> BTRV_ERR_NONE Then
                        'Screen.MousePointer = vbDefault
                        'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                        'mClearDrag False
                        mUnblockDay
                        Screen.MousePointer = vbDefault    'Default
                        Exit Sub
                    End If
                    llSdfRecPosSrce = tmL1Evt(imDragIndexSrce).lTime
                    mGetAvailIndex tmL1Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                    ilRet = mUnschSpot("M", 1, smLog1Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmSdfMdExt(), tmSmfA)
                    If Not ilRet Then
                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                        'mClearDrag False
                        'mForceRepaintWeekly True
                        Exit Sub
                    End If
                    ilRet = btrEndTrans(hmSdf)
                    mUnblockDay
                    tmSmfA.lChfCode = 0
                    mVbcL1MinMax False
                    mVbcL2MinMax False
                    mVbcMissedMinMax False
                    mVbcAvailMinMax False
                    mVbcContractMinMax False
                Else    'Swap
                    mLogMdSwap 1, imDragIndexSrce, imDragIndexDest, smLog1Date, ilGameNo, tmL1Evt(), tmSdfMdExt(), tmL1Vcf0(), tmL1Vcf6(), tmL1Vcf7()
                End If
            End If
        Case DRAGLOG2
            If imLog2Type = 4 Then  'Log2
                If (imDblClickMode = 2) Then
                    If tmL2Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmL2Evt(imDragIndexSrce).lLen
                        ilLineNo = tmL2Evt(imDragIndexSrce).iLineNo
                        llFsfCode = tmL2Evt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog2Date, ilGameNo2, llChfCode, ilLineNo, llFsfCode, tmL2Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL2Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                    'Swap swaps within Log1
                    mLogSwapSpot smLog2Date, ilGameNo2, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7()
                ElseIf tmL2Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot within Log1
                    mLogMoveSpot smLog2Date, ilGameNo2, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), ""
                End If
            End If
        Case DRAGHOLD
            If imLog2Type = 4 Then  'Log2
                If (imDblClickMode = 2) Then
                    If tmL2Evt(imDragIndexDest).iType = 99 Then
                        llChfCode = tmWAMdExt(imDragIndexSrce).lChfCode
                        ilLineNo = tmWAMdExt(imDragIndexSrce).iLineNo
                        llFsfCode = tmWAMdExt(imDragIndexSrce).lFsfCode
                        mBookRightFill smLog2Date, ilGameNo2, llChfCode, ilLineNo, llFsfCode, tmL2Evt()
                    End If
                    mClearDrag True
                    Screen.MousePointer = vbDefault
                    Exit Sub
                End If
                If tmL2Evt(imDragIndexDest).iType = 100 And smOverbookMode <> "Y" Then
                    'Swap from work area with spot in log1
                    mLogMdSwap -1, imDragIndexDest, imDragIndexSrce, smLog2Date, ilGameNo2, tmL2Evt(), tmWAMdExt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7()
                ElseIf tmL2Evt(imDragIndexDest).iType = 99 Or smOverbookMode = "Y" Then
                    'Move spot from work area to Log1
                    mMdMoveSpot -1, tmWAMdExt(), smLog2Date, ilGameNo2, tmL2Evt(), tmL2Vcf0(), tmL2Vcf6(), tmL2Vcf7(), ""
                End If
            ElseIf (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Then
                If imDragRowNoDest >= UBound(tmSdfMdExt) Then  'Move
                    ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(imDragIndexSrce).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                    If tmSdf.iVefCode = imVehCode Then
                        tmSdfMdExt(UBound(tmSdfMdExt)) = tmWAMdExt(imDragIndexSrce)
                        'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                        'tmVefSrchKey.iCode = tmSdf.iVefCode
                        'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        'ilPos = InStr(tmSdfMdExt(UBound(tmSdfMdExt) - 1).sShow, Left$(Trim$(tmOrigVef.sName), 10))
                        'If ilPos > 0 Then
                        '    tmSdfMdExt(UBound(tmSdfMdExt) - 1).sShow = Left$(tmSdfMdExt(UBound(tmSdfMdExt) - 1).sShow, ilPos - 1)
                        'End If
                    End If
                    'Remove from work
                    For ilLoop = imDragIndexSrce To UBound(tmWAMdExt) - 2 Step 1
                        tmWAMdExt(ilLoop) = tmWAMdExt(ilLoop + 1)
                    Next ilLoop
                    If UBound(tmWAMdExt) > 1 Then
                        'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                        ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                    End If
                    If (imAdMdType = 0) And (tmSdf.iVefCode = imVehCode) Then
                        'Test date
                        If (gDateValue(smAdMdMissedDate) >= gDateValue(gObtainPrevMonday(smMissedDate))) And (gDateValue(smAdMdMissedDate) <= gDateValue(gObtainNextSunday(smMissedDate))) Then
                            'If tmCff(0).sDelete = "N" Then 'This is in mUnschSpot
                                tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmSdfMdExt(UBound(tmSdfMdExt) - 1)
                                'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            'End If
                        End If
                    End If
                    If ((imAdMdType = 1) Or (imAdMdType = 2)) And (tmSdf.iVefCode = imVehCode) Then
                        tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmSdfMdExt(UBound(tmSdfMdExt) - 1)
                        'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                    End If
                    If (imAdMdType = 3) And (imAdMdSelectedAdvt > 0) And (tmSdf.iVefCode = imVehCode) Then
                        'Test advertiser
                        slNameCode = tgSpotAdvertiser(imAdMdSelectedAdvt).sKey 'Traffic!lbcAdvertiser.List(imAdMdSelectedAdvt)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        If Val(slCode) = tmSdf.iAdfCode Then
                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmSdfMdExt(UBound(tmSdfMdExt) - 1)
                            'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                        End If
                    End If
                    mVbcHoldMinMax True
                    mVbcL2MinMax False
                    mVbcMissedMinMax False
                End If
            End If
    End Select
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcLog2_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim slCntrType As String

    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If imDragSrce = DRAGLOG1 Then
        If State = vbLeave Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If (imDblClickMode = 2) And (imLog2Type <> 4) Then
            Exit Sub
        End If
        If (imLog2Type > 4) And (imLog2Type < 10) Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        slCntrType = tmL1Evt(imDragIndexSrce).sCntrType
        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmL1Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL1Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcLog2.LargeChange + 1
        If imL2Max > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imL2Max
        End If
        If (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Then
            If (vbcLog2.Value <= UBound(tmSdfMdExt)) And (vbcLog2.Value + vbcLog2.LargeChange >= UBound(tmSdfMdExt)) Then
                ilRow = UBound(tmSdfMdExt) - vbcLog2.Value + 1
                If ilRow <= vbcLog2.LargeChange + 1 Then
                    If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                        lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                        imDragRowNoDest = ilRow + vbcLog2.Value - 1
                        imDragIndexDest = ilRow + vbcLog2.Value - 1
                        imDragColNoDest = 0
                        imDragDest = DRAGLOG2     'Not defined
                        Exit Sub
                    End If
                End If
            End If
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                If imLog2Type = 4 Then  'Log2
                    'Test if row number can be dragged
                    ilIndex = tmL2RowIndex(ilRow)
                    If (imDblClickMode = 2) And (tmL2Evt(ilIndex).iType = 100) Then
                        Exit Sub
                    End If
                    If ((tmL2Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL2Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                        If mAvailRoom(DRAGLOG2, 0, imDragIndexSrce, tmL1Evt(), ilIndex, tmL2Evt()) Then
                            If tmL2Evt(ilIndex).iType = 100 Then
                                lacL1Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                            Else
                                If rbcMode(0).Value Then
                                    lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                                Else
                                    lacL1Frame.DragIcon = IconTraf!imcIconFill.DragIcon
                                    imDblClickMode = 2
                                End If
                            End If
                            imDragRowNoDest = ilRow + vbcLog2.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGLOG2     'Not defined
                        Else
                            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    Else
                        'lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        mDragoverOverbook ilRow, 0, ilIndex, tmL2Evt(), lacL1Frame, tmL1Evt(imDragRowNoSrce).iUnits, DRAGLOG2
                    End If
                    Exit Sub
                ElseIf (imLog2Type = 0) Or (imLog2Type = 3) Or (imLog2Type = 1) Or (imLog2Type = 2) Then  'Missed by advertiser
                    ilIndex = ilRow + vbcLog2.Value - 1
                    If ilIndex < UBound(tmSdfMdExt) Then
                        If mAvailRoomMdSwap(DRAGLOG2, 0, imDragIndexSrce, tmL1Evt(), ilIndex, tmSdfMdExt()) Then
                            lacL1Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                            imDragRowNoDest = ilRow + vbcLog2.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGLOG2     'Not defined
                        Else
                            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                        Exit Sub
                    End If
                End If
            End If
        Next ilRow
        'Test if moving into a blank row for missed
        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGLOG2 Then
        If imLog2Type = 4 Then  'Log2
            If State = vbLeave Then
                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Sub
            End If
            ilCompRow = vbcLog2.LargeChange + 1
            If imL2Max > ilCompRow Then
                ilMaxRow = ilCompRow
            Else
                ilMaxRow = imL1Max
            End If
            For ilRow = 1 To ilMaxRow Step 1
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    'Test if row number can be dragged
                    ilIndex = tmL2RowIndex(ilRow)
                    If (imDblClickMode = 2) And (tmL2Evt(ilIndex).iType = 100) Then
                        Exit Sub
                    End If
                    If ((tmL2Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL2Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                        If mAvailRoom(DRAGLOG2, 0, imDragIndexSrce, tmL2Evt(), ilIndex, tmL2Evt()) Then
                            If tmL2Evt(ilIndex).iType = 100 Then
                                lacL2Frame.DragIcon = IconTraf!imcIconSwap.DragIcon
                            Else
                                If rbcMode(0).Value Then
                                    lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                                Else
                                    lacL2Frame.DragIcon = IconTraf!imcIconFill.DragIcon
                                    imDblClickMode = 2
                                End If
                            End If
                            imDragRowNoDest = ilRow + vbcLog2.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGLOG2     'Not defined
                        Else
                            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    Else
                        'lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        mDragoverOverbook ilRow, 0, ilIndex, tmL2Evt(), lacL2Frame, tmL2Evt(imDragRowNoSrce).iUnits, DRAGLOG2
                    End If
                    Exit Sub
                End If
            Next ilRow
        End If
        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGHOLD Then
        If State = vbLeave Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcLog2.LargeChange + 1
        If imL2Max > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imL2Max
        End If
        If (imDblClickMode = 2) And (imLog2Type <> 4) Then
            Exit Sub
        End If
        If (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Then
            If (vbcLog2.Value <= UBound(tmSdfMdExt)) And (vbcLog2.Value + vbcLog2.LargeChange >= UBound(tmSdfMdExt)) Then
                ilRow = UBound(tmSdfMdExt) - vbcLog2.Value + 1
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    lacWAFrame(0).DragIcon = IconTraf!imcIconMove.DragIcon
                    imDragRowNoDest = ilRow + vbcLog2.Value - 1
                    imDragIndexDest = ilRow + vbcLog2.Value - 1
                    imDragColNoDest = 0
                    imDragDest = DRAGLOG2     'Not defined
                    Exit Sub
                End If
            End If
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                If imLog2Type = 4 Then  'Log2
                    'Test if row number can be dragged
                    ilIndex = tmL2RowIndex(ilRow)
                    If (imDblClickMode = 2) And (tmL2Evt(ilIndex).iType = 100) Then
                        Exit Sub
                    End If
                    If ((tmL2Evt(ilIndex).iType = 100) And (rbcMode(0).Value)) Or (tmL2Evt(ilIndex).iType = 99) Then    'Exchange with other spot
                        If mAvailRoomMdSwap(DRAGLOG2, 0, ilIndex, tmL2Evt(), imDragIndexSrce, tmWAMdExt()) Then
                            If tmL2Evt(ilIndex).iType = 100 Then
                                lacWAFrame(0).DragIcon = IconTraf!imcIconSwap.DragIcon
                            Else
                                If rbcMode(0).Value Then
                                    lacWAFrame(0).DragIcon = IconTraf!imcIconMove.DragIcon
                                Else
                                    lacWAFrame(0).DragIcon = IconTraf!imcIconFill.DragIcon
                                    imDblClickMode = 2
                                End If
                            End If
                            imDragRowNoDest = ilRow + vbcLog2.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGLOG2     'Not defined
                        Else
                            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                    Else
                        'lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                        mDragoverOverbook ilRow, 0, ilIndex, tmL2Evt(), lacWAFrame(0), tmWAMdExt(imDragRowNoSrce).iLen
                    End If
                    Exit Sub
                ElseIf imLog2Type = 10 Then  'Cancelled by date
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf imLog2Type = 11 Then  'Hidden by date
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf imLog2Type = 3 Then  'Missed by advertiser
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf imLog2Type = 0 Then  'Missed by date
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf imLog2Type = 1 Then  'Missed by Current month
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf imLog2Type = 2 Then  'Missed by Current Month plus Passed
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
            End If
        Next ilRow
        lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
    End If
End Sub
Private Sub pbcLog2_GotFocus()
    mSetShow imBoxNo
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcLog2_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then  'After Drop but before finished with drop
        If imDblClickMode > 0 Then
            imDragButton = Button
            imDragDest = DRAGLOG2
        End If
        Exit Sub
    End If
    fmDragX = X
    fmDragY = Y
    imDragButton = Button
    imDragType = 0
    imDragShift = Shift
    imDragSrce = DRAGLOG2
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub
Private Sub pbcLog2_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilRow As Integer
    Dim ilMaxRow As Integer
    Dim ilCompRow As Integer
    Dim ilIndex As Integer
    If Button = 2 Then  'Right Mouse
        If imIgnoreRightMove Then
            Exit Sub
        End If
        If (X >= tmL2Ctrls(1).fBoxX - 15) And (X <= (tmL2Ctrls(1).fBoxX + tmL2Ctrls(1).fBoxW + 15)) Then
            imIgnoreRightMove = True
            fmDragX = X
            fmDragY = Y
            imDragButton = Button
            If (imLog2Type > 4) And (imLog2Type < 10) Then
                mMdComment 3
                imIgnoreRightMove = False
            ElseIf imLog2Type = 4 Then
                ilCompRow = vbcLog2.LargeChange + 1
                If imL2Max > ilCompRow Then
                    ilMaxRow = ilCompRow
                Else
                    ilMaxRow = imL2Max
                End If
                For ilRow = 1 To ilMaxRow Step 1
                    If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                        ilIndex = tmL2RowIndex(ilRow)
                        If (imRowRightMouse = ilRow) Then
                            imIgnoreRightMove = False
                            Exit Sub
                        End If
                        plcConflictInfo.Top = (ilRow) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + 5 * tmL2Ctrls(1).fBoxH + pbcLog2.Top
                        'plcConflictInfo.Left = pbcContract.Left
                        mShowRightInfo tmL2Evt(), ilIndex, ilRow, 1
                        imIgnoreRightMove = False
                        Exit Sub
                    End If
                Next ilRow
                plcConflictInfo.Visible = False
                imRowRightMouse = -1
                imColRightMouse = -1
                imIgnoreRightMove = False
                Exit Sub
            End If
            plcConflictInfo.Visible = False
            imRowRightMouse = -1
            imColRightMouse = -1
            imIgnoreRightMove = False
            Exit Sub
        End If
    End If
End Sub
Private Sub pbcLog2_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    If tmcDrag.Enabled Then
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
    If (imDragSrce < 0) Then
        imDragSrce = DRAGLOG2
    End If
End Sub
Private Sub pbcLog2_Paint()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilLoop                                                                                *
'******************************************************************************************

    Dim slDate As String
    If imLog2Type = 4 Then  'Log 2
        pbcLog2.CurrentX = 30   'Top line
        pbcLog2.CurrentY = 15
        pbcLog2.Line Step(0, 0)-Step(pbcLog2.Width - 45, 0), BLUE, BF
        pbcLog2.CurrentX = 30   'Bottom line
        pbcLog2.CurrentY = pbcLog2.height - 15
        pbcLog2.Line Step(0, 0)-Step(pbcLog2.Width - 45, 0), BLUE, BF
        pbcLog2.CurrentX = 30   'Left side line
        pbcLog2.CurrentY = 15
        pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.height - 30), BLUE, BF
        pbcLog2.CurrentX = pbcLog2.Width - 15   'Right side line
        pbcLog2.CurrentY = 0
        pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.height - 30), BLUE, BF
        slDate = smLog2Date
        If Trim$(slDate) = "" Then
            Exit Sub
        End If
        If Not gValidDate(slDate) Then
            Exit Sub
        End If
        mPaintLog2 tmL2Evt(), tmL2Ctrls(1), tmL2RowIndex()
    ElseIf imLog2Type = 3 Then  'Missed by advertiser
        ''Top to bottom
        'For ilLoop = 0 To 11 Step 1
        '    pbcLog2.CurrentX = 30
        '    pbcLog2.CurrentY = tmL2Ctrls(1).fBoxY + (ilLoop) * (fgBoxGridH + 15) - 15
        '    pbcLog2.Line Step(0, 0)-Step(pbcLog2.Width - 45, 0), BLUE, BF
        'Next ilLoop
        'pbcLog2.CurrentX = 30   'Left side line
        'pbcLog2.CurrentY = 15
        'pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.Height - 30), BLUE, BF
        'pbcLog2.CurrentX = pbcLog2.Width - 15   'Right side line
        'pbcLog2.CurrentY = 15
        'pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.Height - 30), BLUE, BF
        mPaintMissedBoxes 0
        If imSelectedAdvt < 0 Then
            Exit Sub
        End If
        mPaintMissed 0, tmSdfMdExt(), tmL2Ctrls(1)
    ElseIf (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 10) Or (imLog2Type = 11) Then    'Missed or cancelled or Hidden by date
        ''Top to bottom
        'For ilLoop = 0 To 10 Step 1
        '    pbcLog2.CurrentX = 30
        '    pbcLog2.CurrentY = tmL2Ctrls(1).fBoxY + (ilLoop) * (fgBoxGridH + 15) - 15
        '    pbcLog2.Line -Step(pbcLog2.Width - 45, 0), BLUE, BF
        'Next ilLoop
        'pbcLog2.CurrentX = 30   'Left side line
        'pbcLog2.CurrentY = 15
        'pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.Height - 30), BLUE, BF
        'pbcLog2.CurrentX = pbcLog2.Width - 15   'Right side line
        'pbcLog2.CurrentY = 15
        'pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.Height - 30), BLUE, BF
        mPaintMissedBoxes 0
        If tmVef.sType <> "G" Then
            slDate = smMissedDate
            If Trim$(slDate) = "" Then
                Exit Sub
            End If
            If Not gValidDate(slDate) Then
                Exit Sub
            End If
        End If
        mPaintMissed 0, tmSdfMdExt(), tmL2Ctrls(1)
    ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then
        ''Top to bottom
        'For ilLoop = 0 To 10 Step 1
        '    pbcLog2.CurrentX = 30
        '    pbcLog2.CurrentY = tmL2Ctrls(1).fBoxY + (ilLoop) * (fgBoxGridH + 15) - 15
        '    pbcLog2.Line -Step(pbcLog2.Width - 45, 0), BLUE, BF
        'Next ilLoop
        'pbcLog2.CurrentX = 30   'Left side line
        'pbcLog2.CurrentY = 15
        'pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.Height - 30), BLUE, BF
        'pbcLog2.CurrentX = pbcLog2.Width - 15   'Right side line
        'pbcLog2.CurrentY = 15
        'pbcLog2.Line Step(0, 0)-Step(0, pbcLog2.Height - 30), BLUE, BF
        mPaintMissedBoxes 0
        mPaintManSch 0, tmL2Ctrls(1)
    End If
End Sub
Private Sub pbcMissed_DblClick()
    If rbcMode(1).Value Then
        imDblClick = 2      'act as if right button
    Else
        imDblClick = imDragButton
    End If
End Sub
Private Sub pbcMissed_DragDrop(Source As control, X As Single, Y As Single)
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim slDate As String
    Dim llDate As Long
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim ilPos As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilGameNo As Integer
    Dim ilMove As Integer

    imShowWhere = False
    If (imDragDest = -1) Or (imDblClickMode = 2) Or (Not imUpdateAllowed) Then
        mClearDrag True
        Exit Sub
    End If
    ilLoop = imDblClick
    ilRet = imDblClickMode
    mClearSpotInfo False
    imDblClick = ilLoop
    imDblClickMode = ilRet
    Screen.MousePointer = vbHourglass
    ReDim imTestDragIndex(0 To 0) As Integer
    If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1) Then
        'Find index
        If imDragRowNoDest >= UBound(tmAdMdSdfMdExt) Then
            imDragRowNoDest = UBound(tmSvAdMdSdfMdExt)
        Else
            'For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
            For ilLoop = imLBSdfMdExt To UBound(tmSvAdMdSdfMdExt) - 1 Step 1
                If (tmAdMdSdfMdExt(imDragRowNoDest).lCntrNo = tmSvAdMdSdfMdExt(ilLoop).lCntrNo) And (tmAdMdSdfMdExt(imDragRowNoDest).iLen = tmSvAdMdSdfMdExt(ilLoop).iLen) Then
                    imTestDragIndex(UBound(imTestDragIndex)) = ilLoop
                    ReDim Preserve imTestDragIndex(0 To UBound(imTestDragIndex) + 1) As Integer
                End If
            Next ilLoop
            If UBound(imTestDragIndex) <= 0 Then
                Screen.MousePointer = vbDefault
                mClearDrag True
                Exit Sub
            End If
            imDragIndexDest = imTestDragIndex(UBound(imTestDragIndex) - 1)
            imDragRowNoDest = imDragIndexDest
            If UBound(imTestDragIndex) <= 1 Then
                ReDim Preserve imTestDragIndex(0 To UBound(imTestDragIndex) - 1) As Integer
            End If
        End If
        ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
        For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
            tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
        Next ilLoop
    End If
    Select Case imDragSrce
        Case DRAGCONTRACT   'Move spot to bump and show within work
            'Determine if move or swap
            'slDate = edcDate.Text   'plcDate.Caption
            'llDate = gDateValue(slDate) + imDragColNoSrce - 1
            'slDate = Format$(llDate, "m/d/yy")
            mGetEdcDate imDragColNoSrce - 1
            llDate = lmEdcDate
            slDate = smEdcDate
            ilGameNo = imEdcGameNo
            If imDragRowNoDest >= UBound(tmAdMdSdfMdExt) Then  'Move
                'If Not mBlockDay(65536 * imVehCode + llDate, 0) Then
                If Not mBlockDay(65536 * imVehCode + lmLockDate, 0) Then
                    mClearDrag False
                    mForceRepaintWeekly False
                    Exit Sub
                End If
                ilRet = mBeginTrans(True, False)    'btrBeginTrans(hmSdf, 1000)
                If ilRet <> BTRV_ERR_NONE Then
                    'Screen.MousePointer = vbDefault
                    'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                    'mClearDrag False
                    mUnblockDay
                    Screen.MousePointer = vbDefault    'Default
                    Exit Sub
                End If
                Select Case imDragColNoSrce
                    Case 1  'Monday
                        llSdfRecPosSrce = tmMoEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmMoEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                    Case 2  'Tuesday
                        llSdfRecPosSrce = tmTuEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmTuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                    Case 3  'Wednesday
                        llSdfRecPosSrce = tmWeEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmWeEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                    Case 4  'Thursday
                        llSdfRecPosSrce = tmThEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmThEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                    Case 5  'Friday
                        llSdfRecPosSrce = tmFrEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmFrEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                    Case 6  'Saturday
                        llSdfRecPosSrce = tmSaEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmSaEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                    Case 7  'Sunday
                        llSdfRecPosSrce = tmSuEvt(imDragIndexSrce).lTime
                        mGetAvailIndex tmSuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                        ilRet = mUnschSpot("M", 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                        tmSmfA.lChfCode = 0
                End Select
                If Not ilRet Then
                    mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                    'mClearDrag False
                    'mForceRepaintWeekly True
                    mMissedSummary 1
                    Exit Sub
                End If
                ilRet = btrEndTrans(hmSdf)
                mUnblockDay
                mMissedSummary 1
                mVbcHoldMinMax False
                mVbcL1MinMax False
                mVbcL2MinMax False
                mVbcMissedMinMax False
                mVbcAvailMinMax False
                mVbcContractMinMax False
                'Show one open row
                If ((imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3)) Then
                    If vbcLog2.Value + vbcLog2.LargeChange >= UBound(tmSdfMdExt) - 2 Then
                        Do While vbcLog2.Value < vbcLog2.Max
                            vbcLog2.Value = vbcLog2.Value + 1
                        Loop
                    End If
                End If
                If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3)) Then
                    If vbcMissed.Value + vbcMissed.LargeChange >= UBound(tmAdMdSdfMdExt) - 2 Then
                        Do While vbcMissed.Value < vbcMissed.Max
                            vbcMissed.Value = vbcMissed.Value + 1
                        Loop
                    End If
                End If
            Else    'Swap
                Select Case imDragColNoSrce
                    Case 1  'Monday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmMoEvt(), tmAdMdSdfMdExt(), tmMoVcf0(), tmMoVcf6(), tmMoVcf7()
                    Case 2  'Tuesday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmTuEvt(), tmAdMdSdfMdExt(), tmTuVcf0(), tmTuVcf6(), tmTuVcf7()
                    Case 3  'Wedneday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmWeEvt(), tmAdMdSdfMdExt(), tmWeVcf0(), tmWeVcf6(), tmWeVcf7()
                    Case 4  'Thursday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmThEvt(), tmAdMdSdfMdExt(), tmThVcf0(), tmThVcf6(), tmThVcf7()
                    Case 5  'Friday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmFrEvt(), tmAdMdSdfMdExt(), tmFrVcf0(), tmFrVcf6(), tmFrVcf7()
                    Case 6  'Saturday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmSaEvt(), tmAdMdSdfMdExt(), tmSaVcf0(), tmSaVcf6(), tmSaVcf7()
                    Case 7  'Sunday
                        mLogMdSwap 0, imDragIndexSrce, imDragIndexDest, slDate, ilGameNo, tmSuEvt(), tmAdMdSdfMdExt(), tmSuVcf0(), tmSuVcf6(), tmSuVcf7()
                End Select
            End If
            pbcHourRot.Cls
            pbcHourRot_Paint
            pbcDailyRot.Cls
            pbcDailyRot_Paint
        Case DRAGWORKAREA
            If imDragRowNoDest >= UBound(tmAdMdSdfMdExt) Then  'Move
                'ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(imDragIndexSrce).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                'If tmSdf.iVefCode = imVehCode Then
                '    tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmWAMdExt(imDragIndexSrce)
                '    ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                '    tmVefSrchKey.iCode = tmSdf.iVefCode
                '    ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                '    ilPos = InStr(tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow, Left$(Trim$(tmOrigVef.sName), 10))
                '    If ilPos > 0 Then
                '        tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow = Left$(tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow, ilPos - 1)
                '    End If
                'End If
                ''Remove from work
                'For ilLoop = imDragIndexSrce To UBound(tmWAMdExt) - 2 Step 1
                '    tmWAMdExt(ilLoop) = tmWAMdExt(ilLoop + 1)
                'Next ilLoop
                'If UBound(tmWAMdExt) > 1 Then
                '    ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                'End If
                'For ilMove = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
                For ilMove = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
                    If tmWAMdExt(ilMove).iSelected = 1 Then
                        'ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(ilMove).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmSdfSrchKey3.lCode = tmWAMdExt(ilMove).lSdfCode
                        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        If tmSdf.iVefCode = imVehCode Then
                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmWAMdExt(ilMove)
                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)).iSelected = 0
                            'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                            'tmVefSrchKey.iCode = tmSdf.iVefCode
                            'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                            'ilPos = InStr(tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow, Left$(Trim$(tmOrigVef.sName), 10))
                            'If ilPos > 0 Then
                            '    tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow = Left$(tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow, ilPos - 1)
                            'End If
                        End If
                    End If
                Next ilMove
                'For ilMove = UBound(tmWAMdExt) - 1 To LBound(tmWAMdExt) Step -1
                For ilMove = UBound(tmWAMdExt) - 1 To imLBSdfMdExt Step -1
                    If tmWAMdExt(ilMove).iSelected = 1 Then
                        'ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(ilMove).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                        tmSdfSrchKey3.lCode = tmWAMdExt(ilMove).lSdfCode
                        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                        'If tmSdf.iVefCode = imVehCode Then
                            'Remove from work
                            For ilLoop = ilMove To UBound(tmWAMdExt) - 2 Step 1
                                tmWAMdExt(ilLoop) = tmWAMdExt(ilLoop + 1)
                            Next ilLoop
                            If UBound(tmWAMdExt) > 1 Then
                                'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                                ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                            End If
                            ilRet = gSxfDelete(hmSxf, tmSdf, False, True)
                            ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
                        'End If
                    End If
                Next ilMove
                imWASelectionCount = 0
                imWALastSelection = -1
                
                If (imLog2Type = 0) And (tmSdf.iVefCode = imVehCode) Then
                    'Test date
                    If (gDateValue(smMissedDate) >= gDateValue(gObtainPrevMonday(smAdMdMissedDate))) And (gDateValue(smMissedDate) <= gDateValue(gObtainNextSunday(smAdMdMissedDate))) Then
                        'If tmCff(0).sDelete = "N" Then  'In mUnschSpot
                            'If (tmCff(0).iSpotsWk <> 0) Or (tmCff(0).iXSpotsWk <> 0) Then
                                tmSdfMdExt(UBound(tmSdfMdExt)) = tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1)
                                'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                            'Else
                            '    If tmCff(0).iDay(gWeekDayStr(smMissedDate)) > 0 Then
                            '        tmSdfMdExt(UBound(tmSdfMdExt)) = tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1)
                            '        ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                            '    End If
                            'End If
                        'End If
                    End If
                End If
                If ((imLog2Type = 1) Or (imLog2Type = 2)) And (tmSdf.iVefCode = imVehCode) Then
                    tmSdfMdExt(UBound(tmSdfMdExt)) = tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1)
                    'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                    ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                End If
                If (imLog2Type = 3) And (imSelectedAdvt > 0) And (tmSdf.iVefCode = imVehCode) Then
                    'Test advertiser
                    slNameCode = tgSpotAdvertiser(imSelectedAdvt).sKey 'Traffic!lbcAdvertiser.List(imSelectedAdvt)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    If Val(slCode) = tmSdf.iAdfCode Then
                        tmSdfMdExt(UBound(tmSdfMdExt)) = tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1)
                        'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                        ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                    End If
                End If
                mMissedSummary 1
                mVbcHoldMinMax True
                mVbcL2MinMax False
                mVbcMissedMinMax False
                If ((imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3)) Then
                    If vbcLog2.Value + vbcLog2.LargeChange >= UBound(tmSdfMdExt) - 2 Then
                        Do While vbcLog2.Value < vbcLog2.Max
                            vbcLog2.Value = vbcLog2.Value + 1
                        Loop
                    End If
                End If
                If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3)) Then
                    If vbcMissed.Value + vbcMissed.LargeChange >= UBound(tmAdMdSdfMdExt) - 2 Then
                        Do While vbcMissed.Value < vbcMissed.Max
                            vbcMissed.Value = vbcMissed.Value + 1
                        Loop
                    End If
                End If
            End If
    End Select
    Screen.MousePointer = vbDefault
    mClearDrag False
End Sub
Private Sub pbcMissed_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim ilRet As Integer
    Dim slCntrType As String

    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    If imDblClickMode = 2 Then
        Exit Sub
    End If
    If imDragSrce = DRAGCONTRACT Then
        If State = vbLeave Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If (imAdMdType >= 3) Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        'Select Case imDragColNoSrce
        '    Case 1  'Monday
        '        If (tmMoEvt(imDragIndexSrce).sCntrType = "S") Or (tmMoEvt(imDragIndexSrce).sCntrType = "M") Or (tmMoEvt(imDragIndexSrce).sCntrType = "R") Or (tmMoEvt(imDragIndexSrce).sCntrType = "T") Or (tmMoEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 2  'Tuesday
        '        If (tmTuEvt(imDragIndexSrce).sCntrType = "S") Or (tmTuEvt(imDragIndexSrce).sCntrType = "M") Or (tmTuEvt(imDragIndexSrce).sCntrType = "R") Or (tmTuEvt(imDragIndexSrce).sCntrType = "T") Or (tmTuEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 3  'Wednesday
        '        If (tmWeEvt(imDragIndexSrce).sCntrType = "S") Or (tmWeEvt(imDragIndexSrce).sCntrType = "M") Or (tmWeEvt(imDragIndexSrce).sCntrType = "R") Or (tmWeEvt(imDragIndexSrce).sCntrType = "T") Or (tmWeEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 4  'Thursday
        '        If (tmThEvt(imDragIndexSrce).sCntrType = "S") Or (tmThEvt(imDragIndexSrce).sCntrType = "M") Or (tmThEvt(imDragIndexSrce).sCntrType = "R") Or (tmThEvt(imDragIndexSrce).sCntrType = "T") Or (tmThEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 5  'Friday
        '        If (tmFrEvt(imDragIndexSrce).sCntrType = "S") Or (tmFrEvt(imDragIndexSrce).sCntrType = "M") Or (tmFrEvt(imDragIndexSrce).sCntrType = "R") Or (tmFrEvt(imDragIndexSrce).sCntrType = "T") Or (tmFrEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 6  'Saturday
        '        If (tmSaEvt(imDragIndexSrce).sCntrType = "S") Or (tmSaEvt(imDragIndexSrce).sCntrType = "M") Or (tmSaEvt(imDragIndexSrce).sCntrType = "R") Or (tmSaEvt(imDragIndexSrce).sCntrType = "T") Or (tmSaEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        '    Case 7  'Sunday
        '        If (tmSuEvt(imDragIndexSrce).sCntrType = "S") Or (tmSuEvt(imDragIndexSrce).sCntrType = "M") Or (tmSuEvt(imDragIndexSrce).sCntrType = "R") Or (tmSuEvt(imDragIndexSrce).sCntrType = "T") Or (tmSuEvt(imDragIndexSrce).sCntrType = "Q") Then ' Or ((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) Then
        '            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        '            Exit Sub
        '        End If
        'End Select
        ilCompRow = vbcMissed.LargeChange + 1
        If imAdMdMax > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imAdMdMax
        End If
        'Test if moving into a blank row for missed
        If (imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Then
            If (vbcMissed.Value <= UBound(tmAdMdSdfMdExt)) And (vbcMissed.Value + vbcMissed.LargeChange >= UBound(tmAdMdSdfMdExt)) Then
                ilRow = UBound(tmAdMdSdfMdExt) - vbcMissed.Value + 1
                If ilRow <= vbcMissed.LargeChange + 1 Then
                    If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                        Select Case imDragColNoSrce
                            Case 1  'Monday
                                slCntrType = tmMoEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmMoEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Case 2  'Tuesday
                                slCntrType = tmTuEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmTuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Case 3  'Wednesday
                                slCntrType = tmWeEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmWeEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Case 4  'Thursday
                                slCntrType = tmThEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmThEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Case 5  'Friday
                                slCntrType = tmFrEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmFrEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Case 6  'Saturday
                                slCntrType = tmSaEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSaEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                            Case 7  'Sunday
                                slCntrType = tmSuEvt(imDragIndexSrce).sCntrType
                                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                    Exit Sub
                                End If
                        End Select
                        lacAFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                        imDragRowNoDest = ilRow + vbcMissed.Value - 1
                        imDragIndexDest = ilRow + vbcMissed.Value - 1
                        imDragColNoDest = 0
                        imDragDest = DRAGADMD     'Not defined
                        Exit Sub
                    End If
                End If
            End If
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                If (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3) Then  'Missed by advertiser
                    ilIndex = ilRow + vbcMissed.Value - 1
                    If ilIndex < UBound(tmAdMdSdfMdExt) Then
                        Select Case imDragColNoSrce
                            Case 1  'Monday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmMoEvt(), ilIndex, tmAdMdSdfMdExt())
                            Case 2  'Tuesday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmTuEvt(), ilIndex, tmAdMdSdfMdExt())
                            Case 3  'Wednesday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmWeEvt(), ilIndex, tmAdMdSdfMdExt())
                            Case 4  'Thursday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmThEvt(), ilIndex, tmAdMdSdfMdExt())
                            Case 5  'Friday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmFrEvt(), ilIndex, tmAdMdSdfMdExt())
                            Case 6  'Saturday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmSaEvt(), ilIndex, tmAdMdSdfMdExt())
                            Case 7  'Sunday
                                ilRet = mAvailRoomMdSwap(DRAGADMD, 0, imDragIndexSrce, tmSuEvt(), ilIndex, tmAdMdSdfMdExt())
                        End Select
                        If ilRet Then
                            Select Case imDragColNoSrce
                                Case 1  'Monday
                                    slCntrType = tmMoEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmMoEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                                Case 2  'Tuesday
                                    slCntrType = tmTuEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmTuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                                Case 3  'Wednesday
                                    slCntrType = tmWeEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmWeEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                                Case 4  'Thursday
                                    slCntrType = tmThEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmThEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                                Case 5  'Friday
                                    slCntrType = tmFrEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmFrEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                                Case 6  'Saturday
                                    slCntrType = tmSaEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSaEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                                Case 7  'Sunday
                                    slCntrType = tmSuEvt(imDragIndexSrce).sCntrType
                                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                                        lacAFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
                                    Else
                                        lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
                                    End If
                            End Select
                            imDragRowNoDest = ilRow + vbcMissed.Value - 1
                            imDragIndexDest = ilIndex
                            imDragColNoDest = 0
                            imDragDest = DRAGADMD     'Not defined
                        Else
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        End If
                        Exit Sub
                    End If
                End If
            End If
        Next ilRow
        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGADMD Then
        lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    ElseIf imDragSrce = DRAGWORKAREA Then
        If State = vbLeave Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        If (imAdMdType >= 4) Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            Exit Sub
        End If
        ilCompRow = vbcMissed.LargeChange + 1
        If imAdMdMax > ilCompRow Then
            ilMaxRow = ilCompRow
        Else
            ilMaxRow = imAdMdMax
        End If
        If (imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Then
            If (vbcMissed.Value <= UBound(tmAdMdSdfMdExt)) And (vbcMissed.Value + vbcMissed.LargeChange >= UBound(tmAdMdSdfMdExt)) Then
                ilRow = UBound(tmAdMdSdfMdExt) - vbcMissed.Value + 1
                If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                    lacWAFrame(1).DragIcon = IconTraf!imcIconMove.DragIcon
                    imDragRowNoDest = ilRow + vbcMissed.Value - 1
                    imDragIndexDest = 0
                    imDragColNoDest = 0
                    imDragDest = DRAGADMD     'Not defined
                    Exit Sub
                End If
            End If
        End If
        For ilRow = 1 To ilMaxRow Step 1
            If (Y >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (Y <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                If imAdMdType = 3 Then  'Missed by advertiser
                    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Then  'Missed by date
                    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
            End If
        Next ilRow
        lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
    End If
End Sub
Private Sub pbcMissed_GotFocus()
    mSetShow imBoxNo
    imBoxNo = -1
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcSort.Visible = False
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcMissed_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If (imDragSrce >= 0) Or ((Not imUpdateAllowed) And (Button <> 2)) Then  'After Drop but before finished with drop
        If imDblClickMode > 0 Then
            imDragButton = Button
            imDragDest = DRAGADMD
        End If
        Exit Sub
    End If
    fmDragX = X
    fmDragY = Y
    imDragButton = Button
    imDragType = 0
    imDragShift = Shift
    imDragSrce = DRAGADMD
    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    tmcDrag.Enabled = True  'Start timer to see if drag or click
End Sub
Private Sub pbcMissed_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If Button = 2 Then  'Right Mouse
        If imIgnoreRightMove Then
            Exit Sub
        End If
        imIgnoreRightMove = True
        fmDragX = X
        fmDragY = Y
        imDragButton = Button
        mMdComment 1
        imIgnoreRightMove = False
    End If
End Sub
Private Sub pbcMissed_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    If tmcDrag.Enabled Then
        'imDragType = -1
        'imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If tmcDblClick.Enabled Then
        Exit Sub
    End If
    tmcDblClick.Enabled = True
    imMouseUpButton = Button
    imMouseUpShift = Shift
    fmMouseUpX = X
    fmMouseUpY = Y
    If (imDragSrce < 0) Then
        imDragSrce = DRAGADMD
    End If
End Sub
Private Sub pbcMissed_Paint()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilLoop                                                                                *
'******************************************************************************************


    mPaintMissedBoxes 1
    If imAdMdType = 3 Then '3=Advt; 0=Time
        If imAdMdSelectedAdvt < 0 Then
            Exit Sub
        End If
        mPaintMissed 1, tmAdMdSdfMdExt(), tmL2Ctrls(1)
    ElseIf imAdMdType = 0 Then '3=Advt; 0=Time
        mPaintMissed 1, tmAdMdSdfMdExt(), tmL2Ctrls(1)
    ElseIf imAdMdType = 1 Then '3=Advt; 0=Time
        mPaintMissed 1, tmAdMdSdfMdExt(), tmL2Ctrls(1)
    ElseIf imAdMdType = 2 Then '3=Advt; 0=Time
        mPaintMissed 1, tmAdMdSdfMdExt(), tmL2Ctrls(1)
    ElseIf imAdMdType = 9 Then 'Cancelled
        mPaintMissed 1, tmAdMdSdfMdExt(), tmL2Ctrls(1)
    ElseIf imAdMdType = 10 Then 'Hidden
        mPaintMissed 1, tmAdMdSdfMdExt(), tmL2Ctrls(1)
    ElseIf imAdMdType = 11 Then 'Extra
        mPaintManSch 1, tmL2Ctrls(1)
    Else
        mPaintManSch 1, tmL2Ctrls(1)
    End If
End Sub

Private Sub pbcMode_Paint()
    pbcMode.CurrentX = 0
    pbcMode.CurrentY = 0
    pbcMode.Print "Mode"
End Sub

Private Sub pbcPrice_KeyPress(KeyAscii As Integer)
    If (KeyAscii = Asc("Y")) Or (KeyAscii = Asc("y")) Then
        imMore = 1
        If imDW = 1 Then    'rbcAdvt.Value Then
            'Repaint
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        ElseIf (imDW = 0) Then     '(rbcTime.Value) And (imLog2Type = 2) Then
            pbcLog1.Cls
            pbcLog1_Paint
            'If (imLog2Type = 4) Then
                pbcLog2.Cls
                pbcLog2_Paint
            'End If
        End If
    ElseIf (KeyAscii = Asc("N")) Or (KeyAscii = Asc("n")) Then
        imMore = 0
        If imDW = 1 Then    'rbcAdvt.Value Then
            'Repaint
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        ElseIf (imDW = 0) Then    '(rbcTime.Value) And (imLog2Type = 2) Then
            pbcLog1.Cls
            pbcLog1_Paint
            'If (imLog2Type = 4) Then
                pbcLog2.Cls
                pbcLog2_Paint
            'End If
        End If
    End If
    If KeyAscii = Asc(" ") Then
        imMore = imMore + 1
        If imMore > 1 Then
            imMore = 0
        End If
        pbcPrice.Cls
        pbcPrice_Paint
        If imDW = 1 Then    'rbcAdvt.Value Then
            'Repaint
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        ElseIf (imDW = 0) Then    '(rbcTime.Value) And (imLog2Type = 2) Then
            pbcLog1.Cls
            pbcLog1_Paint
            'If (imLog2Type = 4) Then
                pbcLog2.Cls
                pbcLog2_Paint
            'End If
        End If
    End If
End Sub

Private Sub pbcPrice_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    imMore = imMore + 1
    If imMore > 1 Then
        imMore = 0
    End If
    pbcPrice.Cls
    pbcPrice_Paint
    If imDW = 1 Then    'rbcAdvt.Value Then
        'Repaint
        pbcContract.Cls
        pbcMissed.Cls
        pbcAdWorkArea.Cls
        pbcContract_Paint
        pbcMissed_Paint
        pbcAdWorkArea_Paint
    ElseIf (imDW = 0) Then     '(rbcTime.Value) And (imLog2Type = 2) Then
        pbcLog1.Cls
        pbcLog1_Paint
        'If (imLog2Type = 4) Then
            pbcLog2.Cls
            pbcLog2_Paint
        'End If
    End If
End Sub

Private Sub pbcPrice_Paint()
    pbcPrice.CurrentX = fgBoxInsetX \ 20
    pbcPrice.CurrentY = 0
    If imMore = 0 Then
        pbcPrice.Print "No"
    Else
        pbcPrice.Print "Yes"
    End If
End Sub

Private Sub pbcReason_Click()
'    imMissedReason = imMissedReason + 1
'    'tmMissedCode (1 to x)
'    If imMissedReason >= UBound(tmMissedCode) Then
'        imMissedReason = LBound(tmMissedCode)
'    End If
'    'pbcReason.Cls
'    'pbcReason_Paint
End Sub


Private Sub pbcReason_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    Dim slCntrType As String
    Dim flFontHeight As Single

    imDragRowNoDest = 0
    imDragIndexDest = 0
    imDragColNoDest = 0
    imDragDest = -1     'Not defined
    flFontHeight = 150
    If State = vbLeave Then
        tmcScroll.Enabled = False
    End If
    'If rbcTime.Value Then
    If imDW = 0 Then
'        If X < Source.Width - 240 Then
            If imDragSrce = DRAGLOG1 Then
                If State = vbLeave Then
                    lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                slCntrType = tmL1Evt(imDragIndexSrce).sCntrType
                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmL1Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL1Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                    lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
'                'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                If ilListIndex <= lbcMissed.ListCount - 1 Then
'                    lbcMissed.ListIndex = ilListIndex
'                    lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
'                Else
'                    lbcMissed.ListIndex = -1
'                End If
                If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                    mDragOver DRAGMDREASON, State, 1
                Else
                    imMissedReason = -1
                    lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                End If
                Exit Sub
            ElseIf imDragSrce = DRAGLOG2 Then
                If State = vbLeave Then
                    lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                If imLog2Type = 4 Then
                    slCntrType = tmL2Evt(imDragIndexSrce).sCntrType
                    If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmL2Evt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmL2Evt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        Exit Sub
                    End If
'                    'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                    ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                    If ilListIndex <= lbcMissed.ListCount - 1 Then
'                        lbcMissed.ListIndex = ilListIndex
'                        lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
'                    Else
'                        lbcMissed.ListIndex = -1
'                        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
'                    End If
                    If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                        lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                        mDragOver DRAGMDREASON, State, 1
                    Else
                        imMissedReason = -1
                        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                    Exit Sub
                ElseIf ((imLog2Type = 0) And (imLog2Show = 0)) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Then
'                    'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                    ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                    If ilListIndex <= lbcMissed.ListCount - 1 Then
'                        lbcMissed.ListIndex = ilListIndex
'                        lacL2Frame.DragIcon = IconTraf!imcIconChg.DragIcon
'                    Else
'                        lbcMissed.ListIndex = -1
'                        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
'                    End If
                    If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                        lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                        mDragOver DRAGMDREASON, State, 1
                    Else
                        imMissedReason = -1
                        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                    Exit Sub
                ElseIf (imLog2Type = 10) Then    'Cancelled by date
                    'lbcMissed.ListIndex = -1
                    imMissedReason = -1
                    'pbcReason.Cls
                    lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                ElseIf (imLog2Type = 11) Then   'Hidden by Date
                    'lbcMissed.ListIndex = -1
                    imMissedReason = -1
                    'pbcReason.Cls
                    lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
            ElseIf imDragSrce = DRAGHOLD Then
'                'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                If ilListIndex <= lbcMissed.ListCount - 1 Then
'                    lbcMissed.ListIndex = ilListIndex
'                    lacWAFrame(0).DragIcon = IconTraf!imcIconMove.DragIcon
'                Else
'                    lbcMissed.ListIndex = -1
'                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
'                End If
                If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    lacWAFrame(0).DragIcon = IconTraf!imcIconMove.DragIcon
                    mDragOver DRAGMDREASON, State, 1
                Else
                    imMissedReason = -1
                    lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                End If
                Exit Sub
            End If
'        Else
'            'If Y < (lbcMissed.Height \ 2) Then
'            If Y < (pbcMissed.Height \ 2) Then
'                If imDragSrce = DRAGLOG1 Then
'                    lacL1Frame.DragIcon = IconTraf!imcIconUp.DragIcon
'                ElseIf imDragSrce = DRAGLOG2 Then
'                    lacL2Frame.DragIcon = IconTraf!imcIconUp.DragIcon
'                ElseIf imDragSrce = DRAGHOLD Then
'                    lacWAFrame(0).DragIcon = IconTraf!imcIconUp.DragIcon
'                End If
'                mDragOver DRAGMDREASON, State, 0    'at top
'            Else
'                If imDragSrce = DRAGLOG1 Then
'                    lacL1Frame.DragIcon = IconTraf!imcIconDown.DragIcon
'                ElseIf imDragSrce = DRAGLOG2 Then
'                    lacL2Frame.DragIcon = IconTraf!imcIconDown.DragIcon
'                ElseIf imDragSrce = DRAGHOLD Then
'                    lacWAFrame(0).DragIcon = IconTraf!imcIconDown.DragIcon
'                End If
'                mDragOver DRAGMDREASON, State, 1    'at bottom
'            End If
'        End If
    Else
'        If X < Source.Width - 240 Then
            If imDragSrce = DRAGCONTRACT Then
                Select Case imDragColNoSrce
                    Case 1  'Monday
                        slCntrType = tmMoEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmMoEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmMoEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Case 2  'Tuesday
                        slCntrType = tmTuEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmTuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmTuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Case 3  'Wednesday
                        slCntrType = tmWeEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmWeEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmWeEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Case 4  'Thursday
                        slCntrType = tmThEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmThEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmThEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Case 5  'Friday
                        slCntrType = tmFrEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmFrEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmFrEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Case 6  'Saturday
                        slCntrType = tmSaEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSaEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSaEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Case 7  'Sunday
                        slCntrType = tmSuEvt(imDragIndexSrce).sCntrType
                        If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Or (((tmSuEvt(imDragIndexSrce).iLineInfo And &H10) = &H10) And ((tmSuEvt(imDragIndexSrce).iLineInfo And &H200) <> &H200)) Then
                            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                End Select
'                'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                If ilListIndex <= lbcMissed.ListCount - 1 Then
'                    lbcMissed.ListIndex = ilListIndex
'                    lacAFrame.DragIcon = IconTraf!imcIconMove.DragIcon
'                Else
'                    lbcMissed.ListIndex = -1
'                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
'                End If
                If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    lacAFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                    mDragOver DRAGMDREASON, State, 1
                Else
                    imMissedReason = -1
                    lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                End If

                Exit Sub
            ElseIf imDragSrce = DRAGADMD Then
                If (((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1)) Or (imAdMdType = 9) Or (imAdMdType = 10) Or ((imAdMdType > 3) And (imAdMdType < 9)) Or (imAdMdType = 11) Then
                    'lbcMissed.ListIndex = -1
                    imMissedReason = -1
                    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
'                'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                If ilListIndex <= lbcMissed.ListCount - 1 Then
'                    lbcMissed.ListIndex = ilListIndex
'                    lacAdMdFrame.DragIcon = IconTraf!imcIconChg.DragIcon
'                Else
'                    lbcMissed.ListIndex = -1
'                    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
'                End If
                If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                    mDragOver DRAGMDREASON, State, 1
                Else
                    imMissedReason = -1
                    lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                End If
                Exit Sub
            ElseIf imDragSrce = DRAGWORKAREA Then
'                'ilListIndex = Y \ fgListHtArial825 + lbcMissed.TopIndex
'                ilListIndex = Y \ flFontHeight + lbcMissed.TopIndex
'                If ilListIndex <= lbcMissed.ListCount - 1 Then
'                    lbcMissed.ListIndex = ilListIndex
'                    lacWAFrame(1).DragIcon = IconTraf!imcIconMove.DragIcon
'                Else
'                    lbcMissed.ListIndex = -1
'                    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
'                End If
                If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    lacWAFrame(1).DragIcon = IconTraf!imcIconMove.DragIcon
                    mDragOver DRAGMDREASON, State, 1
                Else
                    imMissedReason = -1
                    lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                End If

                Exit Sub
            End If
'        Else
'            'If Y < (lbcMissed.Height \ 2) Then
'            If Y < (pbcMissed.Height \ 2) Then
'                If imDragSrce = DRAGCONTRACT Then
'                    lacAFrame.DragIcon = IconTraf!imcIconUp.DragIcon
'                ElseIf imDragSrce = DRAGADMD Then
'                    lacAdMdFrame.DragIcon = IconTraf!imcIconUp.DragIcon
'                ElseIf imDragSrce = DRAGWORKAREA Then
'                    lacWAFrame(1).DragIcon = IconTraf!imcIconUp.DragIcon
'                End If
'                mDragOver DRAGMDREASON, State, 0    'at top
'            Else
'                If imDragSrce = DRAGCONTRACT Then
'                    lacAFrame.DragIcon = IconTraf!imcIconDown.DragIcon
'                ElseIf imDragSrce = DRAGADMD Then
'                    lacAdMdFrame.DragIcon = IconTraf!imcIconDown.DragIcon
'                ElseIf imDragSrce = DRAGWORKAREA Then
'                    lacWAFrame(1).DragIcon = IconTraf!imcIconDown.DragIcon
'                End If
'                mDragOver DRAGMDREASON, State, 1    'at bottom
'            End If
'        End If
    End If

End Sub

Private Sub pbcReason_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcSort.Visible = False
    lbcAdMdType.Visible = False
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub


Private Sub pbcReason_KeyPress(KeyAscii As Integer)
    If KeyAscii = Asc(" ") Then
        If imBoxNo = CANCELREASONINDEX Then
            imCancelReason = imCancelReason + 1
            If imCancelReason >= UBound(tmMissedCode) Then
                imCancelReason = LBound(tmMissedCode)
            End If
        Else
            imMissedReason = imMissedReason + 1
            If imMissedReason >= UBound(tmMissedCode) Then
                imMissedReason = LBound(tmMissedCode)
            End If
        End If
        pbcReason.Cls
        pbcReason_Paint
    End If
End Sub

Private Sub pbcReason_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
'    plcConflictInfo.Visible = False
'    mClearDrag True
'    If tmcDrag.Enabled Then
'        imDragType = -1
'        imDragSrce = -1
'        tmcDrag.Enabled = False
'    End If
    If imBoxNo = CANCELREASONINDEX Then
        imCancelReason = imCancelReason + 1
        If imCancelReason >= UBound(tmMissedCode) Then
            imCancelReason = LBound(tmMissedCode)
        End If
    Else
        imMissedReason = imMissedReason + 1
        If imMissedReason >= UBound(tmMissedCode) Then
            imMissedReason = LBound(tmMissedCode)
        End If
    End If
    pbcReason.Cls
    pbcReason_Paint
End Sub

Private Sub pbcReason_Paint()
    Dim slNameCode As String
    Dim slName As String
    Dim ilRet As Integer

    pbcReason.CurrentX = fgBoxInsetX \ 20
    pbcReason.CurrentY = 0
    If imBoxNo = CANCELREASONINDEX Then
        If (imCancelReason >= LBound(tmMissedCode)) And (imCancelReason < UBound(tmMissedCode)) Then
            slNameCode = tmMissedCode(imCancelReason).sKey
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            pbcReason.Print Trim$(slName)
        Else
            pbcReason.Cls
        End If
    Else
        If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
            slNameCode = tmMissedCode(imMissedReason).sKey
            ilRet = gParseItem(slNameCode, 1, "\", slName)
            pbcReason.Print Trim$(slName)
        Else
            pbcReason.Cls
        End If
    End If
End Sub

Private Sub pbcReschd_Paint()
    pbcReschd.CurrentX = (pbcReschd.Width - pbcReschd.TextWidth("Scheduling Missed Spots, Please Wait....")) / 2
    pbcReschd.CurrentY = (pbcReschd.height - pbcReschd.TextHeight("Scheduling Missed Spots, Please Wait....")) / 2 - 30
    pbcReschd.Print "Scheduling Missed Spots, Please Wait...."
End Sub
Private Sub pbcSC_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcSC_GotFocus()
    lbcSort.Visible = False
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If imFirstFocus Then
        imFirstFocus = False
        cbcVehicle.SetFocus
        Exit Sub
    End If
End Sub
Private Sub pbcSC_KeyPress(KeyAscii As Integer)
    Dim ilLoop As Integer
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If (KeyAscii = Asc("S")) Or (KeyAscii = Asc("s")) Then
        'If (imADMdShow = 1) And (Trim$(plcDate.Caption) <> "") Then
        If (imADMdShow = 1) And (Trim$(edcDate.Text) <> "") Then
            ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
            For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
                tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
            Next ilLoop
        End If
        cmcSort.Visible = True
        imADMdShow = 0
        pbcSC.Cls
        pbcSC_Paint
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            edcMissedType_Change
        End If
    ElseIf (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        cmcSort.Visible = False
        imADMdShow = 1
        pbcSC.Cls
        pbcSC_Paint
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            edcMissedType_Change
        End If
    End If
    If KeyAscii = Asc(" ") Then
        If imADMdShow = 1 Then
            cmcSort.Visible = True
            imADMdShow = 0
            pbcSC.Cls
            pbcSC_Paint
            'If Trim$(plcDate.Caption) <> "" Then
            If Trim$(edcDate.Text) <> "" Then
                ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
                For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
                    tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
                Next ilLoop
                edcMissedType_Change
            End If
        ElseIf imADMdShow = 0 Then
            cmcSort.Visible = False
            imADMdShow = 1
            pbcSC.Cls
            pbcSC_Paint
            'If Trim$(plcDate.Caption) <> "" Then
            If Trim$(edcDate.Text) <> "" Then
                edcMissedType_Change
            End If
        End If
    End If
End Sub
Private Sub pbcSC_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilLoop As Integer
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If imADMdShow = 1 Then
        cmcSort.Visible = True
        imADMdShow = 0
        pbcSC.Cls
        pbcSC_Paint
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
            For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
                tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
            Next ilLoop
            edcMissedType_Change
        End If
    ElseIf imADMdShow = 0 Then
        cmcSort.Visible = False
        imADMdShow = 1
        pbcSC.Cls
        pbcSC_Paint
        'If Trim$(plcDate.Caption) <> "" Then
        If Trim$(edcDate.Text) <> "" Then
            edcMissedType_Change
        End If
    End If
End Sub
Private Sub pbcSC_Paint()
    pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
    pbcSC.CurrentY = 0
    If imADMdShow = 0 Then
        pbcSC.Print "S"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.Print "p"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.Print "o"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.Print "t"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.Print "s"
    Else
        pbcSC.Print "C"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "o"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "n"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "t"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "r"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "a"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "c"
        pbcSC.CurrentX = fgBoxInsetX \ 20 + 45
        pbcSC.CurrentY = pbcSC.CurrentY - 30
        pbcSC.Print "t"
    End If
End Sub

Private Sub pbcSelect_DragDrop(Index As Integer, Source As control, X As Single, Y As Single)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  llDate                                                                                *
'******************************************************************************************

    Dim ilBox As Integer
    Dim llSdfRecPosSrce As Long
    Dim llSsfAvailRecPosSrce As Long
    Dim ilSsfAvailIndexSrce As Integer
    Dim ilPositionSrce As Integer
    Dim slTimeSrce As String
    Dim slDate As String
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim ilPos As Integer
    Dim ilDragOk As Integer
    Dim ilRow As Integer
    Dim ilGameNo As Integer
    Dim slSchStatus As String
    Dim ilMove As Integer

    If (imAdMdSelectionCount > 1) Or (imWASelectionCount > 1) Then
        If (imDragSrce = DRAGADMD) Or (imDragSrce = DRAGWORKAREA) Then
            imIgnoreChg = False
            mClearDrag False
            imSelectDelay = False
            mUnblockDay
            Exit Sub
        End If
    End If
    For ilBox = imLBCtrls To UBound(tmCtrls) Step 1
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                ilDragOk = False
                If (ilBox = WORKAREAINDEX) And (imDragSrce <> DRAGWORKAREA) And (imDragSrce <> DRAGHOLD) Then
                    ilDragOk = True
                End If
                If ((ilBox = MISSEDREASONINDEX) Or (ilBox = MISSEDAREAINDEX)) And (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    ilDragOk = True
                End If
                If (ilBox = CANCELREASONINDEX) And (imCancelReason >= LBound(tmMissedCode)) And (imCancelReason < UBound(tmMissedCode)) Then
                    ilDragOk = True
                End If
                If (Not ilDragOk) Or (smDragCntrType = "X") Then
                    imIgnoreChg = False
                    mClearDrag False
                    imSelectDelay = False
                Else
'                    If (imMissedReason < LBound(tmMissedCode)) Or (imMissedReason >= UBound(tmMissedCode)) Then
'                        mClearDrag True
'                        Exit Sub
'                    End If
                    mClearSpotInfo False
                    'If rbcTime.Value Then
                    If imDW = 0 Then
                        ilRet = mBeginTrans(True, False)   'btrBeginTrans(hmSdf, 1000)
                        If ilRet <> BTRV_ERR_NONE Then
                            'Screen.MousePointer = vbDefault
                            'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                            'mClearDrag False
                            Exit Sub
                        End If
                        If ilBox = WORKAREAINDEX Then
                            If vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt) - 2 Then
                                Do While vbcHold.Value < vbcHold.Max
                                    imIgnoreChg = True
                                    vbcHold.Value = vbcHold.Value + 1
                                    imIgnoreChg = False
                                Loop
                            End If
                            ilRow = UBound(tmWAMdExt) - vbcHold.Value + 1
                            pbcHold_DragOver Source, 0, ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY), vbEnter
                            pbcHold_DragDrop Source, 0, 0
                            'Show one open row
                            If vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt) - 2 Then
                                Do While vbcHold.Value < vbcHold.Max
                                    vbcHold.Value = vbcHold.Value + 1
                                Loop
                            End If
                            If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt) - 2 Then
                                Do While vbcAdWorkArea.Value < vbcAdWorkArea.Max
                                    vbcAdWorkArea.Value = vbcAdWorkArea.Value + 1
                                Loop
                            End If
                        Else
                            If imDragSrce = DRAGLOG1 Then
                                If tmVef.sType <> "G" Then
                                    ilGameNo = 0
                                Else
                                    ilGameNo = mGetL1GameNo()
                                    If ilGameNo = 0 Then
                                        mClearDrag False
                                        mForceRepaintWeekly False
                                        Exit Sub
                                    End If
                                End If
                                If Not mBlockDay(65536 * imVehCode + gDateValue(smLog1Date), 0) Then
                                    mAbortTrans True, True, False
                                    mForceRepaintWeekly False
                                    Exit Sub
                                End If
                                llSdfRecPosSrce = tmL1Evt(imDragIndexSrce).lTime
                                mGetAvailIndex tmL1Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                If ilBox = CANCELREASONINDEX Then
                                    ilRet = mUnschSpot("C", 1, smLog1Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmSdfMdExt(), tmSmfA)
                                Else
                                    ilRet = mUnschSpot("M", 1, smLog1Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmSdfMdExt(), tmSmfA)
                                End If
                                If Not ilRet Then
                                    mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                    'mClearDrag False
                                    'mForceRepaintWeekly True
                                    Exit Sub
                                End If
                                ilRet = btrEndTrans(hmSdf)
                                mUnblockDay
                                tmSmfA.lChfCode = 0
                                mVbcHoldMinMax False
                                mVbcL1MinMax False
                                mVbcL2MinMax False
                                mMissedSummary imDW
                                mVbcMissedMinMax False
                                mVbcAvailMinMax False
                                mVbcContractMinMax False
                            ElseIf imDragSrce = DRAGLOG2 Then
                                If imLog2Type = 4 Then
                                    If tmVef.sType <> "G" Then
                                        ilGameNo = 0
                                    Else
                                        ilGameNo = mGetL2GameNo()
                                        If ilGameNo = 0 Then
                                            mClearDrag False
                                            mForceRepaintWeekly False
                                            Exit Sub
                                        End If
                                    End If
                                    If Not mBlockDay(65536 * imVehCode + gDateValue(smLog2Date), 0) Then
                                        mAbortTrans True, True, False
                                        mForceRepaintWeekly False
                                        Exit Sub
                                    End If
                                    llSdfRecPosSrce = tmL2Evt(imDragIndexSrce).lTime
                                    mGetAvailIndex tmL2Evt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                    If ilBox = CANCELREASONINDEX Then
                                        ilRet = mUnschSpot("C", -1, smLog2Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmSdfMdExt(), tmSmfA)
                                    Else
                                        ilRet = mUnschSpot("M", -1, smLog2Date, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmSdfMdExt(), tmSmfA)
                                    End If
                                    If Not ilRet Then
                                        mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                        'mClearDrag False
                                        'mForceRepaintWeekly True
                                        Exit Sub
                                    End If
                                    ilRet = btrEndTrans(hmSdf)
                                    mUnblockDay
                                    tmSmfA.lChfCode = 0
                                    mVbcHoldMinMax False
                                    mVbcL1MinMax False
                                    mVbcL2MinMax False
                                    mVbcMissedMinMax False
                                    mVbcAvailMinMax False
                                    mVbcContractMinMax False
                                ElseIf ((imLog2Type = 0) And (imLog2Show = 0)) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Then
                                    If ilBox = CANCELREASONINDEX Then
                                        mChgCancelReason tmSdfMdExt(imDragIndexSrce).lRecPos
                                    Else
                                        mChgMissedReason tmSdfMdExt(imDragIndexSrce).lRecPos
                                    End If
                                    ilRet = btrEndTrans(hmSdf)
                                    If ilBox = CANCELREASONINDEX Then
                                        If imLog2Type <> 10 Then
                                            mBuildMissedView 0, True
                                        End If
                                    Else
                                        If imLog2Type = 10 Then
                                            mBuildMissedView 0, True
                                        End If
                                    End If
                                Else
                                    ilRet = btrEndTrans(hmSdf)
                                End If
                            ElseIf imDragSrce = DRAGHOLD Then
                                'mChgMissedReason tmWAMdExt(imDragIndexSrce).lRecPos
                                If ilBox = CANCELREASONINDEX Then
                                    mChgCancelReason tmWAMdExt(imDragIndexSrce).lRecPos
                                Else
                                    mChgMissedReason tmWAMdExt(imDragIndexSrce).lRecPos
                                End If
                                ilRet = btrEndTrans(hmSdf)
                                'Move to missed
                                ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(imDragIndexSrce).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                If (((imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2)) And (tmSdf.iVefCode = imVehCode) And (ilBox = MISSEDREASONINDEX)) Or ((imLog2Type = 10) And (tmSdf.iVefCode = imVehCode) And (ilBox = MISSEDREASONINDEX)) Then
                                    tmSdfMdExt(UBound(tmSdfMdExt)) = tmWAMdExt(imDragIndexSrce)
                                    'ReDim Preserve tmSdfMdExt(1 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                    ReDim Preserve tmSdfMdExt(0 To UBound(tmSdfMdExt) + 1) As SDFMDEXT
                                    'tmVefSrchKey.iCode = tmSdf.iVefCode
                                    'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                    'ilPos = InStr(tmSdfMdExt(UBound(tmSdfMdExt) - 1).sShow, Left$(Trim$(tmOrigVef.sName), 10))
                                    'If ilPos > 0 Then
                                    '    tmSdfMdExt(UBound(tmSdfMdExt) - 1).sShow = Left$(tmSdfMdExt(UBound(tmSdfMdExt) - 1).sShow, ilPos - 1)
                                    'End If
                                End If
                                'Remove from work
                                For ilLoop = imDragIndexSrce To UBound(tmWAMdExt) - 2 Step 1
                                    tmWAMdExt(ilLoop) = tmWAMdExt(ilLoop + 1)
                                Next ilLoop
                                If UBound(tmWAMdExt) > 1 Then
                                    'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                                    ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                                End If
                                mVbcHoldMinMax False
                                pbcHold.Cls
                                pbcHold_Paint
                                If (imLog2Type = 3) Or (imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 10) Then
                                    mVbcL2MinMax False
                                    mMissedSummary imDW
                                    mVbcMissedMinMax False
                                End If
                            Else
                                ilRet = btrEndTrans(hmSdf)
                            End If
                        End If
                    Else
                        If ilBox = WORKAREAINDEX Then
                            'imDragRowNoDest = UBound(tmWAMdExt)
                            'imDragDest = DRAGWORKAREA
                            'Force to blank row
                            If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt) - 2 Then
                                Do While vbcAdWorkArea.Value < vbcAdWorkArea.Max
                                    imIgnoreChg = True
                                    vbcAdWorkArea.Value = vbcHold.Value + 1
                                    imIgnoreChg = False
                                Loop
                            End If
                            ilRow = UBound(tmWAMdExt) - vbcAdWorkArea.Value + 1
                            pbcAdWorkArea_DragOver Source, 0, ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY), vbEnter
                            pbcAdWorkArea_DragDrop Source, 0, 0
                            'Show one open row
                            If vbcHold.Value + vbcHold.LargeChange >= UBound(tmWAMdExt) - 2 Then
                                Do While vbcHold.Value < vbcHold.Max
                                    vbcHold.Value = vbcHold.Value + 1
                                Loop
                            End If
                            If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange >= UBound(tmWAMdExt) - 2 Then
                                Do While vbcAdWorkArea.Value < vbcAdWorkArea.Max
                                    vbcAdWorkArea.Value = vbcAdWorkArea.Value + 1
                                Loop
                            End If
                        Else
                            ilRet = mBeginTrans(True, False)   'btrBeginTrans(hmSdf, 1000)
                            If ilRet <> BTRV_ERR_NONE Then
                                'Screen.MousePointer = vbDefault
                                'ilRet = MsgBox("Task could not be completed", vbOkOnly + vbExclamation, "Spot")
                                'mClearDrag False
                                Exit Sub
                            End If
                            If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 1) And ((imDragSrce = DRAGCONTRACT) Or (imDragSrce = DRAGWORKAREA)) Then
                                ReDim tmAdMdSdfMdExt(LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt)) As SDFMDEXT
                                For ilLoop = LBound(tmSvAdMdSdfMdExt) To UBound(tmSvAdMdSdfMdExt) Step 1
                                    tmAdMdSdfMdExt(ilLoop) = tmSvAdMdSdfMdExt(ilLoop)
                                Next ilLoop
                            End If
                            If imDragSrce = DRAGCONTRACT Then
                                'slDate = edcDate.Text   'plcDate.Caption
                                'llDate = gDateValue(slDate)
                                'slDate = Format$(llDate + imDragColNoSrce - 1, "m/d/yy")
                                'If Not mBlockDay(65536 * imVehCode + gDateValue(slDate), 0) Then
                                If ilBox = CANCELREASONINDEX Then
                                    slSchStatus = "C"
                                Else
                                    slSchStatus = "M"
                                End If
                                mGetEdcDate imDragColNoSrce - 1
                                slDate = smEdcDate
                                ilGameNo = imEdcGameNo
                                If Not mBlockDay(65536 * imVehCode + lmLockDate, 0) Then
                                    mAbortTrans True, True, False
                                    mForceRepaintWeekly False
                                    Exit Sub
                                End If
                                Select Case imDragColNoSrce
                                    Case 1  'Monday
                                        llSdfRecPosSrce = tmMoEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmMoEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                    Case 2  'Tuesday
                                        llSdfRecPosSrce = tmTuEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmTuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                    Case 3  'Wednesday
                                        llSdfRecPosSrce = tmWeEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmWeEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                    Case 4  'Thursday
                                        llSdfRecPosSrce = tmThEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmThEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                    Case 5  'Friday
                                        llSdfRecPosSrce = tmFrEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmFrEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                    Case 6  'Saturday
                                        llSdfRecPosSrce = tmSaEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmSaEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                    Case 7  'Sunday
                                        llSdfRecPosSrce = tmSuEvt(imDragIndexSrce).lTime
                                        mGetAvailIndex tmSuEvt(), imDragIndexSrce, llSsfAvailRecPosSrce, ilSsfAvailIndexSrce, ilPositionSrce, slTimeSrce
                                        ilRet = mUnschSpot(slSchStatus, 0, slDate, ilGameNo, llSsfAvailRecPosSrce, llSdfRecPosSrce, tmAdMdSdfMdExt(), tmSmfA)
                                        If Not ilRet Then
                                            mAbortTrans True, True, False  'ilRet = btrAbortTrans(hmSdf)
                                            'mClearDrag False
                                            'mForceRepaintWeekly True
                                            mMissedSummary imDW
                                            Exit Sub
                                        End If
                                        tmSmfA.lChfCode = 0
                                End Select
                                ilRet = btrEndTrans(hmSdf)
                                mUnblockDay
                                mVbcHoldMinMax False
                                mVbcL1MinMax False
                                mVbcL2MinMax False
                                mMissedSummary imDW
                                mVbcMissedMinMax False
                                mVbcAvailMinMax False
                                mVbcContractMinMax False
                                'Show one open row
                                If ((imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3)) Then
                                    If vbcLog2.Value + vbcLog2.LargeChange >= UBound(tmSdfMdExt) - 2 Then
                                        Do While vbcLog2.Value < vbcLog2.Max
                                            vbcLog2.Value = vbcLog2.Value + 1
                                        Loop
                                    End If
                                End If
                                If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3)) Then
                                    If vbcMissed.Value + vbcMissed.LargeChange >= UBound(tmAdMdSdfMdExt) - 2 Then
                                        Do While vbcMissed.Value < vbcMissed.Max
                                            vbcMissed.Value = vbcMissed.Value + 1
                                        Loop
                                    End If
                                End If
                            ElseIf imDragSrce = DRAGADMD Then
                                If (((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 0)) Or (imAdMdType = 3) Or (imAdMdType = 9) Then
                                    'If ilBox = CANCELREASONINDEX Then
                                    '    mChgCancelReason tmAdMdSdfMdExt(imDragIndexSrce).lRecPos
                                    'Else
                                    '    mChgMissedReason tmAdMdSdfMdExt(imDragIndexSrce).lRecPos
                                    'End If
                                    'For ilMove = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                                    For ilMove = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                                        If tmAdMdSdfMdExt(ilMove).iSelected = 1 Then
                                            If ilBox = CANCELREASONINDEX Then
                                                mChgCancelReason tmAdMdSdfMdExt(ilMove).lRecPos
                                            Else
                                                mChgMissedReason tmAdMdSdfMdExt(ilMove).lRecPos
                                            End If
                                        End If
                                    Next ilMove
                                End If
                                ilRet = btrEndTrans(hmSdf)
                                If ilBox = CANCELREASONINDEX Then
                                    If imAdMdType <> 9 Then
                                        edcMissedType_Change
                                    End If
                                Else
                                    If imAdMdType = 9 Then
                                        edcMissedType_Change
                                    End If
                                End If
                            ElseIf imDragSrce = DRAGWORKAREA Then
                                'If ilBox = CANCELREASONINDEX Then
                                '    mChgCancelReason tmWAMdExt(imDragIndexSrce).lRecPos
                                'Else
                                '    mChgMissedReason tmWAMdExt(imDragIndexSrce).lRecPos
                                'End If
                                'ilRet = btrEndTrans(hmSdf)
                                ''Move to missed
                                'ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(imDragIndexSrce).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                'If (((imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (tmSdf.iVefCode = imVehCode) And (ilBox = MISSEDREASONINDEX)) Or ((imAdMdType = 9) And (tmSdf.iVefCode = imVehCode) And (ilBox = CANCELREASONINDEX)) Then
                                '    tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmWAMdExt(imDragIndexSrce)
                                '    ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                                '    'tmVefSrchKey.iCode = tmSdf.iVefCode
                                '    'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                '    'ilPos = InStr(tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow, Left$(Trim$(tmOrigVef.sName), 10))
                                '    'If ilPos > 0 Then
                                '    '    tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow = Left$(tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt) - 1).sShow, ilPos - 1)
                                '    'End If
                                'End If
                                ''Remove from work
                                'For ilLoop = imDragIndexSrce To UBound(tmWAMdExt) - 2 Step 1
                                '    tmWAMdExt(ilLoop) = tmWAMdExt(ilLoop + 1)
                                'Next ilLoop
                                'If UBound(tmWAMdExt) > 1 Then
                                '    ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                                'End If
                                'For ilMove = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
                                For ilMove = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
                                    If tmWAMdExt(ilMove).iSelected = 1 Then
                                        If ilBox = CANCELREASONINDEX Then
                                            mChgCancelReason tmWAMdExt(ilMove).lRecPos
                                        Else
                                            mChgMissedReason tmWAMdExt(ilMove).lRecPos
                                        End If
                                        'Move to missed
                                        'ilRet = btrGetDirect(hmSdf, tmSdf, imSdfRecLen, tmWAMdExt(imDragIndexSrce).lRecPos, INDEXKEY0, BTRV_LOCK_NONE)
                                        tmSdfSrchKey3.lCode = tmWAMdExt(ilMove).lSdfCode
                                        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                        If (((imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (tmSdf.iVefCode = imVehCode) And (ilBox = MISSEDREASONINDEX)) Or ((imAdMdType = 9) And (tmSdf.iVefCode = imVehCode) And (ilBox = CANCELREASONINDEX)) Then
                                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)) = tmWAMdExt(ilMove)
                                            tmAdMdSdfMdExt(UBound(tmAdMdSdfMdExt)).iSelected = 0
                                            'ReDim Preserve tmAdMdSdfMdExt(1 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                                            ReDim Preserve tmAdMdSdfMdExt(0 To UBound(tmAdMdSdfMdExt) + 1) As SDFMDEXT
                                        End If
                                    End If
                                Next ilMove
                                'Remove from work
                                'For ilMove = UBound(tmWAMdExt) - 1 To LBound(tmWAMdExt) Step -1
                                For ilMove = UBound(tmWAMdExt) - 1 To imLBSdfMdExt Step -1
                                    If tmWAMdExt(ilMove).iSelected = 1 Then
                                        tmSdfSrchKey3.lCode = tmWAMdExt(ilMove).lSdfCode
                                        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                        For ilLoop = ilMove To UBound(tmWAMdExt) - 2 Step 1
                                            tmWAMdExt(ilLoop) = tmWAMdExt(ilLoop + 1)
                                        Next ilLoop
                                        If UBound(tmWAMdExt) > 1 Then
                                            'ReDim Preserve tmWAMdExt(1 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                                            ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) - 1) As SDFMDEXT
                                        End If
                                        If ilBox = CANCELREASONINDEX Then
                                            'moved to mChgCancelReason
                                            'ilRet = gSxfDelete(hmSxf, tmSdf, True, True)
                                        Else
                                            ilRet = gSxfDelete(hmSxf, tmSdf, False, True)
                                        End If
                                        ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
                                    End If
                                Next ilMove
                                ilRet = btrEndTrans(hmSdf)
                                imWASelectionCount = 0
                                imWALastSelection = -1
                                mVbcHoldMinMax False
                                pbcAdWorkArea.Cls
                                pbcAdWorkArea_Paint
                                If (imAdMdType = 3) Or (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Then
                                    mVbcL2MinMax False
                                    mMissedSummary imDW
                                    mVbcMissedMinMax False
                                End If
                                'Show one open row
                                If ((imLog2Type = 0) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10)) Then
                                    If vbcLog2.Value + vbcLog2.LargeChange >= UBound(tmSdfMdExt) - 2 Then
                                        Do While vbcLog2.Value < vbcLog2.Max
                                            vbcLog2.Value = vbcLog2.Value + 1
                                        Loop
                                    End If
                                End If
                                If ((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Or (imAdMdType = 3) Or (imAdMdType = 9)) Then
                                    If vbcMissed.Value + vbcMissed.LargeChange >= UBound(tmAdMdSdfMdExt) - 2 Then
                                        Do While vbcMissed.Value < vbcMissed.Max
                                            vbcMissed.Value = vbcMissed.Value + 1
                                        Loop
                                    End If
                                End If
                            Else
                                ilRet = btrEndTrans(hmSdf)
                            End If
                        End If
                    End If
                    mClearDrag False
                End If
                mUnblockDay
                Exit Sub
            End If
        End If
    Next ilBox
End Sub

Private Sub pbcSelect_DragOver(Index As Integer, Source As control, X As Single, Y As Single, State As Integer)
    Dim ilBox As Integer
    Dim ilDragOk As Integer

    If State = vbLeave Then
        imDragScroll = -1
        tmcScroll.Enabled = False
        tmcScroll.Interval = 1000
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
    End If
    If (imAdMdSelectionCount > 1) Or (imWASelectionCount > 1) Then
        If (imDragSrce = DRAGADMD) Or (imDragSrce = DRAGWORKAREA) Then
            If imDragSrce = DRAGADMD Then
                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
            ElseIf imDragSrce = DRAGWORKAREA Then
                lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
            End If
            Exit Sub
        End If
    End If
    For ilBox = imLBCtrls To UBound(tmCtrls) Step 1
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                ilDragOk = False
                If (ilBox = WORKAREAINDEX) And (imDragSrce <> DRAGWORKAREA) And (imDragSrce <> DRAGHOLD) Then
                    ilDragOk = True
                End If
                'If ((ilBox = MISSEDREASONINDEX) Or (ilBox = MISSEDAREAINDEX)) And (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                If (ilBox = MISSEDREASONINDEX) And (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    ilDragOk = True
                End If
                If (ilBox = CANCELREASONINDEX) And (imCancelReason >= LBound(tmMissedCode)) And (imCancelReason < UBound(tmMissedCode)) Then
                    ilDragOk = True
                End If
                If (Not ilDragOk) Or (smDragCntrType = "X") Then
                    imDragScroll = -1
                    tmcScroll.Enabled = False
                    tmcScroll.Interval = 1000
                    If imDragSrce = DRAGLOG1 Then
                        lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    ElseIf imDragSrce = DRAGLOG2 Then
                        lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    ElseIf imDragSrce = DRAGHOLD Then
                        lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                    If imDragSrce = DRAGCONTRACT Then
                        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    ElseIf imDragSrce = DRAGADMD Then
                        lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    ElseIf imDragSrce = DRAGWORKAREA Then
                        lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                    End If
                Else
'If we want to scroll- add this code back in.  Set to vbEnter to get scroll events started
'                    ilState = State
'                    If ilState = vbOver Then
'                        ilState = vbEnter
'                    End If
'                    mDragOver DRAGMDREASON, ilState, 0
                    If (State = vbOver) Or (State = vbEnter) Then
                        If imDragSrce = DRAGLOG1 Then
                            lacL1Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                        ElseIf imDragSrce = DRAGLOG2 Then
                            If (imLog2Type = 4) Or (ilBox = WORKAREAINDEX) Then
                                lacL2Frame.DragIcon = IconTraf!imcIconMove.DragIcon
                            ElseIf ((imLog2Type = 0) And (imLog2Show = 0)) Or (imLog2Type = 1) Or (imLog2Type = 2) Or (imLog2Type = 3) Or (imLog2Type = 10) Then
                                lacL2Frame.DragIcon = IconTraf!imcIconChg.DragIcon
                            End If
                        ElseIf imDragSrce = DRAGHOLD Then
                            lacWAFrame(0).DragIcon = IconTraf!imcIconChg.DragIcon
                        End If
                        If imDragSrce = DRAGCONTRACT Then
                            lacAFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                        ElseIf imDragSrce = DRAGADMD Then
                            If (ilBox = WORKAREAINDEX) Then
                                lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
                            Else
                                If (((imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2)) And (imADMdShow = 0)) Or (imAdMdType = 3) Or (imAdMdType = 9) Then
                                    lacAdMdFrame.DragIcon = IconTraf!imcIconChg.DragIcon
                                End If
                            End If
                        ElseIf imDragSrce = DRAGWORKAREA Then
                            lacWAFrame(1).DragIcon = IconTraf!imcIconChg.DragIcon
                        End If
                    End If
                End If
                Exit Sub
            End If
        End If
    Next ilBox
End Sub

Private Sub pbcSelect_GotFocus(Index As Integer)
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If imFirstFocus Then
        imFirstFocus = False
        cbcVehicle.SetFocus
        Exit Sub
    End If
    If imDW = 0 Then
        lbcLog2Type.Visible = False
        lbcAdvt.Visible = False
    Else
        lbcSort.Visible = False
        lbcLog2Type.Visible = False
        lbcAdvt.Visible = False
        If imAdMdSelectionCount > 0 Then
            mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
        End If
        If imWASelectionCount > 0 Then
            mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
        End If
    End If
End Sub

Private Sub pbcSelect_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilBox As Integer

    For ilBox = imLBCtrls To UBound(tmCtrls) Step 1
        If (X >= tmCtrls(ilBox).fBoxX) And (X <= tmCtrls(ilBox).fBoxX + tmCtrls(ilBox).fBoxW) Then
            If (Y >= tmCtrls(ilBox).fBoxY) And (Y <= tmCtrls(ilBox).fBoxY + tmCtrls(ilBox).fBoxH) Then
                mSetShow imBoxNo
                imBoxNo = -1
'                If ilBox = VIEWINDEX Then
'                    If (Trim$(tgUrf(0).sName) <> sgCPName) Then
'                        Exit Sub
'                    End If
'                End If
'                If imDW = 0 Then
'                    If (ilBox = MISSEDAREAINDEX) Or (ilBox = WORKAREAINDEX) Then
'                        Exit Sub
'                    End If
'                End If
                '4/16/11
                'If (imDW <> 0) And (tmVef.sType = "G") Then
                '    '4/24/06: Allow missed area
                '    'If (ilBox = MISSEDAREAINDEX) Then
                '    '    Exit Sub
                '    'End If
                '    'Disallow daily view as it has not been coded for Games
                '    If (ilBox = VIEWINDEX) Then
                '        Exit Sub
                '    End If
                'End If
                imEnableSource = 0
                imBoxNo = ilBox
                mEnableBox imBoxNo
                Exit Sub
            End If
        End If
    Next ilBox

End Sub

Private Sub pbcSelect_Paint(Index As Integer)
    Dim ilBox As Integer
    Dim slStr As String

    pbcSelect(Index).Cls
    DoEvents
'    If imDW = 1 Then
'        llColor = pbcSelect(Index).ForeColor
'        slFontName = pbcSelect(Index).FontName
'        flFontSize = pbcSelect(Index).FontSize
'        pbcSelect(Index).ForeColor = BLUE
'        pbcSelect(Index).FontBold = False
'        pbcSelect(Index).FontSize = 7
'        pbcSelect(Index).FontName = "Arial"
'        pbcSelect(Index).FontSize = 7  'Font size done twice as indicated in FontSize property area in manual
'        pbcSelect(Index).CurrentX = tmCtrls(MISSEDAREAINDEX).fBoxX + fgBoxInsetX
'        pbcSelect(Index).CurrentY = 15
'        pbcSelect(Index).Print "Missed Area"
'        pbcSelect(Index).FontSize = flFontSize
'        pbcSelect(Index).FontName = slFontName
'        pbcSelect(Index).FontSize = flFontSize
'        pbcSelect(Index).ForeColor = llColor
'        pbcSelect(Index).FontBold = True
'    End If
    For ilBox = imLBCtrls To UBound(tmCtrls) Step 1
        If imDW = 0 Then
            'If (ilBox <> SHOWPRICEINDEX) Then
                pbcSelect(Index).CurrentX = tmCtrls(ilBox).fBoxX + fgBoxInsetX - 30
                pbcSelect(Index).CurrentY = tmCtrls(ilBox).fBoxY + fgBoxInsetY
                pbcSelect(Index).Print tmCtrls(ilBox).sShow
            'End If
        Else
            pbcSelect(Index).CurrentX = tmCtrls(ilBox).fBoxX + fgBoxInsetX - 30
            pbcSelect(Index).CurrentY = tmCtrls(ilBox).fBoxY + fgBoxInsetY
            slStr = tmCtrls(ilBox).sShow
            If ilBox = MISSEDAREAINDEX Then
                If tmVef.sType = "G" Then
                    If StrComp(slStr, "Current Week", vbTextCompare) = 0 Then
                        slStr = "Current Events"
                    End If
                End If
            End If
            pbcSelect(Index).Print slStr
        End If
    Next ilBox

End Sub

Private Sub pbcSpotInfo_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim slStr As String
    Dim ilLoop As Integer
    Dim ilRet As Integer
    Dim slNameCode As String
    Dim slCode As String

    'Close Box
    If (X >= 3915) And (X <= 4515) And (Y >= 30) And (Y <= 270) Then
        pbcClose.SetFocus
        pbcSpotInfo(Index).Visible = False
        If Index = 0 Then
            pbcSpotInfo(1).Visible = False
            lbcPackageInfo(1).Visible = False
            lbcPackageInfo(0).Visible = False
            plcCalendar.Visible = False
            lbcGameList.Visible = False
            imNoSpotInfo = 0
        Else
            lbcPackageInfo(1).Visible = False
            If tmVef.sType <> "G" Then
                If plcCalendar.Left <> pbcSpotInfo(0).Left Then
                    plcCalendar.Visible = False
                End If
            Else
                If lbcGameList.Left <> pbcSpotInfo(0).Left Then
                    lbcGameList.Visible = False
                End If
            End If
            imNoSpotInfo = 1
        End If
        DoEvents
        mSetCommands
        If imDW = 0 Then
            pbcLog1.Cls 'pbcLog1_Paint
            pbcLog2.Cls
            pbcAvail.Cls 'pbcAvail_Paint
            pbcLog1_Paint 'pbcLog1_Paint
            pbcLog2_Paint
            pbcAvail_Paint 'pbcAvail_Paint
        Else
            pbcContract.Cls
            pbcMissed.Cls
            pbcAdWorkArea.Cls
            pbcContract_Paint
            pbcMissed_Paint
            pbcAdWorkArea_Paint
        End If
    End If
    'Contract Box
    If (X >= tmSpotInfoCtrls(1).fBoxX - 30) And (X <= tmSpotInfoCtrls(1).fBoxX + tmSpotInfoCtrls(1).fBoxW - 30) And (Y >= tmSpotInfoCtrls(1).fBoxY - 105) And (Y <= tmSpotInfoCtrls(1).fBoxY + tmSpotInfoCtrls(1).fBoxH - 15) Then
        If igJobShowing(CONTRACTSJOB) Then
            'If (Contract!cmcUpdate.Enabled = False) Then
            If igOKToCallCntr Then
                igTerminateAndUnload = True
                Unload Contract
                DoEvents
                Sleep 50
            Else
                ilRet = MsgBox("Unable to Change Contract until Current Altered Contract has been Saved", vbInformation + vbOKOnly, "Information")
                Exit Sub
            End If
        End If
        If (Not igJobShowing(CONTRACTSJOB)) Then
            If lmCntrNoSpotInfo(Index) > 0 Then
                If (tgSpf.sMktBase = "Y") Then
                    ReDim igCntrMktCode(0 To 0) As Integer
                    ilRet = gPopMnfPlusFieldsBox(Spots, lbcMkt, tmVehGp3Code(), smVehGp3CodeTag, "H3")
                    For ilLoop = 0 To lbcMkt.ListCount - 1 Step 1
                        slNameCode = tmVehGp3Code(ilLoop).sKey    'lbcVehCode.List(ilLoop)
                        ilRet = gParseItem(slNameCode, 2, "\", slCode)
                        igCntrMktCode(UBound(igCntrMktCode)) = Val(slCode)
                        ReDim Preserve igCntrMktCode(0 To UBound(igCntrMktCode) + 1) As Integer
                    Next ilLoop
                End If
                If (igWinStatus(CONTRACTSJOB) = 1) Then
                    igAlertCntrStatus = 7
                ElseIf (igWinStatus(CONTRACTSJOB) = 2) Then
                    igAlertCntrStatus = 6
                End If
                lgAlertCntrNo = lmCntrNoSpotInfo(Index)
                sgCntrScreen = "Orders"
                Contract.Show vbModeless  'This is required to activate form if previousely activated
            End If
        End If
    End If
    'Package Box
    If (X >= 30) And (X <= 930) And (Y >= 795) And (Y <= 1050) Then
        If Trim$(smSpotInfo(Index, 16)) = "" Then
            Exit Sub
        End If
        lbcPackageInfo(Index).Visible = Not lbcPackageInfo(Index).Visible
    End If
    If tmVef.sType <> "G" Then
        'Calendar Box
        If (X >= 30) And (X <= 1170) And (Y >= 540) And (Y <= 780) Then
            imL1OrL2 = 0
            If Index = 0 Then
                If plcCalendar.Left <> pbcSpotInfo(0).Left Then
                    plcCalendar.Visible = False
                    plcCalendar.Move pbcSpotInfo(0).Left, pbcSpotInfo(0).Top + pbcSpotInfo(0).height - 255
                End If
            Else
                If plcCalendar.Left <> pbcSpotInfo(1).Left Then
                    plcCalendar.Visible = False
                    plcCalendar.Move pbcSpotInfo(1).Left, pbcSpotInfo(1).Top + pbcSpotInfo(1).height - 255
                End If
            End If
            lacDate.Visible = False
            plcCalendar.Visible = Not plcCalendar.Visible
            If plcCalendar.Visible Then
                slStr = edcDate.Text    'plcDate.Caption
                slStr = gObtainNextMonday(slStr)
                gObtainMonthYear imCalType, slStr, imCalMonth, imCalYear
                pbcCalendar_Paint   'mBoxCalDate called within paint
            End If
        End If
    Else
        If (X >= 30) And (X <= 1170) And (Y >= 540) And (Y <= 780) Then
            imL1OrL2 = 0
            If Index = 0 Then
                If lbcGameList.Left <> pbcSpotInfo(0).Left Then
                    lbcGameList.Visible = False
                    lbcGameList.Move pbcSpotInfo(0).Left, pbcSpotInfo(0).Top + pbcSpotInfo(0).height - 255
                End If
                If lbcGameList.Visible = False Then
                    mLoadGameList lmClfCode0
                End If
            Else
                If lbcGameList.Left <> pbcSpotInfo(1).Left Then
                    lbcGameList.Visible = False
                    lbcGameList.Move pbcSpotInfo(1).Left, pbcSpotInfo(1).Top + pbcSpotInfo(1).height - 255
                End If
                If lbcGameList.Visible = False Then
                    mLoadGameList lmClfCode1
                End If
            End If
            lbcGameList.Visible = Not lbcGameList.Visible
        End If
    End If
End Sub

Private Sub pbcSpotInfo_MouseMove(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim ilLoop As Integer
    '2/6/16: Moving clearing of tool tip is eliminate flashing
    'pbcSpotInfo(Index).ToolTipText = ""
    For ilLoop = imLBSpotInfoCtrls To UBound(tmSpotInfoCtrls) Step 1
        If (X >= tmSpotInfoCtrls(ilLoop).fBoxX - 30) And (X <= tmSpotInfoCtrls(ilLoop).fBoxX + tmSpotInfoCtrls(ilLoop).fBoxW - 30) And (Y >= tmSpotInfoCtrls(ilLoop).fBoxY - 105) And (Y <= tmSpotInfoCtrls(ilLoop).fBoxY + tmSpotInfoCtrls(ilLoop).fBoxH - 105) Then
            pbcSpotInfo(Index).ToolTipText = Trim$(smSpotInfo(Index, ilLoop))
            'Exit For
            Exit Sub
        End If
    Next ilLoop
    pbcSpotInfo(Index).ToolTipText = ""
End Sub

Private Sub pbcSpotInfo_Paint(Index As Integer)
    Dim ilBox As Integer
    Dim slStr As String

    For ilBox = imLBSpotInfoCtrls To UBound(tmSpotInfoCtrls) Step 1
        slStr = smSpotInfo(Index, ilBox)
        If (ilBox = 10) And (InStr(1, Trim$(slStr), "#", 1) = 1) Then
        Else
            gSetShow pbcSpotInfo(Index), slStr, tmSpotInfoCtrls(ilBox)
            slStr = tmSpotInfoCtrls(ilBox).sShow
        End If
        If ilBox = 18 Then  'Price- right justify
            pbcSpotInfo(Index).CurrentX = gRightJustifyShowStr(pbcSpotInfo(Index), slStr, tmSpotInfoCtrls(ilBox))
            pbcSpotInfo(Index).CurrentY = tmSpotInfoCtrls(ilBox).fBoxY - 45 ' + fgBoxInsetY
            pbcSpotInfo(Index).Print smSpotInfo(Index, ilBox)
        Else
            pbcSpotInfo(Index).CurrentX = tmSpotInfoCtrls(ilBox).fBoxX + fgBoxInsetX
            If ilBox = 1 Then
                pbcSpotInfo(Index).ForeColor = vbBlue
                pbcSpotInfo(Index).CurrentY = tmSpotInfoCtrls(ilBox).fBoxY - 75 ' + fgBoxInsetY
            Else
                pbcSpotInfo(Index).CurrentY = tmSpotInfoCtrls(ilBox).fBoxY - 45 ' + fgBoxInsetY
            End If
            pbcSpotInfo(Index).Print slStr
        End If
        pbcSpotInfo(Index).ForeColor = vbBlack
    Next ilBox
End Sub

Private Sub pbcTab_GotFocus()
    Dim ilBoxNo As Integer
    Dim ilEnableRow As Integer
    Dim slStr As String
    
    If imEnableSource = 0 Then
        mSetShow imBoxNo
        imBoxNo = -1
    ElseIf imEnableSource = 1 Then
        If GetFocus() <> pbcTab.hWnd Then
            Exit Sub
        End If
        ilBoxNo = imEnableCol
        mSetShow imEnableCol
        imEnableSource = 1
        Select Case ilBoxNo 'Branch on box type (control)
            Case WEEKDATEINDEX
                slStr = edcNote.Text
                If slStr <> "" Then
                    If Not gValidDate(slStr) Then
                        Beep
                        imEnableCol = WEEKDATEINDEX
                        imEnableRow = grdNote.Row
                        grdNote.Col = WEEKDATEINDEX
                        mEnableBox imEnableCol
                        Exit Sub
                    End If
                Else
                    imEnableSource = 0
                    pbcClickFocus.SetFocus
                    Exit Sub
                End If
                imEnableCol = NOTEINDEX
                imEnableRow = grdNote.Row
                grdNote.Col = NOTEINDEX
                mEnableBox imEnableCol
            Case NOTEINDEX
                If grdNote.Row + 1 >= grdNote.Rows Then
                    grdNote.AddItem ""
                    grdNote.rowHeight(grdNote.Row + 1) = fgFlexGridRowH
                    grdNote.TextMatrix(grdNote.Row + 1, VNFCODEINDEX) = "0"
                End If
                grdNote.Row = grdNote.Row + 1
                If (Not grdNote.RowIsVisible(grdNote.Row)) Or (grdNote.Row - (grdNote.TopRow - grdNote.FixedRows) >= imInitNoRows) Then
                    grdNote.TopRow = grdNote.TopRow + 1
                End If
                imEnableCol = WEEKDATEINDEX
                imEnableRow = grdNote.Row
                grdNote.Col = WEEKDATEINDEX
                mEnableBox imEnableCol
        End Select
    End If
End Sub

Private Sub pbcTimeLog_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub pbcTimeLog_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 1
End Sub
Private Sub pbcTimeLog_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcTimeLog_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub pbcToggleDates_DragDrop(Source As control, X As Single, Y As Single)
'    imIgnoreChg = False
'    mClearDrag False
'    imSelectDelay = False
End Sub
Private Sub pbcToggleDates_DragOver(Source As control, X As Single, Y As Single, State As Integer)
'    mDragOver DRAGCONTRACT, State, 1    'at bottom
End Sub
Private Sub pbcToggleDates_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcToggleDates_KeyPress(KeyAscii As Integer)
    If (KeyAscii = Asc("P")) Or (KeyAscii = Asc("p")) Then
        Screen.MousePointer = vbHourglass
        imToggleDate = 0 'Past
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
        Screen.MousePointer = vbDefault
    ElseIf (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
        Screen.MousePointer = vbHourglass
        imToggleDate = 1 'All Dates
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
        Screen.MousePointer = vbDefault
    End If
    If KeyAscii = Asc(" ") Then
        Screen.MousePointer = vbHourglass
        If imToggleDate = 0 Then
            imToggleDate = 1 'All
            pbcDailyRot.Cls
            pbcHourRot.Cls
            pbcAdWorkArea.Visible = False
            vbcAdWorkArea.Visible = False
            cmcClearWork(0).Visible = False
            cmcClearWork(1).Visible = False
            pbcDailyRot.Visible = True
            pbcDailyRotLabel.Visible = True
            pbcHourRot.Visible = True
            pbcHourRotLabel.Visible = True
            mCntrCounts
            Screen.MousePointer = vbHourglass
            pbcDailyRot_Paint
            pbcHourRot_Paint
        Else
            imToggleDate = 0 'Past
            pbcDailyRot.Cls
            pbcHourRot.Cls
            pbcAdWorkArea.Visible = False
            vbcAdWorkArea.Visible = False
            cmcClearWork(0).Visible = False
            cmcClearWork(1).Visible = False
            pbcDailyRot.Visible = True
            pbcDailyRotLabel.Visible = True
            pbcHourRot.Visible = True
            pbcHourRotLabel.Visible = True
            mCntrCounts
            Screen.MousePointer = vbHourglass
            pbcDailyRot_Paint
            pbcHourRot_Paint
        End If
        Screen.MousePointer = vbDefault
        pbcToggleDates_Paint
    End If
End Sub
Private Sub pbcToggleDates_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    'mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    If imToggleDate = 0 Then
        imToggleDate = 1 'All
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
    Else
        imToggleDate = 0 'Past
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
    End If
    Screen.MousePointer = vbDefault
    pbcToggleDates_Paint
End Sub
Private Sub pbcToggleDates_Paint()
    pbcToggleDates.Cls
    pbcToggleDates.CurrentX = fgBoxInsetX \ 2
    pbcToggleDates.CurrentY = 0 'fgBoxInsetY
    If imToggleDate = 1 Then
        pbcToggleDates.Print "All Days"
    Else
        pbcToggleDates.Print "Past Days"  '"Spot Info"
    End If
End Sub
Private Sub pbcToggleRot_DragDrop(Source As control, X As Single, Y As Single)
'    imIgnoreChg = False
'    mClearDrag False
'    imSelectDelay = False
End Sub
Private Sub pbcToggleRot_DragOver(Source As control, X As Single, Y As Single, State As Integer)
'    mDragOver DRAGCONTRACT, State, 1    'at bottom
End Sub
Private Sub pbcToggleRot_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub pbcToggleRot_KeyPress(KeyAscii As Integer)
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If (KeyAscii = Asc("W")) Or (KeyAscii = Asc("w")) Then
        Screen.MousePointer = vbHourglass
        imToggleRot = 0 'Spot
        pbcAdWorkArea.Cls
        pbcDailyRot.Visible = False
        pbcDailyRotLabel.Visible = False
        pbcHourRot.Visible = False
        pbcHourRotLabel.Visible = False
        pbcAdWorkArea.Visible = True
        vbcAdWorkArea.Visible = True
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcAdWorkArea_Paint
        pbcToggleDates.Visible = False
        Screen.MousePointer = vbDefault
        pbcToggleRot.Cls
        pbcToggleRot_Paint
    ElseIf (KeyAscii = Asc("A")) Or (KeyAscii = Asc("a")) Then
        Screen.MousePointer = vbHourglass
        imToggleRot = 1 'Contract-All
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        pbcToggleDates.Visible = True
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
        Screen.MousePointer = vbDefault
        pbcToggleRot.Cls
        pbcToggleRot_Paint
    ElseIf (KeyAscii = Asc("C")) Or (KeyAscii = Asc("c")) Then
        Screen.MousePointer = vbHourglass
        imToggleRot = 2 'Contract-Schedule
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        pbcToggleDates.Visible = True
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
        Screen.MousePointer = vbDefault
        pbcToggleRot.Cls
        pbcToggleRot_Paint
    ElseIf (KeyAscii = Asc("L")) Or (KeyAscii = Asc("l")) Then
        Screen.MousePointer = vbHourglass
        imToggleRot = 3 'Line-Schedule
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        pbcToggleDates.Visible = True
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
        Screen.MousePointer = vbDefault
        pbcToggleRot.Cls
        pbcToggleRot_Paint
    End If
    If KeyAscii = Asc(" ") Then
        Screen.MousePointer = vbHourglass
        If imToggleRot = 1 Then
            imToggleRot = 2 'Contract-Schedule
            pbcDailyRot.Cls
            pbcHourRot.Cls
            pbcAdWorkArea.Visible = False
            vbcAdWorkArea.Visible = False
            cmcClearWork(0).Visible = False
            cmcClearWork(1).Visible = False
            pbcDailyRot.Visible = True
            pbcDailyRotLabel.Visible = True
            pbcHourRot.Visible = True
            pbcHourRotLabel.Visible = True
            mCntrCounts
            pbcToggleDates.Visible = True
            Screen.MousePointer = vbHourglass
            pbcDailyRot_Paint
            pbcHourRot_Paint
        ElseIf imToggleRot = 2 Then
            imToggleRot = 3 'Line-Schedule
            pbcDailyRot.Cls
            pbcHourRot.Cls
            pbcAdWorkArea.Visible = False
            vbcAdWorkArea.Visible = False
            cmcClearWork(0).Visible = False
            cmcClearWork(1).Visible = False
            pbcDailyRot.Visible = True
            pbcDailyRotLabel.Visible = True
            pbcHourRot.Visible = True
            pbcHourRotLabel.Visible = True
            mCntrCounts
            pbcToggleDates.Visible = True
            Screen.MousePointer = vbHourglass
            pbcDailyRot_Paint
            pbcHourRot_Paint
        ElseIf imToggleRot = 3 Then
            imToggleRot = 0 'Spot
            pbcAdWorkArea.Cls
            pbcDailyRot.Visible = False
            pbcDailyRotLabel.Visible = False
            pbcHourRot.Visible = False
            pbcHourRotLabel.Visible = False
            pbcToggleDates.Visible = False
            pbcAdWorkArea.Visible = True
            vbcAdWorkArea.Visible = True
            cmcClearWork(0).Visible = False
            cmcClearWork(1).Visible = False
            pbcAdWorkArea_Paint
        Else
            imToggleRot = 1 'Contract-All
            pbcDailyRot.Cls
            pbcHourRot.Cls
            pbcAdWorkArea.Visible = False
            vbcAdWorkArea.Visible = False
            cmcClearWork(0).Visible = False
            cmcClearWork(1).Visible = False
            pbcDailyRot.Visible = True
            pbcDailyRotLabel.Visible = True
            pbcHourRot.Visible = True
            pbcHourRotLabel.Visible = True
            mCntrCounts
            pbcToggleDates.Visible = True
            Screen.MousePointer = vbHourglass
            pbcDailyRot_Paint
            pbcHourRot_Paint
        End If
        Screen.MousePointer = vbDefault
        pbcToggleRot.Cls
        pbcToggleRot_Paint
    End If
End Sub
Private Sub pbcToggleRot_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    'mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    If imToggleRot = 1 Then
        imToggleRot = 2 'Contract-Schedule
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        pbcToggleDates.Visible = True
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
    ElseIf imToggleRot = 2 Then
        imToggleRot = 3 'Line-Schedule
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        pbcToggleDates.Visible = True
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
    ElseIf imToggleRot = 3 Then
        imToggleRot = 0 'Spot
        pbcAdWorkArea.Cls
        pbcDailyRot.Visible = False
        pbcDailyRotLabel.Visible = False
        pbcHourRot.Visible = False
        pbcHourRotLabel.Visible = False
        pbcToggleDates.Visible = False
        pbcAdWorkArea.Visible = True
        vbcAdWorkArea.Visible = True
        cmcClearWork(0).Visible = True
        cmcClearWork(1).Visible = True
        pbcAdWorkArea_Paint
    Else
        imToggleRot = 1 'Contract-All
        pbcDailyRot.Cls
        pbcHourRot.Cls
        pbcAdWorkArea.Visible = False
        vbcAdWorkArea.Visible = False
        cmcClearWork(0).Visible = False
        cmcClearWork(1).Visible = False
        pbcDailyRot.Visible = True
        pbcDailyRotLabel.Visible = True
        pbcHourRot.Visible = True
        pbcHourRotLabel.Visible = True
        mCntrCounts
        pbcToggleDates.Visible = True
        Screen.MousePointer = vbHourglass
        pbcDailyRot_Paint
        pbcHourRot_Paint
    End If
    Screen.MousePointer = vbDefault
    pbcToggleRot.Cls
    pbcToggleRot_Paint
End Sub
Private Sub pbcToggleRot_Paint()
    pbcToggleRot.CurrentX = fgBoxInsetX \ 2
    pbcToggleRot.CurrentY = 0 'fgBoxInsetY
    If imToggleRot = 1 Then
        pbcToggleRot.Print "CntrAll-Graph"
    ElseIf imToggleRot = 2 Then
        pbcToggleRot.Print "CntrSchd-Graph"
    ElseIf imToggleRot = 3 Then
        pbcToggleRot.Print "LineSchd-Graph"
    Else
        pbcToggleRot.Print "Work area"  '"Spot Info"
    End If
End Sub


Private Sub plcAdvertiser_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub plcAdvertiser_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub plcAdvertiser_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub plcAdvtTm_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub plcAdvtTm_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGCONTRACT, State, 0
End Sub
Private Sub plcAdvtTm_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub plcConflictInfo_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub plcConflictInfo_Paint()
    plcConflictInfo.Cls
    plcConflictInfo.CurrentX = 0
    plcConflictInfo.CurrentY = 0
    plcConflictInfo.Print smInfoCaption
End Sub

Private Sub plcLog1Tm_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub plcLog1Tm_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    mDragOver DRAGLOG1, State, 0
End Sub
Private Sub plcLog1Tm_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub plcLog2Tm_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub plcLog2Tm_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub plcScreen_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub plcScreen_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub
Private Sub plcTime_Click()
    pbcClickFocus.SetFocus
End Sub
Private Sub plcTime_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub plcTime_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    plcConflictInfo.Visible = False
    mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
End Sub

Private Sub rbcMissedType_Click(Index As Integer)
    If rbcMissedType(Index).Value Then
        If imDW = 0 Then
            edcLog2Type_Change
        Else
            edcMissedType_Change
        End If
    End If
End Sub

Private Sub rbcMode_GotFocus(Index As Integer)
    lbcSort.Visible = False
End Sub

Private Sub tmcClick_Timer()
    Dim slSvDate As String
    Dim ilVef As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilVehCode As Integer
    Dim slStr As String
    Dim ilRet As Integer
    Dim ilRes As Integer
    Dim slDate As String

    tmcClick.Enabled = False
    If imSelectDelay Then
        tmcClick.Enabled = False
        imSelectDelay = False
        If imDelayType <> -1 Then
            plcCalendar.Visible = False
            lbcGameNo(0).Visible = False
            lbcGameNo(1).Visible = False
            lbcGameNo(2).Visible = False
            lbcGameNo(3).Visible = False
        End If
        DoEvents
        Select Case imDelayType
            Case 0
                If cbcVehicle.ListIndex >= 0 Then
                    slNameCode = tmUserVehicle(cbcVehicle.ListIndex).sKey    'Traffic!lbcUserVehicle.List(imVehSelectedIndex)
                    ilRet = gParseItem(slNameCode, 2, "\", slCode)
                    ilVehCode = Val(slCode)
                    If (imVehCode > 0) And (ilVehCode = imVehCode) Then
                        Exit Sub
                    End If
                    'If UBound(tmWAMdExt) - 1 >= LBound(tmWAMdExt) Then
                    If UBound(tmWAMdExt) - 1 >= imLBSdfMdExt Then
                        ilVef = gBinarySearchVef(ilVehCode)
                        If ilVef <> -1 Then
                            If tgMVef(ilVef).sType = "G" Then
                                'ilRes = MsgBox("Spots remain in the Work Area.  Not allowed to select Sports vehicle", vbOkOnly + vbExclamation, "Spot")
                                'imChgMode = True
                                'cbcVehicle.ListIndex = imVehSelectedIndex
                                'imChgMode = False
                                'Exit Sub
                                sgGenMsg = "Spots left in Work Area: Save and Switch or Move to Missed and Switch or Cancel and stay on Current Vehicle"
                                sgCMCTitle(0) = "Save"
                                sgCMCTitle(1) = "Move"
                                sgCMCTitle(2) = "Cancel"
                                sgCMCTitle(3) = ""
                                igDefCMC = 0
                                igEditBox = 0
                                GenMsg.Show vbModal
                                DoEvents
                                If igAnsCMC = 2 Then
                                    imChgMode = True
                                    cbcVehicle.ListIndex = imVehSelectedIndex
                                    imChgMode = False
                                    Exit Sub
                                ElseIf igAnsCMC = 0 Then
                                    mAddWorkToSXF
                                ElseIf igAnsCMC = 1 Then
                                    mMoveWorkToMissed
                                End If
                                'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
                                ReDim tmWAMdExt(0 To 1) As SDFMDEXT
                                pbcAdWorkArea.Cls
                                pbcAdWorkArea_Paint
                                bmWorkPopulated = False
                            End If
                        End If
                    End If
                End If
                'Changed added to retain date when switch vehicle
                If imDW = 0 Then
                    slSvDate = edcLog1Dt.Text
                Else
                    slSvDate = edcDate.Text 'smAdMdMissedDate
                End If
                'End of Code added
                mCbcVehChange
                mPopNotes imVehCode
                'Changed added to retain date when switch vehicle
                If (slSvDate <> "") And (tgSpf.sSSRetainDate = "Y") Then
                    imIgnoreGotFocus = False
                    imChgMode = False
                    'ilValue = (gDateValue(slSvDate) - lmCEarliestDate) \ 7 + 1
                    'If ilValue > 0 Then
                    '    If ilValue = hbcContract.Value Then
                    '        hbcContract_Change
                    '    Else
                    '        hbcContract.Value = ilValue
                    '    End If
                    '    Exit Sub
                    'End If
                    DoEvents
                    If imDW = 0 Then
                        imL1OrL2 = 1
                        slStr = edcLog1Dt.Text
                        If gDateValue(slStr) <> gDateValue(slSvDate) Then
                            edcLog1Dt.Text = slSvDate
                        Else
                            edcLog1Dt_Change
                        End If
                    Else
                        imL1OrL2 = 4
                        slStr = edcDate.Text
                        If gDateValue(slStr) <> gDateValue(slSvDate) Then
                            edcDate.Text = slSvDate
                        Else
                            edcDate_Change
                        End If
                    End If
                End If
                tmcClick.Enabled = False
                If imDW = 0 Then
                    If Trim$(edcLog1Dt.Text) = "" Then
                        imL1OrL2 = 1
                        If tmVef.sType <> "G" Then
                            plcCalendar.Move pbcSelect(0).Left + edcLog1Dt.Left + 30, pbcSelect(0).Top + edcLog1Dt.Top + edcLog1Dt.height + 30
                            plcCalendar.Visible = True
                            lbcGameNo(1).Visible = False
                        Else
                            lbcGameNo(1).Move pbcSelect(1).Left + edcLog1Dt.Left, pbcSelect(1).Top + edcLog1Dt.Top + edcLog1Dt.height + 15
                            plcCalendar.Visible = False
                            lbcGameNo(1).Visible = True
                        End If
                    End If
                Else
                    If Trim$(edcDate.Text) = "" Then
                        imL1OrL2 = 4
                        If tmVef.sType <> "G" Then
                            plcCalendar.Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
                            plcCalendar.Visible = True
                            lbcGameNo(0).Visible = False
                        Else
                            lbcGameNo(0).Move pbcSelect(1).Left + edcDate.Left, pbcSelect(1).Top + edcDate.Top + edcDate.height + 15
                            plcCalendar.Visible = False
                            lbcGameNo(0).Visible = True
                        End If
                    End If
                End If
                If (slSvDate <> "") And (tgSpf.sSSRetainDate = "Y") Then
'                    tmcClick.Enabled = False
                    'imSelectDelay = True
                    'imDelayType = 1
                    'tmcClick.Interval = 10    'Getting two timer- set so that total time will be 3 second
                    'tmcClick.Enabled = True
                    tmcExtra.Interval = 100    'Getting two timer- set so that total time will be 3 second
                    tmcExtra.Enabled = True
                    Screen.MousePointer = vbDefault
                    Exit Sub    'Retain value of imDelayTime
                End If
                imClearHighlight = True
                'End of coded added
            Case 1  'Log1
                imAdvtBuild = True
                mHbcL1DateChange
                imAdvtBuild = False
            Case 2  'Log2
                mHbcL2DateChange
            Case 3  'Missed on weekly screen
                mHbcAdMdDateChange
            Case 4  'Weekly
                imClearHighlight = False
                Screen.MousePointer = vbHourglass  'Wait
                If tmVef.sType <> "G" Then
                    slDate = edcDate.Text
                    If gWeekDayStr(slDate) <> 0 Then
                        imIgnoreChg = True
                        slDate = gObtainPrevMonday(slDate)
                        edcDate.Text = slDate
                    End If
                End If
                mHbcAdvtDateChange
                Screen.MousePointer = vbHourglass  'Wait
                'If (Trim$(plcDate.Caption) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
                If (Trim$(edcDate.Text) <> "") And (imDW = 1) Then   '(rbcAdvt.Value) Then
                    imcPrt.Visible = True
                Else
                    imcPrt.Visible = False
                End If
                pbcContract_Paint
                imDelayType = -1
                tmcClick.Interval = 1000    '1 seconds
                tmcClick.Enabled = True
                imClearHighlight = True
                Exit Sub
            Case 5  'Avail Grid
                pbcAvail.Cls
                pbcAvail_Paint
        End Select
        imDelayType = -1
    End If
    imClearHighlight = True
    Screen.MousePointer = vbDefault
End Sub
Private Sub tmcDblClick_Timer()
    Dim ilSvClick As Integer
    tmcDblClick.Enabled = False
    If imDblClickMode > 0 Then
        'Handle second double click event
        If imDragDest = DRAGCONTRACT Then
            mClickContract
        End If
        If imDragDest = DRAGWORKAREA Then
            mClickWorkArea
        End If
        If imDragDest = DRAGADMD Then
            mClickMissed
        End If
        If imDragDest = DRAGLOG1 Then
            mClickLog1
        End If
        If imDragDest = DRAGLOG2 Then
            mClickLog2
        End If
        If imDragDest = DRAGHOLD Then
            mClickHold
        End If
        If imDragDest = DRAGAVAIL Then
            mClickAvail
        End If
    Else
        'Handle initial Mouse Up and initial double click event event
        ilSvClick = imDblClick
        If imDragSrce = DRAGCONTRACT Then
            mClickContract
        End If
        If imDragSrce = DRAGWORKAREA Then
            mClickWorkArea
        End If
        If imDragSrce = DRAGADMD Then
            mClickMissed
        End If
        If imDragSrce = DRAGLOG1 Then
            mClickLog1
        End If
        If imDragSrce = DRAGLOG2 Then
            mClickLog2
        End If
        If imDragSrce = DRAGHOLD Then
            mClickHold
        End If
        If (ilSvClick > 0) And ((pbcSpotInfo(0).Visible) Or (pbcSpotInfo(1).Visible)) Then
            lmCountChfCode = 0  'Contains contract code number
            imCountLineNo = 0
            lmCountFsfCode = 0
            pbcSpotInfo(1).Visible = False
            pbcSpotInfo(0).Visible = False
            lbcPackageInfo(1).Visible = False
            lbcPackageInfo(0).Visible = False
            plcCalendar.Visible = False
            lbcGameList.Visible = False
            imNoSpotInfo = 0
            pbcLog1_Paint   'Repaint as Inverse is lost
        End If
    End If
    Screen.MousePointer = vbDefault
End Sub
Private Sub tmcDrag_Timer()
    Dim ilCompRow As Integer
    Dim ilMaxRow As Integer
    Dim ilRow As Integer
    Dim ilIndex As Integer
    Dim ilCol As Integer
    Dim ilAvailIndex As Integer
    Dim slStr As String
    Dim ilLoop As Integer
    Dim blFound As Boolean
    Dim ilRet As Integer

    If (Not imUpdateAllowed) Then
        If ((imDragType <> DRAGCONTRACT) Or (imDragButton <> 2)) Then
            imDragSrce = -1
            Exit Sub
        End If
    End If
    Select Case imDragType
        Case 0  'Start Drag
            imDragType = -1
            tmcDrag.Enabled = False
            Select Case imDragSrce
                Case DRAGLOG1
                    If imDragButton = 2 Then
                        If imIgnoreRightMove Then
                            Exit Sub
                        End If
                        imIgnoreRightMove = True
                    End If
                    'If imDragButton <> 1 Then
                    '    imDragSrce = -1
                    '    Exit Sub
                    'End If
                    If gDateValue(smLog1Date) < lmEarliestAllowedDate Then
                        imDragSrce = -1
                        Beep
                        Exit Sub
                    End If
                    ilCompRow = vbcLog1.LargeChange + 1
                    If imL1Max > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = imL1Max
                    End If
                    For ilRow = 1 To ilMaxRow Step 1
                        If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL1Ctrls(1).fBoxY + tmL1Ctrls(1).fBoxH)) Then
                            'Test if row number can be dragged
                            ilIndex = tmL1RowIndex(ilRow)
                            If imDragButton = 2 Then
                                mShowRightInfo tmL1Evt(), ilIndex, ilRow, 1
                                imIgnoreRightMove = False
                            Else
                                If tmL1Evt(ilIndex).iType <> 100 Then
                                    imDragSrce = -1
                                    Beep
                                    Exit Sub
                                End If
                                'Disallow fills for Split Network buys
                                If imDblClick = 2 Then
                                    If ((tmL1Evt(ilIndex).iLineInfo And &H800) = &H800) Or ((tmL1Evt(ilIndex).iLineInfo And &H1000) = &H1000) Then
                                        imDragType = -1
                                        imDragSrce = -1
                                        Beep
                                        Exit Sub
                                    End If
                                End If
                                ilAvailIndex = ilIndex - 1
                                Do
                                    If (tmL1Evt(ilAvailIndex).iType >= 2) And (tmL1Evt(ilAvailIndex).iType <= 9) Then
                                        'If ((tmL1Evt(ilAvailIndex).iLineInfo And SSLOCK) = SSLOCK) Or ((tmL1Evt(ilAvailIndex).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT) Then
                                        '    Beep
                                        '    Exit Sub
                                        'End If
                                        Exit Do
                                    End If
                                    ilAvailIndex = ilAvailIndex - 1
                                'Loop While ilAvailIndex >= LBound(tmL1Evt)
                                Loop While ilAvailIndex >= imLBEvt
                                imDragRowNoSrce = ilRow + vbcLog1.Value - 1
                                imDragIndexSrce = ilIndex
                                imDragColNoSrce = 0
                                imDragSpotLen = tmL1Evt(ilIndex).iUnits 'Units contains spot length
                                smDragCntrType = tmL1Evt(ilIndex).sCntrType
                                If (tmL1Evt(ilIndex).iLineInfo And &H10) = &H10 Then
                                    If (tmL1Evt(ilIndex).iLineInfo And &H200) <> &H200 Then
                                        smDragCntrType = "X"
                                    End If
                                End If
                                gInvertArea pbcLog1, CInt(tmL1Ctrls(1).fBoxX) \ 15, CInt(tmL1Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog1.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL1Ctrls(1).fBoxW) \ 15, CInt(tmL1Ctrls(1).fBoxH) \ 15
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmL1Evt(ilIndex).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmL1Evt(ilIndex).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcTime.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacL1Frame.Move 0, tmL1Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog1.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                mSetTrashFire smDragCntrType
                                lacL1Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL1Frame.Drag vbBeginDrag
                                lacL1Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                            End If
                            Exit Sub
                        End If
                    Next ilRow
                Case DRAGLOG2
                    If imDragButton = 2 Then
                        If imIgnoreRightMove Then
                            Exit Sub
                        End If
                        'If imADMdShow = 1 Then
                        '    Exit Sub
                        'End If
                        If imLog2Type <> 4 Then  'Log2
                            imIgnoreRightMove = True
                            mMdComment 5
                            imIgnoreRightMove = False
                            imDragSrce = -1
                            Exit Sub
                        End If
                    End If
                    If imDragButton <> 1 Then
                        imDragSrce = -1
                        Exit Sub
                    End If
                    ilCompRow = vbcLog2.LargeChange + 1
                    If imL2Max > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = imL2Max
                    End If
                    For ilRow = 1 To ilMaxRow Step 1
                        If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                            If imLog2Type = 4 Then  'Log2
                                If gDateValue(smLog2Date) < lmEarliestAllowedDate Then
                                    imDragSrce = -1
                                    Beep
                                    Exit Sub
                                End If
                                'Test if row number can be dragged
                                ilIndex = tmL2RowIndex(ilRow)
                                If imDragButton = 2 Then
                                    mShowRightInfo tmL2Evt(), ilIndex, ilRow, 1
                                    imIgnoreRightMove = False
                                Else
                                    If tmL2Evt(ilIndex).iType <> 100 Then
                                        imDragSrce = -1
                                        Beep
                                        Exit Sub
                                    End If
                                    'Disallow fills for Split Network buys
                                    If imDblClick = 2 Then
                                        If ((tmL2Evt(ilIndex).iLineInfo And &H800) = &H800) Or ((tmL2Evt(ilIndex).iLineInfo And &H1000) = &H1000) Then
                                            imDragType = -1
                                            imDragSrce = -1
                                            Beep
                                            Exit Sub
                                        End If
                                    End If
                                    ilAvailIndex = ilIndex - 1
                                    Do
                                        If (tmL2Evt(ilAvailIndex).iType >= 2) And (tmL2Evt(ilAvailIndex).iType <= 9) Then
                                            'If ((tmL2Evt(ilAvailIndex).iLineInfo And SSLOCK) = SSLOCK) Or ((tmL2Evt(ilAvailIndex).iLineInfo And SSLOCKSPOT) = SSLOCKSPOT) Then
                                            '    Beep
                                            '    Exit Sub
                                            'End If
                                            Exit Do
                                        End If
                                        ilAvailIndex = ilAvailIndex - 1
                                    'Loop While ilAvailIndex >= LBound(tmL2Evt)
                                    Loop While ilAvailIndex >= imLBEvt
                                    imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                    imDragIndexSrce = ilIndex
                                    imDragColNoSrce = 0
                                    imDragSpotLen = tmL2Evt(ilIndex).iUnits 'Units contains spot length
                                    smDragCntrType = tmL2Evt(ilIndex).sCntrType
                                    If (tmL2Evt(ilIndex).iLineInfo And &H10) = &H10 Then
                                        If (tmL2Evt(ilIndex).iLineInfo And &H200) <> &H200 Then
                                            smDragCntrType = "X"
                                        End If
                                    End If
                                    gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                    If imDblClick > 0 Then
                                        imDblClickMode = imDblClick
                                        If (imDblClick = 1) And (rbcMode(0).Value) Then
                                            slStr = "Move or Swap: " & RTrim$(tmL2Evt(ilIndex).sShow)
                                        Else
                                            slStr = "Fill: " & RTrim$(tmL2Evt(ilIndex).sShow)
                                        End If
                                        smInfoCaption = slStr
                                        plcConflictInfo.Top = plcTime.Top
                                        plcConflictInfo.height = 225
                                        If plcConflictInfo.Visible = True Then
                                            plcConflictInfo_Paint
                                        Else
                                            plcConflictInfo.Visible = True
                                        End If
                                        Exit Sub
                                    End If
                                    lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                    'If made visible, then invertarea does not work
                                    'lacL1Frame.Visible = True
                                    mSetTrashFire smDragCntrType
                                    lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                    lacL2Frame.Drag vbBeginDrag
                                    lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                End If
                                Exit Sub
                            ElseIf imLog2Type = 3 Then  'Missed by advertiser
                                imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                imDragIndexSrce = ilRow + vbcLog2.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = tmSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcTime.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                mSetTrashFire tmSdfMdExt(imDragIndexSrce).sCntrType
                                lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL2Frame.Drag vbBeginDrag
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            ElseIf imLog2Type = 0 Then  'Missed by date
                                If ilRow + vbcLog2.Value - 1 = UBound(tmSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                imDragIndexSrce = ilRow + vbcLog2.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = tmSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcTime.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                mSetTrashFire tmSdfMdExt(imDragIndexSrce).sCntrType
                                lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL2Frame.Drag vbBeginDrag
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            ElseIf (imLog2Type = 1) Or (imLog2Type = 2) Then  'Missed by date
                                If ilRow + vbcLog2.Value - 1 = UBound(tmSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                imDragIndexSrce = ilRow + vbcLog2.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = tmSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcTime.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                mSetTrashFire tmSdfMdExt(imDragIndexSrce).sCntrType
                                lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL2Frame.Drag vbBeginDrag
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            ElseIf imLog2Type = 10 Then  'Cancelled by date
                                If ilRow + vbcLog2.Value - 1 = UBound(tmSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                imDragIndexSrce = ilRow + vbcLog2.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = tmSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                'mSetTrashFire tmSdfMdExt(imDragIndexSrce).sCntrType
                                pbcSpotInfo(1).Visible = False
                                pbcSpotInfo(0).Visible = False
                                lbcPackageInfo(1).Visible = False
                                lbcPackageInfo(0).Visible = False
                                plcCalendar.Visible = False
                                lbcGameList.Visible = False
                                imNoSpotInfo = 0
                                imcPrt.Visible = False
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcAdvertiser.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL2Frame.Drag vbBeginDrag
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                mSetCommands
                                Exit Sub
                            ElseIf imLog2Type = 11 Then  'Hidden by date
                                If ilRow + vbcLog2.Value - 1 = UBound(tmSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                imDragIndexSrce = ilRow + vbcLog2.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = tmSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                'mSetTrashFire tmSdfMdExt(imDragIndexSrce).sCntrType
                                pbcSpotInfo(1).Visible = False
                                pbcSpotInfo(0).Visible = False
                                lbcPackageInfo(1).Visible = False
                                lbcPackageInfo(0).Visible = False
                                plcCalendar.Visible = False
                                lbcGameList.Visible = False
                                imNoSpotInfo = 0
                                imcPrt.Visible = False
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcAdvertiser.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL2Frame.Drag vbBeginDrag
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                mSetCommands
                                Exit Sub
                            ElseIf (imLog2Type > 4) And (imLog2Type < 10) Then
                                If imDblClick Then
                                    Exit Sub
                                End If
                                imDragRowNoSrce = ilRow + vbcLog2.Value - 1
                                imDragIndexSrce = ilRow + vbcLog2.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = -1 'Units contains spot length
                                Select Case imLog2Type
                                    'Case 3  'Deferred
                                    '    smDragCntrType = "D"
                                    Case 5 '4  'Remnant
                                        smDragCntrType = "T"
                                    Case 6 '5  'DR
                                        smDragCntrType = "R"
                                    Case 7 '6  'PI
                                        smDragCntrType = "Q"
                                    Case 8 '7  'PSA
                                        smDragCntrType = "S"
                                    Case 9 '8  'Promo
                                        smDragCntrType = "M"
                                End Select
                                gInvertArea pbcLog2, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacL2Frame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcLog2.Value) * (fgBoxGridH + 15) - 30
                                'If lmL2ManSchCode(imDragIndexSrce) <> tmChf.lCode Then
                                '    tmChfSrchKey.lCode = lmL2ManSchCode(imDragIndexSrce)
                                '    ilRet = btrGetEqual(hmChf, tmChf, imChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)
                                'End If
                                'mSetTrashFire tmChf.sType
                                pbcSpotInfo(1).Visible = False
                                pbcSpotInfo(0).Visible = False
                                lbcPackageInfo(1).Visible = False
                                lbcPackageInfo(0).Visible = False
                                plcCalendar.Visible = False
                                lbcGameList.Visible = False
                                imNoSpotInfo = 0
                                imcPrt.Visible = False
                                lacL2Frame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacL2Frame.Drag vbBeginDrag
                                lacL2Frame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                mSetCommands
                                Exit Sub
                            End If
                        End If
                    Next ilRow
                Case DRAGHOLD
                    If imDragButton = 2 Then
                        If imIgnoreRightMove Then
                            Exit Sub
                        End If
                        imIgnoreRightMove = True
                        mMdComment 4
                        imIgnoreRightMove = False
                        imDragSrce = -1
                        Exit Sub
                    End If
                    If imDragButton <> 1 Then
                        imDragSrce = -1
                        Exit Sub
                    End If
                    ilCompRow = vbcHold.LargeChange + 1
                    If UBound(tmWAMdExt) - 1 > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = UBound(tmWAMdExt) - 1
                    End If
                    For ilRow = 1 To ilMaxRow Step 1
                        If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                            'Test if row number can be dragged
                            If ilRow + vbcHold.Value - 1 = UBound(tmWAMdExt) Then
                                Exit For
                            End If
                            imDragRowNoSrce = ilRow + vbcHold.Value - 1
                            imDragIndexSrce = ilRow + vbcHold.Value - 1
                            imDragColNoSrce = 0
                            imDragSpotLen = tmWAMdExt(imDragIndexSrce).iLen 'Spot length
                            smDragCntrType = tmWAMdExt(imDragIndexSrce).sCntrType
                            gInvertArea pbcHold, CInt(tmWACtrls(1).fBoxX) \ 15, CInt(tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcHold.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmWACtrls(1).fBoxW) \ 15, CInt(tmWACtrls(1).fBoxH) \ 15
                            If imDblClick > 0 Then
                                imDblClickMode = imDblClick
                                If (imDblClick = 1) And (rbcMode(0).Value) Then
                                    slStr = "Move or Swap: " & RTrim$(tmWAMdExt(imDragIndexSrce).sShow)
                                Else
                                    slStr = "Fill: " & RTrim$(tmWAMdExt(imDragIndexSrce).sShow)
                                End If
                                smInfoCaption = slStr
                                plcConflictInfo.Top = plcTime.Top
                                plcConflictInfo.height = 225
                                If plcConflictInfo.Visible = True Then
                                    plcConflictInfo_Paint
                                Else
                                    plcConflictInfo.Visible = True
                                End If
                                Exit Sub
                            End If
                            lacWAFrame(0).Move 0, tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcHold.Value) * (fgBoxGridH + 15) - 30
                            'If made visible, then invertarea does not work
                            'lacL1Frame.Visible = True
                            mSetTrashFire tmWAMdExt(imDragIndexSrce).sCntrType
                            lacWAFrame(0).DragIcon = IconTraf!imcIconStd.DragIcon
                            lacWAFrame(0).Drag vbBeginDrag
                            lacWAFrame(0).DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Next ilRow
                Case DRAGCONTRACT
                    If imDragButton = 2 Then
                        If imIgnoreRightMove Then
                            Exit Sub
                        End If
                        imIgnoreRightMove = True
                    End If
                    If imAdMdSelectionCount > 0 Then
                        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                    End If
                    If imWASelectionCount > 0 Then
                        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                    End If
                    ilCompRow = vbcContract.LargeChange + 1
                    If imAMax > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = imAMax
                    End If
                    For ilRow = 1 To ilMaxRow Step 1
                        If (fmDragY >= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY)) And (fmDragY <= ((ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + tmACtrls(1).fBoxH)) Then
                            For ilCol = 1 To 7 Step 1
                                If (fmDragX >= tmACtrls(ilCol).fBoxX - 15) And (fmDragX <= (tmACtrls(ilCol).fBoxX + tmACtrls(ilCol).fBoxW + 15)) Then
                                    If imAdMdSelectionCount > 0 Then
                                        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                                    End If
                                    If imWASelectionCount > 0 Then
                                        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                                    End If
                                    plcConflictInfo.Top = (ilRow) * (fgBoxGridH + 15) + tmACtrls(1).fBoxY + 5 * tmACtrls(ilCol).fBoxH + pbcContract.Top
                                    'Test if row number can be dragged
                                    Select Case ilCol
                                        Case 1  'Monday
                                            'plcConflictInfo.Left = pbcContract.Left
                                            mStartCntrDrag ilRow, ilCol, tmMoEvt(), tmMoRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                        Case 2  'Tuesday
                                            'plcConflictInfo.Left = pbcContract.Left + tmACtrls(ilCol).fBoxW
                                            mStartCntrDrag ilRow, ilCol, tmTuEvt(), tmTuRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                        Case 3  'Wednesday
                                            'plcConflictInfo.Left = pbcContract.Left + tmACtrls(ilCol).fBoxW
                                            mStartCntrDrag ilRow, ilCol, tmWeEvt(), tmWeRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                        Case 4  'Thursday
                                            'plcConflictInfo.Left = pbcContract.Left + tmACtrls(ilCol).fBoxW
                                            mStartCntrDrag ilRow, ilCol, tmThEvt(), tmThRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                        Case 5  'Friday
                                            'plcConflictInfo.Left = pbcContract.Left + pbcContract.Width - plcConflictInfo.Width
                                            mStartCntrDrag ilRow, ilCol, tmFrEvt(), tmFrRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                        Case 6  'Saturday
                                            'plcConflictInfo.Left = pbcContract.Left + pbcContract.Width - plcConflictInfo.Width
                                            mStartCntrDrag ilRow, ilCol, tmSaEvt(), tmSaRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                        Case 7  'Sunday
                                            'plcConflictInfo.Left = pbcContract.Left + pbcContract.Width - plcConflictInfo.Width
                                            mStartCntrDrag ilRow, ilCol, tmSuEvt(), tmSuRowIndex()
                                            imIgnoreRightMove = False
                                            Exit Sub
                                    End Select
                                End If
                            Next ilCol
                        End If
                    Next ilRow
                    imIgnoreRightMove = False
                Case DRAGADMD
                    If imDragButton = 2 Then
                        If imIgnoreRightMove Then
                            Exit Sub
                        End If
                        If imADMdShow = 1 Then
                            Exit Sub
                        End If
                        imIgnoreRightMove = True
                        mMdComment 1
                        imIgnoreRightMove = False
                        imDragSrce = -1
                        Exit Sub
                    End If
                    If imDragButton <> 1 Then
                        imDragSrce = -1
                        Exit Sub
                    End If
                    If (lmSelectedChfCode > 0) And (((imAdMdType > 3) And (imAdMdType < 9)) Or (imAdMdType = 9) Or (imAdMdType = 10) Or (imAdMdType = 11)) Then
                        imDragSrce = -1
                        Exit Sub
                    End If
                    ilCompRow = vbcMissed.LargeChange + 1
                    If imAdMdMax > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = imAdMdMax
                    End If
                    For ilRow = 1 To ilMaxRow Step 1
                        If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmL2Ctrls(1).fBoxY + tmL2Ctrls(1).fBoxH)) Then
                            
                            If imAdMdType = 3 Then  'Missed by advertiser
                                If ilRow + vbcMissed.Value - 1 = UBound(tmAdMdSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcMissed.Value - 1
                                imDragIndexSrce = ilRow + vbcMissed.Value - 1
                                'If (imDragIndexSrce < LBound(tmAdMdSdfMdExt)) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                If (imDragIndexSrce < imLBSdfMdExt) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                    imDragSrce = -1
                                    Exit Sub
                                End If
                                If imWASelectionCount > 0 Then
                                    mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                                End If
                                If imAdMdSelectionCount > 0 Then
                                    blFound = False
                                    'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                                    For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                                        If (tmAdMdSdfMdExt(ilLoop).iSelected = 1) And (ilLoop = imDragIndexSrce) Then
                                            blFound = True
                                            Exit For
                                        End If
                                    Next ilLoop
                                    If Not blFound Then
                                        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                                        ilRet = mAdMdMultiSelection(imDragIndexSrce)
                                    End If
                                Else
                                    ilRet = mAdMdMultiSelection(imDragIndexSrce)
                                End If
                                imDragColNoSrce = 0
                                imDragSpotLen = tmAdMdSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcAdvertiser.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacAdMdFrame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                mSetTrashFire tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                lacAdMdFrame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacAdMdFrame.Drag vbBeginDrag
                                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            ElseIf (imAdMdType = 0) Or (imAdMdType = 1) Or (imAdMdType = 2) Then  'Missed by date
                                If ilRow + vbcMissed.Value - 1 = UBound(tmAdMdSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcMissed.Value - 1
                                imDragIndexSrce = ilRow + vbcMissed.Value - 1
                                'If (imDragIndexSrce < LBound(tmAdMdSdfMdExt)) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                If (imDragIndexSrce < imLBSdfMdExt) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                    imDragSrce = -1
                                    Exit Sub
                                End If
                                If imWASelectionCount > 0 Then
                                    mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                                End If
                                If imAdMdSelectionCount > 0 Then
                                    blFound = False
                                    'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
                                    For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
                                        If (tmAdMdSdfMdExt(ilLoop).iSelected = 1) And (ilLoop = imDragIndexSrce) Then
                                            blFound = True
                                            Exit For
                                        End If
                                    Next ilLoop
                                    If Not blFound Then
                                        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                                        ilRet = mAdMdMultiSelection(imDragIndexSrce)
                                    End If
                                Else
                                    ilRet = mAdMdMultiSelection(imDragIndexSrce)
                                End If
                                imDragColNoSrce = 0
                                imDragSpotLen = tmAdMdSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacAdMdFrame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15) - 30
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcAdvertiser.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                mSetTrashFire tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                lacAdMdFrame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacAdMdFrame.Drag vbBeginDrag
                                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                Exit Sub
                            ElseIf (imAdMdType = 9) Then  'Cancelled by date
                                If ilRow + vbcMissed.Value - 1 = UBound(tmAdMdSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcMissed.Value - 1
                                imDragIndexSrce = ilRow + vbcMissed.Value - 1
                                'If (imDragIndexSrce < LBound(tmAdMdSdfMdExt)) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                If (imDragIndexSrce < imLBSdfMdExt) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                    imDragSrce = -1
                                    Exit Sub
                                End If
                                imDragColNoSrce = 0
                                imDragSpotLen = tmAdMdSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacAdMdFrame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                'mSetTrashFire tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                pbcSpotInfo(1).Visible = False
                                pbcSpotInfo(0).Visible = False
                                lbcPackageInfo(1).Visible = False
                                lbcPackageInfo(0).Visible = False
                                plcCalendar.Visible = False
                                lbcGameList.Visible = False
                                imNoSpotInfo = 0
                                imcPrt.Visible = False
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcAdvertiser.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacAdMdFrame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacAdMdFrame.Drag vbBeginDrag
                                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                mSetCommands
                                Exit Sub
                            ElseIf (imAdMdType = 10) Then  'Hidden by date
                                If ilRow + vbcMissed.Value - 1 = UBound(tmAdMdSdfMdExt) Then
                                    Exit For
                                End If
                                imDragRowNoSrce = ilRow + vbcMissed.Value - 1
                                imDragIndexSrce = ilRow + vbcMissed.Value - 1
                                'If (imDragIndexSrce < LBound(tmAdMdSdfMdExt)) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                If (imDragIndexSrce < imLBSdfMdExt) Or (imDragIndexSrce > UBound(tmAdMdSdfMdExt)) Then
                                    imDragSrce = -1
                                    Exit Sub
                                End If
                                imDragColNoSrce = 0
                                imDragSpotLen = tmAdMdSdfMdExt(imDragIndexSrce).iLen 'Units contains spot length
                                smDragCntrType = tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacAdMdFrame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15) - 30
                                'If made visible, then invertarea does not work
                                'lacL1Frame.Visible = True
                                'mSetTrashFire tmAdMdSdfMdExt(imDragIndexSrce).sCntrType
                                pbcSpotInfo(1).Visible = False
                                pbcSpotInfo(0).Visible = False
                                lbcPackageInfo(1).Visible = False
                                lbcPackageInfo(0).Visible = False
                                plcCalendar.Visible = False
                                lbcGameList.Visible = False
                                imNoSpotInfo = 0
                                imcPrt.Visible = False
                                If imDblClick > 0 Then
                                    imDblClickMode = imDblClick
                                    If (imDblClick = 1) And (rbcMode(0).Value) Then
                                        slStr = "Move or Swap: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    Else
                                        slStr = "Fill: " & RTrim$(tmAdMdSdfMdExt(imDragIndexSrce).sShow)
                                    End If
                                    smInfoCaption = slStr
                                    plcConflictInfo.Top = plcAdvertiser.Top
                                    plcConflictInfo.height = 225
                                    If plcConflictInfo.Visible = True Then
                                        plcConflictInfo_Paint
                                    Else
                                        plcConflictInfo.Visible = True
                                    End If
                                    Exit Sub
                                End If
                                lacAdMdFrame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacAdMdFrame.Drag vbBeginDrag
                                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                mSetCommands
                                Exit Sub
                            ElseIf (imAdMdType > 3) And (imAdMdType < 9) Or (imAdMdType = 11) Then
                                If imDblClick Then
                                    Exit Sub
                                End If
                                imDragRowNoSrce = ilRow + vbcMissed.Value - 1
                                imDragIndexSrce = ilRow + vbcMissed.Value - 1
                                imDragColNoSrce = 0
                                imDragSpotLen = -1 'Units contains spot length
                                Select Case imAdMdType
                                    Case 4  'Remnant
                                        smDragCntrType = "T"
                                    Case 5  'DR
                                        smDragCntrType = "R"
                                    Case 6  'PI
                                        smDragCntrType = "Q"
                                    Case 7  'PSA
                                        smDragCntrType = "S"
                                    Case 8  'Promo
                                        smDragCntrType = "M"
                                    Case 11 'Extra bonus
                                        smDragCntrType = "X"
                                End Select
                                gInvertArea pbcMissed, CInt(tmL2Ctrls(1).fBoxX) \ 15, CInt(tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmL2Ctrls(1).fBoxW) \ 15, CInt(tmL2Ctrls(1).fBoxH) \ 15
                                lacAdMdFrame.Move 0, tmL2Ctrls(1).fBoxY + (imDragRowNoSrce - vbcMissed.Value) * (fgBoxGridH + 15) - 30
                                'If lmL2ManSchCode(imDragIndexSrce) <> tmChf.lCode Then
                                '    tmChfSrchKey.lCode = lmL2ManSchCode(imDragIndexSrce)
                                '    ilRet = btrGetEqual(hmChf, tmChf, imChfRecLen, tmChfSrchKey, INDEXKEY0, BTRV_LOCK_NONE)
                                'End If
                                'mSetTrashFire tmChf.sType
                                pbcSpotInfo(1).Visible = False
                                pbcSpotInfo(0).Visible = False
                                lbcPackageInfo(1).Visible = False
                                lbcPackageInfo(0).Visible = False
                                plcCalendar.Visible = False
                                lbcGameList.Visible = False
                                imNoSpotInfo = 0
                                imcPrt.Visible = False
                                'If imDblClick > 0 Then
                                '    imDblClickMode = imDblClick
                                '    If imDblClick = 1 Then
                                '        slStr = "Move or Swap: " '& RTrim$(tlEvt(ilIndex).sShow)
                                '    Else
                                '        slStr = "Fill: " '& RTrim$(tlEvt(ilIndex).sShow)
                                '    End If
                                '    plcConflictInfo.Caption = slStr
                                '    plcConflictInfo.Top = plcAdvertiser.Top
                                '    plcConflictInfo.Height = 225
                                '    plcConflictInfo.Visible = True
                                '    Exit Sub
                                'End If
                                lacAdMdFrame.DragIcon = IconTraf!imcIconStd.DragIcon
                                lacAdMdFrame.Drag vbBeginDrag
                                lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                                mSetCommands
                                Exit Sub
                            End If
                        End If
                    Next ilRow
                Case DRAGWORKAREA
                    If imDragButton = 2 Then
                        If imIgnoreRightMove Then
                            Exit Sub
                        End If
                        imIgnoreRightMove = True
                        mMdComment 2
                        imIgnoreRightMove = False
                        imDragSrce = -1
                        Exit Sub
                    End If
                    If imDragButton <> 1 Then
                        imDragSrce = -1
                        Exit Sub
                    End If
                    ilCompRow = vbcAdWorkArea.LargeChange + 1
                    If UBound(tmWAMdExt) - 1 > ilCompRow Then
                        ilMaxRow = ilCompRow
                    Else
                        ilMaxRow = UBound(tmWAMdExt) - 1
                    End If
                    For ilRow = 1 To ilMaxRow Step 1
                        If (fmDragY >= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY)) And (fmDragY <= ((ilRow - 1) * (fgBoxGridH + 15) + tmWACtrls(1).fBoxY + tmWACtrls(1).fBoxH)) Then
                            'Test if row number can be dragged
                            If ilRow + vbcAdWorkArea.Value - 1 = UBound(tmWAMdExt) Then
                                Exit For
                            End If
                            imDragRowNoSrce = ilRow + vbcAdWorkArea.Value - 1
                            imDragIndexSrce = ilRow + vbcAdWorkArea.Value - 1
                            'If (imDragIndexSrce < LBound(tmWAMdExt)) Or (imDragIndexSrce > UBound(tmWAMdExt)) Then
                            If (imDragIndexSrce < imLBSdfMdExt) Or (imDragIndexSrce > UBound(tmWAMdExt)) Then
                                imDragSrce = -1
                                Exit Sub
                            End If
                            If imAdMdSelectionCount > 0 Then
                                mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
                            End If
                            If imWASelectionCount > 0 Then
                                blFound = False
                                'For ilLoop = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
                                For ilLoop = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
                                    If (tmWAMdExt(ilLoop).iSelected = 1) And (ilLoop = imDragIndexSrce) Then
                                        blFound = True
                                        Exit For
                                    End If
                                Next ilLoop
                                If Not blFound Then
                                    mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
                                    ilRet = mWAMultiSelection(imDragIndexSrce)
                                End If
                            Else
                                ilRet = mWAMultiSelection(imDragIndexSrce)
                            End If
                            imDragColNoSrce = 0
                            imDragSpotLen = tmWAMdExt(imDragIndexSrce).iLen 'Spot length
                            smDragCntrType = tmWAMdExt(imDragIndexSrce).sCntrType
                            gInvertArea pbcAdWorkArea, CInt(tmWACtrls(1).fBoxX) \ 15, CInt(tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcAdWorkArea.Value) * (fgBoxGridH + 15)) \ 15, CInt(tmWACtrls(1).fBoxW) \ 15, CInt(tmWACtrls(1).fBoxH) \ 15
                            If imDblClick > 0 Then
                                imDblClickMode = imDblClick
                                If (imDblClick = 1) And (rbcMode(0).Value) Then
                                    slStr = "Move or Swap: " & RTrim$(tmWAMdExt(imDragIndexSrce).sShow)
                                Else
                                    slStr = "Fill: " & RTrim$(tmWAMdExt(imDragIndexSrce).sShow)
                                End If
                                smInfoCaption = slStr
                                plcConflictInfo.Top = plcAdvertiser.Top
                                plcConflictInfo.height = 225
                                If plcConflictInfo.Visible = True Then
                                    plcConflictInfo_Paint
                                Else
                                    plcConflictInfo.Visible = True
                                End If
                                Exit Sub
                            End If
                            lacWAFrame(1).Move 0, tmWACtrls(1).fBoxY + (imDragRowNoSrce - vbcAdWorkArea.Value) * (fgBoxGridH + 15) - 30
                            'If made visible, then invertarea does not work
                            'lacL1Frame.Visible = True
                            mSetTrashFire tmWAMdExt(imDragIndexSrce).sCntrType
                            lacWAFrame(1).DragIcon = IconTraf!imcIconStd.DragIcon
                            lacWAFrame(1).Drag vbBeginDrag
                            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
                            Exit Sub
                        End If
                    Next ilRow
            End Select
        Case 1  'scroll up
        Case 2  'Scroll down
    End Select
    imDragSrce = -1
    Exit Sub
End Sub
Private Sub tmcExtra_Timer()
    tmcExtra.Enabled = False
    tmcClick_Timer
    Screen.MousePointer = vbDefault
End Sub


Private Sub tmcScroll_Timer()
    Dim ilRet As Integer
    Dim slName As String
    Dim slNameCode As String
    If imDragSrce = -1 Then
        tmcScroll.Enabled = False
        Exit Sub
    End If
    If imDragScroll = DRAGLOG1 Then
        If imScrollDir = 0 Then 'Page up
            If vbcLog1.Value <> 1 Then
                If vbcLog1.Value - vbcLog1.LargeChange > vbcLog1.Min Then
                    vbcLog1.Value = vbcLog1.Value - vbcLog1.LargeChange
                Else
                    vbcLog1.Value = vbcLog1.Min
                End If
            End If
        Else    'Page down
            If vbcLog1.Value + vbcLog1.LargeChange <> imL1Max Then
                If vbcLog1.Value + vbcLog1.LargeChange < vbcLog1.Max Then
                    vbcLog1.Value = vbcLog1.Value + vbcLog1.LargeChange
                Else
                    vbcLog1.Value = vbcLog1.Max
                End If
            End If
        End If
    ElseIf imDragScroll = DRAGLOG2 Then
        If imScrollDir = 0 Then 'Page up
            If vbcLog2.Value <> 1 Then
                If vbcLog2.Value - vbcLog2.LargeChange > vbcLog2.Min Then
                    vbcLog2.Value = vbcLog2.Value - vbcLog2.LargeChange
                Else
                    vbcLog2.Value = vbcLog2.Min
                End If
            End If
        Else    'Page down
            If vbcLog2.Value + vbcLog2.LargeChange <> imL2Max Then
                If vbcLog2.Value + vbcLog2.LargeChange < vbcLog2.Max Then
                    vbcLog2.Value = vbcLog2.Value + vbcLog2.LargeChange
                Else
                    vbcLog2.Value = vbcLog2.Max
                End If
            End If
        End If
    ElseIf imDragScroll = DRAGHOLD Then
        If imScrollDir = 0 Then 'Page up
            If vbcHold.Value <> 1 Then
                If vbcHold.Value - vbcHold.LargeChange > vbcHold.Min Then
                    vbcHold.Value = vbcHold.Value - vbcHold.LargeChange
                Else
                    vbcHold.Value = vbcHold.Min
                End If
            End If
        Else    'Page down
            If vbcHold.Value + vbcHold.LargeChange <> UBound(tmWAMdExt) Then  'Show one blank line
                If vbcHold.Value + vbcHold.LargeChange < vbcHold.Max Then
                    vbcHold.Value = vbcHold.Value + vbcHold.LargeChange
                Else
                    vbcHold.Value = vbcHold.Max
                End If
            End If
        End If
    ElseIf imDragScroll = DRAGCONTRACT Then
        If imScrollDir = 0 Then 'Page up
            If vbcContract.Value <> 1 Then
                If vbcContract.Value - vbcContract.LargeChange > vbcContract.Min Then
                    vbcContract.Value = vbcContract.Value - vbcContract.LargeChange
                Else
                    vbcContract.Value = vbcContract.Min
                End If
            End If
        Else    'Page down
            If vbcContract.Value + vbcContract.LargeChange <> imAMax Then
                If vbcContract.Value + vbcContract.LargeChange < vbcContract.Max Then
                    vbcContract.Value = vbcContract.Value + vbcContract.LargeChange
                Else
                    vbcContract.Value = vbcContract.Max
                End If
            End If
        End If
    ElseIf imDragScroll = DRAGADMD Then
        If imScrollDir = 0 Then 'Page up
            If vbcMissed.Value <> 1 Then
                If vbcMissed.Value - vbcMissed.LargeChange > vbcMissed.Min Then
                    vbcMissed.Value = vbcMissed.Value - vbcMissed.LargeChange
                Else
                    vbcMissed.Value = vbcMissed.Min
                End If
            End If
        Else    'Page down
            If vbcMissed.Value + vbcMissed.LargeChange <> UBound(tmAdMdSdfMdExt) Then  'Show one blank line
                If vbcMissed.Value + vbcMissed.LargeChange < vbcMissed.Max Then
                    vbcMissed.Value = vbcMissed.Value + vbcMissed.LargeChange
                Else
                    vbcMissed.Value = vbcMissed.Max
                End If
            End If
        End If
    ElseIf imDragScroll = DRAGWORKAREA Then
        If imScrollDir = 0 Then 'Page up
            If vbcAdWorkArea.Value <> 1 Then
                If vbcAdWorkArea.Value - vbcAdWorkArea.LargeChange > vbcAdWorkArea.Min Then
                    vbcAdWorkArea.Value = vbcAdWorkArea.Value - vbcAdWorkArea.LargeChange
                Else
                    vbcAdWorkArea.Value = vbcAdWorkArea.Min
                End If
            End If
        Else    'Page down
            If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange <> UBound(tmWAMdExt) Then  'Show one blank line
                If vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange < vbcAdWorkArea.Max Then
                    vbcAdWorkArea.Value = vbcAdWorkArea.Value + vbcAdWorkArea.LargeChange
                Else
                    vbcAdWorkArea.Value = vbcAdWorkArea.Max
                End If
            End If
        End If
   ElseIf imDragScroll = DRAGMDREASON Then
        If imScrollDir = 0 Then 'Page up
            'If lbcMissed.TopIndex > 0 Then
            '   lbcMissed.TopIndex = lbcMissed.TopIndex - 1
            'End If
            imMissedReason = imMissedReason - 1
            If imMissedReason < LBound(tmMissedCode) Then
                imMissedReason = UBound(tmMissedCode) - 1
            End If
        Else    'Page down
           'If lbcMissed.TopIndex < lbcMissed.ListCount Then
           '   lbcMissed.TopIndex = lbcMissed.TopIndex + 1
           'End If
            imMissedReason = imMissedReason + 1
            If imMissedReason >= UBound(tmMissedCode) Then
                imMissedReason = LBound(tmMissedCode)
            End If
        End If
        slNameCode = tmMissedCode(imMissedReason).sKey
        ilRet = gParseItem(slNameCode, 1, "\", slName)
        gSetShow pbcSelect(imDW), slName, tmCtrls(MISSEDREASONINDEX)
        pbcSelect(imDW).Cls
        pbcSelect_Paint imDW
    End If
End Sub

Private Sub tmcShowForm_Timer()
    tmcShowForm.Enabled = False
    pbcInitCover.Visible = False
    'Repaint so that highlight works
    pbcContract.Cls
    pbcContract_Paint
    pbcMissed.Cls
    pbcMissed_Paint
    pbcAdWorkArea.Cls
    pbcAdWorkArea_Paint
    pbcLog1.Cls
    pbcLog1_Paint
    pbcLog2.Cls
    pbcLog2_Paint
    If imDW = 0 Then
        plcTime.Visible = False
        plcTime.Visible = True
    Else
        plcAdvertiser.Visible = False
        plcAdvertiser.Visible = True
    End If
End Sub

Private Sub tmcSetShow_Timer()
    tmcSetShow.Enabled = False
    mSetShow imBoxNo
End Sub

Private Sub vbcAdWorkArea_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    pbcAdWorkArea.Cls
    pbcAdWorkArea_Paint
End Sub
Private Sub vbcAdWorkArea_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub vbcAdWorkArea_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    If Y < (vbcAdWorkArea.height \ 2) Then
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconUp.DragIcon
        End If
        mDragOver DRAGWORKAREA, State, 0    'at top
    Else
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDown.DragIcon
        End If
        mDragOver DRAGWORKAREA, State, 1    'at bottom
    End If
End Sub

Private Sub vbcAdWorkArea_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    'lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub vbcAvail_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    pbcAvail.Cls
    pbcAvail_Paint
End Sub
Private Sub vbcAvail_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub
Private Sub vbcAvail_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
End Sub
Private Sub vbcContract_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    If tmcClick.Enabled Then
        'pbcClickFocus.SetFocus
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    pbcContract.Cls
    pbcContract_Paint
    Screen.MousePointer = vbDefault
End Sub
Private Sub vbcContract_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub vbcContract_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    If Y < (vbcContract.height \ 2) Then
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconUp.DragIcon
        End If
        mDragOver DRAGCONTRACT, State, 0    'at top
    Else
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDown.DragIcon
        End If
        mDragOver DRAGCONTRACT, State, 1    'at bottom
    End If
End Sub

Private Sub vbcContract_GotFocus()
    If imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If tmcClick.Enabled Then
        'pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdvt.Visible = False
End Sub
Private Sub vbcContract_Scroll()
    Dim ilLoop As Integer
    Dim slTime As String
    Dim llShowTime As Long
    Dim llFoundTime As Long
    Dim slStr As String
    Dim ilRowCount As Integer
    Dim ilDay As Integer
    Dim ilStartIndex As Integer
    Dim ilEndIndex As Integer
    Dim ilStep As Integer
    If lmSelectedChfCode > 0 Then
        plcAdvtTm.Caption = ""
        Exit Sub
    End If
    'Ignore time as they can all be different
    If tmVef.sType = "G" Then
        plcAdvtTm.Caption = ""
        Exit Sub
    End If
    llFoundTime = -1
    'ilStartIndex = LBound(tmMoEvt)
    ilStartIndex = imLBEvt
    ilEndIndex = UBound(tmMoEvt) - 1
    ilStep = 1
    For ilDay = 0 To 6 Step 1
        ilRowCount = 0
        llShowTime = -1
        Select Case ilDay
            Case 0
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmMoEvt(ilLoop).iType < 99 Then
                            llShowTime = tmMoEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmMoEvt(ilLoop).iType < 99 Then
                            llShowTime = tmMoEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmMoEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
            Case 1
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmTuEvt(ilLoop).iType < 99 Then
                            llShowTime = tmTuEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmTuEvt(ilLoop).iType < 99 Then
                            llShowTime = tmTuEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmTuEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
            Case 2
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmWeEvt(ilLoop).iType < 99 Then
                            llShowTime = tmWeEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmWeEvt(ilLoop).iType < 99 Then
                            llShowTime = tmWeEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmWeEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
            Case 3
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmThEvt(ilLoop).iType < 99 Then
                            llShowTime = tmThEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmThEvt(ilLoop).iType < 99 Then
                            llShowTime = tmThEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmThEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
            Case 4
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmFrEvt(ilLoop).iType < 99 Then
                            llShowTime = tmFrEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmFrEvt(ilLoop).iType < 99 Then
                            llShowTime = tmFrEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmFrEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
            Case 5
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmSaEvt(ilLoop).iType < 99 Then
                            llShowTime = tmSaEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmSaEvt(ilLoop).iType < 99 Then
                            llShowTime = tmSaEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmSaEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
            Case 6
                For ilLoop = ilStartIndex To ilEndIndex Step ilStep
                    If ilStep = -1 Then
                        If tmSuEvt(ilLoop).iType < 99 Then
                            llShowTime = tmSuEvt(ilLoop).lTime
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    Else
                        ilRowCount = ilRowCount + 1
                        If tmSuEvt(ilLoop).iType < 99 Then
                            llShowTime = tmSuEvt(ilLoop).lTime
                        End If
                        If ilRowCount >= vbcContract.Value Then
                            ilStartIndex = ilLoop
                            'ilEndIndex = LBound(tmSuEvt)
                            ilEndIndex = imLBEvt
                            ilStep = -1
                            If llShowTime > llFoundTime Then
                                llFoundTime = llShowTime
                            End If
                            Exit For
                        End If
                    End If
                Next ilLoop
        End Select
    Next ilDay
    If llFoundTime <> -1 Then
        slStr = gCurrencyToTime(CCur(llFoundTime))
        slTime = gFormatTime(slStr, "A", "1")
        plcAdvtTm.Caption = " " & slTime
    Else
        plcAdvtTm.Caption = ""
    End If
End Sub
Private Sub vbcHold_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    pbcHold.Cls
    pbcHold_Paint
End Sub
Private Sub vbcHold_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub vbcHold_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    If Y < (vbcHold.height \ 2) Then
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconUp.DragIcon
        End If
        mDragOver DRAGHOLD, State, 0    'at top
    Else
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDown.DragIcon
        End If
        mDragOver DRAGHOLD, State, 1    'at bottom
    End If
End Sub

Private Sub vbcHold_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub vbcLog1_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    pbcLog1.Cls
    pbcLog1_Paint
    Screen.MousePointer = vbDefault
End Sub
Private Sub vbcLog1_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub vbcLog1_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    If Y < (vbcLog1.height \ 2) Then
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconUp.DragIcon
        End If
        mDragOver DRAGLOG1, State, 0    'at top
    Else
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDown.DragIcon
        End If
        mDragOver DRAGLOG1, State, 1    'at bottom
    End If
End Sub

Private Sub vbcLog1_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub vbcLog1_Scroll()
    Dim ilLoop As Integer
    Dim slTime As String
    Dim llShowTime As Long
    Dim slStr As String
    Dim ilRowCount As Integer
    Dim ilIndex As Integer
    Dim ilCntAsUnsold As Integer
    Dim ilShow As Integer
    ilRowCount = 0
    llShowTime = -1
    ilShow = False
    ilCntAsUnsold = False
    'For ilLoop = LBound(tmL1Evt) To UBound(tmL1Evt) - 1 Step 1
    For ilLoop = imLBEvt To UBound(tmL1Evt) - 1 Step 1
        If (imL1View = 1) Then
            ilShow = True
        ElseIf (imL1View = 0) Then
            '7/5/14: Add check box for showing/not showing ghost spots
            'If ((tmL1Evt(ilLoop).iType >= 2) And (tmL1Evt(ilLoop).iType <= 9)) Or ((tmL1Evt(ilLoop).iType = 99)) Or ((tmL1Evt(ilLoop).iType = 100)) Or ((tmL1Evt(ilLoop).iType = 101)) Then
            If ((tmL1Evt(ilLoop).iType >= 2) And (tmL1Evt(ilLoop).iType <= 9)) Or ((tmL1Evt(ilLoop).iType = 99)) Or ((tmL1Evt(ilLoop).iType = 100)) Or ((tmL1Evt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then
                ilShow = True
            Else
                ilShow = False
            End If
        Else
            If (tmL1Evt(ilLoop).iType >= 2) And (tmL1Evt(ilLoop).iType <= 9) Then
                'Scan formwar to test if unsold defined
                For ilIndex = ilLoop + 1 To UBound(tmL1Evt) - 1 Step 1
                    If (tmL1Evt(ilIndex).iType = 99) Then    'Unsold
                        ilCntAsUnsold = True
                        ilShow = True
                        Exit For
                    ElseIf (tmL1Evt(ilIndex).iType <> 100) And (tmL1Evt(ilIndex).iType <> 101) Then
                        ilCntAsUnsold = False
                        ilShow = False
                        Exit For
                    End If
                Next ilIndex
            Else
                If ilCntAsUnsold Then
                    '7/5/14: Add check box for showing/not showing ghost spots
                    'If (tmL1Evt(ilLoop).iType = 99) Or (tmL1Evt(ilLoop).iType = 100) Or (tmL1Evt(ilLoop).iType = 101) Then    'Unsold or spot or conflicts spots
                    If (tmL1Evt(ilLoop).iType = 99) Or (tmL1Evt(ilLoop).iType = 100) Or ((tmL1Evt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked)) Then    'Unsold or spot or conflicts spots
                        ilShow = True
                    Else
                        ilShow = False
                        ilCntAsUnsold = False
                    End If
                End If
            End If
        End If
        If ilShow Then
            ilRowCount = ilRowCount + 1
            If tmL1Evt(ilLoop).iType < 99 Then
                llShowTime = tmL1Evt(ilLoop).lTime
            End If
            If ilRowCount >= vbcLog1.Value Then
                If llShowTime <> -1 Then
                    slStr = gCurrencyToTime(CCur(llShowTime))
                    slTime = gFormatTime(slStr, "A", "1")
                    plcLog1Tm.Caption = " " & slTime
                Else
                    plcLog1Tm.Caption = ""
                End If
                Exit Sub
            End If
        End If
    Next ilLoop
    plcLog1Tm.Caption = ""
End Sub
Private Sub vbcLog2_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    pbcLog2.Cls
    pbcLog2_Paint
    Screen.MousePointer = vbDefault
End Sub
Private Sub vbcLog2_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub vbcLog2_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    If Y < (vbcLog2.height \ 2) Then
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconUp.DragIcon
        End If
        mDragOver DRAGLOG2, State, 0    'at top
    Else
        If imDragSrce = DRAGLOG1 Then
            lacL1Frame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGLOG2 Then
            lacL2Frame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGHOLD Then
            lacWAFrame(0).DragIcon = IconTraf!imcIconDown.DragIcon
        End If
        mDragOver DRAGLOG2, State, 1    'at bottom
    End If
End Sub

Private Sub vbcLog2_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcLog2Type.Visible = False
    lbcAdvt.Visible = False
End Sub
Private Sub vbcLog2_Scroll()
    Dim ilLoop As Integer
    Dim slTime As String
    Dim llShowTime As Long
    Dim slStr As String
    Dim ilRowCount As Integer
    ilRowCount = 0
    llShowTime = -1
    If imLog2Type = 4 Then
        'For ilLoop = LBound(tmL2Evt) To UBound(tmL2Evt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tmL2Evt) - 1 Step 1
            '7/5/14: Add check box for showing/not showing ghost spots
            'If (imL2View = 1) Or (((tmL2Evt(ilLoop).iType >= 2) And (tmL2Evt(ilLoop).iType <= 9)) Or ((tmL2Evt(ilLoop).iType = 99)) Or ((tmL2Evt(ilLoop).iType = 100)) Or ((tmL2Evt(ilLoop).iType = 101))) Then
            If (imL2View = 1) Or (((tmL2Evt(ilLoop).iType >= 2) And (tmL2Evt(ilLoop).iType <= 9)) Or ((tmL2Evt(ilLoop).iType = 99)) Or ((tmL2Evt(ilLoop).iType = 100)) Or ((tmL2Evt(ilLoop).iType = 101) And (ckcShowGhost.Value = vbChecked))) Then
                ilRowCount = ilRowCount + 1
                If tmL2Evt(ilLoop).iType < 99 Then
                    llShowTime = tmL2Evt(ilLoop).lTime
                End If
                If ilRowCount >= vbcLog2.Value Then
                    If llShowTime <> -1 Then
                        slStr = gCurrencyToTime(CCur(llShowTime))
                        slTime = gFormatTime(slStr, "A", "1")
                        plcLog2Tm.Caption = " " & slTime
                    Else
                        plcLog2Tm.Caption = ""
                    End If
                    Exit Sub
                End If
            End If
        Next ilLoop
        plcLog2Tm.Caption = ""
    End If
End Sub
Private Sub vbcMissed_Change()
    If imIgnoreChg = True Then
        imIgnoreChg = False
        Exit Sub
    End If
    Screen.MousePointer = vbHourglass
    pbcMissed.Cls
    pbcMissed_Paint
    Screen.MousePointer = vbDefault
End Sub
Private Sub vbcMissed_DragDrop(Source As control, X As Single, Y As Single)
    imIgnoreChg = False
    mClearDrag False
    imSelectDelay = False
End Sub

Private Sub vbcMissed_DragOver(Source As control, X As Single, Y As Single, State As Integer)
    If Y < (vbcMissed.height \ 2) Then
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconUp.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconUp.DragIcon
        End If
        mDragOver DRAGADMD, State, 0    'at top
    Else
        If imDragSrce = DRAGCONTRACT Then
            lacAFrame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGADMD Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDown.DragIcon
        ElseIf imDragSrce = DRAGWORKAREA Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDown.DragIcon
        End If
        mDragOver DRAGADMD, State, 1    'at bottom
    End If
End Sub

Private Sub vbcMissed_GotFocus()
    If tmcClick.Enabled Or imIgnoreGotFocus Then
        pbcClickFocus.SetFocus
        Exit Sub
    End If
    lbcAdMdType.Visible = False
    lbcAdvt.Visible = False
End Sub

Private Function mProductCheck(ilInRow As Integer, tlEvt() As EVTINFO, llSdfCode As Long, ilMnfComp1 As Integer, ilMnfComp2 As Integer, slInDate As String)
    Dim ilRow As Integer
    Dim ilBypass As Integer
    Dim ilSpotIndex As Integer
    Dim llAvailTime As Long
    Dim llStartAvailTime As Long
    Dim llEndAvailTime As Long
    Dim ilIndex As Integer
    Dim ilPass As Integer
    Dim ilBNoPasses As Integer
    Dim llPass2StartAvailTime As Long
    Dim ilANoPasses As Integer
    Dim llPass2EndAvailTime As Long
    Dim llDate As Long
    Dim ilDate0 As Integer
    Dim ilDate1 As Integer
    Dim ilLoop As Integer
    Dim ilRet As Integer

    If (tgVpf(imVpfIndex).sSCompType = "T") And (lmCompTime <= 0) Then
        mProductCheck = True
        Exit Function
    End If
    'Find Avail
    ilRow = ilInRow - 1
    Do
        If (tlEvt(ilRow).iType >= 2) And (tlEvt(ilRow).iType <= 9) Then
            Exit Do
        End If
        ilRow = ilRow - 1
    'Loop While ilRow > LBound(tlEvt)
    Loop While ilRow > imLBEvt
    'Test within current avail (if Back to Back- then two spots of
    'same competitives allowed if three spots or room for a third spot)
    If (tgVpf(imVpfIndex).sSCompType = "N") Then    'N="Not Back to Back"
        ilSpotIndex = ilRow + 1
        Do
            If (tlEvt(ilSpotIndex).iType <> 100) And (tlEvt(ilSpotIndex).iType <> 101) Then
                If ilSpotIndex + 1 < UBound(tlEvt) Then
                    If tlEvt(ilSpotIndex).iType <> 99 Then
                        Exit Do
                    Else
                        If tlEvt(ilSpotIndex + 1).iType <> 101 Then
                            Exit Do
                        End If
                    End If
                Else
                    Exit Do
                End If
            Else
                If tlEvt(ilSpotIndex).lSdfCode = llSdfCode Then
                    ilBypass = True
                Else
                    ilBypass = False
                End If
                If Not ilBypass Then
                    If (ilMnfComp1 <> 0) And ((ilMnfComp1 = tlEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp1 = tlEvt(ilSpotIndex).iMnfComp2)) Then
                        If ilSpotIndex + 1 < UBound(tlEvt) Then
                            If (tlEvt(ilSpotIndex - 1).lSdfCode = llSdfCode) Or (tlEvt(ilSpotIndex + 1).lSdfCode = llSdfCode) Then
                                mProductCheck = False
                                Exit Function
                            End If
                        Else
                            If (tlEvt(ilSpotIndex - 1).lSdfCode = llSdfCode) Then
                                mProductCheck = False
                                Exit Function
                            End If
                        End If
                    ElseIf (ilMnfComp2 <> 0) And ((ilMnfComp2 = tlEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp2 = tlEvt(ilSpotIndex).iMnfComp2)) Then
                        If ilSpotIndex + 1 < UBound(tlEvt) Then
                            If (tlEvt(ilSpotIndex - 1).lSdfCode = llSdfCode) Or (tlEvt(ilSpotIndex + 1).lSdfCode = llSdfCode) Then
                                mProductCheck = False
                                Exit Function
                            End If
                        Else
                            If (tlEvt(ilSpotIndex - 1).lSdfCode = llSdfCode) Then
                                mProductCheck = False
                                Exit Function
                            End If
                        End If
                    End If
                End If
            End If
            ilSpotIndex = ilSpotIndex + 1
        Loop While ilSpotIndex < UBound(tlEvt)
    Else    'Not in same break or by time
        'Test avail being considered
        ilSpotIndex = ilRow + 1
        Do
            If (tlEvt(ilSpotIndex).iType <> 100) And (tlEvt(ilSpotIndex).iType <> 101) Then
                If ilSpotIndex + 1 < UBound(tlEvt) Then
                    If tlEvt(ilSpotIndex).iType <> 99 Then
                        Exit Do
                    Else
                        If tlEvt(ilSpotIndex + 1).iType <> 101 Then
                            Exit Do
                        End If
                    End If
                Else
                    Exit Do
                End If
            Else
                If tlEvt(ilSpotIndex).lSdfCode = llSdfCode Then
                    ilBypass = True
                Else
                    ilBypass = False
                End If
                If Not ilBypass Then
                    If (ilMnfComp1 <> 0) And ((ilMnfComp1 = tlEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp1 = tlEvt(ilSpotIndex).iMnfComp2)) Then
                        mProductCheck = False
                        Exit Function
                    End If
                    If (ilMnfComp2 <> 0) And ((ilMnfComp2 = tlEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp2 = tlEvt(ilSpotIndex).iMnfComp2)) Then
                        mProductCheck = False
                        Exit Function
                    End If
                End If
            End If
            ilSpotIndex = ilSpotIndex + 1
        Loop While ilSpotIndex < UBound(tlEvt)
    End If
    If lmCompTime <= 0 Then
        mProductCheck = True
        Exit Function
    End If
    llAvailTime = tlEvt(ilRow).lTime
    llStartAvailTime = llAvailTime - lmCompTime
    'If llStartAvailTime < 0 Then
    '    llStartAvailTime = 0
    'End If
    'llEndAvailTime = llAvailTime + lmCompTime
    'If llEndAvailTime > 86400 Then
    '    llEndAvailTime = 86400
    'End If
    ilBNoPasses = 1
    If llStartAvailTime < 0 Then
        If tmVef.sType <> "G" Then
            ilBNoPasses = 2
            llPass2StartAvailTime = 86400 + llStartAvailTime
        End If
        llStartAvailTime = 0
    End If
    llEndAvailTime = llAvailTime + lmCompTime
    ilANoPasses = 1
    If llEndAvailTime > 86400 Then
        If tmVef.sType <> "G" Then
            ilANoPasses = 2
            llPass2EndAvailTime = llEndAvailTime - 86400
        End If
        llEndAvailTime = 86400
    End If
    'Test avails prior to avail being considered
    ilIndex = ilRow - 1
    ReDim tlTEvt(LBound(tlEvt) To UBound(tlEvt)) As EVTINFO
    For ilLoop = LBound(tlEvt) To UBound(tlEvt) Step 1
        tlTEvt(ilLoop) = tlEvt(ilLoop)
    Next ilLoop
    For ilPass = 1 To ilBNoPasses Step 1
        Do
            'If ilIndex < LBound(tlTEvt) Then
            If ilIndex < imLBEvt Then
                Exit Do
            End If
            If (tlTEvt(ilIndex).iType >= 2) And (tlTEvt(ilIndex).iType <= 9) Then
                llAvailTime = tlTEvt(ilIndex).lTime
                If tlTEvt(ilIndex).lTime < llStartAvailTime Then
                    Exit Do
                End If
    
                ilSpotIndex = ilIndex + 1
                Do
                    If (tlTEvt(ilSpotIndex).iType <> 100) And (tlTEvt(ilSpotIndex).iType <> 101) Then
                        If ilSpotIndex + 1 < UBound(tlTEvt) Then
                            If tlTEvt(ilSpotIndex).iType <> 99 Then
                                Exit Do
                            Else
                                If tlTEvt(ilSpotIndex + 1).iType <> 101 Then
                                    Exit Do
                                End If
                            End If
                        Else
                            Exit Do
                        End If
                    Else
                        If tlTEvt(ilSpotIndex).lSdfCode = llSdfCode Then
                            ilBypass = True
                        Else
                            ilBypass = False
                        End If
                        If Not ilBypass Then
                            If (ilMnfComp1 <> 0) And ((ilMnfComp1 = tlTEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp1 = tlTEvt(ilSpotIndex).iMnfComp2)) Then
                                mProductCheck = False
                                Exit Function
                            End If
                            If (ilMnfComp2 <> 0) And ((ilMnfComp2 = tlTEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp2 = tlTEvt(ilSpotIndex).iMnfComp2)) Then
                                mProductCheck = False
                                Exit Function
                            End If
                        End If
                    End If
                    ilSpotIndex = ilSpotIndex + 1
                Loop While ilSpotIndex < UBound(tlTEvt)
            ElseIf tlTEvt(ilIndex).iType = 1 Then
                llAvailTime = tlTEvt(ilIndex).lTime
            Else
                llAvailTime = llStartAvailTime + 1
            End If
            ilIndex = ilIndex - 1
        Loop While llAvailTime > llStartAvailTime
        If ilPass = ilBNoPasses Then
            Exit For
        End If
        If slInDate = "" Then
            Exit For
        End If
        '1/21/12: Speed up conflict check
        'ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, gDecOneDay(slInDate), "12M", "12M", 0, tmCTVcf0(), tmCTVcf6(), tmCTVcf7(), imEvtType(), tlTEvt())
        'If Not ilRet Then
        '    Exit For
        'End If
        llDate = gDateValue(gDecOneDay(slInDate))
        Select Case gWeekDayLong(llDate)
            Case 0  'Next Monday
                mCopyEvt tmMoEvt(), tlTEvt()
            Case 1
                mCopyEvt tmTuEvt(), tlTEvt()
            Case 2
                mCopyEvt tmWeEvt(), tlTEvt()
            Case 3
                mCopyEvt tmThEvt(), tlTEvt()
            Case 4
                mCopyEvt tmFrEvt(), tlTEvt()
            Case 5
                mCopyEvt tmSaEvt(), tlTEvt()
            Case 6
                If llDate = lmPrevSuDate Then
                    mCopyEvt tmPrevSuEvt(), tlTEvt()
                Else
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, gDecOneDay(slInDate), "12M", "12M", 0, tmCTVcf0(), tmCTVcf6(), tmCTVcf7(), imEvtType(), tlTEvt())
                    If Not ilRet Then
                        Exit For
                    End If
                    mCopyEvt tlTEvt(), tmPrevSuEvt()
                    lmPrevSuDate = llDate
                End If
        End Select
        ilIndex = UBound(tlTEvt) - 1
        llStartAvailTime = llPass2StartAvailTime - 1
    Next ilPass
    'Test avails after avail being considered
    ilIndex = ilRow + 1
    ReDim tlTEvt(LBound(tlEvt) To UBound(tlEvt)) As EVTINFO
    For ilLoop = LBound(tlEvt) To UBound(tlEvt) Step 1
        tlTEvt(ilLoop) = tlEvt(ilLoop)
    Next ilLoop
    For ilPass = 1 To ilANoPasses Step 1
        Do
            If ilIndex >= UBound(tlTEvt) Then
                Exit Do
            End If
    
            If (tlTEvt(ilIndex).iType >= 2) And (tlTEvt(ilIndex).iType <= 9) Then
                llAvailTime = tlTEvt(ilIndex).lTime
                If tlTEvt(ilIndex).lTime > llEndAvailTime Then
                    Exit Do
                End If
    
                ilSpotIndex = ilIndex + 1
                Do
                    If (tlTEvt(ilSpotIndex).iType <> 100) And (tlTEvt(ilSpotIndex).iType <> 101) Then
                        If ilSpotIndex + 1 < UBound(tlTEvt) Then
                            If tlTEvt(ilSpotIndex).iType <> 99 Then
                                Exit Do
                            Else
                                If tlTEvt(ilSpotIndex + 1).iType <> 101 Then
                                    Exit Do
                                End If
                            End If
                        Else
                            Exit Do
                        End If
                    Else
                        If tlTEvt(ilSpotIndex).lSdfCode = llSdfCode Then
                            ilBypass = True
                        Else
                            ilBypass = False
                        End If
                        If Not ilBypass Then
                            If (ilMnfComp1 <> 0) And ((ilMnfComp1 = tlTEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp1 = tlTEvt(ilSpotIndex).iMnfComp2)) Then
                                mProductCheck = False
                                Exit Function
                            End If
                            If (ilMnfComp2 <> 0) And ((ilMnfComp2 = tlTEvt(ilSpotIndex).iMnfComp1) Or (ilMnfComp2 = tlTEvt(ilSpotIndex).iMnfComp2)) Then
                                mProductCheck = False
                                Exit Function
                            End If
                        End If
                    End If
                    ilSpotIndex = ilSpotIndex + 1
                Loop While ilSpotIndex < UBound(tlTEvt)
            ElseIf tlTEvt(ilIndex).iType = 1 Then
                llAvailTime = tlTEvt(ilIndex).lTime
            Else
                llAvailTime = llEndAvailTime - 1
            End If
            ilIndex = ilIndex + 1
        Loop While llAvailTime < llEndAvailTime
        If ilPass = ilANoPasses Then
            Exit For
        End If
        If slInDate = "" Then
            Exit For
        End If
        '1/21/12: Speed up conflict check
        'ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, gIncOneDay(slInDate), "12M", "12M", 0, tmCTVcf0(), tmCTVcf6(), tmCTVcf7(), imEvtType(), tlTEvt())
        'If Not ilRet Then
        '    Exit For
        'End If
        llDate = gDateValue(gIncOneDay(slInDate))
        Select Case gWeekDayLong(llDate)
            Case 0  'Next Monday
                If llDate = lmNextMoDate Then
                    mCopyEvt tmNextMoEvt(), tlTEvt()
                Else
                    ilRet = gBuildEventSpotDay(imVehCode, imVpfIndex, gIncOneDay(slInDate), "12M", "12M", 0, tmCTVcf0(), tmCTVcf6(), tmCTVcf7(), imEvtType(), tlTEvt())
                    If Not ilRet Then
                        Exit For
                    End If
                    mCopyEvt tlTEvt(), tmNextMoEvt()
                    lmNextMoDate = llDate
                End If
            Case 1
                mCopyEvt tmTuEvt(), tlTEvt()
            Case 2
                mCopyEvt tmWeEvt(), tlTEvt()
            Case 3
                mCopyEvt tmThEvt(), tlTEvt()
            Case 4
                mCopyEvt tmFrEvt(), tlTEvt()
            Case 5
                mCopyEvt tmSaEvt(), tlTEvt()
            Case 6
                mCopyEvt tmSuEvt(), tlTEvt()
        End Select
        ilIndex = 1
        llEndAvailTime = llPass2EndAvailTime
    Next ilPass
    mProductCheck = True
    Exit Function
End Function


'*******************************************************
'*                                                     *
'*      Procedure Name:mEnableBox                      *
'*                                                     *
'*             Created:6/3/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Enable specified control       *
'*                                                     *
'*******************************************************
Private Sub mEnableBox(ilBoxNo As Integer)
    Dim llColPos As Long
    Dim ilCol As Integer
    


    If imEnableSource = 0 Then
        If ilBoxNo < imLBCtrls Or ilBoxNo > UBound(tmCtrls) Then
            Exit Sub
        End If
        Select Case ilBoxNo 'Branch on box type (control)
            Case VIEWINDEX
                'pbcDW.Width = tmCtrls(ilBoxNo).fBoxW
                'gMoveFormCtrl pbcSelect(imDW), pbcDW, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                'pbcDW.Top = pbcDW.Top + 30
                'pbcDW_Paint
                'pbcDW.Visible = True
                'pbcDW.SetFocus
                mPopView
                gMoveFormCtrl pbcSelect(imDW), edcDW, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                edcDW.Top = edcDW.Top + 30
                cmcDW.Left = edcDW.Left + edcDW.Width
                cmcDW.Top = edcDW.Top
                lbcDW.Left = edcDW.Left
                lbcDW.Top = edcDW.Top + edcDW.height
                edcDW.Visible = True
                cmcDW.Visible = True
                lbcDW.Visible = True
                lbcDW.ZOrder vbBringToFront
                edcDW.SetFocus
            Case HIGHLIGHTINDEX
                pbcHighlight.Width = tmCtrls(ilBoxNo).fBoxW
                gMoveFormCtrl pbcSelect(imDW), pbcHighlight, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                pbcHighlight.Top = pbcHighlight.Top + 30
                pbcHighlight_Paint
                pbcHighlight.Visible = True
                pbcHighlight.SetFocus
            Case MISSEDREASONINDEX
                'pbcReason.Width = tmCtrls(ilBoxNo).fBoxW
                'gMoveFormCtrl pbcSelect(imDW), pbcReason, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                'pbcReason.Top = pbcReason.Top + 30
                'pbcReason_Paint
                'pbcReason.Visible = True
                'pbcReason.SetFocus
                gMoveFormCtrl pbcSelect(imDW), edcMCReason, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                edcMCReason.Top = edcMCReason.Top + 30
                cmcMCReason.Left = edcMCReason.Left + edcMCReason.Width
                cmcMCReason.Top = edcMCReason.Top
                lbcMCReason.Left = edcMCReason.Left
                lbcMCReason.Top = edcMCReason.Top + edcMCReason.height
                lbcMCReason.ListIndex = imMissedReason
                edcMCReason.Visible = True
                cmcMCReason.Visible = True
                lbcMCReason.Visible = True
                lbcMCReason.ZOrder vbBringToFront
                edcMCReason.SetFocus
            Case CANCELREASONINDEX
                'pbcReason.Width = tmCtrls(ilBoxNo).fBoxW
                'gMoveFormCtrl pbcSelect(imDW), pbcReason, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                'pbcReason.Top = pbcReason.Top + 30
                'pbcReason_Paint
                'pbcReason.Visible = True
                'pbcReason.SetFocus
                gMoveFormCtrl pbcSelect(imDW), edcMCReason, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                edcMCReason.Top = edcMCReason.Top + 30
                cmcMCReason.Left = edcMCReason.Left + edcMCReason.Width
                cmcMCReason.Top = edcMCReason.Top
                lbcMCReason.Left = edcMCReason.Left
                lbcMCReason.Top = edcMCReason.Top + edcMCReason.height
                lbcMCReason.ListIndex = imCancelReason
                edcMCReason.Visible = True
                cmcMCReason.Visible = True
                lbcMCReason.Visible = True
                lbcMCReason.ZOrder vbBringToFront
                edcMCReason.SetFocus
            Case MISSEDAREAINDEX
                If imDW = 0 Then
                    gMoveFormCtrl pbcSelect(imDW), edcLog2Type, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                    edcLog2Type.Top = edcLog2Type.Top + 30
                    cmcLog2Type.Left = edcLog2Type.Left + edcLog2Type.Width
                    cmcLog2Type.Top = edcLog2Type.Top
                    If smMissedFromOthers = "Y" Then
                        pbcMissedType.Left = edcLog2Type.Left
                        pbcMissedType.Top = edcLog2Type.Top + edcLog2Type.height
                        lbcLog2Type.Left = edcLog2Type.Left
                        lbcLog2Type.Top = pbcMissedType.Top + pbcMissedType.height
                        pbcMissedType.ZOrder
                        pbcMissedType.Visible = True
                    Else
                        lbcLog2Type.Left = edcLog2Type.Left
                        lbcLog2Type.Top = edcLog2Type.Top + edcLog2Type.height
                        pbcMissedType.Visible = False
                    End If
                    If imLog2Type = 4 Then
                        edcLog2Dt.Left = 7500   '6060
                        edcLog2Dt.Top = 30
                        cmcLog2Dt.Left = edcLog2Dt.Left + edcLog2Dt.Width
                        cmcLog2Dt.Top = edcLog2Type.Top
                    Else
                        edcLog2Dt.Left = 6690
                        edcLog2Dt.Top = 385
                        cmcLog2Dt.Left = edcLog2Dt.Left + edcLog2Dt.Width
                        cmcLog2Dt.Top = edcLog2Dt.Top + 15
                    End If
                    lbcAdvt.Left = edcLog2Dt.Left
                    lbcAdvt.Top = edcLog2Type.Top + edcLog2Type.height
                    plcCalendar.Left = edcLog2Dt.Left
                    plcCalendar.Top = edcLog2Dt.Top + edcLog2Dt.height
                    edcLog2Type.Visible = True
                    cmcLog2Type.Visible = True
                    If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Or (imLog2Type = 3) Then
                        edcLog2Dt.Visible = True
                        cmcLog2Dt.Visible = True
                    Else
                        edcLog2Dt.Visible = False
                        cmcLog2Dt.Visible = False
                    End If
                    edcLog2Type.SetFocus
                Else
                    gMoveFormCtrl pbcSelect(imDW), edcMissedType, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                    edcMissedType.Top = edcMissedType.Top + 30
                    cmcMissedType.Left = edcMissedType.Left + edcMissedType.Width
                    cmcMissedType.Top = edcMissedType.Top
                    edcMissedDt.Left = cmcMissedType.Left + cmcMissedType.Width + 60
                    edcMissedDt.Top = edcMissedType.Top
                    cmcMissedDt.Left = edcMissedDt.Left + edcMissedDt.Width
                    cmcMissedDt.Top = edcMissedType.Top
                    If smMissedFromOthers = "Y" Then
                        pbcMissedType.Left = edcMissedType.Left
                        pbcMissedType.Top = edcMissedType.Top + edcMissedType.height
                        lbcAdMdType.Left = edcMissedType.Left
                        lbcAdMdType.Top = pbcMissedType.Top + pbcMissedType.height
                        pbcMissedType.Visible = True
                        pbcMissedType.ZOrder
                    Else
                        lbcAdMdType.Left = edcMissedType.Left
                        lbcAdMdType.Top = edcMissedType.Top + edcMissedType.height
                        pbcMissedType.Visible = False
                    End If
                    lbcAdvt.Left = edcMissedDt.Left
                    lbcAdvt.Top = edcMissedDt.Top + edcMissedDt.height
                    plcCalendar.Left = edcMissedDt.Left
                    plcCalendar.Top = edcMissedDt.Top + edcMissedDt.height
                    edcMissedType.Visible = True
                    cmcMissedType.Visible = True
                    
                    If (tmVef.sType <> "G") And ((imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Or (imAdMdType = 3)) Then
                        edcMissedDt.Visible = True
                        cmcMissedDt.Visible = True
                    Else
                        edcMissedDt.Visible = False
                        cmcMissedDt.Visible = False
                    End If
                    If imAdMdType = 3 Then  'Missed by Advertiser
                        edcMissedDt.Visible = True
                        cmcMissedDt.Visible = True
                    End If
                    edcMissedType.SetFocus
                End If
            Case WORKAREAINDEX
                'pbcToggleRot.Width = tmCtrls(ilBoxNo).fBoxW
                gMoveFormCtrl pbcSelect(imDW), pbcToggleRot, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                pbcToggleRot.Top = pbcToggleRot.Top + 30
                pbcToggleDates.Left = pbcToggleRot.Left + pbcToggleRot.Width + 60
                pbcToggleDates.Top = pbcToggleRot.Top
                pbcToggleRot_Paint
                pbcToggleRot.Visible = True
                If imToggleRot = 1 Then
                    pbcToggleDates_Paint
                    pbcToggleDates.Visible = True
                ElseIf imToggleRot = 2 Then
                    pbcToggleDates_Paint
                    pbcToggleDates.Visible = True
                ElseIf imToggleRot = 3 Then
                    pbcToggleDates_Paint
                    pbcToggleDates.Visible = True
                End If
            Case SHOWPRICEINDEX
                'pbcPrice.Width = tmCtrls(ilBoxNo).fBoxW
                'gMoveFormCtrl pbcSelect(imDW), pbcPrice, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                'pbcPrice.Top = pbcPrice.Top + 30
                'pbcPrice_Paint
                'pbcPrice.Visible = True
                'pbcPrice.SetFocus
                gMoveFormCtrl pbcSelect(imDW), edcMore, tmCtrls(ilBoxNo).fBoxX, tmCtrls(ilBoxNo).fBoxY
                edcMore.Top = edcMore.Top + 30
                cmcMore.Left = edcMore.Left + edcMore.Width
                cmcMore.Top = edcMore.Top
                lbcMore.Left = edcMore.Left
                lbcMore.Top = edcMore.Top + edcMore.height
                lbcMore.height = gListBoxHeight(lbcMore.ListCount, 11)
                lbcMore.ZOrder
                edcMore.Visible = True
                cmcMore.Visible = True
                lbcMore.Visible = True
        End Select
    ElseIf imEnableSource = 1 Then
        If (grdNote.Row < grdNote.FixedRows) Or (grdNote.Row >= grdNote.Rows) Or (grdNote.Col < grdNote.FixedCols) Or (grdNote.Col >= grdNote.Cols - 1) Then
            Exit Sub
        End If
        llColPos = 0
        For ilCol = 0 To grdNote.Col - 1 Step 1
            llColPos = llColPos + grdNote.ColWidth(ilCol)
        Next ilCol
        Select Case ilBoxNo 'Branch on box type (control)
            Case WEEKDATEINDEX
                edcNote.MaxLength = 0
                edcNote.Text = grdNote.Text
                edcNote.Move grdNote.Left + llColPos + 30, grdNote.Top + grdNote.RowPos(imEnableRow) + 30, grdNote.ColWidth(imEnableCol) - 30, grdNote.rowHeight(imEnableRow) - 15
                cmcNote.Left = edcNote.Left + edcNote.Width
                cmcNote.Top = edcNote.Top
                plcCalendar.Left = edcNote.Left
                plcCalendar.Top = edcNote.Top + edcNote.height
                edcNote.Visible = True
                cmcNote.Visible = True
                edcNote.SetFocus
            Case NOTEINDEX
                edcNote.MaxLength = 0
                edcNote.Text = grdNote.Text
                edcNote.Move grdNote.Left + llColPos + 30, grdNote.Top + grdNote.RowPos(imEnableRow) + 30, grdNote.ColWidth(imEnableCol) - 30, grdNote.rowHeight(imEnableRow) - 15
                edcNote.Visible = True
                edcNote.SetFocus
        End Select
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mSetShow                        *
'*                                                     *
'*             Created:6/04/93       By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Format user input for a control*
'*                      to be displayed on the form    *
'*                                                     *
'*******************************************************
Private Sub mSetShow(ilBoxNo As Integer)
    Dim slStr As String
    Dim slNameCode As String
    Dim slName As String
    Dim ilRet As Integer
    Dim ilDW As Integer
    Dim ilViewSelect As Integer
    
    If imEnableSource = 0 Then
        If (ilBoxNo < imLBCtrls) Or (ilBoxNo > UBound(tmCtrls)) Then
            Exit Sub
        End If
        Select Case ilBoxNo
            Case VIEWINDEX
                'pbcDW.Visible = False
                'If imDW = 0 Then
                '    slStr = "Daily"
                'Else
                '    If imViewSelect = 1 Then
                '        slStr = "Single"
                '    Else
                '        slStr = "Weekly"
                '    End If
                'End If
                edcDW.Visible = False
                cmcDW.Visible = False
                lbcDW.Visible = False
                slStr = edcDW.Text
                If slStr = "Single" Then
                    ilDW = 1
                    ilViewSelect = 1
                ElseIf slStr = "Daily" Then
                    ilDW = 0
                    ilViewSelect = 0
                Else
                    slStr = "Weekly"
                    ilDW = 1
                    ilViewSelect = 0
                End If
                If (ilDW <> imDW) Or (ilViewSelect <> imViewSelect) Then
                    imDW = ilDW
                    imViewSelect = ilViewSelect
                    gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
                    mViewChgd
                End If
                'gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
            Case HIGHLIGHTINDEX
                pbcHighlight.Visible = False
                If imHighlight = 1 Then
                    slStr = "Same Prot'n"
                ElseIf imHighlight = 2 Then
                    slStr = "Conflict Chk"
                ElseIf imHighlight = 3 Then
                    slStr = "Split Netwk"
                Else
                    slStr = "Same Advt"
                End If
                gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
            Case MISSEDREASONINDEX
                'pbcReason.Visible = False
                edcMCReason.Visible = False
                cmcMCReason.Visible = False
                lbcMCReason.Visible = False
                If (imMissedReason >= LBound(tmMissedCode)) And (imMissedReason < UBound(tmMissedCode)) Then
                    slNameCode = tmMissedCode(imMissedReason).sKey
                    ilRet = gParseItem(slNameCode, 1, "\", slName)
                    slStr = Trim$(slName)
                Else
                    slStr = ""
                End If
                gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
            Case CANCELREASONINDEX
                'pbcReason.Visible = False
                edcMCReason.Visible = False
                cmcMCReason.Visible = False
                lbcMCReason.Visible = False
                If (imCancelReason >= LBound(tmMissedCode)) And (imCancelReason < UBound(tmMissedCode)) Then
                    slNameCode = tmMissedCode(imCancelReason).sKey
                    ilRet = gParseItem(slNameCode, 1, "\", slName)
                    slStr = Trim$(slName)
                Else
                    slStr = ""
                End If
                gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
            Case MISSEDAREAINDEX
                If imDW = 0 Then
                    edcLog2Type.Visible = False
                    cmcLog2Type.Visible = False
                    pbcMissedType.Visible = False
                    lbcLog2Type.Visible = False
                    If (imLog2Type <> 4) Then
                        edcLog2Dt.Visible = False
                        cmcLog2Dt.Visible = False
                    End If
                    lbcAdvt.Visible = False
                    plcCalendar.Visible = False
                    If (imLog2Type = 0) Or (imLog2Type = 4) Or (imLog2Type = 10) Or (imLog2Type = 11) Or (imLog2Type = 3) Then
                        slStr = Trim$(edcLog2Type.Text) & " " & Trim$(edcLog2Dt.Text)
                    Else
                        slStr = Trim$(edcLog2Type.Text)
                    End If
                    gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
                Else
                    edcMissedType.Visible = False
                    cmcMissedType.Visible = False
                    pbcMissedType.Visible = False
                    lbcAdMdType.Visible = False
                    edcMissedDt.Visible = False
                    cmcMissedDt.Visible = False
                    lbcAdvt.Visible = False
                    plcCalendar.Visible = False
                    If tmVef.sType <> "G" Then
                        If (imAdMdType = 0) Or (imAdMdType = 9) Or (imAdMdType = 10) Or (imAdMdType = 3) Then  'Missed by Date; Cancelled; Hidded
                            slStr = Trim$(edcMissedType.Text) & " " & Trim$(edcMissedDt.Text)
                        Else
                            slStr = Trim$(edcMissedType.Text)
                        End If
                    Else
                        slStr = Trim$(edcMissedType.Text)
                    End If
                    gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
                End If
            Case WORKAREAINDEX
                pbcToggleRot.Visible = False
                pbcToggleDates.Visible = False
                If imToggleRot = 1 Then
                    slStr = "CntrAll-Graph"
                ElseIf imToggleRot = 2 Then
                    slStr = "CntrSchd-Graph"
                ElseIf imToggleRot = 3 Then
                    slStr = "LineSchd-Graph"
                Else
                    slStr = "Work area"  '"Spot Info"
                End If
                If imToggleRot <> 0 Then
                    If imToggleDate = 1 Then
                        slStr = slStr & " All Days"
                    Else
                        slStr = slStr & " Past Days"    '"Spot Info"
                    End If
                End If
                gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
            Case SHOWPRICEINDEX
                'pbcPrice.Visible = False
                'If imMore = 0 Then
                '    slStr = "No"
                'Else
                '    slStr = "Yes"
                'End If
                If imMoreIndex >= 0 Then
                    If (imMore <> lbcMore.ItemData(imMoreIndex)) Then
                        If (lbcMore.ItemData(imMoreIndex) = 1) Or (imMore = 1) Then
                            If ((imAdMdType = 4) And (tgSpf.sSchdRemnant <> "Y")) Or (imAdMdType = 5) Or (imAdMdType = 6) Or ((imAdMdType = 7) And (tgSpf.sSchdPSA <> "Y")) Or ((imAdMdType = 8) And (tgSpf.sSchdPromo <> "Y")) Then
                                imMore = lbcMore.ItemData(imMoreIndex)
                                mMakeManSchView 1
                            End If
                        End If
                    End If
                    imMore = lbcMore.ItemData(imMoreIndex)
                Else
                    If imMore = 1 Then
                        If ((imAdMdType = 4) And (tgSpf.sSchdRemnant <> "Y")) Or (imAdMdType = 5) Or (imAdMdType = 6) Or ((imAdMdType = 7) And (tgSpf.sSchdPSA <> "Y")) Or ((imAdMdType = 8) And (tgSpf.sSchdPromo <> "Y")) Then
                            imMore = 0
                            mMakeManSchView 1
                        End If
                    End If
                    imMore = 0
                End If
                edcMore.Visible = False
                cmcMore.Visible = False
                lbcMore.Visible = False
                slStr = edcMore.Text
                gSetShow pbcSelect(imDW), slStr, tmCtrls(ilBoxNo)
                If imDW = 1 Then    'rbcAdvt.Value Then
                    'Repaint
                    pbcContract.Cls
                    pbcMissed.Cls
                    pbcAdWorkArea.Cls
                    pbcContract_Paint
                    pbcMissed_Paint
                    pbcAdWorkArea_Paint
                ElseIf (imDW = 0) Then     '(rbcTime.Value) And (imLog2Type = 2) Then
                    pbcLog1.Cls
                    pbcLog1_Paint
                    'If (imLog2Type = 4) Then
                        pbcLog2.Cls
                        pbcLog2_Paint
                    'End If
                End If
        End Select
    ElseIf imEnableSource = 1 Then
        If (grdNote.Row < grdNote.FixedRows) Or (grdNote.Row >= grdNote.Rows) Or (grdNote.Col < grdNote.FixedCols) Or (grdNote.Col >= grdNote.Cols - 1) Then
            Exit Sub
        End If
        If imEnableRow = -1 Or imEnableCol = -1 Then
            Exit Sub
        End If
        Select Case imEnableCol ' 'Branch on box type (control)
            Case WEEKDATEINDEX
                edcNote.Visible = False
                cmcNote.Visible = False
                plcCalendar.Visible = False
                grdNote.TextMatrix(imEnableRow, imEnableCol) = edcNote.Text
            Case NOTEINDEX
                edcNote.Visible = False
                grdNote.TextMatrix(imEnableRow, imEnableCol) = edcNote.Text
        End Select
        imEnableCol = -1
        imEnableRow = -1
        imEnableSource = 0
    End If
End Sub

Private Function mBlockDay(llLock1 As Long, llLock2 As Long) As Integer
    Dim slUserName As String
    Dim ilRet As Integer

    'MAI/Sirius: Added 10/4 Added Record Lock
    mUnblockDay
    lmLock1RecCode = gCreateLockRec(hmRlf, "S", "S", llLock1, False, slUserName)
    If lmLock1RecCode = 0 Then
        ilRet = MsgBox("Unable to perform requested task as " & slUserName & " is working on day. Note: Screen will be refresh when Ok pressed", vbOKOnly + vbInformation, "Block")
        mBlockDay = False
        Exit Function
    End If
    If llLock2 > 0 Then
        lmLock2RecCode = gCreateLockRec(hmRlf, "S", "S", llLock2, False, slUserName)
        If lmLock2RecCode = 0 Then
            ilRet = MsgBox("Unable to perform requested task as " & slUserName & " is working on day. Note: Screen will be refresh when Ok pressed", vbOKOnly + vbInformation, "Block")
            ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLock1RecCode)
            mBlockDay = False
            Exit Function
        End If
    Else
        lmLock2RecCode = -1
    End If
    mBlockDay = True
End Function

Private Sub mUnblockDay()
    Dim ilRet As Integer
    If lmLock1RecCode > 0 Then
        ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLock1RecCode)
    End If
    If lmLock2RecCode > 0 Then
        ilRet = gDeleteLockRec_ByRlfCode(hmRlf, lmLock2RecCode)
    End If
End Sub

'*******************************************************
'*                                                     *
'*      Procedure Name:mTeamPop                        *
'*                                                     *
'*             Created:6/4/93        By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Populate Tema list box         *
'*                      if requireds                   *
'*                                                     *
'*******************************************************
Private Sub mTeamPop()
'   ilRet = gPopMnfPlusFieldsBox (MainForm, lbcLocal, lbcCtrl, sType)
'
'   mdemoPop
'   Where:
'
    Dim ilRet As Integer
    ilRet = gObtainMnfForType("Z", smTeamTag, tmTeam())
    Exit Sub
End Sub

Private Sub mGetEdcDate(ilDayIndex As Integer)
    Dim ilGsf As Integer

    If tmVef.sType <> "G" Then
        If imDW = 0 Then
            smEdcDate = edcLog1Dt.Text
        Else
            smEdcDate = edcDate.Text
        End If
        lmEdcDate = gDateValue(smEdcDate) + ilDayIndex
        smEdcDate = Format$(lmEdcDate, "m/d/yy")
        imEdcGameNo = 0
        lmLockDate = lmEdcDate
        imSsfDayIndex = gWeekDayStr(smEdcDate)
    Else
        If (imSelectedGameNo >= 0) And (imSelectedGameNo + ilDayIndex < lbcGameNo(0).ListCount) Then
            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilDayIndex)
            lmEdcDate = tmGsfInfo(ilGsf).lGameDate
            smEdcDate = Format$(lmEdcDate, "m/d/yy")
            imEdcGameNo = tmGsfInfo(ilGsf).iGameNo
            lmLockDate = imEdcGameNo
            imSsfDayIndex = ilDayIndex
        Else
            lmEdcDate = 0
            smEdcDate = ""
            imEdcGameNo = 0
            lmLockDate = 0
            imSsfDayIndex = ilDayIndex
        End If
    End If
End Sub

Private Function mGetGameColumnNo(ilGameNo As Integer) As Integer
    Dim ilLoop As Integer
    Dim ilGsf As Integer

    If imDW = 0 Then
        mGetGameColumnNo = 0
        Exit Function
    End If
    mGetGameColumnNo = -1
    For ilLoop = 0 To 6 Step 1
        If ilLoop + imSelectedGameNo < lbcGameNo(0).ListCount Then
            ilGsf = lbcGameNo(0).ItemData(imSelectedGameNo + ilLoop)
            If ilGameNo = tmGsfInfo(ilGsf).iGameNo Then
                mGetGameColumnNo = ilLoop
                Exit Function
            End If
        Else
            Exit Function
        End If
    Next ilLoop
End Function

Private Sub mInitMissedDropdown()
    lbcAdMdType.Clear
    If tmVef.sType <> "G" Then
        lbcAdMdType.AddItem "Current Week"  '"Missed Current Week"    '0
        imAdMdMap(lbcAdMdType.NewIndex) = 0
        'lbcAdMdType.AddItem "Missed by Date-Contract"
        lbcAdMdType.AddItem "Current Month" '"Missed Current Month"    '1
        imAdMdMap(lbcAdMdType.NewIndex) = 1
        lbcAdMdType.AddItem "Past Month"    '"Missed Past Months"    '2
        imAdMdMap(lbcAdMdType.NewIndex) = 2
        lbcAdMdType.AddItem "Advertiser"    '"Missed by Advertiser"    '3
        imAdMdMap(lbcAdMdType.NewIndex) = 3
        If tgSpf.sSchdRemnant <> "Y" Then
            lbcAdMdType.AddItem "Remnant"    '4
            imAdMdMap(lbcAdMdType.NewIndex) = 4
        End If
        lbcAdMdType.AddItem "Direct Response"    '5
        imAdMdMap(lbcAdMdType.NewIndex) = 5
        lbcAdMdType.AddItem "Per Inquiry"    '6
        imAdMdMap(lbcAdMdType.NewIndex) = 6
        If tgSpf.sSchdPSA <> "Y" Then
            lbcAdMdType.AddItem "PSA"    '7
            imAdMdMap(lbcAdMdType.NewIndex) = 7
        End If
        If tgSpf.sSchdPromo <> "Y" Then
            lbcAdMdType.AddItem "Promo"    '8
            imAdMdMap(lbcAdMdType.NewIndex) = 8
        End If
        lbcAdMdType.AddItem "Cancelled by Date"    '9
        imAdMdMap(lbcAdMdType.NewIndex) = 9
        lbcAdMdType.AddItem "Hidden by Date"    '10
        imAdMdMap(lbcAdMdType.NewIndex) = 10
        'lbcAdMdType.AddItem "Extra Bonus"  'Replaced by Fill- all code left in,
                                            'incase need to reinstall just remove comment symbol
    Else
        lbcAdMdType.AddItem "Current Events"  '"Missed Current Week"    '0
        imAdMdMap(lbcAdMdType.NewIndex) = 0
        'lbcAdMdType.AddItem "Missed by Date-Contract"
        lbcAdMdType.AddItem "Current Month" '"Missed Current Month"    '1
        imAdMdMap(lbcAdMdType.NewIndex) = 1
        lbcAdMdType.AddItem "Past Month"    '"Missed Past Months"    '2
        imAdMdMap(lbcAdMdType.NewIndex) = 2
        lbcAdMdType.AddItem "Advertiser"    '"Missed by Advertiser"    '3
        imAdMdMap(lbcAdMdType.NewIndex) = 3
        '5/4/11: Active manual mode contracts
        If tgSpf.sSchdRemnant <> "Y" Then
            lbcAdMdType.AddItem "Remnant"    '4
            imAdMdMap(lbcAdMdType.NewIndex) = 4
        End If
        lbcAdMdType.AddItem "Direct Response"    '5
        imAdMdMap(lbcAdMdType.NewIndex) = 5
        lbcAdMdType.AddItem "Per Inquiry"    '6
        imAdMdMap(lbcAdMdType.NewIndex) = 6
        If tgSpf.sSchdPSA <> "Y" Then
            lbcAdMdType.AddItem "PSA"    '7
            imAdMdMap(lbcAdMdType.NewIndex) = 7
        End If
        If tgSpf.sSchdPromo <> "Y" Then
            lbcAdMdType.AddItem "Promo"    '8
            imAdMdMap(lbcAdMdType.NewIndex) = 8
        End If
        '5/5/11
        lbcAdMdType.AddItem "Cancelled"    '9
        imAdMdMap(lbcAdMdType.NewIndex) = 9
        lbcAdMdType.AddItem "Hidden"    '10
        imAdMdMap(lbcAdMdType.NewIndex) = 10
    End If
    lbcAdMdType.height = gListBoxHeight(lbcAdMdType.ListCount, 11)
    lbcAdMdType.ListIndex = 0
    mSetShow MISSEDAREAINDEX
End Sub

Private Sub mInitL2MissedDropdown()
    lbcLog2Type.Clear
    If tmVef.sType <> "G" Then
        lbcLog2Type.AddItem "Missed Current Week"    '0
        imLog2Map(lbcLog2Type.NewIndex) = 0
        'lbcLog2Type.AddItem "Missed by Date-Contract"
        lbcLog2Type.AddItem "Missed Current Month"    '1
        imLog2Map(lbcLog2Type.NewIndex) = 1
        lbcLog2Type.AddItem "Missed Past Months"    '2
        imLog2Map(lbcLog2Type.NewIndex) = 2
        lbcLog2Type.AddItem "Missed by Advertiser"    '3
        imLog2Map(lbcLog2Type.NewIndex) = 3
        lbcLog2Type.AddItem "Log 2"    '4
        imLog2Map(lbcLog2Type.NewIndex) = 4
        If tgSpf.sSchdRemnant <> "Y" Then
            lbcLog2Type.AddItem "Remnant"    '5
            imLog2Map(lbcLog2Type.NewIndex) = 5
        End If
        lbcLog2Type.AddItem "Direct Response"    '6
        imLog2Map(lbcLog2Type.NewIndex) = 6
        lbcLog2Type.AddItem "Per Inquiry"    '7
        imLog2Map(lbcLog2Type.NewIndex) = 7
        If tgSpf.sSchdPSA <> "Y" Then
            lbcLog2Type.AddItem "PSA"    '8
            imLog2Map(lbcLog2Type.NewIndex) = 8
        End If
        If tgSpf.sSchdPromo <> "Y" Then
            lbcLog2Type.AddItem "Promo"    '9
            imLog2Map(lbcLog2Type.NewIndex) = 9
        End If
        lbcLog2Type.AddItem "Cancelled by Date"    '10
        imLog2Map(lbcLog2Type.NewIndex) = 10
        lbcLog2Type.AddItem "Hidden by Date"    '11
        imLog2Map(lbcLog2Type.NewIndex) = 11
        lbcLog2Type.height = gListBoxHeight(lbcLog2Type.ListCount, 12)
    Else
        lbcLog2Type.AddItem "Current Events"  '"Missed Current Week"    '0
        imLog2Map(lbcLog2Type.NewIndex) = 0
        'lbcLog2Type.AddItem "Missed by Date-Contract"
        lbcLog2Type.AddItem "Current Month" '"Missed Current Month"    '1
        imLog2Map(lbcLog2Type.NewIndex) = 1
        lbcLog2Type.AddItem "Past Month"    '"Missed Past Months"    '2
        imLog2Map(lbcLog2Type.NewIndex) = 2
        lbcLog2Type.AddItem "Advertiser"    '"Missed by Advertiser"    '3
        imLog2Map(lbcLog2Type.NewIndex) = 3
        lbcLog2Type.AddItem "Log 2"    '4
        imLog2Map(lbcLog2Type.NewIndex) = 4
        '5/5/11: Acive manual mode contracts
        If tgSpf.sSchdRemnant <> "Y" Then
            lbcLog2Type.AddItem "Remnant"    '4
            imLog2Map(lbcLog2Type.NewIndex) = 5
        End If
        lbcLog2Type.AddItem "Direct Response"    '5
        imLog2Map(lbcLog2Type.NewIndex) = 6
        lbcLog2Type.AddItem "Per Inquiry"    '6
        imLog2Map(lbcLog2Type.NewIndex) = 7
        If tgSpf.sSchdPSA <> "Y" Then
            lbcLog2Type.AddItem "PSA"    '7
            imLog2Map(lbcLog2Type.NewIndex) = 8
        End If
        If tgSpf.sSchdPromo <> "Y" Then
            lbcLog2Type.AddItem "Promo"    '8
            imLog2Map(lbcLog2Type.NewIndex) = 9
        End If
        lbcLog2Type.AddItem "Cancelled"    '9
        imLog2Map(lbcLog2Type.NewIndex) = 10
        lbcLog2Type.AddItem "Hidden"    '10
        imLog2Map(lbcLog2Type.NewIndex) = 11
        lbcLog2Type.height = gListBoxHeight(lbcLog2Type.ListCount, 11)
    End If
    'lbcLog2Type.ListIndex = 0
    'mSetShow MISSEDAREAINDEX
End Sub

Private Sub mSetContractIcon(tlEvtDest As EVTINFO)
    smDragDestPrgName = ""
    If tlEvtDest.iType = 100 Then
        If ((tlEvtDest.iLineInfo And &H800) = &H800) Or ((tlEvtDest.iLineInfo And &H1000) = &H1000) Then
            lacAFrame.DragIcon = IconTraf!imcIconJoin.DragIcon
        Else
            lacAFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
        End If
        smDragDestPrgName = Trim$(tlEvtDest.sPrgName)
    Else
        If rbcMode(0).Value Then
            lacAFrame.DragIcon = IconTraf!imcIconMove.DragIcon
            smDragDestPrgName = Trim$(tlEvtDest.sPrgName)
        Else
            lacAFrame.DragIcon = IconTraf!imcIconFill.DragIcon
            imDblClickMode = 2
        End If
    End If
End Sub

Private Sub mSetContractIconAdMd(tlEvtDest As EVTINFO, lacFrame As Label)
    Dim slCntrType As String

    If tlEvtDest.iType = 100 Then
        slCntrType = tlEvtDest.sCntrType
        If (((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q")) Or (((tlEvtDest.iLineInfo And &H10) = &H10) And ((tlEvtDest.iLineInfo And &H200) <> &H200)) Then
            lacFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
        Else
            If ((tlEvtDest.iLineInfo And &H800) = &H800) Or ((tlEvtDest.iLineInfo And &H1000) = &H1000) Then
                lacFrame.DragIcon = IconTraf!imcIconJoin.DragIcon
            Else
                lacFrame.DragIcon = IconTraf!imcIconSwap.DragIcon
            End If
        End If
    Else
        If rbcMode(0).Value Then
            lacFrame.DragIcon = IconTraf!imcIconMove.DragIcon
        Else
            lacFrame.DragIcon = IconTraf!imcIconFill.DragIcon
            imDblClickMode = 2
        End If
    End If

End Sub

Private Function mTestNetworkSplitConflicts(tlSsf As SSF, ilAvailIndex As Integer, ilInMoveIndex As Integer, tlEvt() As EVTINFO) As Integer
    Dim ilSpotIndex As Integer
    Dim ilStationCount As Integer
    Dim ilPriMoveIndex As Integer
    Dim llPriSdfCode As Long
    Dim ilTest As Long
    Dim ilMoveIndex As Integer

    ilMoveIndex = ilInMoveIndex

    If (Asc(tgSpf.sUsingFeatures2) And SPLITNETWORKS) = SPLITNETWORKS Then
        smSplitNetworkMixLen = "N"
        If ilAvailIndex <= tlSsf.iCount Then
            llPriSdfCode = -1
            ilPriMoveIndex = ilMoveIndex
            Do
                If tlEvt(ilPriMoveIndex).iType <= 9 Then    '1=Program; 2-9=Avail
                    Exit Do
                End If
                If (tlEvt(ilPriMoveIndex).iLineInfo And &H800) = &H800 Then
                    llPriSdfCode = tlEvt(ilPriMoveIndex).lSdfCode
                    Exit Do
                End If
                ilPriMoveIndex = ilPriMoveIndex - 1
            'Loop While ilPriMoveIndex >= LBound(tlEvt)
            Loop While ilPriMoveIndex >= imLBEvt
            ilTest = False
           LSet tmAvail = tlSsf.tPas(ADJSSFPASBZ + ilAvailIndex)
            For ilSpotIndex = ilAvailIndex + 1 To ilAvailIndex + tmAvail.iNoSpotsThis Step 1
                '2/7/09:  This should not be required but leave as extra safety if SSF is damaged
                If ilSpotIndex > tlSsf.iCount Then
                    Exit For
                End If
               LSet tmSpot = tlSsf.tPas(ADJSSFPASBZ + ilSpotIndex)
                If (llPriSdfCode = 0) Or (llPriSdfCode = tmSpot.lSdfCode) Then
                    ilTest = True
                End If
                If (ilTest) And (llPriSdfCode <> 0) And (llPriSdfCode <> tmSpot.lSdfCode) And ((tmSpot.iRecType And SSSPLITPRI) = SSSPLITPRI) Then
                    Exit For
                End If
                If (ilTest) And (((tmSpot.iRecType And SSSPLITPRI) = SSSPLITPRI) Or ((tmSpot.iRecType And SSSPLITSEC) = SSSPLITSEC)) Then
                    If gSplitNetworkStationConflicts(hmRaf, hmSef, hmSdf, hmClf, tmSpot.lSdfCode, tmStationsClf(), smClfInclExcl, ilStationCount) Then
                        mTestNetworkSplitConflicts = True
                        Exit Function
                    Else
                        If (tmSpot.iRecType And SSSPLITPRI) = SSSPLITPRI Then
                            If (tmSdf.iLen = (tmSpot.iPosLen And &HFFF)) Then
                                If (ilStationCount > UBound(tmStationsClf) - 1) Then
                                    smSplitNetworkType = "S"
                                Else
                                    smSplitNetworkType = "P"
                                    If llPriSdfCode <> 0 Then
                                        ilMoveIndex = ilPriMoveIndex
                                    End If
                                End If
                            ElseIf (tmSdf.iLen < (tmSpot.iPosLen And &HFFF)) Then
                                smSplitNetworkType = "S"
                            Else
                                smSplitNetworkType = "P"
                                smSplitNetworkMixLen = "Y"
                                If llPriSdfCode <> 0 Then
                                    ilMoveIndex = ilPriMoveIndex
                                End If
                            End If
                        End If
                    End If
                End If
            Next ilSpotIndex
        End If
    End If
    mTestNetworkSplitConflicts = False
End Function

Private Sub mSetHighlights(tlEvt As EVTINFO)
    lmHighlightCntrCode = tlEvt.lLen
    lmHighlightFeedCode = tlEvt.lFsfCode
    imHighlightAdvtCode = tlEvt.lInfo And &H7FFF
    lmCountChfCode = tlEvt.lLen  'Contains contract code number
    imCountLineNo = tlEvt.iLineNo
    lmCountFsfCode = tlEvt.lFsfCode
    lmSdfRecPosHighlight = tlEvt.lTime
    imWhereComp1 = tlEvt.iMnfComp1
    imWhereComp2 = tlEvt.iMnfComp2
    smHighlightSplitNetwork = ""
    If ((tlEvt.iLineInfo And &H800) = &H800) Or ((tlEvt.iLineInfo And &H1000) = &H1000) Then
        smHighlightSplitNetwork = "Y"
    End If
End Sub

Private Sub mLoadGameList(llClfCode As Long)
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    Dim ilLine As Integer
    ReDim ilGameNos(0 To 0) As Integer

    lbcGameList.Clear
    If tmVef.sType <> "G" Then
        Exit Sub
    End If
    If llClfCode <= 0 Then
        Exit Sub
    End If
    tmCgfSrchKey1.lClfCode = llClfCode
    ilRet = btrGetEqual(hmCgf, tmCgf, imCgfRecLen, tmCgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (llClfCode = tmCgf.lClfCode)
        If tmCgf.iNoSpots > 0 Then
            ilGameNos(UBound(ilGameNos)) = tmCgf.iGameNo
            ReDim Preserve ilGameNos(0 To UBound(ilGameNos) + 1) As Integer
        End If
        ilRet = btrGetNext(hmCgf, tmCgf, imCgfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    If UBound(ilGameNos) <> lbcGameNo(0).ListCount Then
        For ilLoop = 0 To lbcGameNo(0).ListCount - 1 Step 1
            ilGsf = lbcGameNo(0).ItemData(ilLoop)
            For ilLine = 0 To UBound(ilGameNos) - 1 Step 1
                If tmGsfInfo(ilGsf).iGameNo = ilGameNos(ilLine) Then
                    lbcGameList.AddItem lbcGameNo(0).List(ilLoop)
                    lbcGameList.ItemData(lbcGameList.NewIndex) = ilGsf
                    Exit For
                End If
            Next ilLine
        Next ilLoop
    Else
        For ilLoop = 0 To lbcGameNo(0).ListCount - 1 Step 1
            lbcGameList.AddItem lbcGameNo(0).List(ilLoop)
            lbcGameList.ItemData(lbcGameList.NewIndex) = lbcGameNo(0).ItemData(ilLoop)
        Next ilLoop
    End If

End Sub

Private Sub mPaintMissedBoxes(ilSource As Integer)
    Dim llTop As Long
    Dim ilLoop As Integer

    llTop = tmL2Ctrls(1).fBoxY
    If ilSource = 0 Then
        pbcLog2.BackColor = vbWhite
        For ilLoop = 1 To vbcLog2.LargeChange + 1 Step 1
            pbcLog2.Line (tmL2Ctrls(1).fBoxX - 15, llTop - 15)-Step(tmL2Ctrls(1).fBoxW + 15, tmL2Ctrls(1).fBoxH + 15), BLUE, B
            llTop = llTop + tmL2Ctrls(1).fBoxH + 15
        Next ilLoop
    Else
        pbcMissed.BackColor = vbWhite
        For ilLoop = 1 To vbcMissed.LargeChange + 1 Step 1
            pbcMissed.Line (tmL2Ctrls(1).fBoxX - 15, llTop - 15)-Step(tmL2Ctrls(1).fBoxW + 15, tmL2Ctrls(1).fBoxH + 15), BLUE, B
            llTop = llTop + tmL2Ctrls(1).fBoxH + 15
        Next ilLoop
    End If
End Sub

Private Function mMoreInfo(llSdfCode As Long, slPrice As String, slRegionAbbr As String, slCITFlag As String, slCopyCIT As String, slPtType As String, llCopyCode As Long, ilRotNo As Integer, slLiveCopy As String)
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  slStr                         ilIndex                       ilRet                     *
'*                                                                                        *
'******************************************************************************************

    Dim ilPos As Integer
    Dim slCart As String
    Dim slISCI As String
    Dim slCreativeTitle As String
    Dim slMore As String
    Dim ilRet As Integer
    Dim slSpotDate As String
    Dim slStartDate As String
    Dim slEndDate As String
    Dim slNoSpots As String
    Dim slTimes As String
    Dim slDays As String

    slMore = ""
    If imMore = 1 Then
        ilPos = InStr(1, slPrice, ".")
        If ilPos > 1 Then
            slMore = "$" & Trim$(Left$(Left$(slPrice, ilPos - 1), 5))
        ElseIf ilPos = 1 Then
            slMore = "$0"
        Else
            slMore = Trim$(Left$(slPrice, 5))
        End If
    ElseIf imMore = 2 Then  'Region Abbreviation
        slMore = Trim$(slRegionAbbr)
    ElseIf (imMore = 3) Then  'ISCI
        If slCopyCIT <> "I" Then
            mGetCopyInfo slPtType, llCopyCode, slCart, slISCI, slCreativeTitle
            slCITFlag = "I"
            slCopyCIT = slISCI
            slMore = slISCI
        Else
            slMore = slCopyCIT
        End If
    ElseIf (imMore = 4) Then  'Creative title
        If slCopyCIT <> "T" Then
            mGetCopyInfo slPtType, llCopyCode, slCart, slISCI, slCreativeTitle
            slCITFlag = "I"
            slCopyCIT = slCreativeTitle
            slMore = slCreativeTitle
        Else
            slMore = slCopyCIT
        End If
    ElseIf imMore = 5 Then  'Live/Recorded
        Select Case slLiveCopy
            Case "L"
                slMore = "LC"
            Case "M"    'Live Promo
                slMore = "LP"
            Case "S"    'Rec Promo
                slMore = "RP"
            Case "P"    'Pre-recorded live cmml
                slMore = "PC"
            Case "Q"    'Pre-recorded live promo
                slMore = "PP"
            Case Else
                slMore = "RC"
        End Select
    ElseIf (imMore = 6) Then  'Cart
        If slCopyCIT <> "C" Then
            mGetCopyInfo slPtType, llCopyCode, slCart, slISCI, slCreativeTitle
            slCITFlag = "C"
            slCopyCIT = slCart
            slMore = slCart
        Else
            slMore = slCopyCIT
        End If
    ElseIf imMore = 7 Then  'Rotation Number
        If (ilRotNo > 0) And (slPtType <> "0") Then
            slMore = Trim$(str$(ilRotNo))
        End If
    ElseIf imMore = 8 Then  'SdfCode
        If llSdfCode > 0 Then
            slMore = Trim$(str$(llSdfCode))
        End If
    ElseIf imMore = 9 Then  'daypart
        tmSdfSrchKey3.lCode = llSdfCode
        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            If tmSdf.iGameNo <= 0 Then
                gUnpackDate tmSdf.iDate(0), tmSdf.iDate(1), slSpotDate
                ilRet = mReadChfClfRdfCffRec(tmSdf.lChfCode, tmSdf.iLineNo, tmSdf.lFsfCode, tmSdf.iGameNo, slSpotDate, slStartDate, slEndDate, slNoSpots, -1, tmSdf.iGameNo)
                '5/5/11
                If ilRet Then
                    slTimes = mGetLineDaypartInfo(False, True)
                    slTimes = Replace(slTimes, "AM", "A")
                    slTimes = Replace(slTimes, "PM", "P")
                    If tmCff(1).sDelete <> "Y" Then
                        slDays = mGetFlightDays()
                        slMore = gDayStrToNames(slDays, slDays, 1) & "," & slTimes
                    Else
                        slDays = slTimes
                    End If
                End If
            Else
                slMore = "E" & tmSdf.iGameNo
            End If
        End If
    End If
    slMore = mRemoveSpaceChar(slMore)
    If (slMore = "") And (imMore > 0) And (imMore <= 7) Then
        slMore = "???"  'Chr(129) & Chr(129) & Chr(129)
    End If
    mMoreInfo = slMore
End Function


Private Sub mGetCopyInfo(slPtType As String, llCopyCode As Long, slCart As String, slISCI As String, slCreativeTitle As String)
    Dim ilRet As Integer
    Dim ilCifFound As Integer
    Dim ilIndex As Integer

    slCart = ""
    slISCI = ""
    slCreativeTitle = ""
    If slPtType = "1" Then  '  Single Copy
        ' Read CIF using lCopyCode from SDF
        tmCifSrchKey.lCode = llCopyCode
        ilRet = btrGetEqual(hmCif, tmCif, imCifRecLen, tmCifSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        If ilRet <> BTRV_ERR_NONE Then
            Exit Sub
        End If
        ilCifFound = True
    ElseIf slPtType = "2" Then  '  Combo Copy
    ElseIf slPtType = "3" Then  '  Time Zone Copy
        ' Read TZF using lCopyCode from SDF
        tmTzfSrchKey.lCode = llCopyCode
        ilRet = btrGetEqual(hmTzf, tmTzf, imTzfRecLen, tmTzfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
        If ilRet <> BTRV_ERR_NONE Then
            Exit Sub
        End If
        ' Look for the first positive lZone value
        For ilIndex = 1 To 6 Step 1
            If (tmTzf.lCifZone(ilIndex - 1) > 0) And (StrComp(tmTzf.sZone(ilIndex - 1), "Oth", 1) = 0) Then ' Process just the first positive Zone
                ' Read CIF using lCopyCode from SDF
                tmCifSrchKey.lCode = tmTzf.lCifZone(ilIndex - 1)
                ilRet = btrGetEqual(hmCif, tmCif, imCifRecLen, tmCifSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet <> BTRV_ERR_NONE Then
                    Exit Sub
                End If
                ilCifFound = True
                Exit For
            End If
        Next ilIndex
        If Not ilCifFound Then
            For ilIndex = 1 To 6 Step 1
                If tmTzf.lCifZone(ilIndex - 1) > 0 Then ' Process just the first positive Zone
                    ' Read CIF using lCopyCode from SDF
                    tmCifSrchKey.lCode = tmTzf.lCifZone(ilIndex - 1)
                    ilRet = btrGetEqual(hmCif, tmCif, imCifRecLen, tmCifSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
                    If ilRet <> BTRV_ERR_NONE Then
                        Exit Sub
                    End If
                    ilCifFound = True
                    Exit For
                End If
            Next ilIndex
        End If
    End If
    If ilCifFound Then
        ' Read CPF using lCpfCode from CIF
        If tmCif.lcpfCode > 0 Then
            tmCpfSrchKey.lCode = tmCif.lcpfCode
            ilRet = btrGetEqual(hmCpf, tmCpf, imCpfRecLen, tmCpfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet <> BTRV_ERR_NONE Then
                Exit Sub
            End If
            'smSave(SAVISCIINDEX, ilUpperBound) = Trim$(tmCpf.sISCI)  ' ISCI Code
            slISCI = Trim$(tmCpf.sISCI)
            slCreativeTitle = Trim$(tmCpf.sCreative)
        Else
            slISCI = ""
        End If
        ' Concatinate Copy from Media Code, Inv. Name & Cut#
        ' First read MCF
        If (tgSpf.sUseCartNo <> "N") And (tmCif.iMcfCode <> 0) Then
            tmMcfSrchKey.iCode = tmCif.iMcfCode
            ilRet = btrGetEqual(hmMcf, tmMcf, imMcfRecLen, tmMcfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)
            If ilRet <> BTRV_ERR_NONE Then
                Exit Sub
            End If
            ' Media Code is tmMcf.sName
            slCart = Trim$(tmMcf.sName) & Trim$(tmCif.sName)
            If (Len(Trim$(tmCif.sCut)) <> 0) Then
                slCart = slCart & "-" & tmCif.sCut
            End If
        End If
    End If

End Sub

Private Function mRemoveSpaceChar(slInStr As String) As String
    Dim slStr As String
    Dim ilPos As Integer
    Dim ilFound As Integer
    slStr = Trim$(slInStr)
    'Remove spaces
    Do
        ilFound = False
        ilPos = InStr(1, slStr, " ", vbTextCompare)
        If ilPos > 0 Then
            slStr = Left$(slStr, ilPos - 1) & Mid$(slStr, ilPos + 1)
            ilFound = True
        End If
    Loop While ilFound
    mRemoveSpaceChar = slStr

End Function

'*******************************************************
'*      Procedure Name:mBuildManSpotCount              *
'*                                                     *
'*             Created:10/17/93      By:D. LeVine      *
'*            Modified:              By:               *
'*                                                     *
'*            Comments: Build Extra array              *
'*                                                     *
'*******************************************************
Private Sub mBuildManSpotCount(slInCntrType As String, tlEvt() As EVTINFO, llManSchCode() As Long, ilManSchInfo() As Integer)
    Dim ilUpper As Integer
    Dim ilTest As Integer
    Dim ilFound As Integer
    Dim ilLoop As Integer
    Dim slCntrType As String

    ilUpper = UBound(llManSchCode, 2)
    'For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
    For ilLoop = imLBEvt To UBound(tlEvt) - 1 Step 1
        If tlEvt(ilLoop).iType = 100 Then '2-9= avail; 99=Remain avils; 101 =conflict spot; -1=place holder
            'Bypass manully moved spots and extra spot
            'Also partial network buys
            slCntrType = tlEvt(ilLoop).sCntrType
            If slInCntrType = slCntrType Then
                If ((slCntrType = "S") And (tgSpf.sSchdPSA <> "Y")) Or ((slCntrType = "M") And (tgSpf.sSchdPromo <> "Y")) Or (slCntrType = "R") Or ((slCntrType = "T") And (tgSpf.sSchdRemnant <> "Y")) Or (slCntrType = "Q") Then
                    ilFound = False
                    'For ilTest = 1 To ilUpper - 1 Step 1
                    For ilTest = 0 To ilUpper - 1 Step 1
                        If (llManSchCode(1, ilTest) = tlEvt(ilLoop).lLen) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lLen <> 0) Then
                            ilFound = True
                            ilManSchInfo(3, ilTest) = ilManSchInfo(3, ilTest) + 1
                            Exit For
                        End If
                        If (llManSchCode(2, ilTest) = tlEvt(ilLoop).lFsfCode) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lFsfCode <> 0) Then
                            ilFound = True
                            ilManSchInfo(3, ilTest) = ilManSchInfo(3, ilTest) + 1
                            Exit For
                        End If
                    Next ilTest
                    'If Not ilFound Then
                    '    llManSchCode(1, ilUpper) = tlEvt(ilLoop).lLen    'ChfCode
                    '    llManSchCode(2, ilUpper) = tlEvt(ilLoop).lFsfCode
                    '    ilManSchInfo(1, ilUpper) = 0    'Unused
                    '    ilManSchInfo(2, ilUpper) = tlEvt(ilLoop).iUnits   'Len
                    '    ilManSchInfo(3, ilUpper) = 1    '# extra bonus found in the week
                    '    ilManSchInfo(4, ilUpper) = 0    'Unused
                    '    ilManSchInfo(5, ilUpper) = 0    'lbcAdMdManSchCode Index
                    '    ilManSchInfo(6, ilUpper) = 0    'lbcAdMdManSch Index
                    '    ReDim Preserve llManSchCode(1 To 2, 1 To ilUpper + 1) As Long
                    '    ReDim Preserve ilManSchInfo(1 To 7, 1 To ilUpper + 1) As Integer
                    '    ilUpper = ilUpper + 1
                    'End If
                End If
            End If
        End If
    Next ilLoop
'    For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
'        If tlEvt(ilLoop).iType = 100 Then '2-9= avail; 99=Remain avils; 101 =conflict spot; -1=place holder
'            If (tlEvt(ilLoop).iLineInfo And &H10) = &H10 Then
'                For ilTest = 1 To ilUpper - 1 Step 1
'                    'lLen contains chfcode; iUnits contains len
'                    If ((llManSchCode(1, ilTest) = tlEvt(ilLoop).lLen) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lLen > 0)) Or ((llManSchCode(2, ilTest) = tlEvt(ilLoop).lFsfCode) And (ilManSchInfo(2, ilTest) = tlEvt(ilLoop).iUnits) And (tlEvt(ilLoop).lFsfCode > 0)) Then
'                        ilManSchInfo(3, ilTest) = ilManSchInfo(3, ilTest) + 1
'                        Exit For
'                    End If
'                Next ilTest
'            End If
'        End If
'    Next ilLoop
End Sub


Private Function mGetLineDaypartInfo(ilIncludeDPName As Integer, ilIncludeDPTimes As Integer) As String
    Dim slStr As String
    Dim slStartTime As String
    Dim slEndTime As String
    Dim slStrTime As String
    Dim slMultiTimes As String
    Dim ilLoop As Integer
    Dim slStart As String
    Dim slEnd As String
    
    If ((tmClf.iStartTime(0) <> 1) Or (tmClf.iStartTime(1) <> 0)) And (tgVpf(imVpfIndex).sGMedium <> "S") Then
        gUnpackTime tmClf.iStartTime(0), tmClf.iStartTime(1), "A", "1", slStartTime
        gUnpackTime tmClf.iEndTime(0), tmClf.iEndTime(1), "A", "1", slEndTime
        slStr = slStartTime & "-" & slEndTime
    Else
        If ilIncludeDPName Then
            slStr = Trim$(tmLnRdf.sName)
        Else
            slStr = ""
        End If
        'Add times
        If ilIncludeDPTimes Then
            slStrTime = ""
            slMultiTimes = ""
            For ilLoop = LBound(tmLnRdf.iStartTime, 2) To UBound(tmLnRdf.iStartTime, 2) Step 1 'Row
                If (tmLnRdf.iStartTime(0, ilLoop) <> 1) Or (tmLnRdf.iStartTime(1, ilLoop) <> 0) Then
                    gUnpackTime tmLnRdf.iStartTime(0, ilLoop), tmLnRdf.iStartTime(1, ilLoop), "A", "1", slStart
                    gUnpackTime tmLnRdf.iEndTime(0, ilLoop), tmLnRdf.iEndTime(1, ilLoop), "A", "1", slEnd
                    If slStart <> "" Then
                        slStrTime = slStart & "-" & slEnd
                        If ilLoop < UBound(tmLnRdf.iStartTime, 2) Then
                            If (tmLnRdf.iStartTime(0, ilLoop + 1) <> 1) Or (tmLnRdf.iStartTime(1, ilLoop + 1) <> 0) Then
                                slMultiTimes = "+"
                            End If
                        End If
                    End If
                    Exit For
                End If
            Next ilLoop
            slStr = slStr & " " & slStrTime & slMultiTimes
        End If
    End If
    mGetLineDaypartInfo = slStr
End Function

Private Function mGetFlightDays() As String
    Dim slStr As String
    Dim ilDay As Integer
    
    If tmCff(0).sDelete <> "Y" Then
        If (tmCff(0).sDyWk <> "D") Then
            slStr = ""
            For ilDay = 0 To 6 Step 1
                If (tmCff(0).iDay(ilDay) > 0) Or (tmCff(0).sXDay(ilDay) = "1") Then
                    slStr = slStr & "Y"
                Else
                    slStr = slStr & "N"
                End If
            Next ilDay
        Else
            For ilDay = 0 To 6 Step 1
                If tmCff(0).iDay(ilDay) > 0 Then
                    slStr = slStr & "Y"
                Else
                    slStr = slStr & "N"
                End If
            Next ilDay
        End If
    Else
        slStr = ""
    End If
    mGetFlightDays = slStr
End Function

Private Function mGetL1GameNo() As Integer
    Dim ilPos As Integer
    Dim slStr As String
    slStr = edcLog1Dt.Text
    ilPos = InStr(1, slStr, " ", vbTextCompare)
    If ilPos > 0 Then
        mGetL1GameNo = Val(Left(slStr, ilPos))
    Else
        '7/25/12: change -1 to 0 to allow PSA to be scheduled in daily value
        mGetL1GameNo = 0    '-1
    End If
End Function
Private Function mGetL1GameDate() As String
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slStr As String
    slStr = edcLog1Dt.Text
    ilPos1 = InStr(1, slStr, " ", vbTextCompare)
    If ilPos1 > 0 Then
        ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
        If ilPos2 > 0 Then
            mGetL1GameDate = Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1))
        Else
            mGetL1GameDate = ""
        End If
    Else
        mGetL1GameDate = ""
    End If
End Function

Private Function mGetL2GameNo() As Integer
    Dim ilPos As Integer
    Dim slStr As String
    slStr = edcLog2Dt.Text
    ilPos = InStr(1, slStr, " ", vbTextCompare)
    If ilPos > 0 Then
        mGetL2GameNo = Val(Left(slStr, ilPos))
    Else
        '7/25/12: change -1 to 0 to allow PSA to be scheduled in daily value
        mGetL2GameNo = 0    '-1
    End If
End Function

Private Function mGetL2GameDate() As String
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slStr As String
    slStr = edcLog2Dt.Text
    ilPos1 = InStr(1, slStr, " ", vbTextCompare)
    If ilPos1 > 0 Then
        ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
        If ilPos2 > 0 Then
            mGetL2GameDate = Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1))
        Else
            mGetL2GameDate = ""
        End If
    Else
        mGetL2GameDate = ""
    End If
End Function


Private Function mGetAvGameNo() As Integer
    Dim ilPos As Integer
    Dim slStr As String
    slStr = edcAvDate.Text
    ilPos = InStr(1, slStr, " ", vbTextCompare)
    If ilPos > 0 Then
        mGetAvGameNo = Val(Left(slStr, ilPos))
    Else
        mGetAvGameNo = -1
    End If
End Function

Private Function mGetAvGameDate() As String
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slStr As String
    slStr = edcAvDate.Text
    ilPos1 = InStr(1, slStr, " ", vbTextCompare)
    If ilPos1 > 0 Then
        ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
        If ilPos2 > 0 Then
            mGetAvGameDate = Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1))
        Else
            mGetAvGameDate = ""
        End If
    Else
        mGetAvGameDate = ""
    End If
End Function

Private Function mFindGameNoIndex(ilGameNo As Integer) As Integer
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    mFindGameNoIndex = -1
    For ilLoop = 0 To lbcGameNo(imGameNoIndex).ListCount - 1 Step 1
        ilGsf = lbcGameNo(imGameNoIndex).ItemData(ilLoop)
        If ilGameNo = tmGsfInfo(ilGsf).iGameNo Then
            mFindGameNoIndex = ilLoop
            Exit Function
        End If
    Next ilLoop
End Function

Private Function mFindGameNoDate(ilGameNo As Integer, ilGameNoIndex As Integer) As String
    Dim ilLoop As Integer
    Dim ilGsf As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    Dim slStr As String
    
    mFindGameNoDate = ""
    For ilLoop = 0 To lbcGameNo(ilGameNoIndex).ListCount - 1 Step 1
        ilGsf = lbcGameNo(imGameNoIndex).ItemData(ilLoop)
        If ilGameNo = tmGsfInfo(ilGsf).iGameNo Then
            slStr = lbcGameNo(imGameNoIndex).List(ilLoop)
            ilPos1 = InStr(1, slStr, " ", vbTextCompare)
            If ilPos1 > 0 Then
                ilPos2 = InStr(ilPos1 + 1, slStr, " ", vbTextCompare)
                If ilPos2 > 0 Then
                    mFindGameNoDate = Mid(slStr, ilPos1 + 1, ilPos2 - (ilPos1 + 1))
                End If
            End If
            Exit Function
        End If
    Next ilLoop
End Function


Private Sub mForceRepaintDaily()
    Screen.MousePointer = vbHourglass
    pbcLog1.Cls
    pbcLog2.Cls
    pbcAvail.Cls
    mBuildTimeView 1
    If (imLog2Type = 4) And (Trim$(edcLog2Dt.Text) <> "") Then   'Log date
        mBuildTimeView 2
    ElseIf (imLog2Type <= 3) Or (imLog2Type = 10) Or (imLog2Type = 11) Then
        mBuildMissedView 0, True
    End If
    pbcLog1_Paint
    pbcLog2_Paint
    pbcAvail_Paint
    Screen.MousePointer = vbDefault

End Sub

Private Function mGetPrgNames() As Integer
    Dim ilRet As Integer
    Dim slPafStamp As String
    
    slPafStamp = ""
    ilRet = gObtainPaf(hmPaf, imVehCode, slPafStamp, tgPaf())
    mGetPrgNames = ilRet

End Function

Private Sub mShowPrgNames()
    Dim slStr As String
    
    lacPrgName.Caption = ""
    '7/5/11: Remove showing the names because of the number of places a call to this routine is required
    '        Parts not completed:Program name not added to Missed spots
    '                            Program name not added to Work area image
    '                            setting and clearing the names when dragging from missed and work area
    '                            Calls to this routine in pbcLog1, pbcLog2 and pbcContract (Drag Over and Drag Drop)
    '                            Program name not added to evt images created within spots
    '                            smDragDestPrgName and smDragSrcePrgName not set for all cases
    '
    Exit Sub
    If imDragSrce >= 0 Then
        If imDragDest >= 0 Then
            If (smDragSrcePrgName <> "") And (smDragDestPrgName <> "") Then
                If smDragSrcePrgName = smDragDestPrgName Then
                    lacPrgName.ForeColor = DARKGREEN
                Else
                    lacPrgName.ForeColor = vbRed
                End If
                lacPrgName.Caption = "From: " & smDragSrcePrgName & " To: " & smDragDestPrgName
            ElseIf (smDragSrcePrgName <> "") Then
                lacPrgName.ForeColor = vbRed
                If (smDragSrcePrgName <> "") Then
                    lacPrgName.Caption = "From: " & smDragSrcePrgName
                End If
            ElseIf (smDragDestPrgName <> "") Then
                lacPrgName.ForeColor = vbRed
                If (smDragDestPrgName <> "") Then
                    lacPrgName.Caption = "To: " & smDragDestPrgName
                End If
            End If
        Else
            lacPrgName.ForeColor = vbRed
            If (smDragSrcePrgName <> "") Then
                lacPrgName.Caption = "From: " & smDragSrcePrgName
            End If
        End If
    End If
End Sub

Private Sub mComputeOpenAvailPercent(tlEvt() As EVTINFO, ilAvailUnits As Integer, ilOpenUnits As Integer)
    Dim ilEvt As Integer
    
    On Error GoTo mComputeOpenAvailPercentErr
    'ilEvt = LBound(tlEvt)
    ilEvt = imLBEvt
    Do While ilEvt < UBound(tlEvt)
        If ((tlEvt(ilEvt).iType >= 2) And (tlEvt(ilEvt).iType <= 9)) Then
            ilAvailUnits = ilAvailUnits + 1
        ElseIf (tlEvt(ilEvt).iType = 99) Then
            ilOpenUnits = ilOpenUnits + 1
        End If
        ilEvt = ilEvt + 1
    Loop
    Exit Sub
mComputeOpenAvailPercentErr:
    Exit Sub
End Sub
Private Sub mAdjustCgf(ilFromGameNo As Integer, llFromMoDate As Long, ilToGameNo As Integer, llToMoDate As Long)
    Dim tlCgf As CGF
    Dim ilRet As Integer
    Dim ilGsf As Integer
    Dim blFound As Boolean
    Dim ilPass As Integer
    Dim llClfCode As Long
    Dim tlChf As CHF
    Dim tlClf As CLF
    '3/8/13: Add date test
    Dim llCgfDate As Long
    
    imCgfRecLen = Len(tlCgf)
    '10/8/12:  Leave the proposal as set, only change the order.
    '          If they removed a spot it would have been re-added
    '          By leaving the proposal, the moved spot will be placed back into its original event
    'For ilPass = 1 To 2 Step 1
    For ilPass = 1 To 1 Step 1
        If ilPass = 1 Then
            llClfCode = tmClf.lCode
        Else
            'see if proposal needs to be updated
            blFound = False
            tmChfSrchKey1.lCntrNo = tmChf.lCntrNo
            tmChfSrchKey1.iCntRevNo = tmChf.iCntRevNo + 1
            tmChfSrchKey1.iPropVer = tmChf.iPropVer
            ilRet = btrGetEqual(hmCHF, tlChf, imCHFRecLen, tmChfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                tmClfSrchKey.lChfCode = tlChf.lCode
                tmClfSrchKey.iLine = tmClf.iLine
                tmClfSrchKey.iCntRevNo = tlChf.iCntRevNo
                tmClfSrchKey.iPropVer = tlChf.iPropVer
                ilRet = btrGetEqual(hmClf, tlClf, imClfRecLen, tmClfSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                If (ilRet = BTRV_ERR_NONE) Then
                    If (tlClf.lghfcode = tmClf.lghfcode) And (tlClf.sDelete <> "Y") Then
                        blFound = True
                    End If
                End If
            End If
            If blFound Then
                llClfCode = tlClf.lCode
            Else
                Exit For
            End If
        End If
        blFound = False
        tmCgfSrchKey1.lClfCode = llClfCode
        ilRet = btrGetEqual(hmCgf, tlCgf, imCgfRecLen, tmCgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tlCgf.lClfCode = llClfCode)
            If tlCgf.iGameNo = ilFromGameNo Then
                '3/8/13: Add Date test because of multi-seasons
                gUnpackDateLong tlCgf.iAirDate(0), tlCgf.iAirDate(1), llCgfDate
                If llFromMoDate = llCgfDate - gWeekDayLong(llCgfDate) Then
                'end 3/8/13
                    tlCgf.iNoSpots = tlCgf.iNoSpots - 1
                    If tlCgf.iNoSpots > 0 Then
                        ilRet = btrUpdate(hmCgf, tlCgf, imCgfRecLen)
                    Else
                        ilRet = btrDelete(hmCgf)
                    End If
                    Exit Do
                End If
            End If
            ilRet = btrGetNext(hmCgf, tlCgf, imCgfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        tmCgfSrchKey1.lClfCode = llClfCode
        ilRet = btrGetEqual(hmCgf, tlCgf, imCgfRecLen, tmCgfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        Do While (ilRet = BTRV_ERR_NONE) And (tlCgf.lClfCode = llClfCode)
            If tlCgf.iGameNo = ilToGameNo Then
                '3/8/13: Add Date test because of multi-seasons
                gUnpackDateLong tlCgf.iAirDate(0), tlCgf.iAirDate(1), llCgfDate
                If llToMoDate = llCgfDate - gWeekDayLong(llCgfDate) Then
                'end 3/8/13
                    tlCgf.iNoSpots = tlCgf.iNoSpots + 1
                    ilRet = btrUpdate(hmCgf, tlCgf, imCgfRecLen)
                    blFound = True
                    Exit Do
                End If
            End If
            ilRet = btrGetNext(hmCgf, tlCgf, imCgfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
        Loop
        If Not blFound Then
            tlCgf.lCode = 0
            tlCgf.lClfCode = llClfCode
            tlCgf.iGameNo = ilToGameNo
            tlCgf.iAirDate(0) = tmSdf.iDate(0)
            tlCgf.iAirDate(1) = tmSdf.iDate(1)
            For ilGsf = LBound(tmGsfInfo) To UBound(tmGsfInfo) - 1 Step 1
                If tmGsfInfo(ilGsf).iGameNo = ilToGameNo Then
                    gPackDateLong tmGsfInfo(ilGsf).lGameDate, tlCgf.iAirDate(0), tlCgf.iAirDate(1)
                    Exit For
                End If
            Next ilGsf
            tlCgf.iNoSpots = 1
            tlCgf.sUnused = ""
            ilRet = btrInsert(hmCgf, tlCgf, imCgfRecLen, INDEXKEY0)
        End If
    Next ilPass
End Sub

Private Function mGamesInSameWeek(ilOrderedGameNo As Integer, ilSchGameNo As Integer)
    Dim ilGsf As Integer
    Dim llOrderedDate As Long
    Dim llSchDate As Long
    
    mGamesInSameWeek = False
    If (ilOrderedGameNo = 0) Or (ilSchGameNo = 0) Then
        Exit Function
    End If
    llOrderedDate = -1
    llSchDate = -1
    For ilGsf = LBound(tmGsfInfo) To UBound(tmGsfInfo) - 1 Step 1
        If tmGsfInfo(ilGsf).iGameNo = ilOrderedGameNo Then
            llOrderedDate = tmGsfInfo(ilGsf).lGameDate
        ElseIf tmGsfInfo(ilGsf).iGameNo = ilSchGameNo Then
            llSchDate = tmGsfInfo(ilGsf).lGameDate
        End If
        If (llOrderedDate <> -1) And (llSchDate <> -1) Then
            Exit For
        End If
    Next ilGsf
    If (llOrderedDate <> -1) And (llSchDate <> -1) Then
        Do Until gWeekDayLong(llOrderedDate) = 0
            llOrderedDate = llOrderedDate - 1
        Loop
        If (llSchDate >= llOrderedDate) And (llSchDate <= llOrderedDate + 6) Then
            mGamesInSameWeek = True
        End If
    End If

End Function

Private Sub mRepaint()
    If imDW = 1 Then
        pbcContract.Cls
        pbcContract_Paint
    Else
        pbcLog1.Cls
        pbcLog1_Paint
        pbcLog2.Cls
        pbcLog2_Paint
    End If
End Sub

Private Sub mSeasonPop()
    Dim llStartDate As Long
    Dim slStartDate As String
    Dim ilRet As Integer
    Dim ilLoop As Integer
    Dim llSeasonGhfCode As Long
    Dim ilVff As Integer
    Dim ilVef As Integer
    
    cbcSeason.Clear
    lmSeasonGhfCode = 0
    ReDim tmSeasonInfo(0 To 0) As SEASONINFO
    cbcSeason.Visible = False
    ilVef = gBinarySearchVef(imVehCode)
    If ilVef <> -1 Then
        If tgMVef(ilVef).sType <> "G" Then
            Exit Sub
        End If
    Else
        Exit Sub
    End If
    tmGhfSrchKey1.iVefCode = imVehCode
    ilRet = btrGetEqual(hmGhf, tmGhf, imGhfRecLen, tmGhfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)
    Do While (ilRet = BTRV_ERR_NONE) And (tmGhf.iVefCode = imVehCode)
        gUnpackDateLong tmGhf.iSeasonStartDate(0), tmGhf.iSeasonStartDate(1), llStartDate
        slStartDate = Trim$(str$(llStartDate))
        Do While Len(slStartDate) < 6
            slStartDate = "0" & slStartDate
        Loop
        tmSeasonInfo(UBound(tmSeasonInfo)).sKey = slStartDate
        tmSeasonInfo(UBound(tmSeasonInfo)).sSeasonName = tmGhf.sSeasonName
        tmSeasonInfo(UBound(tmSeasonInfo)).lCode = tmGhf.lCode
        ReDim Preserve tmSeasonInfo(0 To UBound(tmSeasonInfo) + 1) As SEASONINFO
        ilRet = btrGetNext(hmGhf, tmGhf, imGhfRecLen, BTRV_LOCK_NONE, SETFORWRITE)
    Loop
    If UBound(tmSeasonInfo) > 1 Then
        'Sort descending
        ArraySortTyp fnAV(tmSeasonInfo(), 0), UBound(tmSeasonInfo), 1, LenB(tmSeasonInfo(0)), 0, LenB(tmSeasonInfo(0).sKey), 0
    End If
    For ilLoop = 0 To UBound(tmSeasonInfo) - 1 Step 1
        cbcSeason.AddItem Trim$(tmSeasonInfo(ilLoop).sSeasonName)
        cbcSeason.ItemData(cbcSeason.NewIndex) = tmSeasonInfo(ilLoop).lCode
    Next ilLoop
    For ilVff = LBound(tgVff) To UBound(tgVff) Step 1
        If tgVff(ilVff).iVefCode = imVehCode Then
            lmSeasonGhfCode = tgVff(ilVff).lSeasonGhfCode
            Exit For
        End If
    Next ilVff
    For ilLoop = 0 To cbcSeason.ListCount - 1 Step 1
        If cbcSeason.ItemData(ilLoop) = lmSeasonGhfCode Then
            cbcSeason.ListIndex = ilLoop
            Exit For
        End If
    Next ilLoop
    cbcSeason.Visible = True
End Sub

Private Sub mcbcSeasonChange()
    Dim ilLoopCount As Integer
    Dim slNameCode As String
    Dim slCode As String
    Dim ilRet As Integer

    If imSeasonChgMode = False Then
        imSeasonChgMode = True
        ilLoopCount = 0
        Do
            Screen.MousePointer = vbHourglass  'Wait
            If ilLoopCount > 0 Then
                If cbcSeason.ListIndex >= 0 Then
                    cbcSeason.Text = cbcSeason.List(cbcSeason.ListIndex)
                End If
            End If
            ilLoopCount = ilLoopCount + 1
            If cbcSeason.Text <> "" Then
                gManLookAhead cbcSeason, imBSMode, imSeasonComboBoxIndex
            End If
            imSeasonSelectedIndex = cbcSeason.ListIndex
            If imSeasonSelectedIndex >= 0 Then
                lmSeasonGhfCode = cbcSeason.ItemData(imSeasonSelectedIndex)
            Else
                lmSeasonGhfCode = 0
            End If
            mCbcVehChange
            Screen.MousePointer = vbHourglass  'Wait
        Loop While imSeasonSelectedIndex <> cbcSeason.ListIndex
        If cbcSeason.Visible Then
            cbcSeason.SetFocus
        End If
        imSeasonChgMode = False
        Screen.MousePointer = vbDefault    'Default
    End If
End Sub

Private Sub mPopView()
    lbcDW.Clear
    If imDW = 1 Then    '0=Daily; 1=Weekly
        If ((lmHighlightCntrCode > 0) Or (lmHighlightFeedCode > 0) Or (imViewSelect = 1)) Then
            lbcDW.AddItem "Daily"
            lbcDW.AddItem "Single"
            lbcDW.AddItem "Weekly"
            If imViewSelect = 1 Then
                lbcDW.ListIndex = 1
            Else
                lbcDW.ListIndex = 2
            End If
        Else
            lbcDW.AddItem "Daily"
            lbcDW.AddItem "Weekly"
            lbcDW.ListIndex = 1
        End If
    Else
        lbcDW.AddItem "Daily"
        lbcDW.AddItem "Weekly"
        lbcDW.ListIndex = 0
    End If
    lbcDW.height = gListBoxHeight(lbcDW.ListCount, 3)
End Sub

Private Sub mViewChgd()
    Dim ilChg As Integer

    ilChg = False
    plcConflictInfo.Visible = False
    'mClearDrag True
    If tmcDrag.Enabled Then
        imDragType = -1
        imDragSrce = -1
        tmcDrag.Enabled = False
    End If
    If imDragSrce >= 0 Then 'After Drop but before finished with drop
        Exit Sub
    End If
    If imDW = 0 Then
        ilChg = True
        plcAdvertiser.Visible = False
        imcFont.Visible = False
        plcTime.Visible = True
        imcPrt.Visible = False
    ElseIf imDW = 1 Then
        ilChg = True
        plcTime.Visible = False
        plcAdvertiser.Visible = True
        imcFont.Visible = True
        'If Trim$(plcDate.Caption) <> "" Then
        
        '11/2/13: Adjust date so that it is a Monday
        If edcDate.Text <> gObtainPrevMonday(edcDate.Text) Then
            imIgnoreChg = True
            edcDate.Text = gObtainPrevMonday(edcDate.Text)
            'ilChg = False
        End If
        '11/2/13: End of change
                
        If Trim$(edcDate.Text) <> "" Then
            imcPrt.Visible = True
        Else
            imcPrt.Visible = False
        End If
    End If
    If ilChg Then
        DoEvents
        mSetShow MISSEDAREAINDEX
        mBuildMissedView imDW, True
        DoEvents
        If imDW = 0 Then
            mForceRepaintDaily  'Repop t_evt
            pbcSelect(0).Visible = True
            pbcSelect(1).Visible = False
        Else
            pbcSelect(1).Visible = True
            pbcSelect(0).Visible = False
            If imViewSelect = 0 Then
                lmSelectedChfCode = -1
                lmSelectedFsfCode = -1
                'pbcContract.Cls
                'mVbcContractMinMax True
            Else
                lmSelectedChfCode = lmHighlightCntrCode
                lmCountChfCode = lmSelectedChfCode
                lmSelectedFsfCode = lmHighlightFeedCode
                lmCountFsfCode = lmSelectedFsfCode
                'imCountLineNo = -1
                mCntrCounts
                Screen.MousePointer = vbHourglass
                pbcDailyRot.Cls
                pbcHourRot.Cls
                pbcDailyRot_Paint
                pbcHourRot_Paint
                'pbcContract.Cls
                'mVbcContractMinMax True
            End If
            mForceRepaintWeekly False   'repop t_Evt
        End If
    End If
End Sub
Private Function mRemapRow(tlEvt() As EVTINFO, ilRowNo As Integer) As Integer
    Dim ilLoop As Integer
    Dim ilCount As Integer
    
    mRemapRow = ilRowNo
    '6/18/18: Conflict spots replaced with yellow so that the avails line up across days
    Exit Function
    If ckcShowGhost.Value = vbUnchecked Then
        ilCount = 0
        'For ilLoop = LBound(tlEvt) To UBound(tlEvt) - 1 Step 1
        For ilLoop = imLBEvt To UBound(tlEvt) - 1 Step 1
            If ((tlEvt(ilLoop).iType >= 2) And (tlEvt(ilLoop).iType <= 9)) Or ((tlEvt(ilLoop).iType = 99)) Or ((tlEvt(ilLoop).iType = 100)) Or ((tlEvt(ilLoop).iType = -1)) Then
                ilCount = ilCount + 1
                If ilCount = ilRowNo Then
                    mRemapRow = ilLoop
                    Exit Function
                End If
            End If
        Next ilLoop
    End If
End Function


Private Sub mSortMissed(tlSdfMdExt() As SDFMDEXT)
    Dim ilIndex As Integer
    Dim slGameNo As String
    Dim ilPos As Integer
    Dim slStr As String
    Dim slCnt As String
    Dim slDate As String
    Dim llTime As Long
    Dim slTime As String
    Dim ilRet As Integer
    
    If imSortIndex = -1 Then
        Exit Sub
    End If
    If imSortIndex = 2 Then 'Length
    ElseIf imSortIndex = 3 Then 'Price
        If imMoreIndex <> 1 Then
            lbcMore.ListIndex = 1
            tmcSetShow.Enabled = False
            mSetShow SHOWPRICEINDEX
        End If
    Else
    End If
    'For ilIndex = LBound(tlSdfMdExt) To UBound(tlSdfMdExt) - 1 Step 1
    For ilIndex = imLBSdfMdExt To UBound(tlSdfMdExt) - 1 Step 1
        slGameNo = ""
        If tlSdfMdExt(ilIndex).iGameNo > 0 Then
            slGameNo = tlSdfMdExt(ilIndex).iGameNo
            Do While Len(slGameNo) < 5
                slGameNo = "0" & slGameNo
            Loop
        End If
        If imSortIndex = 2 Then 'Length
            slStr = tlSdfMdExt(ilIndex).iLen
            Do While Len(slStr) < 3
                slStr = "0" & slStr
            Loop
        ElseIf imSortIndex = 3 Then 'Price
            slStr = Trim$(tlSdfMdExt(ilIndex).sPrice)
            slStr = gSubStr("9999999.99", slStr)
            Do While Len(slStr) < 10
                slStr = "0" & slStr
            Loop
        ElseIf imSortIndex = 1 Then 'daypart start time
            ilRet = mReadChfClfRdfRec(tlSdfMdExt(ilIndex).lChfCode, tlSdfMdExt(ilIndex).iLineNo, tlSdfMdExt(ilIndex).lFsfCode)
            slStr = mGetLineDaypartInfo(False, True)
            ilPos = InStr(1, slStr, "-")
            If ilPos > 0 Then
                slStr = Left(slStr, ilPos - 1)
                slStr = Trim$(str$(gTimeToLong(slStr, False)))
                Do While Len(slStr) < 7
                    slStr = "0" & slStr
                Loop
            End If
        Else
            slStr = Trim$(tlSdfMdExt(ilIndex).sShow)
        End If
        If Trim$(tlSdfMdExt(ilIndex).sKey) = "" Then
            slCnt = tlSdfMdExt(ilIndex).lCntrNo
            Do While Len(slCnt) < 7
                slCnt = "0" & slCnt
            Loop
            gUnpackDateForSort tlSdfMdExt(ilIndex).iDate(0), tlSdfMdExt(ilIndex).iDate(1), slDate
            gUnpackTime tlSdfMdExt(ilIndex).iTime(0), tlSdfMdExt(ilIndex).iTime(1), "A", "1", slTime
            llTime = CLng(gTimeToCurrency(slTime, False))
            slTime = Trim$(str$(llTime))
            Do While Len(slTime) < 7
                slTime = "0" & slTime
            Loop
            If slGameNo <> "" Then
                tlSdfMdExt(ilIndex).sKey = slGameNo & "|" & tlSdfMdExt(ilIndex).sAdvtAbbr & "|" & slCnt & "|" & slDate & "|" & slTime
            Else
                tlSdfMdExt(ilIndex).sKey = tlSdfMdExt(ilIndex).sAdvtAbbr & "|" & slCnt & "|" & slDate & "|" & slTime
            End If
        End If
        tlSdfMdExt(ilIndex).sKey = slStr & slGameNo & "!" & Trim$(tlSdfMdExt(ilIndex).sKey)
    Next ilIndex
    ReDim tlTemp(0 To UBound(tlSdfMdExt) - 1) As SDFMDEXT
    For ilIndex = imLBSdfMdExt To UBound(tlSdfMdExt) - 1 Step 1
        tlTemp(ilIndex - 1) = tlSdfMdExt(ilIndex)
    Next ilIndex
    'If UBound(tlSdfMdExt) - 1 > 1 Then
    '    ArraySortTyp fnAV(tlSdfMdExt(), 1), UBound(tlSdfMdExt) - 1, 0, LenB(tlSdfMdExt(1)), 0, LenB(tlSdfMdExt(1).sKey), 0
    'End If
    If UBound(tlTemp) > 1 Then
        ArraySortTyp fnAV(tlTemp(), 0), UBound(tlTemp), 0, LenB(tlTemp(0)), 0, LenB(tlTemp(0).sKey), 0
    End If
    For ilIndex = UBound(tlSdfMdExt) - 1 To 0 Step -1
        tlSdfMdExt(ilIndex + 1) = tlTemp(ilIndex)
    Next ilIndex
    tlSdfMdExt(0).lChfCode = -1
    tlSdfMdExt(0).lCntrNo = -1
    tlSdfMdExt(0).lRecPos = -1
    tlSdfMdExt(0).iSelected = 0
    tlSdfMdExt(0).lSdfCode = -1
    tlSdfMdExt(0).sKey = ""
    
    'For ilIndex = LBound(tlSdfMdExt) To UBound(tlSdfMdExt) - 1 Step 1
    For ilIndex = imLBSdfMdExt To UBound(tlSdfMdExt) - 1 Step 1
        ilPos = InStr(1, tlSdfMdExt(ilIndex).sKey, "!", vbTextCompare)
        If ilPos > 0 Then
            tlSdfMdExt(ilIndex).sKey = Trim$(Mid(tlSdfMdExt(ilIndex).sKey, ilPos + 1))
        End If
    Next ilIndex
End Sub

Private Sub mClearSelection(tlSdfMdExt() As SDFMDEXT, ilLastSelection As Integer, ilSelectCount As Integer)
    Dim ilIndex As Integer
    For ilIndex = LBound(tlSdfMdExt) To UBound(tlSdfMdExt) - 1 Step 1
        tlSdfMdExt(ilIndex).iSelected = 0
    Next ilIndex
    ilLastSelection = -1
    ilSelectCount = 0
    pbcMissed.Cls
    pbcMissed_Paint
    pbcAdWorkArea.Cls
    pbcAdWorkArea_Paint
End Sub


Private Function mAdMdMultiSelection(ilCurrentSelection As Integer) As Boolean
    Dim ilLoop As Integer
    
    mAdMdMultiSelection = False
    If imADMdShow <> 0 Then
        Exit Function
    End If
    If (imAdMdType <> 0) And (imAdMdType <> 1) And (imAdMdType <> 2) And (imAdMdType <> 3) Then
        Exit Function
    End If
    If imMouseUpShift = 0 Then
        mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
        tmAdMdSdfMdExt(ilCurrentSelection).iSelected = 1
        imAdMdLastSelection = ilCurrentSelection
        imAdMdSelectionCount = 1
        Exit Function
    End If
    If (imMouseUpShift And CTRLMASK) <> 0 Then
        If tmAdMdSdfMdExt(ilCurrentSelection).iSelected = 1 Then
            tmAdMdSdfMdExt(ilCurrentSelection).iSelected = 0
        Else
            tmAdMdSdfMdExt(ilCurrentSelection).iSelected = 1
        End If
        imAdMdLastSelection = ilCurrentSelection
        mAdMdMultiSelection = True
    End If
    If (imMouseUpShift And SHIFTMASK) <> 0 Then
        'If imAdMdLastSelection < LBound(tmAdMdSdfMdExt) Then
        If imAdMdLastSelection < imLBSdfMdExt Then
            'imAdMdLastSelection = LBound(tmAdMdSdfMdExt)
            imAdMdLastSelection = imLBSdfMdExt
        End If
        If imAdMdLastSelection < ilCurrentSelection Then
            For ilLoop = imAdMdLastSelection To ilCurrentSelection Step 1
                tmAdMdSdfMdExt(ilLoop).iSelected = 1
            Next ilLoop
        Else
            For ilLoop = ilCurrentSelection To imAdMdLastSelection Step 1
                tmAdMdSdfMdExt(ilLoop).iSelected = 1
            Next ilLoop
        End If
        imAdMdLastSelection = ilCurrentSelection
        mAdMdMultiSelection = True
    End If
    imAdMdSelectionCount = 0
    'For ilLoop = LBound(tmAdMdSdfMdExt) To UBound(tmAdMdSdfMdExt) - 1 Step 1
    For ilLoop = imLBSdfMdExt To UBound(tmAdMdSdfMdExt) - 1 Step 1
        If tmAdMdSdfMdExt(ilLoop).iSelected = 1 Then
            imAdMdSelectionCount = imAdMdSelectionCount + 1
        End If
    Next ilLoop
    If imAdMdSelectionCount > 0 Then
        If imWASelectionCount > 0 Then
            mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
        End If
    End If
    imMouseUpShift = 0
End Function

Private Function mWAMultiSelection(ilCurrentSelection As Integer) As Boolean
    Dim ilLoop As Integer
    
    mWAMultiSelection = False
    If imMouseUpShift = 0 Then
        mClearSelection tmWAMdExt(), imWALastSelection, imWASelectionCount
        tmWAMdExt(ilCurrentSelection).iSelected = 1
        imWALastSelection = ilCurrentSelection
        imWASelectionCount = 1
        Exit Function
    End If
    If (imMouseUpShift And CTRLMASK) <> 0 Then
        If tmWAMdExt(ilCurrentSelection).iSelected = 1 Then
            tmWAMdExt(ilCurrentSelection).iSelected = 0
        Else
            tmWAMdExt(ilCurrentSelection).iSelected = 1
        End If
        imWALastSelection = ilCurrentSelection
        mWAMultiSelection = True
    End If
    If (imMouseUpShift And SHIFTMASK) <> 0 Then
        'If imWALastSelection < LBound(tmWAMdExt) Then
        If imWALastSelection < imLBSdfMdExt Then
            'imWALastSelection = LBound(tmWAMdExt)
            imWALastSelection = imLBSdfMdExt
        End If
        If imWALastSelection < ilCurrentSelection Then
            For ilLoop = imWALastSelection To ilCurrentSelection Step 1
                tmWAMdExt(ilLoop).iSelected = 1
            Next ilLoop
        Else
            For ilLoop = ilCurrentSelection To imWALastSelection Step 1
                tmWAMdExt(ilLoop).iSelected = 1
            Next ilLoop
        End If
        imWALastSelection = ilCurrentSelection
        mWAMultiSelection = True
    End If
    imWASelectionCount = 0
    'For ilLoop = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
    For ilLoop = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
        If tmWAMdExt(ilLoop).iSelected = 1 Then
            imWASelectionCount = imWASelectionCount + 1
        End If
    Next ilLoop
    If imWASelectionCount > 0 Then
        If imAdMdSelectionCount > 0 Then
            mClearSelection tmAdMdSdfMdExt(), imAdMdLastSelection, imAdMdSelectionCount
        End If
    End If
    imMouseUpShift = 0
End Function

Private Sub mAddWorkToSXF()
    Dim ilRet As Integer
    Dim ilWork As Integer
    
    'For ilWork = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
    For ilWork = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
        tmSdfSrchKey3.lCode = tmWAMdExt(ilWork).lSdfCode
        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            ilRet = gSxfAdd(hmSxf, "W", tmSdf)
            ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
        End If
    Next ilWork
    'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
    ReDim tmWAMdExt(0 To 1) As SDFMDEXT
End Sub

Private Sub mPopWorkArea()
    Dim ilRet As Integer
    Dim ilMdIndex As Integer
    Dim slMdDate As String
    Dim ilGameNo As Integer
    Dim llSdfRecPos As Long
    Dim slInfo As String
    Dim ilVef As Integer
    Dim ilAdf As Integer
    Dim ilSxf As Integer
    ReDim llSxfCode(0 To 0) As Long
    
    If bmWorkPopulated Then
        Exit Sub
    End If
    tmSxfSrchKey1.sType = "W"
    tmSxfSrchKey1.lSdfCode = 0
    ilRet = btrGetGreaterOrEqual(hmSxf, tmSxf, imSxfRecLen, tmSxfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE)   'Get first record as starting point of extend operation
    Do While (ilRet = BTRV_ERR_NONE) And (tmSxf.sType = "W")
        llSxfCode(UBound(llSxfCode)) = tmSxf.lCode
        ReDim Preserve llSxfCode(0 To UBound(llSxfCode) + 1) As Long
        ilRet = btrGetNext(hmSxf, tmSxf, imSxfRecLen, BTRV_LOCK_NONE, SETFORREADONLY)
    Loop
    For ilSxf = 0 To UBound(llSxfCode) - 1 Step 1
        tmSxfSrchKey0.lCode = llSxfCode(ilSxf)
        ilRet = btrGetEqual(hmSxf, tmSxf, imSxfRecLen, tmSxfSrchKey0, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            tmSdfSrchKey3.lCode = tmSxf.lSdfCode
            ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
            If ilRet = BTRV_ERR_NONE Then
                If tmSdf.sSchStatus = "M" Then
                    ilVef = gBinarySearchVef(tmSxf.iMissedVefCode)
                    If ilVef <> -1 Then
                        If ((tgMVef(ilVef).sType = "G") And (tmVef.sType = "G") And (tgMVef(ilVef).iCode = tmVef.iCode)) Or ((tgMVef(ilVef).sType <> "G") And (tmVef.sType <> "G")) Then
                            ilMdIndex = UBound(tmWAMdExt)
                            gUnpackDate tmSdf.iDate(0), tmSdf.iDate(1), slMdDate
                            ilRet = btrGetPosition(hmSdf, llSdfRecPos)
                            If ilRet = BTRV_ERR_NONE Then
                                tmWAMdExt(ilMdIndex).lRecPos = llSdfRecPos
                                tmWAMdExt(ilMdIndex).lSdfCode = tmSdf.lCode
                                tmWAMdExt(ilMdIndex).iDate(0) = tmSdf.iDate(0)
                                tmWAMdExt(ilMdIndex).iDate(1) = tmSdf.iDate(1)
                                tmWAMdExt(ilMdIndex).iTime(0) = tmSdf.iTime(0)
                                tmWAMdExt(ilMdIndex).iTime(1) = tmSdf.iTime(1)
                                tmWAMdExt(ilMdIndex).lChfCode = tmSdf.lChfCode
                                tmWAMdExt(ilMdIndex).lFsfCode = tmSdf.lFsfCode
                                tmWAMdExt(ilMdIndex).iLineNo = tmSdf.iLineNo
                                tmWAMdExt(ilMdIndex).iAdfCode = tmSdf.iAdfCode
                                tmWAMdExt(ilMdIndex).sAdvtAbbr = ""
                                ilAdf = gBinarySearchAdf(tmSdf.iAdfCode)
                                If ilAdf <> -1 Then
                                    tmWAMdExt(ilMdIndex).sAdvtAbbr = tgCommAdf(ilAdf).sAbbr
                                End If
                                tmWAMdExt(ilMdIndex).iMnfMissed = igMnfMissed
                                tmWAMdExt(ilMdIndex).iLen = tmSdf.iLen
                                'gBookSpot now handles retaining copy
                                tmWAMdExt(ilMdIndex).iRotNo = tmSdf.iRotNo
                                tmWAMdExt(ilMdIndex).sPtType = tmSdf.sPtType
                                tmWAMdExt(ilMdIndex).lCopyCode = tmSdf.lCopyCode
                                tmWAMdExt(ilMdIndex).lchfcxfCode = -1
                                tmWAMdExt(ilMdIndex).lClfCxfCode = -1
                                tmWAMdExt(ilMdIndex).lchfcxfInt = -1
                                tmWAMdExt(ilMdIndex).iSelected = 0
                                'tmWAMdExt(ilMdIndex).lSxfCode = tmSxf.lCode
                                ilGameNo = tmSdf.iGameNo
                                tmWAMdExt(ilMdIndex).lSxfCode = 0
                                tmSxfSrchKey1.sType = "G"
                                tmSxfSrchKey1.lSdfCode = tmSdf.lCode
                                ilRet = btrGetEqual(hmSxf, tmSxf, imSxfRecLen, tmSxfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORWRITE)   'Get first record as starting point of extend operation
                                If ilRet = BTRV_ERR_NONE Then
                                    tmWAMdExt(ilMdIndex).lSxfCode = tmSxf.lCode
                                End If
                                slInfo = mMakeMissedInfo(tmWAMdExt(ilMdIndex).lChfCode, tmWAMdExt(ilMdIndex).iLineNo, tmWAMdExt(ilMdIndex).lFsfCode, ilGameNo, slMdDate, tmWAMdExt(ilMdIndex).sAdvtAbbr, tmWAMdExt(ilMdIndex).sAdvtProd, tmWAMdExt(ilMdIndex).sPrice, tmWAMdExt(ilMdIndex).lchfcxfCode, tmWAMdExt(ilMdIndex).lchfcxfInt, tmWAMdExt(ilMdIndex).lClfCxfCode, tmWAMdExt(ilMdIndex).iNoOrdered, tmWAMdExt(ilMdIndex).iLineInfo, tmWAMdExt(ilMdIndex).sCntrType, tmWAMdExt(ilMdIndex).lSxfCode)
                                tmWAMdExt(ilMdIndex).iMissedMG = False
                                If Left$(slInfo, 1) = "~" Then
                                    slInfo = Mid$(slInfo, 2)
                                    tmWAMdExt(ilMdIndex).iMissedMG = True
                                End If
                                If slInfo <> "" Then
                                    'tmWAMdExt(ilMdIndex).sShow = Trim$(tmWAMdExt(ilMdIndex).sShow) & " " & slInfo
                                    tmWAMdExt(ilMdIndex).sShow = slInfo
                                End If
                                tmWAMdExt(ilMdIndex).sSplitNetwork = "N"
                                If tmClf.lRafCode > 0 Then
                                    tmWAMdExt(ilMdIndex).sSplitNetwork = "Y"
                                End If
                                '1/29/14
                                tmWAMdExt(ilMdIndex).sLiveCopy = tmClf.sLiveCopy
                                '9/23/15: not required as fixed error of vehicle not showing after length in sShow
                                'tmVefSrchKey.iCode = tmSdf.iVefCode
                                'ilRet = btrGetEqual(hmVef, tmOrigVef, imVefRecLen, tmVefSrchKey, INDEXKEY0, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
                                'tmWAMdExt(ilMdIndex).sShow = Trim$(tmWAMdExt(ilMdIndex).sShow) & " " & Trim$(tmOrigVef.sName)
                                ReDim Preserve tmWAMdExt(0 To UBound(tmWAMdExt) + 1) As SDFMDEXT
                            End If
                        End If
                    End If
                Else
                End If
            End If
        End If
    Next ilSxf
    bmWorkPopulated = True
    mVbcHoldMinMax False
    pbcAdWorkArea.Cls
    pbcAdWorkArea_Paint
End Sub

Private Sub mMoveWorkToMissed()
    Dim ilWork As Integer
    Dim ilRet As Integer
    
    'For ilWork = LBound(tmWAMdExt) To UBound(tmWAMdExt) - 1 Step 1
    For ilWork = imLBSdfMdExt To UBound(tmWAMdExt) - 1 Step 1
        tmSdfSrchKey3.lCode = tmWAMdExt(ilWork).lSdfCode
        ilRet = btrGetEqual(hmSdf, tmSdf, imSdfRecLen, tmSdfSrchKey3, INDEXKEY3, BTRV_LOCK_NONE, SETFORREADONLY)   'Get first record as starting point of extend operation
        If ilRet = BTRV_ERR_NONE Then
            If (tmSdf.sFromWorkArea = "Y") Then
                tmSxfSrchKey1.sType = "W"
                tmSxfSrchKey1.lSdfCode = tmSdf.lCode
                ilRet = btrGetEqual(hmSxf, tmSxf, imSxfRecLen, tmSxfSrchKey1, INDEXKEY1, BTRV_LOCK_NONE, SETFORREADONLY)
                If ilRet = BTRV_ERR_NONE Then
                    ilRet = btrDelete(hmSxf)
                End If
            End If
            tmSdf.sFromWorkArea = "N"
            ilRet = btrUpdate(hmSdf, tmSdf, imSdfRecLen)
        End If
    Next ilWork
    'ReDim tmWAMdExt(1 To 1) As SDFMDEXT
    ReDim tmWAMdExt(0 To 1) As SDFMDEXT
End Sub

Private Sub mDragOverCheck(ilRow As Integer, ilCol As Integer, tlSrceEvt() As EVTINFO, ilIndex As Integer, tlDestEvt() As EVTINFO)
    Dim ilRet As Integer
    
    ilRet = mAvailRoom(DRAGCONTRACT, ilCol, imDragIndexSrce, tlSrceEvt(), ilIndex, tlDestEvt())
    
    If ilRet Then
        mSetContractIcon tlDestEvt(ilIndex)
        imDragRowNoDest = ilRow + vbcContract.Value - 1
        imDragIndexDest = ilIndex
        imDragColNoDest = ilCol
        imDragDest = DRAGCONTRACT     'Not defined
    Else
        lacAFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
    End If

End Sub

Private Sub mDragOverSwapCheck(ilForm As Integer, ilRow As Integer, ilCol As Integer, tlEvt() As EVTINFO, ilIndex As Integer, tlMdEvt() As SDFMDEXT)
    Dim ilRet As Integer
    If ilForm = 1 Then
        ilRet = mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tlEvt(), imDragIndexSrce, tlMdEvt())
    ElseIf ilForm = 2 Then
        ilRet = mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tlEvt(), 1, tlMdEvt())
    ElseIf ilForm = 3 Then
        ilRet = mAvailRoomMdSwap(DRAGCONTRACT, ilCol, ilIndex, tlEvt(), imDragIndexSrce, tlMdEvt())
    End If
    
    If ilRet Then

        If ilForm = 1 Then
            mSetContractIconAdMd tlEvt(ilIndex), lacAdMdFrame
        ElseIf ilForm = 2 Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconReplace.DragIcon
        ElseIf ilForm = 3 Then
            mSetContractIconAdMd tmMoEvt(ilIndex), lacWAFrame(1)
        End If
        imDragRowNoDest = ilRow + vbcContract.Value - 1
        imDragIndexDest = ilIndex
        imDragColNoDest = ilCol
        imDragDest = DRAGCONTRACT     'Not defined
    Else
        If ilForm = 1 Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf ilForm = 2 Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        ElseIf ilForm = 3 Then
            lacWAFrame(1).DragIcon = IconTraf!imcIconDrag.DragIcon
        End If
    End If

End Sub

Private Function mDragOverManSchCheck(ilRow As Integer, ilCol As Integer, ilLen As Integer, ilIndex As Integer, tlEvt() As EVTINFO) As Integer
    Dim ilRet As Integer
    
    ilRet = mManSchCheckRoom(DRAGCONTRACT, ilCol, ilLen, ilIndex, tlEvt())
    mDragOverManSchCheck = ilRet
    If ilRet Then
        If rbcMode(0).Value Then
            lacAdMdFrame.DragIcon = IconTraf!imcIconMove.DragIcon
        Else
            lacAdMdFrame.DragIcon = IconTraf!imcIconFill.DragIcon
            imDblClickMode = 2
        End If
        imDragRowNoDest = ilRow + vbcContract.Value - 1
        imDragIndexDest = ilIndex
        imDragColNoDest = ilCol
        imDragDest = DRAGCONTRACT     'Not defined
    End If

End Function

Private Sub mDragoverOverbook(ilRow As Integer, ilCol As Integer, ilIndex As Integer, tlDestEvt() As EVTINFO, lacFrame As Label, ilSrceLen As Integer, Optional ilDragDest As Integer = DRAGCONTRACT)
    Dim ilLoop As Integer
    
    If imVpfIndex < LBound(tgVpf) Or imVpfIndex > UBound(tgVpf) Then
        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
    If tgVpf(imVpfIndex).sSSellOut = "M" Then
        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
    If tgVpf(imVpfIndex).sSOverBook <> "Y" Then
        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
    If (imDblClickMode = 2) Or (rbcMode(1).Value) Then
        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
        Exit Sub
    End If
    If imDragSrce = DRAGCONTRACT Or imDragSrce = DRAGLOG1 Or imDragSrce = DRAGLOG2 Then
        If ilCol = imDragColNoSrce Then
            ilLoop = imDragIndexSrce
            Do
                ilLoop = ilLoop - 1
                'If ilLoop < LBound(tlDestEvt) Then
                If ilLoop < imLBEvt Then
                    Exit Do
                End If
                If (tlDestEvt(ilLoop).iType >= 2) And (tlDestEvt(ilLoop).iType <= 9) Then
                    If (ilLoop = ilRow) And (ilDragDest = imDragSrce) Then
                        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        Exit Sub
                    End If
                    Exit Do
                End If
            Loop While ilLoop > imLBEvt
        End If
    End If
    If tlDestEvt(ilIndex).iType >= 2 And tlDestEvt(ilIndex).iType <= 9 Then
        
        If tlDestEvt(ilIndex).iType = 2 Then   'Contract avail
            If (smDragCntrType = "M") And (tgSpf.sSchdPromo = "Y") Then
                If ((Asc(tgSpf.sUsingFeatures3) And PROMOINTOCONTRACTAVAILS) <> PROMOINTOCONTRACTAVAILS) Then
                    lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
            Else
                If (smDragCntrType = "S") And (tgSpf.sSchdPSA = "Y") Then
                    If ((Asc(tgSpf.sUsingFeatures3) And PSAINTOCONTRACTAVAILS) <> PSAINTOCONTRACTAVAILS) Then
                        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        Exit Sub
                    End If
                End If
            End If
        End If
        If tlDestEvt(ilIndex).iType = 8 Then   'PSA Avail- only allow PSAs
            If (smDragCntrType <> "S") Or (tgSpf.sSchdPSA <> "Y") Then
                lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Sub
            End If
        End If
        If tlDestEvt(ilIndex).iType = 9 Then   'Promo Avail- only allow promos
            If (smDragCntrType <> "M") Or (tgSpf.sSchdPromo <> "Y") Then
                lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Sub
            End If
        End If
        
        ilLoop = ilIndex + 1
        Do
            If tlDestEvt(ilLoop).iType <= 9 Or (ilLoop + 1 = UBound(tlDestEvt)) Then
                lacFrame.DragIcon = IconTraf!imcIconOverbook.DragIcon
                If ilDragDest = DRAGCONTRACT Then
                    imDragRowNoDest = ilRow + vbcContract.Value - 1
                ElseIf ilDragDest = DRAGLOG1 Then
                    imDragRowNoDest = ilRow + vbcLog1.Value - 1
                ElseIf ilDragDest = DRAGLOG2 Then
                    imDragRowNoDest = ilRow + vbcLog2.Value - 1
                Else
                    lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                    Exit Sub
                End If
                    
                imDragIndexDest = ilIndex
                imDragColNoDest = ilCol
                imDragDest = ilDragDest
                Exit Do
            ElseIf tlDestEvt(ilLoop).iType <= 99 Then
                If tlDestEvt(ilLoop).iUnits <= 0 Or tlDestEvt(ilLoop).lLen < ilSrceLen Then
                    lacFrame.DragIcon = IconTraf!imcIconOverbook.DragIcon
                    'imDragRowNoDest = ilRow + vbcContract.Value - 1
                    If ilDragDest = DRAGCONTRACT Then
                        imDragRowNoDest = ilRow + vbcContract.Value - 1
                    ElseIf ilDragDest = DRAGLOG1 Then
                        imDragRowNoDest = ilRow + vbcLog1.Value - 1
                    ElseIf ilDragDest = DRAGLOG2 Then
                        imDragRowNoDest = ilRow + vbcLog2.Value - 1
                    Else
                        lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                        Exit Sub
                    End If
                    imDragIndexDest = ilIndex
                    imDragColNoDest = ilCol
                    imDragDest = ilDragDest 'DRAGCONTRACT
                    Exit Do
                End If
                lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
                Exit Do
            End If
            ilLoop = ilLoop + 1
        Loop While ilLoop < UBound(tlDestEvt)
     Else
         lacFrame.DragIcon = IconTraf!imcIconDrag.DragIcon
     End If
End Sub

Private Sub mOverbookAvailSetup(tlEvt() As EVTINFO, ilSrceCol As Integer)
    Dim ilLoop As Integer
    Dim ilMove As Integer
    Dim llLen As Long
    
    'ilLoop = imDragIndexDest + 1
    'llLen = 30
    'Do
    '    If tlEvt(ilLoop).iType <= 9 Then
    '        ReDim Preserve tlEvt(LBound(tlEvt) To UBound(tlEvt) + 1) As EVTINFO
    '        For ilMove = UBound(tlEvt) To ilLoop Step -1
    '            tlEvt(ilMove) = tlEvt(ilMove - 1)
    '        Next ilMove
    '        If ilSrceCol <> -1 And imDragColNoDest = ilSrceCol And ilLoop <= imDragIndexSrce Then
    '            imDragIndexSrce = imDragIndexSrce + 1
    '        End If
    '        imDragIndexDest = ilLoop
    '        Exit Do
    '    ElseIf tlEvt(ilLoop).iType = 99 Then
    '        imDragIndexDest = ilLoop
    '        Exit Do
    '    ElseIf (ilLoop + 1 = UBound(tlEvt)) Then
    '        imDragIndexDest = UBound(tlEvt) - 1
    '        ReDim Preserve tlEvt(LBound(tlEvt) To UBound(tlEvt) + 1) As EVTINFO
    '        Exit Do
    '    End If
    '    ilLoop = ilLoop + 1
    'Loop While ilLoop < UBound(tlEvt)
    'tlEvt(imDragIndexDest).iType = 99
    'tlEvt(imDragIndexDest).lChfCode = 0
    'tlEvt(imDragIndexDest).lSdfCode = 0
    'tlEvt(imDragIndexDest).lLen = llLen
    'tlEvt(imDragIndexDest).iUnits = 1
    'tlEvt(imDragIndexDest).sShow = "  " & "1" & "/" & Trim$(str$(llLen))    'Time/Units/Seconds
    'tlEvt(imDragIndexDest).sPrice = ""
    'tlEvt(imDragIndexDest).sPrgName = ""
    'Find last spot in break
    ilLoop = imDragIndexDest + 1
    Do
        If tlEvt(ilLoop).iType <= 9 Then
            imDragIndexDest = ilLoop - 1
            Exit Do
        ElseIf tlEvt(ilLoop).iType = 99 Then
            imDragIndexDest = ilLoop
            Exit Do
        ElseIf (ilLoop + 1 = UBound(tlEvt)) Then
            imDragIndexDest = UBound(tlEvt) - 1
            Exit Do
        End If
        ilLoop = ilLoop + 1
    Loop While ilLoop < UBound(tlEvt)
    smOverbookMode = "Y"
End Sub

Private Sub mResetAvailUnitSec(ilLen As Integer)
    If smOverbookMode <> "Y" Then
        Exit Sub
    End If
    If imDragDest = DRAGCONTRACT Then
        Select Case imDragColNoDest
            Case 1
                mOverbookAvailUnitSec tmMoEvt(), ilLen
            Case 2
                mOverbookAvailUnitSec tmTuEvt(), ilLen
            Case 3
                mOverbookAvailUnitSec tmWeEvt(), ilLen
            Case 4
                mOverbookAvailUnitSec tmThEvt(), ilLen
            Case 5
                mOverbookAvailUnitSec tmFrEvt(), ilLen
            Case 6
                mOverbookAvailUnitSec tmSaEvt(), ilLen
            Case 7
                mOverbookAvailUnitSec tmSuEvt(), ilLen
        End Select
    ElseIf imDragDest = DRAGLOG1 Then
        mOverbookAvailUnitSec tmL1Evt(), ilLen
    ElseIf imDragDest = DRAGLOG2 Then
        mOverbookAvailUnitSec tmL2Evt(), ilLen
    End If
End Sub

Private Sub mOverbookAvailUnitSec(tlEvt() As EVTINFO, ilLen As Integer)
    Dim ilLoop As Integer
    Dim ilSec As Integer
    Dim ilPos1 As Integer
    Dim ilPos2 As Integer
    'Find Break
    ilSec = 0
    ilLoop = imDragIndexDest + 1    'Reference last spot in break
    Do
        ilLoop = ilLoop - 1
        If ilLoop < imLBEvt Then
            Exit Do
        End If
        If tlEvt(ilLoop).iType <= 9 Then
            tlEvt(ilLoop).iLineInfo = tlEvt(ilLoop).iLineInfo Or sSOverBook
            tlEvt(ilLoop).iUnits = tlEvt(ilLoop).iUnits + 1
            tlEvt(ilLoop).lLen = ilSec + ilLen
            ilPos1 = InStr(1, tlEvt(ilLoop).sShow, " ")
            If ilPos1 > 0 Then
                ilPos2 = InStr(ilPos1 + 1, tlEvt(ilLoop).sShow, " ")
                If ilPos2 > 0 Then
                    tlEvt(ilLoop).sShow = Left(tlEvt(ilLoop).sShow, ilPos1) & tlEvt(ilLoop).iUnits & "/" & tlEvt(ilLoop).lLen & Mid(tlEvt(ilLoop).sShow, ilPos2)
                End If
            End If
            Exit Do
            'Adjust
        ElseIf tlEvt(ilLoop).iType = 100 Then
            ilSec = ilSec + tlEvt(ilLoop).iUnits
        End If
    Loop While ilLoop > imLBEvt

End Sub
Private Sub mGridNoteColumns()
'******************************************************************************************
'* Note: VBC id'd the following unreferenced items and handled them as described:         *
'*                                                                                        *
'* Local Variables (Removed)                                                              *
'*  ilCol                         ilValue                                                 *
'******************************************************************************************


    grdNote.Row = grdNote.FixedRows - 1
    grdNote.Col = WEEKDATEINDEX
    grdNote.CellFontBold = False
    grdNote.CellFontName = "Arial"
    grdNote.CellFontSize = 6.75
    grdNote.CellForeColor = vbBlue
    grdNote.CellBackColor = LIGHTBLUE
    grdNote.TextMatrix(grdNote.Row, grdNote.Col) = "Week Date"
    grdNote.Col = NOTEINDEX
    grdNote.CellFontBold = False
    grdNote.CellFontName = "Arial"
    grdNote.CellFontSize = 6.75
    grdNote.CellForeColor = vbBlue
    grdNote.CellBackColor = LIGHTBLUE
    grdNote.TextMatrix(grdNote.Row, grdNote.Col) = "Note"

End Sub
Private Sub mGridNoteColumnWidths()
    Dim llWidth As Long
    Dim llMinWidth As Long
    Dim ilCol As Integer
    Dim ilColInc As Integer
    Dim ilLoop As Integer

    grdNote.ColWidth(NOTESORTINDEX) = 0
    grdNote.ColWidth(VNFCODEINDEX) = 0
    grdNote.ColWidth(WEEKDATEINDEX) = 0.15 * grdNote.Width
    grdNote.ColWidth(NOTEINDEX) = 0.8 * grdNote.Width
    llWidth = GRIDSCROLLWIDTH + 45
    llMinWidth = grdNote.Width
    For ilCol = 0 To grdNote.Cols - 1 Step 1
        llWidth = llWidth + grdNote.ColWidth(ilCol)
        If (grdNote.ColWidth(ilCol) > 15) And (grdNote.ColWidth(ilCol) < llMinWidth) Then
            llMinWidth = grdNote.ColWidth(ilCol)
        End If
    Next ilCol
    llWidth = grdNote.Width - llWidth
    If llWidth >= 15 Then
        Do
            llMinWidth = grdNote.Width
            For ilCol = 0 To grdNote.Cols - 1 Step 1
                If (grdNote.ColWidth(ilCol) > 15) And (grdNote.ColWidth(ilCol) < llMinWidth) Then
                    llMinWidth = grdNote.ColWidth(ilCol)
                End If
            Next ilCol
            For ilCol = grdNote.FixedCols To grdNote.Cols - 1 Step 1
                If grdNote.ColWidth(ilCol) > 15 Then
                    ilColInc = grdNote.ColWidth(ilCol) / llMinWidth
                    For ilLoop = 1 To ilColInc Step 1
                        grdNote.ColWidth(ilCol) = grdNote.ColWidth(ilCol) + 15
                        llWidth = llWidth - 15
                        If llWidth < 15 Then
                            Exit For
                        End If
                    Next ilLoop
                    If llWidth < 15 Then
                        Exit For
                    End If
                End If
            Next ilCol
        Loop While llWidth >= 15
    End If
End Sub

Private Sub mGridNoteLayout()
    Dim ilCol As Integer
    Dim ilRow As Integer

    For ilRow = 0 To grdNote.Rows - 1 Step 1
        grdNote.rowHeight(ilRow) = fgFlexGridRowH
    Next ilRow
    For ilCol = 0 To grdNote.Cols - 1 Step 1
        grdNote.ColAlignment(ilCol) = flexAlignLeftCenter
    Next ilCol
End Sub
Private Sub mNoteSortCol(ilCol As Integer)
    Dim llRow As Long
    Dim slStr As String
    Dim slSort As String
    Dim ilPos As Integer
    Dim slRow As String

    For llRow = grdNote.FixedRows To grdNote.Rows - 1 Step 1
        slStr = Trim$(grdNote.TextMatrix(llRow, WEEKDATEINDEX))
        If slStr <> "" Then
            If ilCol = WEEKDATEINDEX Then
                slSort = gDateValue(grdNote.TextMatrix(llRow, WEEKDATEINDEX))
                Do While Len(slSort) < 6
                    slSort = slSort & "0"
                Loop
            ElseIf ilCol = NOTEINDEX Then
                slSort = Left(grdNote.TextMatrix(llRow, NOTEINDEX), 20)
                Do While Len(slSort) < 30
                    slSort = slSort & " "
                Loop
            End If
            slStr = grdNote.TextMatrix(llRow, NOTESORTINDEX)
            ilPos = InStr(1, slStr, "|", vbTextCompare)
            If ilPos > 1 Then
                slStr = Left$(slStr, ilPos - 1)
            End If
            If (ilCol <> imLastNoteColSorted) Or ((ilCol = imLastNoteColSorted) And (imLastNoteSort = flexSortStringNoCaseDescending)) Then
                slRow = Trim$(str$(llRow))
                Do While Len(slRow) < 4
                    slRow = "0" & slRow
                Loop
                grdNote.TextMatrix(llRow, NOTESORTINDEX) = slSort & slStr & "|" & slRow
            Else
                slRow = Trim$(str$(llRow))
                Do While Len(slRow) < 4
                    slRow = "0" & slRow
                Loop
                grdNote.TextMatrix(llRow, NOTESORTINDEX) = slSort & slStr & "|" & slRow
            End If
        End If
    Next llRow
    If ilCol = imLastNoteColSorted Then
        imLastNoteColSorted = NOTESORTINDEX
    Else
        imLastNoteColSorted = -1
        imLastNoteSort = -1
    End If
    gGrid_SortByCol grdNote, WEEKDATEINDEX, NOTESORTINDEX, imLastNoteColSorted, imLastNoteSort
    imLastNoteColSorted = ilCol
End Sub

Private Sub mPopNotes(ilVefCode As Integer)
    Dim llRow As Long
    Dim ilCol As Integer
    Dim ilLoop As Integer
    Dim slSQLQuery As String
    
    If ilVefCode <= 0 Then
        Exit Sub
    End If
    grdNote.Redraw = False


    grdNote.Redraw = False
    grdNote.Rows = imInitNoRows + 1
    For llRow = grdNote.FixedRows To grdNote.Rows - 1 Step 1
        grdNote.rowHeight(llRow) = fgFlexGridRowH
        For ilCol = 0 To grdNote.Cols - 1 Step 1
            If ilCol = VNFCODEINDEX Then
                grdNote.TextMatrix(llRow, ilCol) = "0"
            Else
                grdNote.TextMatrix(llRow, ilCol) = ""
            End If
        Next ilCol
    Next llRow
    llRow = grdNote.FixedRows
    
    
    slSQLQuery = "Select * from VNF_Vehicle_Note Where vnfVefCode = " & ilVefCode & " And vnfWeekDate >= '" & Format(gObtainPrevMonday(Format(gNow(), "ddddd")), sgSQLDateForm) & "'" & " Order by vnfWeekDate"
    Set rst_Vnf = gSQLSelectCall(slSQLQuery)
    Do While Not rst_Vnf.EOF
        If llRow >= grdNote.Rows Then
            grdNote.AddItem ""
            grdNote.rowHeight(llRow) = fgFlexGridRowH
        End If
        grdNote.TextMatrix(llRow, WEEKDATEINDEX) = Format(rst_Vnf!vnfWeekDate, "m/d/yy")
        grdNote.TextMatrix(llRow, NOTEINDEX) = gStripChr0(rst_Vnf!vnfNote)
        grdNote.TextMatrix(llRow, VNFCODEINDEX) = rst_Vnf!vnfCode
        llRow = llRow + 1
        
        rst_Vnf.MoveNext
    Loop
    If llRow >= grdNote.Rows Then
        grdNote.AddItem ""
        grdNote.rowHeight(llRow) = fgFlexGridRowH
        grdNote.TextMatrix(llRow, VNFCODEINDEX) = "0"
    End If
    grdNote.Redraw = True

End Sub

Private Sub mSaveNotes(ilVefCode As Integer, blRepopNotes As Boolean)
    Dim ilRet As Integer
    Dim ilRow As Integer
    Dim slSQLQuery As String
    Dim llRet As Long
    Dim blRepopReq As Boolean
    
    If ilVefCode <= 0 Then
        Exit Sub
    End If
    blRepopReq = False
    For ilRow = grdNote.FixedRows To grdNote.Rows - 1 Step 1
        If grdNote.TextMatrix(ilRow, VNFCODEINDEX) <> "" And grdNote.TextMatrix(ilRow, VNFCODEINDEX) <> "0" Then
            'Changed
            If grdNote.TextMatrix(ilRow, WEEKDATEINDEX) <> "" Then
                'Update record
                slSQLQuery = "Update VNF_Vehicle_Note Set "
                slSQLQuery = slSQLQuery & "vnfWeekDate = '" & Format$(grdNote.TextMatrix(ilRow, WEEKDATEINDEX), sgSQLDateForm) & "', "
                slSQLQuery = slSQLQuery & "vnfEnteredDate = '" & Format$(Now, sgSQLDateForm) & "', "
                slSQLQuery = slSQLQuery & "vnfUrfCode = " & tgUrf(0).iCode & ", "
                slSQLQuery = slSQLQuery & "vnfNote = '" & Trim$(grdNote.TextMatrix(ilRow, NOTEINDEX)) & "'" '& Chr$(0) & "'"
                slSQLQuery = slSQLQuery & " Where vnfCode = " & grdNote.TextMatrix(ilRow, VNFCODEINDEX)
                llRet = gSQLWaitNoMsgBox(slSQLQuery, False)
                
            Else
                'Delete record
                slSQLQuery = "Delete From VNF_Vehicle_Note Where vnfcode = " & grdNote.TextMatrix(ilRow, VNFCODEINDEX)
                llRet = gSQLWaitNoMsgBox(slSQLQuery, False)
                blRepopReq = True
            End If
        Else
            'New
            If grdNote.TextMatrix(ilRow, WEEKDATEINDEX) <> "" And grdNote.TextMatrix(ilRow, NOTEINDEX) <> "" Then
                'Insert record
                slSQLQuery = "Insert Into VNF_Vehicle_Note ( "
                slSQLQuery = slSQLQuery & "vnfCode, "
                slSQLQuery = slSQLQuery & "vnfVefCode, "
                slSQLQuery = slSQLQuery & "vnfWeekDate, "
                slSQLQuery = slSQLQuery & "vnfEnteredDate, "
                slSQLQuery = slSQLQuery & "vnfUrfCode, "
                slSQLQuery = slSQLQuery & "vnfUnused, "
                slSQLQuery = slSQLQuery & "vnfNote "
                slSQLQuery = slSQLQuery & ") "
                slSQLQuery = slSQLQuery & "Values ( "
                slSQLQuery = slSQLQuery & 0 & ", "     'vnfCode
                slSQLQuery = slSQLQuery & ilVefCode & ", "  'vnfvefcode
                slSQLQuery = slSQLQuery & "'" & Format$(grdNote.TextMatrix(ilRow, WEEKDATEINDEX), sgSQLDateForm) & "', "    'vnfWeekdate
                slSQLQuery = slSQLQuery & "'" & Format$(Now, sgSQLDateForm) & "', " 'vnfEnteredDate
                slSQLQuery = slSQLQuery & tgUrf(0).iCode & ", " 'vnfUrfCode
                slSQLQuery = slSQLQuery & "'" & "" & "', "      'vnfUrfCode
                slSQLQuery = slSQLQuery & "'" & Trim$(grdNote.TextMatrix(ilRow, NOTEINDEX)) & "'"  '& Chr$(0)
                slSQLQuery = slSQLQuery & ") "
                llRet = gSQLWaitNoMsgBox(slSQLQuery, False)
                blRepopReq = True
            End If
        End If
    Next ilRow
    If blRepopReq And blRepopNotes Then
        mPopNotes ilVefCode
    End If
End Sub
